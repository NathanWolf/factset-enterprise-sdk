/**
 * Funds API For Digital Portals
 * Search for mutual funds and ETFs using one single consolidated API, including a criteria-based screener. The API provides also base data, key figures, and holdings.  A separate endpoint returns the possible values and value range for the parameters that the endpoint /fund/notation/screener/search accepts: Application developers can request the values and value range only for a restricted set of notations that match predefined parameters. This functionality may be used to pre-fill the values and value ranges of the parameters of the /fund/notation/screener/search endpoint so that performing a search always leads to a non-empty set of notations.  This API is fully integrated with the corresponding Quotes API, allowing access to detailed price and performance information of instruments, as well as basic security identifier cross-reference. For direct access to price histories, please refer to the Time Series API for Digital Portals.  Similar criteria based screener APIs exist for equity instruments and securitized derivatives: See the Stocks API and the Securitized Derivatives API for details.
 *
 * The version of the OpenAPI document: 2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import InlineResponse2006DataFeesInitial from './InlineResponse2006DataFeesInitial';
import InlineResponse2006DataFeesManagement from './InlineResponse2006DataFeesManagement';
import InlineResponse2006DataFeesMaximumRedemption from './InlineResponse2006DataFeesMaximumRedemption';
import InlineResponse2006DataFeesOngoing from './InlineResponse2006DataFeesOngoing';
import InlineResponse2006DataFeesPerformance from './InlineResponse2006DataFeesPerformance';

/**
 * The InlineResponse2006DataFees model module.
 * @module model/InlineResponse2006DataFees
 * @version 0.10.0
 */
class InlineResponse2006DataFees {
    /**
     * Constructs a new <code>InlineResponse2006DataFees</code>.
     * Annualized fund fees.
     * @alias module:model/InlineResponse2006DataFees
     */
    constructor() { 
        
        InlineResponse2006DataFees.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>InlineResponse2006DataFees</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/InlineResponse2006DataFees} obj Optional instance to populate.
     * @return {module:model/InlineResponse2006DataFees} The populated <code>InlineResponse2006DataFees</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new InlineResponse2006DataFees();

            if (data.hasOwnProperty('allIn')) {
                obj['allIn'] = ApiClient.convertToType(data['allIn'], 'Number');
            }
            if (data.hasOwnProperty('custodianBank')) {
                obj['custodianBank'] = ApiClient.convertToType(data['custodianBank'], 'Number');
            }
            if (data.hasOwnProperty('switching')) {
                obj['switching'] = ApiClient.convertToType(data['switching'], 'Number');
            }
            if (data.hasOwnProperty('maximumAdvisor')) {
                obj['maximumAdvisor'] = ApiClient.convertToType(data['maximumAdvisor'], 'Number');
            }
            if (data.hasOwnProperty('maximumAdministration')) {
                obj['maximumAdministration'] = ApiClient.convertToType(data['maximumAdministration'], 'Number');
            }
            if (data.hasOwnProperty('maximumDistribution')) {
                obj['maximumDistribution'] = ApiClient.convertToType(data['maximumDistribution'], 'Number');
            }
            if (data.hasOwnProperty('maximumHandling')) {
                obj['maximumHandling'] = ApiClient.convertToType(data['maximumHandling'], 'Number');
            }
            if (data.hasOwnProperty('ongoing')) {
                obj['ongoing'] = InlineResponse2006DataFeesOngoing.constructFromObject(data['ongoing']);
            }
            if (data.hasOwnProperty('performance')) {
                obj['performance'] = InlineResponse2006DataFeesPerformance.constructFromObject(data['performance']);
            }
            if (data.hasOwnProperty('management')) {
                obj['management'] = InlineResponse2006DataFeesManagement.constructFromObject(data['management']);
            }
            if (data.hasOwnProperty('maximumRedemption')) {
                obj['maximumRedemption'] = ApiClient.convertToType(data['maximumRedemption'], [InlineResponse2006DataFeesMaximumRedemption]);
            }
            if (data.hasOwnProperty('initial')) {
                obj['initial'] = InlineResponse2006DataFeesInitial.constructFromObject(data['initial']);
            }
        }
        return obj;
    }


}

/**
 * All-in fee. It is a measure of the total costs associated with investing in the fund and includes managing and operating costs.
 * @member {Number} allIn
 */
InlineResponse2006DataFees.prototype['allIn'] = undefined;

/**
 * Custodian bank fee. It is paid from the assets of the fund to the custodian bank (see attribute custodianBank) for holding the fund's assets.
 * @member {Number} custodianBank
 */
InlineResponse2006DataFees.prototype['custodianBank'] = undefined;

/**
 * Switching fee. It is paid for moving an investment from one fund to another within the same umbrella fund.
 * @member {Number} switching
 */
InlineResponse2006DataFees.prototype['switching'] = undefined;

/**
 * Maximum possible value of the advisor fee. It is paid from the assets of the investment fund to the fund company for advisory services.
 * @member {Number} maximumAdvisor
 */
InlineResponse2006DataFees.prototype['maximumAdvisor'] = undefined;

/**
 * Maximum possible value of the administration fee. It is paid for running and administration of the fund excluding expenses for an advisor and/or a manager.
 * @member {Number} maximumAdministration
 */
InlineResponse2006DataFees.prototype['maximumAdministration'] = undefined;

/**
 * Maximum possible value of the distribution fee. It s paid for distribution services provided by a distribution agent.
 * @member {Number} maximumDistribution
 */
InlineResponse2006DataFees.prototype['maximumDistribution'] = undefined;

/**
 * Maximum possible value of the handling fee. It is paid for handling services of a fund. This fee may include, but is not limited to, the administration fee, the management fee, and the distribution fee.
 * @member {Number} maximumHandling
 */
InlineResponse2006DataFees.prototype['maximumHandling'] = undefined;

/**
 * @member {module:model/InlineResponse2006DataFeesOngoing} ongoing
 */
InlineResponse2006DataFees.prototype['ongoing'] = undefined;

/**
 * @member {module:model/InlineResponse2006DataFeesPerformance} performance
 */
InlineResponse2006DataFees.prototype['performance'] = undefined;

/**
 * @member {module:model/InlineResponse2006DataFeesManagement} management
 */
InlineResponse2006DataFees.prototype['management'] = undefined;

/**
 * Maximum possible value of the redemption fee. It is a proportion of the redeemed investment amount paid once by the investor to the fund company when selling fund shares of the share class. Also called selling fee or exit charge.
 * @member {Array.<module:model/InlineResponse2006DataFeesMaximumRedemption>} maximumRedemption
 */
InlineResponse2006DataFees.prototype['maximumRedemption'] = undefined;

/**
 * @member {module:model/InlineResponse2006DataFeesInitial} initial
 */
InlineResponse2006DataFees.prototype['initial'] = undefined;






export default InlineResponse2006DataFees;

