/**
 * FactSet SCIM API
 * FactSet's SCIM API implementation.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import LocationResourceReference from './LocationResourceReference';
import PendingProductOrder from './PendingProductOrder';
import ProductResourceReference from './ProductResourceReference';

/**
 * The UserResourceUrnScimSchemasExtensionCoreFactset10 model module.
 * @module model/UserResourceUrnScimSchemasExtensionCoreFactset10
 * @version 0.20.1
 */
class UserResourceUrnScimSchemasExtensionCoreFactset10 {
    /**
     * Constructs a new <code>UserResourceUrnScimSchemasExtensionCoreFactset10</code>.
     * @alias module:model/UserResourceUrnScimSchemasExtensionCoreFactset10
     * @param username {String} A FactSet \"username\" is FactSet's logical structure for grouping serial numbers into like-groups based on roleName, geographical location or line of business.
     * @param location {module:model/LocationResourceReference} 
     */
    constructor(username, location) { 
        
        UserResourceUrnScimSchemasExtensionCoreFactset10.initialize(this, username, location);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, username, location) { 
        obj['username'] = username;
        obj['location'] = location;
    }

    /**
     * Constructs a <code>UserResourceUrnScimSchemasExtensionCoreFactset10</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/UserResourceUrnScimSchemasExtensionCoreFactset10} obj Optional instance to populate.
     * @return {module:model/UserResourceUrnScimSchemasExtensionCoreFactset10} The populated <code>UserResourceUrnScimSchemasExtensionCoreFactset10</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new UserResourceUrnScimSchemasExtensionCoreFactset10();

            if (data.hasOwnProperty('username')) {
                obj['username'] = ApiClient.convertToType(data['username'], 'String');
            }
            if (data.hasOwnProperty('serialNumber')) {
                obj['serialNumber'] = ApiClient.convertToType(data['serialNumber'], 'String');
            }
            if (data.hasOwnProperty('factSetNetId')) {
                obj['factSetNetId'] = ApiClient.convertToType(data['factSetNetId'], 'String');
            }
            if (data.hasOwnProperty('location')) {
                obj['location'] = LocationResourceReference.constructFromObject(data['location']);
            }
            if (data.hasOwnProperty('roleName')) {
                obj['roleName'] = ApiClient.convertToType(data['roleName'], 'String');
            }
            if (data.hasOwnProperty('products')) {
                obj['products'] = ApiClient.convertToType(data['products'], [ProductResourceReference]);
            }
            if (data.hasOwnProperty('pendingProductOrders')) {
                obj['pendingProductOrders'] = ApiClient.convertToType(data['pendingProductOrders'], [PendingProductOrder]);
            }
            if (data.hasOwnProperty('assertionValue')) {
                obj['assertionValue'] = ApiClient.convertToType(data['assertionValue'], 'String');
            }
        }
        return obj;
    }


}

/**
 * A FactSet \"username\" is FactSet's logical structure for grouping serial numbers into like-groups based on roleName, geographical location or line of business.
 * @member {String} username
 */
UserResourceUrnScimSchemasExtensionCoreFactset10.prototype['username'] = undefined;

/**
 * A serial number represents an individual's unique FactSet account identifier and base-workstation access. Serial numbers are allocated to an individual when a valid RoleName is present.
 * @member {String} serialNumber
 */
UserResourceUrnScimSchemasExtensionCoreFactset10.prototype['serialNumber'] = undefined;

/**
 * FactSet.net ID.
 * @member {String} factSetNetId
 */
UserResourceUrnScimSchemasExtensionCoreFactset10.prototype['factSetNetId'] = undefined;

/**
 * @member {module:model/LocationResourceReference} location
 */
UserResourceUrnScimSchemasExtensionCoreFactset10.prototype['location'] = undefined;

/**
 * Predetermined role of specific individual. Issues individual a base FactSet workstation and serial number. If passed as NULL a base-FactSet workstation will be allocated to the individual granting the individual a FactSet SerialNumber
 * @member {String} roleName
 */
UserResourceUrnScimSchemasExtensionCoreFactset10.prototype['roleName'] = undefined;

/**
 * An array of FactSet products to allocate/remove from an individual. Individual must have a FactSet serial number associated with them.
 * @member {Array.<module:model/ProductResourceReference>} products
 */
UserResourceUrnScimSchemasExtensionCoreFactset10.prototype['products'] = undefined;

/**
 * An array of pending FactSet product orders.
 * @member {Array.<module:model/PendingProductOrder>} pendingProductOrders
 */
UserResourceUrnScimSchemasExtensionCoreFactset10.prototype['pendingProductOrders'] = undefined;

/**
 * Field containing the value, passed as nameID, used to assert the identity of an individual via SAML2.0 which maps service-provider-side to a FactSet serial number. Only applicable to individuals with a FactSet serial number with a Federation setup between your domain and FactSet's
 * @member {String} assertionValue
 */
UserResourceUrnScimSchemasExtensionCoreFactset10.prototype['assertionValue'] = undefined;






export default UserResourceUrnScimSchemasExtensionCoreFactset10;

