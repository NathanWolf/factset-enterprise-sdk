/**
 * FactSet SCIM API
 * FactSet's SCIM API implementation.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import VermilionUserResourceEmails from './VermilionUserResourceEmails';
import VermilionUserResourceEntitlements from './VermilionUserResourceEntitlements';
import VermilionUserResourceGroups from './VermilionUserResourceGroups';
import VermilionUserResourceMeta from './VermilionUserResourceMeta';
import VermilionUserResourceName from './VermilionUserResourceName';
import VermilionUserResourcePhoneNumbers from './VermilionUserResourcePhoneNumbers';
import VermilionUserResourcePhotos from './VermilionUserResourcePhotos';
import VermilionUserResourceRoles from './VermilionUserResourceRoles';

/**
 * The VermilionUserResource model module.
 * @module model/VermilionUserResource
 */
class VermilionUserResource {
    /**
     * Constructs a new <code>VermilionUserResource</code>.
     * @alias module:model/VermilionUserResource
     * @param userName {String} A service provider's unique identifier for the user, typically used by the user to directly authenticate to the service provider. Each User MUST include a non-empty userName value. This identifier MUST be unique across the service provider's entire set of Users.
     * @param domainCode {String} Domain code of Enterprise Hosting pod in which user resides. REQUIRED.
     * @param isAdministrator {Boolean} Whether the user can perform maintenance on other users. REQUIRED.
     */
    constructor(userName, domainCode, isAdministrator) { 
        
        VermilionUserResource.initialize(this, userName, domainCode, isAdministrator);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, userName, domainCode, isAdministrator) { 
        obj['userName'] = userName;
        obj['domainCode'] = domainCode;
        obj['isAdministrator'] = isAdministrator;
    }

    /**
     * Constructs a <code>VermilionUserResource</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/VermilionUserResource} obj Optional instance to populate.
     * @return {module:model/VermilionUserResource} The populated <code>VermilionUserResource</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new VermilionUserResource();

            if (data.hasOwnProperty('schemas')) {
                obj['schemas'] = ApiClient.convertToType(data['schemas'], ['String']);
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('userName')) {
                obj['userName'] = ApiClient.convertToType(data['userName'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = VermilionUserResourceName.constructFromObject(data['name']);
            }
            if (data.hasOwnProperty('displayName')) {
                obj['displayName'] = ApiClient.convertToType(data['displayName'], 'String');
            }
            if (data.hasOwnProperty('profileUrl')) {
                obj['profileUrl'] = ApiClient.convertToType(data['profileUrl'], 'String');
            }
            if (data.hasOwnProperty('userType')) {
                obj['userType'] = ApiClient.convertToType(data['userType'], 'String');
            }
            if (data.hasOwnProperty('preferredLanguage')) {
                obj['preferredLanguage'] = ApiClient.convertToType(data['preferredLanguage'], 'String');
            }
            if (data.hasOwnProperty('active')) {
                obj['active'] = ApiClient.convertToType(data['active'], 'Boolean');
            }
            if (data.hasOwnProperty('password')) {
                obj['password'] = ApiClient.convertToType(data['password'], 'String');
            }
            if (data.hasOwnProperty('authenticatedUserName')) {
                obj['authenticatedUserName'] = ApiClient.convertToType(data['authenticatedUserName'], 'String');
            }
            if (data.hasOwnProperty('tenant')) {
                obj['tenant'] = ApiClient.convertToType(data['tenant'], 'String');
            }
            if (data.hasOwnProperty('tenancies')) {
                obj['tenancies'] = ApiClient.convertToType(data['tenancies'], ['String']);
            }
            if (data.hasOwnProperty('emails')) {
                obj['emails'] = ApiClient.convertToType(data['emails'], [VermilionUserResourceEmails]);
            }
            if (data.hasOwnProperty('phoneNumbers')) {
                obj['phoneNumbers'] = ApiClient.convertToType(data['phoneNumbers'], [VermilionUserResourcePhoneNumbers]);
            }
            if (data.hasOwnProperty('photos')) {
                obj['photos'] = ApiClient.convertToType(data['photos'], [VermilionUserResourcePhotos]);
            }
            if (data.hasOwnProperty('groups')) {
                obj['groups'] = ApiClient.convertToType(data['groups'], [VermilionUserResourceGroups]);
            }
            if (data.hasOwnProperty('entitlements')) {
                obj['entitlements'] = ApiClient.convertToType(data['entitlements'], [VermilionUserResourceEntitlements]);
            }
            if (data.hasOwnProperty('roles')) {
                obj['roles'] = ApiClient.convertToType(data['roles'], [VermilionUserResourceRoles]);
            }
            if (data.hasOwnProperty('domainCode')) {
                obj['domainCode'] = ApiClient.convertToType(data['domainCode'], 'String');
            }
            if (data.hasOwnProperty('isAdministrator')) {
                obj['isAdministrator'] = ApiClient.convertToType(data['isAdministrator'], 'Boolean');
            }
            if (data.hasOwnProperty('meta')) {
                obj['meta'] = VermilionUserResourceMeta.constructFromObject(data['meta']);
            }
        }
        return obj;
    }


}

/**
 * @member {Array.<String>} schemas
 */
VermilionUserResource.prototype['schemas'] = undefined;

/**
 * @member {String} id
 */
VermilionUserResource.prototype['id'] = undefined;

/**
 * A service provider's unique identifier for the user, typically used by the user to directly authenticate to the service provider. Each User MUST include a non-empty userName value. This identifier MUST be unique across the service provider's entire set of Users.
 * @member {String} userName
 */
VermilionUserResource.prototype['userName'] = undefined;

/**
 * @member {module:model/VermilionUserResourceName} name
 */
VermilionUserResource.prototype['name'] = undefined;

/**
 * The name of the User, suitable for display to end-users. The name SHOULD be the full name of the User being described, if known.
 * @member {String} displayName
 */
VermilionUserResource.prototype['displayName'] = undefined;

/**
 * A fully qualified URL pointing to a page\\nrepresenting the User's online profile.
 * @member {String} profileUrl
 */
VermilionUserResource.prototype['profileUrl'] = undefined;

/**
 * Used to identify the relationship between the organization and the user. Typical values used might be 'Contractor', 'Employee', 'Intern', 'Temp', 'External', and 'Unknown', but any value may be used.
 * @member {String} userType
 */
VermilionUserResource.prototype['userType'] = undefined;

/**
 * Indicates the User's preferred written or spoken language.  Generally used for selecting a localized user interface; e.g., 'en_US' specifies the language English and country
 * @member {String} preferredLanguage
 */
VermilionUserResource.prototype['preferredLanguage'] = undefined;

/**
 * A Boolean value indicating the User's administrative status.
 * @member {Boolean} active
 */
VermilionUserResource.prototype['active'] = undefined;

/**
 * The User's cleartext password. This attribute is intended to be used as a means to specify an initial password when creating a new User or to reset an existing User's password.
 * @member {String} password
 */
VermilionUserResource.prototype['password'] = undefined;

/**
 * The authenticated user name of the user
 * @member {String} authenticatedUserName
 */
VermilionUserResource.prototype['authenticatedUserName'] = undefined;

/**
 * The tenant this user is in
 * @member {String} tenant
 */
VermilionUserResource.prototype['tenant'] = undefined;

/**
 * Tenancies assigned to the user.
 * @member {Array.<String>} tenancies
 */
VermilionUserResource.prototype['tenancies'] = undefined;

/**
 * Email addresses for the user. The value SHOULD be canonicalized by the service provider, e.g., 'bjensen@example.com' instead of 'bjensen@EXAMPLE.COM'. Canonical type values of 'work', 'home', and 'other'.
 * @member {Array.<module:model/VermilionUserResourceEmails>} emails
 */
VermilionUserResource.prototype['emails'] = undefined;

/**
 * Phone numbers for the User. The value SHOULD be canonicalized by the service provider according to the format specified in RFC 3966, e.g., 'tel:+1-201-555-0123'. Canonical type values of 'work', 'home', 'mobile', 'fax', 'pager'
 * @member {Array.<module:model/VermilionUserResourcePhoneNumbers>} phoneNumbers
 */
VermilionUserResource.prototype['phoneNumbers'] = undefined;

/**
 * URLs of photos of the User.
 * @member {Array.<module:model/VermilionUserResourcePhotos>} photos
 */
VermilionUserResource.prototype['photos'] = undefined;

/**
 * A list of groups to which the user belongs, either through direct membership, through nested groups, or dynamically calculated.
 * @member {Array.<module:model/VermilionUserResourceGroups>} groups
 */
VermilionUserResource.prototype['groups'] = undefined;

/**
 * A list of entitlements for the User that represent a thing the User has.
 * @member {Array.<module:model/VermilionUserResourceEntitlements>} entitlements
 */
VermilionUserResource.prototype['entitlements'] = undefined;

/**
 * A list of roles for the User that collectively represent who the User is, e.g., 'Student', 'Faculty'.
 * @member {Array.<module:model/VermilionUserResourceRoles>} roles
 */
VermilionUserResource.prototype['roles'] = undefined;

/**
 * Domain code of Enterprise Hosting pod in which user resides. REQUIRED.
 * @member {String} domainCode
 */
VermilionUserResource.prototype['domainCode'] = undefined;

/**
 * Whether the user can perform maintenance on other users. REQUIRED.
 * @member {Boolean} isAdministrator
 */
VermilionUserResource.prototype['isAdministrator'] = undefined;

/**
 * @member {module:model/VermilionUserResourceMeta} meta
 */
VermilionUserResource.prototype['meta'] = undefined;






export default VermilionUserResource;

