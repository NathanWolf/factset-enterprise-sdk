/**
 * FactSet Estimates
 * Gain access to 20+ years of comprehensive estimates and statistics of over 250+ estimated metrics, including financial statement items, product segments, geosegments, and industry metrics. FactSet's consensus estimates are aggregated from a wide base of over 800+ contributors and cover over 19,000 active companies across 90+ countries. Data returned can be accessed on the data frequencies based on quarterly, fiscal years, and calendar years. FactSet Estimates updates on a real time basis intraday (every 5 minutes). Updating times vary based on earning season vs. non-earning season but the goal is to have the data available to the client within a few hours that FactSet receives updated information. Often times updates times can be much faster as FactSet has always been known as one of the fastest estimate providers in the market. 
 *
 * The version of the OpenAPI document: 2.5.0
 * Contact: api@factset.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The ConsensusRatings model module.
 * @module model/ConsensusRatings
 */
class ConsensusRatings {
    /**
     * Constructs a new <code>ConsensusRatings</code>.
     * @alias module:model/ConsensusRatings
     */
    constructor() { 
        
        ConsensusRatings.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ConsensusRatings</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ConsensusRatings} obj Optional instance to populate.
     * @return {module:model/ConsensusRatings} The populated <code>ConsensusRatings</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ConsensusRatings();

            if (data.hasOwnProperty('fsymId')) {
                obj['fsymId'] = ApiClient.convertToType(data['fsymId'], 'String');
            }
            if (data.hasOwnProperty('estimateDate')) {
                obj['estimateDate'] = ApiClient.convertToType(data['estimateDate'], 'Date');
            }
            if (data.hasOwnProperty('buyCount')) {
                obj['buyCount'] = ApiClient.convertToType(data['buyCount'], 'Number');
            }
            if (data.hasOwnProperty('overweightCount')) {
                obj['overweightCount'] = ApiClient.convertToType(data['overweightCount'], 'Number');
            }
            if (data.hasOwnProperty('holdCount')) {
                obj['holdCount'] = ApiClient.convertToType(data['holdCount'], 'Number');
            }
            if (data.hasOwnProperty('underweightCount')) {
                obj['underweightCount'] = ApiClient.convertToType(data['underweightCount'], 'Number');
            }
            if (data.hasOwnProperty('sellCount')) {
                obj['sellCount'] = ApiClient.convertToType(data['sellCount'], 'Number');
            }
            if (data.hasOwnProperty('ratingsNestTotal')) {
                obj['ratingsNestTotal'] = ApiClient.convertToType(data['ratingsNestTotal'], 'Number');
            }
            if (data.hasOwnProperty('ratingsNote')) {
                obj['ratingsNote'] = ApiClient.convertToType(data['ratingsNote'], 'Number');
            }
            if (data.hasOwnProperty('ratingsNoteText')) {
                obj['ratingsNoteText'] = ApiClient.convertToType(data['ratingsNoteText'], 'String');
            }
            if (data.hasOwnProperty('requestId')) {
                obj['requestId'] = ApiClient.convertToType(data['requestId'], 'String');
            }
        }
        return obj;
    }


}

/**
 * @member {String} fsymId
 */
ConsensusRatings.prototype['fsymId'] = undefined;

/**
 * Date of estimate expressed in YYYY-MM-DD format. For more details, visit [Online Assistant Page #16598](https://oa.apps.factset.com/pages/16598)
 * @member {Date} estimateDate
 */
ConsensusRatings.prototype['estimateDate'] = undefined;

/**
 * The number of Buy ratings taken into account in the calculation of a consensus. This information is shown only for a 100-day consensus.
 * @member {Number} buyCount
 */
ConsensusRatings.prototype['buyCount'] = undefined;

/**
 * The number of Overweight ratings taken into account in the calculation of a consensus. This information is shown only for a 100-day consensus.
 * @member {Number} overweightCount
 */
ConsensusRatings.prototype['overweightCount'] = undefined;

/**
 * The number of Hold ratings taken into account in the calculation of a consensus. This information is shown only for a 100-day consensus.
 * @member {Number} holdCount
 */
ConsensusRatings.prototype['holdCount'] = undefined;

/**
 * The number of Underweight ratings taken into account in the calculation of a consensus. This information is shown only for a 100-day consensus.
 * @member {Number} underweightCount
 */
ConsensusRatings.prototype['underweightCount'] = undefined;

/**
 * The number of Sell ratings taken into account in the calculation of a consensus. This information is shown only for a 100-day consensus.
 * @member {Number} sellCount
 */
ConsensusRatings.prototype['sellCount'] = undefined;

/**
 * The total number of ratings taken into account in the calculation of a consensus. This information is shown only for a 100-day consensus.
 * @member {Number} ratingsNestTotal
 */
ConsensusRatings.prototype['ratingsNestTotal'] = undefined;

/**
 * The mean average of ratings for the fiscal dates indicated, where each underlying rating is given a numerical score and then aggregated to a mean consensus - __*Individual Ratings Scores*__ |Value|Rating Description| |---|---| |1|Buy| |1.5|Overweight| |2|Hold| |2.5|Underweight| |3|Sell| 
 * @member {Number} ratingsNote
 */
ConsensusRatings.prototype['ratingsNote'] = undefined;

/**
 * The mean textual rating for the fiscal dates indicated. The text rating is assigned by falling within the below defined ranges -  __*Textual Ranges for Average*__ |Value|Rating Description| |---|---| |< 1.25|Buy| |< 1.75|Overweight| |< 2.25|Hold| |< 2.75|Underweight| |<= 3|Sell| 
 * @member {String} ratingsNoteText
 */
ConsensusRatings.prototype['ratingsNoteText'] = undefined;

/**
 * Identifier that was used for the request.
 * @member {String} requestId
 */
ConsensusRatings.prototype['requestId'] = undefined;






export default ConsensusRatings;

