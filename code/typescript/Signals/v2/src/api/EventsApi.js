/**
 * Signals API
 * Collection of endpoints for providing Signal Events, Definitions and Metadata
 *
 * The version of the OpenAPI document: 2.4.0
 * Contact: signals.api@factset.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import DateTimeInterval from '../model/DateTimeInterval';
import ErrorResponse from '../model/ErrorResponse';
import EventAdaptiveCard from '../model/EventAdaptiveCard';
import EventAdaptiveCards from '../model/EventAdaptiveCards';
import EventDetail from '../model/EventDetail';
import EventDetails from '../model/EventDetails';
import EventHeadlines from '../model/EventHeadlines';
import EventRequestBody from '../model/EventRequestBody';
import EventsEntities from '../model/EventsEntities';
import RelevanceScoreRange from '../model/RelevanceScoreRange';

/**
* Events service.
* @module api/EventsApi
* @version 0.20.0
*/
export default class EventsApi {

    /**
    * Constructs a new EventsApi. 
    * @alias module:api/EventsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * Fetch Microsoft's Adaptive Cards, which includes headlines and event details data plus hyperlinks to FactSet reports, for a single requested Signal event
     * @param {String} eventId The UUID of the event to return.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/EventAdaptiveCard} and HTTP response
     */
    getEventAdaptiveCardByIdWithHttpInfo(eventId) {
      let postBody = null;
      // verify the required parameter 'eventId' is set
      if (eventId === undefined || eventId === null) {
        throw new Error("Missing the required parameter 'eventId' when calling getEventAdaptiveCardById");
      }

      let pathParams = {
        'eventId': eventId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];


      let returnType = EventAdaptiveCard;

      return this.apiClient.callApi(
        '/events/adaptive-cards/{eventId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Fetch Microsoft's Adaptive Cards, which includes headlines and event details data plus hyperlinks to FactSet reports, for a single requested Signal event
     * @param {String} eventId The UUID of the event to return.
     * @return { Promise.< module:model/EventAdaptiveCard > } a Promise, with data of type {@link module:model/EventAdaptiveCard }
     */
    getEventAdaptiveCardById(eventId) {
      return this.getEventAdaptiveCardByIdWithHttpInfo(eventId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Fetch Microsoft's Adaptive Cards, which includes headlines and event details data plus hyperlinks to FactSet reports, based on the filtering criteria
     * @param {Object} opts Optional parameters
     * @param {module:model/DateTimeInterval} opts.created A date/time interval for filtering signal events based on their creation date. Defaults to NOW - 7 days if omitted.
     * @param {module:model/DateTimeInterval} opts.updated A date/time interval for filtering signal events based on their last updated date. Defaults to NOW - 7 days if omitted.
     * @param {String} opts.signalIds 
     * @param {String} opts.ids Comma delimited string of identifiers. An identifier can be a ticker, FactSet entity id, CUSIP or ISIN. You must provide a list of identifiers either via a ids or a portfolios parameter. If both are provided, only ids filter is used.
     * @param {String} opts.portfolios Name of a portfolio file stored by FactSet. If the portfolio contains more than 1,000 ids, only the first 1,000 ids are processed. e.g. client:techstocks.ofdb
     * @param {String} opts.themes Comma delimited string of theme ids. Full list of signal themes can be viewed at /themes.
     * @param {String} opts.categories Comma delimited string of category ids. Full list of signal categories can be viewed at /categories.
     * @param {module:model/RelevanceScoreRange} opts.userRelevanceScore A range for filtering signal events based on their relevancy score.
     * @param {String} opts.sort Comma delimited string of sortable attributes. The sort order for each sort attribute is ascending unless it is prefixed with a minus sign, in which case it is descending. If sort is not provided, the default sort applied is -userRelevanceScore (userRelevanceScore in descending order).
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/EventAdaptiveCards} and HTTP response
     */
    getEventAdaptiveCardsWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'created': opts['created'],
        'updated': opts['updated'],
        'signalIds': opts['signalIds'],
        'ids': opts['ids'],
        'portfolios': opts['portfolios'],
        'themes': opts['themes'],
        'categories': opts['categories'],
        'userRelevanceScore': opts['userRelevanceScore'],
        'sort': opts['sort']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];


      let returnType = EventAdaptiveCards;

      return this.apiClient.callApi(
        '/events/adaptive-cards', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Fetch Microsoft's Adaptive Cards, which includes headlines and event details data plus hyperlinks to FactSet reports, based on the filtering criteria
     * @param {Object} opts Optional parameters
     * @param {module:model/DateTimeInterval} opts.created A date/time interval for filtering signal events based on their creation date. Defaults to NOW - 7 days if omitted.
     * @param {module:model/DateTimeInterval} opts.updated A date/time interval for filtering signal events based on their last updated date. Defaults to NOW - 7 days if omitted.
     * @param {String} opts.signalIds 
     * @param {String} opts.ids Comma delimited string of identifiers. An identifier can be a ticker, FactSet entity id, CUSIP or ISIN. You must provide a list of identifiers either via a ids or a portfolios parameter. If both are provided, only ids filter is used.
     * @param {String} opts.portfolios Name of a portfolio file stored by FactSet. If the portfolio contains more than 1,000 ids, only the first 1,000 ids are processed. e.g. client:techstocks.ofdb
     * @param {String} opts.themes Comma delimited string of theme ids. Full list of signal themes can be viewed at /themes.
     * @param {String} opts.categories Comma delimited string of category ids. Full list of signal categories can be viewed at /categories.
     * @param {module:model/RelevanceScoreRange} opts.userRelevanceScore A range for filtering signal events based on their relevancy score.
     * @param {String} opts.sort Comma delimited string of sortable attributes. The sort order for each sort attribute is ascending unless it is prefixed with a minus sign, in which case it is descending. If sort is not provided, the default sort applied is -userRelevanceScore (userRelevanceScore in descending order).
     * @return { Promise.< module:model/EventAdaptiveCards > } a Promise, with data of type {@link module:model/EventAdaptiveCards }
     */
    getEventAdaptiveCards(opts) {
      return this.getEventAdaptiveCardsWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Fetch Signals event headlines plus all additional event details for a single requested Signal event
     * @param {String} eventId The UUID of the event to return.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/EventDetail} and HTTP response
     */
    getEventDetailByIdWithHttpInfo(eventId) {
      let postBody = null;
      // verify the required parameter 'eventId' is set
      if (eventId === undefined || eventId === null) {
        throw new Error("Missing the required parameter 'eventId' when calling getEventDetailById");
      }

      let pathParams = {
        'eventId': eventId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];


      let returnType = EventDetail;

      return this.apiClient.callApi(
        '/events/details/{eventId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Fetch Signals event headlines plus all additional event details for a single requested Signal event
     * @param {String} eventId The UUID of the event to return.
     * @return { Promise.< module:model/EventDetail > } a Promise, with data of type {@link module:model/EventDetail }
     */
    getEventDetailById(eventId) {
      return this.getEventDetailByIdWithHttpInfo(eventId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Fetch Signals event headlines plus all additional event details based on the filtering criteria
     * @param {Object} opts Optional parameters
     * @param {module:model/DateTimeInterval} opts.created A date/time interval for filtering signal events based on their creation date. Defaults to NOW - 7 days if omitted.
     * @param {module:model/DateTimeInterval} opts.updated A date/time interval for filtering signal events based on their last updated date. Defaults to NOW - 7 days if omitted.
     * @param {String} opts.signalIds 
     * @param {String} opts.ids Comma delimited string of identifiers. An identifier can be a ticker, FactSet entity id, CUSIP or ISIN. You must provide a list of identifiers either via a ids or a portfolios parameter. If both are provided, only ids filter is used.
     * @param {String} opts.portfolios Name of a portfolio file stored by FactSet. If the portfolio contains more than 1,000 ids, only the first 1,000 ids are processed. e.g. client:techstocks.ofdb
     * @param {String} opts.themes Comma delimited string of theme ids. Full list of signal themes can be viewed at /themes.
     * @param {String} opts.categories Comma delimited string of category ids. Full list of signal categories can be viewed at /categories.
     * @param {module:model/RelevanceScoreRange} opts.userRelevanceScore A range for filtering signal events based on their relevancy score.
     * @param {String} opts.sort Comma delimited string of sortable attributes. The sort order for each sort attribute is ascending unless it is prefixed with a minus sign, in which case it is descending. If sort is not provided, the default sort applied is -userRelevanceScore (userRelevanceScore in descending order).
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/EventDetails} and HTTP response
     */
    getEventDetailsWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'created': opts['created'],
        'updated': opts['updated'],
        'signalIds': opts['signalIds'],
        'ids': opts['ids'],
        'portfolios': opts['portfolios'],
        'themes': opts['themes'],
        'categories': opts['categories'],
        'userRelevanceScore': opts['userRelevanceScore'],
        'sort': opts['sort']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];


      let returnType = EventDetails;

      return this.apiClient.callApi(
        '/events/details', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Fetch Signals event headlines plus all additional event details based on the filtering criteria
     * @param {Object} opts Optional parameters
     * @param {module:model/DateTimeInterval} opts.created A date/time interval for filtering signal events based on their creation date. Defaults to NOW - 7 days if omitted.
     * @param {module:model/DateTimeInterval} opts.updated A date/time interval for filtering signal events based on their last updated date. Defaults to NOW - 7 days if omitted.
     * @param {String} opts.signalIds 
     * @param {String} opts.ids Comma delimited string of identifiers. An identifier can be a ticker, FactSet entity id, CUSIP or ISIN. You must provide a list of identifiers either via a ids or a portfolios parameter. If both are provided, only ids filter is used.
     * @param {String} opts.portfolios Name of a portfolio file stored by FactSet. If the portfolio contains more than 1,000 ids, only the first 1,000 ids are processed. e.g. client:techstocks.ofdb
     * @param {String} opts.themes Comma delimited string of theme ids. Full list of signal themes can be viewed at /themes.
     * @param {String} opts.categories Comma delimited string of category ids. Full list of signal categories can be viewed at /categories.
     * @param {module:model/RelevanceScoreRange} opts.userRelevanceScore A range for filtering signal events based on their relevancy score.
     * @param {String} opts.sort Comma delimited string of sortable attributes. The sort order for each sort attribute is ascending unless it is prefixed with a minus sign, in which case it is descending. If sort is not provided, the default sort applied is -userRelevanceScore (userRelevanceScore in descending order).
     * @return { Promise.< module:model/EventDetails > } a Promise, with data of type {@link module:model/EventDetails }
     */
    getEventDetails(opts) {
      return this.getEventDetailsWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Fetch FactSet entity IDs for events that match the filtering criteria
     * @param {Object} opts Optional parameters
     * @param {module:model/DateTimeInterval} opts.created A date/time interval for filtering signal events based on their creation date. Defaults to NOW - 7 days if omitted.
     * @param {module:model/DateTimeInterval} opts.updated A date/time interval for filtering signal events based on their last updated date. Defaults to NOW - 7 days if omitted.
     * @param {String} opts.signalIds 
     * @param {String} opts.themes Comma delimited string of theme ids. Full list of signal themes can be viewed at /themes.
     * @param {String} opts.categories Comma delimited string of category ids. Full list of signal categories can be viewed at /categories.
     * @param {module:model/RelevanceScoreRange} opts.userRelevanceScore A range for filtering signal events based on their relevancy score.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/EventsEntities} and HTTP response
     */
    getEventEntitiesWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'created': opts['created'],
        'updated': opts['updated'],
        'signalIds': opts['signalIds'],
        'themes': opts['themes'],
        'categories': opts['categories'],
        'userRelevanceScore': opts['userRelevanceScore']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];


      let returnType = EventsEntities;

      return this.apiClient.callApi(
        '/events/entities', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Fetch FactSet entity IDs for events that match the filtering criteria
     * @param {Object} opts Optional parameters
     * @param {module:model/DateTimeInterval} opts.created A date/time interval for filtering signal events based on their creation date. Defaults to NOW - 7 days if omitted.
     * @param {module:model/DateTimeInterval} opts.updated A date/time interval for filtering signal events based on their last updated date. Defaults to NOW - 7 days if omitted.
     * @param {String} opts.signalIds 
     * @param {String} opts.themes Comma delimited string of theme ids. Full list of signal themes can be viewed at /themes.
     * @param {String} opts.categories Comma delimited string of category ids. Full list of signal categories can be viewed at /categories.
     * @param {module:model/RelevanceScoreRange} opts.userRelevanceScore A range for filtering signal events based on their relevancy score.
     * @return { Promise.< module:model/EventsEntities > } a Promise, with data of type {@link module:model/EventsEntities }
     */
    getEventEntities(opts) {
      return this.getEventEntitiesWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Fetch Signals event headlines based on the filtering criteria
     * @param {Object} opts Optional parameters
     * @param {module:model/DateTimeInterval} opts.created A date/time interval for filtering signal events based on their creation date. Defaults to NOW - 7 days if omitted.
     * @param {module:model/DateTimeInterval} opts.updated A date/time interval for filtering signal events based on their last updated date. Defaults to NOW - 7 days if omitted.
     * @param {String} opts.signalIds 
     * @param {String} opts.ids Comma delimited string of identifiers. An identifier can be a ticker, FactSet entity id, CUSIP or ISIN. You must provide a list of identifiers either via a ids or a portfolios parameter. If both are provided, only ids filter is used.
     * @param {String} opts.portfolios Name of a portfolio file stored by FactSet. If the portfolio contains more than 1,000 ids, only the first 1,000 ids are processed. e.g. client:techstocks.ofdb
     * @param {String} opts.themes Comma delimited string of theme ids. Full list of signal themes can be viewed at /themes.
     * @param {String} opts.categories Comma delimited string of category ids. Full list of signal categories can be viewed at /categories.
     * @param {module:model/RelevanceScoreRange} opts.userRelevanceScore A range for filtering signal events based on their relevancy score.
     * @param {String} opts.sort Comma delimited string of sortable attributes. The sort order for each sort attribute is ascending unless it is prefixed with a minus sign, in which case it is descending. If sort is not provided, the default sort applied is -userRelevanceScore (userRelevanceScore in descending order).
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/EventHeadlines} and HTTP response
     */
    getEventHeadlinesWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'created': opts['created'],
        'updated': opts['updated'],
        'signalIds': opts['signalIds'],
        'ids': opts['ids'],
        'portfolios': opts['portfolios'],
        'themes': opts['themes'],
        'categories': opts['categories'],
        'userRelevanceScore': opts['userRelevanceScore'],
        'sort': opts['sort']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];


      let returnType = EventHeadlines;

      return this.apiClient.callApi(
        '/events/headlines', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Fetch Signals event headlines based on the filtering criteria
     * @param {Object} opts Optional parameters
     * @param {module:model/DateTimeInterval} opts.created A date/time interval for filtering signal events based on their creation date. Defaults to NOW - 7 days if omitted.
     * @param {module:model/DateTimeInterval} opts.updated A date/time interval for filtering signal events based on their last updated date. Defaults to NOW - 7 days if omitted.
     * @param {String} opts.signalIds 
     * @param {String} opts.ids Comma delimited string of identifiers. An identifier can be a ticker, FactSet entity id, CUSIP or ISIN. You must provide a list of identifiers either via a ids or a portfolios parameter. If both are provided, only ids filter is used.
     * @param {String} opts.portfolios Name of a portfolio file stored by FactSet. If the portfolio contains more than 1,000 ids, only the first 1,000 ids are processed. e.g. client:techstocks.ofdb
     * @param {String} opts.themes Comma delimited string of theme ids. Full list of signal themes can be viewed at /themes.
     * @param {String} opts.categories Comma delimited string of category ids. Full list of signal categories can be viewed at /categories.
     * @param {module:model/RelevanceScoreRange} opts.userRelevanceScore A range for filtering signal events based on their relevancy score.
     * @param {String} opts.sort Comma delimited string of sortable attributes. The sort order for each sort attribute is ascending unless it is prefixed with a minus sign, in which case it is descending. If sort is not provided, the default sort applied is -userRelevanceScore (userRelevanceScore in descending order).
     * @return { Promise.< module:model/EventHeadlines > } a Promise, with data of type {@link module:model/EventHeadlines }
     */
    getEventHeadlines(opts) {
      return this.getEventHeadlinesWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Fetch Signals event headlines plus all additional event details for up to 1000 identifiers
     * @param {module:model/EventRequestBody} eventRequestBody 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/EventDetails} and HTTP response
     */
    postEventDetailsWithHttpInfo(eventRequestBody) {
      let postBody = eventRequestBody;
      // verify the required parameter 'eventRequestBody' is set
      if (eventRequestBody === undefined || eventRequestBody === null) {
        throw new Error("Missing the required parameter 'eventRequestBody' when calling postEventDetails");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];


      let returnType = EventDetails;

      return this.apiClient.callApi(
        '/events/details', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Fetch Signals event headlines plus all additional event details for up to 1000 identifiers
     * @param {module:model/EventRequestBody} eventRequestBody 
     * @return { Promise.< module:model/EventDetails > } a Promise, with data of type {@link module:model/EventDetails }
     */
    postEventDetails(eventRequestBody) {
      return this.postEventDetailsWithHttpInfo(eventRequestBody)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Fetch Signals event headlines based on the filtering criteria for up to 1000 identifiers
     * @param {module:model/EventRequestBody} eventRequestBody 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/EventHeadlines} and HTTP response
     */
    postEventHeadlinesWithHttpInfo(eventRequestBody) {
      let postBody = eventRequestBody;
      // verify the required parameter 'eventRequestBody' is set
      if (eventRequestBody === undefined || eventRequestBody === null) {
        throw new Error("Missing the required parameter 'eventRequestBody' when calling postEventHeadlines");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];


      let returnType = EventHeadlines;

      return this.apiClient.callApi(
        '/events/headlines', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Fetch Signals event headlines based on the filtering criteria for up to 1000 identifiers
     * @param {module:model/EventRequestBody} eventRequestBody 
     * @return { Promise.< module:model/EventHeadlines > } a Promise, with data of type {@link module:model/EventHeadlines }
     */
    postEventHeadlines(eventRequestBody) {
      return this.postEventHeadlinesWithHttpInfo(eventRequestBody)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}





