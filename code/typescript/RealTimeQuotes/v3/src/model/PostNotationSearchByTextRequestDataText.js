/**
 * Quotes API For Digital Portals
 * The Quotes API combines endpoints for retrieving security end-of-day, delayed, and realtime prices with performance key figures and basic reference data on the security and market level.  The API supports over 20 different price types for each quote and comes with basic search endpoints based on security identifiers and instrument names. Market coverage is included in the *Sample Use Cases* section below.  The Digital Portal use case is focused on high-performance applications that are  * serving millions of end-users, * accessible by client browsers via the internet, * supporting subscriptions for streamed updates out-of-the-box, * typically combining a wide variety of *for Digital Portals*-APIs into a highly use-case specific solution for customers, * integrated into complex infrastructures such as existing frontend frameworks, authentication services.  All APIs labelled *for Digital Portals* have been designed for direct use by client web applications and feature extreme low latency: The average response time across all endpoints is 30 ms whereas 99% of all requests are answered in close to under 300ms.  See the [Time Series API for Digital Portals](https://developer.factset.com/api-catalog/time-series-api-digital-portals) for direct access to price histories, and the [News API for Digital Portals](https://developer.factset.com/api-catalog/news-api-digital-portals) for searching and fetching related news. 
 *
 * The version of the OpenAPI document: 3.0.0
 * Contact: api@factset.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The PostNotationSearchByTextRequestDataText model module.
 * @module model/PostNotationSearchByTextRequestDataText
 */
class PostNotationSearchByTextRequestDataText {
    /**
     * Constructs a new <code>PostNotationSearchByTextRequestDataText</code>.
     * Text-related parameters.
     * @alias module:model/PostNotationSearchByTextRequestDataText
     * @param value {String} Full-text search string. It may be enclosed in double quotes (\"). No escaping is provided, therefore it is impossible to specify a search string containing double quotes. Relevance of word starts is indicated by a phrase starting with a space character, such as \" daimler\". If only two characters are submitted, the search is executed as an exact search.
     */
    constructor(value) { 
        
        PostNotationSearchByTextRequestDataText.initialize(this, value);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, value) { 
        obj['value'] = value;
    }

    /**
     * Constructs a <code>PostNotationSearchByTextRequestDataText</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PostNotationSearchByTextRequestDataText} obj Optional instance to populate.
     * @return {module:model/PostNotationSearchByTextRequestDataText} The populated <code>PostNotationSearchByTextRequestDataText</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PostNotationSearchByTextRequestDataText();

            if (data.hasOwnProperty('attributes')) {
                obj['attributes'] = ApiClient.convertToType(data['attributes'], ['String']);
            }
            if (data.hasOwnProperty('value')) {
                obj['value'] = ApiClient.convertToType(data['value'], 'String');
            }
            if (data.hasOwnProperty('minimumMatchScore')) {
                obj['minimumMatchScore'] = ApiClient.convertToType(data['minimumMatchScore'], 'Number');
            }
        }
        return obj;
    }


}

/**
 * List of attributes to be searched in. The value `allEntitled` cannot appear with any other value.
 * @member {Array.<module:model/PostNotationSearchByTextRequestDataText.AttributesEnum>} attributes
 */
PostNotationSearchByTextRequestDataText.prototype['attributes'] = undefined;

/**
 * Full-text search string. It may be enclosed in double quotes (\"). No escaping is provided, therefore it is impossible to specify a search string containing double quotes. Relevance of word starts is indicated by a phrase starting with a space character, such as \" daimler\". If only two characters are submitted, the search is executed as an exact search.
 * @member {String} value
 */
PostNotationSearchByTextRequestDataText.prototype['value'] = undefined;

/**
 * Minimum match score for the text string. The match score has a value between 0 and 1 (inclusive), where a higher value indicates a better match than a lower one.      Examples for the two most relevant thresholds:       0.25: Exact substring match after case-folding and modifier elimination - \"Münchner Rück\" is a match for the search string \"Munch\" but not for \"Muench\".        0.50: Exact substring match - \"Münchner Rück\" is a match for the search string \"Münch\" but not for \"Munch\" or \"münch\".
 * @member {Number} minimumMatchScore
 * @default 0.25
 */
PostNotationSearchByTextRequestDataText.prototype['minimumMatchScore'] = 0.25;





/**
 * Allowed values for the <code>attributes</code> property.
 * @enum {String}
 * @readonly
 */
PostNotationSearchByTextRequestDataText['AttributesEnum'] = {

    /**
     * value: "allEntitled"
     * @const
     */
    "allEntitled": "allEntitled",

    /**
     * value: "isin"
     * @const
     */
    "isin": "isin",

    /**
     * value: "wkn"
     * @const
     */
    "wkn": "wkn",

    /**
     * value: "valor"
     * @const
     */
    "valor": "valor",

    /**
     * value: "sedol"
     * @const
     */
    "sedol": "sedol",

    /**
     * value: "cusip"
     * @const
     */
    "cusip": "cusip",

    /**
     * value: "symbol"
     * @const
     */
    "symbol": "symbol",

    /**
     * value: "normalizedSymbol"
     * @const
     */
    "normalizedSymbol": "normalizedSymbol",

    /**
     * value: "longName"
     * @const
     */
    "longName": "longName",

    /**
     * value: "shortName"
     * @const
     */
    "shortName": "shortName"
};



export default PostNotationSearchByTextRequestDataText;

