/**
 * Quotes API For Digital Portals
 * The Quotes API combines endpoints for retrieving security end-of-day, delayed, and realtime prices with performance key figures and basic reference data on the security and market level.  The API supports over 20 different price types for each quote and comes with basic search endpoints based on security identifiers and instrument names. Market coverage is included in the *Sample Use Cases* section below.  The Digital Portal use case is focused on high-performance applications that are  * serving millions of end-users, * accessible by client browsers via the internet, * supporting subscriptions for streamed updates out-of-the-box, * typically combining a wide variety of *for Digital Portals*-APIs into a highly use-case specific solution for customers, * integrated into complex infrastructures such as existing frontend frameworks, authentication services.  All APIs labelled *for Digital Portals* have been designed for direct use by client web applications and feature extreme low latency: The average response time across all endpoints is 30 ms whereas 99% of all requests are answered in close to under 300ms.  See the [Time Series API for Digital Portals](https://developer.factset.com/api-catalog/time-series-api-digital-portals) for direct access to price histories, and the [News API for Digital Portals](https://developer.factset.com/api-catalog/news-api-digital-portals) for searching and fetching related news. 
 *
 * The version of the OpenAPI document: 3.0.0
 * Contact: api@factset.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import InlineResponse20065 from '../model/InlineResponse20065';
import InlineResponse20068 from '../model/InlineResponse20068';
import InlineResponse20069 from '../model/InlineResponse20069';
import InlineResponse20070 from '../model/InlineResponse20070';
import InlineResponse20071 from '../model/InlineResponse20071';
import InlineResponse20072 from '../model/InlineResponse20072';
import InlineResponse20073 from '../model/InlineResponse20073';
import InlineResponse20074 from '../model/InlineResponse20074';
import InlineResponse20075 from '../model/InlineResponse20075';
import InlineResponse20076 from '../model/InlineResponse20076';
import InlineResponse20077 from '../model/InlineResponse20077';
import InlineResponse20078 from '../model/InlineResponse20078';
import InlineResponse20079 from '../model/InlineResponse20079';
import InlineResponse20080 from '../model/InlineResponse20080';
import InlineResponse20081 from '../model/InlineResponse20081';
import InlineResponse20082 from '../model/InlineResponse20082';
import InlineResponse20083 from '../model/InlineResponse20083';
import InlineResponse20084 from '../model/InlineResponse20084';
import InlineResponse20085 from '../model/InlineResponse20085';
import InlineResponse20086 from '../model/InlineResponse20086';
import InlineResponse20087 from '../model/InlineResponse20087';
import InlineResponse20088 from '../model/InlineResponse20088';
import InlineResponse20098 from '../model/InlineResponse20098';
import InlineResponse20099 from '../model/InlineResponse20099';
import PostNotationCategoryListRequest from '../model/PostNotationCategoryListRequest';
import PostNotationCrossReferenceFactSetIdentifierListByFactSetIdentifierRequest from '../model/PostNotationCrossReferenceFactSetIdentifierListByFactSetIdentifierRequest';
import PostNotationCrossReferenceFactSetIdentifierListByInstrumentRequest from '../model/PostNotationCrossReferenceFactSetIdentifierListByInstrumentRequest';
import PostNotationCrossReferenceListByISINRequest from '../model/PostNotationCrossReferenceListByISINRequest';
import PostNotationCrossReferenceListByInstrumentRequest from '../model/PostNotationCrossReferenceListByInstrumentRequest';
import PostNotationCrossReferenceListBySymbolRequest from '../model/PostNotationCrossReferenceListBySymbolRequest';
import PostNotationMarketListRequest from '../model/PostNotationMarketListRequest';
import PostNotationSearchByTextRequest from '../model/PostNotationSearchByTextRequest';
import PostNotationSelectionListMembersListRequest from '../model/PostNotationSelectionListMembersListRequest';

/**
* Notation service.
* @module api/NotationApi
*/
export default class NotationApi {

    /**
    * Constructs a new NotationApi. 
    * @alias module:api/NotationApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * Retrieve FactSet identifiers for a given notation.
     * <p>Retrieve FactSet identifiers for a given notation. Security and listing-level identifiers are always included, regional level identifiers are included, if available.
     * @param {String} identifier 
     * @param {module:model/String} identifierType 
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.attributes Limit the attributes returned in the response to the specified set.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse20075} and HTTP response
     */
    getNotationCrossReferenceFactSetIdentifierGetWithHttpInfo(identifier, identifierType, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'identifier' is set
      if (identifier === undefined || identifier === null) {
        throw new Error("Missing the required parameter 'identifier' when calling getNotationCrossReferenceFactSetIdentifierGet");
      }
      // verify the required parameter 'identifierType' is set
      if (identifierType === undefined || identifierType === null) {
        throw new Error("Missing the required parameter 'identifierType' when calling getNotationCrossReferenceFactSetIdentifierGet");
      }

      let pathParams = {
      };
      let queryParams = {
        'identifier': identifier,
        'identifierType': identifierType,
        '_attributes': this.apiClient.buildCollectionParam(opts['attributes'], 'csv')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];


      let returnType = InlineResponse20075;

      return this.apiClient.callApi(
        '/notation/crossReference/factSetIdentifier/get', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Retrieve FactSet identifiers for a given notation.
     * <p>Retrieve FactSet identifiers for a given notation. Security and listing-level identifiers are always included, regional level identifiers are included, if available.
     * @param {String} identifier 
     * @param {module:model/String} identifierType 
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.attributes Limit the attributes returned in the response to the specified set.
     * @return { Promise.< module:model/InlineResponse20075 > } a Promise, with data of type {@link module:model/InlineResponse20075 }
     */
    getNotationCrossReferenceFactSetIdentifierGet(identifier, identifierType, opts) {
      return this.getNotationCrossReferenceFactSetIdentifierGetWithHttpInfo(identifier, identifierType, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Translate a FactSet market symbol to a notation.
     * Translate a FactSet market symbol to a notation. This symbol is also known as TICKER_EXCHANGE.
     * @param {String} factSetMarketSymbol 
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.attributes Limit the attributes returned in the response to the specified set.
     * @param {String} opts.language 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse20071} and HTTP response
     */
    getNotationCrossReferenceGetByFactSetMarketSymbolWithHttpInfo(factSetMarketSymbol, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'factSetMarketSymbol' is set
      if (factSetMarketSymbol === undefined || factSetMarketSymbol === null) {
        throw new Error("Missing the required parameter 'factSetMarketSymbol' when calling getNotationCrossReferenceGetByFactSetMarketSymbol");
      }

      let pathParams = {
      };
      let queryParams = {
        'factSetMarketSymbol': factSetMarketSymbol,
        '_attributes': this.apiClient.buildCollectionParam(opts['attributes'], 'csv'),
        '_language': opts['language']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];


      let returnType = InlineResponse20071;

      return this.apiClient.callApi(
        '/notation/crossReference/getByFactSetMarketSymbol', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Translate a FactSet market symbol to a notation.
     * Translate a FactSet market symbol to a notation. This symbol is also known as TICKER_EXCHANGE.
     * @param {String} factSetMarketSymbol 
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.attributes Limit the attributes returned in the response to the specified set.
     * @param {String} opts.language 
     * @return { Promise.< module:model/InlineResponse20071 > } a Promise, with data of type {@link module:model/InlineResponse20071 }
     */
    getNotationCrossReferenceGetByFactSetMarketSymbol(factSetMarketSymbol, opts) {
      return this.getNotationCrossReferenceGetByFactSetMarketSymbolWithHttpInfo(factSetMarketSymbol, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Basic data for a notation.
     * Basic data for a notation.
     * @param {String} identifier 
     * @param {module:model/String} identifierType 
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.attributes Limit the attributes returned in the response to the specified set.
     * @param {String} opts.language 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse20068} and HTTP response
     */
    getNotationGetWithHttpInfo(identifier, identifierType, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'identifier' is set
      if (identifier === undefined || identifier === null) {
        throw new Error("Missing the required parameter 'identifier' when calling getNotationGet");
      }
      // verify the required parameter 'identifierType' is set
      if (identifierType === undefined || identifierType === null) {
        throw new Error("Missing the required parameter 'identifierType' when calling getNotationGet");
      }

      let pathParams = {
      };
      let queryParams = {
        'identifier': identifier,
        'identifierType': identifierType,
        '_attributes': this.apiClient.buildCollectionParam(opts['attributes'], 'csv'),
        '_language': opts['language']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];


      let returnType = InlineResponse20068;

      return this.apiClient.callApi(
        '/notation/get', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Basic data for a notation.
     * Basic data for a notation.
     * @param {String} identifier 
     * @param {module:model/String} identifierType 
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.attributes Limit the attributes returned in the response to the specified set.
     * @param {String} opts.language 
     * @return { Promise.< module:model/InlineResponse20068 > } a Promise, with data of type {@link module:model/InlineResponse20068 }
     */
    getNotationGet(identifier, identifierType, opts) {
      return this.getNotationGetWithHttpInfo(identifier, identifierType, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * End-of-day (EOD) key figures for the time range of one month.
     * End-of-day (EOD) key figures for the time range of one month.
     * @param {String} identifier 
     * @param {module:model/String} identifierType 
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.attributes Limit the attributes returned in the response to the specified set.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse20080} and HTTP response
     */
    getNotationKeyFiguresMonth1GetWithHttpInfo(identifier, identifierType, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'identifier' is set
      if (identifier === undefined || identifier === null) {
        throw new Error("Missing the required parameter 'identifier' when calling getNotationKeyFiguresMonth1Get");
      }
      // verify the required parameter 'identifierType' is set
      if (identifierType === undefined || identifierType === null) {
        throw new Error("Missing the required parameter 'identifierType' when calling getNotationKeyFiguresMonth1Get");
      }

      let pathParams = {
      };
      let queryParams = {
        'identifier': identifier,
        'identifierType': identifierType,
        '_attributes': this.apiClient.buildCollectionParam(opts['attributes'], 'csv')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];


      let returnType = InlineResponse20080;

      return this.apiClient.callApi(
        '/notation/keyFigures/month/1/get', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * End-of-day (EOD) key figures for the time range of one month.
     * End-of-day (EOD) key figures for the time range of one month.
     * @param {String} identifier 
     * @param {module:model/String} identifierType 
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.attributes Limit the attributes returned in the response to the specified set.
     * @return { Promise.< module:model/InlineResponse20080 > } a Promise, with data of type {@link module:model/InlineResponse20080 }
     */
    getNotationKeyFiguresMonth1Get(identifier, identifierType, opts) {
      return this.getNotationKeyFiguresMonth1GetWithHttpInfo(identifier, identifierType, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * End-of-day (EOD) key figures for the time range of one month, for a list of notations.
     * End-of-day (EOD) key figures for the time range of one month, for a list of notations.
     * @param {Array.<String>} identifiers 
     * @param {module:model/String} identifierType 
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.attributes Limit the attributes returned in the response to the specified set.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse20081} and HTTP response
     */
    getNotationKeyFiguresMonth1ListWithHttpInfo(identifiers, identifierType, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'identifiers' is set
      if (identifiers === undefined || identifiers === null) {
        throw new Error("Missing the required parameter 'identifiers' when calling getNotationKeyFiguresMonth1List");
      }
      // verify the required parameter 'identifierType' is set
      if (identifierType === undefined || identifierType === null) {
        throw new Error("Missing the required parameter 'identifierType' when calling getNotationKeyFiguresMonth1List");
      }

      let pathParams = {
      };
      let queryParams = {
        'identifiers': this.apiClient.buildCollectionParam(identifiers, 'csv'),
        'identifierType': identifierType,
        '_attributes': this.apiClient.buildCollectionParam(opts['attributes'], 'csv')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];


      let returnType = InlineResponse20081;

      return this.apiClient.callApi(
        '/notation/keyFigures/month/1/list', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * End-of-day (EOD) key figures for the time range of one month, for a list of notations.
     * End-of-day (EOD) key figures for the time range of one month, for a list of notations.
     * @param {Array.<String>} identifiers 
     * @param {module:model/String} identifierType 
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.attributes Limit the attributes returned in the response to the specified set.
     * @return { Promise.< module:model/InlineResponse20081 > } a Promise, with data of type {@link module:model/InlineResponse20081 }
     */
    getNotationKeyFiguresMonth1List(identifiers, identifierType, opts) {
      return this.getNotationKeyFiguresMonth1ListWithHttpInfo(identifiers, identifierType, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * End-of-day (EOD) key figures for the time range of three months.
     * End-of-day (EOD) key figures for the time range of three months.
     * @param {String} identifier 
     * @param {module:model/String} identifierType 
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.attributes Limit the attributes returned in the response to the specified set.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse20078} and HTTP response
     */
    getNotationKeyFiguresMonth3GetWithHttpInfo(identifier, identifierType, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'identifier' is set
      if (identifier === undefined || identifier === null) {
        throw new Error("Missing the required parameter 'identifier' when calling getNotationKeyFiguresMonth3Get");
      }
      // verify the required parameter 'identifierType' is set
      if (identifierType === undefined || identifierType === null) {
        throw new Error("Missing the required parameter 'identifierType' when calling getNotationKeyFiguresMonth3Get");
      }

      let pathParams = {
      };
      let queryParams = {
        'identifier': identifier,
        'identifierType': identifierType,
        '_attributes': this.apiClient.buildCollectionParam(opts['attributes'], 'csv')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];


      let returnType = InlineResponse20078;

      return this.apiClient.callApi(
        '/notation/keyFigures/month/3/get', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * End-of-day (EOD) key figures for the time range of three months.
     * End-of-day (EOD) key figures for the time range of three months.
     * @param {String} identifier 
     * @param {module:model/String} identifierType 
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.attributes Limit the attributes returned in the response to the specified set.
     * @return { Promise.< module:model/InlineResponse20078 > } a Promise, with data of type {@link module:model/InlineResponse20078 }
     */
    getNotationKeyFiguresMonth3Get(identifier, identifierType, opts) {
      return this.getNotationKeyFiguresMonth3GetWithHttpInfo(identifier, identifierType, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * End-of-day (EOD) key figures for the time range of three months, for a list of notations.
     * End-of-day (EOD) key figures for the time range of three months, for a list of notations.
     * @param {Array.<String>} identifiers 
     * @param {module:model/String} identifierType 
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.attributes Limit the attributes returned in the response to the specified set.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse20079} and HTTP response
     */
    getNotationKeyFiguresMonth3ListWithHttpInfo(identifiers, identifierType, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'identifiers' is set
      if (identifiers === undefined || identifiers === null) {
        throw new Error("Missing the required parameter 'identifiers' when calling getNotationKeyFiguresMonth3List");
      }
      // verify the required parameter 'identifierType' is set
      if (identifierType === undefined || identifierType === null) {
        throw new Error("Missing the required parameter 'identifierType' when calling getNotationKeyFiguresMonth3List");
      }

      let pathParams = {
      };
      let queryParams = {
        'identifiers': this.apiClient.buildCollectionParam(identifiers, 'csv'),
        'identifierType': identifierType,
        '_attributes': this.apiClient.buildCollectionParam(opts['attributes'], 'csv')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];


      let returnType = InlineResponse20079;

      return this.apiClient.callApi(
        '/notation/keyFigures/month/3/list', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * End-of-day (EOD) key figures for the time range of three months, for a list of notations.
     * End-of-day (EOD) key figures for the time range of three months, for a list of notations.
     * @param {Array.<String>} identifiers 
     * @param {module:model/String} identifierType 
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.attributes Limit the attributes returned in the response to the specified set.
     * @return { Promise.< module:model/InlineResponse20079 > } a Promise, with data of type {@link module:model/InlineResponse20079 }
     */
    getNotationKeyFiguresMonth3List(identifiers, identifierType, opts) {
      return this.getNotationKeyFiguresMonth3ListWithHttpInfo(identifiers, identifierType, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * End-of-day (EOD) key figures for the time range of six months.
     * End-of-day (EOD) key figures for the time range of six months.
     * @param {String} identifier 
     * @param {module:model/String} identifierType 
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.attributes Limit the attributes returned in the response to the specified set.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse20078} and HTTP response
     */
    getNotationKeyFiguresMonth6GetWithHttpInfo(identifier, identifierType, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'identifier' is set
      if (identifier === undefined || identifier === null) {
        throw new Error("Missing the required parameter 'identifier' when calling getNotationKeyFiguresMonth6Get");
      }
      // verify the required parameter 'identifierType' is set
      if (identifierType === undefined || identifierType === null) {
        throw new Error("Missing the required parameter 'identifierType' when calling getNotationKeyFiguresMonth6Get");
      }

      let pathParams = {
      };
      let queryParams = {
        'identifier': identifier,
        'identifierType': identifierType,
        '_attributes': this.apiClient.buildCollectionParam(opts['attributes'], 'csv')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];


      let returnType = InlineResponse20078;

      return this.apiClient.callApi(
        '/notation/keyFigures/month/6/get', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * End-of-day (EOD) key figures for the time range of six months.
     * End-of-day (EOD) key figures for the time range of six months.
     * @param {String} identifier 
     * @param {module:model/String} identifierType 
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.attributes Limit the attributes returned in the response to the specified set.
     * @return { Promise.< module:model/InlineResponse20078 > } a Promise, with data of type {@link module:model/InlineResponse20078 }
     */
    getNotationKeyFiguresMonth6Get(identifier, identifierType, opts) {
      return this.getNotationKeyFiguresMonth6GetWithHttpInfo(identifier, identifierType, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * End-of-day (EOD) key figures for the time range of six months, for a list of notations.
     * End-of-day (EOD) key figures for the time range of six months, for a list of notations.
     * @param {Array.<String>} identifiers 
     * @param {module:model/String} identifierType 
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.attributes Limit the attributes returned in the response to the specified set.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse20079} and HTTP response
     */
    getNotationKeyFiguresMonth6ListWithHttpInfo(identifiers, identifierType, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'identifiers' is set
      if (identifiers === undefined || identifiers === null) {
        throw new Error("Missing the required parameter 'identifiers' when calling getNotationKeyFiguresMonth6List");
      }
      // verify the required parameter 'identifierType' is set
      if (identifierType === undefined || identifierType === null) {
        throw new Error("Missing the required parameter 'identifierType' when calling getNotationKeyFiguresMonth6List");
      }

      let pathParams = {
      };
      let queryParams = {
        'identifiers': this.apiClient.buildCollectionParam(identifiers, 'csv'),
        'identifierType': identifierType,
        '_attributes': this.apiClient.buildCollectionParam(opts['attributes'], 'csv')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];


      let returnType = InlineResponse20079;

      return this.apiClient.callApi(
        '/notation/keyFigures/month/6/list', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * End-of-day (EOD) key figures for the time range of six months, for a list of notations.
     * End-of-day (EOD) key figures for the time range of six months, for a list of notations.
     * @param {Array.<String>} identifiers 
     * @param {module:model/String} identifierType 
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.attributes Limit the attributes returned in the response to the specified set.
     * @return { Promise.< module:model/InlineResponse20079 > } a Promise, with data of type {@link module:model/InlineResponse20079 }
     */
    getNotationKeyFiguresMonth6List(identifiers, identifierType, opts) {
      return this.getNotationKeyFiguresMonth6ListWithHttpInfo(identifiers, identifierType, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Average end-of-day (EOD) key figures for different trading days periods.
     * Average end-of-day (EOD) key figures for different trading days periods. A trading day is a calendar day on that trading of the notation was possible.
     * @param {String} identifier 
     * @param {module:model/String} identifierType 
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.attributes Limit the attributes returned in the response to the specified set.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse20084} and HTTP response
     */
    getNotationKeyFiguresTradingDayAverageGetWithHttpInfo(identifier, identifierType, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'identifier' is set
      if (identifier === undefined || identifier === null) {
        throw new Error("Missing the required parameter 'identifier' when calling getNotationKeyFiguresTradingDayAverageGet");
      }
      // verify the required parameter 'identifierType' is set
      if (identifierType === undefined || identifierType === null) {
        throw new Error("Missing the required parameter 'identifierType' when calling getNotationKeyFiguresTradingDayAverageGet");
      }

      let pathParams = {
      };
      let queryParams = {
        'identifier': identifier,
        'identifierType': identifierType,
        '_attributes': this.apiClient.buildCollectionParam(opts['attributes'], 'csv')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];


      let returnType = InlineResponse20084;

      return this.apiClient.callApi(
        '/notation/keyFigures/tradingDay/average/get', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Average end-of-day (EOD) key figures for different trading days periods.
     * Average end-of-day (EOD) key figures for different trading days periods. A trading day is a calendar day on that trading of the notation was possible.
     * @param {String} identifier 
     * @param {module:model/String} identifierType 
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.attributes Limit the attributes returned in the response to the specified set.
     * @return { Promise.< module:model/InlineResponse20084 > } a Promise, with data of type {@link module:model/InlineResponse20084 }
     */
    getNotationKeyFiguresTradingDayAverageGet(identifier, identifierType, opts) {
      return this.getNotationKeyFiguresTradingDayAverageGetWithHttpInfo(identifier, identifierType, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * End-of-day (EOD) key figures for the time range of one week.
     * End-of-day (EOD) key figures for the time range of one week.
     * @param {String} identifier 
     * @param {module:model/String} identifierType 
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.attributes Limit the attributes returned in the response to the specified set.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse20080} and HTTP response
     */
    getNotationKeyFiguresWeek1GetWithHttpInfo(identifier, identifierType, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'identifier' is set
      if (identifier === undefined || identifier === null) {
        throw new Error("Missing the required parameter 'identifier' when calling getNotationKeyFiguresWeek1Get");
      }
      // verify the required parameter 'identifierType' is set
      if (identifierType === undefined || identifierType === null) {
        throw new Error("Missing the required parameter 'identifierType' when calling getNotationKeyFiguresWeek1Get");
      }

      let pathParams = {
      };
      let queryParams = {
        'identifier': identifier,
        'identifierType': identifierType,
        '_attributes': this.apiClient.buildCollectionParam(opts['attributes'], 'csv')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];


      let returnType = InlineResponse20080;

      return this.apiClient.callApi(
        '/notation/keyFigures/week/1/get', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * End-of-day (EOD) key figures for the time range of one week.
     * End-of-day (EOD) key figures for the time range of one week.
     * @param {String} identifier 
     * @param {module:model/String} identifierType 
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.attributes Limit the attributes returned in the response to the specified set.
     * @return { Promise.< module:model/InlineResponse20080 > } a Promise, with data of type {@link module:model/InlineResponse20080 }
     */
    getNotationKeyFiguresWeek1Get(identifier, identifierType, opts) {
      return this.getNotationKeyFiguresWeek1GetWithHttpInfo(identifier, identifierType, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * End-of-day (EOD) key figures for the time range of one week, for a list of notations.
     * End-of-day (EOD) key figures for the time range of one week, for a list of notations.
     * @param {Array.<String>} identifiers 
     * @param {module:model/String} identifierType 
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.attributes Limit the attributes returned in the response to the specified set.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse20081} and HTTP response
     */
    getNotationKeyFiguresWeek1ListWithHttpInfo(identifiers, identifierType, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'identifiers' is set
      if (identifiers === undefined || identifiers === null) {
        throw new Error("Missing the required parameter 'identifiers' when calling getNotationKeyFiguresWeek1List");
      }
      // verify the required parameter 'identifierType' is set
      if (identifierType === undefined || identifierType === null) {
        throw new Error("Missing the required parameter 'identifierType' when calling getNotationKeyFiguresWeek1List");
      }

      let pathParams = {
      };
      let queryParams = {
        'identifiers': this.apiClient.buildCollectionParam(identifiers, 'csv'),
        'identifierType': identifierType,
        '_attributes': this.apiClient.buildCollectionParam(opts['attributes'], 'csv')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];


      let returnType = InlineResponse20081;

      return this.apiClient.callApi(
        '/notation/keyFigures/week/1/list', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * End-of-day (EOD) key figures for the time range of one week, for a list of notations.
     * End-of-day (EOD) key figures for the time range of one week, for a list of notations.
     * @param {Array.<String>} identifiers 
     * @param {module:model/String} identifierType 
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.attributes Limit the attributes returned in the response to the specified set.
     * @return { Promise.< module:model/InlineResponse20081 > } a Promise, with data of type {@link module:model/InlineResponse20081 }
     */
    getNotationKeyFiguresWeek1List(identifiers, identifierType, opts) {
      return this.getNotationKeyFiguresWeek1ListWithHttpInfo(identifiers, identifierType, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * End-of-day (EOD) key figures for the time range of ten years.
     * End-of-day (EOD) key figures for the time range of ten years.
     * @param {String} identifier 
     * @param {module:model/String} identifierType 
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.attributes Limit the attributes returned in the response to the specified set.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse20078} and HTTP response
     */
    getNotationKeyFiguresYear10GetWithHttpInfo(identifier, identifierType, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'identifier' is set
      if (identifier === undefined || identifier === null) {
        throw new Error("Missing the required parameter 'identifier' when calling getNotationKeyFiguresYear10Get");
      }
      // verify the required parameter 'identifierType' is set
      if (identifierType === undefined || identifierType === null) {
        throw new Error("Missing the required parameter 'identifierType' when calling getNotationKeyFiguresYear10Get");
      }

      let pathParams = {
      };
      let queryParams = {
        'identifier': identifier,
        'identifierType': identifierType,
        '_attributes': this.apiClient.buildCollectionParam(opts['attributes'], 'csv')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];


      let returnType = InlineResponse20078;

      return this.apiClient.callApi(
        '/notation/keyFigures/year/10/get', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * End-of-day (EOD) key figures for the time range of ten years.
     * End-of-day (EOD) key figures for the time range of ten years.
     * @param {String} identifier 
     * @param {module:model/String} identifierType 
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.attributes Limit the attributes returned in the response to the specified set.
     * @return { Promise.< module:model/InlineResponse20078 > } a Promise, with data of type {@link module:model/InlineResponse20078 }
     */
    getNotationKeyFiguresYear10Get(identifier, identifierType, opts) {
      return this.getNotationKeyFiguresYear10GetWithHttpInfo(identifier, identifierType, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * End-of-day (EOD) key figures for the time range of ten years, for a list of notations.
     * End-of-day (EOD) key figures for the time range of ten years, for a list of notations.
     * @param {Array.<String>} identifiers 
     * @param {module:model/String} identifierType 
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.attributes Limit the attributes returned in the response to the specified set.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse20079} and HTTP response
     */
    getNotationKeyFiguresYear10ListWithHttpInfo(identifiers, identifierType, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'identifiers' is set
      if (identifiers === undefined || identifiers === null) {
        throw new Error("Missing the required parameter 'identifiers' when calling getNotationKeyFiguresYear10List");
      }
      // verify the required parameter 'identifierType' is set
      if (identifierType === undefined || identifierType === null) {
        throw new Error("Missing the required parameter 'identifierType' when calling getNotationKeyFiguresYear10List");
      }

      let pathParams = {
      };
      let queryParams = {
        'identifiers': this.apiClient.buildCollectionParam(identifiers, 'csv'),
        'identifierType': identifierType,
        '_attributes': this.apiClient.buildCollectionParam(opts['attributes'], 'csv')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];


      let returnType = InlineResponse20079;

      return this.apiClient.callApi(
        '/notation/keyFigures/year/10/list', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * End-of-day (EOD) key figures for the time range of ten years, for a list of notations.
     * End-of-day (EOD) key figures for the time range of ten years, for a list of notations.
     * @param {Array.<String>} identifiers 
     * @param {module:model/String} identifierType 
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.attributes Limit the attributes returned in the response to the specified set.
     * @return { Promise.< module:model/InlineResponse20079 > } a Promise, with data of type {@link module:model/InlineResponse20079 }
     */
    getNotationKeyFiguresYear10List(identifiers, identifierType, opts) {
      return this.getNotationKeyFiguresYear10ListWithHttpInfo(identifiers, identifierType, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * End-of-day (EOD) key figures for the time range of one year.
     * End-of-day (EOD) key figures for the time range of one year.
     * @param {String} identifier 
     * @param {module:model/String} identifierType 
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.attributes Limit the attributes returned in the response to the specified set.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse20080} and HTTP response
     */
    getNotationKeyFiguresYear1GetWithHttpInfo(identifier, identifierType, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'identifier' is set
      if (identifier === undefined || identifier === null) {
        throw new Error("Missing the required parameter 'identifier' when calling getNotationKeyFiguresYear1Get");
      }
      // verify the required parameter 'identifierType' is set
      if (identifierType === undefined || identifierType === null) {
        throw new Error("Missing the required parameter 'identifierType' when calling getNotationKeyFiguresYear1Get");
      }

      let pathParams = {
      };
      let queryParams = {
        'identifier': identifier,
        'identifierType': identifierType,
        '_attributes': this.apiClient.buildCollectionParam(opts['attributes'], 'csv')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];


      let returnType = InlineResponse20080;

      return this.apiClient.callApi(
        '/notation/keyFigures/year/1/get', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * End-of-day (EOD) key figures for the time range of one year.
     * End-of-day (EOD) key figures for the time range of one year.
     * @param {String} identifier 
     * @param {module:model/String} identifierType 
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.attributes Limit the attributes returned in the response to the specified set.
     * @return { Promise.< module:model/InlineResponse20080 > } a Promise, with data of type {@link module:model/InlineResponse20080 }
     */
    getNotationKeyFiguresYear1Get(identifier, identifierType, opts) {
      return this.getNotationKeyFiguresYear1GetWithHttpInfo(identifier, identifierType, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * End-of-day (EOD) key figures for the time range of one year, for a list of notations.
     * End-of-day (EOD) key figures for the time range of one year, for a list of notations.
     * @param {Array.<String>} identifiers 
     * @param {module:model/String} identifierType 
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.attributes Limit the attributes returned in the response to the specified set.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse20081} and HTTP response
     */
    getNotationKeyFiguresYear1ListWithHttpInfo(identifiers, identifierType, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'identifiers' is set
      if (identifiers === undefined || identifiers === null) {
        throw new Error("Missing the required parameter 'identifiers' when calling getNotationKeyFiguresYear1List");
      }
      // verify the required parameter 'identifierType' is set
      if (identifierType === undefined || identifierType === null) {
        throw new Error("Missing the required parameter 'identifierType' when calling getNotationKeyFiguresYear1List");
      }

      let pathParams = {
      };
      let queryParams = {
        'identifiers': this.apiClient.buildCollectionParam(identifiers, 'csv'),
        'identifierType': identifierType,
        '_attributes': this.apiClient.buildCollectionParam(opts['attributes'], 'csv')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];


      let returnType = InlineResponse20081;

      return this.apiClient.callApi(
        '/notation/keyFigures/year/1/list', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * End-of-day (EOD) key figures for the time range of one year, for a list of notations.
     * End-of-day (EOD) key figures for the time range of one year, for a list of notations.
     * @param {Array.<String>} identifiers 
     * @param {module:model/String} identifierType 
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.attributes Limit the attributes returned in the response to the specified set.
     * @return { Promise.< module:model/InlineResponse20081 > } a Promise, with data of type {@link module:model/InlineResponse20081 }
     */
    getNotationKeyFiguresYear1List(identifiers, identifierType, opts) {
      return this.getNotationKeyFiguresYear1ListWithHttpInfo(identifiers, identifierType, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * End-of-day (EOD) key figures for the time range of three years.
     * End-of-day (EOD) key figures for the time range of three years.
     * @param {String} identifier 
     * @param {module:model/String} identifierType 
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.attributes Limit the attributes returned in the response to the specified set.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse20078} and HTTP response
     */
    getNotationKeyFiguresYear3GetWithHttpInfo(identifier, identifierType, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'identifier' is set
      if (identifier === undefined || identifier === null) {
        throw new Error("Missing the required parameter 'identifier' when calling getNotationKeyFiguresYear3Get");
      }
      // verify the required parameter 'identifierType' is set
      if (identifierType === undefined || identifierType === null) {
        throw new Error("Missing the required parameter 'identifierType' when calling getNotationKeyFiguresYear3Get");
      }

      let pathParams = {
      };
      let queryParams = {
        'identifier': identifier,
        'identifierType': identifierType,
        '_attributes': this.apiClient.buildCollectionParam(opts['attributes'], 'csv')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];


      let returnType = InlineResponse20078;

      return this.apiClient.callApi(
        '/notation/keyFigures/year/3/get', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * End-of-day (EOD) key figures for the time range of three years.
     * End-of-day (EOD) key figures for the time range of three years.
     * @param {String} identifier 
     * @param {module:model/String} identifierType 
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.attributes Limit the attributes returned in the response to the specified set.
     * @return { Promise.< module:model/InlineResponse20078 > } a Promise, with data of type {@link module:model/InlineResponse20078 }
     */
    getNotationKeyFiguresYear3Get(identifier, identifierType, opts) {
      return this.getNotationKeyFiguresYear3GetWithHttpInfo(identifier, identifierType, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * End-of-day (EOD) key figures for the time range of three years, for a list of notations.
     * End-of-day (EOD) key figures for the time range of three years, for a list of notations.
     * @param {Array.<String>} identifiers 
     * @param {module:model/String} identifierType 
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.attributes Limit the attributes returned in the response to the specified set.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse20079} and HTTP response
     */
    getNotationKeyFiguresYear3ListWithHttpInfo(identifiers, identifierType, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'identifiers' is set
      if (identifiers === undefined || identifiers === null) {
        throw new Error("Missing the required parameter 'identifiers' when calling getNotationKeyFiguresYear3List");
      }
      // verify the required parameter 'identifierType' is set
      if (identifierType === undefined || identifierType === null) {
        throw new Error("Missing the required parameter 'identifierType' when calling getNotationKeyFiguresYear3List");
      }

      let pathParams = {
      };
      let queryParams = {
        'identifiers': this.apiClient.buildCollectionParam(identifiers, 'csv'),
        'identifierType': identifierType,
        '_attributes': this.apiClient.buildCollectionParam(opts['attributes'], 'csv')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];


      let returnType = InlineResponse20079;

      return this.apiClient.callApi(
        '/notation/keyFigures/year/3/list', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * End-of-day (EOD) key figures for the time range of three years, for a list of notations.
     * End-of-day (EOD) key figures for the time range of three years, for a list of notations.
     * @param {Array.<String>} identifiers 
     * @param {module:model/String} identifierType 
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.attributes Limit the attributes returned in the response to the specified set.
     * @return { Promise.< module:model/InlineResponse20079 > } a Promise, with data of type {@link module:model/InlineResponse20079 }
     */
    getNotationKeyFiguresYear3List(identifiers, identifierType, opts) {
      return this.getNotationKeyFiguresYear3ListWithHttpInfo(identifiers, identifierType, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * End-of-day (EOD) key figures for the time range of five years.
     * End-of-day (EOD) key figures for the time range of five years.
     * @param {String} identifier 
     * @param {module:model/String} identifierType 
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.attributes Limit the attributes returned in the response to the specified set.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse20078} and HTTP response
     */
    getNotationKeyFiguresYear5GetWithHttpInfo(identifier, identifierType, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'identifier' is set
      if (identifier === undefined || identifier === null) {
        throw new Error("Missing the required parameter 'identifier' when calling getNotationKeyFiguresYear5Get");
      }
      // verify the required parameter 'identifierType' is set
      if (identifierType === undefined || identifierType === null) {
        throw new Error("Missing the required parameter 'identifierType' when calling getNotationKeyFiguresYear5Get");
      }

      let pathParams = {
      };
      let queryParams = {
        'identifier': identifier,
        'identifierType': identifierType,
        '_attributes': this.apiClient.buildCollectionParam(opts['attributes'], 'csv')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];


      let returnType = InlineResponse20078;

      return this.apiClient.callApi(
        '/notation/keyFigures/year/5/get', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * End-of-day (EOD) key figures for the time range of five years.
     * End-of-day (EOD) key figures for the time range of five years.
     * @param {String} identifier 
     * @param {module:model/String} identifierType 
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.attributes Limit the attributes returned in the response to the specified set.
     * @return { Promise.< module:model/InlineResponse20078 > } a Promise, with data of type {@link module:model/InlineResponse20078 }
     */
    getNotationKeyFiguresYear5Get(identifier, identifierType, opts) {
      return this.getNotationKeyFiguresYear5GetWithHttpInfo(identifier, identifierType, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * End-of-day (EOD) key figures for the time range of five years, for a list of notations.
     * End-of-day (EOD) key figures for the time range of five years, for a list of notations.
     * @param {Array.<String>} identifiers 
     * @param {module:model/String} identifierType 
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.attributes Limit the attributes returned in the response to the specified set.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse20079} and HTTP response
     */
    getNotationKeyFiguresYear5ListWithHttpInfo(identifiers, identifierType, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'identifiers' is set
      if (identifiers === undefined || identifiers === null) {
        throw new Error("Missing the required parameter 'identifiers' when calling getNotationKeyFiguresYear5List");
      }
      // verify the required parameter 'identifierType' is set
      if (identifierType === undefined || identifierType === null) {
        throw new Error("Missing the required parameter 'identifierType' when calling getNotationKeyFiguresYear5List");
      }

      let pathParams = {
      };
      let queryParams = {
        'identifiers': this.apiClient.buildCollectionParam(identifiers, 'csv'),
        'identifierType': identifierType,
        '_attributes': this.apiClient.buildCollectionParam(opts['attributes'], 'csv')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];


      let returnType = InlineResponse20079;

      return this.apiClient.callApi(
        '/notation/keyFigures/year/5/list', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * End-of-day (EOD) key figures for the time range of five years, for a list of notations.
     * End-of-day (EOD) key figures for the time range of five years, for a list of notations.
     * @param {Array.<String>} identifiers 
     * @param {module:model/String} identifierType 
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.attributes Limit the attributes returned in the response to the specified set.
     * @return { Promise.< module:model/InlineResponse20079 > } a Promise, with data of type {@link module:model/InlineResponse20079 }
     */
    getNotationKeyFiguresYear5List(identifiers, identifierType, opts) {
      return this.getNotationKeyFiguresYear5ListWithHttpInfo(identifiers, identifierType, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * End-of-day (EOD) key figures for the time range of seven years.
     * End-of-day (EOD) key figures for the time range of seven years.
     * @param {String} identifier 
     * @param {module:model/String} identifierType 
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.attributes Limit the attributes returned in the response to the specified set.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse20078} and HTTP response
     */
    getNotationKeyFiguresYear7GetWithHttpInfo(identifier, identifierType, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'identifier' is set
      if (identifier === undefined || identifier === null) {
        throw new Error("Missing the required parameter 'identifier' when calling getNotationKeyFiguresYear7Get");
      }
      // verify the required parameter 'identifierType' is set
      if (identifierType === undefined || identifierType === null) {
        throw new Error("Missing the required parameter 'identifierType' when calling getNotationKeyFiguresYear7Get");
      }

      let pathParams = {
      };
      let queryParams = {
        'identifier': identifier,
        'identifierType': identifierType,
        '_attributes': this.apiClient.buildCollectionParam(opts['attributes'], 'csv')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];


      let returnType = InlineResponse20078;

      return this.apiClient.callApi(
        '/notation/keyFigures/year/7/get', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * End-of-day (EOD) key figures for the time range of seven years.
     * End-of-day (EOD) key figures for the time range of seven years.
     * @param {String} identifier 
     * @param {module:model/String} identifierType 
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.attributes Limit the attributes returned in the response to the specified set.
     * @return { Promise.< module:model/InlineResponse20078 > } a Promise, with data of type {@link module:model/InlineResponse20078 }
     */
    getNotationKeyFiguresYear7Get(identifier, identifierType, opts) {
      return this.getNotationKeyFiguresYear7GetWithHttpInfo(identifier, identifierType, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * End-of-day (EOD) key figures for the time range of seven years, for a list of notations.
     * End-of-day (EOD) key figures for the time range of seven years, for a list of notations.
     * @param {Array.<String>} identifiers 
     * @param {module:model/String} identifierType 
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.attributes Limit the attributes returned in the response to the specified set.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse20079} and HTTP response
     */
    getNotationKeyFiguresYear7ListWithHttpInfo(identifiers, identifierType, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'identifiers' is set
      if (identifiers === undefined || identifiers === null) {
        throw new Error("Missing the required parameter 'identifiers' when calling getNotationKeyFiguresYear7List");
      }
      // verify the required parameter 'identifierType' is set
      if (identifierType === undefined || identifierType === null) {
        throw new Error("Missing the required parameter 'identifierType' when calling getNotationKeyFiguresYear7List");
      }

      let pathParams = {
      };
      let queryParams = {
        'identifiers': this.apiClient.buildCollectionParam(identifiers, 'csv'),
        'identifierType': identifierType,
        '_attributes': this.apiClient.buildCollectionParam(opts['attributes'], 'csv')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];


      let returnType = InlineResponse20079;

      return this.apiClient.callApi(
        '/notation/keyFigures/year/7/list', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * End-of-day (EOD) key figures for the time range of seven years, for a list of notations.
     * End-of-day (EOD) key figures for the time range of seven years, for a list of notations.
     * @param {Array.<String>} identifiers 
     * @param {module:model/String} identifierType 
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.attributes Limit the attributes returned in the response to the specified set.
     * @return { Promise.< module:model/InlineResponse20079 > } a Promise, with data of type {@link module:model/InlineResponse20079 }
     */
    getNotationKeyFiguresYear7List(identifiers, identifierType, opts) {
      return this.getNotationKeyFiguresYear7ListWithHttpInfo(identifiers, identifierType, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * End-of-day (EOD) key figures for the time range year-to-date (YTD)..
     * End-of-day (EOD) key figures for the time range year-to-date (YTD). The time range YTD begins with the last trading day of the previous calendar year for which EOD prices are available and ends with the most recent trading day of the current calendar year for which EOD prices are available..
     * @param {String} identifier 
     * @param {module:model/String} identifierType 
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.attributes Limit the attributes returned in the response to the specified set.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse20082} and HTTP response
     */
    getNotationKeyFiguresYearToDateGetWithHttpInfo(identifier, identifierType, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'identifier' is set
      if (identifier === undefined || identifier === null) {
        throw new Error("Missing the required parameter 'identifier' when calling getNotationKeyFiguresYearToDateGet");
      }
      // verify the required parameter 'identifierType' is set
      if (identifierType === undefined || identifierType === null) {
        throw new Error("Missing the required parameter 'identifierType' when calling getNotationKeyFiguresYearToDateGet");
      }

      let pathParams = {
      };
      let queryParams = {
        'identifier': identifier,
        'identifierType': identifierType,
        '_attributes': this.apiClient.buildCollectionParam(opts['attributes'], 'csv')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];


      let returnType = InlineResponse20082;

      return this.apiClient.callApi(
        '/notation/keyFigures/yearToDate/get', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * End-of-day (EOD) key figures for the time range year-to-date (YTD)..
     * End-of-day (EOD) key figures for the time range year-to-date (YTD). The time range YTD begins with the last trading day of the previous calendar year for which EOD prices are available and ends with the most recent trading day of the current calendar year for which EOD prices are available..
     * @param {String} identifier 
     * @param {module:model/String} identifierType 
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.attributes Limit the attributes returned in the response to the specified set.
     * @return { Promise.< module:model/InlineResponse20082 > } a Promise, with data of type {@link module:model/InlineResponse20082 }
     */
    getNotationKeyFiguresYearToDateGet(identifier, identifierType, opts) {
      return this.getNotationKeyFiguresYearToDateGetWithHttpInfo(identifier, identifierType, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * End-of-day (EOD) key figures for the time range year-to-date (YTD), for a list of notations..
     * End-of-day (EOD) key figures for the time range year-to-date (YTD), for a list of notations. The time range YTD begins with the last trading day of the previous calendar year for which EOD prices are available and ends with the most recent tradingday of the current calendar year for which EOD prices are available..
     * @param {Array.<String>} identifiers 
     * @param {module:model/String} identifierType 
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.attributes Limit the attributes returned in the response to the specified set.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse20083} and HTTP response
     */
    getNotationKeyFiguresYearToDateListWithHttpInfo(identifiers, identifierType, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'identifiers' is set
      if (identifiers === undefined || identifiers === null) {
        throw new Error("Missing the required parameter 'identifiers' when calling getNotationKeyFiguresYearToDateList");
      }
      // verify the required parameter 'identifierType' is set
      if (identifierType === undefined || identifierType === null) {
        throw new Error("Missing the required parameter 'identifierType' when calling getNotationKeyFiguresYearToDateList");
      }

      let pathParams = {
      };
      let queryParams = {
        'identifiers': this.apiClient.buildCollectionParam(identifiers, 'csv'),
        'identifierType': identifierType,
        '_attributes': this.apiClient.buildCollectionParam(opts['attributes'], 'csv')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];


      let returnType = InlineResponse20083;

      return this.apiClient.callApi(
        '/notation/keyFigures/yearToDate/list', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * End-of-day (EOD) key figures for the time range year-to-date (YTD), for a list of notations..
     * End-of-day (EOD) key figures for the time range year-to-date (YTD), for a list of notations. The time range YTD begins with the last trading day of the previous calendar year for which EOD prices are available and ends with the most recent tradingday of the current calendar year for which EOD prices are available..
     * @param {Array.<String>} identifiers 
     * @param {module:model/String} identifierType 
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.attributes Limit the attributes returned in the response to the specified set.
     * @return { Promise.< module:model/InlineResponse20083 > } a Promise, with data of type {@link module:model/InlineResponse20083 }
     */
    getNotationKeyFiguresYearToDateList(identifiers, identifierType, opts) {
      return this.getNotationKeyFiguresYearToDateListWithHttpInfo(identifiers, identifierType, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Basic data for a list of notations.
     * Basic data for a list of notations.
     * @param {Array.<String>} identifiers 
     * @param {module:model/String} identifierType 
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.attributes Limit the attributes returned in the response to the specified set.
     * @param {String} opts.language 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse20069} and HTTP response
     */
    getNotationListWithHttpInfo(identifiers, identifierType, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'identifiers' is set
      if (identifiers === undefined || identifiers === null) {
        throw new Error("Missing the required parameter 'identifiers' when calling getNotationList");
      }
      // verify the required parameter 'identifierType' is set
      if (identifierType === undefined || identifierType === null) {
        throw new Error("Missing the required parameter 'identifierType' when calling getNotationList");
      }

      let pathParams = {
      };
      let queryParams = {
        'identifiers': this.apiClient.buildCollectionParam(identifiers, 'csv'),
        'identifierType': identifierType,
        '_attributes': this.apiClient.buildCollectionParam(opts['attributes'], 'csv'),
        '_language': opts['language']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];


      let returnType = InlineResponse20069;

      return this.apiClient.callApi(
        '/notation/list', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Basic data for a list of notations.
     * Basic data for a list of notations.
     * @param {Array.<String>} identifiers 
     * @param {module:model/String} identifierType 
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.attributes Limit the attributes returned in the response to the specified set.
     * @param {String} opts.language 
     * @return { Promise.< module:model/InlineResponse20069 > } a Promise, with data of type {@link module:model/InlineResponse20069 }
     */
    getNotationList(identifiers, identifierType, opts) {
      return this.getNotationListWithHttpInfo(identifiers, identifierType, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Basic search for notations.
     * Search for a notation whose ISIN, specified NSINs, name, or symbol match the search value according to a tolerant full-text match algorithm. If more than one notation of an instrument matches, only the notation with the highest monetary trading volume, averaged over one month, is considered. Better matching results appear in the response before less relevant matches. If the parameter popularity is set to true, the popularity of the notation is the primary sort criterion. Popularity is affected mostly by the request frequency of the notation.
     * @param {String} searchValue 
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/String>} opts.nsins 
     * @param {module:model/String} opts.assetClass 
     * @param {Boolean} opts.onlyActive  (default to true)
     * @param {Boolean} opts.popularity  (default to false)
     * @param {Array.<String>} opts.attributes Limit the attributes returned in the response to the specified set.
     * @param {String} opts.language 
     * @param {Number} opts.paginationOffset Non-negative number of entries to skip, or 0 (default). (default to 0)
     * @param {Number} opts.paginationLimit Non-negative maximum number of entries to return. (default to 20)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse20098} and HTTP response
     */
    getNotationSearchBasicWithHttpInfo(searchValue, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'searchValue' is set
      if (searchValue === undefined || searchValue === null) {
        throw new Error("Missing the required parameter 'searchValue' when calling getNotationSearchBasic");
      }

      let pathParams = {
      };
      let queryParams = {
        'searchValue': searchValue,
        'nsins': this.apiClient.buildCollectionParam(opts['nsins'], 'csv'),
        'assetClass': opts['assetClass'],
        'onlyActive': opts['onlyActive'],
        'popularity': opts['popularity'],
        '_attributes': this.apiClient.buildCollectionParam(opts['attributes'], 'csv'),
        '_language': opts['language'],
        '_paginationOffset': opts['paginationOffset'],
        '_paginationLimit': opts['paginationLimit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];


      let returnType = InlineResponse20098;

      return this.apiClient.callApi(
        '/notation/search/basic', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Basic search for notations.
     * Search for a notation whose ISIN, specified NSINs, name, or symbol match the search value according to a tolerant full-text match algorithm. If more than one notation of an instrument matches, only the notation with the highest monetary trading volume, averaged over one month, is considered. Better matching results appear in the response before less relevant matches. If the parameter popularity is set to true, the popularity of the notation is the primary sort criterion. Popularity is affected mostly by the request frequency of the notation.
     * @param {String} searchValue 
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/String>} opts.nsins 
     * @param {module:model/String} opts.assetClass 
     * @param {Boolean} opts.onlyActive  (default to true)
     * @param {Boolean} opts.popularity  (default to false)
     * @param {Array.<String>} opts.attributes Limit the attributes returned in the response to the specified set.
     * @param {String} opts.language 
     * @param {Number} opts.paginationOffset Non-negative number of entries to skip, or 0 (default). (default to 0)
     * @param {Number} opts.paginationLimit Non-negative maximum number of entries to return. (default to 20)
     * @return { Promise.< module:model/InlineResponse20098 > } a Promise, with data of type {@link module:model/InlineResponse20098 }
     */
    getNotationSearchBasic(searchValue, opts) {
      return this.getNotationSearchBasicWithHttpInfo(searchValue, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Set of custom notation-level selection lists.
     * Set of custom notation-level selection lists.
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.attributes Limit the attributes returned in the response to the specified set.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse20065} and HTTP response
     */
    getNotationSelectionListListWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        '_attributes': this.apiClient.buildCollectionParam(opts['attributes'], 'csv')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];


      let returnType = InlineResponse20065;

      return this.apiClient.callApi(
        '/notation/selectionList/list', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Set of custom notation-level selection lists.
     * Set of custom notation-level selection lists.
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.attributes Limit the attributes returned in the response to the specified set.
     * @return { Promise.< module:model/InlineResponse20065 > } a Promise, with data of type {@link module:model/InlineResponse20065 }
     */
    getNotationSelectionListList(opts) {
      return this.getNotationSelectionListListWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * For each given notation, returns the notation-level selection lists of which the notation is a member.
     * For each given notation, returns the notation-level selection lists of which the notation is a member.
     * @param {Array.<String>} identifiers 
     * @param {module:model/String} identifierType 
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.attributes Limit the attributes returned in the response to the specified set.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse20086} and HTTP response
     */
    getNotationSelectionListListByNotationWithHttpInfo(identifiers, identifierType, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'identifiers' is set
      if (identifiers === undefined || identifiers === null) {
        throw new Error("Missing the required parameter 'identifiers' when calling getNotationSelectionListListByNotation");
      }
      // verify the required parameter 'identifierType' is set
      if (identifierType === undefined || identifierType === null) {
        throw new Error("Missing the required parameter 'identifierType' when calling getNotationSelectionListListByNotation");
      }

      let pathParams = {
      };
      let queryParams = {
        'identifiers': this.apiClient.buildCollectionParam(identifiers, 'csv'),
        'identifierType': identifierType,
        '_attributes': this.apiClient.buildCollectionParam(opts['attributes'], 'csv')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];


      let returnType = InlineResponse20086;

      return this.apiClient.callApi(
        '/notation/selectionList/listByNotation', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * For each given notation, returns the notation-level selection lists of which the notation is a member.
     * For each given notation, returns the notation-level selection lists of which the notation is a member.
     * @param {Array.<String>} identifiers 
     * @param {module:model/String} identifierType 
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.attributes Limit the attributes returned in the response to the specified set.
     * @return { Promise.< module:model/InlineResponse20086 > } a Promise, with data of type {@link module:model/InlineResponse20086 }
     */
    getNotationSelectionListListByNotation(identifiers, identifierType, opts) {
      return this.getNotationSelectionListListByNotationWithHttpInfo(identifiers, identifierType, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Intraday trading status of a notation.
     * Intraday trading status of a notation.<br>The endpoint is subscribable to provide push updates. See attribute `_subscriptionMinimalInterval` for valid update rates.
     * @param {String} identifier 
     * @param {module:model/String} identifierType 
     * @param {Object} opts Optional parameters
     * @param {module:model/String} opts.quality  (default to 'DLY')
     * @param {Array.<String>} opts.attributes Limit the attributes returned in the response to the specified set.
     * @param {module:model/Number} opts.subscriptionMinimumInterval Minimum number of milliseconds at which updates are sent. (default to 5000)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse20088} and HTTP response
     */
    getNotationStatusGetWithHttpInfo(identifier, identifierType, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'identifier' is set
      if (identifier === undefined || identifier === null) {
        throw new Error("Missing the required parameter 'identifier' when calling getNotationStatusGet");
      }
      // verify the required parameter 'identifierType' is set
      if (identifierType === undefined || identifierType === null) {
        throw new Error("Missing the required parameter 'identifierType' when calling getNotationStatusGet");
      }

      let pathParams = {
      };
      let queryParams = {
        'identifier': identifier,
        'identifierType': identifierType,
        'quality': opts['quality'],
        '_attributes': this.apiClient.buildCollectionParam(opts['attributes'], 'csv'),
        '_subscriptionMinimumInterval': opts['subscriptionMinimumInterval']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];


      let returnType = InlineResponse20088;

      return this.apiClient.callApi(
        '/notation/status/get', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Intraday trading status of a notation.
     * Intraday trading status of a notation.<br>The endpoint is subscribable to provide push updates. See attribute `_subscriptionMinimalInterval` for valid update rates.
     * @param {String} identifier 
     * @param {module:model/String} identifierType 
     * @param {Object} opts Optional parameters
     * @param {module:model/String} opts.quality  (default to 'DLY')
     * @param {Array.<String>} opts.attributes Limit the attributes returned in the response to the specified set.
     * @param {module:model/Number} opts.subscriptionMinimumInterval Minimum number of milliseconds at which updates are sent. (default to 5000)
     * @return { Promise.< module:model/InlineResponse20088 > } a Promise, with data of type {@link module:model/InlineResponse20088 }
     */
    getNotationStatusGet(identifier, identifierType, opts) {
      return this.getNotationStatusGetWithHttpInfo(identifier, identifierType, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List of categories assigned to a specific notation the application is entitled to see.
     * List of categories assigned to a specific notation the application is entitled to see. Optionally it is possible to restrict the output to only list those for a specific category dataset.
     * @param {Object} opts Optional parameters
     * @param {module:model/PostNotationCategoryListRequest} opts.postNotationCategoryListRequest Request Body
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse20070} and HTTP response
     */
    postNotationCategoryListWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = opts['postNotationCategoryListRequest'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];


      let returnType = InlineResponse20070;

      return this.apiClient.callApi(
        '/notation/category/list', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * List of categories assigned to a specific notation the application is entitled to see.
     * List of categories assigned to a specific notation the application is entitled to see. Optionally it is possible to restrict the output to only list those for a specific category dataset.
     * @param {Object} opts Optional parameters
     * @param {module:model/PostNotationCategoryListRequest} opts.postNotationCategoryListRequest Request Body
     * @return { Promise.< module:model/InlineResponse20070 > } a Promise, with data of type {@link module:model/InlineResponse20070 }
     */
    postNotationCategoryList(opts) {
      return this.postNotationCategoryListWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Retrieve a list of notations for a given FactSet identifier.
     * <p>Retrieve a list of notations for a given FactSet identifier, grouped by regional identifiers, if available. Listings without a regional identifier are grouped at the end of the response.</p><p>The notation corresponding to the security's primary listing has the attributes <big><tt>regional.isPrimary</tt></big> and <big><tt>regional.listing.isPrimary</tt></big> both set to true.The security's primary listing might not be among the results depending on the entitlement.</p><p>See the group description for more information about the security's primary listing.</p>
     * @param {module:model/PostNotationCrossReferenceFactSetIdentifierListByFactSetIdentifierRequest} postNotationCrossReferenceFactSetIdentifierListByFactSetIdentifierRequest Request Body
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse20076} and HTTP response
     */
    postNotationCrossReferenceFactSetIdentifierListByFactSetIdentifierWithHttpInfo(postNotationCrossReferenceFactSetIdentifierListByFactSetIdentifierRequest) {
      let postBody = postNotationCrossReferenceFactSetIdentifierListByFactSetIdentifierRequest;
      // verify the required parameter 'postNotationCrossReferenceFactSetIdentifierListByFactSetIdentifierRequest' is set
      if (postNotationCrossReferenceFactSetIdentifierListByFactSetIdentifierRequest === undefined || postNotationCrossReferenceFactSetIdentifierListByFactSetIdentifierRequest === null) {
        throw new Error("Missing the required parameter 'postNotationCrossReferenceFactSetIdentifierListByFactSetIdentifierRequest' when calling postNotationCrossReferenceFactSetIdentifierListByFactSetIdentifier");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];


      let returnType = InlineResponse20076;

      return this.apiClient.callApi(
        '/notation/crossReference/factSetIdentifier/listByFactSetIdentifier', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Retrieve a list of notations for a given FactSet identifier.
     * <p>Retrieve a list of notations for a given FactSet identifier, grouped by regional identifiers, if available. Listings without a regional identifier are grouped at the end of the response.</p><p>The notation corresponding to the security's primary listing has the attributes <big><tt>regional.isPrimary</tt></big> and <big><tt>regional.listing.isPrimary</tt></big> both set to true.The security's primary listing might not be among the results depending on the entitlement.</p><p>See the group description for more information about the security's primary listing.</p>
     * @param {module:model/PostNotationCrossReferenceFactSetIdentifierListByFactSetIdentifierRequest} postNotationCrossReferenceFactSetIdentifierListByFactSetIdentifierRequest Request Body
     * @return { Promise.< module:model/InlineResponse20076 > } a Promise, with data of type {@link module:model/InlineResponse20076 }
     */
    postNotationCrossReferenceFactSetIdentifierListByFactSetIdentifier(postNotationCrossReferenceFactSetIdentifierListByFactSetIdentifierRequest) {
      return this.postNotationCrossReferenceFactSetIdentifierListByFactSetIdentifierWithHttpInfo(postNotationCrossReferenceFactSetIdentifierListByFactSetIdentifierRequest)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Retrieve a list of FactSet identifiers for a given instrument.
     * <p>Retrieve a list of FactSet identifiers for a given instrument, grouped by regional identifiers, if available. Listings without a regional identifier are grouped at the end of the response.</p><p>The notation corresponding to the security's primary listing has the attributes <big><tt>regional.isPrimary</tt></big> and <big><tt>regional.listing.isPrimary</tt></big> both set to true.The security's primary listing might not be among the results depending on the entitlement.</p><p>The result contains only notations that have at least one FactSet identifier (see <big><tt>listing.permanentIdentifier</tt></big>, <big><tt>listing.tickerExchange</tt></big>).</p><p>See the group description for more information about the security's primary listing.</p>
     * @param {module:model/PostNotationCrossReferenceFactSetIdentifierListByInstrumentRequest} postNotationCrossReferenceFactSetIdentifierListByInstrumentRequest Request Body
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse20077} and HTTP response
     */
    postNotationCrossReferenceFactSetIdentifierListByInstrumentWithHttpInfo(postNotationCrossReferenceFactSetIdentifierListByInstrumentRequest) {
      let postBody = postNotationCrossReferenceFactSetIdentifierListByInstrumentRequest;
      // verify the required parameter 'postNotationCrossReferenceFactSetIdentifierListByInstrumentRequest' is set
      if (postNotationCrossReferenceFactSetIdentifierListByInstrumentRequest === undefined || postNotationCrossReferenceFactSetIdentifierListByInstrumentRequest === null) {
        throw new Error("Missing the required parameter 'postNotationCrossReferenceFactSetIdentifierListByInstrumentRequest' when calling postNotationCrossReferenceFactSetIdentifierListByInstrument");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];


      let returnType = InlineResponse20077;

      return this.apiClient.callApi(
        '/notation/crossReference/factSetIdentifier/listByInstrument', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Retrieve a list of FactSet identifiers for a given instrument.
     * <p>Retrieve a list of FactSet identifiers for a given instrument, grouped by regional identifiers, if available. Listings without a regional identifier are grouped at the end of the response.</p><p>The notation corresponding to the security's primary listing has the attributes <big><tt>regional.isPrimary</tt></big> and <big><tt>regional.listing.isPrimary</tt></big> both set to true.The security's primary listing might not be among the results depending on the entitlement.</p><p>The result contains only notations that have at least one FactSet identifier (see <big><tt>listing.permanentIdentifier</tt></big>, <big><tt>listing.tickerExchange</tt></big>).</p><p>See the group description for more information about the security's primary listing.</p>
     * @param {module:model/PostNotationCrossReferenceFactSetIdentifierListByInstrumentRequest} postNotationCrossReferenceFactSetIdentifierListByInstrumentRequest Request Body
     * @return { Promise.< module:model/InlineResponse20077 > } a Promise, with data of type {@link module:model/InlineResponse20077 }
     */
    postNotationCrossReferenceFactSetIdentifierListByInstrument(postNotationCrossReferenceFactSetIdentifierListByInstrumentRequest) {
      return this.postNotationCrossReferenceFactSetIdentifierListByInstrumentWithHttpInfo(postNotationCrossReferenceFactSetIdentifierListByInstrumentRequest)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List of entitled notations.
     * List of entitled notations.
     * @param {Object} opts Optional parameters
     * @param {module:model/PostNotationCrossReferenceListByISINRequest} opts.postNotationCrossReferenceListByISINRequest Request Body
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse20073} and HTTP response
     */
    postNotationCrossReferenceListByISINWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = opts['postNotationCrossReferenceListByISINRequest'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];


      let returnType = InlineResponse20073;

      return this.apiClient.callApi(
        '/notation/crossReference/listByISIN', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * List of entitled notations.
     * List of entitled notations.
     * @param {Object} opts Optional parameters
     * @param {module:model/PostNotationCrossReferenceListByISINRequest} opts.postNotationCrossReferenceListByISINRequest Request Body
     * @return { Promise.< module:model/InlineResponse20073 > } a Promise, with data of type {@link module:model/InlineResponse20073 }
     */
    postNotationCrossReferenceListByISIN(opts) {
      return this.postNotationCrossReferenceListByISINWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List of entitled notations.
     * List of entitled notations.
     * @param {Object} opts Optional parameters
     * @param {module:model/PostNotationCrossReferenceListByInstrumentRequest} opts.postNotationCrossReferenceListByInstrumentRequest Request Body
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse20072} and HTTP response
     */
    postNotationCrossReferenceListByInstrumentWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = opts['postNotationCrossReferenceListByInstrumentRequest'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];


      let returnType = InlineResponse20072;

      return this.apiClient.callApi(
        '/notation/crossReference/listByInstrument', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * List of entitled notations.
     * List of entitled notations.
     * @param {Object} opts Optional parameters
     * @param {module:model/PostNotationCrossReferenceListByInstrumentRequest} opts.postNotationCrossReferenceListByInstrumentRequest Request Body
     * @return { Promise.< module:model/InlineResponse20072 > } a Promise, with data of type {@link module:model/InlineResponse20072 }
     */
    postNotationCrossReferenceListByInstrument(opts) {
      return this.postNotationCrossReferenceListByInstrumentWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List of entitled notations.
     * List of entitled notations. Symbols are not globally unique; therefore, a given symbol interpreted in different markets might refer to different instruments.
     * @param {Object} opts Optional parameters
     * @param {module:model/PostNotationCrossReferenceListBySymbolRequest} opts.postNotationCrossReferenceListBySymbolRequest Request Body
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse20074} and HTTP response
     */
    postNotationCrossReferenceListBySymbolWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = opts['postNotationCrossReferenceListBySymbolRequest'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];


      let returnType = InlineResponse20074;

      return this.apiClient.callApi(
        '/notation/crossReference/listBySymbol', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * List of entitled notations.
     * List of entitled notations. Symbols are not globally unique; therefore, a given symbol interpreted in different markets might refer to different instruments.
     * @param {Object} opts Optional parameters
     * @param {module:model/PostNotationCrossReferenceListBySymbolRequest} opts.postNotationCrossReferenceListBySymbolRequest Request Body
     * @return { Promise.< module:model/InlineResponse20074 > } a Promise, with data of type {@link module:model/InlineResponse20074 }
     */
    postNotationCrossReferenceListBySymbol(opts) {
      return this.postNotationCrossReferenceListBySymbolWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List of markets with entitled notations.
     * List of markets with entitled notations. The list contains only markets with at least one active and entitled notation.  All identifiers used as parameters must be valid and entitled.
     * @param {Object} opts Optional parameters
     * @param {module:model/PostNotationMarketListRequest} opts.postNotationMarketListRequest Request Body
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse20085} and HTTP response
     */
    postNotationMarketListWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = opts['postNotationMarketListRequest'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];


      let returnType = InlineResponse20085;

      return this.apiClient.callApi(
        '/notation/market/list', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * List of markets with entitled notations.
     * List of markets with entitled notations. The list contains only markets with at least one active and entitled notation.  All identifiers used as parameters must be valid and entitled.
     * @param {Object} opts Optional parameters
     * @param {module:model/PostNotationMarketListRequest} opts.postNotationMarketListRequest Request Body
     * @return { Promise.< module:model/InlineResponse20085 > } a Promise, with data of type {@link module:model/InlineResponse20085 }
     */
    postNotationMarketList(opts) {
      return this.postNotationMarketListWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Text-based search for notations.
     * Text-based search for notations in selected identifier and name attributes according to a tolerant full-text match algorithm. The results satisfy all selected filters; sorting by various attributes is possible. If more than one notation of an instrument matches, only the notation with the best market priority (according to the parameter `market.priority`) or, in the absence of market priorities, only the notation with the highest trading volume, averaged over one month, is considered.       All identifiers used as parameters must be valid and entitled.
     * @param {module:model/PostNotationSearchByTextRequest} postNotationSearchByTextRequest Request Body
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse20099} and HTTP response
     */
    postNotationSearchByTextWithHttpInfo(postNotationSearchByTextRequest) {
      let postBody = postNotationSearchByTextRequest;
      // verify the required parameter 'postNotationSearchByTextRequest' is set
      if (postNotationSearchByTextRequest === undefined || postNotationSearchByTextRequest === null) {
        throw new Error("Missing the required parameter 'postNotationSearchByTextRequest' when calling postNotationSearchByText");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];


      let returnType = InlineResponse20099;

      return this.apiClient.callApi(
        '/notation/searchByText', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Text-based search for notations.
     * Text-based search for notations in selected identifier and name attributes according to a tolerant full-text match algorithm. The results satisfy all selected filters; sorting by various attributes is possible. If more than one notation of an instrument matches, only the notation with the best market priority (according to the parameter `market.priority`) or, in the absence of market priorities, only the notation with the highest trading volume, averaged over one month, is considered.       All identifiers used as parameters must be valid and entitled.
     * @param {module:model/PostNotationSearchByTextRequest} postNotationSearchByTextRequest Request Body
     * @return { Promise.< module:model/InlineResponse20099 > } a Promise, with data of type {@link module:model/InlineResponse20099 }
     */
    postNotationSearchByText(postNotationSearchByTextRequest) {
      return this.postNotationSearchByTextWithHttpInfo(postNotationSearchByTextRequest)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List of notations belonging to a notation-level selection list.
     * List of notations belonging to a notation-level selection list.
     * @param {Object} opts Optional parameters
     * @param {module:model/PostNotationSelectionListMembersListRequest} opts.postNotationSelectionListMembersListRequest Request Body
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse20087} and HTTP response
     */
    postNotationSelectionListMembersListWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = opts['postNotationSelectionListMembersListRequest'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];


      let returnType = InlineResponse20087;

      return this.apiClient.callApi(
        '/notation/selectionList/members/list', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * List of notations belonging to a notation-level selection list.
     * List of notations belonging to a notation-level selection list.
     * @param {Object} opts Optional parameters
     * @param {module:model/PostNotationSelectionListMembersListRequest} opts.postNotationSelectionListMembersListRequest Request Body
     * @return { Promise.< module:model/InlineResponse20087 > } a Promise, with data of type {@link module:model/InlineResponse20087 }
     */
    postNotationSelectionListMembersList(opts) {
      return this.postNotationSelectionListMembersListWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}





