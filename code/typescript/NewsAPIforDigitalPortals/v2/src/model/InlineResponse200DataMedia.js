/**
 * News API For Digital Portals
 * Consume FactSetâ€™s StreetAccount news and 3rd party content through an API that seamlessly integrates with quotes, time series, watchlists, and other Functional APIs.  Search for news articles from various news distributors and publishers. Incorporate a multitude of search parameters such as region, category, source, article type and provider-specific meta data, to easily filter out the noise.  All search and list endpoints can be subscribed to receive streamed updates.  News providers include:  * APA * AWP  * Businesswire * Cercle Finance * Direkt News SE * Dow Jones News * dpa * dpa-AFX  * EUWAX * GlobenewsWire * Kauppalehti * Midnight Trader * MoneyAM * newsaktuell * OMX * PR Newswire  * Ritzau Finans * StreetAccount News * TDN News        See the Quotes API for Digital Portals for access to detailed price and performance information, plus basic support for security identifier cross-reference.
 *
 * The version of the OpenAPI document: 2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The InlineResponse200DataMedia model module.
 * @module model/InlineResponse200DataMedia
 */
class InlineResponse200DataMedia {
    /**
     * Constructs a new <code>InlineResponse200DataMedia</code>.
     * @alias module:model/InlineResponse200DataMedia
     */
    constructor() { 
        
        InlineResponse200DataMedia.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>InlineResponse200DataMedia</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/InlineResponse200DataMedia} obj Optional instance to populate.
     * @return {module:model/InlineResponse200DataMedia} The populated <code>InlineResponse200DataMedia</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new InlineResponse200DataMedia();

            if (data.hasOwnProperty('url')) {
                obj['url'] = ApiClient.convertToType(data['url'], 'String');
            }
            if (data.hasOwnProperty('mimeType')) {
                obj['mimeType'] = ApiClient.convertToType(data['mimeType'], 'String');
            }
            if (data.hasOwnProperty('caption')) {
                obj['caption'] = ApiClient.convertToType(data['caption'], 'String');
            }
            if (data.hasOwnProperty('alternativeText')) {
                obj['alternativeText'] = ApiClient.convertToType(data['alternativeText'], 'String');
            }
            if (data.hasOwnProperty('width')) {
                obj['width'] = ApiClient.convertToType(data['width'], 'Number');
            }
            if (data.hasOwnProperty('height')) {
                obj['height'] = ApiClient.convertToType(data['height'], 'Number');
            }
        }
        return obj;
    }


}

/**
 * URL of the media element. The URL is publicly available and hosted by either the publisher, the distributor, or FactSet.
 * @member {String} url
 */
InlineResponse200DataMedia.prototype['url'] = undefined;

/**
 * MIME type of the data of the media element.
 * @member {String} mimeType
 */
InlineResponse200DataMedia.prototype['mimeType'] = undefined;

/**
 * Caption text that can be displayed with the media element. Empty if no caption is available for this media element.
 * @member {String} caption
 */
InlineResponse200DataMedia.prototype['caption'] = undefined;

/**
 * A short description of the media element that can be shown instead of the media element itself.
 * @member {String} alternativeText
 */
InlineResponse200DataMedia.prototype['alternativeText'] = undefined;

/**
 * Width of the media element in pixels if applicable.
 * @member {Number} width
 */
InlineResponse200DataMedia.prototype['width'] = undefined;

/**
 * Height of the media element in pixels if applicable.
 * @member {Number} height
 */
InlineResponse200DataMedia.prototype['height'] = undefined;






export default InlineResponse200DataMedia;

