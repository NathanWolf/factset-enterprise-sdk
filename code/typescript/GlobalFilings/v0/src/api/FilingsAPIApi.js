/**
 * Global Filings API
 * The Filings API provides a comprehensive set of functionalities for searching and retrieving filing documents from various sources.  This API is designed to expose document search and document retrieval functionality. A document search will allow a request to query FactSet’s document databases based on certain search criteria specified in the request.  In addition, a document count request will provide information on the number of stories available for a particular security.  Helper endpoint will provide dynamic information on the parameters of a document request. .
 *
 * The version of the OpenAPI document: 0.0.0
 * Contact: api@factset.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ErrorResponse from '../model/ErrorResponse';
import InvestmentResearch from '../model/InvestmentResearch';
import ResponseCount from '../model/ResponseCount';
import ResponseHelper from '../model/ResponseHelper';

/**
* FilingsAPI service.
* @module api/FilingsAPIApi
*/
export default class FilingsAPIApi {

    /**
    * Constructs a new FilingsAPIApi. 
    * @alias module:api/FilingsAPIApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * Returns the count of filings for specified source
     * Returns the count of filings documents along with other response fields.
     * @param {module:model/String} report retrives count of source.
     * @param {Array.<String>} sources Code for document source to include.This is a comma-separated list. Use the ```/helper``` endpoint to get the list of available sources.  
     * @param {Object} opts Optional parameters
     * @param {String} opts.startDate Start Date. Format is YYYYMMDD or relative +/- days (0,-1,etc). (default to '0')
     * @param {String} opts.endDate End Date. Format is YYYYMMDD or relative +/- days (0,-1,etc). (default to '0')
     * @param {Array.<String>} opts.ids Requested symbols or securities.  This is a comma-separated list with a maximum limit of 1000.  Each symbol can be a FactSet exchange symbol, CUSIP, or SEDOL.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ResponseCount} and HTTP response
     */
    getCountWithHttpInfo(report, sources, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'report' is set
      if (report === undefined || report === null) {
        throw new Error("Missing the required parameter 'report' when calling getCount");
      }
      // verify the required parameter 'sources' is set
      if (sources === undefined || sources === null) {
        throw new Error("Missing the required parameter 'sources' when calling getCount");
      }

      let pathParams = {
      };
      let queryParams = {
        'report': report,
        'startDate': opts['startDate'],
        'endDate': opts['endDate'],
        'ids': this.apiClient.buildCollectionParam(opts['ids'], 'csv'),
        'sources': this.apiClient.buildCollectionParam(sources, 'csv')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];


      let returnType = ResponseCount;

      return this.apiClient.callApi(
        '/count', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Returns the count of filings for specified source
     * Returns the count of filings documents along with other response fields.
     * @param {module:model/String} report retrives count of source.
     * @param {Array.<String>} sources Code for document source to include.This is a comma-separated list. Use the ```/helper``` endpoint to get the list of available sources.  
     * @param {Object} opts Optional parameters
     * @param {String} opts.startDate Start Date. Format is YYYYMMDD or relative +/- days (0,-1,etc). (default to '0')
     * @param {String} opts.endDate End Date. Format is YYYYMMDD or relative +/- days (0,-1,etc). (default to '0')
     * @param {Array.<String>} opts.ids Requested symbols or securities.  This is a comma-separated list with a maximum limit of 1000.  Each symbol can be a FactSet exchange symbol, CUSIP, or SEDOL.
     * @return { Promise.< module:model/ResponseCount > } a Promise, with data of type {@link module:model/ResponseCount }
     */
    getCount(report, sources, opts) {
      return this.getCountWithHttpInfo(report, sources, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Returns the filings documents and related metadata within FactSet coverage.
     * Returns the filings documents within FactSet coverage along with other response fields
     * @param {Array.<String>} sources Code for document source to include.  This is a comma-separated list. Use the ```/helper``` endpoint to get the list of available sources.
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.ids Requested symbols or securities.  This is a comma-separated list with a maximum limit of 1000.  Each symbol can be a FactSet exchange symbol, CUSIP, or SEDOL.
     * @param {String} opts.startDate Start Date. Format is YYYYMMDD or relative +/- days (0,-1,etc). (default to '0')
     * @param {String} opts.endDate End Date. Format is YYYYMMDD or relative +/- days (0,-1,etc). (default to '0')
     * @param {Number} opts.paginationLimit Number of results to return per page. (default to 25)
     * @param {Number} opts.paginationOffset Page number of the results to return.
     * @param {String} opts.timezone Time zone to return story dates and times. Time zones are in POSIX format and automatically adjusted for daylight savings. (default to 'America/New_York')
     * @param {module:model/String} opts.sort Sorting the results in chronological (oldest to newest) or reverse chronological (newest to oldest) order.    *  desc - sorting results in reverse chronological (descending) order. This is the default value if     the sort parameter isn’t used in the query       *   asc - sorting results in chronological (ascending) order. If a start date is not specified, the    API has a 10-year searching limitation.  (default to 'desc')
     * @param {Array.<String>} opts.categories Code for categories to include.  This is a comma-separated list. Use the ```/helper``` endpoint to get the list of available categories.  Default = All categories.
     * @param {module:model/String} opts.primaryId Type of identifier search * Y - Returns headlines of stories that have the search ID(s) as the Primary ID. * N - Returns headlines of stories that mention/refer to the ID(s). (default to 'N')
     * @param {String} opts.searchText Restricts the search to include only document stories which include the text searched.
     * @param {String} opts.formType Restricts the search to include any form types of EDGAR.
     * @param {String} opts.accession A unique identifier given to each EDGAR filings document. e.g. accession=0001013237-21-000069&sources=EDG
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InvestmentResearch} and HTTP response
     */
    getFilingsWithHttpInfo(sources, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'sources' is set
      if (sources === undefined || sources === null) {
        throw new Error("Missing the required parameter 'sources' when calling getFilings");
      }

      let pathParams = {
      };
      let queryParams = {
        'ids': this.apiClient.buildCollectionParam(opts['ids'], 'csv'),
        'startDate': opts['startDate'],
        'endDate': opts['endDate'],
        'paginationLimit': opts['paginationLimit'],
        'paginationOffset': opts['paginationOffset'],
        'timezone': opts['timezone'],
        'sort': opts['sort'],
        'sources': this.apiClient.buildCollectionParam(sources, 'csv'),
        'categories': this.apiClient.buildCollectionParam(opts['categories'], 'csv'),
        'primaryId': opts['primaryId'],
        'searchText': opts['searchText'],
        'formType': opts['formType'],
        'accession': opts['accession']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];


      let returnType = InvestmentResearch;

      return this.apiClient.callApi(
        '/search', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Returns the filings documents and related metadata within FactSet coverage.
     * Returns the filings documents within FactSet coverage along with other response fields
     * @param {Array.<String>} sources Code for document source to include.  This is a comma-separated list. Use the ```/helper``` endpoint to get the list of available sources.
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.ids Requested symbols or securities.  This is a comma-separated list with a maximum limit of 1000.  Each symbol can be a FactSet exchange symbol, CUSIP, or SEDOL.
     * @param {String} opts.startDate Start Date. Format is YYYYMMDD or relative +/- days (0,-1,etc). (default to '0')
     * @param {String} opts.endDate End Date. Format is YYYYMMDD or relative +/- days (0,-1,etc). (default to '0')
     * @param {Number} opts.paginationLimit Number of results to return per page. (default to 25)
     * @param {Number} opts.paginationOffset Page number of the results to return.
     * @param {String} opts.timezone Time zone to return story dates and times. Time zones are in POSIX format and automatically adjusted for daylight savings. (default to 'America/New_York')
     * @param {module:model/String} opts.sort Sorting the results in chronological (oldest to newest) or reverse chronological (newest to oldest) order.    *  desc - sorting results in reverse chronological (descending) order. This is the default value if     the sort parameter isn’t used in the query       *   asc - sorting results in chronological (ascending) order. If a start date is not specified, the    API has a 10-year searching limitation.  (default to 'desc')
     * @param {Array.<String>} opts.categories Code for categories to include.  This is a comma-separated list. Use the ```/helper``` endpoint to get the list of available categories.  Default = All categories.
     * @param {module:model/String} opts.primaryId Type of identifier search * Y - Returns headlines of stories that have the search ID(s) as the Primary ID. * N - Returns headlines of stories that mention/refer to the ID(s). (default to 'N')
     * @param {String} opts.searchText Restricts the search to include only document stories which include the text searched.
     * @param {String} opts.formType Restricts the search to include any form types of EDGAR.
     * @param {String} opts.accession A unique identifier given to each EDGAR filings document. e.g. accession=0001013237-21-000069&sources=EDG
     * @return { Promise.< module:model/InvestmentResearch > } a Promise, with data of type {@link module:model/InvestmentResearch }
     */
    getFilings(sources, opts) {
      return this.getFilingsWithHttpInfo(sources, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Returns the static values for various parameters
     * Returns the static values for sources,formTypes,timeZones,categories based on the specified parameter
     * @param {Object} opts Optional parameters
     * @param {module:model/String} opts.fields Request data for given field.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ResponseHelper} and HTTP response
     */
    getHelperWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'fields': opts['fields']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];


      let returnType = ResponseHelper;

      return this.apiClient.callApi(
        '/helper', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Returns the static values for various parameters
     * Returns the static values for sources,formTypes,timeZones,categories based on the specified parameter
     * @param {Object} opts Optional parameters
     * @param {module:model/String} opts.fields Request data for given field.
     * @return { Promise.< module:model/ResponseHelper > } a Promise, with data of type {@link module:model/ResponseHelper }
     */
    getHelper(opts) {
      return this.getHelperWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}





