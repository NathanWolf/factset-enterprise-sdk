/**
 * Tick History Level 2 (Beta)
 * Tick History **Level 2** provides dynamic access to the historical tick data up to 10 levels of depth for a specific security for specific dates or date range. The API generates output files with data based on client-specified input parameters. The input parameters include universe specification and date ranges for which the data will be generated. When the API request with specified input parameters has been completed, the output files will be made available back to the users through a secure URL to the location where the files are stored. Therefore, this API has two APIs (i) Request files API (ii) Get Files API.
 *
 * The version of the OpenAPI document: 0.0.0
 * Contact: api@factset.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import GetFilesResponseLevel2 from '../model/GetFilesResponseLevel2';
import Status from '../model/Status';

/**
* GetFilesLevel2BETA service.
* @module api/GetFilesLevel2BETAApi
*/
export default class GetFilesLevel2BETAApi {

    /**
    * Constructs a new GetFilesLevel2BETAApi. 
    * @alias module:api/GetFilesLevel2BETAApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * Returns the files for the requested requestId
     * Plugin the requestId from request-files endpoint to get-files endpoint
     * @param {String} requestId RequestId returned by request-files endpoint to poll and collect results of the query
     * @param {Object} opts Optional parameters
     * @param {Number} opts.paginationLimit Specifies the maximum number of results to return per response page (default to 20)
     * @param {Number} opts.paginationOffset Specifies the starting point for pagination. This parameter is used to identify the beginning of next set of results (default to 0)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GetFilesResponseLevel2} and HTTP response
     */
    getTickHistoryFilesLevel2WithHttpInfo(requestId, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'requestId' is set
      if (requestId === undefined || requestId === null) {
        throw new Error("Missing the required parameter 'requestId' when calling getTickHistoryFilesLevel2");
      }

      let pathParams = {
      };
      let queryParams = {
        'requestId': requestId,
        '_paginationLimit': opts['paginationLimit'],
        '_paginationOffset': opts['paginationOffset']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];


      let returnType = GetFilesResponseLevel2;

      return this.apiClient.callApi(
        '/level2/get-files', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Returns the files for the requested requestId
     * Plugin the requestId from request-files endpoint to get-files endpoint
     * @param {String} requestId RequestId returned by request-files endpoint to poll and collect results of the query
     * @param {Object} opts Optional parameters
     * @param {Number} opts.paginationLimit Specifies the maximum number of results to return per response page (default to 20)
     * @param {Number} opts.paginationOffset Specifies the starting point for pagination. This parameter is used to identify the beginning of next set of results (default to 0)
     * @return { Promise.< module:model/GetFilesResponseLevel2 > } a Promise, with data of type {@link module:model/GetFilesResponseLevel2 }
     */
    getTickHistoryFilesLevel2(requestId, opts) {
      return this.getTickHistoryFilesLevel2WithHttpInfo(requestId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}





