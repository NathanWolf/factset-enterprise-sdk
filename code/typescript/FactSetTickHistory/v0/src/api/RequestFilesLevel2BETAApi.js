/**
 * Tick History Level 2 (Beta)
 * Tick History **Level 2** provides dynamic access to the historical tick data up to 10 levels of depth for a specific security for specific dates or date range. The API generates output files with data based on client-specified input parameters. The input parameters include universe specification and date ranges for which the data will be generated. When the API request with specified input parameters has been completed, the output files will be made available back to the users through a secure URL to the location where the files are stored. Therefore, this API has two APIs (i) Request files API (ii) Get Files API.
 *
 * The version of the OpenAPI document: 0.0.0
 * Contact: api@factset.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Level2RequestFilesResponse from '../model/Level2RequestFilesResponse';
import Status from '../model/Status';

/**
* RequestFilesLevel2BETA service.
* @module api/RequestFilesLevel2BETAApi
*/
export default class RequestFilesLevel2BETAApi {

    /**
    * Constructs a new RequestFilesLevel2BETAApi. 
    * @alias module:api/RequestFilesLevel2BETAApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * Returns the requestId and status
     * Returns the requestId and status.
     * @param {Array.<String>} ticker The requested list of one or more Market tickers.
     * @param {Date} startDate The date to which data is required.
     * @param {Date} endDate The date to which data is required.
     * @param {String} mic This parameter is used to filter the results based on the exchange code. <p>**NOTE**:Does not support multiple mic codes</p>
     * @param {Object} opts Optional parameters
     * @param {module:model/String} opts.responseFileType Specifies the fileType (default to 'parquet')
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Level2RequestFilesResponse} and HTTP response
     */
    getrequestIdLevel2WithHttpInfo(ticker, startDate, endDate, mic, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'ticker' is set
      if (ticker === undefined || ticker === null) {
        throw new Error("Missing the required parameter 'ticker' when calling getrequestIdLevel2");
      }
      // verify the required parameter 'startDate' is set
      if (startDate === undefined || startDate === null) {
        throw new Error("Missing the required parameter 'startDate' when calling getrequestIdLevel2");
      }
      // verify the required parameter 'endDate' is set
      if (endDate === undefined || endDate === null) {
        throw new Error("Missing the required parameter 'endDate' when calling getrequestIdLevel2");
      }
      // verify the required parameter 'mic' is set
      if (mic === undefined || mic === null) {
        throw new Error("Missing the required parameter 'mic' when calling getrequestIdLevel2");
      }

      let pathParams = {
      };
      let queryParams = {
        'ticker': this.apiClient.buildCollectionParam(ticker, 'csv'),
        'startDate': startDate,
        'endDate': endDate,
        'mic': mic,
        'responseFileType': opts['responseFileType']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];


      let returnType = Level2RequestFilesResponse;

      return this.apiClient.callApi(
        '/level2/request-files', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Returns the requestId and status
     * Returns the requestId and status.
     * @param {Array.<String>} ticker The requested list of one or more Market tickers.
     * @param {Date} startDate The date to which data is required.
     * @param {Date} endDate The date to which data is required.
     * @param {String} mic This parameter is used to filter the results based on the exchange code. <p>**NOTE**:Does not support multiple mic codes</p>
     * @param {Object} opts Optional parameters
     * @param {module:model/String} opts.responseFileType Specifies the fileType (default to 'parquet')
     * @return { Promise.< module:model/Level2RequestFilesResponse > } a Promise, with data of type {@link module:model/Level2RequestFilesResponse }
     */
    getrequestIdLevel2(ticker, startDate, endDate, mic, opts) {
      return this.getrequestIdLevel2WithHttpInfo(ticker, startDate, endDate, mic, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}





