/**
 * Tick History Level 2 (Beta)
 * Tick History **Level 2** provides dynamic access to the historical tick data up to 10 levels of depth for a specific security for specific dates or date range. The API generates output files with data based on client-specified input parameters. The input parameters include universe specification and date ranges for which the data will be generated. When the API request with specified input parameters has been completed, the output files will be made available back to the users through a secure URL to the location where the files are stored. Therefore, this API has two APIs (i) Request files API (ii) Get Files API.
 *
 * The version of the OpenAPI document: 0.0.0
 * Contact: api@factset.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from './ApiClient';
import ErrorExample from './model/ErrorExample';
import Files from './model/Files';
import GetFilesResponseLevel2 from './model/GetFilesResponseLevel2';
import IsPartial from './model/IsPartial';
import Level2RequestFilesResponse from './model/Level2RequestFilesResponse';
import Meta from './model/Meta';
import Pagination from './model/Pagination';
import Status from './model/Status';

import GetFilesLevel2BETAApi from './api/GetFilesLevel2BETAApi';
import RequestFilesLevel2BETAApi from './api/RequestFilesLevel2BETAApi';


/**
* FactSet Tick History client library for JavaScript.<br>
* The <code>index</code> module provides access to constructors for all the classes which comprise the public API.
* <p>
* An AMD (recommended!) or CommonJS application will generally do something equivalent to the following:
* <pre>
* var factsettickhistory = require('index'); // See note below*.
* var xxxSvc = new factsettickhistory.XxxApi(); // Allocate the API class we're going to use.
* var yyyModel = new factsettickhistory.Yyy(); // Construct a model instance.
* yyyModel.someProperty = 'someValue';
* ...
* var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.
* ...
* </pre>
* <em>*NOTE: For a top-level AMD script, use require(['index'], function(){...})
* and put the application logic within the callback function.</em>
* </p>
* <p>
* A non-AMD browser application (discouraged) might do something like this:
* <pre>
* var xxxSvc = new factsettickhistory.XxxApi(); // Allocate the API class we're going to use.
* var yyy = new factsettickhistory.Yyy(); // Construct a model instance.
* yyyModel.someProperty = 'someValue';
* ...
* var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.
* ...
* </pre>
* </p>
* @module index
*/
export {
    /**
     * The ApiClient constructor.
     * @property {module:ApiClient}
     */
    ApiClient,

    /**
     * The ErrorExample model constructor.
     * @property {module:model/ErrorExample}
     */
    ErrorExample,

    /**
     * The Files model constructor.
     * @property {module:model/Files}
     */
    Files,

    /**
     * The GetFilesResponseLevel2 model constructor.
     * @property {module:model/GetFilesResponseLevel2}
     */
    GetFilesResponseLevel2,

    /**
     * The IsPartial model constructor.
     * @property {module:model/IsPartial}
     */
    IsPartial,

    /**
     * The Level2RequestFilesResponse model constructor.
     * @property {module:model/Level2RequestFilesResponse}
     */
    Level2RequestFilesResponse,

    /**
     * The Meta model constructor.
     * @property {module:model/Meta}
     */
    Meta,

    /**
     * The Pagination model constructor.
     * @property {module:model/Pagination}
     */
    Pagination,

    /**
     * The Status model constructor.
     * @property {module:model/Status}
     */
    Status,

    /**
    * The GetFilesLevel2BETAApi service constructor.
    * @property {module:api/GetFilesLevel2BETAApi}
    */
    GetFilesLevel2BETAApi,

    /**
    * The RequestFilesLevel2BETAApi service constructor.
    * @property {module:api/RequestFilesLevel2BETAApi}
    */
    RequestFilesLevel2BETAApi,

};
