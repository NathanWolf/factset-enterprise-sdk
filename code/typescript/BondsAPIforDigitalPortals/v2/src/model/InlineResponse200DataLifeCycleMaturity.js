/**
 * Bonds API For Digital Portals
 * Search for fixed income instruments, using a criteria-based screener. The API provides also fundamental data and key figures, basic interest rate information and derived coupon lists.  Available search criteria include:  * validation: filter for only active listings, by price quality and latest/previous available price dates * traded markets: filter and indicate a market priority for the validation * important dates in and features of the life cycle of the fixed income instruments * filter by issuer, its country of registration and the issued volume * coupon data: occurrence and frequency of coupon payments, current interest rate range * yield and yield to maturity range, spread * Macaulay duration * sensitivity ranges: base point value, modified duration, elasticity, convexity * cash flow for all transactions over a certain time range: sum or average * country-specific attributes: for Germany: is eligible for trustees        The key figures are calculated using delayed prices with an additional delay of 10 minutes after an update of the debt instrument's price. Special product features such as the right to a maturity extension, an attached option, or convertibility are not considered for the key figure calculation. Further, a calculation is not performed for perpetual products and for products with variable interest rate.  This API is fully integrated with the corresponding Quotes API, allowing access to detailed price and performance information of instruments, as well as basic security identifier cross-reference. For direct access to price histories, please refer to the Time Series API for Digital Portals.  Similar criteria based screener APIs exist for equity instruments and securitized derivatives: See the Stocks API and the Securitized Derivatives API for details.
 *
 * The version of the OpenAPI document: 2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The InlineResponse200DataLifeCycleMaturity model module.
 * @module model/InlineResponse200DataLifeCycleMaturity
 */
class InlineResponse200DataLifeCycleMaturity {
    /**
     * Constructs a new <code>InlineResponse200DataLifeCycleMaturity</code>.
     * Maturity data.
     * @alias module:model/InlineResponse200DataLifeCycleMaturity
     */
    constructor() { 
        
        InlineResponse200DataLifeCycleMaturity.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>InlineResponse200DataLifeCycleMaturity</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/InlineResponse200DataLifeCycleMaturity} obj Optional instance to populate.
     * @return {module:model/InlineResponse200DataLifeCycleMaturity} The populated <code>InlineResponse200DataLifeCycleMaturity</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new InlineResponse200DataLifeCycleMaturity();

            if (data.hasOwnProperty('date')) {
                obj['date'] = ApiClient.convertToType(data['date'], 'Date');
            }
            if (data.hasOwnProperty('isPerpetual')) {
                obj['isPerpetual'] = ApiClient.convertToType(data['isPerpetual'], 'Boolean');
            }
            if (data.hasOwnProperty('isCallable')) {
                obj['isCallable'] = ApiClient.convertToType(data['isCallable'], 'Boolean');
            }
        }
        return obj;
    }


}

/**
 * Date of the instrument's maturity. The value is empty if the instrument is perpetual.
 * @member {Date} date
 */
InlineResponse200DataLifeCycleMaturity.prototype['date'] = undefined;

/**
 * If true, the instrument is perpetual, i.e. it does not mature, therefore the attribute `date` is null.
 * @member {Boolean} isPerpetual
 */
InlineResponse200DataLifeCycleMaturity.prototype['isPerpetual'] = undefined;

/**
 * If true, the issuer may redeem the instrument prior to maturity.
 * @member {Boolean} isCallable
 */
InlineResponse200DataLifeCycleMaturity.prototype['isCallable'] = undefined;






export default InlineResponse200DataLifeCycleMaturity;

