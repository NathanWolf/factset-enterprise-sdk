/**
 * FactSet Concordance API
 * The FactSet Concordance API provides the ability to programmatically look up several types of entities by their name and other attributes. It attempts to match attributes that you supply for the entity and returns as many match candidates as it can find. The result is a \"concorded\" FactSet Entity Permanent identifier.  The Entity Identifier can then be used as input throughout FactSet's Content soultions, such as Content APIs and Standard DataFeeds.<p> There are two types of workflows supported in the API. The first workflow type follows traditional API conventions in that a request is accepted and a response is returned synchronously. The second workflow type involves a background task. With this workflow, a task is created for uploading a set of queries, and then the client polls for the task to complete. Once the task has completed, the client retrieves the concordance results throught the decisions endpoint.</p> 
 *
 * The version of the OpenAPI document: 2.5.0
 * Contact: api@factset.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The PeopleDecisions model module.
 * @module model/PeopleDecisions
 */
class PeopleDecisions {
    /**
     * Constructs a new <code>PeopleDecisions</code>.
     * Concordance People Decisions object. Returned to show the Decision reached for each Entity. 
     * @alias module:model/PeopleDecisions
     */
    constructor() { 
        
        PeopleDecisions.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>PeopleDecisions</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PeopleDecisions} obj Optional instance to populate.
     * @return {module:model/PeopleDecisions} The populated <code>PeopleDecisions</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PeopleDecisions();

            if (data.hasOwnProperty('activeRole')) {
                obj['activeRole'] = ApiClient.convertToType(data['activeRole'], 'Boolean');
            }
            if (data.hasOwnProperty('clientEntity')) {
                obj['clientEntity'] = ApiClient.convertToType(data['clientEntity'], 'String');
            }
            if (data.hasOwnProperty('clientId')) {
                obj['clientId'] = ApiClient.convertToType(data['clientId'], 'String');
            }
            if (data.hasOwnProperty('clientFirstName')) {
                obj['clientFirstName'] = ApiClient.convertToType(data['clientFirstName'], 'String');
            }
            if (data.hasOwnProperty('clientLastName')) {
                obj['clientLastName'] = ApiClient.convertToType(data['clientLastName'], 'String');
            }
            if (data.hasOwnProperty('clientMiddleName')) {
                obj['clientMiddleName'] = ApiClient.convertToType(data['clientMiddleName'], 'String');
            }
            if (data.hasOwnProperty('clientSalutation')) {
                obj['clientSalutation'] = ApiClient.convertToType(data['clientSalutation'], 'String');
            }
            if (data.hasOwnProperty('clientSuffix')) {
                obj['clientSuffix'] = ApiClient.convertToType(data['clientSuffix'], 'String');
            }
            if (data.hasOwnProperty('clientPriority')) {
                obj['clientPriority'] = ApiClient.convertToType(data['clientPriority'], 'String');
            }
            if (data.hasOwnProperty('clientPersonName')) {
                obj['clientPersonName'] = ApiClient.convertToType(data['clientPersonName'], 'String');
            }
            if (data.hasOwnProperty('email')) {
                obj['email'] = ApiClient.convertToType(data['email'], 'String');
            }
            if (data.hasOwnProperty('entity')) {
                obj['entity'] = ApiClient.convertToType(data['entity'], 'String');
            }
            if (data.hasOwnProperty('mapStatus')) {
                obj['mapStatus'] = ApiClient.convertToType(data['mapStatus'], 'String');
            }
            if (data.hasOwnProperty('firstName')) {
                obj['firstName'] = ApiClient.convertToType(data['firstName'], 'String');
            }
            if (data.hasOwnProperty('lastName')) {
                obj['lastName'] = ApiClient.convertToType(data['lastName'], 'String');
            }
            if (data.hasOwnProperty('middleName')) {
                obj['middleName'] = ApiClient.convertToType(data['middleName'], 'String');
            }
            if (data.hasOwnProperty('personId')) {
                obj['personId'] = ApiClient.convertToType(data['personId'], 'String');
            }
            if (data.hasOwnProperty('salutation')) {
                obj['salutation'] = ApiClient.convertToType(data['salutation'], 'String');
            }
            if (data.hasOwnProperty('nameMatchSource')) {
                obj['nameMatchSource'] = ApiClient.convertToType(data['nameMatchSource'], 'String');
            }
            if (data.hasOwnProperty('nameMatchString')) {
                obj['nameMatchString'] = ApiClient.convertToType(data['nameMatchString'], 'String');
            }
            if (data.hasOwnProperty('personName')) {
                obj['personName'] = ApiClient.convertToType(data['personName'], 'String');
            }
            if (data.hasOwnProperty('suffix')) {
                obj['suffix'] = ApiClient.convertToType(data['suffix'], 'String');
            }
            if (data.hasOwnProperty('similarityScore')) {
                obj['similarityScore'] = ApiClient.convertToType(data['similarityScore'], 'Number');
            }
            if (data.hasOwnProperty('matchFlag')) {
                obj['matchFlag'] = ApiClient.convertToType(data['matchFlag'], 'Boolean');
            }
            if (data.hasOwnProperty('rowIndex')) {
                obj['rowIndex'] = ApiClient.convertToType(data['rowIndex'], 'Number');
            }
            if (data.hasOwnProperty('taskId')) {
                obj['taskId'] = ApiClient.convertToType(data['taskId'], 'Number');
            }
            if (data.hasOwnProperty('title')) {
                obj['title'] = ApiClient.convertToType(data['title'], 'String');
            }
            if (data.hasOwnProperty('universeId')) {
                obj['universeId'] = ApiClient.convertToType(data['universeId'], 'Number');
            }
        }
        return obj;
    }


}

/**
 * If the role is active or not of the person.
 * @member {Boolean} activeRole
 */
PeopleDecisions.prototype['activeRole'] = undefined;

/**
 * Name of the entity of the client. 
 * @member {String} clientEntity
 */
PeopleDecisions.prototype['clientEntity'] = undefined;

/**
 * Name of the column in the input file that contains a unique identifier supplied by the user.
 * @member {String} clientId
 */
PeopleDecisions.prototype['clientId'] = undefined;

/**
 * First Name provided in the input file which is used in the `people-task` endpoint
 * @member {String} clientFirstName
 */
PeopleDecisions.prototype['clientFirstName'] = undefined;

/**
 * Last Name provided in the input file which is used in the `people-task` endpoint
 * @member {String} clientLastName
 */
PeopleDecisions.prototype['clientLastName'] = undefined;

/**
 * Middle Name provided in the input file which is used in the `people-task` endpoint
 * @member {String} clientMiddleName
 */
PeopleDecisions.prototype['clientMiddleName'] = undefined;

/**
 * Salutation provided in the input file which is used in the `people-task` endpoint
 * @member {String} clientSalutation
 */
PeopleDecisions.prototype['clientSalutation'] = undefined;

/**
 * Suffix provided in the input file which is used in the `people-task` endpoint
 * @member {String} clientSuffix
 */
PeopleDecisions.prototype['clientSuffix'] = undefined;

/**
 * Priority provided in the input file which is used in the `people-task` endpoint
 * @member {String} clientPriority
 */
PeopleDecisions.prototype['clientPriority'] = undefined;

/**
 * The name provided by the client.
 * @member {String} clientPersonName
 */
PeopleDecisions.prototype['clientPersonName'] = undefined;

/**
 * The email address of the client.
 * @member {String} email
 */
PeopleDecisions.prototype['email'] = undefined;

/**
 * Full name corresponding to the matched entity.
 * @member {String} entity
 */
PeopleDecisions.prototype['entity'] = undefined;

/**
 * Concordance status of the submitted, where -    * MAPPED - The requested Entity Name is successfully mapped to a FactSet Entity Id (-E)   * UNMAPPED - The requested Entity Name is unmapped by FactSet.   * INDETERMINATE - The requested Entity Name has unable to make a mapping. 
 * @member {module:model/PeopleDecisions.MapStatusEnum} mapStatus
 */
PeopleDecisions.prototype['mapStatus'] = undefined;

/**
 * Name of the column in the input file that contains the first name.
 * @member {String} firstName
 */
PeopleDecisions.prototype['firstName'] = undefined;

/**
 * Name of the column in the input file that contains the first name. 
 * @member {String} lastName
 */
PeopleDecisions.prototype['lastName'] = undefined;

/**
 * Name of the column in the input file that contains the middle name. 
 * @member {String} middleName
 */
PeopleDecisions.prototype['middleName'] = undefined;

/**
 * The id of the person.
 * @member {String} personId
 */
PeopleDecisions.prototype['personId'] = undefined;

/**
 * The salutation is same as the normal salutation we use .The salutation can be Mr, Mrs.The salutation should not be given along with personName. 
 * @member {String} salutation
 */
PeopleDecisions.prototype['salutation'] = undefined;

/**
 * Type of name that the nameMatchString matched. 
 * @member {String} nameMatchSource
 */
PeopleDecisions.prototype['nameMatchSource'] = undefined;

/**
 * String on which the Concordance algorithm mapped the submitted entity.
 * @member {String} nameMatchString
 */
PeopleDecisions.prototype['nameMatchString'] = undefined;

/**
 * Name of the column in the input file that contains the person name. 
 * @member {String} personName
 */
PeopleDecisions.prototype['personName'] = undefined;

/**
 * Name of the column in the input file that contains the person's suffix. 
 * @member {String} suffix
 */
PeopleDecisions.prototype['suffix'] = undefined;

/**
 * Probability of the match being similar to the entity requested as determined by the Concordance algorithm. A similarityScore of 1 is the highest level of similarity. 
 * @member {Number} similarityScore
 */
PeopleDecisions.prototype['similarityScore'] = undefined;

/**
 * Flag denoting if the row is a match. 
 * @member {Boolean} matchFlag
 */
PeopleDecisions.prototype['matchFlag'] = undefined;

/**
 * Row number for match in the request or input file.
 * @member {Number} rowIndex
 */
PeopleDecisions.prototype['rowIndex'] = undefined;

/**
 * Identifier denoting a specific Concordance task submitted by the user.
 * @member {Number} taskId
 */
PeopleDecisions.prototype['taskId'] = undefined;

/**
 * The title of the person.
 * @member {String} title
 */
PeopleDecisions.prototype['title'] = undefined;

/**
 * The universe identifier
 * @member {Number} universeId
 */
PeopleDecisions.prototype['universeId'] = undefined;





/**
 * Allowed values for the <code>mapStatus</code> property.
 * @enum {String}
 * @readonly
 */
PeopleDecisions['MapStatusEnum'] = {

    /**
     * value: "MAPPED"
     * @const
     */
    "MAPPED": "MAPPED",

    /**
     * value: "UNMAPPED"
     * @const
     */
    "UNMAPPED": "UNMAPPED",

    /**
     * value: "INDETERMINATE"
     * @const
     */
    "INDETERMINATE": "INDETERMINATE"
};



export default PeopleDecisions;

