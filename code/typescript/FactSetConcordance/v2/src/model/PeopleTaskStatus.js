/**
 * FactSet Concordance API
 * The FactSet Concordance API provides the ability to programmatically look up several types of entities by their name and other attributes. It attempts to match attributes that you supply for the entity and returns as many match candidates as it can find. The result is a \"concorded\" FactSet Entity Permanent identifier.  The Entity Identifier can then be used as input throughout FactSet's Content soultions, such as Content APIs and Standard DataFeeds.<p> There are two types of workflows supported in the API. The first workflow type follows traditional API conventions in that a request is accepted and a response is returned synchronously. The second workflow type involves a background task. With this workflow, a task is created for uploading a set of queries, and then the client polls for the task to complete. Once the task has completed, the client retrieves the concordance results throught the decisions endpoint.</p> 
 *
 * The version of the OpenAPI document: 2.3.1
 * Contact: api@factset.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The PeopleTaskStatus model module.
 * @module model/PeopleTaskStatus
 */
class PeopleTaskStatus {
    /**
     * Constructs a new <code>PeopleTaskStatus</code>.
     * Concordance People Task Status object. Shows the settings and status of a taskId and some statistics on the matches. 
     * @alias module:model/PeopleTaskStatus
     */
    constructor() { 
        
        PeopleTaskStatus.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>PeopleTaskStatus</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PeopleTaskStatus} obj Optional instance to populate.
     * @return {module:model/PeopleTaskStatus} The populated <code>PeopleTaskStatus</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PeopleTaskStatus();

            if (data.hasOwnProperty('clientIdColumn')) {
                obj['clientIdColumn'] = ApiClient.convertToType(data['clientIdColumn'], 'String');
            }
            if (data.hasOwnProperty('decisionRate')) {
                obj['decisionRate'] = ApiClient.convertToType(data['decisionRate'], 'Number');
            }
            if (data.hasOwnProperty('entityColumn')) {
                obj['entityColumn'] = ApiClient.convertToType(data['entityColumn'], 'String');
            }
            if (data.hasOwnProperty('firstNameColumn')) {
                obj['firstNameColumn'] = ApiClient.convertToType(data['firstNameColumn'], 'String');
            }
            if (data.hasOwnProperty('hasResult')) {
                obj['hasResult'] = ApiClient.convertToType(data['hasResult'], 'Boolean');
            }
            if (data.hasOwnProperty('inputCount')) {
                obj['inputCount'] = ApiClient.convertToType(data['inputCount'], 'Number');
            }
            if (data.hasOwnProperty('inputFile')) {
                obj['inputFile'] = ApiClient.convertToType(data['inputFile'], 'String');
            }
            if (data.hasOwnProperty('lastNameColumn')) {
                obj['lastNameColumn'] = ApiClient.convertToType(data['lastNameColumn'], 'String');
            }
            if (data.hasOwnProperty('mappedCount')) {
                obj['mappedCount'] = ApiClient.convertToType(data['mappedCount'], 'Number');
            }
            if (data.hasOwnProperty('middleNameColumn')) {
                obj['middleNameColumn'] = ApiClient.convertToType(data['middleNameColumn'], 'String');
            }
            if (data.hasOwnProperty('personNameColumn')) {
                obj['personNameColumn'] = ApiClient.convertToType(data['personNameColumn'], 'String');
            }
            if (data.hasOwnProperty('priorityColumn')) {
                obj['priorityColumn'] = ApiClient.convertToType(data['priorityColumn'], 'String');
            }
            if (data.hasOwnProperty('processStartTime')) {
                obj['processStartTime'] = ApiClient.convertToType(data['processStartTime'], 'Date');
            }
            if (data.hasOwnProperty('processDuration')) {
                obj['processDuration'] = ApiClient.convertToType(data['processDuration'], 'Number');
            }
            if (data.hasOwnProperty('salutationColumn')) {
                obj['salutationColumn'] = ApiClient.convertToType(data['salutationColumn'], 'String');
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = ApiClient.convertToType(data['status'], 'String');
            }
            if (data.hasOwnProperty('suffixColumn')) {
                obj['suffixColumn'] = ApiClient.convertToType(data['suffixColumn'], 'String');
            }
            if (data.hasOwnProperty('taskAction')) {
                obj['taskAction'] = ApiClient.convertToType(data['taskAction'], 'String');
            }
            if (data.hasOwnProperty('taskId')) {
                obj['taskId'] = ApiClient.convertToType(data['taskId'], 'Number');
            }
            if (data.hasOwnProperty('taskName')) {
                obj['taskName'] = ApiClient.convertToType(data['taskName'], 'String');
            }
            if (data.hasOwnProperty('unmappedCount')) {
                obj['unmappedCount'] = ApiClient.convertToType(data['unmappedCount'], 'Number');
            }
            if (data.hasOwnProperty('tryCount')) {
                obj['tryCount'] = ApiClient.convertToType(data['tryCount'], 'Number');
            }
            if (data.hasOwnProperty('message')) {
                obj['message'] = ApiClient.convertToType(data['message'], 'String');
            }
            if (data.hasOwnProperty('error')) {
                obj['error'] = ApiClient.convertToType(data['error'], 'String');
            }
            if (data.hasOwnProperty('errorTitle')) {
                obj['errorTitle'] = ApiClient.convertToType(data['errorTitle'], 'String');
            }
            if (data.hasOwnProperty('indeterminateCount')) {
                obj['indeterminateCount'] = ApiClient.convertToType(data['indeterminateCount'], 'Number');
            }
            if (data.hasOwnProperty('taskSubmitTime')) {
                obj['taskSubmitTime'] = ApiClient.convertToType(data['taskSubmitTime'], 'Date');
            }
            if (data.hasOwnProperty('universeId')) {
                obj['universeId'] = ApiClient.convertToType(data['universeId'], 'Number');
            }
            if (data.hasOwnProperty('universeName')) {
                obj['universeName'] = ApiClient.convertToType(data['universeName'], 'String');
            }
            if (data.hasOwnProperty('userFullName')) {
                obj['userFullName'] = ApiClient.convertToType(data['userFullName'], 'String');
            }
            if (data.hasOwnProperty('userSerial')) {
                obj['userSerial'] = ApiClient.convertToType(data['userSerial'], 'String');
            }
        }
        return obj;
    }


}

/**
 * Name of the column in the input file that contains a unique identifier supplied by the user.
 * @member {String} clientIdColumn
 */
PeopleTaskStatus.prototype['clientIdColumn'] = undefined;

/**
 * Percentage of mapped entities in the Input File.
 * @member {Number} decisionRate
 */
PeopleTaskStatus.prototype['decisionRate'] = undefined;

/**
 * Name of the column of the entity. 
 * @member {String} entityColumn
 */
PeopleTaskStatus.prototype['entityColumn'] = undefined;

/**
 * Name of the column in the input file that contains the first name.
 * @member {String} firstNameColumn
 */
PeopleTaskStatus.prototype['firstNameColumn'] = undefined;

/**
 * Whether the result is available.
 * @member {Boolean} hasResult
 */
PeopleTaskStatus.prototype['hasResult'] = undefined;

/**
 * Number of records in the Input File.
 * @member {Number} inputCount
 */
PeopleTaskStatus.prototype['inputCount'] = undefined;

/**
 * The input file is posted as a file object in the form. 
 * @member {String} inputFile
 */
PeopleTaskStatus.prototype['inputFile'] = undefined;

/**
 * Name of the column in the input file that contains the first name. 
 * @member {String} lastNameColumn
 */
PeopleTaskStatus.prototype['lastNameColumn'] = undefined;

/**
 * Number of records with status of MAPPED the Input File.
 * @member {Number} mappedCount
 */
PeopleTaskStatus.prototype['mappedCount'] = undefined;

/**
 * Name of the column in the input file that contains the middle name. 
 * @member {String} middleNameColumn
 */
PeopleTaskStatus.prototype['middleNameColumn'] = undefined;

/**
 * Name of the column in the input file that contains the person name. 
 * @member {String} personNameColumn
 */
PeopleTaskStatus.prototype['personNameColumn'] = undefined;

/**
 * Name of the column in the input file that contains the priority. 
 * @member {String} priorityColumn
 */
PeopleTaskStatus.prototype['priorityColumn'] = undefined;

/**
 * Process start time in UTC.
 * @member {Date} processStartTime
 */
PeopleTaskStatus.prototype['processStartTime'] = undefined;

/**
 * Process duration in seconds.
 * @member {Number} processDuration
 */
PeopleTaskStatus.prototype['processDuration'] = undefined;

/**
 * Name of the column in the input file that contains the person's salutation. 
 * @member {String} salutationColumn
 */
PeopleTaskStatus.prototype['salutationColumn'] = undefined;

/**
 * Status of the Concordance Task. If the value is \"SUCCESS\", you can move to the subsequent /entity-decisions endpoint to retrieve the results.
 * @member {module:model/PeopleTaskStatus.StatusEnum} status
 */
PeopleTaskStatus.prototype['status'] = undefined;

/**
 * Name of the column in the input file that contains the person's suffix. 
 * @member {String} suffixColumn
 */
PeopleTaskStatus.prototype['suffixColumn'] = undefined;

/**
 * Action status for the Concordance Task process.
 * @member {String} taskAction
 */
PeopleTaskStatus.prototype['taskAction'] = undefined;

/**
 * Identifier denoting a specific Concordance task submitted by the user.
 * @member {Number} taskId
 */
PeopleTaskStatus.prototype['taskId'] = undefined;

/**
 * User-defined name for the task used to name the output file.
 * @member {String} taskName
 */
PeopleTaskStatus.prototype['taskName'] = undefined;

/**
 * Number of records with status of UNMAPPED the Input File.
 * @member {Number} unmappedCount
 */
PeopleTaskStatus.prototype['unmappedCount'] = undefined;

/**
 * Number of tries made so far for the request.
 * @member {Number} tryCount
 */
PeopleTaskStatus.prototype['tryCount'] = undefined;

/**
 * Textual message for the status.
 * @member {String} message
 */
PeopleTaskStatus.prototype['message'] = undefined;

/**
 * @member {String} error
 */
PeopleTaskStatus.prototype['error'] = undefined;

/**
 * @member {String} errorTitle
 */
PeopleTaskStatus.prototype['errorTitle'] = undefined;

/**
 * Number of records with status of INDETERMINATE the Input File.
 * @member {Number} indeterminateCount
 */
PeopleTaskStatus.prototype['indeterminateCount'] = undefined;

/**
 * Time the Task was submitted in UTC.
 * @member {Date} taskSubmitTime
 */
PeopleTaskStatus.prototype['taskSubmitTime'] = undefined;

/**
 * The universe identifier
 * @member {Number} universeId
 */
PeopleTaskStatus.prototype['universeId'] = undefined;

/**
 * Full name of the person associated with the `userSerial`. 
 * @member {String} universeName
 */
PeopleTaskStatus.prototype['universeName'] = undefined;

/**
 * Full name of the person associated with the `userSerial`. 
 * @member {String} userFullName
 */
PeopleTaskStatus.prototype['userFullName'] = undefined;

/**
 * user-serial of the person who initiated the entity task.
 * @member {String} userSerial
 */
PeopleTaskStatus.prototype['userSerial'] = undefined;





/**
 * Allowed values for the <code>status</code> property.
 * @enum {String}
 * @readonly
 */
PeopleTaskStatus['StatusEnum'] = {

    /**
     * value: "PENDING"
     * @const
     */
    "PENDING": "PENDING",

    /**
     * value: "IN_PROGRESS"
     * @const
     */
    "IN_PROGRESS": "IN_PROGRESS",

    /**
     * value: "SUCCESS"
     * @const
     */
    "SUCCESS": "SUCCESS",

    /**
     * value: "FAILURE"
     * @const
     */
    "FAILURE": "FAILURE",

    /**
     * value: "BAD_REQUEST"
     * @const
     */
    "BAD_REQUEST": "BAD_REQUEST",

    /**
     * value: "ABORTED"
     * @const
     */
    "ABORTED": "ABORTED"
};



export default PeopleTaskStatus;

