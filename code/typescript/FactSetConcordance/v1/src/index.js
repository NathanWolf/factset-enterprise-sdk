/**
 * FactSet Concordance API
 * The FactSet Concordance API provides the ability to programmatically look up several types of entities by their name and other attributes. It attempts to match attributes that you supply for the entity and returns as many match candidates as it can find. The result is a \"concorded\" FactSet Entity Permanent identifier.  The Entity Identifier can then be used as input throughout FactSet's Content soultions, such as Content APIs and Standard DataFeeds.<p> There are types of workflows supported in the API. The first workflow type follows traditional API conventions in that a request is accepted and a response is returned synchronously. The second workflow type involves a background task. With this workflow, a task is created for uploading a set of queries, and then the client polls for the task to complete. Once the task has completed, the client retrieves the concordance results throught the decisions endpoint.</p> 
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: api@factset.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from './ApiClient';
import EntityDecisionsResponse from './model/EntityDecisionsResponse';
import EntityMapping from './model/EntityMapping';
import EntityMappingRequest from './model/EntityMappingRequest';
import EntityMatch from './model/EntityMatch';
import EntityMatchRequest from './model/EntityMatchRequest';
import EntityMatchRequestInput from './model/EntityMatchRequestInput';
import EntityMatchesResponse from './model/EntityMatchesResponse';
import EntityResponse from './model/EntityResponse';
import EntityTaskResponse from './model/EntityTaskResponse';
import EntityTaskStatus from './model/EntityTaskStatus';
import EntityTaskStatusResponse from './model/EntityTaskStatusResponse';
import EntityUniverse from './model/EntityUniverse';
import EntityUniverseResponse from './model/EntityUniverseResponse';
import ErrorResponse from './model/ErrorResponse';
import ErrorResponseSubErrors from './model/ErrorResponseSubErrors';
import SnowflakeEntityMatchRequest from './model/SnowflakeEntityMatchRequest';
import SnowflakeEntityMatchResponse from './model/SnowflakeEntityMatchResponse';
import EntityMatchApi from './api/EntityMatchApi';
import EntityMatchBulkApi from './api/EntityMatchBulkApi';
import ManageMappingsApi from './api/ManageMappingsApi';
import SnowflakeApi from './api/SnowflakeApi';


/**
* The_FactSet_Concordance_API_provides_the_ability_to_programmatically_look_up_several_types_of_entities_by_their_name_and_other_attributes__It_attempts_to_match_attributes_that_you_supply_for_the_entity_and_returns_as_many_match_candidates_as_it_can_find__The_result_is_a_concorded_FactSet_Entity_Permanent_identifier___The_Entity_Identifier_can_then_be_used_as_input_throughout_FactSets_Content_soultions_such_as_Content_APIs_and_Standard_DataFeeds_p_There_are_types_of_workflows_supported_in_the_API__The_first_workflow_type_follows_traditional_API_conventions_in_that_a_request_is_accepted_and_a_response_is_returned_synchronously__The_second_workflow_type_involves_a_background_task__With_this_workflow_a_task_is_created_for_uploading_a_set_of_queries_and_then_the_client_polls_for_the_task_to_complete__Once_the_task_has_completed_the_client_retrieves_the_concordance_results_throught_the_decisions_endpoint__p.<br>
* The <code>index</code> module provides access to constructors for all the classes which comprise the public API.
* <p>
* An AMD (recommended!) or CommonJS application will generally do something equivalent to the following:
* <pre>
* var factsetconcordance = require('index'); // See note below*.
* var xxxSvc = new factsetconcordance.XxxApi(); // Allocate the API class we're going to use.
* var yyyModel = new factsetconcordance.Yyy(); // Construct a model instance.
* yyyModel.someProperty = 'someValue';
* ...
* var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.
* ...
* </pre>
* <em>*NOTE: For a top-level AMD script, use require(['index'], function(){...})
* and put the application logic within the callback function.</em>
* </p>
* <p>
* A non-AMD browser application (discouraged) might do something like this:
* <pre>
* var xxxSvc = new factsetconcordance.XxxApi(); // Allocate the API class we're going to use.
* var yyy = new factsetconcordance.Yyy(); // Construct a model instance.
* yyyModel.someProperty = 'someValue';
* ...
* var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.
* ...
* </pre>
* </p>
* @module index
* @version 0.8.0
*/
export {
    /**
     * The ApiClient constructor.
     * @property {module:ApiClient}
     */
    ApiClient,

    /**
     * The EntityDecisionsResponse model constructor.
     * @property {module:model/EntityDecisionsResponse}
     */
    EntityDecisionsResponse,

    /**
     * The EntityMapping model constructor.
     * @property {module:model/EntityMapping}
     */
    EntityMapping,

    /**
     * The EntityMappingRequest model constructor.
     * @property {module:model/EntityMappingRequest}
     */
    EntityMappingRequest,

    /**
     * The EntityMatch model constructor.
     * @property {module:model/EntityMatch}
     */
    EntityMatch,

    /**
     * The EntityMatchRequest model constructor.
     * @property {module:model/EntityMatchRequest}
     */
    EntityMatchRequest,

    /**
     * The EntityMatchRequestInput model constructor.
     * @property {module:model/EntityMatchRequestInput}
     */
    EntityMatchRequestInput,

    /**
     * The EntityMatchesResponse model constructor.
     * @property {module:model/EntityMatchesResponse}
     */
    EntityMatchesResponse,

    /**
     * The EntityResponse model constructor.
     * @property {module:model/EntityResponse}
     */
    EntityResponse,

    /**
     * The EntityTaskResponse model constructor.
     * @property {module:model/EntityTaskResponse}
     */
    EntityTaskResponse,

    /**
     * The EntityTaskStatus model constructor.
     * @property {module:model/EntityTaskStatus}
     */
    EntityTaskStatus,

    /**
     * The EntityTaskStatusResponse model constructor.
     * @property {module:model/EntityTaskStatusResponse}
     */
    EntityTaskStatusResponse,

    /**
     * The EntityUniverse model constructor.
     * @property {module:model/EntityUniverse}
     */
    EntityUniverse,

    /**
     * The EntityUniverseResponse model constructor.
     * @property {module:model/EntityUniverseResponse}
     */
    EntityUniverseResponse,

    /**
     * The ErrorResponse model constructor.
     * @property {module:model/ErrorResponse}
     */
    ErrorResponse,

    /**
     * The ErrorResponseSubErrors model constructor.
     * @property {module:model/ErrorResponseSubErrors}
     */
    ErrorResponseSubErrors,

    /**
     * The SnowflakeEntityMatchRequest model constructor.
     * @property {module:model/SnowflakeEntityMatchRequest}
     */
    SnowflakeEntityMatchRequest,

    /**
     * The SnowflakeEntityMatchResponse model constructor.
     * @property {module:model/SnowflakeEntityMatchResponse}
     */
    SnowflakeEntityMatchResponse,

    /**
    * The EntityMatchApi service constructor.
    * @property {module:api/EntityMatchApi}
    */
    EntityMatchApi,

    /**
    * The EntityMatchBulkApi service constructor.
    * @property {module:api/EntityMatchBulkApi}
    */
    EntityMatchBulkApi,

    /**
    * The ManageMappingsApi service constructor.
    * @property {module:api/ManageMappingsApi}
    */
    ManageMappingsApi,

    /**
    * The SnowflakeApi service constructor.
    * @property {module:api/SnowflakeApi}
    */
    SnowflakeApi
};
