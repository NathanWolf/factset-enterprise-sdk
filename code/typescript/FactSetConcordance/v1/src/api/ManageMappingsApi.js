/**
 * FactSet Concordance API
 * The FactSet Concordance API provides the ability to programmatically look up several types of entities by their name and other attributes. It attempts to match attributes that you supply for the entity and returns as many match candidates as it can find. The result is a \"concorded\" FactSet Entity Permanent identifier.  The Entity Identifier can then be used as input throughout FactSet's Content soultions, such as Content APIs and Standard DataFeeds.<p> There are types of workflows supported in the API. The first workflow type follows traditional API conventions in that a request is accepted and a response is returned synchronously. The second workflow type involves a background task. With this workflow, a task is created for uploading a set of queries, and then the client polls for the task to complete. Once the task has completed, the client retrieves the concordance results throught the decisions endpoint.</p> 
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: api@factset.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import EntityMappingRequest from '../model/EntityMappingRequest';
import EntityResponse from '../model/EntityResponse';
import EntityUniverseResponse from '../model/EntityUniverseResponse';
import ErrorResponse from '../model/ErrorResponse';

/**
* ManageMappings service.
* @module api/ManageMappingsApi
* @version 0.8.0
*/
export default class ManageMappingsApi {

    /**
    * Constructs a new ManageMappingsApi. 
    * @alias module:api/ManageMappingsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * View Universe for the requesting user.
     * Retrieves all entity mappings' history made by the current user, or for a list of clientIds. 
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.clientId Filter by the clientId(s) created by the user in a previous mapping. 
     * @param {Array.<module:model/String>} opts.mapStatus Filter by the Entity Decisions that have the specified mapStatus, where -   * MAPPED - The requested Entity Name is successfully mapped to a FactSet Entity Id (-E)   * UNMAPPED - The requested Entity Name is unmapped by FactSet.   * INDETERMINATE - The requested Entity Name was unable to make a mapping. 
     * @param {Number} opts.offset Starting row for records to return or rows to skip. (default to 0)
     * @param {Number} opts.limit Limits the number of records in the response.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/EntityUniverseResponse} and HTTP response
     */
    getEntityUniverseWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'clientId': this.apiClient.buildCollectionParam(opts['clientId'], 'csv'),
        'mapStatus': this.apiClient.buildCollectionParam(opts['mapStatus'], 'multi'),
        'offset': opts['offset'],
        'limit': opts['limit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = EntityUniverseResponse;
      return this.apiClient.callApi(
        '/factset-concordance/v1/entity-universe', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * View Universe for the requesting user.
     * Retrieves all entity mappings' history made by the current user, or for a list of clientIds. 
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.clientId Filter by the clientId(s) created by the user in a previous mapping. 
     * @param {Array.<module:model/String>} opts.mapStatus Filter by the Entity Decisions that have the specified mapStatus, where -   * MAPPED - The requested Entity Name is successfully mapped to a FactSet Entity Id (-E)   * UNMAPPED - The requested Entity Name is unmapped by FactSet.   * INDETERMINATE - The requested Entity Name was unable to make a mapping. 
     * @param {Number} opts.offset Starting row for records to return or rows to skip. (default to 0)
     * @param {Number} opts.limit Limits the number of records in the response.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/EntityUniverseResponse}
     */
    getEntityUniverse(opts) {
      return this.getEntityUniverseWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Saves a single-mapping specified by the client.
     * Saves a Concordance Mapping to the client universe. When making a post, all exiting values are overwritten in the database with the values passed in the request. clientId and clientName are required. 
     * @param {module:model/EntityMappingRequest} entityMappingRequest A request to create a single mapping.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/EntityResponse} and HTTP response
     */
    saveEntityMappingWithHttpInfo(entityMappingRequest) {
      let postBody = entityMappingRequest;
      // verify the required parameter 'entityMappingRequest' is set
      if (entityMappingRequest === undefined || entityMappingRequest === null) {
        throw new Error("Missing the required parameter 'entityMappingRequest' when calling saveEntityMapping");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = EntityResponse;
      return this.apiClient.callApi(
        '/factset-concordance/v1/entity-mapping', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Saves a single-mapping specified by the client.
     * Saves a Concordance Mapping to the client universe. When making a post, all exiting values are overwritten in the database with the values passed in the request. clientId and clientName are required. 
     * @param {module:model/EntityMappingRequest} entityMappingRequest A request to create a single mapping.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/EntityResponse}
     */
    saveEntityMapping(entityMappingRequest) {
      return this.saveEntityMappingWithHttpInfo(entityMappingRequest)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
