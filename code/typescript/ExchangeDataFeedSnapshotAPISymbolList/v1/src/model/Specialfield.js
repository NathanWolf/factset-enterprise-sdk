/**
 * Exchange DataFeed Snapshot
 * FactSetâ€™s Exchange DataFeed Snapshot API provides cost-effective access to real-time and delayed global exchange data. Proprietary technology normalizes over 200 global exchanges and 150+ data fields. Asset types integrated include equities, futures, options, warrants, fixed income, mutual funds, ETFs, indices, commodities, and FX rates. <p>Cutting-edge technology ensures reliability and provides scalability that allow applications to request multiple items at a time. To simplify client-side development an entire response can be placed in a matrix or table for effortless integration into internal and external applications. Using specified output formats (CSV, XML, JSON) receive all standard fields by default or customize the list based on specific needs.</p></p>Below are the current hosts:</p><p>Production: api.factset.com<p>Sandbox: api-sandbox.factset.com</p>
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: api@factset.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Specialfield model module.
 * @module model/Specialfield
 * @version 0.9.0
 */
class Specialfield {
    /**
     * Constructs a new <code>Specialfield</code>.
     * @alias module:model/Specialfield
     */
    constructor() { 
        
        Specialfield.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Specialfield</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Specialfield} obj Optional instance to populate.
     * @return {module:model/Specialfield} The populated <code>Specialfield</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Specialfield();

            if (data.hasOwnProperty('NF')) {
                obj['NF'] = ApiClient.convertToType(data['NF'], 'String');
            }
            if (data.hasOwnProperty('NA')) {
                obj['NA'] = ApiClient.convertToType(data['NA'], 'String');
            }
            if (data.hasOwnProperty('NE')) {
                obj['NE'] = ApiClient.convertToType(data['NE'], Object);
            }
        }
        return obj;
    }


}

/**
 * **#NF#** - Not found. The requested symbol could not be found by the service.
 * @member {String} NF
 */
Specialfield.prototype['NF'] = undefined;

/**
 * **#NA#** - Not Applicable. The requested field could not be found for the requested symbol. This usually means that the field is not applicable for this type of record.
 * @member {String} NA
 */
Specialfield.prototype['NA'] = undefined;

/**
 * **#NE#** - Not Entitled. The supplied username and password are not entitled to the data requested.
 * @member {Object} NE
 */
Specialfield.prototype['NE'] = undefined;






export default Specialfield;

