/**
 * fpo_mp_input
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import OptimizerInputsDiversificationConstraint from './OptimizerInputsDiversificationConstraint';
import OptimizerInputsExpectedReturnConstraint from './OptimizerInputsExpectedReturnConstraint';
import OptimizerInputsFactorExposureConstraint from './OptimizerInputsFactorExposureConstraint';
import OptimizerInputsGeneralLinearConstraint from './OptimizerInputsGeneralLinearConstraint';
import OptimizerInputsHoldingsThresholdConstraint from './OptimizerInputsHoldingsThresholdConstraint';
import OptimizerInputsHoldingsWeightConstraint from './OptimizerInputsHoldingsWeightConstraint';
import OptimizerInputsLeverageConstraint from './OptimizerInputsLeverageConstraint';
import OptimizerInputsLimitRiskETLConstraint from './OptimizerInputsLimitRiskETLConstraint';
import OptimizerInputsNumberOfBuysConstraint from './OptimizerInputsNumberOfBuysConstraint';
import OptimizerInputsNumberOfSellsConstraint from './OptimizerInputsNumberOfSellsConstraint';
import OptimizerInputsNumberofAssetsConstraint from './OptimizerInputsNumberofAssetsConstraint';
import OptimizerInputsRiskContributionConstraint from './OptimizerInputsRiskContributionConstraint';
import OptimizerInputsRiskVolatilityConstraint from './OptimizerInputsRiskVolatilityConstraint';
import OptimizerInputsRoundlotsConstraint from './OptimizerInputsRoundlotsConstraint';
import OptimizerInputsSensitivityConstraint from './OptimizerInputsSensitivityConstraint';
import OptimizerInputsTradeThresholdConstraint from './OptimizerInputsTradeThresholdConstraint';
import OptimizerInputsTradingLimitTradeConstraint from './OptimizerInputsTradingLimitTradeConstraint';
import OptimizerInputsTransactionCostConstraint from './OptimizerInputsTransactionCostConstraint';
import OptimizerInputsTurnoverConstraint from './OptimizerInputsTurnoverConstraint';

/**
 * The OptimizerInputsConstraints model module.
 * @module model/OptimizerInputsConstraints
 * @version 0.20.0
 */
class OptimizerInputsConstraints {
    /**
     * Constructs a new <code>OptimizerInputsConstraints</code>.
     * @alias module:model/OptimizerInputsConstraints
     */
    constructor() { 
        
        OptimizerInputsConstraints.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>OptimizerInputsConstraints</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/OptimizerInputsConstraints} obj Optional instance to populate.
     * @return {module:model/OptimizerInputsConstraints} The populated <code>OptimizerInputsConstraints</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new OptimizerInputsConstraints();

            if (data.hasOwnProperty('expected_returns')) {
                obj['expected_returns'] = ApiClient.convertToType(data['expected_returns'], [OptimizerInputsExpectedReturnConstraint]);
            }
            if (data.hasOwnProperty('diversification')) {
                obj['diversification'] = ApiClient.convertToType(data['diversification'], [OptimizerInputsDiversificationConstraint]);
            }
            if (data.hasOwnProperty('factor_exposures')) {
                obj['factor_exposures'] = ApiClient.convertToType(data['factor_exposures'], [OptimizerInputsFactorExposureConstraint]);
            }
            if (data.hasOwnProperty('general_linear')) {
                obj['general_linear'] = ApiClient.convertToType(data['general_linear'], [OptimizerInputsGeneralLinearConstraint]);
            }
            if (data.hasOwnProperty('holding_threshold')) {
                obj['holding_threshold'] = ApiClient.convertToType(data['holding_threshold'], [OptimizerInputsHoldingsThresholdConstraint]);
            }
            if (data.hasOwnProperty('leverage')) {
                obj['leverage'] = ApiClient.convertToType(data['leverage'], [OptimizerInputsLeverageConstraint]);
            }
            if (data.hasOwnProperty('num_of_assets')) {
                obj['num_of_assets'] = ApiClient.convertToType(data['num_of_assets'], [OptimizerInputsNumberofAssetsConstraint]);
            }
            if (data.hasOwnProperty('sensitivity')) {
                obj['sensitivity'] = ApiClient.convertToType(data['sensitivity'], [OptimizerInputsSensitivityConstraint]);
            }
            if (data.hasOwnProperty('weight_constraint')) {
                obj['weight_constraint'] = ApiClient.convertToType(data['weight_constraint'], [OptimizerInputsHoldingsWeightConstraint]);
            }
            if (data.hasOwnProperty('number_of_buys')) {
                obj['number_of_buys'] = ApiClient.convertToType(data['number_of_buys'], [OptimizerInputsNumberOfBuysConstraint]);
            }
            if (data.hasOwnProperty('number_of_sells')) {
                obj['number_of_sells'] = ApiClient.convertToType(data['number_of_sells'], [OptimizerInputsNumberOfSellsConstraint]);
            }
            if (data.hasOwnProperty('round_lots')) {
                obj['round_lots'] = ApiClient.convertToType(data['round_lots'], [OptimizerInputsRoundlotsConstraint]);
            }
            if (data.hasOwnProperty('trade_threshold')) {
                obj['trade_threshold'] = ApiClient.convertToType(data['trade_threshold'], [OptimizerInputsTradeThresholdConstraint]);
            }
            if (data.hasOwnProperty('transaction_cost')) {
                obj['transaction_cost'] = ApiClient.convertToType(data['transaction_cost'], [OptimizerInputsTransactionCostConstraint]);
            }
            if (data.hasOwnProperty('trading_turnover')) {
                obj['trading_turnover'] = ApiClient.convertToType(data['trading_turnover'], [OptimizerInputsTurnoverConstraint]);
            }
            if (data.hasOwnProperty('risk_etl')) {
                obj['risk_etl'] = ApiClient.convertToType(data['risk_etl'], [OptimizerInputsLimitRiskETLConstraint]);
            }
            if (data.hasOwnProperty('risk_contribution')) {
                obj['risk_contribution'] = ApiClient.convertToType(data['risk_contribution'], [OptimizerInputsRiskContributionConstraint]);
            }
            if (data.hasOwnProperty('risk_volatility')) {
                obj['risk_volatility'] = ApiClient.convertToType(data['risk_volatility'], [OptimizerInputsRiskVolatilityConstraint]);
            }
            if (data.hasOwnProperty('limit_trade_constraint')) {
                obj['limit_trade_constraint'] = ApiClient.convertToType(data['limit_trade_constraint'], [OptimizerInputsTradingLimitTradeConstraint]);
            }
        }
        return obj;
    }


}

/**
 * @member {Array.<module:model/OptimizerInputsExpectedReturnConstraint>} expected_returns
 */
OptimizerInputsConstraints.prototype['expected_returns'] = undefined;

/**
 * @member {Array.<module:model/OptimizerInputsDiversificationConstraint>} diversification
 */
OptimizerInputsConstraints.prototype['diversification'] = undefined;

/**
 * @member {Array.<module:model/OptimizerInputsFactorExposureConstraint>} factor_exposures
 */
OptimizerInputsConstraints.prototype['factor_exposures'] = undefined;

/**
 * @member {Array.<module:model/OptimizerInputsGeneralLinearConstraint>} general_linear
 */
OptimizerInputsConstraints.prototype['general_linear'] = undefined;

/**
 * @member {Array.<module:model/OptimizerInputsHoldingsThresholdConstraint>} holding_threshold
 */
OptimizerInputsConstraints.prototype['holding_threshold'] = undefined;

/**
 * @member {Array.<module:model/OptimizerInputsLeverageConstraint>} leverage
 */
OptimizerInputsConstraints.prototype['leverage'] = undefined;

/**
 * @member {Array.<module:model/OptimizerInputsNumberofAssetsConstraint>} num_of_assets
 */
OptimizerInputsConstraints.prototype['num_of_assets'] = undefined;

/**
 * @member {Array.<module:model/OptimizerInputsSensitivityConstraint>} sensitivity
 */
OptimizerInputsConstraints.prototype['sensitivity'] = undefined;

/**
 * @member {Array.<module:model/OptimizerInputsHoldingsWeightConstraint>} weight_constraint
 */
OptimizerInputsConstraints.prototype['weight_constraint'] = undefined;

/**
 * @member {Array.<module:model/OptimizerInputsNumberOfBuysConstraint>} number_of_buys
 */
OptimizerInputsConstraints.prototype['number_of_buys'] = undefined;

/**
 * @member {Array.<module:model/OptimizerInputsNumberOfSellsConstraint>} number_of_sells
 */
OptimizerInputsConstraints.prototype['number_of_sells'] = undefined;

/**
 * @member {Array.<module:model/OptimizerInputsRoundlotsConstraint>} round_lots
 */
OptimizerInputsConstraints.prototype['round_lots'] = undefined;

/**
 * @member {Array.<module:model/OptimizerInputsTradeThresholdConstraint>} trade_threshold
 */
OptimizerInputsConstraints.prototype['trade_threshold'] = undefined;

/**
 * @member {Array.<module:model/OptimizerInputsTransactionCostConstraint>} transaction_cost
 */
OptimizerInputsConstraints.prototype['transaction_cost'] = undefined;

/**
 * @member {Array.<module:model/OptimizerInputsTurnoverConstraint>} trading_turnover
 */
OptimizerInputsConstraints.prototype['trading_turnover'] = undefined;

/**
 * @member {Array.<module:model/OptimizerInputsLimitRiskETLConstraint>} risk_etl
 */
OptimizerInputsConstraints.prototype['risk_etl'] = undefined;

/**
 * @member {Array.<module:model/OptimizerInputsRiskContributionConstraint>} risk_contribution
 */
OptimizerInputsConstraints.prototype['risk_contribution'] = undefined;

/**
 * @member {Array.<module:model/OptimizerInputsRiskVolatilityConstraint>} risk_volatility
 */
OptimizerInputsConstraints.prototype['risk_volatility'] = undefined;

/**
 * @member {Array.<module:model/OptimizerInputsTradingLimitTradeConstraint>} limit_trade_constraint
 */
OptimizerInputsConstraints.prototype['limit_trade_constraint'] = undefined;






export default OptimizerInputsConstraints;

