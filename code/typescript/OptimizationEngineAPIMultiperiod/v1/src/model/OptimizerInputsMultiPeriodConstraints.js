/**
 * fpo_mp_input
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import OptimizerInputsMPDiversificationConstraint from './OptimizerInputsMPDiversificationConstraint';
import OptimizerInputsMPExpectedReturnConstraint from './OptimizerInputsMPExpectedReturnConstraint';
import OptimizerInputsMPFactorExposureConstraint from './OptimizerInputsMPFactorExposureConstraint';
import OptimizerInputsMPGeneralLinearConstraint from './OptimizerInputsMPGeneralLinearConstraint';
import OptimizerInputsMPHoldingsThresholdConstraint from './OptimizerInputsMPHoldingsThresholdConstraint';
import OptimizerInputsMPHoldingsWeightConstraint from './OptimizerInputsMPHoldingsWeightConstraint';
import OptimizerInputsMPLeverageConstraint from './OptimizerInputsMPLeverageConstraint';
import OptimizerInputsMPLimitTailRiskConstraint from './OptimizerInputsMPLimitTailRiskConstraint';
import OptimizerInputsMPNumberOfBuysConstraint from './OptimizerInputsMPNumberOfBuysConstraint';
import OptimizerInputsMPNumberOfSellsConstraint from './OptimizerInputsMPNumberOfSellsConstraint';
import OptimizerInputsMPNumberofAssetsConstraint from './OptimizerInputsMPNumberofAssetsConstraint';
import OptimizerInputsMPRiskContributionConstraint from './OptimizerInputsMPRiskContributionConstraint';
import OptimizerInputsMPRiskVolatilityConstraint from './OptimizerInputsMPRiskVolatilityConstraint';
import OptimizerInputsMPRoundlotsConstraint from './OptimizerInputsMPRoundlotsConstraint';
import OptimizerInputsMPSensitivityConstraint from './OptimizerInputsMPSensitivityConstraint';
import OptimizerInputsMPTargetProbabilityConstraint from './OptimizerInputsMPTargetProbabilityConstraint';
import OptimizerInputsMPTradeThresholdConstraint from './OptimizerInputsMPTradeThresholdConstraint';
import OptimizerInputsMPTurnoverConstraint from './OptimizerInputsMPTurnoverConstraint';

/**
 * The OptimizerInputsMultiPeriodConstraints model module.
 * @module model/OptimizerInputsMultiPeriodConstraints
 */
class OptimizerInputsMultiPeriodConstraints {
    /**
     * Constructs a new <code>OptimizerInputsMultiPeriodConstraints</code>.
     * @alias module:model/OptimizerInputsMultiPeriodConstraints
     */
    constructor() { 
        
        OptimizerInputsMultiPeriodConstraints.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>OptimizerInputsMultiPeriodConstraints</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/OptimizerInputsMultiPeriodConstraints} obj Optional instance to populate.
     * @return {module:model/OptimizerInputsMultiPeriodConstraints} The populated <code>OptimizerInputsMultiPeriodConstraints</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new OptimizerInputsMultiPeriodConstraints();

            if (data.hasOwnProperty('expected_returns')) {
                obj['expected_returns'] = ApiClient.convertToType(data['expected_returns'], [OptimizerInputsMPExpectedReturnConstraint]);
            }
            if (data.hasOwnProperty('diversification')) {
                obj['diversification'] = ApiClient.convertToType(data['diversification'], [OptimizerInputsMPDiversificationConstraint]);
            }
            if (data.hasOwnProperty('factor_exposures')) {
                obj['factor_exposures'] = ApiClient.convertToType(data['factor_exposures'], [OptimizerInputsMPFactorExposureConstraint]);
            }
            if (data.hasOwnProperty('general_linear')) {
                obj['general_linear'] = ApiClient.convertToType(data['general_linear'], [OptimizerInputsMPGeneralLinearConstraint]);
            }
            if (data.hasOwnProperty('holding_threshold')) {
                obj['holding_threshold'] = ApiClient.convertToType(data['holding_threshold'], [OptimizerInputsMPHoldingsThresholdConstraint]);
            }
            if (data.hasOwnProperty('leverage')) {
                obj['leverage'] = ApiClient.convertToType(data['leverage'], [OptimizerInputsMPLeverageConstraint]);
            }
            if (data.hasOwnProperty('num_of_assets')) {
                obj['num_of_assets'] = ApiClient.convertToType(data['num_of_assets'], [OptimizerInputsMPNumberofAssetsConstraint]);
            }
            if (data.hasOwnProperty('sensitivity')) {
                obj['sensitivity'] = ApiClient.convertToType(data['sensitivity'], [OptimizerInputsMPSensitivityConstraint]);
            }
            if (data.hasOwnProperty('weight_constraint')) {
                obj['weight_constraint'] = ApiClient.convertToType(data['weight_constraint'], [OptimizerInputsMPHoldingsWeightConstraint]);
            }
            if (data.hasOwnProperty('number_of_buys')) {
                obj['number_of_buys'] = ApiClient.convertToType(data['number_of_buys'], [OptimizerInputsMPNumberOfBuysConstraint]);
            }
            if (data.hasOwnProperty('number_of_sells')) {
                obj['number_of_sells'] = ApiClient.convertToType(data['number_of_sells'], [OptimizerInputsMPNumberOfSellsConstraint]);
            }
            if (data.hasOwnProperty('round_lots')) {
                obj['round_lots'] = ApiClient.convertToType(data['round_lots'], [OptimizerInputsMPRoundlotsConstraint]);
            }
            if (data.hasOwnProperty('trade_threshold')) {
                obj['trade_threshold'] = ApiClient.convertToType(data['trade_threshold'], [OptimizerInputsMPTradeThresholdConstraint]);
            }
            if (data.hasOwnProperty('trading_turnover')) {
                obj['trading_turnover'] = ApiClient.convertToType(data['trading_turnover'], [OptimizerInputsMPTurnoverConstraint]);
            }
            if (data.hasOwnProperty('risk_contribution')) {
                obj['risk_contribution'] = ApiClient.convertToType(data['risk_contribution'], [OptimizerInputsMPRiskContributionConstraint]);
            }
            if (data.hasOwnProperty('risk_volatility')) {
                obj['risk_volatility'] = ApiClient.convertToType(data['risk_volatility'], [OptimizerInputsMPRiskVolatilityConstraint]);
            }
            if (data.hasOwnProperty('tail_risk')) {
                obj['tail_risk'] = ApiClient.convertToType(data['tail_risk'], [OptimizerInputsMPLimitTailRiskConstraint]);
            }
            if (data.hasOwnProperty('target_probability')) {
                obj['target_probability'] = ApiClient.convertToType(data['target_probability'], [OptimizerInputsMPTargetProbabilityConstraint]);
            }
        }
        return obj;
    }


}

/**
 * @member {Array.<module:model/OptimizerInputsMPExpectedReturnConstraint>} expected_returns
 */
OptimizerInputsMultiPeriodConstraints.prototype['expected_returns'] = undefined;

/**
 * @member {Array.<module:model/OptimizerInputsMPDiversificationConstraint>} diversification
 */
OptimizerInputsMultiPeriodConstraints.prototype['diversification'] = undefined;

/**
 * @member {Array.<module:model/OptimizerInputsMPFactorExposureConstraint>} factor_exposures
 */
OptimizerInputsMultiPeriodConstraints.prototype['factor_exposures'] = undefined;

/**
 * @member {Array.<module:model/OptimizerInputsMPGeneralLinearConstraint>} general_linear
 */
OptimizerInputsMultiPeriodConstraints.prototype['general_linear'] = undefined;

/**
 * @member {Array.<module:model/OptimizerInputsMPHoldingsThresholdConstraint>} holding_threshold
 */
OptimizerInputsMultiPeriodConstraints.prototype['holding_threshold'] = undefined;

/**
 * @member {Array.<module:model/OptimizerInputsMPLeverageConstraint>} leverage
 */
OptimizerInputsMultiPeriodConstraints.prototype['leverage'] = undefined;

/**
 * @member {Array.<module:model/OptimizerInputsMPNumberofAssetsConstraint>} num_of_assets
 */
OptimizerInputsMultiPeriodConstraints.prototype['num_of_assets'] = undefined;

/**
 * @member {Array.<module:model/OptimizerInputsMPSensitivityConstraint>} sensitivity
 */
OptimizerInputsMultiPeriodConstraints.prototype['sensitivity'] = undefined;

/**
 * @member {Array.<module:model/OptimizerInputsMPHoldingsWeightConstraint>} weight_constraint
 */
OptimizerInputsMultiPeriodConstraints.prototype['weight_constraint'] = undefined;

/**
 * @member {Array.<module:model/OptimizerInputsMPNumberOfBuysConstraint>} number_of_buys
 */
OptimizerInputsMultiPeriodConstraints.prototype['number_of_buys'] = undefined;

/**
 * @member {Array.<module:model/OptimizerInputsMPNumberOfSellsConstraint>} number_of_sells
 */
OptimizerInputsMultiPeriodConstraints.prototype['number_of_sells'] = undefined;

/**
 * @member {Array.<module:model/OptimizerInputsMPRoundlotsConstraint>} round_lots
 */
OptimizerInputsMultiPeriodConstraints.prototype['round_lots'] = undefined;

/**
 * @member {Array.<module:model/OptimizerInputsMPTradeThresholdConstraint>} trade_threshold
 */
OptimizerInputsMultiPeriodConstraints.prototype['trade_threshold'] = undefined;

/**
 * @member {Array.<module:model/OptimizerInputsMPTurnoverConstraint>} trading_turnover
 */
OptimizerInputsMultiPeriodConstraints.prototype['trading_turnover'] = undefined;

/**
 * @member {Array.<module:model/OptimizerInputsMPRiskContributionConstraint>} risk_contribution
 */
OptimizerInputsMultiPeriodConstraints.prototype['risk_contribution'] = undefined;

/**
 * @member {Array.<module:model/OptimizerInputsMPRiskVolatilityConstraint>} risk_volatility
 */
OptimizerInputsMultiPeriodConstraints.prototype['risk_volatility'] = undefined;

/**
 * MultiPeriod-Specific
 * @member {Array.<module:model/OptimizerInputsMPLimitTailRiskConstraint>} tail_risk
 */
OptimizerInputsMultiPeriodConstraints.prototype['tail_risk'] = undefined;

/**
 * @member {Array.<module:model/OptimizerInputsMPTargetProbabilityConstraint>} target_probability
 */
OptimizerInputsMultiPeriodConstraints.prototype['target_probability'] = undefined;






export default OptimizerInputsMultiPeriodConstraints;

