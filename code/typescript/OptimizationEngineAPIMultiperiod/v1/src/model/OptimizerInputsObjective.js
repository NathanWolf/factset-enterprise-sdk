/**
 * fpo_mp_input
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import OptimizerInputsDiversificationRatioTerm from './OptimizerInputsDiversificationRatioTerm';
import OptimizerInputsDrawdownTerm from './OptimizerInputsDrawdownTerm';
import OptimizerInputsExpectedReturnTerm from './OptimizerInputsExpectedReturnTerm';
import OptimizerInputsExpectedTailLossTerm from './OptimizerInputsExpectedTailLossTerm';
import OptimizerInputsFactorExposureTerm from './OptimizerInputsFactorExposureTerm';
import OptimizerInputsGeneralLinearTerm from './OptimizerInputsGeneralLinearTerm';
import OptimizerInputsRiskParityTerm from './OptimizerInputsRiskParityTerm';
import OptimizerInputsSTARRTerm from './OptimizerInputsSTARRTerm';
import OptimizerInputsSensitivityTerm from './OptimizerInputsSensitivityTerm';
import OptimizerInputsSharpeRatioTerm from './OptimizerInputsSharpeRatioTerm';
import OptimizerInputsTransactionCostTerm from './OptimizerInputsTransactionCostTerm';
import OptimizerInputsVolatilityTerm from './OptimizerInputsVolatilityTerm';

/**
 * The OptimizerInputsObjective model module.
 * @module model/OptimizerInputsObjective
 */
class OptimizerInputsObjective {
    /**
     * Constructs a new <code>OptimizerInputsObjective</code>.
     * ToDo :Note to circle back to this when we have more info on factors
     * @alias module:model/OptimizerInputsObjective
     */
    constructor() { 
        
        OptimizerInputsObjective.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>OptimizerInputsObjective</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/OptimizerInputsObjective} obj Optional instance to populate.
     * @return {module:model/OptimizerInputsObjective} The populated <code>OptimizerInputsObjective</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new OptimizerInputsObjective();

            if (data.hasOwnProperty('factor_exposure')) {
                obj['factor_exposure'] = ApiClient.convertToType(data['factor_exposure'], [OptimizerInputsFactorExposureTerm]);
            }
            if (data.hasOwnProperty('expected_tail_loss')) {
                obj['expected_tail_loss'] = ApiClient.convertToType(data['expected_tail_loss'], [OptimizerInputsExpectedTailLossTerm]);
            }
            if (data.hasOwnProperty('volatility')) {
                obj['volatility'] = ApiClient.convertToType(data['volatility'], [OptimizerInputsVolatilityTerm]);
            }
            if (data.hasOwnProperty('drawdown')) {
                obj['drawdown'] = ApiClient.convertToType(data['drawdown'], [OptimizerInputsDrawdownTerm]);
            }
            if (data.hasOwnProperty('general_linear')) {
                obj['general_linear'] = ApiClient.convertToType(data['general_linear'], [OptimizerInputsGeneralLinearTerm]);
            }
            if (data.hasOwnProperty('expected_return')) {
                obj['expected_return'] = ApiClient.convertToType(data['expected_return'], [OptimizerInputsExpectedReturnTerm]);
            }
            if (data.hasOwnProperty('sensitivity')) {
                obj['sensitivity'] = ApiClient.convertToType(data['sensitivity'], [OptimizerInputsSensitivityTerm]);
            }
            if (data.hasOwnProperty('sharpe_ratio')) {
                obj['sharpe_ratio'] = OptimizerInputsSharpeRatioTerm.constructFromObject(data['sharpe_ratio']);
            }
            if (data.hasOwnProperty('starr')) {
                obj['starr'] = OptimizerInputsSTARRTerm.constructFromObject(data['starr']);
            }
            if (data.hasOwnProperty('diversification_ratio')) {
                obj['diversification_ratio'] = OptimizerInputsDiversificationRatioTerm.constructFromObject(data['diversification_ratio']);
            }
            if (data.hasOwnProperty('null_risk_parity')) {
                obj['null_risk_parity'] = ApiClient.convertToType(data['null_risk_parity'], 'Boolean');
            }
            if (data.hasOwnProperty('risk_parity')) {
                obj['risk_parity'] = OptimizerInputsRiskParityTerm.constructFromObject(data['risk_parity']);
            }
            if (data.hasOwnProperty('transaction_cost')) {
                obj['transaction_cost'] = ApiClient.convertToType(data['transaction_cost'], [OptimizerInputsTransactionCostTerm]);
            }
        }
        return obj;
    }


}

/**
 * @member {Array.<module:model/OptimizerInputsFactorExposureTerm>} factor_exposure
 */
OptimizerInputsObjective.prototype['factor_exposure'] = undefined;

/**
 * @member {Array.<module:model/OptimizerInputsExpectedTailLossTerm>} expected_tail_loss
 */
OptimizerInputsObjective.prototype['expected_tail_loss'] = undefined;

/**
 * @member {Array.<module:model/OptimizerInputsVolatilityTerm>} volatility
 */
OptimizerInputsObjective.prototype['volatility'] = undefined;

/**
 * @member {Array.<module:model/OptimizerInputsDrawdownTerm>} drawdown
 */
OptimizerInputsObjective.prototype['drawdown'] = undefined;

/**
 * @member {Array.<module:model/OptimizerInputsGeneralLinearTerm>} general_linear
 */
OptimizerInputsObjective.prototype['general_linear'] = undefined;

/**
 * @member {Array.<module:model/OptimizerInputsExpectedReturnTerm>} expected_return
 */
OptimizerInputsObjective.prototype['expected_return'] = undefined;

/**
 * @member {Array.<module:model/OptimizerInputsSensitivityTerm>} sensitivity
 */
OptimizerInputsObjective.prototype['sensitivity'] = undefined;

/**
 * @member {module:model/OptimizerInputsSharpeRatioTerm} sharpe_ratio
 */
OptimizerInputsObjective.prototype['sharpe_ratio'] = undefined;

/**
 * @member {module:model/OptimizerInputsSTARRTerm} starr
 */
OptimizerInputsObjective.prototype['starr'] = undefined;

/**
 * @member {module:model/OptimizerInputsDiversificationRatioTerm} diversification_ratio
 */
OptimizerInputsObjective.prototype['diversification_ratio'] = undefined;

/**
 * This is true when there is no risk_parity
 * @member {Boolean} null_risk_parity
 */
OptimizerInputsObjective.prototype['null_risk_parity'] = undefined;

/**
 * @member {module:model/OptimizerInputsRiskParityTerm} risk_parity
 */
OptimizerInputsObjective.prototype['risk_parity'] = undefined;

/**
 * @member {Array.<module:model/OptimizerInputsTransactionCostTerm>} transaction_cost
 */
OptimizerInputsObjective.prototype['transaction_cost'] = undefined;






export default OptimizerInputsObjective;

