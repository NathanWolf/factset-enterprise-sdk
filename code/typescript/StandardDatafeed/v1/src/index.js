/**
 * SDF_API
 * The Standard Datafeed (SDF) API provides an alternative method for users to request and retrieve SDF packages (schemas & bundles). This service is not a direct replacement and does not have 100% feature parity with the Loader. This API provides an alternative for users who are unable to utilize the Loader due to:  Unable to install 3rd party executables due to Corporate Security policies Unable to utilize the Loader due to limitations or restrictions with the environment used to consume Standard Datafeed Clients who are utilizing existing delivery method like FTP, who may want to use a more secured & modern solution This API allows users to retrieve SDF packages they have subscriptions for, going back to August 31, 2021. Additional parameters are available to filter requests to get the exact files users are looking for. 
 *
 * The version of the OpenAPI document: 1.0
 * Contact: teammustang@factset.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from './ApiClient';
import Data from './model/Data';
import ListFiles200Response from './model/ListFiles200Response';
import ListFiles400Response from './model/ListFiles400Response';
import ListSchema200Response from './model/ListSchema200Response';
import ListSchema400Response from './model/ListSchema400Response';
import Meta from './model/Meta';
import Pagination from './model/Pagination';
import Partial from './model/Partial';

import SchemaApi from './api/SchemaApi';
import SchemasBundlesApi from './api/SchemasBundlesApi';


/**
* Standard Datafeed client library for JavaScript.<br>
* The <code>index</code> module provides access to constructors for all the classes which comprise the public API.
* <p>
* An AMD (recommended!) or CommonJS application will generally do something equivalent to the following:
* <pre>
* var standarddatafeed = require('index'); // See note below*.
* var xxxSvc = new standarddatafeed.XxxApi(); // Allocate the API class we're going to use.
* var yyyModel = new standarddatafeed.Yyy(); // Construct a model instance.
* yyyModel.someProperty = 'someValue';
* ...
* var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.
* ...
* </pre>
* <em>*NOTE: For a top-level AMD script, use require(['index'], function(){...})
* and put the application logic within the callback function.</em>
* </p>
* <p>
* A non-AMD browser application (discouraged) might do something like this:
* <pre>
* var xxxSvc = new standarddatafeed.XxxApi(); // Allocate the API class we're going to use.
* var yyy = new standarddatafeed.Yyy(); // Construct a model instance.
* yyyModel.someProperty = 'someValue';
* ...
* var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.
* ...
* </pre>
* </p>
* @module index
* @version 0.20.0
*/
export {
    /**
     * The ApiClient constructor.
     * @property {module:ApiClient}
     */
    ApiClient,

    /**
     * The Data model constructor.
     * @property {module:model/Data}
     */
    Data,

    /**
     * The ListFiles200Response model constructor.
     * @property {module:model/ListFiles200Response}
     */
    ListFiles200Response,

    /**
     * The ListFiles400Response model constructor.
     * @property {module:model/ListFiles400Response}
     */
    ListFiles400Response,

    /**
     * The ListSchema200Response model constructor.
     * @property {module:model/ListSchema200Response}
     */
    ListSchema200Response,

    /**
     * The ListSchema400Response model constructor.
     * @property {module:model/ListSchema400Response}
     */
    ListSchema400Response,

    /**
     * The Meta model constructor.
     * @property {module:model/Meta}
     */
    Meta,

    /**
     * The Pagination model constructor.
     * @property {module:model/Pagination}
     */
    Pagination,

    /**
     * The Partial model constructor.
     * @property {module:model/Partial}
     */
    Partial,

    /**
    * The SchemaApi service constructor.
    * @property {module:api/SchemaApi}
    */
    SchemaApi,

    /**
    * The SchemasBundlesApi service constructor.
    * @property {module:api/SchemasBundlesApi}
    */
    SchemasBundlesApi,

};
