/**
 * SDF Download API
 * The Standard DataFeed (SDF) Download API provides an alternative method for users to request and retrieve SDF packages (schemas & bundles). This service is not a direct replacement and does not have 100% feature parity with the Loader Application. This API provides an alternative for users who are unable to utilize the Loader application due to following reasons:   - Inability to install 3rd party executables due to Corporate Security policies     - Inability to utilize the Loader application due to limitations or restrictions with the environment used to consume Standard Datafeed   - Clients who are utilizing existing delivery method like FTP, who may want to use a more secured & modern solution     This API allows users to retrieve maximum of latest 30 days of data     Additional parameters are available to filter requests to get the exact files users are looking for.    QFL data is delivered through Content API & Bulk Data API (SDF API)  - Content API : Provides direct access to FactSet-hosted QFL data.  Suitable for interactive, ad hoc QFL requests.  Constraints on large extracts.  Costs are based on consumption, i.e. more calls can result in more costs.  - Bulk Data API : Provides access to download locations of zip files for client download. Suitable for production processes within a client environment. Cost is based on the use case and fixed unless scope changes (same as other SDFs).
 *
 * The version of the OpenAPI document: 1.2.0
 * Contact: teammustang@factset.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from './ApiClient';
import Dataresponseitems from './model/Dataresponseitems';
import DataresponseitemsRelatedBundles from './model/DataresponseitemsRelatedBundles';
import ListFiles200Response from './model/ListFiles200Response';
import ListFiles200ResponseMeta from './model/ListFiles200ResponseMeta';
import ListFiles400Response from './model/ListFiles400Response';
import ListSchema400Response from './model/ListSchema400Response';
import ListSchemas from './model/ListSchemas';
import Meta from './model/Meta';
import Pagination from './model/Pagination';
import Partial from './model/Partial';
import SchemaDetails from './model/SchemaDetails';

import SDFAndQFLContentLibraryApi from './api/SDFAndQFLContentLibraryApi';
import SchemaApi from './api/SchemaApi';


/**
* Standard Datafeed client library for JavaScript.<br>
* The <code>index</code> module provides access to constructors for all the classes which comprise the public API.
* <p>
* An AMD (recommended!) or CommonJS application will generally do something equivalent to the following:
* <pre>
* var standarddatafeed = require('index'); // See note below*.
* var xxxSvc = new standarddatafeed.XxxApi(); // Allocate the API class we're going to use.
* var yyyModel = new standarddatafeed.Yyy(); // Construct a model instance.
* yyyModel.someProperty = 'someValue';
* ...
* var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.
* ...
* </pre>
* <em>*NOTE: For a top-level AMD script, use require(['index'], function(){...})
* and put the application logic within the callback function.</em>
* </p>
* <p>
* A non-AMD browser application (discouraged) might do something like this:
* <pre>
* var xxxSvc = new standarddatafeed.XxxApi(); // Allocate the API class we're going to use.
* var yyy = new standarddatafeed.Yyy(); // Construct a model instance.
* yyyModel.someProperty = 'someValue';
* ...
* var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.
* ...
* </pre>
* </p>
* @module index
*/
export {
    /**
     * The ApiClient constructor.
     * @property {module:ApiClient}
     */
    ApiClient,

    /**
     * The Dataresponseitems model constructor.
     * @property {module:model/Dataresponseitems}
     */
    Dataresponseitems,

    /**
     * The DataresponseitemsRelatedBundles model constructor.
     * @property {module:model/DataresponseitemsRelatedBundles}
     */
    DataresponseitemsRelatedBundles,

    /**
     * The ListFiles200Response model constructor.
     * @property {module:model/ListFiles200Response}
     */
    ListFiles200Response,

    /**
     * The ListFiles200ResponseMeta model constructor.
     * @property {module:model/ListFiles200ResponseMeta}
     */
    ListFiles200ResponseMeta,

    /**
     * The ListFiles400Response model constructor.
     * @property {module:model/ListFiles400Response}
     */
    ListFiles400Response,

    /**
     * The ListSchema400Response model constructor.
     * @property {module:model/ListSchema400Response}
     */
    ListSchema400Response,

    /**
     * The ListSchemas model constructor.
     * @property {module:model/ListSchemas}
     */
    ListSchemas,

    /**
     * The Meta model constructor.
     * @property {module:model/Meta}
     */
    Meta,

    /**
     * The Pagination model constructor.
     * @property {module:model/Pagination}
     */
    Pagination,

    /**
     * The Partial model constructor.
     * @property {module:model/Partial}
     */
    Partial,

    /**
     * The SchemaDetails model constructor.
     * @property {module:model/SchemaDetails}
     */
    SchemaDetails,

    /**
    * The SDFAndQFLContentLibraryApi service constructor.
    * @property {module:api/SDFAndQFLContentLibraryApi}
    */
    SDFAndQFLContentLibraryApi,

    /**
    * The SchemaApi service constructor.
    * @property {module:api/SchemaApi}
    */
    SchemaApi,

};
