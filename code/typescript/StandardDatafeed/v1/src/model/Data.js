/**
 * SDF_API
 * The Standard Datafeed (SDF) API provides an alternative method for users to request and retrieve SDF packages (schemas & bundles). This service is not a direct replacement and does not have 100% feature parity with the Loader. This API provides an alternative for users who are unable to utilize the Loader due to:  Unable to install 3rd party executables due to Corporate Security policies Unable to utilize the Loader due to limitations or restrictions with the environment used to consume Standard Datafeed Clients who are utilizing existing delivery method like FTP, who may want to use a more secured & modern solution This API allows users to retrieve SDF packages they have subscriptions for, going back to August 31, 2021. Additional parameters are available to filter requests to get the exact files users are looking for. 
 *
 * The version of the OpenAPI document: 1.0
 * Contact: teammustang@factset.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Data model module.
 * @module model/Data
 * @version 0.20.0
 */
class Data {
    /**
     * Constructs a new <code>Data</code>.
     * Array of data objects
     * @alias module:model/Data
     */
    constructor() { 
        
        Data.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Data</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Data} obj Optional instance to populate.
     * @return {module:model/Data} The populated <code>Data</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Data();

            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
            if (data.hasOwnProperty('bundle')) {
                obj['bundle'] = ApiClient.convertToType(data['bundle'], 'String');
            }
            if (data.hasOwnProperty('schema')) {
                obj['schema'] = ApiClient.convertToType(data['schema'], 'String');
            }
            if (data.hasOwnProperty('sequence')) {
                obj['sequence'] = ApiClient.convertToType(data['sequence'], 'Number');
            }
            if (data.hasOwnProperty('related_bundles')) {
                obj['related_bundles'] = ApiClient.convertToType(data['related_bundles'], 'String');
            }
            if (data.hasOwnProperty('timestamp')) {
                obj['timestamp'] = ApiClient.convertToType(data['timestamp'], 'String');
            }
            if (data.hasOwnProperty('url')) {
                obj['url'] = ApiClient.convertToType(data['url'], 'String');
            }
            if (data.hasOwnProperty('fileSize')) {
                obj['fileSize'] = ApiClient.convertToType(data['fileSize'], 'String');
            }
        }
        return obj;
    }


}

/**
 * file type, full or delta
 * @member {String} type
 */
Data.prototype['type'] = undefined;

/**
 * bundle name
 * @member {String} bundle
 */
Data.prototype['bundle'] = undefined;

/**
 * schema name
 * @member {String} schema
 */
Data.prototype['schema'] = undefined;

/**
 * full or delta file sequence
 * @member {Number} sequence
 */
Data.prototype['sequence'] = undefined;

/**
 * bundles related to the sequence number
 * @member {String} related_bundles
 */
Data.prototype['related_bundles'] = undefined;

/**
 * time stamp of when the bundle was generated
 * @member {String} timestamp
 */
Data.prototype['timestamp'] = undefined;

/**
 * pre-signed downloadable url
 * @member {String} url
 */
Data.prototype['url'] = undefined;

/**
 * file size of the particular bundle
 * @member {String} fileSize
 */
Data.prototype['fileSize'] = undefined;






export default Data;

