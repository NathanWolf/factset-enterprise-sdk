/**
 * Universal Screening API
 * Through the Universal Screening API, you can access the power of FactSet's Universal Screening Application. Calculate and return the results of your saved Universal Screens.
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from './ApiClient';
import ErrorArray from './model/ErrorArray';
import ErrorCode from './model/ErrorCode';
import ErrorObject from './model/ErrorObject';
import ForErrorsAndWarningsFoundInScreensContainsTheParamIDTheErrorWarningBelongsTo from './model/ForErrorsAndWarningsFoundInScreensContainsTheParamIDTheErrorWarningBelongsTo';
import InlineResponse200 from './model/InlineResponse200';
import InlineResponse200Data from './model/InlineResponse200Data';
import PaginationResponse from './model/PaginationResponse';
import ResourceStatusResponse from './model/ResourceStatusResponse';
import ResourceStatusResponseData from './model/ResourceStatusResponseData';
import ResultsMetadata from './model/ResultsMetadata';
import ScreenArchiveOFDBParameters from './model/ScreenArchiveOFDBParameters';
import ScreenArchiveOFDBParametersData from './model/ScreenArchiveOFDBParametersData';
import ScreenArchiveOFDBParametersDataArchiveOptions from './model/ScreenArchiveOFDBParametersDataArchiveOptions';
import ScreenCalcParameters from './model/ScreenCalcParameters';
import ScreenCalcParametersData from './model/ScreenCalcParametersData';

import DefaultApi from './api/DefaultApi';


/**
* Universal Screening client library for JavaScript.<br>
* The <code>index</code> module provides access to constructors for all the classes which comprise the public API.
* <p>
* An AMD (recommended!) or CommonJS application will generally do something equivalent to the following:
* <pre>
* var universalscreening = require('index'); // See note below*.
* var xxxSvc = new universalscreening.XxxApi(); // Allocate the API class we're going to use.
* var yyyModel = new universalscreening.Yyy(); // Construct a model instance.
* yyyModel.someProperty = 'someValue';
* ...
* var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.
* ...
* </pre>
* <em>*NOTE: For a top-level AMD script, use require(['index'], function(){...})
* and put the application logic within the callback function.</em>
* </p>
* <p>
* A non-AMD browser application (discouraged) might do something like this:
* <pre>
* var xxxSvc = new universalscreening.XxxApi(); // Allocate the API class we're going to use.
* var yyy = new universalscreening.Yyy(); // Construct a model instance.
* yyyModel.someProperty = 'someValue';
* ...
* var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.
* ...
* </pre>
* </p>
* @module index
* @version 0.20.0
*/
export {
    /**
     * The ApiClient constructor.
     * @property {module:ApiClient}
     */
    ApiClient,

    /**
     * The ErrorArray model constructor.
     * @property {module:model/ErrorArray}
     */
    ErrorArray,

    /**
     * The ErrorCode model constructor.
     * @property {module:model/ErrorCode}
     */
    ErrorCode,

    /**
     * The ErrorObject model constructor.
     * @property {module:model/ErrorObject}
     */
    ErrorObject,

    /**
     * The ForErrorsAndWarningsFoundInScreensContainsTheParamIDTheErrorWarningBelongsTo model constructor.
     * @property {module:model/ForErrorsAndWarningsFoundInScreensContainsTheParamIDTheErrorWarningBelongsTo}
     */
    ForErrorsAndWarningsFoundInScreensContainsTheParamIDTheErrorWarningBelongsTo,

    /**
     * The InlineResponse200 model constructor.
     * @property {module:model/InlineResponse200}
     */
    InlineResponse200,

    /**
     * The InlineResponse200Data model constructor.
     * @property {module:model/InlineResponse200Data}
     */
    InlineResponse200Data,

    /**
     * The PaginationResponse model constructor.
     * @property {module:model/PaginationResponse}
     */
    PaginationResponse,

    /**
     * The ResourceStatusResponse model constructor.
     * @property {module:model/ResourceStatusResponse}
     */
    ResourceStatusResponse,

    /**
     * The ResourceStatusResponseData model constructor.
     * @property {module:model/ResourceStatusResponseData}
     */
    ResourceStatusResponseData,

    /**
     * The ResultsMetadata model constructor.
     * @property {module:model/ResultsMetadata}
     */
    ResultsMetadata,

    /**
     * The ScreenArchiveOFDBParameters model constructor.
     * @property {module:model/ScreenArchiveOFDBParameters}
     */
    ScreenArchiveOFDBParameters,

    /**
     * The ScreenArchiveOFDBParametersData model constructor.
     * @property {module:model/ScreenArchiveOFDBParametersData}
     */
    ScreenArchiveOFDBParametersData,

    /**
     * The ScreenArchiveOFDBParametersDataArchiveOptions model constructor.
     * @property {module:model/ScreenArchiveOFDBParametersDataArchiveOptions}
     */
    ScreenArchiveOFDBParametersDataArchiveOptions,

    /**
     * The ScreenCalcParameters model constructor.
     * @property {module:model/ScreenCalcParameters}
     */
    ScreenCalcParameters,

    /**
     * The ScreenCalcParametersData model constructor.
     * @property {module:model/ScreenCalcParametersData}
     */
    ScreenCalcParametersData,

    /**
    * The DefaultApi service constructor.
    * @property {module:api/DefaultApi}
    */
    DefaultApi,

};
