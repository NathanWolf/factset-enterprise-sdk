/**
 * Universal Screening API
 * Through the Universal Screening API, you can access the power of FactSet's Universal Screening Application. Calculate and return the results of your saved Universal Screens.
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ErrorArray from '../model/ErrorArray';
import InlineResponse200 from '../model/InlineResponse200';
import ResourceStatusResponse from '../model/ResourceStatusResponse';
import ScreenArchiveOFDBParameters from '../model/ScreenArchiveOFDBParameters';
import ScreenCalcParameters from '../model/ScreenCalcParameters';

/**
*  service.
* @module api/DefaultApi
* @version 0.20.0
*/
export default class DefaultApi {

    /**
    * Constructs a new DefaultApi. 
    * @alias module:api/DefaultApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * Delete a specified job started by the requester's username-serial
     * @param {String} id Unique identifier for a screen calculation job
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    deleteActiveJobWithHttpInfo(id) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteActiveJob");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];


      let returnType = null;

      return this.apiClient.callApi(
        '/v1/calculations/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Delete a specified job started by the requester's username-serial
     * @param {String} id Unique identifier for a screen calculation job
     * @return { Promise } a Promise
     */
    deleteActiveJob(id) {
      return this.deleteActiveJobWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Delete all active jobs started by the requester's username-serial
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    deleteAllActiveJobsWithHttpInfo() {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];


      let returnType = null;

      return this.apiClient.callApi(
        '/v1/calculations', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Delete all active jobs started by the requester's username-serial
     * @return { Promise } a Promise
     */
    deleteAllActiveJobs() {
      return this.deleteAllActiveJobsWithHttpInfo()
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Retrieve list of all active job ids started by requester's username-serial
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse200} and HTTP response
     */
    getAllActiveJobsWithHttpInfo() {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];


      let returnType = InlineResponse200;

      return this.apiClient.callApi(
        '/v1/calculations', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Retrieve list of all active job ids started by requester's username-serial
     * @return { Promise.< module:model/InlineResponse200 > } a Promise, with data of type {@link module:model/InlineResponse200 }
     */
    getAllActiveJobs() {
      return this.getAllActiveJobsWithHttpInfo()
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Retrieve results of complete screen calculation. Screens with more than 10,000 rows will be returned in a paginated format. Results may be fetched in pages of 1,000 - 100,000 results with 10,000 being the default page size.
     * @param {String} id Unique identifier for a screen calculation job
     * @param {Object} opts Optional parameters
     * @param {Number} opts.paginationLimit Page size limit (minumum 1000, default 10,000, maximum 100,000)
     * @param {Number} opts.paginationCursor Paging index (Initial request may omit)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    getCalculateResultsWithHttpInfo(id, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getCalculateResults");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        '_paginationLimit': opts['paginationLimit'],
        '_paginationCursor': opts['paginationCursor']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];


      let returnType = null;

      return this.apiClient.callApi(
        '/v1/calculations/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Retrieve results of complete screen calculation. Screens with more than 10,000 rows will be returned in a paginated format. Results may be fetched in pages of 1,000 - 100,000 results with 10,000 being the default page size.
     * @param {String} id Unique identifier for a screen calculation job
     * @param {Object} opts Optional parameters
     * @param {Number} opts.paginationLimit Page size limit (minumum 1000, default 10,000, maximum 100,000)
     * @param {Number} opts.paginationCursor Paging index (Initial request may omit)
     * @return { Promise } a Promise
     */
    getCalculateResults(id, opts) {
      return this.getCalculateResultsWithHttpInfo(id, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Polls the archive OFDB job with a given archive job ID and returns job status
     * @param {String} id Unique identifier for a screen archive to OFDB job
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ResourceStatusResponse} and HTTP response
     */
    pollArchiveOFDBWithHttpInfo(id) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling pollArchiveOFDB");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];


      let returnType = ResourceStatusResponse;

      return this.apiClient.callApi(
        '/v1/archive/{id}/status', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Polls the archive OFDB job with a given archive job ID and returns job status
     * @param {String} id Unique identifier for a screen archive to OFDB job
     * @return { Promise.< module:model/ResourceStatusResponse > } a Promise, with data of type {@link module:model/ResourceStatusResponse }
     */
    pollArchiveOFDB(id) {
      return this.pollArchiveOFDBWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Polls the calculation job with a given screen calculation ID and returns job status
     * @param {String} id Unique identifier for a screen calculation job
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ResourceStatusResponse} and HTTP response
     */
    pollCalculateWithHttpInfo(id) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling pollCalculate");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];


      let returnType = ResourceStatusResponse;

      return this.apiClient.callApi(
        '/v1/calculations/{id}/status', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Polls the calculation job with a given screen calculation ID and returns job status
     * @param {String} id Unique identifier for a screen calculation job
     * @return { Promise.< module:model/ResourceStatusResponse > } a Promise, with data of type {@link module:model/ResourceStatusResponse }
     */
    pollCalculate(id) {
      return this.pollCalculateWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Begins archive of screen to OFDB
     * @param {Object} opts Optional parameters
     * @param {module:model/ScreenArchiveOFDBParameters} opts.screenArchiveOFDBParameters Data required for an archive to OFDB request
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ResourceStatusResponse} and HTTP response
     */
    submitArchiveOFDBWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = opts['screenArchiveOFDBParameters'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];


      let returnType = ResourceStatusResponse;

      return this.apiClient.callApi(
        '/v1/archive', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Begins archive of screen to OFDB
     * @param {Object} opts Optional parameters
     * @param {module:model/ScreenArchiveOFDBParameters} opts.screenArchiveOFDBParameters Data required for an archive to OFDB request
     * @return { Promise.< module:model/ResourceStatusResponse > } a Promise, with data of type {@link module:model/ResourceStatusResponse }
     */
    submitArchiveOFDB(opts) {
      return this.submitArchiveOFDBWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Begins calculation of screen
     * @param {Object} opts Optional parameters
     * @param {module:model/ScreenCalcParameters} opts.screenCalcParameters Data required for a calculation request
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ResourceStatusResponse} and HTTP response
     */
    submitCalculateWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = opts['screenCalcParameters'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];


      let returnType = ResourceStatusResponse;

      return this.apiClient.callApi(
        '/v1/calculations', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Begins calculation of screen
     * @param {Object} opts Optional parameters
     * @param {module:model/ScreenCalcParameters} opts.screenCalcParameters Data required for a calculation request
     * @return { Promise.< module:model/ResourceStatusResponse > } a Promise, with data of type {@link module:model/ResourceStatusResponse }
     */
    submitCalculate(opts) {
      return this.submitCalculateWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}





