/**
 * Natural Language Processing API
 * APIs that leverage Natural Language Processing to help extract meaningful data from unstructured text
 *
 * The version of the OpenAPI document: 1.3.0
 * Contact: api@factset.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import HTTPErrorRoot from '../model/HTTPErrorRoot';
import QnAAnswerParametersRoot from '../model/QnAAnswerParametersRoot';
import QnAAnswerRoot from '../model/QnAAnswerRoot';
import TaskRoot from '../model/TaskRoot';

/**
* QuestionAnswer service.
* @module api/QuestionAnswerApi
*/
export default class QuestionAnswerApi {

    /**
    * Constructs a new QuestionAnswerApi. 
    * @alias module:api/QuestionAnswerApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * Endpoint to get the answer(s)
     * Endpoint to obtain the results from the original Q&A task request. The `id` parameter represents the identifier from the task and comes from the POST request which created the task. Once the task is complete, the result can be fetched with this endpoint.
     * @param {String} id Identifier from the Question & Answer task and comes from the POST request which created the task
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/QnAAnswerRoot} and HTTP response
     */
    qnaGetAnswersWithHttpInfo(id) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling qnaGetAnswers");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];

      let returnType = QnaGetAnswersResponseWrapperTypeMap;
      
      return this.apiClient.callApi(
        '/qna/answers/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Endpoint to get the answer(s)
     * Endpoint to obtain the results from the original Q&A task request. The `id` parameter represents the identifier from the task and comes from the POST request which created the task. Once the task is complete, the result can be fetched with this endpoint.
     * @param {String} id Identifier from the Question & Answer task and comes from the POST request which created the task
     * @return { Promise.< QnaGetAnswersResponseWrapper > } a Promise, with data of type {@link QnaGetAnswersResponseWrapper }
     */
    qnaGetAnswers(id) {
      return this.qnaGetAnswersWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Endpoint to get the completion status for a Q&A request
     * Endpoint to obtain the status of the Q&A task request. The `id` parameter represents the identifier of the task created and comes from the POST request which created the task.
     * @param {String} id Identifier from the Question & Answer task and comes from the POST request which created the task
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/TaskRoot} and HTTP response
     */
    qnaGetStatusWithHttpInfo(id) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling qnaGetStatus");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];


      let returnType = TaskRoot;

      return this.apiClient.callApi(
        '/qna/answers/{id}/status', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Endpoint to get the completion status for a Q&A request
     * Endpoint to obtain the status of the Q&A task request. The `id` parameter represents the identifier of the task created and comes from the POST request which created the task.
     * @param {String} id Identifier from the Question & Answer task and comes from the POST request which created the task
     * @return { Promise.< module:model/TaskRoot > } a Promise, with data of type {@link module:model/TaskRoot }
     */
    qnaGetStatus(id) {
      return this.qnaGetStatusWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Endpoint to submit a question for answer(s)
     * Endpoint to create a task submission by providing plain text and question(s). The underlying model will answer the question. The created task needs to be polled to obtain the results. Please check the schema(s) for each of the status codes for more details about the task.
     * @param {module:model/QnAAnswerParametersRoot} qnAAnswerParametersRoot 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/TaskRoot} and HTTP response
     */
    qnaPostQuestionWithHttpInfo(qnAAnswerParametersRoot) {
      let postBody = qnAAnswerParametersRoot;
      // verify the required parameter 'qnAAnswerParametersRoot' is set
      if (qnAAnswerParametersRoot === undefined || qnAAnswerParametersRoot === null) {
        throw new Error("Missing the required parameter 'qnAAnswerParametersRoot' when calling qnaPostQuestion");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];


      let returnType = TaskRoot;

      return this.apiClient.callApi(
        '/qna/answers', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Endpoint to submit a question for answer(s)
     * Endpoint to create a task submission by providing plain text and question(s). The underlying model will answer the question. The created task needs to be polled to obtain the results. Please check the schema(s) for each of the status codes for more details about the task.
     * @param {module:model/QnAAnswerParametersRoot} qnAAnswerParametersRoot 
     * @return { Promise.< module:model/TaskRoot > } a Promise, with data of type {@link module:model/TaskRoot }
     */
    qnaPostQuestion(qnAAnswerParametersRoot) {
      return this.qnaPostQuestionWithHttpInfo(qnAAnswerParametersRoot)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}


const QnaGetAnswersResponseWrapperTypeMap = {
  200: QnAAnswerRoot,
  202: TaskRoot,
  401: HTTPErrorRoot,
  404: HTTPErrorRoot,
  500: HTTPErrorRoot,

  _createResponseWrapper(statusCode, response) {
    return new QnaGetAnswersResponseWrapper(statusCode, response);
  }
};



/**
 * Wrapper to support GET /qna/answers/{id} returning different types
 * per status code.
 *
 * <p>
 * Responses:
 * <ul>
 *   <li>200 : {@code QnAAnswerRoot }<br>OK</li>
 * 
 *   <li>202 : {@code TaskRoot }<br>Accepted</li>
 * </ul>
 *
 * </p>
 * Example:
 * <pre>{@code
 * const response = ...;
 * switch (response.statusCode) {
 *   case 200:
 *     QnAAnswerRoot data200 = response.getResponse200();
 *     break;
 *   case 202:
 *     TaskRoot data202 = response.getResponse202();
 *     break;
 *  }
 * }</pre>
 *
 * @alias module:QnaGetAnswersResponseWrapper
 * @class
 */
export class QnaGetAnswersResponseWrapper {

  /**
   * @param {number} statusCode
   * @param {*} response
   */
  constructor(statusCode, response) {
    /**
     * @type {number}
     */
    this.statusCode = statusCode;

    /**
     * @type {*}
     */
    this.response = response;
  }

  
  /**
   * @returns { QnAAnswerRoot }
   */
  getResponse200() {
    if (this.statusCode !== 200) {
      throw new Error("Invalid response getter called. getResponse200 can't return a " + this.statusCode + " response");
    }

    return this.response;
  }
  
  /**
   * @returns { TaskRoot }
   */
  getResponse202() {
    if (this.statusCode !== 202) {
      throw new Error("Invalid response getter called. getResponse202 can't return a " + this.statusCode + " response");
    }

    return this.response;
  }
  
}


