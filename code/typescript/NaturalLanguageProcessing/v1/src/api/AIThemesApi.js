/**
 * Natural Language Processing API
 * APIs that leverage Natural Language Processing to help extract meaningful data from unstructured text
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: ai@factset.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ErrorsRoot from '../model/ErrorsRoot';
import ThemeParametersRoot from '../model/ThemeParametersRoot';
import ThemesRoot from '../model/ThemesRoot';

/**
* AIThemes service.
* @module api/AIThemesApi
*/
export default class AIThemesApi {

    /**
    * Constructs a new AIThemesApi. 
    * @alias module:api/AIThemesApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * Endpoint to extract themes from text
     * This endpoint extracts themes from unstructured text. Each theme (`themeText`) is also given a score (`themeScore`). This score shows the relevancy of the theme within the text. Example Output: ```json {   \"data\": [   {     \"themeText\": \"home entertainment results\",     \"themeScore\": 0.92   },   {     \"themeText\": \".....\",     \"themeScore\": .....   }] } ``` 
     * @param {module:model/ThemeParametersRoot} themeParametersRoot 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ThemesRoot} and HTTP response
     */
    cognitiveNlpV1ThemesPostWithHttpInfo(themeParametersRoot) {
      let postBody = themeParametersRoot;
      // verify the required parameter 'themeParametersRoot' is set
      if (themeParametersRoot === undefined || themeParametersRoot === null) {
        throw new Error("Missing the required parameter 'themeParametersRoot' when calling cognitiveNlpV1ThemesPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];


      let returnType = ThemesRoot;

      return this.apiClient.callApi(
        '/cognitive/nlp/v1/themes', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Endpoint to extract themes from text
     * This endpoint extracts themes from unstructured text. Each theme (`themeText`) is also given a score (`themeScore`). This score shows the relevancy of the theme within the text. Example Output: ```json {   \"data\": [   {     \"themeText\": \"home entertainment results\",     \"themeScore\": 0.92   },   {     \"themeText\": \".....\",     \"themeScore\": .....   }] } ``` 
     * @param {module:model/ThemeParametersRoot} themeParametersRoot 
     * @return { Promise.< module:model/ThemesRoot > } a Promise, with data of type {@link module:model/ThemesRoot }
     */
    cognitiveNlpV1ThemesPost(themeParametersRoot) {
      return this.cognitiveNlpV1ThemesPostWithHttpInfo(themeParametersRoot)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}





