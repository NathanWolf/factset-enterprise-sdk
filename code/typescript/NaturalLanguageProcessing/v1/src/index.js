/**
 * Natural Language Processing API
 * APIs that leverage Natural Language Processing to help extract meaningful data from unstructured text
 *
 * The version of the OpenAPI document: 1.3.0
 * Contact: api@factset.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from './ApiClient';
import Error from './model/Error';
import ErrorsRoot from './model/ErrorsRoot';
import HTTPError from './model/HTTPError';
import NEREntity from './model/NEREntity';
import NEREntityList from './model/NEREntityList';
import NERErrorSchema from './model/NERErrorSchema';
import NERInputDataSchema from './model/NERInputDataSchema';
import NERInputSchema from './model/NERInputSchema';
import NEROrganization from './model/NEROrganization';
import NERResponseSchema from './model/NERResponseSchema';
import NERValidationError from './model/NERValidationError';
import QnAAnswer from './model/QnAAnswer';
import QnAAnswerParameters from './model/QnAAnswerParameters';
import QnAAnswerParametersRoot from './model/QnAAnswerParametersRoot';
import QnAAnswerRoot from './model/QnAAnswerRoot';
import QnAErrorSource from './model/QnAErrorSource';
import QnAHTTPError from './model/QnAHTTPError';
import QnAHTTPErrorRoot from './model/QnAHTTPErrorRoot';
import QnATask from './model/QnATask';
import QnATaskRoot from './model/QnATaskRoot';
import SummarizationRequest from './model/SummarizationRequest';
import SummarizationResult from './model/SummarizationResult';
import SummarizationResultID from './model/SummarizationResultID';
import Theme from './model/Theme';
import ThemeParameters from './model/ThemeParameters';
import ThemeParametersRoot from './model/ThemeParametersRoot';
import ThemesRoot from './model/ThemesRoot';
import ValidationError from './model/ValidationError';
import ValidationErrorDetail from './model/ValidationErrorDetail';
import ValidationErrorDetailLocation from './model/ValidationErrorDetailLocation';

import AITextSummarizationApi from './api/AITextSummarizationApi';
import AIThemesApi from './api/AIThemesApi';
import NamedEntityRecognitionApi from './api/NamedEntityRecognitionApi';
import QuestionAnswerApi from './api/QuestionAnswerApi';
import QnaGetAnswersResponseWrapper from './api/QuestionAnswerApi';


/**
* Natural Language Processing client library for JavaScript.<br>
* The <code>index</code> module provides access to constructors for all the classes which comprise the public API.
* <p>
* An AMD (recommended!) or CommonJS application will generally do something equivalent to the following:
* <pre>
* var naturallanguageprocessing = require('index'); // See note below*.
* var xxxSvc = new naturallanguageprocessing.XxxApi(); // Allocate the API class we're going to use.
* var yyyModel = new naturallanguageprocessing.Yyy(); // Construct a model instance.
* yyyModel.someProperty = 'someValue';
* ...
* var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.
* ...
* </pre>
* <em>*NOTE: For a top-level AMD script, use require(['index'], function(){...})
* and put the application logic within the callback function.</em>
* </p>
* <p>
* A non-AMD browser application (discouraged) might do something like this:
* <pre>
* var xxxSvc = new naturallanguageprocessing.XxxApi(); // Allocate the API class we're going to use.
* var yyy = new naturallanguageprocessing.Yyy(); // Construct a model instance.
* yyyModel.someProperty = 'someValue';
* ...
* var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.
* ...
* </pre>
* </p>
* @module index
*/
export {
    /**
     * The ApiClient constructor.
     * @property {module:ApiClient}
     */
    ApiClient,

    /**
     * The Error model constructor.
     * @property {module:model/Error}
     */
    Error,

    /**
     * The ErrorsRoot model constructor.
     * @property {module:model/ErrorsRoot}
     */
    ErrorsRoot,

    /**
     * The HTTPError model constructor.
     * @property {module:model/HTTPError}
     */
    HTTPError,

    /**
     * The NEREntity model constructor.
     * @property {module:model/NEREntity}
     */
    NEREntity,

    /**
     * The NEREntityList model constructor.
     * @property {module:model/NEREntityList}
     */
    NEREntityList,

    /**
     * The NERErrorSchema model constructor.
     * @property {module:model/NERErrorSchema}
     */
    NERErrorSchema,

    /**
     * The NERInputDataSchema model constructor.
     * @property {module:model/NERInputDataSchema}
     */
    NERInputDataSchema,

    /**
     * The NERInputSchema model constructor.
     * @property {module:model/NERInputSchema}
     */
    NERInputSchema,

    /**
     * The NEROrganization model constructor.
     * @property {module:model/NEROrganization}
     */
    NEROrganization,

    /**
     * The NERResponseSchema model constructor.
     * @property {module:model/NERResponseSchema}
     */
    NERResponseSchema,

    /**
     * The NERValidationError model constructor.
     * @property {module:model/NERValidationError}
     */
    NERValidationError,

    /**
     * The QnAAnswer model constructor.
     * @property {module:model/QnAAnswer}
     */
    QnAAnswer,

    /**
     * The QnAAnswerParameters model constructor.
     * @property {module:model/QnAAnswerParameters}
     */
    QnAAnswerParameters,

    /**
     * The QnAAnswerParametersRoot model constructor.
     * @property {module:model/QnAAnswerParametersRoot}
     */
    QnAAnswerParametersRoot,

    /**
     * The QnAAnswerRoot model constructor.
     * @property {module:model/QnAAnswerRoot}
     */
    QnAAnswerRoot,

    /**
     * The QnAErrorSource model constructor.
     * @property {module:model/QnAErrorSource}
     */
    QnAErrorSource,

    /**
     * The QnAHTTPError model constructor.
     * @property {module:model/QnAHTTPError}
     */
    QnAHTTPError,

    /**
     * The QnAHTTPErrorRoot model constructor.
     * @property {module:model/QnAHTTPErrorRoot}
     */
    QnAHTTPErrorRoot,

    /**
     * The QnATask model constructor.
     * @property {module:model/QnATask}
     */
    QnATask,

    /**
     * The QnATaskRoot model constructor.
     * @property {module:model/QnATaskRoot}
     */
    QnATaskRoot,

    /**
     * The SummarizationRequest model constructor.
     * @property {module:model/SummarizationRequest}
     */
    SummarizationRequest,

    /**
     * The SummarizationResult model constructor.
     * @property {module:model/SummarizationResult}
     */
    SummarizationResult,

    /**
     * The SummarizationResultID model constructor.
     * @property {module:model/SummarizationResultID}
     */
    SummarizationResultID,

    /**
     * The Theme model constructor.
     * @property {module:model/Theme}
     */
    Theme,

    /**
     * The ThemeParameters model constructor.
     * @property {module:model/ThemeParameters}
     */
    ThemeParameters,

    /**
     * The ThemeParametersRoot model constructor.
     * @property {module:model/ThemeParametersRoot}
     */
    ThemeParametersRoot,

    /**
     * The ThemesRoot model constructor.
     * @property {module:model/ThemesRoot}
     */
    ThemesRoot,

    /**
     * The ValidationError model constructor.
     * @property {module:model/ValidationError}
     */
    ValidationError,

    /**
     * The ValidationErrorDetail model constructor.
     * @property {module:model/ValidationErrorDetail}
     */
    ValidationErrorDetail,

    /**
     * The ValidationErrorDetailLocation model constructor.
     * @property {module:model/ValidationErrorDetailLocation}
     */
    ValidationErrorDetailLocation,

    /**
    * The AITextSummarizationApi service constructor.
    * @property {module:api/AITextSummarizationApi}
    */
    AITextSummarizationApi,

    /**
    * The AIThemesApi service constructor.
    * @property {module:api/AIThemesApi}
    */
    AIThemesApi,

    /**
    * The NamedEntityRecognitionApi service constructor.
    * @property {module:api/NamedEntityRecognitionApi}
    */
    NamedEntityRecognitionApi,

    /**
    * The QuestionAnswerApi service constructor.
    * @property {module:api/QuestionAnswerApi}
    */
    QuestionAnswerApi,

    /**
    * The QnaGetAnswers response wrapper.
    * @property {module:GetCalculationStatusByIdResponseWrapper}
    */
    QnaGetAnswersResponseWrapper,

};
