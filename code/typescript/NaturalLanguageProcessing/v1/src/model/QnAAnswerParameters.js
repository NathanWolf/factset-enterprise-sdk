/**
 * Natural Language Processing API
 * APIs that leverage Natural Language Processing to help extract meaningful data from unstructured text
 *
 * The version of the OpenAPI document: 1.3.0
 * Contact: api@factset.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The QnAAnswerParameters model module.
 * @module model/QnAAnswerParameters
 */
class QnAAnswerParameters {
    /**
     * Constructs a new <code>QnAAnswerParameters</code>.
     * Schema that defines the parameters needed to be supplied for generating answer(s).
     * @alias module:model/QnAAnswerParameters
     * @param input {String} The text input that provides the context
     * @param question {String} Question associated to the provided context
     */
    constructor(input, question) { 
        
        QnAAnswerParameters.initialize(this, input, question);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, input, question) { 
        obj['input'] = input;
        obj['question'] = question;
    }

    /**
     * Constructs a <code>QnAAnswerParameters</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/QnAAnswerParameters} obj Optional instance to populate.
     * @return {module:model/QnAAnswerParameters} The populated <code>QnAAnswerParameters</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new QnAAnswerParameters();

            if (data.hasOwnProperty('input')) {
                obj['input'] = ApiClient.convertToType(data['input'], 'String');
            }
            if (data.hasOwnProperty('numberOfAnswers')) {
                obj['numberOfAnswers'] = ApiClient.convertToType(data['numberOfAnswers'], 'Number');
            }
            if (data.hasOwnProperty('question')) {
                obj['question'] = ApiClient.convertToType(data['question'], 'String');
            }
        }
        return obj;
    }


}

/**
 * The text input that provides the context
 * @member {String} input
 */
QnAAnswerParameters.prototype['input'] = undefined;

/**
 * Number of answers for the question
 * @member {Number} numberOfAnswers
 * @default 2
 */
QnAAnswerParameters.prototype['numberOfAnswers'] = 2;

/**
 * Question associated to the provided context
 * @member {String} question
 */
QnAAnswerParameters.prototype['question'] = undefined;






export default QnAAnswerParameters;

