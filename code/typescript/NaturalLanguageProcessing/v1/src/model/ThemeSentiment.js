/**
 * Natural Language Processing API
 * APIs that leverage Natural Language Processing to help extract meaningful data from unstructured text
 *
 * The version of the OpenAPI document: 1.3.0
 * Contact: api@factset.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The ThemeSentiment model module.
 * @module model/ThemeSentiment
 */
class ThemeSentiment {
    /**
     * Constructs a new <code>ThemeSentiment</code>.
     * Schema that defines the extracted theme and the corresponding sentiments
     * @alias module:model/ThemeSentiment
     * @param themeScore {Number} The confidence score associated to the theme
     * @param themeText {String} The extracted theme as text
     */
    constructor(themeScore, themeText) { 
        
        ThemeSentiment.initialize(this, themeScore, themeText);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, themeScore, themeText) { 
        obj['themeScore'] = themeScore;
        obj['themeText'] = themeText;
    }

    /**
     * Constructs a <code>ThemeSentiment</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ThemeSentiment} obj Optional instance to populate.
     * @return {module:model/ThemeSentiment} The populated <code>ThemeSentiment</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ThemeSentiment();

            if (data.hasOwnProperty('sentiment')) {
                obj['sentiment'] = ApiClient.convertToType(data['sentiment'], 'String');
            }
            if (data.hasOwnProperty('sentimentScore')) {
                obj['sentimentScore'] = ApiClient.convertToType(data['sentimentScore'], 'Number');
            }
            if (data.hasOwnProperty('themeScore')) {
                obj['themeScore'] = ApiClient.convertToType(data['themeScore'], 'Number');
            }
            if (data.hasOwnProperty('themeText')) {
                obj['themeText'] = ApiClient.convertToType(data['themeText'], 'String');
            }
        }
        return obj;
    }


}

/**
 * The sentiment of the theme.
 * @member {module:model/ThemeSentiment.SentimentEnum} sentiment
 */
ThemeSentiment.prototype['sentiment'] = undefined;

/**
 * Confidence score of the sentiment
 * @member {Number} sentimentScore
 */
ThemeSentiment.prototype['sentimentScore'] = undefined;

/**
 * The confidence score associated to the theme
 * @member {Number} themeScore
 */
ThemeSentiment.prototype['themeScore'] = undefined;

/**
 * The extracted theme as text
 * @member {String} themeText
 */
ThemeSentiment.prototype['themeText'] = undefined;





/**
 * Allowed values for the <code>sentiment</code> property.
 * @enum {String}
 * @readonly
 */
ThemeSentiment['SentimentEnum'] = {

    /**
     * value: "positive"
     * @const
     */
    "positive": "positive",

    /**
     * value: "negative"
     * @const
     */
    "negative": "negative",

    /**
     * value: "neutral"
     * @const
     */
    "neutral": "neutral"
};



export default ThemeSentiment;

