/**
 * Natural Language Processing API
 * APIs that leverage Natural Language Processing to help extract meaningful data from unstructured text
 *
 * The version of the OpenAPI document: 1.3.0
 * Contact: api@factset.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The QnAErrorSource model module.
 * @module model/QnAErrorSource
 */
class QnAErrorSource {
    /**
     * Constructs a new <code>QnAErrorSource</code>.
     * Schema that defines the source of the error.
     * @alias module:model/QnAErrorSource
     * @param parameter {String} A string indicating which path or URI query parameter caused the error.
     * @param pointer {String} More details pointing to the error.
     */
    constructor(parameter, pointer) { 
        
        QnAErrorSource.initialize(this, parameter, pointer);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, parameter, pointer) { 
        obj['parameter'] = parameter;
        obj['pointer'] = pointer;
    }

    /**
     * Constructs a <code>QnAErrorSource</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/QnAErrorSource} obj Optional instance to populate.
     * @return {module:model/QnAErrorSource} The populated <code>QnAErrorSource</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new QnAErrorSource();

            if (data.hasOwnProperty('parameter')) {
                obj['parameter'] = ApiClient.convertToType(data['parameter'], 'String');
            }
            if (data.hasOwnProperty('pointer')) {
                obj['pointer'] = ApiClient.convertToType(data['pointer'], 'String');
            }
        }
        return obj;
    }


}

/**
 * A string indicating which path or URI query parameter caused the error.
 * @member {String} parameter
 */
QnAErrorSource.prototype['parameter'] = undefined;

/**
 * More details pointing to the error.
 * @member {String} pointer
 */
QnAErrorSource.prototype['pointer'] = undefined;






export default QnAErrorSource;

