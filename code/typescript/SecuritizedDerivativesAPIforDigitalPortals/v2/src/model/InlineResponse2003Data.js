/**
 * Prime Developer Trial
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import InlineResponse2003DataAgio from './InlineResponse2003DataAgio';
import InlineResponse2003DataBonusYield from './InlineResponse2003DataBonusYield';
import InlineResponse2003DataBreakEven from './InlineResponse2003DataBreakEven';
import InlineResponse2003DataCurrency from './InlineResponse2003DataCurrency';
import InlineResponse2003DataDelta from './InlineResponse2003DataDelta';
import InlineResponse2003DataDiscount from './InlineResponse2003DataDiscount';
import InlineResponse2003DataMaximumYield from './InlineResponse2003DataMaximumYield';
import InlineResponse2003DataPerformanceIssue from './InlineResponse2003DataPerformanceIssue';
import InlineResponse2003DataPrices from './InlineResponse2003DataPrices';
import InlineResponse2003DataSidewaysYield from './InlineResponse2003DataSidewaysYield';
import InlineResponse2003DataSpread from './InlineResponse2003DataSpread';
import InlineResponse2003DataThetaOneWeek from './InlineResponse2003DataThetaOneWeek';
import InlineResponse2003DataUnderlyings from './InlineResponse2003DataUnderlyings';
import InlineResponse2003DataVega from './InlineResponse2003DataVega';

/**
 * The InlineResponse2003Data model module.
 * @module model/InlineResponse2003Data
 * @version 0.9.0
 */
class InlineResponse2003Data {
    /**
     * Constructs a new <code>InlineResponse2003Data</code>.
     * Notation-based key figures of the securitized derivative.
     * @alias module:model/InlineResponse2003Data
     */
    constructor() { 
        
        InlineResponse2003Data.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>InlineResponse2003Data</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/InlineResponse2003Data} obj Optional instance to populate.
     * @return {module:model/InlineResponse2003Data} The populated <code>InlineResponse2003Data</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new InlineResponse2003Data();

            if (data.hasOwnProperty('prices')) {
                obj['prices'] = InlineResponse2003DataPrices.constructFromObject(data['prices']);
            }
            if (data.hasOwnProperty('underlyings')) {
                obj['underlyings'] = ApiClient.convertToType(data['underlyings'], [InlineResponse2003DataUnderlyings]);
            }
            if (data.hasOwnProperty('currency')) {
                obj['currency'] = InlineResponse2003DataCurrency.constructFromObject(data['currency']);
            }
            if (data.hasOwnProperty('performanceIssue')) {
                obj['performanceIssue'] = InlineResponse2003DataPerformanceIssue.constructFromObject(data['performanceIssue']);
            }
            if (data.hasOwnProperty('bonusYield')) {
                obj['bonusYield'] = InlineResponse2003DataBonusYield.constructFromObject(data['bonusYield']);
            }
            if (data.hasOwnProperty('sidewaysYield')) {
                obj['sidewaysYield'] = InlineResponse2003DataSidewaysYield.constructFromObject(data['sidewaysYield']);
            }
            if (data.hasOwnProperty('maximumYield')) {
                obj['maximumYield'] = InlineResponse2003DataMaximumYield.constructFromObject(data['maximumYield']);
            }
            if (data.hasOwnProperty('agio')) {
                obj['agio'] = InlineResponse2003DataAgio.constructFromObject(data['agio']);
            }
            if (data.hasOwnProperty('discount')) {
                obj['discount'] = InlineResponse2003DataDiscount.constructFromObject(data['discount']);
            }
            if (data.hasOwnProperty('breakEven')) {
                obj['breakEven'] = InlineResponse2003DataBreakEven.constructFromObject(data['breakEven']);
            }
            if (data.hasOwnProperty('spread')) {
                obj['spread'] = InlineResponse2003DataSpread.constructFromObject(data['spread']);
            }
            if (data.hasOwnProperty('delta')) {
                obj['delta'] = InlineResponse2003DataDelta.constructFromObject(data['delta']);
            }
            if (data.hasOwnProperty('thetaOneWeek')) {
                obj['thetaOneWeek'] = InlineResponse2003DataThetaOneWeek.constructFromObject(data['thetaOneWeek']);
            }
            if (data.hasOwnProperty('vega')) {
                obj['vega'] = InlineResponse2003DataVega.constructFromObject(data['vega']);
            }
            if (data.hasOwnProperty('leverage')) {
                obj['leverage'] = ApiClient.convertToType(data['leverage'], 'Number');
            }
            if (data.hasOwnProperty('omega')) {
                obj['omega'] = ApiClient.convertToType(data['omega'], 'Number');
            }
            if (data.hasOwnProperty('impliedVolatility')) {
                obj['impliedVolatility'] = ApiClient.convertToType(data['impliedVolatility'], 'Number');
            }
            if (data.hasOwnProperty('intrinsicValue')) {
                obj['intrinsicValue'] = ApiClient.convertToType(data['intrinsicValue'], 'Number');
            }
            if (data.hasOwnProperty('timeValue')) {
                obj['timeValue'] = ApiClient.convertToType(data['timeValue'], 'Number');
            }
            if (data.hasOwnProperty('outperformancePoint')) {
                obj['outperformancePoint'] = ApiClient.convertToType(data['outperformancePoint'], 'Number');
            }
            if (data.hasOwnProperty('parity')) {
                obj['parity'] = ApiClient.convertToType(data['parity'], 'Number');
            }
        }
        return obj;
    }


}

/**
 * @member {module:model/InlineResponse2003DataPrices} prices
 */
InlineResponse2003Data.prototype['prices'] = undefined;

/**
 * Details of the underlyings.
 * @member {Array.<module:model/InlineResponse2003DataUnderlyings>} underlyings
 */
InlineResponse2003Data.prototype['underlyings'] = undefined;

/**
 * @member {module:model/InlineResponse2003DataCurrency} currency
 */
InlineResponse2003Data.prototype['currency'] = undefined;

/**
 * @member {module:model/InlineResponse2003DataPerformanceIssue} performanceIssue
 */
InlineResponse2003Data.prototype['performanceIssue'] = undefined;

/**
 * @member {module:model/InlineResponse2003DataBonusYield} bonusYield
 */
InlineResponse2003Data.prototype['bonusYield'] = undefined;

/**
 * @member {module:model/InlineResponse2003DataSidewaysYield} sidewaysYield
 */
InlineResponse2003Data.prototype['sidewaysYield'] = undefined;

/**
 * @member {module:model/InlineResponse2003DataMaximumYield} maximumYield
 */
InlineResponse2003Data.prototype['maximumYield'] = undefined;

/**
 * @member {module:model/InlineResponse2003DataAgio} agio
 */
InlineResponse2003Data.prototype['agio'] = undefined;

/**
 * @member {module:model/InlineResponse2003DataDiscount} discount
 */
InlineResponse2003Data.prototype['discount'] = undefined;

/**
 * @member {module:model/InlineResponse2003DataBreakEven} breakEven
 */
InlineResponse2003Data.prototype['breakEven'] = undefined;

/**
 * @member {module:model/InlineResponse2003DataSpread} spread
 */
InlineResponse2003Data.prototype['spread'] = undefined;

/**
 * @member {module:model/InlineResponse2003DataDelta} delta
 */
InlineResponse2003Data.prototype['delta'] = undefined;

/**
 * @member {module:model/InlineResponse2003DataThetaOneWeek} thetaOneWeek
 */
InlineResponse2003Data.prototype['thetaOneWeek'] = undefined;

/**
 * @member {module:model/InlineResponse2003DataVega} vega
 */
InlineResponse2003Data.prototype['vega'] = undefined;

/**
 * Ask-based leverage. It represents the ratio of the underlying level to the ask price of the securitized derivative, adjusted for the cover ratio and the currency cross rate. This key figure is calculated only for leveraged derivatives (e.g. warrants, knock-out certificates).
 * @member {Number} leverage
 */
InlineResponse2003Data.prototype['leverage'] = undefined;

/**
 * Ask-based omega. It represents unadjusted delta (see attribute `delta.unadjusted`) multiplied with the leverage (see attribute `leverage`), both calculated based on the ask price of the derivative. Omega indicates the elasticity of the securitized derivative's price regarding the underlying level. This key figure is calculated for plain vanilla warrants only.
 * @member {Number} omega
 */
InlineResponse2003Data.prototype['omega'] = undefined;

/**
 * Ask-based implied volatility. It represents the volatility of the underlying that justifies the ask price of the derivative, when used as a parameter in the derivative's pricing model (such as Black-Scholes). Its value is a result of the pricing process, thus it represents the annual volatility of the underlying expected by the market participants until maturity of the derivative. This key figure is calculated for plain vanilla warrants only.
 * @member {Number} impliedVolatility
 */
InlineResponse2003Data.prototype['impliedVolatility'] = undefined;

/**
 * Intrinsic value. It represents the difference between the underlying level and the strike of the securitized derivative, adjusted for the cover ratio and the currency cross rate. If the difference is negative, the intrinsic value is given as 0. The intrinsic value represents the theoretical profit from an immediate exercise of the derivative. This key figure is calculated for plain vanilla warrants only.
 * @member {Number} intrinsicValue
 */
InlineResponse2003Data.prototype['intrinsicValue'] = undefined;

/**
 * Ask-based time value. It represents the difference between the ask price of the securitized derivative and its intrinsic value (see attribute `intrinsicValue`). This key figure is calculated for plain vanilla warrants only.
 * @member {Number} timeValue
 */
InlineResponse2003Data.prototype['timeValue'] = undefined;

/**
 * Ask-based outperformance point. It represents the underlying level from which the underlying starts to outperform the securitized derivative, thus the investor would be better off investing directly in the underlying. It is calculated only for securitized derivatives with a limited payout (e.g. capped products). This key figure is not calculated for securitized derivatives with multiple underlyings. For the value unit, see attribute `underlyings.valueUnit`.
 * @member {Number} outperformancePoint
 */
InlineResponse2003Data.prototype['outperformancePoint'] = undefined;

/**
 * Parity. It represents the difference between the underlying level and the strike of the derivative, adjusted for the cover ratio and the currency cross rate. Negative values are possible. It is the gain or loss that would result from the immediate exercise of an already present warrant and a simultaneously executed compensation transaction on the spot markets. This key figure is calculated for plain vanilla warrants only.
 * @member {Number} parity
 */
InlineResponse2003Data.prototype['parity'] = undefined;






export default InlineResponse2003Data;

