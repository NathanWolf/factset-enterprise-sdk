/**
 * Securitized Derivatives API For Digital Portals
 * Search for securitized derivative instruments, using a criteria-based screener. The API provides also fundamental data, notation-based key figures, list of barrier types, and details regarding the underlyings, their respective barriers and related cash flows, coupon lists and derived basic interest rate information.  The screener is based on securitized derivatives-specific parameters. The result is limited to the notations that satisfy all the selected filters. If more than one notation of an instrument matches the parameters, and no market priority has been specified, only the notation with the highest trading volume, averaged over one month, is considered. All identifier types used as parameters must be valid and application must have permissions for them.  Available search criteria include:  * validation: filter for only active listings, by price quality and latest/previous available price dates * traded markets: filter and indicate a market priority for the validation * life cycle: important dates in and features of the life cycle of the securitized derivatives instruments * filter by issuer, country of registration of the securitized derivatives * underlying and related barriers, including level and distance, and resulting cash flows * coupon data: where applicable, occurrence and frequency of coupon payments, current interest rate range * performance and volatility * product-specific ask-based key figures (not all key figures are available for all product types):     * bonus yield, sideways yield, maximum yield based on the ask price     * agio, discount     * spread     * break even, outperformance point, parity     * delta, weekly theta, vega, implied volatility     * leverage, omega     * intrinsic value, time value         Since some underlyings, e.g. an index or a performance difference of a stock and an index (alpha structure), do not represent a directly tradable asset, they do not have a price in the classical sense. Therefore, the term *level* is used instead of *price*, e.g. underlying level instead of underlying price. The endpoint does not support the search for securitized derivatives with multiple underlyings, thus only securitized derivatives with a single underlying are returned in the result.  The search can be restricted to a specific set of products by using customer-specific instrument or notation lists. Such restriction lists are set up by FactSet upon request.  This API is fully integrated with the corresponding Quotes API, allowing access to detailed price and performance information of instruments, as well as basic security identifier cross-reference. For direct access to price histories, please refer to the Time Series API for Digital Portals.  Similar criteria based screener APIs exist for equity and fixed income instruments: See the Stocks API and the Bonds API for details.
 *
 * The version of the OpenAPI document: 2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import InlineResponse2004Fsym from './InlineResponse2004Fsym';
import InlineResponse2004ValueUnit from './InlineResponse2004ValueUnit';
import InlineResponse2006Instrument from './InlineResponse2006Instrument';
import InlineResponse2006KeyFigures from './InlineResponse2006KeyFigures';
import InlineResponse2006Market from './InlineResponse2006Market';
import InlineResponse2006Performance from './InlineResponse2006Performance';
import InlineResponse2006Volatility from './InlineResponse2006Volatility';

/**
 * The InlineResponse2006Data model module.
 * @module model/InlineResponse2006Data
 */
class InlineResponse2006Data {
    /**
     * Constructs a new <code>InlineResponse2006Data</code>.
     * @alias module:model/InlineResponse2006Data
     */
    constructor() { 
        
        InlineResponse2006Data.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>InlineResponse2006Data</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/InlineResponse2006Data} obj Optional instance to populate.
     * @return {module:model/InlineResponse2006Data} The populated <code>InlineResponse2006Data</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new InlineResponse2006Data();

            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('symbol')) {
                obj['symbol'] = ApiClient.convertToType(data['symbol'], 'String');
            }
            if (data.hasOwnProperty('fsym')) {
                obj['fsym'] = InlineResponse2004Fsym.constructFromObject(data['fsym']);
            }
            if (data.hasOwnProperty('valueUnit')) {
                obj['valueUnit'] = InlineResponse2004ValueUnit.constructFromObject(data['valueUnit']);
            }
            if (data.hasOwnProperty('market')) {
                obj['market'] = InlineResponse2006Market.constructFromObject(data['market']);
            }
            if (data.hasOwnProperty('instrument')) {
                obj['instrument'] = InlineResponse2006Instrument.constructFromObject(data['instrument']);
            }
            if (data.hasOwnProperty('keyFigures')) {
                obj['keyFigures'] = InlineResponse2006KeyFigures.constructFromObject(data['keyFigures']);
            }
            if (data.hasOwnProperty('performance')) {
                obj['performance'] = InlineResponse2006Performance.constructFromObject(data['performance']);
            }
            if (data.hasOwnProperty('volatility')) {
                obj['volatility'] = InlineResponse2006Volatility.constructFromObject(data['volatility']);
            }
        }
        return obj;
    }


}

/**
 * Identifier of the notation.
 * @member {String} id
 */
InlineResponse2006Data.prototype['id'] = undefined;

/**
 * The symbol of the notation. It is a market-specific code to identify the notation. Which characters can be part of a symbol depends on the market. If a market does not define a proprietary symbol, but uses a different identifier (for example, the ISIN or the WKN) to identify instruments, no symbol will be set for the notations of that market.
 * @member {String} symbol
 */
InlineResponse2006Data.prototype['symbol'] = undefined;

/**
 * @member {module:model/InlineResponse2004Fsym} fsym
 */
InlineResponse2006Data.prototype['fsym'] = undefined;

/**
 * @member {module:model/InlineResponse2004ValueUnit} valueUnit
 */
InlineResponse2006Data.prototype['valueUnit'] = undefined;

/**
 * @member {module:model/InlineResponse2006Market} market
 */
InlineResponse2006Data.prototype['market'] = undefined;

/**
 * @member {module:model/InlineResponse2006Instrument} instrument
 */
InlineResponse2006Data.prototype['instrument'] = undefined;

/**
 * @member {module:model/InlineResponse2006KeyFigures} keyFigures
 */
InlineResponse2006Data.prototype['keyFigures'] = undefined;

/**
 * @member {module:model/InlineResponse2006Performance} performance
 */
InlineResponse2006Data.prototype['performance'] = undefined;

/**
 * @member {module:model/InlineResponse2006Volatility} volatility
 */
InlineResponse2006Data.prototype['volatility'] = undefined;






export default InlineResponse2006Data;

