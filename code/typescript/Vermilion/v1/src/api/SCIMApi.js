/**
 * VRS API documentation
 * Documentation on all available end points in the VRSAPI
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import CreateScimUserJSONRequest from '../model/CreateScimUserJSONRequest';
import CreatedScimUserJSONResponse from '../model/CreatedScimUserJSONResponse';
import InlineObject1 from '../model/InlineObject1';
import InlineObject2 from '../model/InlineObject2';
import InlineResponse4004 from '../model/InlineResponse4004';
import InlineResponse4031 from '../model/InlineResponse4031';
import InlineResponse4032 from '../model/InlineResponse4032';
import InlineResponse4033 from '../model/InlineResponse4033';
import InlineResponse4034 from '../model/InlineResponse4034';
import InlineResponse4035 from '../model/InlineResponse4035';
import InlineResponse4036 from '../model/InlineResponse4036';
import InlineResponse4037 from '../model/InlineResponse4037';
import InlineResponse4038 from '../model/InlineResponse4038';
import InlineResponse4044 from '../model/InlineResponse4044';
import InlineResponse409 from '../model/InlineResponse409';
import InlineResponse4091 from '../model/InlineResponse4091';
import ScimGroup from '../model/ScimGroup';
import ScimGroupListResponse from '../model/ScimGroupListResponse';
import ScimUser from '../model/ScimUser';
import ScimUserListResponse from '../model/ScimUserListResponse';

/**
* SCIM service.
* @module api/SCIMApi
* @version 0.9.0
*/
export default class SCIMApi {

    /**
    * Constructs a new SCIMApi. 
    * @alias module:api/SCIMApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * Retrieves a list of VRS role
     * Retrieves a VRS roles
     * @param {Object} opts Optional parameters
     * @param {Number} opts.count Non-negative maximum number of entries to return
     * @param {Number} opts.startIndex The 1-based index of the first query result
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ScimGroupListResponse} and HTTP response
     */
    scimV2GroupsGetWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'count': opts['count'],
        'startIndex': opts['startIndex']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = [];
      let accepts = ['application/scim+json'];
      let returnType = ScimGroupListResponse;
      return this.apiClient.callApi(
        '/scim/v2/Groups/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Retrieves a list of VRS role
     * Retrieves a VRS roles
     * @param {Object} opts Optional parameters
     * @param {Number} opts.count Non-negative maximum number of entries to return
     * @param {Number} opts.startIndex The 1-based index of the first query result
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ScimGroupListResponse}
     */
    scimV2GroupsGet(opts) {
      return this.scimV2GroupsGetWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Deletes a VRS role
     * Deletes a VRS role
     * @param {String} groupId The ID of the group
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    scimV2GroupsGroupIdDeleteWithHttpInfo(groupId) {
      let postBody = null;
      // verify the required parameter 'groupId' is set
      if (groupId === undefined || groupId === null) {
        throw new Error("Missing the required parameter 'groupId' when calling scimV2GroupsGroupIdDelete");
      }

      let pathParams = {
        'groupId': groupId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = [];
      let accepts = ['application/scim+json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/scim/v2/Groups/{groupId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Deletes a VRS role
     * Deletes a VRS role
     * @param {String} groupId The ID of the group
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    scimV2GroupsGroupIdDelete(groupId) {
      return this.scimV2GroupsGroupIdDeleteWithHttpInfo(groupId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Retrieves a VRS role
     * Retrieves a VRS role based on the ID
     * @param {String} groupId The ID of the role
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ScimGroup} and HTTP response
     */
    scimV2GroupsGroupIdGetWithHttpInfo(groupId) {
      let postBody = null;
      // verify the required parameter 'groupId' is set
      if (groupId === undefined || groupId === null) {
        throw new Error("Missing the required parameter 'groupId' when calling scimV2GroupsGroupIdGet");
      }

      let pathParams = {
        'groupId': groupId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = [];
      let accepts = ['application/scim+json'];
      let returnType = ScimGroup;
      return this.apiClient.callApi(
        '/scim/v2/Groups/{groupId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Retrieves a VRS role
     * Retrieves a VRS role based on the ID
     * @param {String} groupId The ID of the role
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ScimGroup}
     */
    scimV2GroupsGroupIdGet(groupId) {
      return this.scimV2GroupsGroupIdGetWithHttpInfo(groupId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Add or remove a user to/from a group
     * Adds or removes a VRS user to/from a VRS role
     * @param {String} groupId The ID of the role
     * @param {module:model/InlineObject2} inlineObject2 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ScimGroup} and HTTP response
     */
    scimV2GroupsGroupIdPatchWithHttpInfo(groupId, inlineObject2) {
      let postBody = inlineObject2;
      // verify the required parameter 'groupId' is set
      if (groupId === undefined || groupId === null) {
        throw new Error("Missing the required parameter 'groupId' when calling scimV2GroupsGroupIdPatch");
      }
      // verify the required parameter 'inlineObject2' is set
      if (inlineObject2 === undefined || inlineObject2 === null) {
        throw new Error("Missing the required parameter 'inlineObject2' when calling scimV2GroupsGroupIdPatch");
      }

      let pathParams = {
        'groupId': groupId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = ['application/scim+json'];
      let accepts = ['application/scim+json'];
      let returnType = ScimGroup;
      return this.apiClient.callApi(
        '/scim/v2/Groups/{groupId}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Add or remove a user to/from a group
     * Adds or removes a VRS user to/from a VRS role
     * @param {String} groupId The ID of the role
     * @param {module:model/InlineObject2} inlineObject2 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ScimGroup}
     */
    scimV2GroupsGroupIdPatch(groupId, inlineObject2) {
      return this.scimV2GroupsGroupIdPatchWithHttpInfo(groupId, inlineObject2)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Updates a VRS Group
     * Updates (replaces) a VRS Group with the properties in the JSON
     * @param {String} groupId The ID of the group
     * @param {module:model/ScimGroup} scimGroup 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ScimGroup} and HTTP response
     */
    scimV2GroupsGroupIdPutWithHttpInfo(groupId, scimGroup) {
      let postBody = scimGroup;
      // verify the required parameter 'groupId' is set
      if (groupId === undefined || groupId === null) {
        throw new Error("Missing the required parameter 'groupId' when calling scimV2GroupsGroupIdPut");
      }
      // verify the required parameter 'scimGroup' is set
      if (scimGroup === undefined || scimGroup === null) {
        throw new Error("Missing the required parameter 'scimGroup' when calling scimV2GroupsGroupIdPut");
      }

      let pathParams = {
        'groupId': groupId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = ['application/scim+json'];
      let accepts = ['application/scim+json'];
      let returnType = ScimGroup;
      return this.apiClient.callApi(
        '/scim/v2/Groups/{groupId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Updates a VRS Group
     * Updates (replaces) a VRS Group with the properties in the JSON
     * @param {String} groupId The ID of the group
     * @param {module:model/ScimGroup} scimGroup 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ScimGroup}
     */
    scimV2GroupsGroupIdPut(groupId, scimGroup) {
      return this.scimV2GroupsGroupIdPutWithHttpInfo(groupId, scimGroup)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Creates a role
     * Creates a VRS role
     * @param {module:model/ScimGroup} scimGroup 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ScimGroup} and HTTP response
     */
    scimV2GroupsPostWithHttpInfo(scimGroup) {
      let postBody = scimGroup;
      // verify the required parameter 'scimGroup' is set
      if (scimGroup === undefined || scimGroup === null) {
        throw new Error("Missing the required parameter 'scimGroup' when calling scimV2GroupsPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = ['application/scim+json'];
      let accepts = ['application/scim+json'];
      let returnType = ScimGroup;
      return this.apiClient.callApi(
        '/scim/v2/Groups/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Creates a role
     * Creates a VRS role
     * @param {module:model/ScimGroup} scimGroup 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ScimGroup}
     */
    scimV2GroupsPost(scimGroup) {
      return this.scimV2GroupsPostWithHttpInfo(scimGroup)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Retrieves a list of VRS users
     * Retrieves a VRS users
     * @param {Object} opts Optional parameters
     * @param {Number} opts.count Non-negative maximum number of entries to return
     * @param {Number} opts.startIndex The 1-based index of the first query result
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ScimUserListResponse} and HTTP response
     */
    scimV2UsersGetWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'count': opts['count'],
        'startIndex': opts['startIndex']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = [];
      let accepts = ['application/scim+json'];
      let returnType = ScimUserListResponse;
      return this.apiClient.callApi(
        '/scim/v2/Users/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Retrieves a list of VRS users
     * Retrieves a VRS users
     * @param {Object} opts Optional parameters
     * @param {Number} opts.count Non-negative maximum number of entries to return
     * @param {Number} opts.startIndex The 1-based index of the first query result
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ScimUserListResponse}
     */
    scimV2UsersGet(opts) {
      return this.scimV2UsersGetWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Creates a user
     * Creates a VRS user
     * @param {module:model/CreateScimUserJSONRequest} createScimUserJSONRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CreatedScimUserJSONResponse} and HTTP response
     */
    scimV2UsersPostWithHttpInfo(createScimUserJSONRequest) {
      let postBody = createScimUserJSONRequest;
      // verify the required parameter 'createScimUserJSONRequest' is set
      if (createScimUserJSONRequest === undefined || createScimUserJSONRequest === null) {
        throw new Error("Missing the required parameter 'createScimUserJSONRequest' when calling scimV2UsersPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = ['application/scim+json'];
      let accepts = ['application/scim+json'];
      let returnType = CreatedScimUserJSONResponse;
      return this.apiClient.callApi(
        '/scim/v2/Users/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Creates a user
     * Creates a VRS user
     * @param {module:model/CreateScimUserJSONRequest} createScimUserJSONRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CreatedScimUserJSONResponse}
     */
    scimV2UsersPost(createScimUserJSONRequest) {
      return this.scimV2UsersPostWithHttpInfo(createScimUserJSONRequest)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Deletes a VRS user
     * Deletes a VRS user (this marks them as 'Deleted' in the database)
     * @param {String} userId The ID of the user
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    scimV2UsersUserIdDeleteWithHttpInfo(userId) {
      let postBody = null;
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling scimV2UsersUserIdDelete");
      }

      let pathParams = {
        'userId': userId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = [];
      let accepts = ['application/scim+json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/scim/v2/Users/{userId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Deletes a VRS user
     * Deletes a VRS user (this marks them as 'Deleted' in the database)
     * @param {String} userId The ID of the user
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    scimV2UsersUserIdDelete(userId) {
      return this.scimV2UsersUserIdDeleteWithHttpInfo(userId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Retrieves a VRS User
     * Retrieves a VRS user based on their ID
     * @param {String} userId The ID of the user
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ScimUser} and HTTP response
     */
    scimV2UsersUserIdGetWithHttpInfo(userId) {
      let postBody = null;
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling scimV2UsersUserIdGet");
      }

      let pathParams = {
        'userId': userId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = [];
      let accepts = ['application/scim+json'];
      let returnType = ScimUser;
      return this.apiClient.callApi(
        '/scim/v2/Users/{userId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Retrieves a VRS User
     * Retrieves a VRS user based on their ID
     * @param {String} userId The ID of the user
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ScimUser}
     */
    scimV2UsersUserIdGet(userId) {
      return this.scimV2UsersUserIdGetWithHttpInfo(userId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Add or remove VRS user attributes
     * Adds or removes VRS user attributes based on the JSON properties
     * @param {String} userId The ID of the user
     * @param {module:model/InlineObject1} inlineObject1 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ScimUser} and HTTP response
     */
    scimV2UsersUserIdPatchWithHttpInfo(userId, inlineObject1) {
      let postBody = inlineObject1;
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling scimV2UsersUserIdPatch");
      }
      // verify the required parameter 'inlineObject1' is set
      if (inlineObject1 === undefined || inlineObject1 === null) {
        throw new Error("Missing the required parameter 'inlineObject1' when calling scimV2UsersUserIdPatch");
      }

      let pathParams = {
        'userId': userId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = ['application/scim+json'];
      let accepts = ['application/scim+json'];
      let returnType = ScimUser;
      return this.apiClient.callApi(
        '/scim/v2/Users/{userId}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Add or remove VRS user attributes
     * Adds or removes VRS user attributes based on the JSON properties
     * @param {String} userId The ID of the user
     * @param {module:model/InlineObject1} inlineObject1 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ScimUser}
     */
    scimV2UsersUserIdPatch(userId, inlineObject1) {
      return this.scimV2UsersUserIdPatchWithHttpInfo(userId, inlineObject1)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Updates a VRS user
     * Updates (replaces) a VRS user with the properties in the JSON
     * @param {String} userId The ID of the user
     * @param {module:model/ScimUser} scimUser 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ScimUser} and HTTP response
     */
    scimV2UsersUserIdPutWithHttpInfo(userId, scimUser) {
      let postBody = scimUser;
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling scimV2UsersUserIdPut");
      }
      // verify the required parameter 'scimUser' is set
      if (scimUser === undefined || scimUser === null) {
        throw new Error("Missing the required parameter 'scimUser' when calling scimV2UsersUserIdPut");
      }

      let pathParams = {
        'userId': userId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = ['application/scim+json'];
      let accepts = ['application/scim+json'];
      let returnType = ScimUser;
      return this.apiClient.callApi(
        '/scim/v2/Users/{userId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Updates a VRS user
     * Updates (replaces) a VRS user with the properties in the JSON
     * @param {String} userId The ID of the user
     * @param {module:model/ScimUser} scimUser 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ScimUser}
     */
    scimV2UsersUserIdPut(userId, scimUser) {
      return this.scimV2UsersUserIdPutWithHttpInfo(userId, scimUser)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
