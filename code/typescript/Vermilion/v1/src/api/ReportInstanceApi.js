/**
 * VRS API documentation
 * Documentation on all available end points in the VRSAPI
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import InlineObject from '../model/InlineObject';
import InlineResponse4002 from '../model/InlineResponse4002';
import InlineResponse4003 from '../model/InlineResponse4003';
import InlineResponse401 from '../model/InlineResponse401';
import InlineResponse4011 from '../model/InlineResponse4011';
import InlineResponse403 from '../model/InlineResponse403';
import InlineResponse4042 from '../model/InlineResponse4042';
import InlineResponse4043 from '../model/InlineResponse4043';
import InlineResponse406 from '../model/InlineResponse406';
import ReportInstanceData from '../model/ReportInstanceData';
import ReportInstanceDataResponse from '../model/ReportInstanceDataResponse';
import ReportInstanceList from '../model/ReportInstanceList';
import ReportInstanceLogList from '../model/ReportInstanceLogList';

/**
* ReportInstance service.
* @module api/ReportInstanceApi
* @version 0.9.0
*/
export default class ReportInstanceApi {

    /**
    * Constructs a new ReportInstanceApi. 
    * @alias module:api/ReportInstanceApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * Generates a report
     * Generates a report using the specified ID and the JSON in the request body
     * @param {module:model/InlineObject} inlineObject 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ReportInstanceDataResponse} and HTTP response
     */
    v1ReportInstancesGeneratePostWithHttpInfo(inlineObject) {
      let postBody = inlineObject;
      // verify the required parameter 'inlineObject' is set
      if (inlineObject === undefined || inlineObject === null) {
        throw new Error("Missing the required parameter 'inlineObject' when calling v1ReportInstancesGeneratePost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ReportInstanceDataResponse;
      return this.apiClient.callApi(
        '/v1/report-instances/generate', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Generates a report
     * Generates a report using the specified ID and the JSON in the request body
     * @param {module:model/InlineObject} inlineObject 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ReportInstanceDataResponse}
     */
    v1ReportInstancesGeneratePost(inlineObject) {
      return this.v1ReportInstancesGeneratePostWithHttpInfo(inlineObject)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Gets a list of report instances
     * Gets a list of report instances. This can be filtered down further by including query parameters in the URL. For example, a report definition id can be added so the only report instances returned are the ones with a matching id
     * @param {String} tenant The code of the tenancy
     * @param {Object} opts Optional parameters
     * @param {String} opts.reportDefinitionCode Acts as a filter for the retrieval process. Filters the report instances that match the report definition code
     * @param {String} opts.entityCodes A series of query parameters used to filter the report instances by entity code. E.g: entityCode=DATE&entityCode=SYSTEM_LANG
     * @param {String} opts.entityKeys A series of query parameters used to filter the report instances by entity keys. E.g: entityKey=en-gb
     * @param {String} opts.sectionFilter Acts as a filter for the retrieval process. Filters the report instances that match the section filter
     * @param {String} opts.outputFormat Acts as a filter for the retrieval process. Filters the report instances that match the output format
     * @param {Number} opts.paginationLimit Non-negative maximum number of entries to return
     * @param {Number} opts.paginationOffset Non-negative number of entries to skip
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ReportInstanceList} and HTTP response
     */
    v1TenantReportInstancesGetWithHttpInfo(tenant, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'tenant' is set
      if (tenant === undefined || tenant === null) {
        throw new Error("Missing the required parameter 'tenant' when calling v1TenantReportInstancesGet");
      }

      let pathParams = {
        'tenant': tenant
      };
      let queryParams = {
        'reportDefinitionCode': opts['reportDefinitionCode'],
        'entityCodes': opts['entityCodes'],
        'entityKeys': opts['entityKeys'],
        'sectionFilter': opts['sectionFilter'],
        'outputFormat': opts['outputFormat'],
        '_paginationLimit': opts['paginationLimit'],
        '_paginationOffset': opts['paginationOffset']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ReportInstanceList;
      return this.apiClient.callApi(
        '/v1/{tenant}/report-instances', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Gets a list of report instances
     * Gets a list of report instances. This can be filtered down further by including query parameters in the URL. For example, a report definition id can be added so the only report instances returned are the ones with a matching id
     * @param {String} tenant The code of the tenancy
     * @param {Object} opts Optional parameters
     * @param {String} opts.reportDefinitionCode Acts as a filter for the retrieval process. Filters the report instances that match the report definition code
     * @param {String} opts.entityCodes A series of query parameters used to filter the report instances by entity code. E.g: entityCode=DATE&entityCode=SYSTEM_LANG
     * @param {String} opts.entityKeys A series of query parameters used to filter the report instances by entity keys. E.g: entityKey=en-gb
     * @param {String} opts.sectionFilter Acts as a filter for the retrieval process. Filters the report instances that match the section filter
     * @param {String} opts.outputFormat Acts as a filter for the retrieval process. Filters the report instances that match the output format
     * @param {Number} opts.paginationLimit Non-negative maximum number of entries to return
     * @param {Number} opts.paginationOffset Non-negative number of entries to skip
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ReportInstanceList}
     */
    v1TenantReportInstancesGet(tenant, opts) {
      return this.v1TenantReportInstancesGetWithHttpInfo(tenant, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Cancels a report generation
     * Sends a request to cancel a report generation based on the report instance id passed
     * @param {String} tenant The code of the tenancy
     * @param {String} reportInstanceId The id of the report instance
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    v1TenantReportInstancesReportInstanceIdDeleteWithHttpInfo(tenant, reportInstanceId) {
      let postBody = null;
      // verify the required parameter 'tenant' is set
      if (tenant === undefined || tenant === null) {
        throw new Error("Missing the required parameter 'tenant' when calling v1TenantReportInstancesReportInstanceIdDelete");
      }
      // verify the required parameter 'reportInstanceId' is set
      if (reportInstanceId === undefined || reportInstanceId === null) {
        throw new Error("Missing the required parameter 'reportInstanceId' when calling v1TenantReportInstancesReportInstanceIdDelete");
      }

      let pathParams = {
        'tenant': tenant,
        'reportInstanceId': reportInstanceId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/{tenant}/report-instances/{reportInstanceId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Cancels a report generation
     * Sends a request to cancel a report generation based on the report instance id passed
     * @param {String} tenant The code of the tenancy
     * @param {String} reportInstanceId The id of the report instance
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    v1TenantReportInstancesReportInstanceIdDelete(tenant, reportInstanceId) {
      return this.v1TenantReportInstancesReportInstanceIdDeleteWithHttpInfo(tenant, reportInstanceId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Gets a report instance based on the ID
     * Gets a report instance object based on the ID passed
     * @param {String} reportInstanceId The ID of the report instance
     * @param {String} tenant The code of the tenancy
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    v1TenantReportInstancesReportInstanceIdGetWithHttpInfo(reportInstanceId, tenant) {
      let postBody = null;
      // verify the required parameter 'reportInstanceId' is set
      if (reportInstanceId === undefined || reportInstanceId === null) {
        throw new Error("Missing the required parameter 'reportInstanceId' when calling v1TenantReportInstancesReportInstanceIdGet");
      }
      // verify the required parameter 'tenant' is set
      if (tenant === undefined || tenant === null) {
        throw new Error("Missing the required parameter 'tenant' when calling v1TenantReportInstancesReportInstanceIdGet");
      }

      let pathParams = {
        'reportInstanceId': reportInstanceId,
        'tenant': tenant
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/{tenant}/report-instances/{reportInstanceId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Gets a report instance based on the ID
     * Gets a report instance object based on the ID passed
     * @param {String} reportInstanceId The ID of the report instance
     * @param {String} tenant The code of the tenancy
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    v1TenantReportInstancesReportInstanceIdGet(reportInstanceId, tenant) {
      return this.v1TenantReportInstancesReportInstanceIdGetWithHttpInfo(reportInstanceId, tenant)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Gets a list of logs for the report instance generation
     * Gets a list of logs for the generated report instance. Allows the user to sort on log message, type and date. Also allows for retrieving of just the errors & warnings'
     * @param {String} tenant The code of the tenancy
     * @param {String} reportInstanceId Used to validate that report file name belongs to the report instance passed
     * @param {Object} opts Optional parameters
     * @param {String} opts.fullLog Determines if the endpoint should return a full set of logs or just the errors and warnings E.g: fullLog=true
     * @param {String} opts.sort The column to sort on. Can add - to sort
     * @param {Number} opts.paginationLimit Non-negative maximum number of entries to return
     * @param {Number} opts.paginationOffset Non-negative number of entries to skip
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ReportInstanceLogList} and HTTP response
     */
    v1TenantReportInstancesReportInstanceIdLogsGetWithHttpInfo(tenant, reportInstanceId, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'tenant' is set
      if (tenant === undefined || tenant === null) {
        throw new Error("Missing the required parameter 'tenant' when calling v1TenantReportInstancesReportInstanceIdLogsGet");
      }
      // verify the required parameter 'reportInstanceId' is set
      if (reportInstanceId === undefined || reportInstanceId === null) {
        throw new Error("Missing the required parameter 'reportInstanceId' when calling v1TenantReportInstancesReportInstanceIdLogsGet");
      }

      let pathParams = {
        'tenant': tenant,
        'reportInstanceId': reportInstanceId
      };
      let queryParams = {
        'fullLog': opts['fullLog'],
        '_sort': opts['sort'],
        '_paginationLimit': opts['paginationLimit'],
        '_paginationOffset': opts['paginationOffset']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ReportInstanceLogList;
      return this.apiClient.callApi(
        '/v1/{tenant}/report-instances/{reportInstanceId}/logs', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Gets a list of logs for the report instance generation
     * Gets a list of logs for the generated report instance. Allows the user to sort on log message, type and date. Also allows for retrieving of just the errors & warnings'
     * @param {String} tenant The code of the tenancy
     * @param {String} reportInstanceId Used to validate that report file name belongs to the report instance passed
     * @param {Object} opts Optional parameters
     * @param {String} opts.fullLog Determines if the endpoint should return a full set of logs or just the errors and warnings E.g: fullLog=true
     * @param {String} opts.sort The column to sort on. Can add - to sort
     * @param {Number} opts.paginationLimit Non-negative maximum number of entries to return
     * @param {Number} opts.paginationOffset Non-negative number of entries to skip
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ReportInstanceLogList}
     */
    v1TenantReportInstancesReportInstanceIdLogsGet(tenant, reportInstanceId, opts) {
      return this.v1TenantReportInstancesReportInstanceIdLogsGetWithHttpInfo(tenant, reportInstanceId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Gets the generated file
     * Get the generated file for a report instance. Users can fetch the generated report once the genration is finished. The report instance id and the report file name are passed in as path paramters
     * @param {String} tenant The code of the tenancy
     * @param {String} reportInstanceId Used to validate that report file name belongs to the report instance passed
     * @param {String} reportFileName The report file name that has to be retrieved. report file name. E.g: xyz.pdf
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    v1TenantReportInstancesReportInstanceIdResultsReportFileNameGetWithHttpInfo(tenant, reportInstanceId, reportFileName) {
      let postBody = null;
      // verify the required parameter 'tenant' is set
      if (tenant === undefined || tenant === null) {
        throw new Error("Missing the required parameter 'tenant' when calling v1TenantReportInstancesReportInstanceIdResultsReportFileNameGet");
      }
      // verify the required parameter 'reportInstanceId' is set
      if (reportInstanceId === undefined || reportInstanceId === null) {
        throw new Error("Missing the required parameter 'reportInstanceId' when calling v1TenantReportInstancesReportInstanceIdResultsReportFileNameGet");
      }
      // verify the required parameter 'reportFileName' is set
      if (reportFileName === undefined || reportFileName === null) {
        throw new Error("Missing the required parameter 'reportFileName' when calling v1TenantReportInstancesReportInstanceIdResultsReportFileNameGet");
      }

      let pathParams = {
        'tenant': tenant,
        'reportInstanceId': reportInstanceId,
        'reportFileName': reportFileName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/{tenant}/report-instances/{reportInstanceId}/results/{reportFileName}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Gets the generated file
     * Get the generated file for a report instance. Users can fetch the generated report once the genration is finished. The report instance id and the report file name are passed in as path paramters
     * @param {String} tenant The code of the tenancy
     * @param {String} reportInstanceId Used to validate that report file name belongs to the report instance passed
     * @param {String} reportFileName The report file name that has to be retrieved. report file name. E.g: xyz.pdf
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    v1TenantReportInstancesReportInstanceIdResultsReportFileNameGet(tenant, reportInstanceId, reportFileName) {
      return this.v1TenantReportInstancesReportInstanceIdResultsReportFileNameGetWithHttpInfo(tenant, reportInstanceId, reportFileName)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
