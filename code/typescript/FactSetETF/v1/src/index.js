/**
 * FactSet Exchange Traded Funds API
 * FactSet ETF data feeds provide complete and accurate security, fund and reference data across the universe of exchange-traded products. Data is sourced from ETF providers across the globe and includes more than 100 unique data points, resulting in comprehensive coverage to help you evaluate and construct ETFs, analyze potential trades, and perform fund research.<p> FactSet Reference and Analytics data uses FactSet's FCS, which categorizes exchange-traded products using a rules-based system that is derived from seven core classifications. This system evaluates the asset class, economic development level, and geographical region as described in each fund's prospectus and marketing materials. ETF exposure details are presented on successively granular levels-  category, then focus, and then niche.</p> <p>Moreover, FactSet ETF Reference data captures over 100 unique data points and provides market-specific data if you wish to solely focus on U.S., Canadian, Australian, New Zealand, Singapore, Hong Kong or European exchanges. All data points are grouped in one of two levels, either as a Fund or as a Listing. However, FactSet ETF Analytics data is primarily available for U.S.-domiciled ETFs. A subset of reference data items are provided for European-domiciled funds. For a full breakout of regional availability and history, see Formula Definitions and Calculations.</p> 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: api@factset.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from './ApiClient';
import Category from './model/Category';
import ErrorResponse from './model/ErrorResponse';
import ErrorResponseSubErrors from './model/ErrorResponseSubErrors';
import EtfReferenceData from './model/EtfReferenceData';
import EtfReferenceDataRequest from './model/EtfReferenceDataRequest';
import EtfReferenceDataResponse from './model/EtfReferenceDataResponse';
import Metric from './model/Metric';
import MetricsResponse from './model/MetricsResponse';
import DataItemsApi from './api/DataItemsApi';
import ReferenceApi from './api/ReferenceApi';


/**
* FactSet_ETF_data_feeds_provide_complete_and_accurate_security_fund_and_reference_data_across_the_universe_of_exchange_traded_products__Data_is_sourced_from_ETF_providers_across_the_globe_and_includes_more_than_100_unique_data_points_resulting_in_comprehensive_coverage_to_help_you_evaluate_and_construct_ETFs_analyze_potential_trades_and_perform_fund_research_p_FactSet_Reference_and_Analytics_data_uses_FactSets_FCS_which_categorizes_exchange_traded_products_using_a_rules_based_system_that_is_derived_from_seven_core_classifications__This_system_evaluates_the_asset_class_economic_development_level_and_geographical_region_as_described_in_each_funds_prospectus_and_marketing_materials__ETF_exposure_details_are_presented_on_successively_granular_levels___category_then_focus_and_then_niche__p_pMoreover_FactSet_ETF_Reference_data_captures_over_100_unique_data_points_and_provides_market_specific_data_if_you_wish_to_solely_focus_on_U_S__Canadian_Australian_New_Zealand_Singapore_Hong_Kong_or_European_exchanges__All_data_points_are_grouped_in_one_of_two_levels_either_as_a_Fund_or_as_a_Listing__However_FactSet_ETF_Analytics_data_is_primarily_available_for_U_S__domiciled_ETFs__A_subset_of_reference_data_items_are_provided_for_European_domiciled_funds__For_a_full_breakout_of_regional_availability_and_history_see_Formula_Definitions_and_Calculations__p.<br>
* The <code>index</code> module provides access to constructors for all the classes which comprise the public API.
* <p>
* An AMD (recommended!) or CommonJS application will generally do something equivalent to the following:
* <pre>
* var factsetetf = require('index'); // See note below*.
* var xxxSvc = new factsetetf.XxxApi(); // Allocate the API class we're going to use.
* var yyyModel = new factsetetf.Yyy(); // Construct a model instance.
* yyyModel.someProperty = 'someValue';
* ...
* var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.
* ...
* </pre>
* <em>*NOTE: For a top-level AMD script, use require(['index'], function(){...})
* and put the application logic within the callback function.</em>
* </p>
* <p>
* A non-AMD browser application (discouraged) might do something like this:
* <pre>
* var xxxSvc = new factsetetf.XxxApi(); // Allocate the API class we're going to use.
* var yyy = new factsetetf.Yyy(); // Construct a model instance.
* yyyModel.someProperty = 'someValue';
* ...
* var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.
* ...
* </pre>
* </p>
* @module index
* @version 0.9.0
*/
export {
    /**
     * The ApiClient constructor.
     * @property {module:ApiClient}
     */
    ApiClient,

    /**
     * The Category model constructor.
     * @property {module:model/Category}
     */
    Category,

    /**
     * The ErrorResponse model constructor.
     * @property {module:model/ErrorResponse}
     */
    ErrorResponse,

    /**
     * The ErrorResponseSubErrors model constructor.
     * @property {module:model/ErrorResponseSubErrors}
     */
    ErrorResponseSubErrors,

    /**
     * The EtfReferenceData model constructor.
     * @property {module:model/EtfReferenceData}
     */
    EtfReferenceData,

    /**
     * The EtfReferenceDataRequest model constructor.
     * @property {module:model/EtfReferenceDataRequest}
     */
    EtfReferenceDataRequest,

    /**
     * The EtfReferenceDataResponse model constructor.
     * @property {module:model/EtfReferenceDataResponse}
     */
    EtfReferenceDataResponse,

    /**
     * The Metric model constructor.
     * @property {module:model/Metric}
     */
    Metric,

    /**
     * The MetricsResponse model constructor.
     * @property {module:model/MetricsResponse}
     */
    MetricsResponse,

    /**
    * The DataItemsApi service constructor.
    * @property {module:api/DataItemsApi}
    */
    DataItemsApi,

    /**
    * The ReferenceApi service constructor.
    * @property {module:api/ReferenceApi}
    */
    ReferenceApi
};
