/**
 * IRN API v1
 * Allows users to create, update and configure IRN data.
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ProblemDetails from '../model/ProblemDetails';
import TeamConfigDto from '../model/TeamConfigDto';
import TeamSummaryDto from '../model/TeamSummaryDto';

/**
* Teams service.
* @module api/TeamsApi
* @version 0.9.0
*/
export default class TeamsApi {

    /**
    * Constructs a new TeamsApi. 
    * @alias module:api/TeamsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * Get all Teams
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.xIRNIgnorePermissions  (default to false)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/TeamSummaryDto>} and HTTP response
     */
    v1TeamsGetWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-IRN-Ignore-Permissions': opts['xIRNIgnorePermissions']
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [TeamSummaryDto];
      return this.apiClient.callApi(
        '/v1/teams', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get all Teams
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.xIRNIgnorePermissions  (default to false)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/TeamSummaryDto>}
     */
    v1TeamsGet(opts) {
      return this.v1TeamsGetWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get Team details for the given Id provided
     * @param {String} teamId Id
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.xIRNIgnorePermissions  (default to false)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/TeamConfigDto} and HTTP response
     */
    v1TeamsTeamIdGetWithHttpInfo(teamId, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'teamId' is set
      if (teamId === undefined || teamId === null) {
        throw new Error("Missing the required parameter 'teamId' when calling v1TeamsTeamIdGet");
      }

      let pathParams = {
        'teamId': teamId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-IRN-Ignore-Permissions': opts['xIRNIgnorePermissions']
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = TeamConfigDto;
      return this.apiClient.callApi(
        '/v1/teams/{teamId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get Team details for the given Id provided
     * @param {String} teamId Id
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.xIRNIgnorePermissions  (default to false)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/TeamConfigDto}
     */
    v1TeamsTeamIdGet(teamId, opts) {
      return this.v1TeamsTeamIdGetWithHttpInfo(teamId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
