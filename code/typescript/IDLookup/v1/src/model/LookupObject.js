/**
 * ID Lookup API
 * The Factset Identifier Lookup API provides the ability to search for various identifier types based on keyword. The API returns tickers, entity names and other identifiers that Factset supports. In addition, the API offers filters that allows users to refine the results. 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import FilterParams from './FilterParams';

/**
 * The LookupObject model module.
 * @module model/LookupObject
 * @version 0.9.0
 */
class LookupObject {
    /**
     * Constructs a new <code>LookupObject</code>.
     * @alias module:model/LookupObject
     */
    constructor() { 
        
        LookupObject.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>LookupObject</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/LookupObject} obj Optional instance to populate.
     * @return {module:model/LookupObject} The populated <code>LookupObject</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new LookupObject();

            if (data.hasOwnProperty('pattern')) {
                obj['pattern'] = ApiClient.convertToType(data['pattern'], 'String');
            }
            if (data.hasOwnProperty('entities')) {
                obj['entities'] = ApiClient.convertToType(data['entities'], ['String']);
            }
            if (data.hasOwnProperty('filters')) {
                obj['filters'] = FilterParams.constructFromObject(data['filters']);
            }
        }
        return obj;
    }


}

/**
 * The string or keyword being searched on. Concurrent searches for multiple patterns is NOT supported 
 * @member {String} pattern
 */
LookupObject.prototype['pattern'] = undefined;

/**
 * Asset class that is being searched against
 * @member {Array.<String>} entities
 */
LookupObject.prototype['entities'] = undefined;

/**
 * @member {module:model/FilterParams} filters
 */
LookupObject.prototype['filters'] = undefined;






export default LookupObject;

