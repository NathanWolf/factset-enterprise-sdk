/**
 * ID Lookup API
 * The Factset Identifier Lookup API provides the ability to search for various identifier types based on keyword. The API returns tickers, entity names and other identifiers that Factset supports. In addition, the API offers filters that allows users to refine the results. 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from './ApiClient';
import ErrorResponse from './model/ErrorResponse';
import FilterParams from './model/FilterParams';
import IncludeExcludeObject from './model/IncludeExcludeObject';
import LookupAssettype from './model/LookupAssettype';
import LookupCount from './model/LookupCount';
import LookupLimit from './model/LookupLimit';
import LookupObject from './model/LookupObject';
import LookupRequest from './model/LookupRequest';
import LookupResponse from './model/LookupResponse';
import ResponseDetails from './model/ResponseDetails';

import FactSetIDLookupApi from './api/FactSetIDLookupApi';


/**
* ID Lookup client library for JavaScript.<br>
* The <code>index</code> module provides access to constructors for all the classes which comprise the public API.
* <p>
* An AMD (recommended!) or CommonJS application will generally do something equivalent to the following:
* <pre>
* var idlookup = require('index'); // See note below*.
* var xxxSvc = new idlookup.XxxApi(); // Allocate the API class we're going to use.
* var yyyModel = new idlookup.Yyy(); // Construct a model instance.
* yyyModel.someProperty = 'someValue';
* ...
* var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.
* ...
* </pre>
* <em>*NOTE: For a top-level AMD script, use require(['index'], function(){...})
* and put the application logic within the callback function.</em>
* </p>
* <p>
* A non-AMD browser application (discouraged) might do something like this:
* <pre>
* var xxxSvc = new idlookup.XxxApi(); // Allocate the API class we're going to use.
* var yyy = new idlookup.Yyy(); // Construct a model instance.
* yyyModel.someProperty = 'someValue';
* ...
* var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.
* ...
* </pre>
* </p>
* @module index
* @version 0.20.0
*/
export {
    /**
     * The ApiClient constructor.
     * @property {module:ApiClient}
     */
    ApiClient,

    /**
     * The ErrorResponse model constructor.
     * @property {module:model/ErrorResponse}
     */
    ErrorResponse,

    /**
     * The FilterParams model constructor.
     * @property {module:model/FilterParams}
     */
    FilterParams,

    /**
     * The IncludeExcludeObject model constructor.
     * @property {module:model/IncludeExcludeObject}
     */
    IncludeExcludeObject,

    /**
     * The LookupAssettype model constructor.
     * @property {module:model/LookupAssettype}
     */
    LookupAssettype,

    /**
     * The LookupCount model constructor.
     * @property {module:model/LookupCount}
     */
    LookupCount,

    /**
     * The LookupLimit model constructor.
     * @property {module:model/LookupLimit}
     */
    LookupLimit,

    /**
     * The LookupObject model constructor.
     * @property {module:model/LookupObject}
     */
    LookupObject,

    /**
     * The LookupRequest model constructor.
     * @property {module:model/LookupRequest}
     */
    LookupRequest,

    /**
     * The LookupResponse model constructor.
     * @property {module:model/LookupResponse}
     */
    LookupResponse,

    /**
     * The ResponseDetails model constructor.
     * @property {module:model/ResponseDetails}
     */
    ResponseDetails,

    /**
    * The FactSetIDLookupApi service constructor.
    * @property {module:api/FactSetIDLookupApi}
    */
    FactSetIDLookupApi,

};
