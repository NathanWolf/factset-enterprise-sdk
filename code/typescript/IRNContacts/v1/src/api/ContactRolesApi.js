/**
 * IRN API v1
 * Allows users to create, update and configure IRN data.
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ContactRoleDto from '../model/ContactRoleDto';
import ProblemDetails from '../model/ProblemDetails';

/**
* ContactRoles service.
* @module api/ContactRolesApi
* @version 0.9.0
*/
export default class ContactRolesApi {

    /**
    * Constructs a new ContactRolesApi. 
    * @alias module:api/ContactRolesApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * Delete a contact role
     * @param {String} contactRoleId contactRoleId to delete associated record
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    v1ContactRolesContactRoleIdDeleteWithHttpInfo(contactRoleId) {
      let postBody = null;
      // verify the required parameter 'contactRoleId' is set
      if (contactRoleId === undefined || contactRoleId === null) {
        throw new Error("Missing the required parameter 'contactRoleId' when calling v1ContactRolesContactRoleIdDelete");
      }

      let pathParams = {
        'contactRoleId': contactRoleId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/contact-roles/{contactRoleId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Delete a contact role
     * @param {String} contactRoleId contactRoleId to delete associated record
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    v1ContactRolesContactRoleIdDelete(contactRoleId) {
      return this.v1ContactRolesContactRoleIdDeleteWithHttpInfo(contactRoleId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Edit a contact role
     * @param {String} contactRoleId contactRoleId to update associated record
     * @param {String} body Updated contact role name
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    v1ContactRolesContactRoleIdPutWithHttpInfo(contactRoleId, body) {
      let postBody = body;
      // verify the required parameter 'contactRoleId' is set
      if (contactRoleId === undefined || contactRoleId === null) {
        throw new Error("Missing the required parameter 'contactRoleId' when calling v1ContactRolesContactRoleIdPut");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling v1ContactRolesContactRoleIdPut");
      }

      let pathParams = {
        'contactRoleId': contactRoleId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/contact-roles/{contactRoleId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Edit a contact role
     * @param {String} contactRoleId contactRoleId to update associated record
     * @param {String} body Updated contact role name
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    v1ContactRolesContactRoleIdPut(contactRoleId, body) {
      return this.v1ContactRolesContactRoleIdPutWithHttpInfo(contactRoleId, body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get list of the contact roles configured in your group
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/ContactRoleDto>} and HTTP response
     */
    v1ContactRolesGetWithHttpInfo() {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [ContactRoleDto];
      return this.apiClient.callApi(
        '/v1/contact-roles', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get list of the contact roles configured in your group
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/ContactRoleDto>}
     */
    v1ContactRolesGet() {
      return this.v1ContactRolesGetWithHttpInfo()
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Create contact roles
     * @param {String} body Contact role name
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link String} and HTTP response
     */
    v1ContactRolesPostWithHttpInfo(body) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling v1ContactRolesPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json'];
      let accepts = ['application/json'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/v1/contact-roles', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Create contact roles
     * @param {String} body Contact role name
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link String}
     */
    v1ContactRolesPost(body) {
      return this.v1ContactRolesPostWithHttpInfo(body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
