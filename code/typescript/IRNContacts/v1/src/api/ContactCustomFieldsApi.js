/**
 * IRN API v1
 * Allows users to create, update and configure IRN data.
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ContactCustomFieldDto from '../model/ContactCustomFieldDto';
import ContactCustomFieldListDto from '../model/ContactCustomFieldListDto';
import ContactCustomFieldSaveDto from '../model/ContactCustomFieldSaveDto';
import Operation from '../model/Operation';
import ProblemDetails from '../model/ProblemDetails';

/**
* ContactCustomFields service.
* @module api/ContactCustomFieldsApi
* @version 0.9.0
*/
export default class ContactCustomFieldsApi {

    /**
    * Constructs a new ContactCustomFieldsApi. 
    * @alias module:api/ContactCustomFieldsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * Delete a contact custom field
     * @param {String} contactCustomFieldId contactCustomFieldId to delete associated record
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    v1ContactCustomFieldsContactCustomFieldIdDeleteWithHttpInfo(contactCustomFieldId) {
      let postBody = null;
      // verify the required parameter 'contactCustomFieldId' is set
      if (contactCustomFieldId === undefined || contactCustomFieldId === null) {
        throw new Error("Missing the required parameter 'contactCustomFieldId' when calling v1ContactCustomFieldsContactCustomFieldIdDelete");
      }

      let pathParams = {
        'contactCustomFieldId': contactCustomFieldId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/contact-custom-fields/{contactCustomFieldId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Delete a contact custom field
     * @param {String} contactCustomFieldId contactCustomFieldId to delete associated record
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    v1ContactCustomFieldsContactCustomFieldIdDelete(contactCustomFieldId) {
      return this.v1ContactCustomFieldsContactCustomFieldIdDeleteWithHttpInfo(contactCustomFieldId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get a specific Contact custom field's details
     * @param {String} contactCustomFieldId contactCustomFieldId to get associated record
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ContactCustomFieldDto} and HTTP response
     */
    v1ContactCustomFieldsContactCustomFieldIdGetWithHttpInfo(contactCustomFieldId) {
      let postBody = null;
      // verify the required parameter 'contactCustomFieldId' is set
      if (contactCustomFieldId === undefined || contactCustomFieldId === null) {
        throw new Error("Missing the required parameter 'contactCustomFieldId' when calling v1ContactCustomFieldsContactCustomFieldIdGet");
      }

      let pathParams = {
        'contactCustomFieldId': contactCustomFieldId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ContactCustomFieldDto;
      return this.apiClient.callApi(
        '/v1/contact-custom-fields/{contactCustomFieldId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get a specific Contact custom field's details
     * @param {String} contactCustomFieldId contactCustomFieldId to get associated record
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ContactCustomFieldDto}
     */
    v1ContactCustomFieldsContactCustomFieldIdGet(contactCustomFieldId) {
      return this.v1ContactCustomFieldsContactCustomFieldIdGetWithHttpInfo(contactCustomFieldId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Edit a contact custom field
     * @param {String} contactCustomFieldId contactCustomFieldId to update associated record
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/Operation>} opts.operation contactCustomFieldUpdateDto object to update
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    v1ContactCustomFieldsContactCustomFieldIdPatchWithHttpInfo(contactCustomFieldId, opts) {
      opts = opts || {};
      let postBody = opts['operation'];
      // verify the required parameter 'contactCustomFieldId' is set
      if (contactCustomFieldId === undefined || contactCustomFieldId === null) {
        throw new Error("Missing the required parameter 'contactCustomFieldId' when calling v1ContactCustomFieldsContactCustomFieldIdPatch");
      }

      let pathParams = {
        'contactCustomFieldId': contactCustomFieldId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/contact-custom-fields/{contactCustomFieldId}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Edit a contact custom field
     * @param {String} contactCustomFieldId contactCustomFieldId to update associated record
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/Operation>} opts.operation contactCustomFieldUpdateDto object to update
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    v1ContactCustomFieldsContactCustomFieldIdPatch(contactCustomFieldId, opts) {
      return this.v1ContactCustomFieldsContactCustomFieldIdPatchWithHttpInfo(contactCustomFieldId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get all the contact custom fields
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/ContactCustomFieldDto>} and HTTP response
     */
    v1ContactCustomFieldsGetWithHttpInfo() {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [ContactCustomFieldDto];
      return this.apiClient.callApi(
        '/v1/contact-custom-fields', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get all the contact custom fields
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/ContactCustomFieldDto>}
     */
    v1ContactCustomFieldsGet() {
      return this.v1ContactCustomFieldsGetWithHttpInfo()
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Create a contact custom field
     * @param {Object} opts Optional parameters
     * @param {module:model/ContactCustomFieldSaveDto} opts.contactCustomFieldSaveDto ContactCustomFieldSaveDto object to save
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link String} and HTTP response
     */
    v1ContactCustomFieldsPostWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = opts['contactCustomFieldSaveDto'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json'];
      let accepts = ['application/json'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/v1/contact-custom-fields', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Create a contact custom field
     * @param {Object} opts Optional parameters
     * @param {module:model/ContactCustomFieldSaveDto} opts.contactCustomFieldSaveDto ContactCustomFieldSaveDto object to save
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link String}
     */
    v1ContactCustomFieldsPost(opts) {
      return this.v1ContactCustomFieldsPostWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Reorder contact custom fields
     * @param {Object} opts Optional parameters
     * @param {module:model/ContactCustomFieldListDto} opts.contactCustomFieldListDto List of Guid
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    v1ContactCustomFieldsReorderPostWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = opts['contactCustomFieldListDto'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/contact-custom-fields/reorder', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Reorder contact custom fields
     * @param {Object} opts Optional parameters
     * @param {module:model/ContactCustomFieldListDto} opts.contactCustomFieldListDto List of Guid
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    v1ContactCustomFieldsReorderPost(opts) {
      return this.v1ContactCustomFieldsReorderPostWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
