/**
 * FactSet Options API
 * The Option Prices database provides pricing data such as mid bid-ask price, reference data (e.g., strike price), and risk measures (e.g., Greeks and implied volatility). Visit [Options Overview OA Page # 14925](https://my.apps.factset.com/oa/pages/14925) for details on database coverage. U.S. exchange-traded option bid and ask quotes are continuously updated throughout the day even when no trades have occurred on the option (zero volume). The end-of-day closing bid and ask quotes are always in line with the underlying closing price.  **Note** * Currently in Beta only **OPRA** exchanges are supported. 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: api@factset.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ExchangeScreeningId from './ExchangeScreeningId';

/**
 * The OptionScreeningRequest model module.
 * @module model/OptionScreeningRequest
 */
class OptionScreeningRequest {
    /**
     * Constructs a new <code>OptionScreeningRequest</code>.
     * Options Screening Request allowing for up to three Conditions using AND Logic. |conditions|description| |---|---| |P_OPT_UNDERLYING_SECURITY_E|Underlying Security Equal To| |P_OPT_STRIKE_PRICE_E|Strike Price Equal To| |P_OPT_EXP_DATEN_E|Expiration Date (YYYYMMDD) Equal To| |P_OPT_VOLUME_G|Volume Greater Than| |P_OPT_VOLUME_GE|Volume Greater Than or Equal To| |P_OPT_VOLUME_L|Volume Less Than| |P_OPT_VOLUME_LE|Volume Less Than or Equal To| |P_OPT_VOLUME_E|Volume Equal To| |P_OPT_OPTION_TYPE_E|Option Type (1&#x3D; Equity, 2&#x3D;Index)| |P_OPT_CALL_OR_PUT_E|Call or Put (0&#x3D;Call, 1&#x3D;Put)| 
     * @alias module:model/OptionScreeningRequest
     * @param ids {module:model/ExchangeScreeningId} 
     * @param conditionOne {module:model/OptionScreeningRequest.ConditionOneEnum} The primary condition.
     * @param conditionOneValue {String} 
     */
    constructor(ids, conditionOne, conditionOneValue) { 
        
        OptionScreeningRequest.initialize(this, ids, conditionOne, conditionOneValue);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, ids, conditionOne, conditionOneValue) { 
        obj['ids'] = ids;
        obj['conditionOne'] = conditionOne;
        obj['conditionOneValue'] = conditionOneValue;
    }

    /**
     * Constructs a <code>OptionScreeningRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/OptionScreeningRequest} obj Optional instance to populate.
     * @return {module:model/OptionScreeningRequest} The populated <code>OptionScreeningRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new OptionScreeningRequest();

            if (data.hasOwnProperty('ids')) {
                obj['ids'] = ExchangeScreeningId.constructFromObject(data['ids']);
            }
            if (data.hasOwnProperty('conditionOne')) {
                obj['conditionOne'] = ApiClient.convertToType(data['conditionOne'], 'String');
            }
            if (data.hasOwnProperty('conditionOneValue')) {
                obj['conditionOneValue'] = ApiClient.convertToType(data['conditionOneValue'], 'String');
            }
            if (data.hasOwnProperty('conditionTwo')) {
                obj['conditionTwo'] = ApiClient.convertToType(data['conditionTwo'], 'String');
            }
            if (data.hasOwnProperty('conditionTwoValue')) {
                obj['conditionTwoValue'] = ApiClient.convertToType(data['conditionTwoValue'], 'String');
            }
            if (data.hasOwnProperty('conditionThree')) {
                obj['conditionThree'] = ApiClient.convertToType(data['conditionThree'], 'String');
            }
            if (data.hasOwnProperty('conditionThreeValue')) {
                obj['conditionThreeValue'] = ApiClient.convertToType(data['conditionThreeValue'], 'String');
            }
            if (data.hasOwnProperty('date')) {
                obj['date'] = ApiClient.convertToType(data['date'], 'String');
            }
        }
        return obj;
    }


}

/**
 * @member {module:model/ExchangeScreeningId} ids
 */
OptionScreeningRequest.prototype['ids'] = undefined;

/**
 * The primary condition.
 * @member {module:model/OptionScreeningRequest.ConditionOneEnum} conditionOne
 */
OptionScreeningRequest.prototype['conditionOne'] = undefined;

/**
 * @member {String} conditionOneValue
 */
OptionScreeningRequest.prototype['conditionOneValue'] = undefined;

/**
 * @member {module:model/OptionScreeningRequest.ConditionTwoEnum} conditionTwo
 */
OptionScreeningRequest.prototype['conditionTwo'] = undefined;

/**
 * @member {String} conditionTwoValue
 */
OptionScreeningRequest.prototype['conditionTwoValue'] = undefined;

/**
 * @member {module:model/OptionScreeningRequest.ConditionThreeEnum} conditionThree
 */
OptionScreeningRequest.prototype['conditionThree'] = undefined;

/**
 * @member {String} conditionThreeValue
 */
OptionScreeningRequest.prototype['conditionThreeValue'] = undefined;

/**
 * @member {String} date
 */
OptionScreeningRequest.prototype['date'] = undefined;





/**
 * Allowed values for the <code>conditionOne</code> property.
 * @enum {String}
 * @readonly
 */
OptionScreeningRequest['ConditionOneEnum'] = {

    /**
     * value: "P_OPT_UNDERLYING_SECURITY_E"
     * @const
     */
    "UNDERLYING_SECURITY_E": "P_OPT_UNDERLYING_SECURITY_E",

    /**
     * value: "P_OPT_STRIKE_PRICE_E"
     * @const
     */
    "STRIKE_PRICE_E": "P_OPT_STRIKE_PRICE_E",

    /**
     * value: "P_OPT_EXP_DATEN_E"
     * @const
     */
    "EXP_DATEN_E": "P_OPT_EXP_DATEN_E",

    /**
     * value: "P_OPT_VOLUME_G"
     * @const
     */
    "VOLUME_G": "P_OPT_VOLUME_G",

    /**
     * value: "P_OPT_VOLUME_GE"
     * @const
     */
    "VOLUME_GE": "P_OPT_VOLUME_GE",

    /**
     * value: "P_OPT_VOLUME_L"
     * @const
     */
    "VOLUME_L": "P_OPT_VOLUME_L",

    /**
     * value: "P_OPT_VOLUME_LE"
     * @const
     */
    "VOLUME_LE": "P_OPT_VOLUME_LE",

    /**
     * value: "P_OPT_VOLUME_E"
     * @const
     */
    "VOLUME_E": "P_OPT_VOLUME_E",

    /**
     * value: "P_OPT_OPTION_TYPE_E"
     * @const
     */
    "OPTION_TYPE_E": "P_OPT_OPTION_TYPE_E",

    /**
     * value: "P_OPT_CALL_OR_PUT_E"
     * @const
     */
    "CALL_OR_PUT_E": "P_OPT_CALL_OR_PUT_E"
};


/**
 * Allowed values for the <code>conditionTwo</code> property.
 * @enum {String}
 * @readonly
 */
OptionScreeningRequest['ConditionTwoEnum'] = {

    /**
     * value: "P_OPT_UNDERLYING_SECURITY_E"
     * @const
     */
    "UNDERLYING_SECURITY_E": "P_OPT_UNDERLYING_SECURITY_E",

    /**
     * value: "P_OPT_STRIKE_PRICE_E"
     * @const
     */
    "STRIKE_PRICE_E": "P_OPT_STRIKE_PRICE_E",

    /**
     * value: "P_OPT_EXP_DATEN_E"
     * @const
     */
    "EXP_DATEN_E": "P_OPT_EXP_DATEN_E",

    /**
     * value: "P_OPT_VOLUME_G"
     * @const
     */
    "VOLUME_G": "P_OPT_VOLUME_G",

    /**
     * value: "P_OPT_VOLUME_GE"
     * @const
     */
    "VOLUME_GE": "P_OPT_VOLUME_GE",

    /**
     * value: "P_OPT_VOLUME_L"
     * @const
     */
    "VOLUME_L": "P_OPT_VOLUME_L",

    /**
     * value: "P_OPT_VOLUME_LE"
     * @const
     */
    "VOLUME_LE": "P_OPT_VOLUME_LE",

    /**
     * value: "P_OPT_VOLUME_E"
     * @const
     */
    "VOLUME_E": "P_OPT_VOLUME_E",

    /**
     * value: "P_OPT_OPTION_TYPE_E"
     * @const
     */
    "OPTION_TYPE_E": "P_OPT_OPTION_TYPE_E",

    /**
     * value: "P_OPT_CALL_OR_PUT_E"
     * @const
     */
    "CALL_OR_PUT_E": "P_OPT_CALL_OR_PUT_E"
};


/**
 * Allowed values for the <code>conditionThree</code> property.
 * @enum {String}
 * @readonly
 */
OptionScreeningRequest['ConditionThreeEnum'] = {

    /**
     * value: "P_OPT_UNDERLYING_SECURITY_E"
     * @const
     */
    "UNDERLYING_SECURITY_E": "P_OPT_UNDERLYING_SECURITY_E",

    /**
     * value: "P_OPT_STRIKE_PRICE_E"
     * @const
     */
    "STRIKE_PRICE_E": "P_OPT_STRIKE_PRICE_E",

    /**
     * value: "P_OPT_EXP_DATEN_E"
     * @const
     */
    "EXP_DATEN_E": "P_OPT_EXP_DATEN_E",

    /**
     * value: "P_OPT_VOLUME_G"
     * @const
     */
    "VOLUME_G": "P_OPT_VOLUME_G",

    /**
     * value: "P_OPT_VOLUME_GE"
     * @const
     */
    "VOLUME_GE": "P_OPT_VOLUME_GE",

    /**
     * value: "P_OPT_VOLUME_L"
     * @const
     */
    "VOLUME_L": "P_OPT_VOLUME_L",

    /**
     * value: "P_OPT_VOLUME_LE"
     * @const
     */
    "VOLUME_LE": "P_OPT_VOLUME_LE",

    /**
     * value: "P_OPT_VOLUME_E"
     * @const
     */
    "VOLUME_E": "P_OPT_VOLUME_E",

    /**
     * value: "P_OPT_OPTION_TYPE_E"
     * @const
     */
    "OPTION_TYPE_E": "P_OPT_OPTION_TYPE_E",

    /**
     * value: "P_OPT_CALL_OR_PUT_E"
     * @const
     */
    "CALL_OR_PUT_E": "P_OPT_CALL_OR_PUT_E"
};



export default OptionScreeningRequest;

