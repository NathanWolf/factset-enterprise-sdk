/**
 * Virtual Portfolio API For Digital Portals
 * The virtual portfolio enables the analysis of the current allocation, broken down by asset classes, currencies,  regions, sectors, style, capitalization, style, maturity, risk, and more.  Relative performance and monthly returns can be measured against benchmarks, using portfolio position transaction (buy/sell) data. Both the realized profit/loss (resulting from closed transactions) and the potential profit/loss (resulting from positions that have not been sold yet) can be queried.  Portfolio endpoints allow creation and managing a transaction-based portfolio. A transaction-based portfolio contains a gapless history of all transactions to be able to accurately reproduce the investment record of the portfolio.  An instrument added to a portfolio is called a position. Each position consists of multiple buy and sell events called transactions. Portfolios are limited to 100 positions and 1000 transactions; adding more will result in an error.  A transaction-based portfolio can consist of the following transactions:  * A buy transaction opens or adds to a position in the portfolio, decreasing the cash value by the purchase price at the same time. If there is not enough cash in the portfolio to cover the transaction, the cash value becomes negative. * A sell transaction decreases or closes a position in the portfolio, increasing the cash value by the sale price at the same time. A sell transaction can only be created if the number of shares of a given position exceeds the number being sold. * A cash transaction increases or decreases the cash position of the portfolio. A portfolio can have only one cash position. The cash position is tracked automatically as each buy or sell transaction implicitly affects it. The cash position can be negative as a buy transaction does not check whether enough cash is available. The cash position does not generate interest; its performance is always 0%.  The chosen prices and key figures in the endpoints are using the same quality, which is configurable per application. Possible values are delayed (DLY), best (BST), end-of-day (EOD) or realtime (RLT). The default value for the price quality is BST.  The portfolio endpoints use different methods to calculate key figures. All key figures except the risk in /portfolio/detail/list, /portfolio/get, and /portfolio/position/list are calculated on-the-fly with current prices. The risk key figures are calculated on-the-fly with current prices, but the result is cached for 24 hours. The key figures in /portfolio/evaluation/list are calculated on end-of-day basis.  The Virtual Portfolio API for Digital Portals is fully integrated with the corresponding Quotes API, allowing access to detailed price and performance information of instruments in a watchlist. This also supports basic security identifier cross-reference. To complement the Watchlist API and Virtual Portfolio API with direct access to price histories, please refer to the Time Series API for Digital Portals.
 *
 * The version of the OpenAPI document: 2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import InlineResponse20011Notation from './InlineResponse20011Notation';
import InlineResponse2009DataInstrument from './InlineResponse2009DataInstrument';

/**
 * The InlineResponse20011Data model module.
 * @module model/InlineResponse20011Data
 */
class InlineResponse20011Data {
    /**
     * Constructs a new <code>InlineResponse20011Data</code>.
     * @alias module:model/InlineResponse20011Data
     */
    constructor() { 
        
        InlineResponse20011Data.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>InlineResponse20011Data</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/InlineResponse20011Data} obj Optional instance to populate.
     * @return {module:model/InlineResponse20011Data} The populated <code>InlineResponse20011Data</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new InlineResponse20011Data();

            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('instrument')) {
                obj['instrument'] = InlineResponse2009DataInstrument.constructFromObject(data['instrument']);
            }
            if (data.hasOwnProperty('notation')) {
                obj['notation'] = InlineResponse20011Notation.constructFromObject(data['notation']);
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
            if (data.hasOwnProperty('time')) {
                obj['time'] = ApiClient.convertToType(data['time'], 'String');
            }
            if (data.hasOwnProperty('numberShares')) {
                obj['numberShares'] = ApiClient.convertToType(data['numberShares'], 'Number');
            }
            if (data.hasOwnProperty('price')) {
                obj['price'] = ApiClient.convertToType(data['price'], 'Number');
            }
            if (data.hasOwnProperty('charges')) {
                obj['charges'] = ApiClient.convertToType(data['charges'], 'Number');
            }
            if (data.hasOwnProperty('exchangeRate')) {
                obj['exchangeRate'] = ApiClient.convertToType(data['exchangeRate'], 'Number');
            }
        }
        return obj;
    }


}

/**
 * Identifier of transaction.
 * @member {String} id
 */
InlineResponse20011Data.prototype['id'] = undefined;

/**
 * @member {module:model/InlineResponse2009DataInstrument} instrument
 */
InlineResponse20011Data.prototype['instrument'] = undefined;

/**
 * @member {module:model/InlineResponse20011Notation} notation
 */
InlineResponse20011Data.prototype['notation'] = undefined;

/**
 * Type of transaction
 * @member {module:model/InlineResponse20011Data.TypeEnum} type
 */
InlineResponse20011Data.prototype['type'] = undefined;

/**
 * Date and time of the trade.
 * @member {String} time
 */
InlineResponse20011Data.prototype['time'] = undefined;

/**
 * Number of shares bought or sold.
 * @member {Number} numberShares
 */
InlineResponse20011Data.prototype['numberShares'] = undefined;

/**
 * Price the securities were purchased / sold for.
 * @member {Number} price
 */
InlineResponse20011Data.prototype['price'] = undefined;

/**
 * Charges accrued in portfolio's base currency.
 * @member {Number} charges
 */
InlineResponse20011Data.prototype['charges'] = undefined;

/**
 * The exchange rate between the notation's currency and the portfolio currency.
 * @member {Number} exchangeRate
 */
InlineResponse20011Data.prototype['exchangeRate'] = undefined;





/**
 * Allowed values for the <code>type</code> property.
 * @enum {String}
 * @readonly
 */
InlineResponse20011Data['TypeEnum'] = {

    /**
     * value: "buy"
     * @const
     */
    "buy": "buy",

    /**
     * value: "sell"
     * @const
     */
    "sell": "sell",

    /**
     * value: "cash"
     * @const
     */
    "cash": "cash",

    /**
     * value: "payout"
     * @const
     */
    "payout": "payout",

    /**
     * value: "short"
     * @const
     */
    "short": "short",

    /**
     * value: "cover"
     * @const
     */
    "cover": "cover"
};



export default InlineResponse20011Data;

