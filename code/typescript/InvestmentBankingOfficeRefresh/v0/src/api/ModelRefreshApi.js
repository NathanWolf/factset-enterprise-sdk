/**
 * Investment Banking Office Refresh API
 * Service for refreshing models with refreshable FactSet objects (e.g., =FDS codes)
 *
 * The version of the OpenAPI document: 0.1.0
 * Contact: api@factset.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Errors from '../model/Errors';
import JobStatus from '../model/JobStatus';

/**
* ModelRefresh service.
* @module api/ModelRefreshApi
*/
export default class ModelRefreshApi {

    /**
    * Constructs a new ModelRefreshApi. 
    * @alias module:api/ModelRefreshApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * Retrieve a calculated file by resource ID.
     * If the requested job is complete, the calculated file will be returned.
     * @param {String} id Resource ID
     * @param {Object} opts Optional parameters
     * @param {String} opts.outputFileName Optional name for returned output file as set in the Content-Disposition response header.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link File} and HTTP response
     */
    getFileByIdWithHttpInfo(id, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getFileById");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'outputFileName': opts['outputFileName']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = [];
      let accepts = ['application/vnd.openxmlformats-officedocument.spreadsheetml.sheet', 'application/json'];

      let returnType = GetFileByIdResponseWrapperTypeMap;
      
      return this.apiClient.callApi(
        '/refresh/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Retrieve a calculated file by resource ID.
     * If the requested job is complete, the calculated file will be returned.
     * @param {String} id Resource ID
     * @param {Object} opts Optional parameters
     * @param {String} opts.outputFileName Optional name for returned output file as set in the Content-Disposition response header.
     * @return { Promise.< GetFileByIdResponseWrapper > } a Promise, with data of type {@link GetFileByIdResponseWrapper }
     */
    getFileById(id, opts) {
      return this.getFileByIdWithHttpInfo(id, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get the status of the refresh job with the given resource ID
     * Check the status of the given job by ID
     * @param {String} id Resource ID
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/JobStatus} and HTTP response
     */
    getStatusByIdWithHttpInfo(id) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getStatusById");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];


      let returnType = JobStatus;

      return this.apiClient.callApi(
        '/refresh/{id}/status', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get the status of the refresh job with the given resource ID
     * Check the status of the given job by ID
     * @param {String} id Resource ID
     * @return { Promise.< module:model/JobStatus > } a Promise, with data of type {@link module:model/JobStatus }
     */
    getStatusById(id) {
      return this.getStatusByIdWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Upload a model
     * Upload a model (e.g., an Excel workbook in Open Office XML format) for FactSet to refresh.
     * @param {File} body 
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.nowHandlingEnabled Option to handle =NOW codes.
     * @param {Boolean} opts.refreshAutoFilters Option to refresh codes in autofilters.
     * @param {Boolean} opts.resizeArrays Option to resize arrays
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/JobStatus} and HTTP response
     */
    postWorkbookWithHttpInfo(body, opts) {
      opts = opts || {};
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling postWorkbook");
      }

      let pathParams = {
      };
      let queryParams = {
        'nowHandlingEnabled': opts['nowHandlingEnabled'],
        'refreshAutoFilters': opts['refreshAutoFilters'],
        'resizeArrays': opts['resizeArrays']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = ['application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'];
      let accepts = ['application/json'];


      let returnType = JobStatus;

      return this.apiClient.callApi(
        '/refresh', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Upload a model
     * Upload a model (e.g., an Excel workbook in Open Office XML format) for FactSet to refresh.
     * @param {File} body 
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.nowHandlingEnabled Option to handle =NOW codes.
     * @param {Boolean} opts.refreshAutoFilters Option to refresh codes in autofilters.
     * @param {Boolean} opts.resizeArrays Option to resize arrays
     * @return { Promise.< module:model/JobStatus > } a Promise, with data of type {@link module:model/JobStatus }
     */
    postWorkbook(body, opts) {
      return this.postWorkbookWithHttpInfo(body, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}


const GetFileByIdResponseWrapperTypeMap = {
  200: File,
  202: JobStatus,
  400: Errors,
  404: Errors,
  429: Errors,
  500: Errors,

  _createResponseWrapper(statusCode, response) {
    return new GetFileByIdResponseWrapper(statusCode, response);
  }
};



/**
 * Wrapper to support GET /refresh/{id} returning different types
 * per status code.
 *
 * <p>
 * Responses:
 * <ul>
 *   <li>200 : {@code File }<br>Expected response; body will contain calculated file</li>
 * 
 *   <li>202 : {@code JobStatus }<br>Accepted (resource not ready yet)</li>
 * </ul>
 *
 * </p>
 * Example:
 * <pre>{@code
 * const response = ...;
 * switch (response.statusCode) {
 *   case 200:
 *     File data200 = response.getResponse200();
 *     break;
 *   case 202:
 *     JobStatus data202 = response.getResponse202();
 *     break;
 *  }
 * }</pre>
 *
 * @alias module:GetFileByIdResponseWrapper
 * @class
 */
export class GetFileByIdResponseWrapper {

  /**
   * @param {number} statusCode
   * @param {*} response
   */
  constructor(statusCode, response) {
    /**
     * @type {number}
     */
    this.statusCode = statusCode;

    /**
     * @type {*}
     */
    this.response = response;
  }

  
  /**
   * @returns { File }
   */
  getResponse200() {
    if (this.statusCode !== 200) {
      throw new Error("Invalid response getter called. getResponse200 can't return a " + this.statusCode + " response");
    }

    return this.response;
  }
  
  /**
   * @returns { JobStatus }
   */
  getResponse202() {
    if (this.statusCode !== 202) {
      throw new Error("Invalid response getter called. getResponse202 can't return a " + this.statusCode + " response");
    }

    return this.response;
  }
  
}


