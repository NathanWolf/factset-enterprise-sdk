/**
 * Publisher API
 * Allow clients to fetch Publisher Analytics through APIs.
 *
 * The version of the OpenAPI document: 3
 * Contact: analytics.api.support@factset.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import CalculationStatusRoot from '../model/CalculationStatusRoot';
import ClientErrorResponse from '../model/ClientErrorResponse';
import ObjectRoot from '../model/ObjectRoot';
import PubCalculationParametersRoot from '../model/PubCalculationParametersRoot';

/**
* PubCalculations service.
* @module api/PubCalculationsApi
* @version 0.9.0
*/
export default class PubCalculationsApi {

    /**
    * Constructs a new PubCalculationsApi. 
    * @alias module:api/PubCalculationsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * Cancel Pub calculation by id
     * This is the endpoint to cancel a previously submitted calculation.
     * @param {String} id from url, provided from the location header in the Create and Run Pub calculation endpoint
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    cancelCalculationByIdWithHttpInfo(id) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling cancelCalculationById");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/analytics/engines/pub/v3/calculations/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Cancel Pub calculation by id
     * This is the endpoint to cancel a previously submitted calculation.
     * @param {String} id from url, provided from the location header in the Create and Run Pub calculation endpoint
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    cancelCalculationById(id) {
      return this.cancelCalculationByIdWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get Pub calculation parameters by id
     * This is the endpoint that returns the calculation parameters passed for a calculation.
     * @param {String} id from url, provided from the location header in the Create and Run Pub calculation endpoint
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/PubCalculationParametersRoot} and HTTP response
     */
    getCalculationParametersWithHttpInfo(id) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getCalculationParameters");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PubCalculationParametersRoot;
      return this.apiClient.callApi(
        '/analytics/engines/pub/v3/calculations/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get Pub calculation parameters by id
     * This is the endpoint that returns the calculation parameters passed for a calculation.
     * @param {String} id from url, provided from the location header in the Create and Run Pub calculation endpoint
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/PubCalculationParametersRoot}
     */
    getCalculationParameters(id) {
      return this.getCalculationParametersWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get Pub calculation status by id
     * This is the endpoint to check on the progress of a previously requested calculation.  If the calculation has finished computing, the result field in the response body will point to the result url.  Otherwise, the calculation is still running and the X-FactSet-Api-PickUp-Progress header will contain a progress percentage.
     * @param {String} id from url, provided from the location header in the Create and Run Pub calculation endpoint
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CalculationStatusRoot} and HTTP response
     */
    getCalculationStatusByIdWithHttpInfo(id) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getCalculationStatusById");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CalculationStatusRoot;
      return this.apiClient.callApi(
        '/analytics/engines/pub/v3/calculations/{id}/status', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get Pub calculation status by id
     * This is the endpoint to check on the progress of a previously requested calculation.  If the calculation has finished computing, the result field in the response body will point to the result url.  Otherwise, the calculation is still running and the X-FactSet-Api-PickUp-Progress header will contain a progress percentage.
     * @param {String} id from url, provided from the location header in the Create and Run Pub calculation endpoint
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CalculationStatusRoot}
     */
    getCalculationStatusById(id) {
      return this.getCalculationStatusByIdWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get Pub calculation result by id
     * This is the endpoint to get the result of a previously requested calculation.  If the calculation has finished computing, the body of the response will contain the requested document in the specified format.
     * @param {String} id from url, provided from the location header in the Get Pub calculation status by id endpoint
     * @param {String} unitId from url, provided from the location header in the Get Pub calculation status by id endpoint
     * @param {Object} opts Optional parameters
     * @param {String} opts.accept Standard HTTP header. Value can be gzip, compress, deflate, br, identity and/or *
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ObjectRoot} and HTTP response
     */
    getCalculationUnitResultByIdWithHttpInfo(id, unitId, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getCalculationUnitResultById");
      }
      // verify the required parameter 'unitId' is set
      if (unitId === undefined || unitId === null) {
        throw new Error("Missing the required parameter 'unitId' when calling getCalculationUnitResultById");
      }

      let pathParams = {
        'id': id,
        'unitId': unitId
      };
      let queryParams = {
      };
      let headerParams = {
        'Accept': opts['accept']
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/x-protobuf', 'application/pdf'];
      let returnType = ObjectRoot;
      return this.apiClient.callApi(
        '/analytics/engines/pub/v3/calculations/{id}/units/{unitId}/result', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get Pub calculation result by id
     * This is the endpoint to get the result of a previously requested calculation.  If the calculation has finished computing, the body of the response will contain the requested document in the specified format.
     * @param {String} id from url, provided from the location header in the Get Pub calculation status by id endpoint
     * @param {String} unitId from url, provided from the location header in the Get Pub calculation status by id endpoint
     * @param {Object} opts Optional parameters
     * @param {String} opts.accept Standard HTTP header. Value can be gzip, compress, deflate, br, identity and/or *
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ObjectRoot}
     */
    getCalculationUnitResultById(id, unitId, opts) {
      return this.getCalculationUnitResultByIdWithHttpInfo(id, unitId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Create and Run Pub calculation
     * This endpoint runs the Pub calculation specified in the POST body parameters.  It can take one or more units as input.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.xFactSetApiLongRunningDeadline Long running deadline in seconds when only one unit is passed in the POST body.
     * @param {String} opts.cacheControl Standard HTTP header.  Accepts no-cache, no-store, max-age, max-stale.
     * @param {module:model/PubCalculationParametersRoot} opts.pubCalculationParametersRoot Calculation Parameters
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CalculationStatusRoot} and HTTP response
     */
    postAndCalculateWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = opts['pubCalculationParametersRoot'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-FactSet-Api-Long-Running-Deadline': opts['xFactSetApiLongRunningDeadline'],
        'Cache-Control': opts['cacheControl']
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/pdf', 'application/vnd.openxmlformats-officedocument.presentationml.presentation'];
      let returnType = CalculationStatusRoot;
      return this.apiClient.callApi(
        '/analytics/engines/pub/v3/calculations', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Create and Run Pub calculation
     * This endpoint runs the Pub calculation specified in the POST body parameters.  It can take one or more units as input.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.xFactSetApiLongRunningDeadline Long running deadline in seconds when only one unit is passed in the POST body.
     * @param {String} opts.cacheControl Standard HTTP header.  Accepts no-cache, no-store, max-age, max-stale.
     * @param {module:model/PubCalculationParametersRoot} opts.pubCalculationParametersRoot Calculation Parameters
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CalculationStatusRoot}
     */
    postAndCalculate(opts) {
      return this.postAndCalculateWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Create or Update Pub calculation and run it.
     * This endpoint updates and run the Pub calculation specified in the PUT body parameters. This also allows creating new Pub calculations with custom ids.  It can take one or more units as input.    Remarks:    *   Start and and end date must be within the configuration's min and max date range
     * @param {String} id from url, provided from the location header in the Create and Run Pub calculation endpoint
     * @param {Object} opts Optional parameters
     * @param {Number} opts.xFactSetApiLongRunningDeadline Long running deadline in seconds when only one unit is passed in the PUT body.
     * @param {String} opts.cacheControl Standard HTTP header.  Accepts no-cache, no-store, max-age, max-stale.
     * @param {module:model/PubCalculationParametersRoot} opts.pubCalculationParametersRoot Calculation Parameters
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CalculationStatusRoot} and HTTP response
     */
    putAndCalculateWithHttpInfo(id, opts) {
      opts = opts || {};
      let postBody = opts['pubCalculationParametersRoot'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling putAndCalculate");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
        'X-FactSet-Api-Long-Running-Deadline': opts['xFactSetApiLongRunningDeadline'],
        'Cache-Control': opts['cacheControl']
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/pdf'];
      let returnType = CalculationStatusRoot;
      return this.apiClient.callApi(
        '/analytics/engines/pub/v3/calculations/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Create or Update Pub calculation and run it.
     * This endpoint updates and run the Pub calculation specified in the PUT body parameters. This also allows creating new Pub calculations with custom ids.  It can take one or more units as input.    Remarks:    *   Start and and end date must be within the configuration's min and max date range
     * @param {String} id from url, provided from the location header in the Create and Run Pub calculation endpoint
     * @param {Object} opts Optional parameters
     * @param {Number} opts.xFactSetApiLongRunningDeadline Long running deadline in seconds when only one unit is passed in the PUT body.
     * @param {String} opts.cacheControl Standard HTTP header.  Accepts no-cache, no-store, max-age, max-stale.
     * @param {module:model/PubCalculationParametersRoot} opts.pubCalculationParametersRoot Calculation Parameters
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CalculationStatusRoot}
     */
    putAndCalculate(id, opts) {
      return this.putAndCalculateWithHttpInfo(id, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
