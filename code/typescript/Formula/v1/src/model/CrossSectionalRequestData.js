/**
 * FactSet Formula API
 *  **FactSet Formula API**  FactSet’s Formula API is a modern, flexible, formula-based API that enables users to access FactSet’s wide range of financial data and content. The API offers two endpoints, one optimized for time-series analysis and one designed for cross-sectional analysis, providing users a simplified interface into FactSet’s expansive offering. By providing two endpoints, it allows for the optimization of user workflows, while reducing complexity.  Leverage the power and flexibility of the Formula API to -   * Pull data from across most content sets that a user has access to in a single request   * Include business logic and mathematical operations in request   * Submit a dynamic universe in both endpoints   * Return the fsymId to easily combine with other FactSet content / products   * Set the trading calendar   * Define custom display names  **Formula API Request Builder**  The Formula API Request Builder provides users everything they need to form a Formula API request. In the Request Builder, you can select identifiers, build a universe expression, select FQL or Screening formulas, easily apply business logic and mathematical functions to the FQL or Screening formulas, specify optional parameters, and construct a GET or POST request. The Request Builder eliminates the need to have previous FQL and Screening knowledge and allows you to quickly find your desired data items and form the request.  The Formula API Request Builder can be accessed by navigating to [https://developer.factset.com/formula-api-request-builder](https://developer.factset.com/formula-api-request-builder) and logging in using your FactSet.net ID. When using the Request Builder to construct requests for the one of the Formula API's endpoints, be sure to toggle to the correct endpoint at the top of the page.  **How to Check the Health and Availability of the Formula API**  Please use the below endpoint to check the health and availability of the Formula API. You must be authorized for this API to use the Health endpoint.  [https://api.factset.com/formula-api/health](https://api.factset.com/formula-api/health)  **How to Programmatically Download API Specification File**  Please use the below endpoint to download the FactSet Formula API Specification File in .yaml. You must be authorized for this API to extract. This specification can then be used for Codegen to create your own SDKs. You can also download the spec using the \"Download Spec\" button to the right of the version number.  [https://api.factset.com/formula-api/v1/spec](https://api.factset.com/formula-api/v1/spec) 
 *
 * The version of the OpenAPI document: 1.2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The CrossSectionalRequestData model module.
 * @module model/CrossSectionalRequestData
 * @version 0.20.0
 */
class CrossSectionalRequestData {
    /**
     * Constructs a new <code>CrossSectionalRequestData</code>.
     * @alias module:model/CrossSectionalRequestData
     * @param formulas {Array.<String>} Array of Screening formulas
     */
    constructor(formulas) { 
        
        CrossSectionalRequestData.initialize(this, formulas);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, formulas) { 
        obj['formulas'] = formulas;
    }

    /**
     * Constructs a <code>CrossSectionalRequestData</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CrossSectionalRequestData} obj Optional instance to populate.
     * @return {module:model/CrossSectionalRequestData} The populated <code>CrossSectionalRequestData</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CrossSectionalRequestData();

            if (data.hasOwnProperty('ids')) {
                obj['ids'] = ApiClient.convertToType(data['ids'], ['String']);
            }
            if (data.hasOwnProperty('universe')) {
                obj['universe'] = ApiClient.convertToType(data['universe'], 'String');
            }
            if (data.hasOwnProperty('universeType')) {
                obj['universeType'] = ApiClient.convertToType(data['universeType'], 'String');
            }
            if (data.hasOwnProperty('formulas')) {
                obj['formulas'] = ApiClient.convertToType(data['formulas'], ['String']);
            }
            if (data.hasOwnProperty('backTestDate')) {
                obj['backTestDate'] = ApiClient.convertToType(data['backTestDate'], 'String');
            }
            if (data.hasOwnProperty('calendar')) {
                obj['calendar'] = ApiClient.convertToType(data['calendar'], 'String');
            }
            if (data.hasOwnProperty('fsymId')) {
                obj['fsymId'] = ApiClient.convertToType(data['fsymId'], 'String');
            }
            if (data.hasOwnProperty('displayName')) {
                obj['displayName'] = ApiClient.convertToType(data['displayName'], ['String']);
            }
            if (data.hasOwnProperty('flatten')) {
                obj['flatten'] = ApiClient.convertToType(data['flatten'], 'String');
            }
            if (data.hasOwnProperty('batch')) {
                obj['batch'] = ApiClient.convertToType(data['batch'], 'String');
            }
        }
        return obj;
    }


}

/**
 * Array of entity identifiers.  The `ids` and `universe` parameters provide two different ways to specify the identifiers for which you want data retrieved. Please enter either the `ids` or `universe` parameter. 
 * @member {Array.<String>} ids
 */
CrossSectionalRequestData.prototype['ids'] = undefined;

/**
 * Screening expression to limit the universe  Please enter either the `ids` or `universe` parameter. 
 * @member {String} universe
 */
CrossSectionalRequestData.prototype['universe'] = undefined;

/**
 * Specify the universe type to calculate the `universe` in.  Find documentation below on how to build a screen for each universe type -   * Equity Screen - [Online Assistant Page 20606](https://my.apps.factset.com/oa/pages/20606)    * Debt Screen - [Online Assistant Page 20888](https://my.apps.factset.com/oa/pages/20888)    * Fund Screen - [Online Assistant Page 21384](https://my.apps.factset.com/oa/pages/21384) 
 * @member {module:model/CrossSectionalRequestData.UniverseTypeEnum} universeType
 * @default 'EQUITY'
 */
CrossSectionalRequestData.prototype['universeType'] = 'EQUITY';

/**
 * Array of Screening formulas
 * @member {Array.<String>} formulas
 */
CrossSectionalRequestData.prototype['formulas'] = undefined;

/**
 * Specify the backtest date either in **YYYY-MM-DD**, **YYYYMMDD** or **MM/DD/YYYY** format.  To learn more about backtesting, please visit [Online Assistant Page 20610](https://my.apps.factset.com/oa/pages/20610#backtest). User must have access to backtesting functionality. 
 * @member {String} backTestDate
 */
CrossSectionalRequestData.prototype['backTestDate'] = undefined;

/**
 * Calendar of data returned.
 * @member {String} calendar
 * @default 'FIVEDAY'
 */
CrossSectionalRequestData.prototype['calendar'] = 'FIVEDAY';

/**
 * Specify **Y** for `fsymId` to return an additional response object for the data item fsymId which will contain the fsymIds of the requestIds, in addition to the response object containing the data item requestId. The default value for `fsymId` is **N**.  The **fsymId** field returned is the FactSet Default Permanent Identifier for the `requestId`. For all supported `requestId` symbol types, the `fsymId` parameter will return the Regional Level PermId '-R' which identifies the security’s best regional security data series per currency. Currently, the fsymId parameter only supports equities. Accepted `requestId` symbol types include all FactSet Permanent Identifiers types, CUSIP, SEDOL, ISIN, and Tickers. Further documentation can be found at this [Online Assistant attachment](https://oa.apps.factset.com/cms/oaAttachment/64c3213a-f415-4c27-a336-92c73a72deed/24881). 
 * @member {module:model/CrossSectionalRequestData.FsymIdEnum} fsymId
 * @default 'N'
 */
CrossSectionalRequestData.prototype['fsymId'] = 'N';

/**
 * Define display names for the formulas inputted. Enter the list of display names in the same order as the formulas inputted. An additional field **displayName** will be returned in the data object for a formula.  If the number of display names does not match the number of formulas provided, an error will be returned.  To define the display name for a subset of the formulas, leave a blank in the position of the formula that won't be renamed. For example - If three formulas are inputted, to define display names only for the first and third formula, enter *displayName=FORMULA_1,,FORMULA_3*. The **displayName** field will still be included in that formula, but will contain the formula as inputted. 
 * @member {Array.<String>} displayName
 */
CrossSectionalRequestData.prototype['displayName'] = undefined;

/**
 * Specify **Y** for `flatten` to return a flat, table-like JSON response model instead of the standard nested JSON response model. This option is provided for easier data processing and visualization. The default value for `flatten` is **N**.  See the **Cross-Sectional Result Object Flattened** schema for more detail on the response structure for flattened output. 
 * @member {module:model/CrossSectionalRequestData.FlattenEnum} flatten
 * @default 'N'
 */
CrossSectionalRequestData.prototype['flatten'] = 'N';

/**
 * Enables the ability to asynchronously \"batch\" the request, supporting a long-running request up to 10 minutes. Upon requesting \"batch\": \"Y\", the service will respond back with an HTTP Status Code of 202.  A user is limited to running 5 Batch Requests in a 10 minute period.  *This feature is available to Individual Users subscribed to the Performance Package and Performance Package Plus Performance Tiers and all Production Users. If you are unsure which Performance Tier you are subscribed to or you would like to gain access to the batch capabilities, please contact your FactSet Account Team or \"Report Issue\" above and our support teams can assist.*  Once a batch request is submitted, use `/batch-status` to see if the job has completed. Once completed, retrieve the results of the request via `/batch-result`. See the endpoints listed under *Batch Processing* for more information. 
 * @member {module:model/CrossSectionalRequestData.BatchEnum} batch
 * @default 'N'
 */
CrossSectionalRequestData.prototype['batch'] = 'N';





/**
 * Allowed values for the <code>universeType</code> property.
 * @enum {String}
 * @readonly
 */
CrossSectionalRequestData['UniverseTypeEnum'] = {

    /**
     * value: "EQUITY"
     * @const
     */
    "EQUITY": "EQUITY",

    /**
     * value: "DEBT"
     * @const
     */
    "DEBT": "DEBT",

    /**
     * value: "FUND"
     * @const
     */
    "FUND": "FUND"
};


/**
 * Allowed values for the <code>fsymId</code> property.
 * @enum {String}
 * @readonly
 */
CrossSectionalRequestData['FsymIdEnum'] = {

    /**
     * value: "Y"
     * @const
     */
    "Y": "Y",

    /**
     * value: "N"
     * @const
     */
    "N": "N"
};


/**
 * Allowed values for the <code>flatten</code> property.
 * @enum {String}
 * @readonly
 */
CrossSectionalRequestData['FlattenEnum'] = {

    /**
     * value: "Y"
     * @const
     */
    "Y": "Y",

    /**
     * value: "N"
     * @const
     */
    "N": "N"
};


/**
 * Allowed values for the <code>batch</code> property.
 * @enum {String}
 * @readonly
 */
CrossSectionalRequestData['BatchEnum'] = {

    /**
     * value: "Y"
     * @const
     */
    "Y": "Y",

    /**
     * value: "N"
     * @const
     */
    "N": "N"
};



export default CrossSectionalRequestData;

