/**
 * FI API
 * Allow clients to fetch Analytics through APIs.
 *
 * The version of the OpenAPI document: v3
 * Contact: analytics.api.support@factset.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import CalculationInfoRoot from '../model/CalculationInfoRoot';
import ClientErrorResponse from '../model/ClientErrorResponse';
import FICalculationParametersRoot from '../model/FICalculationParametersRoot';
import ObjectRoot from '../model/ObjectRoot';

/**
* FICalculations service.
* @module api/FICalculationsApi
* @version 0.9.0
*/
export default class FICalculationsApi {

    /**
    * Constructs a new FICalculationsApi. 
    * @alias module:api/FICalculationsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * Cancel FI calculation by id
     * This is the endpoint to cancel a previously submitted calculation.
     * @param {String} id from url, provided from the location header in the Create and Run FI calculation endpoint
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    cancelCalculationByIdWithHttpInfo(id) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling cancelCalculationById");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/analytics/engines/fi/v3/calculations/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Cancel FI calculation by id
     * This is the endpoint to cancel a previously submitted calculation.
     * @param {String} id from url, provided from the location header in the Create and Run FI calculation endpoint
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    cancelCalculationById(id) {
      return this.cancelCalculationByIdWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get FI calculation parameters by id
     * This is the endpoint that returns the calculation parameters passed for a calculation.
     * @param {String} id from url, provided from the location header in the Create and Run FI calculation endpoint
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/FICalculationParametersRoot} and HTTP response
     */
    getCalculationParametersWithHttpInfo(id) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getCalculationParameters");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = FICalculationParametersRoot;
      return this.apiClient.callApi(
        '/analytics/engines/fi/v3/calculations/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get FI calculation parameters by id
     * This is the endpoint that returns the calculation parameters passed for a calculation.
     * @param {String} id from url, provided from the location header in the Create and Run FI calculation endpoint
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/FICalculationParametersRoot}
     */
    getCalculationParameters(id) {
      return this.getCalculationParametersWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get FI calculation result by id
     * This is the endpoint to get the result of a previously requested calculation.  If the calculation has finished computing, the body of the response will contain the requested document in JSON.
     * @param {String} id from url, provided from the location header in the Get FI calculation status by id endpoint
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ObjectRoot} and HTTP response
     */
    getCalculationResultWithHttpInfo(id) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getCalculationResult");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/x-protobuf'];
      let returnType = ObjectRoot;
      return this.apiClient.callApi(
        '/analytics/engines/fi/v3/calculations/{id}/result', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get FI calculation result by id
     * This is the endpoint to get the result of a previously requested calculation.  If the calculation has finished computing, the body of the response will contain the requested document in JSON.
     * @param {String} id from url, provided from the location header in the Get FI calculation status by id endpoint
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ObjectRoot}
     */
    getCalculationResult(id) {
      return this.getCalculationResultWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get FI calculation status by id
     * This is the endpoint to check on the progress of a previously requested calculation.  If the calculation has finished computing, the body of the response will contain the requested document in JSON.  Otherwise, the calculation is still running and the X-FactSet-Api-PickUp-Progress header will contain a progress percentage.
     * @param {String} id from url, provided from the location header in the Create and Run FI calculation endpoint
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ObjectRoot} and HTTP response
     */
    getCalculationStatusByIdWithHttpInfo(id) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getCalculationStatusById");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/x-protobuf'];
      let returnType = ObjectRoot;
      return this.apiClient.callApi(
        '/analytics/engines/fi/v3/calculations/{id}/status', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get FI calculation status by id
     * This is the endpoint to check on the progress of a previously requested calculation.  If the calculation has finished computing, the body of the response will contain the requested document in JSON.  Otherwise, the calculation is still running and the X-FactSet-Api-PickUp-Progress header will contain a progress percentage.
     * @param {String} id from url, provided from the location header in the Create and Run FI calculation endpoint
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ObjectRoot}
     */
    getCalculationStatusById(id) {
      return this.getCalculationStatusByIdWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Create and Run FI calculation
     * This endpoint creates and runs a new FI calculation specified in the post body.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.xFactSetApiLongRunningDeadline Long running deadline in seconds.
     * @param {String} opts.cacheControl Standard HTTP header.  Accepts max-stale.
     * @param {module:model/FICalculationParametersRoot} opts.fICalculationParametersRoot Calculation Parameters
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ObjectRoot} and HTTP response
     */
    postAndCalculateWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = opts['fICalculationParametersRoot'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-FactSet-Api-Long-Running-Deadline': opts['xFactSetApiLongRunningDeadline'],
        'Cache-Control': opts['cacheControl']
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json', 'application/x-protobuf'];
      let returnType = ObjectRoot;
      return this.apiClient.callApi(
        '/analytics/engines/fi/v3/calculations', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Create and Run FI calculation
     * This endpoint creates and runs a new FI calculation specified in the post body.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.xFactSetApiLongRunningDeadline Long running deadline in seconds.
     * @param {String} opts.cacheControl Standard HTTP header.  Accepts max-stale.
     * @param {module:model/FICalculationParametersRoot} opts.fICalculationParametersRoot Calculation Parameters
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ObjectRoot}
     */
    postAndCalculate(opts) {
      return this.postAndCalculateWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Create or Update FI calculation and run it.
     * This endpoint updates and run the FI optimization specified in the PUT body parameters. It also allows the creation of new FI optimization with custom id.
     * @param {String} id from url, provided from the location header in the Create and Run FI calculation endpoint
     * @param {Object} opts Optional parameters
     * @param {Number} opts.xFactSetApiLongRunningDeadline Long running deadline in seconds.
     * @param {String} opts.cacheControl Standard HTTP header.  Accepts max-stale.
     * @param {module:model/FICalculationParametersRoot} opts.fICalculationParametersRoot Calculation Parameters
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ObjectRoot} and HTTP response
     */
    putAndCalculateWithHttpInfo(id, opts) {
      opts = opts || {};
      let postBody = opts['fICalculationParametersRoot'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling putAndCalculate");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
        'X-FactSet-Api-Long-Running-Deadline': opts['xFactSetApiLongRunningDeadline'],
        'Cache-Control': opts['cacheControl']
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json', 'application/x-protobuf'];
      let returnType = ObjectRoot;
      return this.apiClient.callApi(
        '/analytics/engines/fi/v3/calculations/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Create or Update FI calculation and run it.
     * This endpoint updates and run the FI optimization specified in the PUT body parameters. It also allows the creation of new FI optimization with custom id.
     * @param {String} id from url, provided from the location header in the Create and Run FI calculation endpoint
     * @param {Object} opts Optional parameters
     * @param {Number} opts.xFactSetApiLongRunningDeadline Long running deadline in seconds.
     * @param {String} opts.cacheControl Standard HTTP header.  Accepts max-stale.
     * @param {module:model/FICalculationParametersRoot} opts.fICalculationParametersRoot Calculation Parameters
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ObjectRoot}
     */
    putAndCalculate(id, opts) {
      return this.putAndCalculateWithHttpInfo(id, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
