/**
 * FI API
 * Allow clients to fetch Analytics through APIs.
 *
 * The version of the OpenAPI document: v3
 * Contact: analytics.api.support@factset.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from './ApiClient';
import CalculationInfo from './model/CalculationInfo';
import CalculationInfoRoot from './model/CalculationInfoRoot';
import CalculationMeta from './model/CalculationMeta';
import ClientErrorResponse from './model/ClientErrorResponse';
import Error from './model/Error';
import ErrorSource from './model/ErrorSource';
import FICalculationParameters from './model/FICalculationParameters';
import FICalculationParametersRoot from './model/FICalculationParametersRoot';
import FIJobSettings from './model/FIJobSettings';
import FISecurity from './model/FISecurity';
import ObjectRoot from './model/ObjectRoot';
import FICalculationsApi from './api/FICalculationsApi';


/**
* Fixed Income Calculation client library for JavaScript.<br>
* The <code>index</code> module provides access to constructors for all the classes which comprise the public API.
* <p>
* An AMD (recommended!) or CommonJS application will generally do something equivalent to the following:
* <pre>
* var fixedincomecalculation = require('index'); // See note below*.
* var xxxSvc = new fixedincomecalculation.XxxApi(); // Allocate the API class we're going to use.
* var yyyModel = new fixedincomecalculation.Yyy(); // Construct a model instance.
* yyyModel.someProperty = 'someValue';
* ...
* var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.
* ...
* </pre>
* <em>*NOTE: For a top-level AMD script, use require(['index'], function(){...})
* and put the application logic within the callback function.</em>
* </p>
* <p>
* A non-AMD browser application (discouraged) might do something like this:
* <pre>
* var xxxSvc = new fixedincomecalculation.XxxApi(); // Allocate the API class we're going to use.
* var yyy = new fixedincomecalculation.Yyy(); // Construct a model instance.
* yyyModel.someProperty = 'someValue';
* ...
* var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.
* ...
* </pre>
* </p>
* @module index
* @version 0.9.1
*/
export {
    /**
     * The ApiClient constructor.
     * @property {module:ApiClient}
     */
    ApiClient,

    /**
     * The CalculationInfo model constructor.
     * @property {module:model/CalculationInfo}
     */
    CalculationInfo,

    /**
     * The CalculationInfoRoot model constructor.
     * @property {module:model/CalculationInfoRoot}
     */
    CalculationInfoRoot,

    /**
     * The CalculationMeta model constructor.
     * @property {module:model/CalculationMeta}
     */
    CalculationMeta,

    /**
     * The ClientErrorResponse model constructor.
     * @property {module:model/ClientErrorResponse}
     */
    ClientErrorResponse,

    /**
     * The Error model constructor.
     * @property {module:model/Error}
     */
    Error,

    /**
     * The ErrorSource model constructor.
     * @property {module:model/ErrorSource}
     */
    ErrorSource,

    /**
     * The FICalculationParameters model constructor.
     * @property {module:model/FICalculationParameters}
     */
    FICalculationParameters,

    /**
     * The FICalculationParametersRoot model constructor.
     * @property {module:model/FICalculationParametersRoot}
     */
    FICalculationParametersRoot,

    /**
     * The FIJobSettings model constructor.
     * @property {module:model/FIJobSettings}
     */
    FIJobSettings,

    /**
     * The FISecurity model constructor.
     * @property {module:model/FISecurity}
     */
    FISecurity,

    /**
     * The ObjectRoot model constructor.
     * @property {module:model/ObjectRoot}
     */
    ObjectRoot,

    /**
    * The FICalculationsApi service constructor.
    * @property {module:api/FICalculationsApi}
    */
    FICalculationsApi
};
