/**
 * NER API
 * Extract named entities and their FactSet entity IDs from given document text.
 *
 * The version of the OpenAPI document: 1.5.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Input model module.
 * @module model/Input
 * @version 0.8.0
 */
class Input {
    /**
     * Constructs a new <code>Input</code>.
     * @alias module:model/Input
     * @param text {String} Input-text (plain text (preferred) or HTML-formatted) of document to extract named-entities from.
     */
    constructor(text) { 
        
        Input.initialize(this, text);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, text) { 
        obj['text'] = text;
    }

    /**
     * Constructs a <code>Input</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Input} obj Optional instance to populate.
     * @return {module:model/Input} The populated <code>Input</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Input();

            if (data.hasOwnProperty('text')) {
                obj['text'] = ApiClient.convertToType(data['text'], 'String');
            }
            if (data.hasOwnProperty('characterOffset')) {
                obj['characterOffset'] = ApiClient.convertToType(data['characterOffset'], 'Number');
            }
            if (data.hasOwnProperty('idType')) {
                obj['idType'] = ApiClient.convertToType(data['idType'], 'String');
            }
            if (data.hasOwnProperty('filterTagsWithoutId')) {
                obj['filterTagsWithoutId'] = ApiClient.convertToType(data['filterTagsWithoutId'], 'Boolean');
            }
        }
        return obj;
    }


}

/**
 * Input-text (plain text (preferred) or HTML-formatted) of document to extract named-entities from.
 * @member {String} text
 */
Input.prototype['text'] = undefined;

/**
 * Offset to add to the returned named entity positions; useful if the given text input is not from the beginning of the original document.
 * @member {Number} characterOffset
 */
Input.prototype['characterOffset'] = undefined;

/**
 * Format of the Ids to return for the extracted named entities.
 * @member {module:model/Input.IdTypeEnum} idType
 * @default 'iconum'
 */
Input.prototype['idType'] = 'iconum';

/**
 * Boolean flag, set True [False] to [not] drop named entities for which a matching Id could not be found.
 * @member {Boolean} filterTagsWithoutId
 * @default true
 */
Input.prototype['filterTagsWithoutId'] = true;





/**
 * Allowed values for the <code>idType</code> property.
 * @enum {String}
 * @readonly
 */
Input['IdTypeEnum'] = {

    /**
     * value: "iconum"
     * @const
     */
    "iconum": "iconum",

    /**
     * value: "entityId"
     * @const
     */
    "entityId": "entityId"
};



export default Input;

