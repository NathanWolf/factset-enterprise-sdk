/**
 * NER API
 * Extract named entities and their FactSet entity IDs from given document text.
 *
 * The version of the OpenAPI document: 1.5.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Tag model module.
 * @module model/Tag
 * @version 0.8.2
 */
class Tag {
    /**
     * Constructs a new <code>Tag</code>.
     * @alias module:model/Tag
     */
    constructor() { 
        
        Tag.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Tag</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Tag} obj Optional instance to populate.
     * @return {module:model/Tag} The populated <code>Tag</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Tag();

            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
            if (data.hasOwnProperty('subType')) {
                obj['subType'] = ApiClient.convertToType(data['subType'], 'String');
            }
            if (data.hasOwnProperty('text')) {
                obj['text'] = ApiClient.convertToType(data['text'], 'String');
            }
            if (data.hasOwnProperty('score')) {
                obj['score'] = ApiClient.convertToType(data['score'], 'Number');
            }
            if (data.hasOwnProperty('startChar')) {
                obj['startChar'] = ApiClient.convertToType(data['startChar'], 'Number');
            }
            if (data.hasOwnProperty('endChar')) {
                obj['endChar'] = ApiClient.convertToType(data['endChar'], 'Number');
            }
            if (data.hasOwnProperty('lookupText')) {
                obj['lookupText'] = ApiClient.convertToType(data['lookupText'], 'String');
            }
            if (data.hasOwnProperty('neId')) {
                obj['neId'] = ApiClient.convertToType(data['neId'], 'String');
            }
        }
        return obj;
    }


}

/**
 * Type of the extracted named-entity (NE).
 * @member {module:model/Tag.TypeEnum} type
 */
Tag.prototype['type'] = undefined;

/**
 * More specific sub-type (e.g., NE_COUNTRY) of the named-entity (if applicable).
 * @member {module:model/Tag.SubTypeEnum} subType
 */
Tag.prototype['subType'] = undefined;

/**
 * Text for the named-entity (NE), as extracted from the given document.
 * @member {String} text
 */
Tag.prototype['text'] = undefined;

/**
 * @member {Number} score
 */
Tag.prototype['score'] = undefined;

/**
 * Starting character position of the named-entity text (relative to any offset provided (default offset=0)).
 * @member {Number} startChar
 */
Tag.prototype['startChar'] = undefined;

/**
 * Ending character position of the named-entity text (relative to any offset provided (default offset=0))
 * @member {Number} endChar
 */
Tag.prototype['endChar'] = undefined;

/**
 * Best-matching (FactSet) looked-up name for the extracted named-entity.
 * @member {String} lookupText
 */
Tag.prototype['lookupText'] = undefined;

/**
 * Best-matching (FactSet) entity-id for the extracted named-entity
 * @member {String} neId
 */
Tag.prototype['neId'] = undefined;





/**
 * Allowed values for the <code>type</code> property.
 * @enum {String}
 * @readonly
 */
Tag['TypeEnum'] = {

    /**
     * value: "NE_GPE"
     * @const
     */
    "GPE": "NE_GPE",

    /**
     * value: "NE_ORG"
     * @const
     */
    "ORG": "NE_ORG",

    /**
     * value: "NE_PERSON"
     * @const
     */
    "PERSON": "NE_PERSON",

    /**
     * value: "NE_PHARMACEUTICAL"
     * @const
     */
    "PHARMACEUTICAL": "NE_PHARMACEUTICAL",

    /**
     * value: "NE_DATETIME"
     * @const
     */
    "DATETIME": "NE_DATETIME",

    /**
     * value: "NE_NUMBER"
     * @const
     */
    "NUMBER": "NE_NUMBER",

    /**
     * value: "NE_MONEY"
     * @const
     */
    "MONEY": "NE_MONEY"
};


/**
 * Allowed values for the <code>subType</code> property.
 * @enum {String}
 * @readonly
 */
Tag['SubTypeEnum'] = {

    /**
     * value: "NE_GENERIC_DRUG"
     * @const
     */
    "GENERIC_DRUG": "NE_GENERIC_DRUG",

    /**
     * value: "NE_BRANDED_DRUG"
     * @const
     */
    "BRANDED_DRUG": "NE_BRANDED_DRUG",

    /**
     * value: "NE_DRUG_CLASS"
     * @const
     */
    "DRUG_CLASS": "NE_DRUG_CLASS",

    /**
     * value: "NE_PIPELINE_DRUG"
     * @const
     */
    "PIPELINE_DRUG": "NE_PIPELINE_DRUG",

    /**
     * value: "NE_INDICATION"
     * @const
     */
    "INDICATION": "NE_INDICATION"
};



export default Tag;

