/**
 * S&P Global Fixed Income Evaluated Prices & Analytics API
 * Gain access to evaluated pricing and analytics data for Corporate Bonds, Municipal Bonds and Asset Backed Securities provided by S&P Global (formerly IHS Markit) .  Data returned through multiple endpoints like prices, spread, yield, yield curve, sensitivity, coupon information, securities metadata and details specific to the Asset Backed Securities. 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: api@factset.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The BondSensitivity model module.
 * @module model/BondSensitivity
 */
class BondSensitivity {
    /**
     * Constructs a new <code>BondSensitivity</code>.
     * @alias module:model/BondSensitivity
     */
    constructor() { 
        
        BondSensitivity.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>BondSensitivity</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/BondSensitivity} obj Optional instance to populate.
     * @return {module:model/BondSensitivity} The populated <code>BondSensitivity</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new BondSensitivity();

            if (data.hasOwnProperty('requestId')) {
                obj['requestId'] = ApiClient.convertToType(data['requestId'], 'String');
            }
            if (data.hasOwnProperty('fsymId')) {
                obj['fsymId'] = ApiClient.convertToType(data['fsymId'], 'String');
            }
            if (data.hasOwnProperty('date')) {
                obj['date'] = ApiClient.convertToType(data['date'], 'Date');
            }
            if (data.hasOwnProperty('bidConvexity')) {
                obj['bidConvexity'] = ApiClient.convertToType(data['bidConvexity'], 'Number');
            }
            if (data.hasOwnProperty('midConvexity')) {
                obj['midConvexity'] = ApiClient.convertToType(data['midConvexity'], 'Number');
            }
            if (data.hasOwnProperty('askConvexity')) {
                obj['askConvexity'] = ApiClient.convertToType(data['askConvexity'], 'Number');
            }
            if (data.hasOwnProperty('bidEffectiveConvexity')) {
                obj['bidEffectiveConvexity'] = ApiClient.convertToType(data['bidEffectiveConvexity'], 'Number');
            }
            if (data.hasOwnProperty('midEffectiveConvexity')) {
                obj['midEffectiveConvexity'] = ApiClient.convertToType(data['midEffectiveConvexity'], 'Number');
            }
            if (data.hasOwnProperty('askEffectiveConvexity')) {
                obj['askEffectiveConvexity'] = ApiClient.convertToType(data['askEffectiveConvexity'], 'Number');
            }
            if (data.hasOwnProperty('bidEffectiveDuration')) {
                obj['bidEffectiveDuration'] = ApiClient.convertToType(data['bidEffectiveDuration'], 'Number');
            }
            if (data.hasOwnProperty('midEffectiveDuration')) {
                obj['midEffectiveDuration'] = ApiClient.convertToType(data['midEffectiveDuration'], 'Number');
            }
            if (data.hasOwnProperty('askEffectiveDuration')) {
                obj['askEffectiveDuration'] = ApiClient.convertToType(data['askEffectiveDuration'], 'Number');
            }
            if (data.hasOwnProperty('bidMacaulayDuration')) {
                obj['bidMacaulayDuration'] = ApiClient.convertToType(data['bidMacaulayDuration'], 'Number');
            }
            if (data.hasOwnProperty('midMacaulayDuration')) {
                obj['midMacaulayDuration'] = ApiClient.convertToType(data['midMacaulayDuration'], 'Number');
            }
            if (data.hasOwnProperty('askMacaulayDuration')) {
                obj['askMacaulayDuration'] = ApiClient.convertToType(data['askMacaulayDuration'], 'Number');
            }
            if (data.hasOwnProperty('bidModifiedDuration')) {
                obj['bidModifiedDuration'] = ApiClient.convertToType(data['bidModifiedDuration'], 'Number');
            }
            if (data.hasOwnProperty('midModifiedDuration')) {
                obj['midModifiedDuration'] = ApiClient.convertToType(data['midModifiedDuration'], 'Number');
            }
            if (data.hasOwnProperty('askModifiedDuration')) {
                obj['askModifiedDuration'] = ApiClient.convertToType(data['askModifiedDuration'], 'Number');
            }
        }
        return obj;
    }


}

/**
 * Identifier that was used for the request.
 * @member {String} requestId
 */
BondSensitivity.prototype['requestId'] = undefined;

/**
 * FactSet Regional Security Identifier. Six alpha-numeric characters, excluding vowels, with an -R suffix (XXXXXX-R). Identifies the security's best regional security data series per currency. For equities, all primary listings per region and currency are allocated a regional-level permanent identifier. The regional-level permanent identifier will be available once a SEDOL representing the region/currency has been allocated and the identifiers are on FactSet.
 * @member {String} fsymId
 */
BondSensitivity.prototype['fsymId'] = undefined;

/**
 * The date on which the price is calculated.
 * @member {Date} date
 */
BondSensitivity.prototype['date'] = undefined;

/**
 * Measures the change of Duration with the change in yield,based on the bid price .Available only  for `corporate bonds` and `municipal bonds`.
 * @member {Number} bidConvexity
 */
BondSensitivity.prototype['bidConvexity'] = undefined;

/**
 * Measures the change of duration with the change in yield,based on the mid price .Available only  for `corporate bonds`
 * @member {Number} midConvexity
 */
BondSensitivity.prototype['midConvexity'] = undefined;

/**
 * Measures the change of duration with the change in yield,based on the ask price .Available only  for `corporate bonds`
 * @member {Number} askConvexity
 */
BondSensitivity.prototype['askConvexity'] = undefined;

/**
 * The effective convexity based on the bid price .Available only  for `corporate bonds`.
 * @member {Number} bidEffectiveConvexity
 */
BondSensitivity.prototype['bidEffectiveConvexity'] = undefined;

/**
 * The effective convexity based on the mid price .Available only  for `corporate bonds`.
 * @member {Number} midEffectiveConvexity
 */
BondSensitivity.prototype['midEffectiveConvexity'] = undefined;

/**
 *  The effective convexity based on the ask price. Available only  for `corporate bonds`.
 * @member {Number} askEffectiveConvexity
 */
BondSensitivity.prototype['askEffectiveConvexity'] = undefined;

/**
 * A duration calculation for bonds with embedded options,based on the bid price. Effective duration takes into account that expected cash flows fluctuate as interest rates change. Available only  for `corporate bonds`
 * @member {Number} bidEffectiveDuration
 */
BondSensitivity.prototype['bidEffectiveDuration'] = undefined;

/**
 * A duration calculation for bonds with embedded options,based on the mid price. Effective duration takes into account that expected cash flows fluctuate as interest rates change .Available only  for `corporate bonds`.
 * @member {Number} midEffectiveDuration
 */
BondSensitivity.prototype['midEffectiveDuration'] = undefined;

/**
 * A duration calculation for bonds with embedded options,based on the ask price. Effective duration takes into account that expected cash flows fluctuate as interest rates change. Available only  for `corporate bonds`
 * @member {Number} askEffectiveDuration
 */
BondSensitivity.prototype['askEffectiveDuration'] = undefined;

/**
 * The weighted average maturity of bond, where the weights are relative discounted cash flows in each period,based on the bid price .Available only  for `corporate bonds`.
 * @member {Number} bidMacaulayDuration
 */
BondSensitivity.prototype['bidMacaulayDuration'] = undefined;

/**
 * The weighted average maturity of bond, where the weights are relative discounted cash flows in each period,based on the mid price .Available only  for `corporate bonds`.
 * @member {Number} midMacaulayDuration
 */
BondSensitivity.prototype['midMacaulayDuration'] = undefined;

/**
 * The weighted average maturity of bond, where the weights are relative discounted cash flows in each period,based on the ask price .Available only  for `corporate bonds`.
 * @member {Number} askMacaulayDuration
 */
BondSensitivity.prototype['askMacaulayDuration'] = undefined;

/**
 * The first derivative of the bond price, with respect to yield,based on the bid price.
 * @member {Number} bidModifiedDuration
 */
BondSensitivity.prototype['bidModifiedDuration'] = undefined;

/**
 * The first derivative of the bond price, with respect to yield,based on the mid price. Available only  for `corporate bonds`.
 * @member {Number} midModifiedDuration
 */
BondSensitivity.prototype['midModifiedDuration'] = undefined;

/**
 * The first derivative of the bond price, with respect to yield,based on the ask price. Available only  for `corporate bonds`.
 * @member {Number} askModifiedDuration
 */
BondSensitivity.prototype['askModifiedDuration'] = undefined;






export default BondSensitivity;

