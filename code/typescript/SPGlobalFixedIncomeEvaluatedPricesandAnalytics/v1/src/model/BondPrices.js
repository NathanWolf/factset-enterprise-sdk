/**
 * S&P Global Fixed Income Evaluated Prices & Analytics API
 * Gain access to evaluated pricing and analytics data for Corporate Bonds, Municipal Bonds and Asset Backed Securities provided by S&P Global (formerly IHS Markit) .  Data returned through multiple endpoints like prices, spread, yield, yield curve, sensitivity, coupon information, securities metadata and details specific to the Asset Backed Securities. 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: api@factset.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The BondPrices model module.
 * @module model/BondPrices
 */
class BondPrices {
    /**
     * Constructs a new <code>BondPrices</code>.
     * @alias module:model/BondPrices
     */
    constructor() { 
        
        BondPrices.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>BondPrices</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/BondPrices} obj Optional instance to populate.
     * @return {module:model/BondPrices} The populated <code>BondPrices</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new BondPrices();

            if (data.hasOwnProperty('requestId')) {
                obj['requestId'] = ApiClient.convertToType(data['requestId'], 'String');
            }
            if (data.hasOwnProperty('fsymId')) {
                obj['fsymId'] = ApiClient.convertToType(data['fsymId'], 'String');
            }
            if (data.hasOwnProperty('currency')) {
                obj['currency'] = ApiClient.convertToType(data['currency'], 'String');
            }
            if (data.hasOwnProperty('date')) {
                obj['date'] = ApiClient.convertToType(data['date'], 'Date');
            }
            if (data.hasOwnProperty('cleanBidPrice')) {
                obj['cleanBidPrice'] = ApiClient.convertToType(data['cleanBidPrice'], 'Number');
            }
            if (data.hasOwnProperty('cleanMidPrice')) {
                obj['cleanMidPrice'] = ApiClient.convertToType(data['cleanMidPrice'], 'Number');
            }
            if (data.hasOwnProperty('cleanAskPrice')) {
                obj['cleanAskPrice'] = ApiClient.convertToType(data['cleanAskPrice'], 'Number');
            }
            if (data.hasOwnProperty('dirtyBidPrice')) {
                obj['dirtyBidPrice'] = ApiClient.convertToType(data['dirtyBidPrice'], 'Number');
            }
            if (data.hasOwnProperty('dirtyMidPrice')) {
                obj['dirtyMidPrice'] = ApiClient.convertToType(data['dirtyMidPrice'], 'Number');
            }
            if (data.hasOwnProperty('dirtyAskPrice')) {
                obj['dirtyAskPrice'] = ApiClient.convertToType(data['dirtyAskPrice'], 'Number');
            }
            if (data.hasOwnProperty('pv')) {
                obj['pv'] = ApiClient.convertToType(data['pv'], 'Number');
            }
            if (data.hasOwnProperty('bidPriceDate')) {
                obj['bidPriceDate'] = ApiClient.convertToType(data['bidPriceDate'], 'Date');
            }
            if (data.hasOwnProperty('midPriceDate')) {
                obj['midPriceDate'] = ApiClient.convertToType(data['midPriceDate'], 'Date');
            }
            if (data.hasOwnProperty('askPriceDate')) {
                obj['askPriceDate'] = ApiClient.convertToType(data['askPriceDate'], 'Date');
            }
            if (data.hasOwnProperty('bidPriceType')) {
                obj['bidPriceType'] = ApiClient.convertToType(data['bidPriceType'], 'String');
            }
            if (data.hasOwnProperty('midPriceType')) {
                obj['midPriceType'] = ApiClient.convertToType(data['midPriceType'], 'String');
            }
            if (data.hasOwnProperty('askPriceType')) {
                obj['askPriceType'] = ApiClient.convertToType(data['askPriceType'], 'String');
            }
        }
        return obj;
    }


}

/**
 * Identifier that was used for the request.
 * @member {String} requestId
 */
BondPrices.prototype['requestId'] = undefined;

/**
 * FactSet Regional Security Identifier. Six alpha-numeric characters, excluding vowels, with an -R suffix (XXXXXX-R). Identifies the security's best regional security data series per currency. For equities, all primary listings per region and currency are allocated a regional-level permanent identifier. The regional-level permanent identifier will be available once a SEDOL representing the region/currency has been allocated and the identifiers are on FactSet.
 * @member {String} fsymId
 */
BondPrices.prototype['fsymId'] = undefined;

/**
 * Returns the coupon currency .Available only  available for `corporate and asset-backed security bonds`.
 * @member {String} currency
 */
BondPrices.prototype['currency'] = undefined;

/**
 * The date on which the price is calculated.
 * @member {Date} date
 */
BondPrices.prototype['date'] = undefined;

/**
 * The bid price of the instrument.
 * @member {Number} cleanBidPrice
 */
BondPrices.prototype['cleanBidPrice'] = undefined;

/**
 * The bid price of the instrument.
 * @member {Number} cleanMidPrice
 */
BondPrices.prototype['cleanMidPrice'] = undefined;

/**
 * The bid price of the instrument.
 * @member {Number} cleanAskPrice
 */
BondPrices.prototype['cleanAskPrice'] = undefined;

/**
 * The price of the bond plus the interest that is accrued between coupon payments, based on the bid price. Available only  for `corporate bonds`.
 * @member {Number} dirtyBidPrice
 */
BondPrices.prototype['dirtyBidPrice'] = undefined;

/**
 * The price of the bond plus the interest that is accrued between coupon payments, based on the mid price. Available only  for `corporate bonds`.
 * @member {Number} dirtyMidPrice
 */
BondPrices.prototype['dirtyMidPrice'] = undefined;

/**
 * The price of the bond plus the interest that is accrued between coupon payments, based on the bid price. Available only  for `corporate bonds`.
 * @member {Number} dirtyAskPrice
 */
BondPrices.prototype['dirtyAskPrice'] = undefined;

/**
 * The present variation per one basis point change in yield, based on the mid price .Available only  for `corporate bonds`.
 * @member {Number} pv
 */
BondPrices.prototype['pv'] = undefined;

/**
 * The date the bid price is valued to. Available only  for `municipal bonds`.
 * @member {Date} bidPriceDate
 */
BondPrices.prototype['bidPriceDate'] = undefined;

/**
 * The date the mid price is valued to. Available only  for `municipal bonds`.
 * @member {Date} midPriceDate
 */
BondPrices.prototype['midPriceDate'] = undefined;

/**
 * The date the ask price is valued to. Available only  for `municipal bonds`.
 * @member {Date} askPriceDate
 */
BondPrices.prototype['askPriceDate'] = undefined;

/**
 * Bid price type for the given identifier. Available only  for `municipal bonds`.
 * @member {String} bidPriceType
 */
BondPrices.prototype['bidPriceType'] = undefined;

/**
 * Mid price type for the given identifier .Available only  for `municipal bonds`.
 * @member {String} midPriceType
 */
BondPrices.prototype['midPriceType'] = undefined;

/**
 * Ask price type for the given identifier .Available only  for `municipal bonds`.
 * @member {String} askPriceType
 */
BondPrices.prototype['askPriceType'] = undefined;






export default BondPrices;

