/**
 * S&P Global Fixed Income Evaluated Prices & Analytics API
 * Gain access to evaluated pricing and analytics data for Corporate Bonds, Municipal Bonds and Asset Backed Securities provided by S&P Global (formerly IHS Markit) .  Data returned through multiple endpoints like prices, spread, yield, yield curve, sensitivity, coupon information, securities metadata and details specific to the Asset Backed Securities. 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: api@factset.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The BondCoupon model module.
 * @module model/BondCoupon
 */
class BondCoupon {
    /**
     * Constructs a new <code>BondCoupon</code>.
     * @alias module:model/BondCoupon
     */
    constructor() { 
        
        BondCoupon.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>BondCoupon</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/BondCoupon} obj Optional instance to populate.
     * @return {module:model/BondCoupon} The populated <code>BondCoupon</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new BondCoupon();

            if (data.hasOwnProperty('requestId')) {
                obj['requestId'] = ApiClient.convertToType(data['requestId'], 'String');
            }
            if (data.hasOwnProperty('fsymId')) {
                obj['fsymId'] = ApiClient.convertToType(data['fsymId'], 'String');
            }
            if (data.hasOwnProperty('date')) {
                obj['date'] = ApiClient.convertToType(data['date'], 'Date');
            }
            if (data.hasOwnProperty('accruedInterest')) {
                obj['accruedInterest'] = ApiClient.convertToType(data['accruedInterest'], 'Number');
            }
            if (data.hasOwnProperty('coupon')) {
                obj['coupon'] = ApiClient.convertToType(data['coupon'], 'Number');
            }
            if (data.hasOwnProperty('couponType')) {
                obj['couponType'] = ApiClient.convertToType(data['couponType'], 'String');
            }
            if (data.hasOwnProperty('couponFrequency')) {
                obj['couponFrequency'] = ApiClient.convertToType(data['couponFrequency'], 'String');
            }
        }
        return obj;
    }


}

/**
 * Identifier that was used for the request.
 * @member {String} requestId
 */
BondCoupon.prototype['requestId'] = undefined;

/**
 * FactSet Regional Security Identifier. Six alpha-numeric characters, excluding vowels, with an -R suffix (XXXXXX-R). Identifies the security's best regional security data series per currency. For equities, all primary listings per region and currency are allocated a regional-level permanent identifier. The regional-level permanent identifier will be available once a SEDOL representing the region/currency has been allocated and the identifiers are on FactSet.
 * @member {String} fsymId
 */
BondCoupon.prototype['fsymId'] = undefined;

/**
 * The date on which the price is calculated.
 * @member {Date} date
 */
BondCoupon.prototype['date'] = undefined;

/**
 * The interest that is owed, but not yet paid, added to the price of the bond. Available only for `corporate and municipal bonds`.
 * @member {Number} accruedInterest
 */
BondCoupon.prototype['accruedInterest'] = undefined;

/**
 * The current coupon rate of the instrument. Available only for `corporate and municipal bonds`.
 * @member {Number} coupon
 */
BondCoupon.prototype['coupon'] = undefined;

/**
 * The coupon type of the instrument. Available only for `corporate and municipal bonds`.
 * @member {String} couponType
 */
BondCoupon.prototype['couponType'] = undefined;

/**
 * The coupon frequency of the bond. Available only for `corporate bonds`. 
 * @member {String} couponFrequency
 */
BondCoupon.prototype['couponFrequency'] = undefined;






export default BondCoupon;

