/**
 * Analytics Datastore API
 * Allow clients to fetch precalculated Analytics through predeterministic URLs.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: api@factset.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";

/**
* Mappings service.
* @module api/MappingsApi
*/
export default class MappingsApi {

    /**
    * Constructs a new MappingsApi. 
    * @alias module:api/MappingsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * Redirects to the underlying Insight/Vault data in a Stach format.
     * The inclusion of a configId in the path indicates this is for Insight/Vault mappings only, as PA/SPAR mappings do not support the concept of configuration id.    Takes report parameter inputs and returns the object location for the specified report via a 302 redirect.    Note: Due to Swagger UI functionality, the redirect is automatically followed when using 'Try it out', so instead of the 302 Header response, a 200 is returned with the Cargo response Body.
     * @param {String} document The Analytics Datafeed document containing the report
     * @param {String} assetName The PA/SPAR asset name and extension
     * @param {String} reportId The PA/SPAR report ID
     * @param {String} tileId The PA/SPAR tile ID
     * @param {String} accountId The account ID
     * @param {String} configId The Vault configuration ID
     * @param {Date} date The as of date for the report
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    getInsightMappingWithHttpInfo(document, assetName, reportId, tileId, accountId, configId, date) {
      let postBody = null;
      // verify the required parameter 'document' is set
      if (document === undefined || document === null) {
        throw new Error("Missing the required parameter 'document' when calling getInsightMapping");
      }
      // verify the required parameter 'assetName' is set
      if (assetName === undefined || assetName === null) {
        throw new Error("Missing the required parameter 'assetName' when calling getInsightMapping");
      }
      // verify the required parameter 'reportId' is set
      if (reportId === undefined || reportId === null) {
        throw new Error("Missing the required parameter 'reportId' when calling getInsightMapping");
      }
      // verify the required parameter 'tileId' is set
      if (tileId === undefined || tileId === null) {
        throw new Error("Missing the required parameter 'tileId' when calling getInsightMapping");
      }
      // verify the required parameter 'accountId' is set
      if (accountId === undefined || accountId === null) {
        throw new Error("Missing the required parameter 'accountId' when calling getInsightMapping");
      }
      // verify the required parameter 'configId' is set
      if (configId === undefined || configId === null) {
        throw new Error("Missing the required parameter 'configId' when calling getInsightMapping");
      }
      // verify the required parameter 'date' is set
      if (date === undefined || date === null) {
        throw new Error("Missing the required parameter 'date' when calling getInsightMapping");
      }

      let pathParams = {
        'document': document,
        'assetName': assetName,
        'reportId': reportId,
        'tileId': tileId,
        'accountId': accountId,
        'configId': configId,
        'date': date
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = [];
      let accepts = [];


      let returnType = null;

      return this.apiClient.callApi(
        '/analytics/pub-datastore/swivel/v1/{document}/{assetName}/{reportId}/{tileId}/{accountId}/{configId}/{date}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Redirects to the underlying Insight/Vault data in a Stach format.
     * The inclusion of a configId in the path indicates this is for Insight/Vault mappings only, as PA/SPAR mappings do not support the concept of configuration id.    Takes report parameter inputs and returns the object location for the specified report via a 302 redirect.    Note: Due to Swagger UI functionality, the redirect is automatically followed when using 'Try it out', so instead of the 302 Header response, a 200 is returned with the Cargo response Body.
     * @param {String} document The Analytics Datafeed document containing the report
     * @param {String} assetName The PA/SPAR asset name and extension
     * @param {String} reportId The PA/SPAR report ID
     * @param {String} tileId The PA/SPAR tile ID
     * @param {String} accountId The account ID
     * @param {String} configId The Vault configuration ID
     * @param {Date} date The as of date for the report
     * @return { Promise } a Promise
     */
    getInsightMapping(document, assetName, reportId, tileId, accountId, configId, date) {
      return this.getInsightMappingWithHttpInfo(document, assetName, reportId, tileId, accountId, configId, date)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Redirects to the raw PPT/PDF output created by the Publisher service.
     * Takes report parameter inputs and returns the object location for the specified report via a 302 redirect.    Note: Due to Swagger UI functionality, the redirect is automatically followed when using 'Try it out', so instead of the 302 Header response, a 200 is returned with the Cargo response Body.
     * @param {String} document The Publisher document containing the report
     * @param {String} accountId The account ID
     * @param {Date} date The as of date for the report
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    getPdfPptMappingWithHttpInfo(document, accountId, date) {
      let postBody = null;
      // verify the required parameter 'document' is set
      if (document === undefined || document === null) {
        throw new Error("Missing the required parameter 'document' when calling getPdfPptMapping");
      }
      // verify the required parameter 'accountId' is set
      if (accountId === undefined || accountId === null) {
        throw new Error("Missing the required parameter 'accountId' when calling getPdfPptMapping");
      }
      // verify the required parameter 'date' is set
      if (date === undefined || date === null) {
        throw new Error("Missing the required parameter 'date' when calling getPdfPptMapping");
      }

      let pathParams = {
        'document': document,
        'accountId': accountId,
        'date': date
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = [];
      let accepts = [];


      let returnType = null;

      return this.apiClient.callApi(
        '/analytics/pub-datastore/swivel/v1/{document}/{accountId}/{date}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Redirects to the raw PPT/PDF output created by the Publisher service.
     * Takes report parameter inputs and returns the object location for the specified report via a 302 redirect.    Note: Due to Swagger UI functionality, the redirect is automatically followed when using 'Try it out', so instead of the 302 Header response, a 200 is returned with the Cargo response Body.
     * @param {String} document The Publisher document containing the report
     * @param {String} accountId The account ID
     * @param {Date} date The as of date for the report
     * @return { Promise } a Promise
     */
    getPdfPptMapping(document, accountId, date) {
      return this.getPdfPptMappingWithHttpInfo(document, accountId, date)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Redirects to the underlying PA/SPAR data represented in a Stach format.
     * Takes report parameter inputs and returns the object location for the specified report via a 302 redirect.    Note: Due to Swagger UI functionality, the redirect is automatically followed when using 'Try it out', so instead of the 302 Header response, a 200 is returned with the Cargo response Body.
     * @param {String} document The Publisher or Analytics Datafeed document containing the report
     * @param {String} assetName The PA/SPAR asset name and extension
     * @param {String} reportId The PA/SPAR report ID
     * @param {String} tileId The PA/SPAR tile ID
     * @param {String} accountId The account ID
     * @param {Date} date The as of date for the report
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    getStachMappingWithHttpInfo(document, assetName, reportId, tileId, accountId, date) {
      let postBody = null;
      // verify the required parameter 'document' is set
      if (document === undefined || document === null) {
        throw new Error("Missing the required parameter 'document' when calling getStachMapping");
      }
      // verify the required parameter 'assetName' is set
      if (assetName === undefined || assetName === null) {
        throw new Error("Missing the required parameter 'assetName' when calling getStachMapping");
      }
      // verify the required parameter 'reportId' is set
      if (reportId === undefined || reportId === null) {
        throw new Error("Missing the required parameter 'reportId' when calling getStachMapping");
      }
      // verify the required parameter 'tileId' is set
      if (tileId === undefined || tileId === null) {
        throw new Error("Missing the required parameter 'tileId' when calling getStachMapping");
      }
      // verify the required parameter 'accountId' is set
      if (accountId === undefined || accountId === null) {
        throw new Error("Missing the required parameter 'accountId' when calling getStachMapping");
      }
      // verify the required parameter 'date' is set
      if (date === undefined || date === null) {
        throw new Error("Missing the required parameter 'date' when calling getStachMapping");
      }

      let pathParams = {
        'document': document,
        'assetName': assetName,
        'reportId': reportId,
        'tileId': tileId,
        'accountId': accountId,
        'date': date
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = [];
      let accepts = [];


      let returnType = null;

      return this.apiClient.callApi(
        '/analytics/pub-datastore/swivel/v1/{document}/{assetName}/{reportId}/{tileId}/{accountId}/{date}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Redirects to the underlying PA/SPAR data represented in a Stach format.
     * Takes report parameter inputs and returns the object location for the specified report via a 302 redirect.    Note: Due to Swagger UI functionality, the redirect is automatically followed when using 'Try it out', so instead of the 302 Header response, a 200 is returned with the Cargo response Body.
     * @param {String} document The Publisher or Analytics Datafeed document containing the report
     * @param {String} assetName The PA/SPAR asset name and extension
     * @param {String} reportId The PA/SPAR report ID
     * @param {String} tileId The PA/SPAR tile ID
     * @param {String} accountId The account ID
     * @param {Date} date The as of date for the report
     * @return { Promise } a Promise
     */
    getStachMapping(document, assetName, reportId, tileId, accountId, date) {
      return this.getStachMappingWithHttpInfo(document, assetName, reportId, tileId, accountId, date)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Redirects to the underlying PA/SPAR data represented in a Stach format, with no as of date specified.
     * Takes report parameter inputs and returns the object location for the specified report via a 302 redirect.    Note: Due to Swagger UI functionality, the redirect is automatically followed when using 'Try it out', so instead of the 302 Header response, a 200 is returned with the Cargo response Body.
     * @param {String} document The Publisher or Analytics Datafeed document containing the report
     * @param {String} assetName The PA/SPAR asset name and extension
     * @param {String} reportId The PA/SPAR report ID
     * @param {String} tileId The PA/SPAR tile ID
     * @param {String} accountId The account ID
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    getStachMappingNoDateWithHttpInfo(document, assetName, reportId, tileId, accountId) {
      let postBody = null;
      // verify the required parameter 'document' is set
      if (document === undefined || document === null) {
        throw new Error("Missing the required parameter 'document' when calling getStachMappingNoDate");
      }
      // verify the required parameter 'assetName' is set
      if (assetName === undefined || assetName === null) {
        throw new Error("Missing the required parameter 'assetName' when calling getStachMappingNoDate");
      }
      // verify the required parameter 'reportId' is set
      if (reportId === undefined || reportId === null) {
        throw new Error("Missing the required parameter 'reportId' when calling getStachMappingNoDate");
      }
      // verify the required parameter 'tileId' is set
      if (tileId === undefined || tileId === null) {
        throw new Error("Missing the required parameter 'tileId' when calling getStachMappingNoDate");
      }
      // verify the required parameter 'accountId' is set
      if (accountId === undefined || accountId === null) {
        throw new Error("Missing the required parameter 'accountId' when calling getStachMappingNoDate");
      }

      let pathParams = {
        'document': document,
        'assetName': assetName,
        'reportId': reportId,
        'tileId': tileId,
        'accountId': accountId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = [];
      let accepts = [];


      let returnType = null;

      return this.apiClient.callApi(
        '/analytics/pub-datastore/swivel/v1/{document}/{assetName}/{reportId}/{tileId}/{accountId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Redirects to the underlying PA/SPAR data represented in a Stach format, with no as of date specified.
     * Takes report parameter inputs and returns the object location for the specified report via a 302 redirect.    Note: Due to Swagger UI functionality, the redirect is automatically followed when using 'Try it out', so instead of the 302 Header response, a 200 is returned with the Cargo response Body.
     * @param {String} document The Publisher or Analytics Datafeed document containing the report
     * @param {String} assetName The PA/SPAR asset name and extension
     * @param {String} reportId The PA/SPAR report ID
     * @param {String} tileId The PA/SPAR tile ID
     * @param {String} accountId The account ID
     * @return { Promise } a Promise
     */
    getStachMappingNoDate(document, assetName, reportId, tileId, accountId) {
      return this.getStachMappingNoDateWithHttpInfo(document, assetName, reportId, tileId, accountId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}





