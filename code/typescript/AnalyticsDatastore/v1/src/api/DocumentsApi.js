/**
 * Analytics Datastore API
 * Allow clients to fetch precalculated Analytics through predeterministic URLs.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: api@factset.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import DocumentListResponse from '../model/DocumentListResponse';
import DocumentRequest from '../model/DocumentRequest';
import ProductTypeListResponse from '../model/ProductTypeListResponse';
import TagFilterModel from '../model/TagFilterModel';
import TagListResponse from '../model/TagListResponse';
import TagResponse from '../model/TagResponse';
import TagValuesListResponse from '../model/TagValuesListResponse';

/**
* Documents service.
* @module api/DocumentsApi
*/
export default class DocumentsApi {

    /**
    * Constructs a new DocumentsApi. 
    * @alias module:api/DocumentsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * Gets a list of Documents that a user has access to.
     * Retrieves metadata around documents stored in the Analytics Datastore Service. Each Document will have a 'url' property which will act as a re-direct to the underlying document data    This end point supports pagination and filtering through the use of the request body listed below.    To discover what tags are available to filter on, see GET /tags and GET /tags/{name}/values to retrieve these filter values.    Similarly, to discover what product types are available to filter on, see POST /product-types/search to retrieve a list of product types.
     * @param {module:model/DocumentRequest} documentRequest Example request of a filtered Documents search call
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/DocumentListResponse} and HTTP response
     */
    getDocumentsEndPointWithHttpInfo(documentRequest) {
      let postBody = documentRequest;
      // verify the required parameter 'documentRequest' is set
      if (documentRequest === undefined || documentRequest === null) {
        throw new Error("Missing the required parameter 'documentRequest' when calling getDocumentsEndPoint");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];


      let returnType = DocumentListResponse;

      return this.apiClient.callApi(
        '/analytics/pub-datastore/tag-search/v1/documents/search', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Gets a list of Documents that a user has access to.
     * Retrieves metadata around documents stored in the Analytics Datastore Service. Each Document will have a 'url' property which will act as a re-direct to the underlying document data    This end point supports pagination and filtering through the use of the request body listed below.    To discover what tags are available to filter on, see GET /tags and GET /tags/{name}/values to retrieve these filter values.    Similarly, to discover what product types are available to filter on, see POST /product-types/search to retrieve a list of product types.
     * @param {module:model/DocumentRequest} documentRequest Example request of a filtered Documents search call
     * @return { Promise.< module:model/DocumentListResponse > } a Promise, with data of type {@link module:model/DocumentListResponse }
     */
    getDocumentsEndPoint(documentRequest) {
      return this.getDocumentsEndPointWithHttpInfo(documentRequest)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Gets a list of product types that a user has access to.
     * Retrieves a list of product types that have been specified across all documents the user has access to
     * @param {module:model/TagFilterModel} tagFilterModel Request body to apply when filtering on this end point. Pagination controls are applied through the pagination object and additional tag filters can be used by supplying the tag name and its value in the tags object.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ProductTypeListResponse} and HTTP response
     */
    getProductTypesWithHttpInfo(tagFilterModel) {
      let postBody = tagFilterModel;
      // verify the required parameter 'tagFilterModel' is set
      if (tagFilterModel === undefined || tagFilterModel === null) {
        throw new Error("Missing the required parameter 'tagFilterModel' when calling getProductTypes");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];


      let returnType = ProductTypeListResponse;

      return this.apiClient.callApi(
        '/analytics/pub-datastore/tag-search/v1/product-types/search', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Gets a list of product types that a user has access to.
     * Retrieves a list of product types that have been specified across all documents the user has access to
     * @param {module:model/TagFilterModel} tagFilterModel Request body to apply when filtering on this end point. Pagination controls are applied through the pagination object and additional tag filters can be used by supplying the tag name and its value in the tags object.
     * @return { Promise.< module:model/ProductTypeListResponse > } a Promise, with data of type {@link module:model/ProductTypeListResponse }
     */
    getProductTypes(tagFilterModel) {
      return this.getProductTypesWithHttpInfo(tagFilterModel)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get a single tag definition based on its name
     * Retrieve a tag definition based on its name
     * @param {String} name The name of the tag
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/TagResponse} and HTTP response
     */
    getSingleTagEndPointWithHttpInfo(name) {
      let postBody = null;
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling getSingleTagEndPoint");
      }

      let pathParams = {
        'name': name
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];


      let returnType = TagResponse;

      return this.apiClient.callApi(
        '/analytics/pub-datastore/tag-search/v1/tags/{name}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get a single tag definition based on its name
     * Retrieve a tag definition based on its name
     * @param {String} name The name of the tag
     * @return { Promise.< module:model/TagResponse > } a Promise, with data of type {@link module:model/TagResponse }
     */
    getSingleTagEndPoint(name) {
      return this.getSingleTagEndPointWithHttpInfo(name)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Gets a list of tag values for the given name
     * Returns a list of tag values depending on the name provided. Supports filtering on additional tag name value pairs, which operates as an 'AND' where the Document must have the tag name specified in the path AND the filtered parameter.
     * @param {String} name The name of the tag
     * @param {module:model/TagFilterModel} tagFilterModel Request body to apply when filtering on this end point. Pagination controls are applied through the pagination object and additional tag filters can be used by supplying the tag name and its value in the tags object.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/TagValuesListResponse} and HTTP response
     */
    getTagValuesEndPointWithHttpInfo(name, tagFilterModel) {
      let postBody = tagFilterModel;
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling getTagValuesEndPoint");
      }
      // verify the required parameter 'tagFilterModel' is set
      if (tagFilterModel === undefined || tagFilterModel === null) {
        throw new Error("Missing the required parameter 'tagFilterModel' when calling getTagValuesEndPoint");
      }

      let pathParams = {
        'name': name
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];


      let returnType = TagValuesListResponse;

      return this.apiClient.callApi(
        '/analytics/pub-datastore/tag-search/v1/tags/{name}/values', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Gets a list of tag values for the given name
     * Returns a list of tag values depending on the name provided. Supports filtering on additional tag name value pairs, which operates as an 'AND' where the Document must have the tag name specified in the path AND the filtered parameter.
     * @param {String} name The name of the tag
     * @param {module:model/TagFilterModel} tagFilterModel Request body to apply when filtering on this end point. Pagination controls are applied through the pagination object and additional tag filters can be used by supplying the tag name and its value in the tags object.
     * @return { Promise.< module:model/TagValuesListResponse > } a Promise, with data of type {@link module:model/TagValuesListResponse }
     */
    getTagValuesEndPoint(name, tagFilterModel) {
      return this.getTagValuesEndPointWithHttpInfo(name, tagFilterModel)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Gets a list of tag definitions for the user.
     * Tag definitions consist of a name and a type. Use this end point to see a list of pre-existing tags that can be used to filter on the Documents end point.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.paginationOffset The offset integer on where to begin paginating (default to 0)
     * @param {Number} opts.paginationLimit The limit of records to return when paginating (default to 50)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/TagListResponse} and HTTP response
     */
    getTagsEndPointWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        '_paginationOffset': opts['paginationOffset'],
        '_paginationLimit': opts['paginationLimit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];


      let returnType = TagListResponse;

      return this.apiClient.callApi(
        '/analytics/pub-datastore/tag-search/v1/tags', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Gets a list of tag definitions for the user.
     * Tag definitions consist of a name and a type. Use this end point to see a list of pre-existing tags that can be used to filter on the Documents end point.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.paginationOffset The offset integer on where to begin paginating (default to 0)
     * @param {Number} opts.paginationLimit The limit of records to return when paginating (default to 50)
     * @return { Promise.< module:model/TagListResponse > } a Promise, with data of type {@link module:model/TagListResponse }
     */
    getTagsEndPoint(opts) {
      return this.getTagsEndPointWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}





