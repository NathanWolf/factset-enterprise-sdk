/**
 * Analytics Datastore API
 * Allow clients to fetch precalculated Analytics through predeterministic URLs.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: api@factset.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from './ApiClient';
import DocumentListResponse from './model/DocumentListResponse';
import DocumentModel from './model/DocumentModel';
import DocumentRequest from './model/DocumentRequest';
import DocumentRequestData from './model/DocumentRequestData';
import MetaModel from './model/MetaModel';
import MetaModelPagination from './model/MetaModelPagination';
import MetaRequestModel from './model/MetaRequestModel';
import MetaRequestModelPagination from './model/MetaRequestModelPagination';
import ProductTypeListResponse from './model/ProductTypeListResponse';
import StringOrNumberTagValue from './model/StringOrNumberTagValue';
import TagFilterModel from './model/TagFilterModel';
import TagFilterModelData from './model/TagFilterModelData';
import TagListResponse from './model/TagListResponse';
import TagModel from './model/TagModel';
import TagResponse from './model/TagResponse';
import TagValuesListResponse from './model/TagValuesListResponse';

import DocumentsApi from './api/DocumentsApi';
import MappingsApi from './api/MappingsApi';
import ObjectsApi from './api/ObjectsApi';


/**
* Analytics Datastore client library for JavaScript.<br>
* The <code>index</code> module provides access to constructors for all the classes which comprise the public API.
* <p>
* An AMD (recommended!) or CommonJS application will generally do something equivalent to the following:
* <pre>
* var analyticsdatastore = require('index'); // See note below*.
* var xxxSvc = new analyticsdatastore.XxxApi(); // Allocate the API class we're going to use.
* var yyyModel = new analyticsdatastore.Yyy(); // Construct a model instance.
* yyyModel.someProperty = 'someValue';
* ...
* var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.
* ...
* </pre>
* <em>*NOTE: For a top-level AMD script, use require(['index'], function(){...})
* and put the application logic within the callback function.</em>
* </p>
* <p>
* A non-AMD browser application (discouraged) might do something like this:
* <pre>
* var xxxSvc = new analyticsdatastore.XxxApi(); // Allocate the API class we're going to use.
* var yyy = new analyticsdatastore.Yyy(); // Construct a model instance.
* yyyModel.someProperty = 'someValue';
* ...
* var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.
* ...
* </pre>
* </p>
* @module index
*/
export {
    /**
     * The ApiClient constructor.
     * @property {module:ApiClient}
     */
    ApiClient,

    /**
     * The DocumentListResponse model constructor.
     * @property {module:model/DocumentListResponse}
     */
    DocumentListResponse,

    /**
     * The DocumentModel model constructor.
     * @property {module:model/DocumentModel}
     */
    DocumentModel,

    /**
     * The DocumentRequest model constructor.
     * @property {module:model/DocumentRequest}
     */
    DocumentRequest,

    /**
     * The DocumentRequestData model constructor.
     * @property {module:model/DocumentRequestData}
     */
    DocumentRequestData,

    /**
     * The MetaModel model constructor.
     * @property {module:model/MetaModel}
     */
    MetaModel,

    /**
     * The MetaModelPagination model constructor.
     * @property {module:model/MetaModelPagination}
     */
    MetaModelPagination,

    /**
     * The MetaRequestModel model constructor.
     * @property {module:model/MetaRequestModel}
     */
    MetaRequestModel,

    /**
     * The MetaRequestModelPagination model constructor.
     * @property {module:model/MetaRequestModelPagination}
     */
    MetaRequestModelPagination,

    /**
     * The ProductTypeListResponse model constructor.
     * @property {module:model/ProductTypeListResponse}
     */
    ProductTypeListResponse,

    /**
     * The StringOrNumberTagValue model constructor.
     * @property {module:model/StringOrNumberTagValue}
     */
    StringOrNumberTagValue,

    /**
     * The TagFilterModel model constructor.
     * @property {module:model/TagFilterModel}
     */
    TagFilterModel,

    /**
     * The TagFilterModelData model constructor.
     * @property {module:model/TagFilterModelData}
     */
    TagFilterModelData,

    /**
     * The TagListResponse model constructor.
     * @property {module:model/TagListResponse}
     */
    TagListResponse,

    /**
     * The TagModel model constructor.
     * @property {module:model/TagModel}
     */
    TagModel,

    /**
     * The TagResponse model constructor.
     * @property {module:model/TagResponse}
     */
    TagResponse,

    /**
     * The TagValuesListResponse model constructor.
     * @property {module:model/TagValuesListResponse}
     */
    TagValuesListResponse,

    /**
    * The DocumentsApi service constructor.
    * @property {module:api/DocumentsApi}
    */
    DocumentsApi,

    /**
    * The MappingsApi service constructor.
    * @property {module:api/MappingsApi}
    */
    MappingsApi,

    /**
    * The ObjectsApi service constructor.
    * @property {module:api/ObjectsApi}
    */
    ObjectsApi,

};
