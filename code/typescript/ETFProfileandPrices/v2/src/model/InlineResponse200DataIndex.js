/**
 * Prime Developer Trial
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The InlineResponse200DataIndex model module.
 * @module model/InlineResponse200DataIndex
 * @version 0.9.0
 */
class InlineResponse200DataIndex {
    /**
     * Constructs a new <code>InlineResponse200DataIndex</code>.
     * The index the ETP is replicating, if applicable.
     * @alias module:model/InlineResponse200DataIndex
     */
    constructor() { 
        
        InlineResponse200DataIndex.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>InlineResponse200DataIndex</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/InlineResponse200DataIndex} obj Optional instance to populate.
     * @return {module:model/InlineResponse200DataIndex} The populated <code>InlineResponse200DataIndex</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new InlineResponse200DataIndex();

            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('family')) {
                obj['family'] = ApiClient.convertToType(data['family'], 'String');
            }
            if (data.hasOwnProperty('website')) {
                obj['website'] = ApiClient.convertToType(data['website'], 'String');
            }
            if (data.hasOwnProperty('distributionTreatment')) {
                obj['distributionTreatment'] = ApiClient.convertToType(data['distributionTreatment'], 'String');
            }
            if (data.hasOwnProperty('rebalancingFrequency')) {
                obj['rebalancingFrequency'] = ApiClient.convertToType(data['rebalancingFrequency'], 'String');
            }
            if (data.hasOwnProperty('currency')) {
                obj['currency'] = ApiClient.convertToType(data['currency'], 'String');
            }
        }
        return obj;
    }


}

/**
 * The name of the underlying index of the ETP. This data is available for all the regions.
 * @member {String} name
 */
InlineResponse200DataIndex.prototype['name'] = undefined;

/**
 * The name of the index provider for the underlying index of the ETP. This data is available for all the regions.
 * @member {String} family
 */
InlineResponse200DataIndex.prototype['family'] = undefined;

/**
 * The link to the underlying index's homepage. This data is available for all the regions.
 * @member {String} website
 */
InlineResponse200DataIndex.prototype['website'] = undefined;

/**
 * Describes the treatment of constituent cash flows by the index, whether capitalized (reinvested) or ignored, as well as tax withholding by foreign countries. Text and standardized value available for this data item. This data is available for Europe only.
 * @member {String} distributionTreatment
 */
InlineResponse200DataIndex.prototype['distributionTreatment'] = undefined;

/**
 * Period of time between reweighting underlying index constituents.
 * @member {module:model/InlineResponse200DataIndex.RebalancingFrequencyEnum} rebalancingFrequency
 */
InlineResponse200DataIndex.prototype['rebalancingFrequency'] = undefined;

/**
 * Base calculation currency of underlying index. This data is available for all the regions and currency code is in the format ISO 4217.
 * @member {String} currency
 */
InlineResponse200DataIndex.prototype['currency'] = undefined;





/**
 * Allowed values for the <code>rebalancingFrequency</code> property.
 * @enum {String}
 * @readonly
 */
InlineResponse200DataIndex['RebalancingFrequencyEnum'] = {

    /**
     * value: "Monthly"
     * @const
     */
    "Monthly": "Monthly",

    /**
     * value: "Annually"
     * @const
     */
    "Annually": "Annually",

    /**
     * value: "Quarterly"
     * @const
     */
    "Quarterly": "Quarterly",

    /**
     * value: "Semi-annual"
     * @const
     */
    "Semi-annual": "Semi-annual",

    /**
     * value: "Daily"
     * @const
     */
    "Daily": "Daily",

    /**
     * value: "As Needed"
     * @const
     */
    "As Needed": "As Needed",

    /**
     * value: "Bi-Monthly"
     * @const
     */
    "Bi-Monthly": "Bi-Monthly",

    /**
     * value: "Weekly"
     * @const
     */
    "Weekly": "Weekly"
};



export default InlineResponse200DataIndex;

