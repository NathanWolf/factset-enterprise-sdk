/**
 * Prime Developer Trial
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The InlineResponse2007DataGeography model module.
 * @module model/InlineResponse2007DataGeography
 * @version 0.9.0
 */
class InlineResponse2007DataGeography {
    /**
     * Constructs a new <code>InlineResponse2007DataGeography</code>.
     * geography.
     * @alias module:model/InlineResponse2007DataGeography
     */
    constructor() { 
        
        InlineResponse2007DataGeography.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>InlineResponse2007DataGeography</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/InlineResponse2007DataGeography} obj Optional instance to populate.
     * @return {module:model/InlineResponse2007DataGeography} The populated <code>InlineResponse2007DataGeography</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new InlineResponse2007DataGeography();

            if (data.hasOwnProperty('region')) {
                obj['region'] = ApiClient.convertToType(data['region'], 'String');
            }
            if (data.hasOwnProperty('specific')) {
                obj['specific'] = ApiClient.convertToType(data['specific'], 'String');
            }
        }
        return obj;
    }


}

/**
 * The broad regional exposure of the ETP's holdings (e.g., Latin America, Asia-Pacific, Global), text and standardized value available. This data is available for all the regions.
 * @member {module:model/InlineResponse2007DataGeography.RegionEnum} region
 */
InlineResponse2007DataGeography.prototype['region'] = undefined;

/**
 * The specific geographic exposure of the ETP's holdings (e.g., BRICs, Chile, Asia-Pacific Ex-Japan), text and standardized value available.This data is available for all the regions. See endpoint /factset/etf/class/geography/list for possible values
 * @member {String} specific
 */
InlineResponse2007DataGeography.prototype['specific'] = undefined;





/**
 * Allowed values for the <code>region</code> property.
 * @enum {String}
 * @readonly
 */
InlineResponse2007DataGeography['RegionEnum'] = {

    /**
     * value: "Europe"
     * @const
     */
    "Europe": "Europe",

    /**
     * value: "North America"
     * @const
     */
    "North America": "North America",

    /**
     * value: "Global"
     * @const
     */
    "Global": "Global",

    /**
     * value: "Developed Markets"
     * @const
     */
    "Developed Markets": "Developed Markets",

    /**
     * value: "Asia-Pacific"
     * @const
     */
    "Asia-Pacific": "Asia-Pacific",

    /**
     * value: "Global Ex-U.S."
     * @const
     */
    "Global Ex-U.S.": "Global Ex-U.S.",

    /**
     * value: "Emerging Markets"
     * @const
     */
    "Emerging Markets": "Emerging Markets",

    /**
     * value: "Latin America"
     * @const
     */
    "Latin America": "Latin America",

    /**
     * value: "Middle East & Africa"
     * @const
     */
    "Middle East &amp; Africa": "Middle East & Africa",

    /**
     * value: "Frontier Markets"
     * @const
     */
    "Frontier Markets": "Frontier Markets"
};



export default InlineResponse2007DataGeography;

