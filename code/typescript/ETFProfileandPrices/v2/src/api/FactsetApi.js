/**
 * Prime Developer Trial
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import InlineResponse200 from '../model/InlineResponse200';
import InlineResponse2001 from '../model/InlineResponse2001';
import InlineResponse20010 from '../model/InlineResponse20010';
import InlineResponse20011 from '../model/InlineResponse20011';
import InlineResponse20012 from '../model/InlineResponse20012';
import InlineResponse20013 from '../model/InlineResponse20013';
import InlineResponse20014 from '../model/InlineResponse20014';
import InlineResponse20015 from '../model/InlineResponse20015';
import InlineResponse20016 from '../model/InlineResponse20016';
import InlineResponse20017 from '../model/InlineResponse20017';
import InlineResponse20018 from '../model/InlineResponse20018';
import InlineResponse20019 from '../model/InlineResponse20019';
import InlineResponse2002 from '../model/InlineResponse2002';
import InlineResponse20020 from '../model/InlineResponse20020';
import InlineResponse20021 from '../model/InlineResponse20021';
import InlineResponse20022 from '../model/InlineResponse20022';
import InlineResponse20023 from '../model/InlineResponse20023';
import InlineResponse20024 from '../model/InlineResponse20024';
import InlineResponse20025 from '../model/InlineResponse20025';
import InlineResponse20026 from '../model/InlineResponse20026';
import InlineResponse20027 from '../model/InlineResponse20027';
import InlineResponse20028 from '../model/InlineResponse20028';
import InlineResponse20029 from '../model/InlineResponse20029';
import InlineResponse2003 from '../model/InlineResponse2003';
import InlineResponse20030 from '../model/InlineResponse20030';
import InlineResponse20031 from '../model/InlineResponse20031';
import InlineResponse20032 from '../model/InlineResponse20032';
import InlineResponse20033 from '../model/InlineResponse20033';
import InlineResponse2004 from '../model/InlineResponse2004';
import InlineResponse2005 from '../model/InlineResponse2005';
import InlineResponse2006 from '../model/InlineResponse2006';
import InlineResponse2007 from '../model/InlineResponse2007';
import InlineResponse2008 from '../model/InlineResponse2008';
import InlineResponse2009 from '../model/InlineResponse2009';

/**
* Factset service.
* @module api/FactsetApi
*/
export default class FactsetApi {

    /**
    * Constructs a new FactsetApi. 
    * @alias module:api/FactsetApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * This endpoint returns selected ETP's asset allocations.
     * This endpoint returns selected ETP's allocations grouped by asset class. The response will be sorted by weight in descending order.
     * @param {String} symbol Market symbol of ETP defined by FactSet.
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.attributes Limit the attributes returned in the response to the specified set.
     * @param {Number} opts.paginationOffset Non-negative number of entries to skip, or 0 (default). (default to 0.0)
     * @param {Number} opts.paginationLimit Non-negative maximum number of entries to return. (default to 20.0)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse2001} and HTTP response
     */
    getFactsetEtfAllocationAssetListBySymbolWithHttpInfo(symbol, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'symbol' is set
      if (symbol === undefined || symbol === null) {
        throw new Error("Missing the required parameter 'symbol' when calling getFactsetEtfAllocationAssetListBySymbol");
      }

      let pathParams = {
      };
      let queryParams = {
        'symbol': symbol,
        '_attributes': this.apiClient.buildCollectionParam(opts['attributes'], 'csv'),
        '_paginationOffset': opts['paginationOffset'],
        '_paginationLimit': opts['paginationLimit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];


      let returnType = InlineResponse2001;

      return this.apiClient.callApi(
        '/factset/etf/allocation/asset/listBySymbol', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * This endpoint returns selected ETP's asset allocations.
     * This endpoint returns selected ETP's allocations grouped by asset class. The response will be sorted by weight in descending order.
     * @param {String} symbol Market symbol of ETP defined by FactSet.
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.attributes Limit the attributes returned in the response to the specified set.
     * @param {Number} opts.paginationOffset Non-negative number of entries to skip, or 0 (default). (default to 0.0)
     * @param {Number} opts.paginationLimit Non-negative maximum number of entries to return. (default to 20.0)
     * @return { Promise.< module:model/InlineResponse2001 > } a Promise, with data of type {@link module:model/InlineResponse2001 }
     */
    getFactsetEtfAllocationAssetListBySymbol(symbol, opts) {
      return this.getFactsetEtfAllocationAssetListBySymbolWithHttpInfo(symbol, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * This endpoint returns selected ETP's country allocations.
     * This endpoint returns selected ETP's allocations grouped by country names. The response will be sorted by weight in descending order.
     * @param {String} symbol Market symbol of ETP defined by FactSet.
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.attributes Limit the attributes returned in the response to the specified set.
     * @param {Number} opts.paginationOffset Non-negative number of entries to skip, or 0 (default). (default to 0.0)
     * @param {Number} opts.paginationLimit Non-negative maximum number of entries to return. (default to 20.0)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse2002} and HTTP response
     */
    getFactsetEtfAllocationCountryListBySymbolWithHttpInfo(symbol, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'symbol' is set
      if (symbol === undefined || symbol === null) {
        throw new Error("Missing the required parameter 'symbol' when calling getFactsetEtfAllocationCountryListBySymbol");
      }

      let pathParams = {
      };
      let queryParams = {
        'symbol': symbol,
        '_attributes': this.apiClient.buildCollectionParam(opts['attributes'], 'csv'),
        '_paginationOffset': opts['paginationOffset'],
        '_paginationLimit': opts['paginationLimit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];


      let returnType = InlineResponse2002;

      return this.apiClient.callApi(
        '/factset/etf/allocation/country/listBySymbol', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * This endpoint returns selected ETP's country allocations.
     * This endpoint returns selected ETP's allocations grouped by country names. The response will be sorted by weight in descending order.
     * @param {String} symbol Market symbol of ETP defined by FactSet.
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.attributes Limit the attributes returned in the response to the specified set.
     * @param {Number} opts.paginationOffset Non-negative number of entries to skip, or 0 (default). (default to 0.0)
     * @param {Number} opts.paginationLimit Non-negative maximum number of entries to return. (default to 20.0)
     * @return { Promise.< module:model/InlineResponse2002 > } a Promise, with data of type {@link module:model/InlineResponse2002 }
     */
    getFactsetEtfAllocationCountryListBySymbol(symbol, opts) {
      return this.getFactsetEtfAllocationCountryListBySymbolWithHttpInfo(symbol, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * This endpoint returns selected ETP's currency allocations.
     * This endpoint returns selected ETP's allocations grouped by currency. The response will be sorted by weight in descending order.
     * @param {String} symbol Market symbol of ETP defined by FactSet.
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.attributes Limit the attributes returned in the response to the specified set.
     * @param {Number} opts.paginationOffset Non-negative number of entries to skip, or 0 (default). (default to 0.0)
     * @param {Number} opts.paginationLimit Non-negative maximum number of entries to return. (default to 20.0)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse2003} and HTTP response
     */
    getFactsetEtfAllocationCurrencyListBySymbolWithHttpInfo(symbol, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'symbol' is set
      if (symbol === undefined || symbol === null) {
        throw new Error("Missing the required parameter 'symbol' when calling getFactsetEtfAllocationCurrencyListBySymbol");
      }

      let pathParams = {
      };
      let queryParams = {
        'symbol': symbol,
        '_attributes': this.apiClient.buildCollectionParam(opts['attributes'], 'csv'),
        '_paginationOffset': opts['paginationOffset'],
        '_paginationLimit': opts['paginationLimit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];


      let returnType = InlineResponse2003;

      return this.apiClient.callApi(
        '/factset/etf/allocation/currency/listBySymbol', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * This endpoint returns selected ETP's currency allocations.
     * This endpoint returns selected ETP's allocations grouped by currency. The response will be sorted by weight in descending order.
     * @param {String} symbol Market symbol of ETP defined by FactSet.
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.attributes Limit the attributes returned in the response to the specified set.
     * @param {Number} opts.paginationOffset Non-negative number of entries to skip, or 0 (default). (default to 0.0)
     * @param {Number} opts.paginationLimit Non-negative maximum number of entries to return. (default to 20.0)
     * @return { Promise.< module:model/InlineResponse2003 > } a Promise, with data of type {@link module:model/InlineResponse2003 }
     */
    getFactsetEtfAllocationCurrencyListBySymbol(symbol, opts) {
      return this.getFactsetEtfAllocationCurrencyListBySymbolWithHttpInfo(symbol, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List of allocations classified by a holding's economic development status.
     * List of allocations classified by a holding's economic development status (e.g. developed market, frontier market, emerging market).
     * @param {String} symbol Market symbol of ETP defined by FactSet.
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.attributes Limit the attributes returned in the response to the specified set.
     * @param {Number} opts.paginationOffset Non-negative number of entries to skip, or 0 (default). (default to 0.0)
     * @param {Number} opts.paginationLimit Non-negative maximum number of entries to return. (default to 20.0)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse2004} and HTTP response
     */
    getFactsetEtfAllocationEconomicDevelopmentListBySymbolWithHttpInfo(symbol, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'symbol' is set
      if (symbol === undefined || symbol === null) {
        throw new Error("Missing the required parameter 'symbol' when calling getFactsetEtfAllocationEconomicDevelopmentListBySymbol");
      }

      let pathParams = {
      };
      let queryParams = {
        'symbol': symbol,
        '_attributes': this.apiClient.buildCollectionParam(opts['attributes'], 'csv'),
        '_paginationOffset': opts['paginationOffset'],
        '_paginationLimit': opts['paginationLimit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];


      let returnType = InlineResponse2004;

      return this.apiClient.callApi(
        '/factset/etf/allocation/economicDevelopment/listBySymbol', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * List of allocations classified by a holding's economic development status.
     * List of allocations classified by a holding's economic development status (e.g. developed market, frontier market, emerging market).
     * @param {String} symbol Market symbol of ETP defined by FactSet.
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.attributes Limit the attributes returned in the response to the specified set.
     * @param {Number} opts.paginationOffset Non-negative number of entries to skip, or 0 (default). (default to 0.0)
     * @param {Number} opts.paginationLimit Non-negative maximum number of entries to return. (default to 20.0)
     * @return { Promise.< module:model/InlineResponse2004 > } a Promise, with data of type {@link module:model/InlineResponse2004 }
     */
    getFactsetEtfAllocationEconomicDevelopmentListBySymbol(symbol, opts) {
      return this.getFactsetEtfAllocationEconomicDevelopmentListBySymbolWithHttpInfo(symbol, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * This endpoint returns selected ETP's exchange allocations.
     * This endpoint returns selected ETP's allocations grouped by exchanges. The response will be sorted by weight in descending order.
     * @param {String} symbol Market symbol of ETP defined by FactSet.
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.attributes Limit the attributes returned in the response to the specified set.
     * @param {Number} opts.paginationOffset Non-negative number of entries to skip, or 0 (default). (default to 0.0)
     * @param {Number} opts.paginationLimit Non-negative maximum number of entries to return. (default to 20.0)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse2005} and HTTP response
     */
    getFactsetEtfAllocationExchangeListBySymbolWithHttpInfo(symbol, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'symbol' is set
      if (symbol === undefined || symbol === null) {
        throw new Error("Missing the required parameter 'symbol' when calling getFactsetEtfAllocationExchangeListBySymbol");
      }

      let pathParams = {
      };
      let queryParams = {
        'symbol': symbol,
        '_attributes': this.apiClient.buildCollectionParam(opts['attributes'], 'csv'),
        '_paginationOffset': opts['paginationOffset'],
        '_paginationLimit': opts['paginationLimit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];


      let returnType = InlineResponse2005;

      return this.apiClient.callApi(
        '/factset/etf/allocation/exchange/listBySymbol', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * This endpoint returns selected ETP's exchange allocations.
     * This endpoint returns selected ETP's allocations grouped by exchanges. The response will be sorted by weight in descending order.
     * @param {String} symbol Market symbol of ETP defined by FactSet.
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.attributes Limit the attributes returned in the response to the specified set.
     * @param {Number} opts.paginationOffset Non-negative number of entries to skip, or 0 (default). (default to 0.0)
     * @param {Number} opts.paginationLimit Non-negative maximum number of entries to return. (default to 20.0)
     * @return { Promise.< module:model/InlineResponse2005 > } a Promise, with data of type {@link module:model/InlineResponse2005 }
     */
    getFactsetEtfAllocationExchangeListBySymbol(symbol, opts) {
      return this.getFactsetEtfAllocationExchangeListBySymbolWithHttpInfo(symbol, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * This endpoint returns selected ETP's industry allocations.
     * This endpoint returns selected ETP's allocations grouped by industry. The response will be sorted by weight in descending order.
     * @param {String} symbol Market symbol of ETP defined by FactSet.
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.attributes Limit the attributes returned in the response to the specified set.
     * @param {Number} opts.paginationOffset Non-negative number of entries to skip, or 0 (default). (default to 0.0)
     * @param {Number} opts.paginationLimit Non-negative maximum number of entries to return. (default to 20.0)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse2006} and HTTP response
     */
    getFactsetEtfAllocationIndustryListBySymbolWithHttpInfo(symbol, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'symbol' is set
      if (symbol === undefined || symbol === null) {
        throw new Error("Missing the required parameter 'symbol' when calling getFactsetEtfAllocationIndustryListBySymbol");
      }

      let pathParams = {
      };
      let queryParams = {
        'symbol': symbol,
        '_attributes': this.apiClient.buildCollectionParam(opts['attributes'], 'csv'),
        '_paginationOffset': opts['paginationOffset'],
        '_paginationLimit': opts['paginationLimit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];


      let returnType = InlineResponse2006;

      return this.apiClient.callApi(
        '/factset/etf/allocation/industry/listBySymbol', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * This endpoint returns selected ETP's industry allocations.
     * This endpoint returns selected ETP's allocations grouped by industry. The response will be sorted by weight in descending order.
     * @param {String} symbol Market symbol of ETP defined by FactSet.
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.attributes Limit the attributes returned in the response to the specified set.
     * @param {Number} opts.paginationOffset Non-negative number of entries to skip, or 0 (default). (default to 0.0)
     * @param {Number} opts.paginationLimit Non-negative maximum number of entries to return. (default to 20.0)
     * @return { Promise.< module:model/InlineResponse2006 > } a Promise, with data of type {@link module:model/InlineResponse2006 }
     */
    getFactsetEtfAllocationIndustryListBySymbol(symbol, opts) {
      return this.getFactsetEtfAllocationIndustryListBySymbolWithHttpInfo(symbol, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List of allocations classified by a holding's total market capitalization.
     * List of allocations classified by a holding's total market capitalization (e.g. Small Cap, Mid Cap, Large Cap). Response will be sorted by weight in descending order.
     * @param {String} symbol Market symbol of ETP defined by FactSet.
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.attributes Limit the attributes returned in the response to the specified set.
     * @param {Number} opts.paginationOffset Non-negative number of entries to skip, or 0 (default). (default to 0.0)
     * @param {Number} opts.paginationLimit Non-negative maximum number of entries to return. (default to 20.0)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse2007} and HTTP response
     */
    getFactsetEtfAllocationMarketCapitalizationListBySymbolWithHttpInfo(symbol, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'symbol' is set
      if (symbol === undefined || symbol === null) {
        throw new Error("Missing the required parameter 'symbol' when calling getFactsetEtfAllocationMarketCapitalizationListBySymbol");
      }

      let pathParams = {
      };
      let queryParams = {
        'symbol': symbol,
        '_attributes': this.apiClient.buildCollectionParam(opts['attributes'], 'csv'),
        '_paginationOffset': opts['paginationOffset'],
        '_paginationLimit': opts['paginationLimit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];


      let returnType = InlineResponse2007;

      return this.apiClient.callApi(
        '/factset/etf/allocation/marketCapitalization/listBySymbol', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * List of allocations classified by a holding's total market capitalization.
     * List of allocations classified by a holding's total market capitalization (e.g. Small Cap, Mid Cap, Large Cap). Response will be sorted by weight in descending order.
     * @param {String} symbol Market symbol of ETP defined by FactSet.
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.attributes Limit the attributes returned in the response to the specified set.
     * @param {Number} opts.paginationOffset Non-negative number of entries to skip, or 0 (default). (default to 0.0)
     * @param {Number} opts.paginationLimit Non-negative maximum number of entries to return. (default to 20.0)
     * @return { Promise.< module:model/InlineResponse2007 > } a Promise, with data of type {@link module:model/InlineResponse2007 }
     */
    getFactsetEtfAllocationMarketCapitalizationListBySymbol(symbol, opts) {
      return this.getFactsetEtfAllocationMarketCapitalizationListBySymbolWithHttpInfo(symbol, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * This endpoint returns selected ETP's region allocations.
     * This endpoint returns selected ETP's allocations grouped by region names. The response will be sorted by weight in descending order.
     * @param {String} symbol Market symbol of ETP defined by FactSet.
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.attributes Limit the attributes returned in the response to the specified set.
     * @param {Number} opts.paginationOffset Non-negative number of entries to skip, or 0 (default). (default to 0.0)
     * @param {Number} opts.paginationLimit Non-negative maximum number of entries to return. (default to 20.0)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse2008} and HTTP response
     */
    getFactsetEtfAllocationRegionListBySymbolWithHttpInfo(symbol, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'symbol' is set
      if (symbol === undefined || symbol === null) {
        throw new Error("Missing the required parameter 'symbol' when calling getFactsetEtfAllocationRegionListBySymbol");
      }

      let pathParams = {
      };
      let queryParams = {
        'symbol': symbol,
        '_attributes': this.apiClient.buildCollectionParam(opts['attributes'], 'csv'),
        '_paginationOffset': opts['paginationOffset'],
        '_paginationLimit': opts['paginationLimit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];


      let returnType = InlineResponse2008;

      return this.apiClient.callApi(
        '/factset/etf/allocation/region/listBySymbol', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * This endpoint returns selected ETP's region allocations.
     * This endpoint returns selected ETP's allocations grouped by region names. The response will be sorted by weight in descending order.
     * @param {String} symbol Market symbol of ETP defined by FactSet.
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.attributes Limit the attributes returned in the response to the specified set.
     * @param {Number} opts.paginationOffset Non-negative number of entries to skip, or 0 (default). (default to 0.0)
     * @param {Number} opts.paginationLimit Non-negative maximum number of entries to return. (default to 20.0)
     * @return { Promise.< module:model/InlineResponse2008 > } a Promise, with data of type {@link module:model/InlineResponse2008 }
     */
    getFactsetEtfAllocationRegionListBySymbol(symbol, opts) {
      return this.getFactsetEtfAllocationRegionListBySymbolWithHttpInfo(symbol, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * This endpoint returns selected ETP's sector allocations.
     * This endpoint returns selected ETP's allocations grouped by sector names. The response will be sorted by weight in descending order.
     * @param {String} symbol Market symbol of ETP defined by FactSet.
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.attributes Limit the attributes returned in the response to the specified set.
     * @param {Number} opts.paginationOffset Non-negative number of entries to skip, or 0 (default). (default to 0.0)
     * @param {Number} opts.paginationLimit Non-negative maximum number of entries to return. (default to 20.0)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse2009} and HTTP response
     */
    getFactsetEtfAllocationSectorListBySymbolWithHttpInfo(symbol, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'symbol' is set
      if (symbol === undefined || symbol === null) {
        throw new Error("Missing the required parameter 'symbol' when calling getFactsetEtfAllocationSectorListBySymbol");
      }

      let pathParams = {
      };
      let queryParams = {
        'symbol': symbol,
        '_attributes': this.apiClient.buildCollectionParam(opts['attributes'], 'csv'),
        '_paginationOffset': opts['paginationOffset'],
        '_paginationLimit': opts['paginationLimit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];


      let returnType = InlineResponse2009;

      return this.apiClient.callApi(
        '/factset/etf/allocation/sector/listBySymbol', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * This endpoint returns selected ETP's sector allocations.
     * This endpoint returns selected ETP's allocations grouped by sector names. The response will be sorted by weight in descending order.
     * @param {String} symbol Market symbol of ETP defined by FactSet.
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.attributes Limit the attributes returned in the response to the specified set.
     * @param {Number} opts.paginationOffset Non-negative number of entries to skip, or 0 (default). (default to 0.0)
     * @param {Number} opts.paginationLimit Non-negative maximum number of entries to return. (default to 20.0)
     * @return { Promise.< module:model/InlineResponse2009 > } a Promise, with data of type {@link module:model/InlineResponse2009 }
     */
    getFactsetEtfAllocationSectorListBySymbol(symbol, opts) {
      return this.getFactsetEtfAllocationSectorListBySymbolWithHttpInfo(symbol, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * FactSet proprietary analytics datapoints for ETPs.
     * FactSet's proprietary analytical datapoints include ETP attributes specific to lending, corporate actions, and benchmarks.
     * @param {String} symbol Ticker-region of a security as defined by FactSet.
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.attributes Limit the attributes returned in the response to the specified set.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse20010} and HTTP response
     */
    getFactsetEtfAnalyticsGetBySymbolWithHttpInfo(symbol, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'symbol' is set
      if (symbol === undefined || symbol === null) {
        throw new Error("Missing the required parameter 'symbol' when calling getFactsetEtfAnalyticsGetBySymbol");
      }

      let pathParams = {
      };
      let queryParams = {
        'symbol': symbol,
        '_attributes': this.apiClient.buildCollectionParam(opts['attributes'], 'csv')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];


      let returnType = InlineResponse20010;

      return this.apiClient.callApi(
        '/factset/etf/analytics/getBySymbol', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * FactSet proprietary analytics datapoints for ETPs.
     * FactSet's proprietary analytical datapoints include ETP attributes specific to lending, corporate actions, and benchmarks.
     * @param {String} symbol Ticker-region of a security as defined by FactSet.
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.attributes Limit the attributes returned in the response to the specified set.
     * @return { Promise.< module:model/InlineResponse20010 > } a Promise, with data of type {@link module:model/InlineResponse20010 }
     */
    getFactsetEtfAnalyticsGetBySymbol(symbol, opts) {
      return this.getFactsetEtfAnalyticsGetBySymbolWithHttpInfo(symbol, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * FactSet's portfolio statistics for ETPs.
     * FactSet calculates several proprietary portfolio statistics for ETPs including average maturity, credit quality, price/book ratio, price/earnings ratio, and dividend yield.
     * @param {String} symbol Ticker-region of a security as defined by FactSet.
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.attributes Limit the attributes returned in the response to the specified set.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse20011} and HTTP response
     */
    getFactsetEtfAnalyticsHoldingsStatisticsGetBySymbolWithHttpInfo(symbol, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'symbol' is set
      if (symbol === undefined || symbol === null) {
        throw new Error("Missing the required parameter 'symbol' when calling getFactsetEtfAnalyticsHoldingsStatisticsGetBySymbol");
      }

      let pathParams = {
      };
      let queryParams = {
        'symbol': symbol,
        '_attributes': this.apiClient.buildCollectionParam(opts['attributes'], 'csv')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];


      let returnType = InlineResponse20011;

      return this.apiClient.callApi(
        '/factset/etf/analytics/holdings/statistics/getBySymbol', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * FactSet's portfolio statistics for ETPs.
     * FactSet calculates several proprietary portfolio statistics for ETPs including average maturity, credit quality, price/book ratio, price/earnings ratio, and dividend yield.
     * @param {String} symbol Ticker-region of a security as defined by FactSet.
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.attributes Limit the attributes returned in the response to the specified set.
     * @return { Promise.< module:model/InlineResponse20011 > } a Promise, with data of type {@link module:model/InlineResponse20011 }
     */
    getFactsetEtfAnalyticsHoldingsStatisticsGetBySymbol(symbol, opts) {
      return this.getFactsetEtfAnalyticsHoldingsStatisticsGetBySymbolWithHttpInfo(symbol, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * FactSet proprietary ETP rankings.
     * FactSet calculates various proprietary fund rankings including unique scores, fund grades, segment averages, and recommendations.
     * @param {String} symbol Ticker-region of a security as defined by FactSet.
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.attributes Limit the attributes returned in the response to the specified set.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse20012} and HTTP response
     */
    getFactsetEtfAnalyticsScoreGetBySymbolWithHttpInfo(symbol, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'symbol' is set
      if (symbol === undefined || symbol === null) {
        throw new Error("Missing the required parameter 'symbol' when calling getFactsetEtfAnalyticsScoreGetBySymbol");
      }

      let pathParams = {
      };
      let queryParams = {
        'symbol': symbol,
        '_attributes': this.apiClient.buildCollectionParam(opts['attributes'], 'csv')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];


      let returnType = InlineResponse20012;

      return this.apiClient.callApi(
        '/factset/etf/analytics/score/getBySymbol', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * FactSet proprietary ETP rankings.
     * FactSet calculates various proprietary fund rankings including unique scores, fund grades, segment averages, and recommendations.
     * @param {String} symbol Ticker-region of a security as defined by FactSet.
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.attributes Limit the attributes returned in the response to the specified set.
     * @return { Promise.< module:model/InlineResponse20012 > } a Promise, with data of type {@link module:model/InlineResponse20012 }
     */
    getFactsetEtfAnalyticsScoreGetBySymbol(symbol, opts) {
      return this.getFactsetEtfAnalyticsScoreGetBySymbolWithHttpInfo(symbol, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Trade statistics for specific ETP.
     * Various metrics of an ETP's liquidity including creation metrics, premium/discount, spread, and tracking error statistics.
     * @param {String} symbol Ticker-region of a security as defined by FactSet.
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.attributes Limit the attributes returned in the response to the specified set.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse20013} and HTTP response
     */
    getFactsetEtfAnalyticsTradeGetBySymbolWithHttpInfo(symbol, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'symbol' is set
      if (symbol === undefined || symbol === null) {
        throw new Error("Missing the required parameter 'symbol' when calling getFactsetEtfAnalyticsTradeGetBySymbol");
      }

      let pathParams = {
      };
      let queryParams = {
        'symbol': symbol,
        '_attributes': this.apiClient.buildCollectionParam(opts['attributes'], 'csv')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];


      let returnType = InlineResponse20013;

      return this.apiClient.callApi(
        '/factset/etf/analytics/trade/getBySymbol', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Trade statistics for specific ETP.
     * Various metrics of an ETP's liquidity including creation metrics, premium/discount, spread, and tracking error statistics.
     * @param {String} symbol Ticker-region of a security as defined by FactSet.
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.attributes Limit the attributes returned in the response to the specified set.
     * @return { Promise.< module:model/InlineResponse20013 > } a Promise, with data of type {@link module:model/InlineResponse20013 }
     */
    getFactsetEtfAnalyticsTradeGetBySymbol(symbol, opts) {
      return this.getFactsetEtfAnalyticsTradeGetBySymbolWithHttpInfo(symbol, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Retrieve basic characteristic information for a specified ETP.
     * An ETP has many unique characteristics specific to its composition that differentiate it from other products. This includes details on leverage, hedging, derivatives, and service providers.
     * @param {String} symbol Market symbol of ETF defined by FactSet.
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.attributes Limit the attributes returned in the response to the specified set.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse20014} and HTTP response
     */
    getFactsetEtfCharacteristicsGetBySymbolWithHttpInfo(symbol, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'symbol' is set
      if (symbol === undefined || symbol === null) {
        throw new Error("Missing the required parameter 'symbol' when calling getFactsetEtfCharacteristicsGetBySymbol");
      }

      let pathParams = {
      };
      let queryParams = {
        'symbol': symbol,
        '_attributes': this.apiClient.buildCollectionParam(opts['attributes'], 'csv')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];


      let returnType = InlineResponse20014;

      return this.apiClient.callApi(
        '/factset/etf/characteristics/getBySymbol', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Retrieve basic characteristic information for a specified ETP.
     * An ETP has many unique characteristics specific to its composition that differentiate it from other products. This includes details on leverage, hedging, derivatives, and service providers.
     * @param {String} symbol Market symbol of ETF defined by FactSet.
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.attributes Limit the attributes returned in the response to the specified set.
     * @return { Promise.< module:model/InlineResponse20014 > } a Promise, with data of type {@link module:model/InlineResponse20014 }
     */
    getFactsetEtfCharacteristicsGetBySymbol(symbol, opts) {
      return this.getFactsetEtfCharacteristicsGetBySymbolWithHttpInfo(symbol, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List of ETP class broad categories.
     * List of ETP class broad categories.
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.attributes Limit the attributes returned in the response to the specified set.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse20016} and HTTP response
     */
    getFactsetEtfClassCategoryBroadListWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        '_attributes': this.apiClient.buildCollectionParam(opts['attributes'], 'csv')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];


      let returnType = InlineResponse20016;

      return this.apiClient.callApi(
        '/factset/etf/class/category/broad/list', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * List of ETP class broad categories.
     * List of ETP class broad categories.
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.attributes Limit the attributes returned in the response to the specified set.
     * @return { Promise.< module:model/InlineResponse20016 > } a Promise, with data of type {@link module:model/InlineResponse20016 }
     */
    getFactsetEtfClassCategoryBroadList(opts) {
      return this.getFactsetEtfClassCategoryBroadListWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List of ETP class focus categories.
     * List of ETP class focus categories.
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.attributes Limit the attributes returned in the response to the specified set.
     * @param {Number} opts.paginationOffset Non-negative number of entries to skip, or 0 (default). (default to 0.0)
     * @param {Number} opts.paginationLimit Non-negative maximum number of entries to return. (default to 20.0)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse20017} and HTTP response
     */
    getFactsetEtfClassCategoryFocusListWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        '_attributes': this.apiClient.buildCollectionParam(opts['attributes'], 'csv'),
        '_paginationOffset': opts['paginationOffset'],
        '_paginationLimit': opts['paginationLimit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];


      let returnType = InlineResponse20017;

      return this.apiClient.callApi(
        '/factset/etf/class/category/focus/list', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * List of ETP class focus categories.
     * List of ETP class focus categories.
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.attributes Limit the attributes returned in the response to the specified set.
     * @param {Number} opts.paginationOffset Non-negative number of entries to skip, or 0 (default). (default to 0.0)
     * @param {Number} opts.paginationLimit Non-negative maximum number of entries to return. (default to 20.0)
     * @return { Promise.< module:model/InlineResponse20017 > } a Promise, with data of type {@link module:model/InlineResponse20017 }
     */
    getFactsetEtfClassCategoryFocusList(opts) {
      return this.getFactsetEtfClassCategoryFocusListWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List of ETP class niche categories.
     * List of ETP class niche categories.
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.attributes Limit the attributes returned in the response to the specified set.
     * @param {Number} opts.paginationOffset Non-negative number of entries to skip, or 0 (default). (default to 0.0)
     * @param {Number} opts.paginationLimit Non-negative maximum number of entries to return. (default to 20.0)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse20018} and HTTP response
     */
    getFactsetEtfClassCategoryNicheListWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        '_attributes': this.apiClient.buildCollectionParam(opts['attributes'], 'csv'),
        '_paginationOffset': opts['paginationOffset'],
        '_paginationLimit': opts['paginationLimit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];


      let returnType = InlineResponse20018;

      return this.apiClient.callApi(
        '/factset/etf/class/category/niche/list', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * List of ETP class niche categories.
     * List of ETP class niche categories.
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.attributes Limit the attributes returned in the response to the specified set.
     * @param {Number} opts.paginationOffset Non-negative number of entries to skip, or 0 (default). (default to 0.0)
     * @param {Number} opts.paginationLimit Non-negative maximum number of entries to return. (default to 20.0)
     * @return { Promise.< module:model/InlineResponse20018 > } a Promise, with data of type {@link module:model/InlineResponse20018 }
     */
    getFactsetEtfClassCategoryNicheList(opts) {
      return this.getFactsetEtfClassCategoryNicheListWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List of ETP class geographies.
     * List of ETP class geographies.
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.attributes Limit the attributes returned in the response to the specified set.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse20019} and HTTP response
     */
    getFactsetEtfClassGeographyListWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        '_attributes': this.apiClient.buildCollectionParam(opts['attributes'], 'csv')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];


      let returnType = InlineResponse20019;

      return this.apiClient.callApi(
        '/factset/etf/class/geography/list', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * List of ETP class geographies.
     * List of ETP class geographies.
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.attributes Limit the attributes returned in the response to the specified set.
     * @return { Promise.< module:model/InlineResponse20019 > } a Promise, with data of type {@link module:model/InlineResponse20019 }
     */
    getFactsetEtfClassGeographyList(opts) {
      return this.getFactsetEtfClassGeographyListWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Retrieve an ETP's classification specific to asset class, geography, or investment strategy.
     * ETP classification is divided into three categories: Asset Class, Geography, and Investment Strategy. Asset class is determined based on the various asset types held by the fund, A fund's geography can be classified by region (e.g. Asia-Pac), specific geography (e.g. China) or economic development (e.g. BRIC). An ETP's investment strategy is classified in broad categories (e.g. Large Cap) and more granular categorizations.
     * @param {String} symbol Market symbol of ETP defined by FactSet.
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.attributes Limit the attributes returned in the response to the specified set.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse20015} and HTTP response
     */
    getFactsetEtfClassGetBySymbolWithHttpInfo(symbol, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'symbol' is set
      if (symbol === undefined || symbol === null) {
        throw new Error("Missing the required parameter 'symbol' when calling getFactsetEtfClassGetBySymbol");
      }

      let pathParams = {
      };
      let queryParams = {
        'symbol': symbol,
        '_attributes': this.apiClient.buildCollectionParam(opts['attributes'], 'csv')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];


      let returnType = InlineResponse20015;

      return this.apiClient.callApi(
        '/factset/etf/class/getBySymbol', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Retrieve an ETP's classification specific to asset class, geography, or investment strategy.
     * ETP classification is divided into three categories: Asset Class, Geography, and Investment Strategy. Asset class is determined based on the various asset types held by the fund, A fund's geography can be classified by region (e.g. Asia-Pac), specific geography (e.g. China) or economic development (e.g. BRIC). An ETP's investment strategy is classified in broad categories (e.g. Large Cap) and more granular categorizations.
     * @param {String} symbol Market symbol of ETP defined by FactSet.
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.attributes Limit the attributes returned in the response to the specified set.
     * @return { Promise.< module:model/InlineResponse20015 > } a Promise, with data of type {@link module:model/InlineResponse20015 }
     */
    getFactsetEtfClassGetBySymbol(symbol, opts) {
      return this.getFactsetEtfClassGetBySymbolWithHttpInfo(symbol, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * FactSet's proprietary list of competing companies.
     * FactSet defines and maintains a proprietary list of competing companies based on a number of attributes specific to a fund.
     * @param {String} symbol Ticker-region of a security as defined by FactSet.
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.attributes Limit the attributes returned in the response to the specified set.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse20020} and HTTP response
     */
    getFactsetEtfCompetitorsListBySymbolWithHttpInfo(symbol, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'symbol' is set
      if (symbol === undefined || symbol === null) {
        throw new Error("Missing the required parameter 'symbol' when calling getFactsetEtfCompetitorsListBySymbol");
      }

      let pathParams = {
      };
      let queryParams = {
        'symbol': symbol,
        '_attributes': this.apiClient.buildCollectionParam(opts['attributes'], 'csv')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];


      let returnType = InlineResponse20020;

      return this.apiClient.callApi(
        '/factset/etf/competitors/listBySymbol', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * FactSet's proprietary list of competing companies.
     * FactSet defines and maintains a proprietary list of competing companies based on a number of attributes specific to a fund.
     * @param {String} symbol Ticker-region of a security as defined by FactSet.
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.attributes Limit the attributes returned in the response to the specified set.
     * @return { Promise.< module:model/InlineResponse20020 > } a Promise, with data of type {@link module:model/InlineResponse20020 }
     */
    getFactsetEtfCompetitorsListBySymbol(symbol, opts) {
      return this.getFactsetEtfCompetitorsListBySymbolWithHttpInfo(symbol, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Retrieve an ETP's current distribution details.
     * Retrieve distribution-related details for a specific ETP including dividend and capital gain distribution details.
     * @param {String} symbol Market symbol of ETP defined by FactSet.
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.attributes Limit the attributes returned in the response to the specified set.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse20021} and HTTP response
     */
    getFactsetEtfDistributionGetBySymbolWithHttpInfo(symbol, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'symbol' is set
      if (symbol === undefined || symbol === null) {
        throw new Error("Missing the required parameter 'symbol' when calling getFactsetEtfDistributionGetBySymbol");
      }

      let pathParams = {
      };
      let queryParams = {
        'symbol': symbol,
        '_attributes': this.apiClient.buildCollectionParam(opts['attributes'], 'csv')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];


      let returnType = InlineResponse20021;

      return this.apiClient.callApi(
        '/factset/etf/distribution/getBySymbol', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Retrieve an ETP's current distribution details.
     * Retrieve distribution-related details for a specific ETP including dividend and capital gain distribution details.
     * @param {String} symbol Market symbol of ETP defined by FactSet.
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.attributes Limit the attributes returned in the response to the specified set.
     * @return { Promise.< module:model/InlineResponse20021 > } a Promise, with data of type {@link module:model/InlineResponse20021 }
     */
    getFactsetEtfDistributionGetBySymbol(symbol, opts) {
      return this.getFactsetEtfDistributionGetBySymbolWithHttpInfo(symbol, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Retrieve an ETP's cash inflow/outflows for various time periods.
     * Retrieve the amount invested or divested in a specific ETP over various time periods including one-day, one-week, one-month, one-year, and YTD.
     * @param {String} symbol Market symbol of ETP defined by FactSet.
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.attributes Limit the attributes returned in the response to the specified set.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse20022} and HTTP response
     */
    getFactsetEtfFundFlowsGetBySymbolWithHttpInfo(symbol, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'symbol' is set
      if (symbol === undefined || symbol === null) {
        throw new Error("Missing the required parameter 'symbol' when calling getFactsetEtfFundFlowsGetBySymbol");
      }

      let pathParams = {
      };
      let queryParams = {
        'symbol': symbol,
        '_attributes': this.apiClient.buildCollectionParam(opts['attributes'], 'csv')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];


      let returnType = InlineResponse20022;

      return this.apiClient.callApi(
        '/factset/etf/fundFlows/getBySymbol', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Retrieve an ETP's cash inflow/outflows for various time periods.
     * Retrieve the amount invested or divested in a specific ETP over various time periods including one-day, one-week, one-month, one-year, and YTD.
     * @param {String} symbol Market symbol of ETP defined by FactSet.
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.attributes Limit the attributes returned in the response to the specified set.
     * @return { Promise.< module:model/InlineResponse20022 > } a Promise, with data of type {@link module:model/InlineResponse20022 }
     */
    getFactsetEtfFundFlowsGetBySymbol(symbol, opts) {
      return this.getFactsetEtfFundFlowsGetBySymbolWithHttpInfo(symbol, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Retrieve basic profile information for a specified ETP.
     * An ETP can be profiled by defining several common attributes such as issuer, fund description, and benchmark.
     * @param {String} symbol Market symbol of ETP defined by FactSet.
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.attributes Limit the attributes returned in the response to the specified set.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse200} and HTTP response
     */
    getFactsetEtfGetBySymbolWithHttpInfo(symbol, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'symbol' is set
      if (symbol === undefined || symbol === null) {
        throw new Error("Missing the required parameter 'symbol' when calling getFactsetEtfGetBySymbol");
      }

      let pathParams = {
      };
      let queryParams = {
        'symbol': symbol,
        '_attributes': this.apiClient.buildCollectionParam(opts['attributes'], 'csv')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];


      let returnType = InlineResponse200;

      return this.apiClient.callApi(
        '/factset/etf/getBySymbol', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Retrieve basic profile information for a specified ETP.
     * An ETP can be profiled by defining several common attributes such as issuer, fund description, and benchmark.
     * @param {String} symbol Market symbol of ETP defined by FactSet.
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.attributes Limit the attributes returned in the response to the specified set.
     * @return { Promise.< module:model/InlineResponse200 > } a Promise, with data of type {@link module:model/InlineResponse200 }
     */
    getFactsetEtfGetBySymbol(symbol, opts) {
      return this.getFactsetEtfGetBySymbolWithHttpInfo(symbol, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * This endpoint returns selected ETP's Growth of 10K calculated values.
     * Growth of 10K (or growth of 10,000) is a commonly used chart that highlights the change in the value of an initial 10,000 investment in the ETP during a given period of time. Often, this period of time is either since inception or the calculation between the pre-defined range.
     * @param {String} symbol Market symbol of ETP defined by FactSet.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} opts.timePeriod Historice NAV date value.
     * @param {module:model/String} opts.calculationType Historice NAV date value.
     * @param {module:model/String} opts.alignment Indicates the reference point for growth of 10k data.
     * @param {Array.<String>} opts.attributes Limit the attributes returned in the response to the specified set.
     * @param {Number} opts.paginationOffset Non-negative number of entries to skip, or 0 (default). (default to 0.0)
     * @param {Number} opts.paginationLimit Non-negative maximum number of entries to return. (default to 20.0)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse20023} and HTTP response
     */
    getFactsetEtfGrowthOfTenKListBySymbolWithHttpInfo(symbol, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'symbol' is set
      if (symbol === undefined || symbol === null) {
        throw new Error("Missing the required parameter 'symbol' when calling getFactsetEtfGrowthOfTenKListBySymbol");
      }

      let pathParams = {
      };
      let queryParams = {
        'symbol': symbol,
        'timePeriod': opts['timePeriod'],
        'calculationType': opts['calculationType'],
        'alignment': opts['alignment'],
        '_attributes': this.apiClient.buildCollectionParam(opts['attributes'], 'csv'),
        '_paginationOffset': opts['paginationOffset'],
        '_paginationLimit': opts['paginationLimit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];


      let returnType = InlineResponse20023;

      return this.apiClient.callApi(
        '/factset/etf/growthOfTenK/listBySymbol', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * This endpoint returns selected ETP's Growth of 10K calculated values.
     * Growth of 10K (or growth of 10,000) is a commonly used chart that highlights the change in the value of an initial 10,000 investment in the ETP during a given period of time. Often, this period of time is either since inception or the calculation between the pre-defined range.
     * @param {String} symbol Market symbol of ETP defined by FactSet.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} opts.timePeriod Historice NAV date value.
     * @param {module:model/String} opts.calculationType Historice NAV date value.
     * @param {module:model/String} opts.alignment Indicates the reference point for growth of 10k data.
     * @param {Array.<String>} opts.attributes Limit the attributes returned in the response to the specified set.
     * @param {Number} opts.paginationOffset Non-negative number of entries to skip, or 0 (default). (default to 0.0)
     * @param {Number} opts.paginationLimit Non-negative maximum number of entries to return. (default to 20.0)
     * @return { Promise.< module:model/InlineResponse20023 > } a Promise, with data of type {@link module:model/InlineResponse20023 }
     */
    getFactsetEtfGrowthOfTenKListBySymbol(symbol, opts) {
      return this.getFactsetEtfGrowthOfTenKListBySymbolWithHttpInfo(symbol, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Holdings details for an individual ETP.
     * Retrieve an ETP's holdings information including security, shares held, and weight.
     * @param {String} symbol Market symbol of ETP defined by FactSet.
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.attributes Limit the attributes returned in the response to the specified set.
     * @param {Number} opts.paginationOffset Non-negative number of entries to skip, or 0 (default). (default to 0.0)
     * @param {Number} opts.paginationLimit Non-negative maximum number of entries to return. (default to 20.0)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse20024} and HTTP response
     */
    getFactsetEtfHoldingsListBySymbolWithHttpInfo(symbol, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'symbol' is set
      if (symbol === undefined || symbol === null) {
        throw new Error("Missing the required parameter 'symbol' when calling getFactsetEtfHoldingsListBySymbol");
      }

      let pathParams = {
      };
      let queryParams = {
        'symbol': symbol,
        '_attributes': this.apiClient.buildCollectionParam(opts['attributes'], 'csv'),
        '_paginationOffset': opts['paginationOffset'],
        '_paginationLimit': opts['paginationLimit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];


      let returnType = InlineResponse20024;

      return this.apiClient.callApi(
        '/factset/etf/holdings/listBySymbol', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Holdings details for an individual ETP.
     * Retrieve an ETP's holdings information including security, shares held, and weight.
     * @param {String} symbol Market symbol of ETP defined by FactSet.
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.attributes Limit the attributes returned in the response to the specified set.
     * @param {Number} opts.paginationOffset Non-negative number of entries to skip, or 0 (default). (default to 0.0)
     * @param {Number} opts.paginationLimit Non-negative maximum number of entries to return. (default to 20.0)
     * @return { Promise.< module:model/InlineResponse20024 > } a Promise, with data of type {@link module:model/InlineResponse20024 }
     */
    getFactsetEtfHoldingsListBySymbol(symbol, opts) {
      return this.getFactsetEtfHoldingsListBySymbolWithHttpInfo(symbol, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Market aggregate data for ETPs.
     * Market Aggregates combines FactSet Estimates, FactSet Fundamentals, and FactSet Prices data to derive ratios and per share values on an aggregate level. The resulting index values can be used to identify market trends and compare a combination of portfolios, benchmarks, and individual securities.
     * @param {String} symbol Ticker-region of an ETP as defined by FactSet.
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.attributes Limit the attributes returned in the response to the specified set.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse20025} and HTTP response
     */
    getFactsetEtfMarketAggregatesGetBySymbolWithHttpInfo(symbol, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'symbol' is set
      if (symbol === undefined || symbol === null) {
        throw new Error("Missing the required parameter 'symbol' when calling getFactsetEtfMarketAggregatesGetBySymbol");
      }

      let pathParams = {
      };
      let queryParams = {
        'symbol': symbol,
        '_attributes': this.apiClient.buildCollectionParam(opts['attributes'], 'csv')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];


      let returnType = InlineResponse20025;

      return this.apiClient.callApi(
        '/factset/etf/marketAggregates/getBySymbol', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Market aggregate data for ETPs.
     * Market Aggregates combines FactSet Estimates, FactSet Fundamentals, and FactSet Prices data to derive ratios and per share values on an aggregate level. The resulting index values can be used to identify market trends and compare a combination of portfolios, benchmarks, and individual securities.
     * @param {String} symbol Ticker-region of an ETP as defined by FactSet.
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.attributes Limit the attributes returned in the response to the specified set.
     * @return { Promise.< module:model/InlineResponse20025 > } a Promise, with data of type {@link module:model/InlineResponse20025 }
     */
    getFactsetEtfMarketAggregatesGetBySymbol(symbol, opts) {
      return this.getFactsetEtfMarketAggregatesGetBySymbolWithHttpInfo(symbol, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Summary of ETP premium discount data.
     * Summary of ETP premium discount data.
     * @param {String} symbol Market symbol of ETP defined by FactSet.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} opts.timePeriod Time frame of the data. (default to 'YTD')
     * @param {module:model/String} opts.alignment Indicates the reference point for the historical NAV and price values. (default to 'quarter-end')
     * @param {Array.<String>} opts.attributes Limit the attributes returned in the response to the specified set.
     * @param {Number} opts.paginationOffset Non-negative number of entries to skip, or 0 (default). (default to 0.0)
     * @param {Number} opts.paginationLimit Non-negative maximum number of entries to return. (default to 20.0)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse20026} and HTTP response
     */
    getFactsetEtfPremiumDiscountSummaryListBySymbolWithHttpInfo(symbol, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'symbol' is set
      if (symbol === undefined || symbol === null) {
        throw new Error("Missing the required parameter 'symbol' when calling getFactsetEtfPremiumDiscountSummaryListBySymbol");
      }

      let pathParams = {
      };
      let queryParams = {
        'symbol': symbol,
        'timePeriod': opts['timePeriod'],
        'alignment': opts['alignment'],
        '_attributes': this.apiClient.buildCollectionParam(opts['attributes'], 'csv'),
        '_paginationOffset': opts['paginationOffset'],
        '_paginationLimit': opts['paginationLimit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];


      let returnType = InlineResponse20026;

      return this.apiClient.callApi(
        '/factset/etf/premiumDiscount/summary/listBySymbol', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Summary of ETP premium discount data.
     * Summary of ETP premium discount data.
     * @param {String} symbol Market symbol of ETP defined by FactSet.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} opts.timePeriod Time frame of the data. (default to 'YTD')
     * @param {module:model/String} opts.alignment Indicates the reference point for the historical NAV and price values. (default to 'quarter-end')
     * @param {Array.<String>} opts.attributes Limit the attributes returned in the response to the specified set.
     * @param {Number} opts.paginationOffset Non-negative number of entries to skip, or 0 (default). (default to 0.0)
     * @param {Number} opts.paginationLimit Non-negative maximum number of entries to return. (default to 20.0)
     * @return { Promise.< module:model/InlineResponse20026 > } a Promise, with data of type {@link module:model/InlineResponse20026 }
     */
    getFactsetEtfPremiumDiscountSummaryListBySymbol(symbol, opts) {
      return this.getFactsetEtfPremiumDiscountSummaryListBySymbolWithHttpInfo(symbol, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Retrieve historical ETP NAV values.
     * Retrieve an ETP's historical NAV and shares outstanding for a specified time range.
     * @param {String} symbol Market symbol of ETP defined by FactSet.
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.attributes Limit the attributes returned in the response to the specified set.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse20027} and HTTP response
     */
    getFactsetEtfPriceGetBySymbolWithHttpInfo(symbol, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'symbol' is set
      if (symbol === undefined || symbol === null) {
        throw new Error("Missing the required parameter 'symbol' when calling getFactsetEtfPriceGetBySymbol");
      }

      let pathParams = {
      };
      let queryParams = {
        'symbol': symbol,
        '_attributes': this.apiClient.buildCollectionParam(opts['attributes'], 'csv')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];


      let returnType = InlineResponse20027;

      return this.apiClient.callApi(
        '/factset/etf/price/getBySymbol', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Retrieve historical ETP NAV values.
     * Retrieve an ETP's historical NAV and shares outstanding for a specified time range.
     * @param {String} symbol Market symbol of ETP defined by FactSet.
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.attributes Limit the attributes returned in the response to the specified set.
     * @return { Promise.< module:model/InlineResponse20027 > } a Promise, with data of type {@link module:model/InlineResponse20027 }
     */
    getFactsetEtfPriceGetBySymbol(symbol, opts) {
      return this.getFactsetEtfPriceGetBySymbolWithHttpInfo(symbol, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Retrieve total return data for a specified ETP.
     * An ETP's total return data can be returned for various time frames including 1-month, 3-month, YTD, 1-year, 3-year, and 5-year. Total return calculations include price performance plus reinvested and compounded distributions. Market price is used to calcualte market returns. Portfolio nav is used to calcualte nav returns.
     * @param {String} symbol Market symbol of ETP defined by FactSet.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} opts.returnType Return type. (default to 'price')
     * @param {Array.<String>} opts.attributes Limit the attributes returned in the response to the specified set.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse20028} and HTTP response
     */
    getFactsetEtfReturnsGetBySymbolWithHttpInfo(symbol, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'symbol' is set
      if (symbol === undefined || symbol === null) {
        throw new Error("Missing the required parameter 'symbol' when calling getFactsetEtfReturnsGetBySymbol");
      }

      let pathParams = {
      };
      let queryParams = {
        'symbol': symbol,
        'returnType': opts['returnType'],
        '_attributes': this.apiClient.buildCollectionParam(opts['attributes'], 'csv')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];


      let returnType = InlineResponse20028;

      return this.apiClient.callApi(
        '/factset/etf/returns/getBySymbol', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Retrieve total return data for a specified ETP.
     * An ETP's total return data can be returned for various time frames including 1-month, 3-month, YTD, 1-year, 3-year, and 5-year. Total return calculations include price performance plus reinvested and compounded distributions. Market price is used to calcualte market returns. Portfolio nav is used to calcualte nav returns.
     * @param {String} symbol Market symbol of ETP defined by FactSet.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} opts.returnType Return type. (default to 'price')
     * @param {Array.<String>} opts.attributes Limit the attributes returned in the response to the specified set.
     * @return { Promise.< module:model/InlineResponse20028 > } a Promise, with data of type {@link module:model/InlineResponse20028 }
     */
    getFactsetEtfReturnsGetBySymbol(symbol, opts) {
      return this.getFactsetEtfReturnsGetBySymbolWithHttpInfo(symbol, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Retrieve various classification details for a specified ETP.
     * ETP's can be classified in many different ways including investment strategy, security weightings, and fund composition.
     * @param {String} symbol Market symbol of ETP defined by FactSet.
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.attributes Limit the attributes returned in the response to the specified set.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse20029} and HTTP response
     */
    getFactsetEtfStrategyGetBySymbolWithHttpInfo(symbol, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'symbol' is set
      if (symbol === undefined || symbol === null) {
        throw new Error("Missing the required parameter 'symbol' when calling getFactsetEtfStrategyGetBySymbol");
      }

      let pathParams = {
      };
      let queryParams = {
        'symbol': symbol,
        '_attributes': this.apiClient.buildCollectionParam(opts['attributes'], 'csv')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];


      let returnType = InlineResponse20029;

      return this.apiClient.callApi(
        '/factset/etf/strategy/getBySymbol', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Retrieve various classification details for a specified ETP.
     * ETP's can be classified in many different ways including investment strategy, security weightings, and fund composition.
     * @param {String} symbol Market symbol of ETP defined by FactSet.
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.attributes Limit the attributes returned in the response to the specified set.
     * @return { Promise.< module:model/InlineResponse20029 > } a Promise, with data of type {@link module:model/InlineResponse20029 }
     */
    getFactsetEtfStrategyGetBySymbol(symbol, opts) {
      return this.getFactsetEtfStrategyGetBySymbolWithHttpInfo(symbol, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Retrieve a list of ETP strategy segments.
     * Retrieve the various segments assigned to a specific ETP. Segment data is used to group funds for comparison and relative performance analyses.
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.attributes Limit the attributes returned in the response to the specified set.
     * @param {Number} opts.paginationOffset Non-negative number of entries to skip, or 0 (default). (default to 0.0)
     * @param {Number} opts.paginationLimit Non-negative maximum number of entries to return. (default to 20.0)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse20030} and HTTP response
     */
    getFactsetEtfStrategySegmentListWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        '_attributes': this.apiClient.buildCollectionParam(opts['attributes'], 'csv'),
        '_paginationOffset': opts['paginationOffset'],
        '_paginationLimit': opts['paginationLimit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];


      let returnType = InlineResponse20030;

      return this.apiClient.callApi(
        '/factset/etf/strategy/segment/list', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Retrieve a list of ETP strategy segments.
     * Retrieve the various segments assigned to a specific ETP. Segment data is used to group funds for comparison and relative performance analyses.
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.attributes Limit the attributes returned in the response to the specified set.
     * @param {Number} opts.paginationOffset Non-negative number of entries to skip, or 0 (default). (default to 0.0)
     * @param {Number} opts.paginationLimit Non-negative maximum number of entries to return. (default to 20.0)
     * @return { Promise.< module:model/InlineResponse20030 > } a Promise, with data of type {@link module:model/InlineResponse20030 }
     */
    getFactsetEtfStrategySegmentList(opts) {
      return this.getFactsetEtfStrategySegmentListWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Retrieve the basic structure information for a specified ETP.
     * Retrieve details on a fund's structure including its type, investment style (active/passive), and legal structure.
     * @param {String} symbol Market symbol of ETP defined by FactSet.
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.attributes Limit the attributes returned in the response to the specified set.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse20031} and HTTP response
     */
    getFactsetEtfStructureGetBySymbolWithHttpInfo(symbol, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'symbol' is set
      if (symbol === undefined || symbol === null) {
        throw new Error("Missing the required parameter 'symbol' when calling getFactsetEtfStructureGetBySymbol");
      }

      let pathParams = {
      };
      let queryParams = {
        'symbol': symbol,
        '_attributes': this.apiClient.buildCollectionParam(opts['attributes'], 'csv')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];


      let returnType = InlineResponse20031;

      return this.apiClient.callApi(
        '/factset/etf/structure/getBySymbol', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Retrieve the basic structure information for a specified ETP.
     * Retrieve details on a fund's structure including its type, investment style (active/passive), and legal structure.
     * @param {String} symbol Market symbol of ETP defined by FactSet.
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.attributes Limit the attributes returned in the response to the specified set.
     * @return { Promise.< module:model/InlineResponse20031 > } a Promise, with data of type {@link module:model/InlineResponse20031 }
     */
    getFactsetEtfStructureGetBySymbol(symbol, opts) {
      return this.getFactsetEtfStructureGetBySymbolWithHttpInfo(symbol, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Retrieve the tax and fee related information for a specified ETP.
     * Retrieve various fee and tax related details on a specified ETP including expense ratio and tax treatment for dividends and capital gains.
     * @param {String} symbol Market symbol of ETP defined by FactSet.
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.attributes Limit the attributes returned in the response to the specified set.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse20032} and HTTP response
     */
    getFactsetEtfTaxesAndFeesUsGetBySymbolWithHttpInfo(symbol, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'symbol' is set
      if (symbol === undefined || symbol === null) {
        throw new Error("Missing the required parameter 'symbol' when calling getFactsetEtfTaxesAndFeesUsGetBySymbol");
      }

      let pathParams = {
      };
      let queryParams = {
        'symbol': symbol,
        '_attributes': this.apiClient.buildCollectionParam(opts['attributes'], 'csv')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];


      let returnType = InlineResponse20032;

      return this.apiClient.callApi(
        '/factset/etf/taxesAndFees/us/getBySymbol', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Retrieve the tax and fee related information for a specified ETP.
     * Retrieve various fee and tax related details on a specified ETP including expense ratio and tax treatment for dividends and capital gains.
     * @param {String} symbol Market symbol of ETP defined by FactSet.
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.attributes Limit the attributes returned in the response to the specified set.
     * @return { Promise.< module:model/InlineResponse20032 > } a Promise, with data of type {@link module:model/InlineResponse20032 }
     */
    getFactsetEtfTaxesAndFeesUsGetBySymbol(symbol, opts) {
      return this.getFactsetEtfTaxesAndFeesUsGetBySymbolWithHttpInfo(symbol, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Retrieve historical NAV data for a specified ETP.
     * Retrieve the historical NAV data and the respective fund flows and shares outstanding for a specified fund and time period. Please refer currency.fund in /factset/etf/getBySymbol for currency value.
     * @param {String} symbol Market symbol of ETP defined by FactSet.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} opts.timePeriod Time frame of the data. (default to '1Y')
     * @param {module:model/String} opts.alignment Indicates the reference point for the time series data.
     * @param {Array.<String>} opts.attributes Limit the attributes returned in the response to the specified set.
     * @param {Number} opts.paginationOffset Non-negative number of entries to skip, or 0 (default). (default to 0.0)
     * @param {Number} opts.paginationLimit Non-negative maximum number of entries to return. (default to 20.0)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse20033} and HTTP response
     */
    getFactsetEtfTimeSeriesListBySymbolWithHttpInfo(symbol, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'symbol' is set
      if (symbol === undefined || symbol === null) {
        throw new Error("Missing the required parameter 'symbol' when calling getFactsetEtfTimeSeriesListBySymbol");
      }

      let pathParams = {
      };
      let queryParams = {
        'symbol': symbol,
        'timePeriod': opts['timePeriod'],
        'alignment': opts['alignment'],
        '_attributes': this.apiClient.buildCollectionParam(opts['attributes'], 'csv'),
        '_paginationOffset': opts['paginationOffset'],
        '_paginationLimit': opts['paginationLimit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];


      let returnType = InlineResponse20033;

      return this.apiClient.callApi(
        '/factset/etf/timeSeries/listBySymbol', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Retrieve historical NAV data for a specified ETP.
     * Retrieve the historical NAV data and the respective fund flows and shares outstanding for a specified fund and time period. Please refer currency.fund in /factset/etf/getBySymbol for currency value.
     * @param {String} symbol Market symbol of ETP defined by FactSet.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} opts.timePeriod Time frame of the data. (default to '1Y')
     * @param {module:model/String} opts.alignment Indicates the reference point for the time series data.
     * @param {Array.<String>} opts.attributes Limit the attributes returned in the response to the specified set.
     * @param {Number} opts.paginationOffset Non-negative number of entries to skip, or 0 (default). (default to 0.0)
     * @param {Number} opts.paginationLimit Non-negative maximum number of entries to return. (default to 20.0)
     * @return { Promise.< module:model/InlineResponse20033 > } a Promise, with data of type {@link module:model/InlineResponse20033 }
     */
    getFactsetEtfTimeSeriesListBySymbol(symbol, opts) {
      return this.getFactsetEtfTimeSeriesListBySymbolWithHttpInfo(symbol, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}





