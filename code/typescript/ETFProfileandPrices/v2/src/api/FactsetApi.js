/**
 * Prime Developer Trial
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import InlineResponse200 from '../model/InlineResponse200';
import InlineResponse2001 from '../model/InlineResponse2001';
import InlineResponse20010 from '../model/InlineResponse20010';
import InlineResponse20011 from '../model/InlineResponse20011';
import InlineResponse20012 from '../model/InlineResponse20012';
import InlineResponse20013 from '../model/InlineResponse20013';
import InlineResponse20014 from '../model/InlineResponse20014';
import InlineResponse20015 from '../model/InlineResponse20015';
import InlineResponse20016 from '../model/InlineResponse20016';
import InlineResponse20017 from '../model/InlineResponse20017';
import InlineResponse20018 from '../model/InlineResponse20018';
import InlineResponse20019 from '../model/InlineResponse20019';
import InlineResponse2002 from '../model/InlineResponse2002';
import InlineResponse20020 from '../model/InlineResponse20020';
import InlineResponse20021 from '../model/InlineResponse20021';
import InlineResponse20022 from '../model/InlineResponse20022';
import InlineResponse2003 from '../model/InlineResponse2003';
import InlineResponse2004 from '../model/InlineResponse2004';
import InlineResponse2005 from '../model/InlineResponse2005';
import InlineResponse2006 from '../model/InlineResponse2006';
import InlineResponse2007 from '../model/InlineResponse2007';
import InlineResponse2008 from '../model/InlineResponse2008';
import InlineResponse2009 from '../model/InlineResponse2009';

/**
* Factset service.
* @module api/FactsetApi
* @version 0.9.1
*/
export default class FactsetApi {

    /**
    * Constructs a new FactsetApi. 
    * @alias module:api/FactsetApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * This endpoint returns selected ETP's asset allocations.
     * This endpoint returns selected ETP's allocations grouped by asset class. The response will be sorted by weight in descending order.
     * @param {String} symbol Market symbol of ETP defined by FactSet.
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.attributes Limit the attributes returned in the response to the specified set.
     * @param {Number} opts.paginationOffset Non-negative number of entries to skip, or 0 (default). (default to 0.0)
     * @param {Number} opts.paginationLimit Non-negative maximum number of entries to return. (default to 20.0)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse2001} and HTTP response
     */
    factsetEtfAllocationAssetListBySymbolGetWithHttpInfo(symbol, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'symbol' is set
      if (symbol === undefined || symbol === null) {
        throw new Error("Missing the required parameter 'symbol' when calling factsetEtfAllocationAssetListBySymbolGet");
      }

      let pathParams = {
      };
      let queryParams = {
        'symbol': symbol,
        '_attributes': this.apiClient.buildCollectionParam(opts['attributes'], 'csv'),
        '_paginationOffset': opts['paginationOffset'],
        '_paginationLimit': opts['paginationLimit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse2001;
      return this.apiClient.callApi(
        '/factset/etf/allocation/asset/listBySymbol', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * This endpoint returns selected ETP's asset allocations.
     * This endpoint returns selected ETP's allocations grouped by asset class. The response will be sorted by weight in descending order.
     * @param {String} symbol Market symbol of ETP defined by FactSet.
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.attributes Limit the attributes returned in the response to the specified set.
     * @param {Number} opts.paginationOffset Non-negative number of entries to skip, or 0 (default). (default to 0.0)
     * @param {Number} opts.paginationLimit Non-negative maximum number of entries to return. (default to 20.0)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/InlineResponse2001}
     */
    factsetEtfAllocationAssetListBySymbolGet(symbol, opts) {
      return this.factsetEtfAllocationAssetListBySymbolGetWithHttpInfo(symbol, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * This endpoint returns selected ETP's country allocations.
     * This endpoint returns selected ETP's allocations grouped by country names. The response will be sorted by weight in descending order.
     * @param {String} symbol Market symbol of ETP defined by FactSet.
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.attributes Limit the attributes returned in the response to the specified set.
     * @param {Number} opts.paginationOffset Non-negative number of entries to skip, or 0 (default). (default to 0.0)
     * @param {Number} opts.paginationLimit Non-negative maximum number of entries to return. (default to 20.0)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse2002} and HTTP response
     */
    factsetEtfAllocationCountryListBySymbolGetWithHttpInfo(symbol, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'symbol' is set
      if (symbol === undefined || symbol === null) {
        throw new Error("Missing the required parameter 'symbol' when calling factsetEtfAllocationCountryListBySymbolGet");
      }

      let pathParams = {
      };
      let queryParams = {
        'symbol': symbol,
        '_attributes': this.apiClient.buildCollectionParam(opts['attributes'], 'csv'),
        '_paginationOffset': opts['paginationOffset'],
        '_paginationLimit': opts['paginationLimit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse2002;
      return this.apiClient.callApi(
        '/factset/etf/allocation/country/listBySymbol', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * This endpoint returns selected ETP's country allocations.
     * This endpoint returns selected ETP's allocations grouped by country names. The response will be sorted by weight in descending order.
     * @param {String} symbol Market symbol of ETP defined by FactSet.
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.attributes Limit the attributes returned in the response to the specified set.
     * @param {Number} opts.paginationOffset Non-negative number of entries to skip, or 0 (default). (default to 0.0)
     * @param {Number} opts.paginationLimit Non-negative maximum number of entries to return. (default to 20.0)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/InlineResponse2002}
     */
    factsetEtfAllocationCountryListBySymbolGet(symbol, opts) {
      return this.factsetEtfAllocationCountryListBySymbolGetWithHttpInfo(symbol, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * This endpoint returns selected ETP's exchange allocations.
     * This endpoint returns selected ETP's allocations grouped by exchanges. The response will be sorted by weight in descending order.
     * @param {String} symbol Market symbol of ETP defined by FactSet.
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.attributes Limit the attributes returned in the response to the specified set.
     * @param {Number} opts.paginationOffset Non-negative number of entries to skip, or 0 (default). (default to 0.0)
     * @param {Number} opts.paginationLimit Non-negative maximum number of entries to return. (default to 20.0)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse2003} and HTTP response
     */
    factsetEtfAllocationExchangeListBySymbolGetWithHttpInfo(symbol, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'symbol' is set
      if (symbol === undefined || symbol === null) {
        throw new Error("Missing the required parameter 'symbol' when calling factsetEtfAllocationExchangeListBySymbolGet");
      }

      let pathParams = {
      };
      let queryParams = {
        'symbol': symbol,
        '_attributes': this.apiClient.buildCollectionParam(opts['attributes'], 'csv'),
        '_paginationOffset': opts['paginationOffset'],
        '_paginationLimit': opts['paginationLimit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse2003;
      return this.apiClient.callApi(
        '/factset/etf/allocation/exchange/listBySymbol', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * This endpoint returns selected ETP's exchange allocations.
     * This endpoint returns selected ETP's allocations grouped by exchanges. The response will be sorted by weight in descending order.
     * @param {String} symbol Market symbol of ETP defined by FactSet.
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.attributes Limit the attributes returned in the response to the specified set.
     * @param {Number} opts.paginationOffset Non-negative number of entries to skip, or 0 (default). (default to 0.0)
     * @param {Number} opts.paginationLimit Non-negative maximum number of entries to return. (default to 20.0)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/InlineResponse2003}
     */
    factsetEtfAllocationExchangeListBySymbolGet(symbol, opts) {
      return this.factsetEtfAllocationExchangeListBySymbolGetWithHttpInfo(symbol, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * This endpoint returns selected ETP's region allocations.
     * This endpoint returns selected ETP's allocations grouped by region names. The response will be sorted by weight in descending order.
     * @param {String} symbol Market symbol of ETP defined by FactSet.
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.attributes Limit the attributes returned in the response to the specified set.
     * @param {Number} opts.paginationOffset Non-negative number of entries to skip, or 0 (default). (default to 0.0)
     * @param {Number} opts.paginationLimit Non-negative maximum number of entries to return. (default to 20.0)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse2004} and HTTP response
     */
    factsetEtfAllocationRegionListBySymbolGetWithHttpInfo(symbol, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'symbol' is set
      if (symbol === undefined || symbol === null) {
        throw new Error("Missing the required parameter 'symbol' when calling factsetEtfAllocationRegionListBySymbolGet");
      }

      let pathParams = {
      };
      let queryParams = {
        'symbol': symbol,
        '_attributes': this.apiClient.buildCollectionParam(opts['attributes'], 'csv'),
        '_paginationOffset': opts['paginationOffset'],
        '_paginationLimit': opts['paginationLimit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse2004;
      return this.apiClient.callApi(
        '/factset/etf/allocation/region/listBySymbol', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * This endpoint returns selected ETP's region allocations.
     * This endpoint returns selected ETP's allocations grouped by region names. The response will be sorted by weight in descending order.
     * @param {String} symbol Market symbol of ETP defined by FactSet.
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.attributes Limit the attributes returned in the response to the specified set.
     * @param {Number} opts.paginationOffset Non-negative number of entries to skip, or 0 (default). (default to 0.0)
     * @param {Number} opts.paginationLimit Non-negative maximum number of entries to return. (default to 20.0)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/InlineResponse2004}
     */
    factsetEtfAllocationRegionListBySymbolGet(symbol, opts) {
      return this.factsetEtfAllocationRegionListBySymbolGetWithHttpInfo(symbol, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * This endpoint returns selected ETP's sector allocations.
     * This endpoint returns selected ETP's allocations grouped by sector names. The response will be sorted by weight in descending order.
     * @param {String} symbol Market symbol of ETP defined by FactSet.
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.attributes Limit the attributes returned in the response to the specified set.
     * @param {Number} opts.paginationOffset Non-negative number of entries to skip, or 0 (default). (default to 0.0)
     * @param {Number} opts.paginationLimit Non-negative maximum number of entries to return. (default to 20.0)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse2005} and HTTP response
     */
    factsetEtfAllocationSectorListBySymbolGetWithHttpInfo(symbol, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'symbol' is set
      if (symbol === undefined || symbol === null) {
        throw new Error("Missing the required parameter 'symbol' when calling factsetEtfAllocationSectorListBySymbolGet");
      }

      let pathParams = {
      };
      let queryParams = {
        'symbol': symbol,
        '_attributes': this.apiClient.buildCollectionParam(opts['attributes'], 'csv'),
        '_paginationOffset': opts['paginationOffset'],
        '_paginationLimit': opts['paginationLimit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse2005;
      return this.apiClient.callApi(
        '/factset/etf/allocation/sector/listBySymbol', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * This endpoint returns selected ETP's sector allocations.
     * This endpoint returns selected ETP's allocations grouped by sector names. The response will be sorted by weight in descending order.
     * @param {String} symbol Market symbol of ETP defined by FactSet.
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.attributes Limit the attributes returned in the response to the specified set.
     * @param {Number} opts.paginationOffset Non-negative number of entries to skip, or 0 (default). (default to 0.0)
     * @param {Number} opts.paginationLimit Non-negative maximum number of entries to return. (default to 20.0)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/InlineResponse2005}
     */
    factsetEtfAllocationSectorListBySymbolGet(symbol, opts) {
      return this.factsetEtfAllocationSectorListBySymbolGetWithHttpInfo(symbol, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Retrieve basic characteristic information for a specified ETP.
     * An ETP has many unique characteristics specific to its composition that differentiate it from other products. This includes details on leverage, hedging, derivatives, and service providers.
     * @param {String} symbol Market symbol of ETF defined by FactSet.
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.attributes Limit the attributes returned in the response to the specified set.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse2006} and HTTP response
     */
    factsetEtfCharacteristicsGetBySymbolGetWithHttpInfo(symbol, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'symbol' is set
      if (symbol === undefined || symbol === null) {
        throw new Error("Missing the required parameter 'symbol' when calling factsetEtfCharacteristicsGetBySymbolGet");
      }

      let pathParams = {
      };
      let queryParams = {
        'symbol': symbol,
        '_attributes': this.apiClient.buildCollectionParam(opts['attributes'], 'csv')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse2006;
      return this.apiClient.callApi(
        '/factset/etf/characteristics/getBySymbol', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Retrieve basic characteristic information for a specified ETP.
     * An ETP has many unique characteristics specific to its composition that differentiate it from other products. This includes details on leverage, hedging, derivatives, and service providers.
     * @param {String} symbol Market symbol of ETF defined by FactSet.
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.attributes Limit the attributes returned in the response to the specified set.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/InlineResponse2006}
     */
    factsetEtfCharacteristicsGetBySymbolGet(symbol, opts) {
      return this.factsetEtfCharacteristicsGetBySymbolGetWithHttpInfo(symbol, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List of ETP class broad categories.
     * List of ETP class broad categories.
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.attributes Limit the attributes returned in the response to the specified set.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse2008} and HTTP response
     */
    factsetEtfClassCategoryBroadListGetWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        '_attributes': this.apiClient.buildCollectionParam(opts['attributes'], 'csv')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse2008;
      return this.apiClient.callApi(
        '/factset/etf/class/category/broad/list', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * List of ETP class broad categories.
     * List of ETP class broad categories.
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.attributes Limit the attributes returned in the response to the specified set.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/InlineResponse2008}
     */
    factsetEtfClassCategoryBroadListGet(opts) {
      return this.factsetEtfClassCategoryBroadListGetWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List of ETP class focus categories.
     * List of ETP class focus categories.
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.attributes Limit the attributes returned in the response to the specified set.
     * @param {Number} opts.paginationOffset Non-negative number of entries to skip, or 0 (default). (default to 0.0)
     * @param {Number} opts.paginationLimit Non-negative maximum number of entries to return. (default to 20.0)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse2009} and HTTP response
     */
    factsetEtfClassCategoryFocusListGetWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        '_attributes': this.apiClient.buildCollectionParam(opts['attributes'], 'csv'),
        '_paginationOffset': opts['paginationOffset'],
        '_paginationLimit': opts['paginationLimit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse2009;
      return this.apiClient.callApi(
        '/factset/etf/class/category/focus/list', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * List of ETP class focus categories.
     * List of ETP class focus categories.
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.attributes Limit the attributes returned in the response to the specified set.
     * @param {Number} opts.paginationOffset Non-negative number of entries to skip, or 0 (default). (default to 0.0)
     * @param {Number} opts.paginationLimit Non-negative maximum number of entries to return. (default to 20.0)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/InlineResponse2009}
     */
    factsetEtfClassCategoryFocusListGet(opts) {
      return this.factsetEtfClassCategoryFocusListGetWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List of ETP class niche categories.
     * List of ETP class niche categories.
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.attributes Limit the attributes returned in the response to the specified set.
     * @param {Number} opts.paginationOffset Non-negative number of entries to skip, or 0 (default). (default to 0.0)
     * @param {Number} opts.paginationLimit Non-negative maximum number of entries to return. (default to 20.0)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse20010} and HTTP response
     */
    factsetEtfClassCategoryNicheListGetWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        '_attributes': this.apiClient.buildCollectionParam(opts['attributes'], 'csv'),
        '_paginationOffset': opts['paginationOffset'],
        '_paginationLimit': opts['paginationLimit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse20010;
      return this.apiClient.callApi(
        '/factset/etf/class/category/niche/list', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * List of ETP class niche categories.
     * List of ETP class niche categories.
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.attributes Limit the attributes returned in the response to the specified set.
     * @param {Number} opts.paginationOffset Non-negative number of entries to skip, or 0 (default). (default to 0.0)
     * @param {Number} opts.paginationLimit Non-negative maximum number of entries to return. (default to 20.0)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/InlineResponse20010}
     */
    factsetEtfClassCategoryNicheListGet(opts) {
      return this.factsetEtfClassCategoryNicheListGetWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List of ETP class geographies.
     * List of ETP class geographies.
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.attributes Limit the attributes returned in the response to the specified set.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse20011} and HTTP response
     */
    factsetEtfClassGeographyListGetWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        '_attributes': this.apiClient.buildCollectionParam(opts['attributes'], 'csv')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse20011;
      return this.apiClient.callApi(
        '/factset/etf/class/geography/list', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * List of ETP class geographies.
     * List of ETP class geographies.
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.attributes Limit the attributes returned in the response to the specified set.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/InlineResponse20011}
     */
    factsetEtfClassGeographyListGet(opts) {
      return this.factsetEtfClassGeographyListGetWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Retrieve an ETP's classification specific to asset class, geography, or investment strategy.
     * ETP classification is divided into three categories: Asset Class, Geography, and Investment Strategy. Asset class is determined based on the various asset types held by the fund, A fund's geography can be classified by region (e.g. Asia-Pac), specific geography (e.g. China) or economic development (e.g. BRIC). An ETP's investment strategy is classified in broad categories (e.g. Large Cap) and more granular categorizations.
     * @param {String} symbol Market symbol of ETP defined by FactSet.
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.attributes Limit the attributes returned in the response to the specified set.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse2007} and HTTP response
     */
    factsetEtfClassGetBySymbolGetWithHttpInfo(symbol, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'symbol' is set
      if (symbol === undefined || symbol === null) {
        throw new Error("Missing the required parameter 'symbol' when calling factsetEtfClassGetBySymbolGet");
      }

      let pathParams = {
      };
      let queryParams = {
        'symbol': symbol,
        '_attributes': this.apiClient.buildCollectionParam(opts['attributes'], 'csv')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse2007;
      return this.apiClient.callApi(
        '/factset/etf/class/getBySymbol', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Retrieve an ETP's classification specific to asset class, geography, or investment strategy.
     * ETP classification is divided into three categories: Asset Class, Geography, and Investment Strategy. Asset class is determined based on the various asset types held by the fund, A fund's geography can be classified by region (e.g. Asia-Pac), specific geography (e.g. China) or economic development (e.g. BRIC). An ETP's investment strategy is classified in broad categories (e.g. Large Cap) and more granular categorizations.
     * @param {String} symbol Market symbol of ETP defined by FactSet.
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.attributes Limit the attributes returned in the response to the specified set.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/InlineResponse2007}
     */
    factsetEtfClassGetBySymbolGet(symbol, opts) {
      return this.factsetEtfClassGetBySymbolGetWithHttpInfo(symbol, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Retrieve an ETP's current distribution details.
     * Retrieve distribution-related details for a specific ETP including dividend and capital gain distribution details.
     * @param {String} symbol Market symbol of ETP defined by FactSet.
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.attributes Limit the attributes returned in the response to the specified set.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse20012} and HTTP response
     */
    factsetEtfDistributionGetBySymbolGetWithHttpInfo(symbol, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'symbol' is set
      if (symbol === undefined || symbol === null) {
        throw new Error("Missing the required parameter 'symbol' when calling factsetEtfDistributionGetBySymbolGet");
      }

      let pathParams = {
      };
      let queryParams = {
        'symbol': symbol,
        '_attributes': this.apiClient.buildCollectionParam(opts['attributes'], 'csv')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse20012;
      return this.apiClient.callApi(
        '/factset/etf/distribution/getBySymbol', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Retrieve an ETP's current distribution details.
     * Retrieve distribution-related details for a specific ETP including dividend and capital gain distribution details.
     * @param {String} symbol Market symbol of ETP defined by FactSet.
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.attributes Limit the attributes returned in the response to the specified set.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/InlineResponse20012}
     */
    factsetEtfDistributionGetBySymbolGet(symbol, opts) {
      return this.factsetEtfDistributionGetBySymbolGetWithHttpInfo(symbol, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Retrieve an ETP's cash inflow/outflows for various time periods.
     * Retrieve the amount invested or divested in a specific ETP over various time periods including one-day, one-week, one-month, one-year, and YTD.
     * @param {String} symbol Market symbol of ETP defined by FactSet.
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.attributes Limit the attributes returned in the response to the specified set.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse20013} and HTTP response
     */
    factsetEtfFundFlowsGetBySymbolGetWithHttpInfo(symbol, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'symbol' is set
      if (symbol === undefined || symbol === null) {
        throw new Error("Missing the required parameter 'symbol' when calling factsetEtfFundFlowsGetBySymbolGet");
      }

      let pathParams = {
      };
      let queryParams = {
        'symbol': symbol,
        '_attributes': this.apiClient.buildCollectionParam(opts['attributes'], 'csv')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse20013;
      return this.apiClient.callApi(
        '/factset/etf/fundFlows/getBySymbol', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Retrieve an ETP's cash inflow/outflows for various time periods.
     * Retrieve the amount invested or divested in a specific ETP over various time periods including one-day, one-week, one-month, one-year, and YTD.
     * @param {String} symbol Market symbol of ETP defined by FactSet.
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.attributes Limit the attributes returned in the response to the specified set.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/InlineResponse20013}
     */
    factsetEtfFundFlowsGetBySymbolGet(symbol, opts) {
      return this.factsetEtfFundFlowsGetBySymbolGetWithHttpInfo(symbol, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Retrieve basic profile information for a specified ETP.
     * An ETP can be profiled by defining several common attributes such as issuer, fund description, and benchmark.
     * @param {String} symbol Market symbol of ETP defined by FactSet.
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.attributes Limit the attributes returned in the response to the specified set.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse200} and HTTP response
     */
    factsetEtfGetBySymbolGetWithHttpInfo(symbol, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'symbol' is set
      if (symbol === undefined || symbol === null) {
        throw new Error("Missing the required parameter 'symbol' when calling factsetEtfGetBySymbolGet");
      }

      let pathParams = {
      };
      let queryParams = {
        'symbol': symbol,
        '_attributes': this.apiClient.buildCollectionParam(opts['attributes'], 'csv')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse200;
      return this.apiClient.callApi(
        '/factset/etf/getBySymbol', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Retrieve basic profile information for a specified ETP.
     * An ETP can be profiled by defining several common attributes such as issuer, fund description, and benchmark.
     * @param {String} symbol Market symbol of ETP defined by FactSet.
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.attributes Limit the attributes returned in the response to the specified set.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/InlineResponse200}
     */
    factsetEtfGetBySymbolGet(symbol, opts) {
      return this.factsetEtfGetBySymbolGetWithHttpInfo(symbol, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * This endpoint returns selected ETP's Growth of 10K calculated values.
     * Growth of 10K (or growth of 10,000) is a commonly used chart that highlights the change in the value of an initial 10,000 investment in the ETP during a given period of time. Often, this period of time is either since inception or the calculation between the pre-defined range.
     * @param {String} symbol Market symbol of ETP defined by FactSet.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} opts.timePeriod Historice NAV date value.
     * @param {module:model/String} opts.calculationType Historice NAV date value.
     * @param {Array.<String>} opts.attributes Limit the attributes returned in the response to the specified set.
     * @param {Number} opts.paginationOffset Non-negative number of entries to skip, or 0 (default). (default to 0.0)
     * @param {Number} opts.paginationLimit Non-negative maximum number of entries to return. (default to 20.0)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse20014} and HTTP response
     */
    factsetEtfGrowthOfTenKListBySymbolGetWithHttpInfo(symbol, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'symbol' is set
      if (symbol === undefined || symbol === null) {
        throw new Error("Missing the required parameter 'symbol' when calling factsetEtfGrowthOfTenKListBySymbolGet");
      }

      let pathParams = {
      };
      let queryParams = {
        'symbol': symbol,
        'timePeriod': opts['timePeriod'],
        'calculationType': opts['calculationType'],
        '_attributes': this.apiClient.buildCollectionParam(opts['attributes'], 'csv'),
        '_paginationOffset': opts['paginationOffset'],
        '_paginationLimit': opts['paginationLimit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse20014;
      return this.apiClient.callApi(
        '/factset/etf/growthOfTenK/listBySymbol', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * This endpoint returns selected ETP's Growth of 10K calculated values.
     * Growth of 10K (or growth of 10,000) is a commonly used chart that highlights the change in the value of an initial 10,000 investment in the ETP during a given period of time. Often, this period of time is either since inception or the calculation between the pre-defined range.
     * @param {String} symbol Market symbol of ETP defined by FactSet.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} opts.timePeriod Historice NAV date value.
     * @param {module:model/String} opts.calculationType Historice NAV date value.
     * @param {Array.<String>} opts.attributes Limit the attributes returned in the response to the specified set.
     * @param {Number} opts.paginationOffset Non-negative number of entries to skip, or 0 (default). (default to 0.0)
     * @param {Number} opts.paginationLimit Non-negative maximum number of entries to return. (default to 20.0)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/InlineResponse20014}
     */
    factsetEtfGrowthOfTenKListBySymbolGet(symbol, opts) {
      return this.factsetEtfGrowthOfTenKListBySymbolGetWithHttpInfo(symbol, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Holdings details for an individual ETP.
     * Retrieve an ETP's holdings information including security, shares held, and weight.
     * @param {String} symbol Market symbol of ETP defined by FactSet.
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.attributes Limit the attributes returned in the response to the specified set.
     * @param {Number} opts.paginationOffset Non-negative number of entries to skip, or 0 (default). (default to 0.0)
     * @param {Number} opts.paginationLimit Non-negative maximum number of entries to return. (default to 20.0)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse20015} and HTTP response
     */
    factsetEtfHoldingsListBySymbolGetWithHttpInfo(symbol, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'symbol' is set
      if (symbol === undefined || symbol === null) {
        throw new Error("Missing the required parameter 'symbol' when calling factsetEtfHoldingsListBySymbolGet");
      }

      let pathParams = {
      };
      let queryParams = {
        'symbol': symbol,
        '_attributes': this.apiClient.buildCollectionParam(opts['attributes'], 'csv'),
        '_paginationOffset': opts['paginationOffset'],
        '_paginationLimit': opts['paginationLimit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse20015;
      return this.apiClient.callApi(
        '/factset/etf/holdings/listBySymbol', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Holdings details for an individual ETP.
     * Retrieve an ETP's holdings information including security, shares held, and weight.
     * @param {String} symbol Market symbol of ETP defined by FactSet.
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.attributes Limit the attributes returned in the response to the specified set.
     * @param {Number} opts.paginationOffset Non-negative number of entries to skip, or 0 (default). (default to 0.0)
     * @param {Number} opts.paginationLimit Non-negative maximum number of entries to return. (default to 20.0)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/InlineResponse20015}
     */
    factsetEtfHoldingsListBySymbolGet(symbol, opts) {
      return this.factsetEtfHoldingsListBySymbolGetWithHttpInfo(symbol, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Retrieve historical ETP NAV values.
     * Retrieve an ETP's historical NAV and shares outstanding for a specified time range.
     * @param {String} symbol Market symbol of ETP defined by FactSet.
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.attributes Limit the attributes returned in the response to the specified set.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse20016} and HTTP response
     */
    factsetEtfPriceGetBySymbolGetWithHttpInfo(symbol, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'symbol' is set
      if (symbol === undefined || symbol === null) {
        throw new Error("Missing the required parameter 'symbol' when calling factsetEtfPriceGetBySymbolGet");
      }

      let pathParams = {
      };
      let queryParams = {
        'symbol': symbol,
        '_attributes': this.apiClient.buildCollectionParam(opts['attributes'], 'csv')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse20016;
      return this.apiClient.callApi(
        '/factset/etf/price/getBySymbol', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Retrieve historical ETP NAV values.
     * Retrieve an ETP's historical NAV and shares outstanding for a specified time range.
     * @param {String} symbol Market symbol of ETP defined by FactSet.
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.attributes Limit the attributes returned in the response to the specified set.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/InlineResponse20016}
     */
    factsetEtfPriceGetBySymbolGet(symbol, opts) {
      return this.factsetEtfPriceGetBySymbolGetWithHttpInfo(symbol, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Retrieve total return data for a specified ETP.
     * An ETP's total return data can be returned for various time frames including 1-month, 3-month, YTD, 1-year, 3-year, and 5-year. Total return market price is used to calcualte price returns. Total return nav is used to calcualte nav returns.
     * @param {String} symbol Market symbol of ETP defined by FactSet.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} opts.returnType Return type. (default to 'price')
     * @param {Array.<String>} opts.attributes Limit the attributes returned in the response to the specified set.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse20017} and HTTP response
     */
    factsetEtfReturnsGetBySymbolGetWithHttpInfo(symbol, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'symbol' is set
      if (symbol === undefined || symbol === null) {
        throw new Error("Missing the required parameter 'symbol' when calling factsetEtfReturnsGetBySymbolGet");
      }

      let pathParams = {
      };
      let queryParams = {
        'symbol': symbol,
        'returnType': opts['returnType'],
        '_attributes': this.apiClient.buildCollectionParam(opts['attributes'], 'csv')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse20017;
      return this.apiClient.callApi(
        '/factset/etf/returns/getBySymbol', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Retrieve total return data for a specified ETP.
     * An ETP's total return data can be returned for various time frames including 1-month, 3-month, YTD, 1-year, 3-year, and 5-year. Total return market price is used to calcualte price returns. Total return nav is used to calcualte nav returns.
     * @param {String} symbol Market symbol of ETP defined by FactSet.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} opts.returnType Return type. (default to 'price')
     * @param {Array.<String>} opts.attributes Limit the attributes returned in the response to the specified set.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/InlineResponse20017}
     */
    factsetEtfReturnsGetBySymbolGet(symbol, opts) {
      return this.factsetEtfReturnsGetBySymbolGetWithHttpInfo(symbol, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Retrieve various classification details for a specified ETP.
     * ETP's can be classified in many different ways including investment strategy, security weightings, and fund composition.
     * @param {String} symbol Market symbol of ETP defined by FactSet.
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.attributes Limit the attributes returned in the response to the specified set.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse20018} and HTTP response
     */
    factsetEtfStrategyGetBySymbolGetWithHttpInfo(symbol, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'symbol' is set
      if (symbol === undefined || symbol === null) {
        throw new Error("Missing the required parameter 'symbol' when calling factsetEtfStrategyGetBySymbolGet");
      }

      let pathParams = {
      };
      let queryParams = {
        'symbol': symbol,
        '_attributes': this.apiClient.buildCollectionParam(opts['attributes'], 'csv')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse20018;
      return this.apiClient.callApi(
        '/factset/etf/strategy/getBySymbol', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Retrieve various classification details for a specified ETP.
     * ETP's can be classified in many different ways including investment strategy, security weightings, and fund composition.
     * @param {String} symbol Market symbol of ETP defined by FactSet.
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.attributes Limit the attributes returned in the response to the specified set.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/InlineResponse20018}
     */
    factsetEtfStrategyGetBySymbolGet(symbol, opts) {
      return this.factsetEtfStrategyGetBySymbolGetWithHttpInfo(symbol, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Retrieve a list of ETP strategy segments.
     * Retrieve the various segments assigned to a specific ETP. Segment data is used to group funds for comparison and relative performance analyses.
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.attributes Limit the attributes returned in the response to the specified set.
     * @param {Number} opts.paginationOffset Non-negative number of entries to skip, or 0 (default). (default to 0.0)
     * @param {Number} opts.paginationLimit Non-negative maximum number of entries to return. (default to 20.0)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse20019} and HTTP response
     */
    factsetEtfStrategySegmentListGetWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        '_attributes': this.apiClient.buildCollectionParam(opts['attributes'], 'csv'),
        '_paginationOffset': opts['paginationOffset'],
        '_paginationLimit': opts['paginationLimit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse20019;
      return this.apiClient.callApi(
        '/factset/etf/strategy/segment/list', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Retrieve a list of ETP strategy segments.
     * Retrieve the various segments assigned to a specific ETP. Segment data is used to group funds for comparison and relative performance analyses.
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.attributes Limit the attributes returned in the response to the specified set.
     * @param {Number} opts.paginationOffset Non-negative number of entries to skip, or 0 (default). (default to 0.0)
     * @param {Number} opts.paginationLimit Non-negative maximum number of entries to return. (default to 20.0)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/InlineResponse20019}
     */
    factsetEtfStrategySegmentListGet(opts) {
      return this.factsetEtfStrategySegmentListGetWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Retrieve the basic structure information for a specified ETP.
     * Retrieve details on a fund's structure including its type, investment style (active/passive), and legal structure.
     * @param {String} symbol Market symbol of ETP defined by FactSet.
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.attributes Limit the attributes returned in the response to the specified set.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse20020} and HTTP response
     */
    factsetEtfStructureGetBySymbolGetWithHttpInfo(symbol, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'symbol' is set
      if (symbol === undefined || symbol === null) {
        throw new Error("Missing the required parameter 'symbol' when calling factsetEtfStructureGetBySymbolGet");
      }

      let pathParams = {
      };
      let queryParams = {
        'symbol': symbol,
        '_attributes': this.apiClient.buildCollectionParam(opts['attributes'], 'csv')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse20020;
      return this.apiClient.callApi(
        '/factset/etf/structure/getBySymbol', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Retrieve the basic structure information for a specified ETP.
     * Retrieve details on a fund's structure including its type, investment style (active/passive), and legal structure.
     * @param {String} symbol Market symbol of ETP defined by FactSet.
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.attributes Limit the attributes returned in the response to the specified set.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/InlineResponse20020}
     */
    factsetEtfStructureGetBySymbolGet(symbol, opts) {
      return this.factsetEtfStructureGetBySymbolGetWithHttpInfo(symbol, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Retrieve the tax and fee related information for a specified ETP.
     * Retrieve various fee and tax related details on a specified ETP including expense ratio and tax treatment for dividends and capital gains.
     * @param {String} symbol Market symbol of ETP defined by FactSet.
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.attributes Limit the attributes returned in the response to the specified set.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse20021} and HTTP response
     */
    factsetEtfTaxesAndFeesUsGetBySymbolGetWithHttpInfo(symbol, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'symbol' is set
      if (symbol === undefined || symbol === null) {
        throw new Error("Missing the required parameter 'symbol' when calling factsetEtfTaxesAndFeesUsGetBySymbolGet");
      }

      let pathParams = {
      };
      let queryParams = {
        'symbol': symbol,
        '_attributes': this.apiClient.buildCollectionParam(opts['attributes'], 'csv')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse20021;
      return this.apiClient.callApi(
        '/factset/etf/taxesAndFees/us/getBySymbol', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Retrieve the tax and fee related information for a specified ETP.
     * Retrieve various fee and tax related details on a specified ETP including expense ratio and tax treatment for dividends and capital gains.
     * @param {String} symbol Market symbol of ETP defined by FactSet.
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.attributes Limit the attributes returned in the response to the specified set.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/InlineResponse20021}
     */
    factsetEtfTaxesAndFeesUsGetBySymbolGet(symbol, opts) {
      return this.factsetEtfTaxesAndFeesUsGetBySymbolGetWithHttpInfo(symbol, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Retrieve historical NAV data for a specified ETP.
     * Retrieve the historical NAV data and the respective fund flows and shares outstanding for a specified fund and time period. Please refer currency.fund in /factset/etf/getBySymbol for currency value.
     * @param {String} symbol Market symbol of ETP defined by FactSet.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} opts.timePeriod Time frame of the data. (default to '1Y')
     * @param {Array.<String>} opts.attributes Limit the attributes returned in the response to the specified set.
     * @param {Number} opts.paginationOffset Non-negative number of entries to skip, or 0 (default). (default to 0.0)
     * @param {Number} opts.paginationLimit Non-negative maximum number of entries to return. (default to 20.0)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse20022} and HTTP response
     */
    factsetEtfTimeSeriesListBySymbolGetWithHttpInfo(symbol, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'symbol' is set
      if (symbol === undefined || symbol === null) {
        throw new Error("Missing the required parameter 'symbol' when calling factsetEtfTimeSeriesListBySymbolGet");
      }

      let pathParams = {
      };
      let queryParams = {
        'symbol': symbol,
        'timePeriod': opts['timePeriod'],
        '_attributes': this.apiClient.buildCollectionParam(opts['attributes'], 'csv'),
        '_paginationOffset': opts['paginationOffset'],
        '_paginationLimit': opts['paginationLimit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse20022;
      return this.apiClient.callApi(
        '/factset/etf/timeSeries/listBySymbol', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Retrieve historical NAV data for a specified ETP.
     * Retrieve the historical NAV data and the respective fund flows and shares outstanding for a specified fund and time period. Please refer currency.fund in /factset/etf/getBySymbol for currency value.
     * @param {String} symbol Market symbol of ETP defined by FactSet.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} opts.timePeriod Time frame of the data. (default to '1Y')
     * @param {Array.<String>} opts.attributes Limit the attributes returned in the response to the specified set.
     * @param {Number} opts.paginationOffset Non-negative number of entries to skip, or 0 (default). (default to 0.0)
     * @param {Number} opts.paginationLimit Non-negative maximum number of entries to return. (default to 20.0)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/InlineResponse20022}
     */
    factsetEtfTimeSeriesListBySymbolGet(symbol, opts) {
      return this.factsetEtfTimeSeriesListBySymbolGetWithHttpInfo(symbol, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
