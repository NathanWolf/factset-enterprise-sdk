/**
 * StreetAccount API
 * Collection of endpoints for retrieving StreetAccount headlines and filters
 *
 * The version of the OpenAPI document: 0.1.0
 * Contact: api@factset.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Error from '../model/Error';
import SaHeadlinesRequest from '../model/SaHeadlinesRequest';
import SaHeadlinesRequestByView from '../model/SaHeadlinesRequestByView';
import SearchResponse from '../model/SearchResponse';

/**
* Headlines service.
* @module api/HeadlinesApi
*/
export default class HeadlinesApi {

    /**
    * Constructs a new HeadlinesApi. 
    * @alias module:api/HeadlinesApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * Retrieve StreetAccount headlines for given filters
     * This endpoint will pull all headlines produced by StreetAccount and the full story body will be returned by the data set. Filters can be specified via the endpoint below.
     * @param {Object} opts Optional parameters
     * @param {module:model/SaHeadlinesRequest} opts.saHeadlinesRequest Filter Body which needs to be sent with request
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/SearchResponse} and HTTP response
     */
    getStreetAccountHeadlinesWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = opts['saHeadlinesRequest'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];


      let returnType = SearchResponse;

      return this.apiClient.callApi(
        '/streetaccount/headlines', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Retrieve StreetAccount headlines for given filters
     * This endpoint will pull all headlines produced by StreetAccount and the full story body will be returned by the data set. Filters can be specified via the endpoint below.
     * @param {Object} opts Optional parameters
     * @param {module:model/SaHeadlinesRequest} opts.saHeadlinesRequest Filter Body which needs to be sent with request
     * @return { Promise.< module:model/SearchResponse > } a Promise, with data of type {@link module:model/SearchResponse }
     */
    getStreetAccountHeadlines(opts) {
      return this.getStreetAccountHeadlinesWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Retrieve StreetAccount headlines for given view
     * This endpoint allows you to pull all headlines produced by StreetAccount for a saved view. The full story body will be returned by the data set. Views can be created via the ‘Create Views’ endpoint.
     * @param {String} id view id of the view to return headlines for
     * @param {Object} opts Optional parameters
     * @param {module:model/SaHeadlinesRequestByView} opts.saHeadlinesRequestByView View body which needs to be sent with request
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/SearchResponse} and HTTP response
     */
    getStreetAccountHeadlinesByViewWithHttpInfo(id, opts) {
      opts = opts || {};
      let postBody = opts['saHeadlinesRequestByView'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getStreetAccountHeadlinesByView");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];


      let returnType = SearchResponse;

      return this.apiClient.callApi(
        '/streetaccount/views/{id}/headlines', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Retrieve StreetAccount headlines for given view
     * This endpoint allows you to pull all headlines produced by StreetAccount for a saved view. The full story body will be returned by the data set. Views can be created via the ‘Create Views’ endpoint.
     * @param {String} id view id of the view to return headlines for
     * @param {Object} opts Optional parameters
     * @param {module:model/SaHeadlinesRequestByView} opts.saHeadlinesRequestByView View body which needs to be sent with request
     * @return { Promise.< module:model/SearchResponse > } a Promise, with data of type {@link module:model/SearchResponse }
     */
    getStreetAccountHeadlinesByView(id, opts) {
      return this.getStreetAccountHeadlinesByViewWithHttpInfo(id, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}





