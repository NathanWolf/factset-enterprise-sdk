/**
 * StreetAccount News API
 * The StreetAccount News API provides access to FactSet's proprietary news provider, StreetAccount. StreetAccount, is a premium real-time market intelligence news service that delivers comprehensive U.S., Canadian, and European coverage (and expanding Asia coverage). All possible sources for corporate news are scanned and key story facts are highlighted and presented in an easy-to-read format.  **StreetAccount Filters, Headlines, and Views:**  These endpoints allow for the retrieval of news headlines using filters such as Watchlists/Indices/Tickers, Company Filters, Market Topics, Regions, and Sectors.  Headlines can also be retrieved based on saved views within the Workstation.  **StreetAccount Historical Stories:**  These endpoints provide access to historical StreetAccount (SA) news. The API delivers SA stories in XML format based on user-specified date input parameters. Output files are securely available to users through a URL. This API has three endpoints: Request Files, Check Status, and Get Files.  Please note that this API only supports adhoc requests for historical files and does not support real-time files. If real-time push is required, consider using other methods such as SFTP, QNT account, or Azure Storage. Both historical and real-time Street Account news can be delivered via SFTP, QNT account, or Azure Storage.  The files delivered contain both metadata and content body, eliminating the need for multiple requests through multiple services to retrieve all the information.
 *
 * The version of the OpenAPI document: 0.1.0
 * Contact: api@factset.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import CreateEditDeleteViewResponse from '../model/CreateEditDeleteViewResponse';
import CreateOrEditViewBody from '../model/CreateOrEditViewBody';
import Error from '../model/Error';
import Views from '../model/Views';

/**
* Views service.
* @module api/ViewsApi
*/
export default class ViewsApi {

    /**
    * Constructs a new ViewsApi. 
    * @alias module:api/ViewsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * Creates and saves a StreetAccount view
     * This endpoint allows you to create a new StreetAccount view. Select watchlists/tickers and filters of your choice to create and save a view.
     * @param {String} id view id of the view which is the be created
     * @param {Object} opts Optional parameters
     * @param {module:model/CreateOrEditViewBody} opts.createOrEditViewBody Create or Edit View Body which needs to be sent with request
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CreateEditDeleteViewResponse} and HTTP response
     */
    createStreetAccountViewWithHttpInfo(id, opts) {
      opts = opts || {};
      let postBody = opts['createOrEditViewBody'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling createStreetAccountView");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];


      let returnType = CreateEditDeleteViewResponse;

      return this.apiClient.callApi(
        '/streetaccount/views/{id}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Creates and saves a StreetAccount view
     * This endpoint allows you to create a new StreetAccount view. Select watchlists/tickers and filters of your choice to create and save a view.
     * @param {String} id view id of the view which is the be created
     * @param {Object} opts Optional parameters
     * @param {module:model/CreateOrEditViewBody} opts.createOrEditViewBody Create or Edit View Body which needs to be sent with request
     * @return { Promise.< module:model/CreateEditDeleteViewResponse > } a Promise, with data of type {@link module:model/CreateEditDeleteViewResponse }
     */
    createStreetAccountView(id, opts) {
      return this.createStreetAccountViewWithHttpInfo(id, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Deletes an existing StreetAccount view
     * This endpoint allows you to delete a previously saved StreetAccount view.
     * @param {String} id view id of the view to be deleted
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CreateEditDeleteViewResponse} and HTTP response
     */
    deleteStreetAccountViewWithHttpInfo(id) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteStreetAccountView");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];


      let returnType = CreateEditDeleteViewResponse;

      return this.apiClient.callApi(
        '/streetaccount/views/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Deletes an existing StreetAccount view
     * This endpoint allows you to delete a previously saved StreetAccount view.
     * @param {String} id view id of the view to be deleted
     * @return { Promise.< module:model/CreateEditDeleteViewResponse > } a Promise, with data of type {@link module:model/CreateEditDeleteViewResponse }
     */
    deleteStreetAccountView(id) {
      return this.deleteStreetAccountViewWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Edits and saves an existing StreetAccount view
     * This endpoint allows you to edit the criteria used for a previously saved StreetAccount view.
     * @param {String} id view id of the view to be edited
     * @param {Object} opts Optional parameters
     * @param {module:model/CreateOrEditViewBody} opts.createOrEditViewBody Create or Edit View Body which needs to be sent with request
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CreateEditDeleteViewResponse} and HTTP response
     */
    editStreetAccountViewWithHttpInfo(id, opts) {
      opts = opts || {};
      let postBody = opts['createOrEditViewBody'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling editStreetAccountView");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];


      let returnType = CreateEditDeleteViewResponse;

      return this.apiClient.callApi(
        '/streetaccount/views/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Edits and saves an existing StreetAccount view
     * This endpoint allows you to edit the criteria used for a previously saved StreetAccount view.
     * @param {String} id view id of the view to be edited
     * @param {Object} opts Optional parameters
     * @param {module:model/CreateOrEditViewBody} opts.createOrEditViewBody Create or Edit View Body which needs to be sent with request
     * @return { Promise.< module:model/CreateEditDeleteViewResponse > } a Promise, with data of type {@link module:model/CreateEditDeleteViewResponse }
     */
    editStreetAccountView(id, opts) {
      return this.editStreetAccountViewWithHttpInfo(id, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Retrieves StreetAccount search views
     * This endpoint allows you to pull the full list of StreetAccount views that have been previously saved.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Views} and HTTP response
     */
    getStreetAccountViewsWithHttpInfo() {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];


      let returnType = Views;

      return this.apiClient.callApi(
        '/streetaccount/views', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Retrieves StreetAccount search views
     * This endpoint allows you to pull the full list of StreetAccount views that have been previously saved.
     * @return { Promise.< module:model/Views > } a Promise, with data of type {@link module:model/Views }
     */
    getStreetAccountViews() {
      return this.getStreetAccountViewsWithHttpInfo()
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}





