/**
 * CTS Data Dictionary API
 * An API for interacting with CTS Data Dictionary.
 *
 * The version of the OpenAPI document: 0.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The TableField model module.
 * @module model/TableField
 * @version 0.20.0
 */
class TableField {
    /**
     * Constructs a new <code>TableField</code>.
     * @alias module:model/TableField
     */
    constructor() { 
        
        TableField.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>TableField</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/TableField} obj Optional instance to populate.
     * @return {module:model/TableField} The populated <code>TableField</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new TableField();

            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('dataItemId')) {
                obj['dataItemId'] = ApiClient.convertToType(data['dataItemId'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('dataType')) {
                obj['dataType'] = ApiClient.convertToType(data['dataType'], 'String');
            }
            if (data.hasOwnProperty('position')) {
                obj['position'] = ApiClient.convertToType(data['position'], 'Number');
            }
            if (data.hasOwnProperty('isPrimaryKey')) {
                obj['isPrimaryKey'] = ApiClient.convertToType(data['isPrimaryKey'], 'Boolean');
            }
            if (data.hasOwnProperty('nullable')) {
                obj['nullable'] = ApiClient.convertToType(data['nullable'], 'Boolean');
            }
            if (data.hasOwnProperty('hasCodeDependency')) {
                obj['hasCodeDependency'] = ApiClient.convertToType(data['hasCodeDependency'], 'Boolean');
            }
            if (data.hasOwnProperty('monetary')) {
                obj['monetary'] = ApiClient.convertToType(data['monetary'], 'Boolean');
            }
            if (data.hasOwnProperty('splitAffected')) {
                obj['splitAffected'] = ApiClient.convertToType(data['splitAffected'], 'Boolean');
            }
            if (data.hasOwnProperty('unitFactor')) {
                obj['unitFactor'] = ApiClient.convertToType(data['unitFactor'], 'String');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
        }
        return obj;
    }


}

/**
 * Unique identifier for a combination of table and data field
 * @member {String} id
 */
TableField.prototype['id'] = undefined;

/**
 * Unique identifier for the data item
 * @member {String} dataItemId
 */
TableField.prototype['dataItemId'] = undefined;

/**
 * Name of the data field
 * @member {String} name
 */
TableField.prototype['name'] = undefined;

/**
 * Data type of the data field
 * @member {String} dataType
 */
TableField.prototype['dataType'] = undefined;

/**
 * Column position of the data field within the table
 * @member {Number} position
 */
TableField.prototype['position'] = undefined;

/**
 * Flag indicating if the data field is a primary key.
 * @member {Boolean} isPrimaryKey
 */
TableField.prototype['isPrimaryKey'] = undefined;

/**
 * Flag indicating if a data field is nullable
 * @member {Boolean} nullable
 */
TableField.prototype['nullable'] = undefined;

/**
 * Flag indicating if the field's value is determined by a code value in its row. The monetary, splitAffected and unitFactor fields for that value will also be inherited from the code.
 * @member {Boolean} hasCodeDependency
 */
TableField.prototype['hasCodeDependency'] = undefined;

/**
 * Flag indicating if the data field contained in this TableField is monetary. If true, this field can have exchange rates applied to convert to other currencies
 * @member {Boolean} monetary
 */
TableField.prototype['monetary'] = undefined;

/**
 * Flag indicating if the data field contained in this TableField can be affected by splits
 * @member {Boolean} splitAffected
 */
TableField.prototype['splitAffected'] = undefined;

/**
 * Factor to indicate what units that the data field is displayed in. If null, the field does not need to have a factor applied to obtain the real value
 * @member {String} unitFactor
 */
TableField.prototype['unitFactor'] = undefined;

/**
 * A description of the data field within the context of its table
 * @member {String} description
 */
TableField.prototype['description'] = undefined;






export default TableField;

