/**
 * FactSet Fundamentals API
 * Gain access to current, comprehensive, and comparative information on securities in worldwide developed and emerging markets. Composed of annual and interim/quarterly data, detailed historical financial statement content, per share data, and calculated ratios, FactSet Fundamentals provides you with the information you need for a global investment perspective. 
 *
 * The version of the OpenAPI document: 1.0.2
 * Contact: api@factset.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Category from './Category';
import Subcategory from './Subcategory';

/**
 * The MetricsRequest model module.
 * @module model/MetricsRequest
 * @version 0.9.0
 */
class MetricsRequest {
    /**
     * Constructs a new <code>MetricsRequest</code>.
     * Metrics Request Body
     * @alias module:model/MetricsRequest
     */
    constructor() { 
        
        MetricsRequest.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>MetricsRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/MetricsRequest} obj Optional instance to populate.
     * @return {module:model/MetricsRequest} The populated <code>MetricsRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new MetricsRequest();

            if (data.hasOwnProperty('category')) {
                obj['category'] = Category.constructFromObject(data['category']);
            }
            if (data.hasOwnProperty('subcategory')) {
                obj['subcategory'] = Subcategory.constructFromObject(data['subcategory']);
            }
        }
        return obj;
    }


}

/**
 * @member {module:model/Category} category
 */
MetricsRequest.prototype['category'] = undefined;

/**
 * @member {module:model/Subcategory} subcategory
 */
MetricsRequest.prototype['subcategory'] = undefined;






export default MetricsRequest;

