/**
 * Exchange Snapshot API
 * A service that provides access to Real Time or Delayed data snapped at hourly intervals for an entire Exchange. Clients that need access to the DFSnapshot product for a custom watchlist snapped at a client specified interval should use this API
 *
 * The version of the OpenAPI document: 1.0
 * Contact: teammustang@factset.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ErrorMessages from '../model/ErrorMessages';
import InlineResponse200 from '../model/InlineResponse200';

/**
* Snapshot service.
* @module api/SnapshotApi
* @version 0.20.0
*/
export default class SnapshotApi {

    /**
    * Constructs a new SnapshotApi. 
    * @alias module:api/SnapshotApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * Snapshot
     * A service that provides access to Real Time or Delayed data snapped at hourly intervals for an entire Exchange
     * @param {Number} product any product subscribed by client. Minimum value for prod code=9001
     * @param {Date} startDate YYYYMMDD (Choose between 1 and 4 previous trading days)
     * @param {Date} endDate YYYYMMDD (Choose between 1 and 4 previous trading days, greater than or equal to start date)
     * @param {String} startTime HHMM (24 hour time EST)
     * @param {String} endTime HHMM (24 hour time EST)
     * @param {Object} opts Optional parameters
     * @param {module:model/String} opts.access Option to select from static, DL or RT data (default to 'DL')
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse200} and HTTP response
     */
    getV1ListFilesWithHttpInfo(product, startDate, endDate, startTime, endTime, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'product' is set
      if (product === undefined || product === null) {
        throw new Error("Missing the required parameter 'product' when calling getV1ListFiles");
      }
      // verify the required parameter 'startDate' is set
      if (startDate === undefined || startDate === null) {
        throw new Error("Missing the required parameter 'startDate' when calling getV1ListFiles");
      }
      // verify the required parameter 'endDate' is set
      if (endDate === undefined || endDate === null) {
        throw new Error("Missing the required parameter 'endDate' when calling getV1ListFiles");
      }
      // verify the required parameter 'startTime' is set
      if (startTime === undefined || startTime === null) {
        throw new Error("Missing the required parameter 'startTime' when calling getV1ListFiles");
      }
      // verify the required parameter 'endTime' is set
      if (endTime === undefined || endTime === null) {
        throw new Error("Missing the required parameter 'endTime' when calling getV1ListFiles");
      }

      let pathParams = {
      };
      let queryParams = {
        'product': product,
        'start_date': startDate,
        'end_date': endDate,
        'start_time': startTime,
        'end_time': endTime,
        'access': opts['access']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];


      let returnType = InlineResponse200;

      return this.apiClient.callApi(
        '/v1/list-files', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Snapshot
     * A service that provides access to Real Time or Delayed data snapped at hourly intervals for an entire Exchange
     * @param {Number} product any product subscribed by client. Minimum value for prod code=9001
     * @param {Date} startDate YYYYMMDD (Choose between 1 and 4 previous trading days)
     * @param {Date} endDate YYYYMMDD (Choose between 1 and 4 previous trading days, greater than or equal to start date)
     * @param {String} startTime HHMM (24 hour time EST)
     * @param {String} endTime HHMM (24 hour time EST)
     * @param {Object} opts Optional parameters
     * @param {module:model/String} opts.access Option to select from static, DL or RT data (default to 'DL')
     * @return { Promise.< module:model/InlineResponse200 > } a Promise, with data of type {@link module:model/InlineResponse200 }
     */
    getV1ListFiles(product, startDate, endDate, startTime, endTime, opts) {
      return this.getV1ListFilesWithHttpInfo(product, startDate, endDate, startTime, endTime, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}





