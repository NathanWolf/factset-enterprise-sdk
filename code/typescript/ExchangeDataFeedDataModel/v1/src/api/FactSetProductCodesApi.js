/**
 * Exchange DataFeed Data Model API
 * FactSetâ€™s Exchange DataFeed products provide access to consolidated real-time and delayed global exchange data. Proprietary technology normalizes over 250 global venues, 18+ million instruments, and 150+ data fields. Asset types integrated include equities, futures, options, warrants, fixed income, mutual funds, ETFs, indices, commodities, and FX rates. Innovative technology ensures reliability and provides scalability that allows clients to make requests based on a symbol list or an exchange. Reduce development time by powering proprietary and third-party applications with exchange data from a unified data model. <p>The Exchange DataFeed Data Model API provides mappings for enumerations used in our Real-Time DataFeed products and should be used in conjunction with the DataFeed Data Model documentation available for each product. <p>The initial beta version of this API is limited to include mapping tables for the product codes only.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ErrorResponse from '../model/ErrorResponse';
import RTDataModelProducts from '../model/RTDataModelProducts';

/**
* FactSetProductCodes service.
* @module api/FactSetProductCodesApi
*/
export default class FactSetProductCodesApi {

    /**
    * Constructs a new FactSetProductCodesApi. 
    * @alias module:api/FactSetProductCodesApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * Request the enumeration table for FactSet product codes.
     *  Data can be returned in CSV, JSON or XML format, use the `format` parameter to chnage from the default JSON format.    '*You must be logged into the Developer Portal and obtain an **[API Key](https://developer.factset.com/factset/api-key-listing)** for ''Try it Out'' to receive a successful server response. Select **Authorize** button or visit **[Authentication Support](https://developer.factset.com/authentication)** for more details.*' 
     * @param {Object} opts Optional parameters
     * @param {module:model/String} opts.format The format of the output file.<p>**Try it Out** - All formats available</p> (default to 'json')
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/RTDataModelProducts} and HTTP response
     */
    getProductsWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'format': opts['format']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml'];


      let returnType = RTDataModelProducts;

      return this.apiClient.callApi(
        '/products', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Request the enumeration table for FactSet product codes.
     *  Data can be returned in CSV, JSON or XML format, use the `format` parameter to chnage from the default JSON format.    '*You must be logged into the Developer Portal and obtain an **[API Key](https://developer.factset.com/factset/api-key-listing)** for ''Try it Out'' to receive a successful server response. Select **Authorize** button or visit **[Authentication Support](https://developer.factset.com/authentication)** for more details.*' 
     * @param {Object} opts Optional parameters
     * @param {module:model/String} opts.format The format of the output file.<p>**Try it Out** - All formats available</p> (default to 'json')
     * @return { Promise.< module:model/RTDataModelProducts > } a Promise, with data of type {@link module:model/RTDataModelProducts }
     */
    getProducts(opts) {
      return this.getProductsWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}





