/**
 * Open:Risk API
 * Service to calculate parametric linear risk statistics and generate risk model asset identifier mappings.
 *
 * The version of the OpenAPI document: 1.22.0
 * Contact: ParametricRiskAnalyticsDevelopment@factset.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import SupportedStatsLevels from './SupportedStatsLevels';
import SupportedStatsSecurityGroupMethod from './SupportedStatsSecurityGroupMethod';

/**
 * The SupportedStatsData model module.
 * @module model/SupportedStatsData
 */
class SupportedStatsData {
    /**
     * Constructs a new <code>SupportedStatsData</code>.
     * @alias module:model/SupportedStatsData
     * @param correlatedSpecificRisk {Boolean} 
     * @param covarianceTimesTwo {Boolean} 
     * @param requiresCorrelatedSpecificRisk {Boolean} 
     * @param requiresCovarianceTimesTwo {Boolean} 
     * @param derived {Array.<String>} A list of the base stat and all possible derived stats which are currently supported by the service.
     * @param levels {module:model/SupportedStatsLevels} 
     */
    constructor(correlatedSpecificRisk, covarianceTimesTwo, requiresCorrelatedSpecificRisk, requiresCovarianceTimesTwo, derived, levels) { 
        
        SupportedStatsData.initialize(this, correlatedSpecificRisk, covarianceTimesTwo, requiresCorrelatedSpecificRisk, requiresCovarianceTimesTwo, derived, levels);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, correlatedSpecificRisk, covarianceTimesTwo, requiresCorrelatedSpecificRisk, requiresCovarianceTimesTwo, derived, levels) { 
        obj['correlatedSpecificRisk'] = correlatedSpecificRisk;
        obj['covarianceTimesTwo'] = covarianceTimesTwo;
        obj['requiresCorrelatedSpecificRisk'] = requiresCorrelatedSpecificRisk;
        obj['requiresCovarianceTimesTwo'] = requiresCovarianceTimesTwo;
        obj['derived'] = derived;
        obj['levels'] = levels;
    }

    /**
     * Constructs a <code>SupportedStatsData</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/SupportedStatsData} obj Optional instance to populate.
     * @return {module:model/SupportedStatsData} The populated <code>SupportedStatsData</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new SupportedStatsData();

            if (data.hasOwnProperty('correlatedSpecificRisk')) {
                obj['correlatedSpecificRisk'] = ApiClient.convertToType(data['correlatedSpecificRisk'], 'Boolean');
            }
            if (data.hasOwnProperty('covarianceTimesTwo')) {
                obj['covarianceTimesTwo'] = ApiClient.convertToType(data['covarianceTimesTwo'], 'Boolean');
            }
            if (data.hasOwnProperty('requiresCorrelatedSpecificRisk')) {
                obj['requiresCorrelatedSpecificRisk'] = ApiClient.convertToType(data['requiresCorrelatedSpecificRisk'], 'Boolean');
            }
            if (data.hasOwnProperty('requiresCovarianceTimesTwo')) {
                obj['requiresCovarianceTimesTwo'] = ApiClient.convertToType(data['requiresCovarianceTimesTwo'], 'Boolean');
            }
            if (data.hasOwnProperty('derived')) {
                obj['derived'] = ApiClient.convertToType(data['derived'], ['String']);
            }
            if (data.hasOwnProperty('levels')) {
                obj['levels'] = SupportedStatsLevels.constructFromObject(data['levels']);
            }
            if (data.hasOwnProperty('securityGroupMethod')) {
                obj['securityGroupMethod'] = SupportedStatsSecurityGroupMethod.constructFromObject(data['securityGroupMethod']);
            }
            if (data.hasOwnProperty('securityLotAllocation')) {
                obj['securityLotAllocation'] = ApiClient.convertToType(data['securityLotAllocation'], 'String');
            }
        }
        return obj;
    }


}

/**
 * @member {Boolean} correlatedSpecificRisk
 */
SupportedStatsData.prototype['correlatedSpecificRisk'] = undefined;

/**
 * @member {Boolean} covarianceTimesTwo
 */
SupportedStatsData.prototype['covarianceTimesTwo'] = undefined;

/**
 * @member {Boolean} requiresCorrelatedSpecificRisk
 */
SupportedStatsData.prototype['requiresCorrelatedSpecificRisk'] = undefined;

/**
 * @member {Boolean} requiresCovarianceTimesTwo
 */
SupportedStatsData.prototype['requiresCovarianceTimesTwo'] = undefined;

/**
 * A list of the base stat and all possible derived stats which are currently supported by the service.
 * @member {Array.<String>} derived
 */
SupportedStatsData.prototype['derived'] = undefined;

/**
 * @member {module:model/SupportedStatsLevels} levels
 */
SupportedStatsData.prototype['levels'] = undefined;

/**
 * @member {module:model/SupportedStatsSecurityGroupMethod} securityGroupMethod
 */
SupportedStatsData.prototype['securityGroupMethod'] = undefined;

/**
 * Indicates the weights according to which securities with multiple lots have their risk statistic values allocated. 'FillAll' indicates the computed statistic value of a particular security is allocated to each of its lots equally. This is common for risk statistics such as marginal statistics or beta. If security group calculations are available, these weights will be used along with 'weighting' method specified in 'securityGroupMethod'. For example, if this is 'ActiveWeights' and 'weighting' is 'AbsoluteValue', a net position value is allocated to multiple lots based off of absolute active weights distribution.
 * @member {module:model/SupportedStatsData.SecurityLotAllocationEnum} securityLotAllocation
 */
SupportedStatsData.prototype['securityLotAllocation'] = undefined;





/**
 * Allowed values for the <code>securityLotAllocation</code> property.
 * @enum {String}
 * @readonly
 */
SupportedStatsData['SecurityLotAllocationEnum'] = {

    /**
     * value: "PortfolioWeights"
     * @const
     */
    "PortfolioWeights": "PortfolioWeights",

    /**
     * value: "BenchmarkWeights"
     * @const
     */
    "BenchmarkWeights": "BenchmarkWeights",

    /**
     * value: "ActiveWeights"
     * @const
     */
    "ActiveWeights": "ActiveWeights",

    /**
     * value: "MarketWeights"
     * @const
     */
    "MarketWeights": "MarketWeights",

    /**
     * value: "FillAll"
     * @const
     */
    "FillAll": "FillAll"
};



export default SupportedStatsData;

