/**
 * OFDB API
 * OFDB api
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: client.portfolio.data.engineering@factset.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import InlineResponse202 from '../model/InlineResponse202';
import InlineResponse400 from '../model/InlineResponse400';
import InlineResponse403 from '../model/InlineResponse403';
import InlineResponse404 from '../model/InlineResponse404';
import InlineResponse413 from '../model/InlineResponse413';
import InlineResponse429 from '../model/InlineResponse429';
import SuccessPostResponse from '../model/SuccessPostResponse';
import UpdateSymbolDate from '../model/UpdateSymbolDate';
import UpdateSymbolDate3D from '../model/UpdateSymbolDate3D';
import UpdateSymbols from '../model/UpdateSymbols';

/**
* Modify service.
* @module api/ModifyApi
*/
export default class ModifyApi {

    /**
    * Constructs a new ModifyApi. 
    * @alias module:api/ModifyApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * Deletes all data specific to the date in 3d database(OFDB). This includes all the symbols related to that date
     * @param {String} path Encode database path
     * @param {Number} date Date in YYYYMMDD format
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse202} and HTTP response
     */
    deleteDatesWithHttpInfo(path, date) {
      let postBody = null;
      // verify the required parameter 'path' is set
      if (path === undefined || path === null) {
        throw new Error("Missing the required parameter 'path' when calling deleteDates");
      }
      // verify the required parameter 'date' is set
      if (date === undefined || date === null) {
        throw new Error("Missing the required parameter 'date' when calling deleteDates");
      }

      let pathParams = {
        'path': path,
        'date': date
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];


      let returnType = InlineResponse202;

      return this.apiClient.callApi(
        '/v1/database/{path}/dates/{date}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Deletes all data specific to the date in 3d database(OFDB). This includes all the symbols related to that date
     * @param {String} path Encode database path
     * @param {Number} date Date in YYYYMMDD format
     * @return { Promise.< module:model/InlineResponse202 > } a Promise, with data of type {@link module:model/InlineResponse202 }
     */
    deleteDates(path, date) {
      return this.deleteDatesWithHttpInfo(path, date)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Deletes data specific to the symbol and date from a 3d database(OFDB).
     * @param {String} path Encode database path
     * @param {Number} date Date in YYYYMMDD format
     * @param {String} symbol Symbol with in the ofdb
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse202} and HTTP response
     */
    deleteSymbolDate3DWithHttpInfo(path, date, symbol) {
      let postBody = null;
      // verify the required parameter 'path' is set
      if (path === undefined || path === null) {
        throw new Error("Missing the required parameter 'path' when calling deleteSymbolDate3D");
      }
      // verify the required parameter 'date' is set
      if (date === undefined || date === null) {
        throw new Error("Missing the required parameter 'date' when calling deleteSymbolDate3D");
      }
      // verify the required parameter 'symbol' is set
      if (symbol === undefined || symbol === null) {
        throw new Error("Missing the required parameter 'symbol' when calling deleteSymbolDate3D");
      }

      let pathParams = {
        'path': path,
        'date': date,
        'symbol': symbol
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];


      let returnType = InlineResponse202;

      return this.apiClient.callApi(
        '/v1/database/{path}/dates/{date}/symbols/{symbol}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Deletes data specific to the symbol and date from a 3d database(OFDB).
     * @param {String} path Encode database path
     * @param {Number} date Date in YYYYMMDD format
     * @param {String} symbol Symbol with in the ofdb
     * @return { Promise.< module:model/InlineResponse202 > } a Promise, with data of type {@link module:model/InlineResponse202 }
     */
    deleteSymbolDate3D(path, date, symbol) {
      return this.deleteSymbolDate3DWithHttpInfo(path, date, symbol)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Deletes all data specific to the symbol in both 2d and 3d database(OFDB). This includes all the dates related to that symbols in 3d database(OFDB)
     * @param {String} path Encode database path
     * @param {String} symbol Symbol with in the ofdb
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse202} and HTTP response
     */
    deleteSymbolsWithHttpInfo(path, symbol) {
      let postBody = null;
      // verify the required parameter 'path' is set
      if (path === undefined || path === null) {
        throw new Error("Missing the required parameter 'path' when calling deleteSymbols");
      }
      // verify the required parameter 'symbol' is set
      if (symbol === undefined || symbol === null) {
        throw new Error("Missing the required parameter 'symbol' when calling deleteSymbols");
      }

      let pathParams = {
        'path': path,
        'symbol': symbol
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];


      let returnType = InlineResponse202;

      return this.apiClient.callApi(
        '/v1/database/{path}/symbols/{symbol}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Deletes all data specific to the symbol in both 2d and 3d database(OFDB). This includes all the dates related to that symbols in 3d database(OFDB)
     * @param {String} path Encode database path
     * @param {String} symbol Symbol with in the ofdb
     * @return { Promise.< module:model/InlineResponse202 > } a Promise, with data of type {@link module:model/InlineResponse202 }
     */
    deleteSymbols(path, symbol) {
      return this.deleteSymbolsWithHttpInfo(path, symbol)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Updates an existing date field value for single/multiple symbols or adds a new date/symbol within a date if not present in 3d database(OFDB).
     * @param {String} path Encode database path
     * @param {Number} date Date in YYYYMMDD format
     * @param {module:model/UpdateSymbolDate} updateSymbolDate Required data for updating date in the database
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/SuccessPostResponse} and HTTP response
     */
    updateSymbolDateWithHttpInfo(path, date, updateSymbolDate) {
      let postBody = updateSymbolDate;
      // verify the required parameter 'path' is set
      if (path === undefined || path === null) {
        throw new Error("Missing the required parameter 'path' when calling updateSymbolDate");
      }
      // verify the required parameter 'date' is set
      if (date === undefined || date === null) {
        throw new Error("Missing the required parameter 'date' when calling updateSymbolDate");
      }
      // verify the required parameter 'updateSymbolDate' is set
      if (updateSymbolDate === undefined || updateSymbolDate === null) {
        throw new Error("Missing the required parameter 'updateSymbolDate' when calling updateSymbolDate");
      }

      let pathParams = {
        'path': path,
        'date': date
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];


      let returnType = SuccessPostResponse;

      return this.apiClient.callApi(
        '/v1/database/{path}/dates/{date}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Updates an existing date field value for single/multiple symbols or adds a new date/symbol within a date if not present in 3d database(OFDB).
     * @param {String} path Encode database path
     * @param {Number} date Date in YYYYMMDD format
     * @param {module:model/UpdateSymbolDate} updateSymbolDate Required data for updating date in the database
     * @return { Promise.< module:model/SuccessPostResponse > } a Promise, with data of type {@link module:model/SuccessPostResponse }
     */
    updateSymbolDate(path, date, updateSymbolDate) {
      return this.updateSymbolDateWithHttpInfo(path, date, updateSymbolDate)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Updates a symbol field value for a given date of 3d database(OFDB)
     * @param {String} path Encode database path
     * @param {Number} date Date in YYYYMMDD format
     * @param {String} symbol Symbol with in the ofdb
     * @param {module:model/UpdateSymbolDate3D} updateSymbolDate3D Data for updating symbol in the database
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/SuccessPostResponse} and HTTP response
     */
    updateSymbolDate3DWithHttpInfo(path, date, symbol, updateSymbolDate3D) {
      let postBody = updateSymbolDate3D;
      // verify the required parameter 'path' is set
      if (path === undefined || path === null) {
        throw new Error("Missing the required parameter 'path' when calling updateSymbolDate3D");
      }
      // verify the required parameter 'date' is set
      if (date === undefined || date === null) {
        throw new Error("Missing the required parameter 'date' when calling updateSymbolDate3D");
      }
      // verify the required parameter 'symbol' is set
      if (symbol === undefined || symbol === null) {
        throw new Error("Missing the required parameter 'symbol' when calling updateSymbolDate3D");
      }
      // verify the required parameter 'updateSymbolDate3D' is set
      if (updateSymbolDate3D === undefined || updateSymbolDate3D === null) {
        throw new Error("Missing the required parameter 'updateSymbolDate3D' when calling updateSymbolDate3D");
      }

      let pathParams = {
        'path': path,
        'date': date,
        'symbol': symbol
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];


      let returnType = SuccessPostResponse;

      return this.apiClient.callApi(
        '/v1/database/{path}/dates/{date}/symbols/{symbol}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Updates a symbol field value for a given date of 3d database(OFDB)
     * @param {String} path Encode database path
     * @param {Number} date Date in YYYYMMDD format
     * @param {String} symbol Symbol with in the ofdb
     * @param {module:model/UpdateSymbolDate3D} updateSymbolDate3D Data for updating symbol in the database
     * @return { Promise.< module:model/SuccessPostResponse > } a Promise, with data of type {@link module:model/SuccessPostResponse }
     */
    updateSymbolDate3D(path, date, symbol, updateSymbolDate3D) {
      return this.updateSymbolDate3DWithHttpInfo(path, date, symbol, updateSymbolDate3D)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Updates an existing symbol field value for single/multiple dates or adds a new symbol/date within a symbol if not present in 3d database(OFDB). Updates an existing symbol field value or adds a new symbol if not present in the 2d database(OFDB)
     * @param {String} path Encode database path
     * @param {String} symbol Symbol with in the ofdb
     * @param {module:model/UpdateSymbols} updateSymbols Data for updating symbol in the database
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/SuccessPostResponse} and HTTP response
     */
    updateSymbolsWithHttpInfo(path, symbol, updateSymbols) {
      let postBody = updateSymbols;
      // verify the required parameter 'path' is set
      if (path === undefined || path === null) {
        throw new Error("Missing the required parameter 'path' when calling updateSymbols");
      }
      // verify the required parameter 'symbol' is set
      if (symbol === undefined || symbol === null) {
        throw new Error("Missing the required parameter 'symbol' when calling updateSymbols");
      }
      // verify the required parameter 'updateSymbols' is set
      if (updateSymbols === undefined || updateSymbols === null) {
        throw new Error("Missing the required parameter 'updateSymbols' when calling updateSymbols");
      }

      let pathParams = {
        'path': path,
        'symbol': symbol
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];


      let returnType = SuccessPostResponse;

      return this.apiClient.callApi(
        '/v1/database/{path}/symbols/{symbol}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Updates an existing symbol field value for single/multiple dates or adds a new symbol/date within a symbol if not present in 3d database(OFDB). Updates an existing symbol field value or adds a new symbol if not present in the 2d database(OFDB)
     * @param {String} path Encode database path
     * @param {String} symbol Symbol with in the ofdb
     * @param {module:model/UpdateSymbols} updateSymbols Data for updating symbol in the database
     * @return { Promise.< module:model/SuccessPostResponse > } a Promise, with data of type {@link module:model/SuccessPostResponse }
     */
    updateSymbols(path, symbol, updateSymbols) {
      return this.updateSymbolsWithHttpInfo(path, symbol, updateSymbols)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}





