/**
 * OFDB API
 * OFDB api
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: cpd-hyd-engineering@factset.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import InlineObject1 from '../model/InlineObject1';
import InlineObject3 from '../model/InlineObject3';
import InlineObject5 from '../model/InlineObject5';
import SuccessPostResponse from '../model/SuccessPostResponse';

/**
* Modify service.
* @module api/ModifyApi
* @version 0.9.2
*/
export default class ModifyApi {

    /**
    * Constructs a new ModifyApi. 
    * @alias module:api/ModifyApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * Deletes all data specific to the date in 3d database(OFDB). This includes all the symbols related to that date
     * @param {String} path Encode database path
     * @param {Number} date Date in YYYYMMDD format
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object} and HTTP response
     */
    v1DatabasePathDatesDateDeleteWithHttpInfo(path, date) {
      let postBody = null;
      // verify the required parameter 'path' is set
      if (path === undefined || path === null) {
        throw new Error("Missing the required parameter 'path' when calling v1DatabasePathDatesDateDelete");
      }
      // verify the required parameter 'date' is set
      if (date === undefined || date === null) {
        throw new Error("Missing the required parameter 'date' when calling v1DatabasePathDatesDateDelete");
      }

      let pathParams = {
        'path': path,
        'date': date
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];


      let returnType = Object;

      return this.apiClient.callApi(
        '/v1/database/{path}/dates/{date}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Deletes all data specific to the date in 3d database(OFDB). This includes all the symbols related to that date
     * @param {String} path Encode database path
     * @param {Number} date Date in YYYYMMDD format
     * @return { Promise.< Object > } a Promise, with data of type {@link Object }
     */
    v1DatabasePathDatesDateDelete(path, date) {
      return this.v1DatabasePathDatesDateDeleteWithHttpInfo(path, date)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Updates an existing date field value for single/multiple symbols or adds a new date/symbol within a date if not present in 3d database(OFDB).
     * @param {String} path Encode database path
     * @param {Number} date Date in YYYYMMDD format
     * @param {module:model/InlineObject3} inlineObject3 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/SuccessPostResponse} and HTTP response
     */
    v1DatabasePathDatesDatePutWithHttpInfo(path, date, inlineObject3) {
      let postBody = inlineObject3;
      // verify the required parameter 'path' is set
      if (path === undefined || path === null) {
        throw new Error("Missing the required parameter 'path' when calling v1DatabasePathDatesDatePut");
      }
      // verify the required parameter 'date' is set
      if (date === undefined || date === null) {
        throw new Error("Missing the required parameter 'date' when calling v1DatabasePathDatesDatePut");
      }
      // verify the required parameter 'inlineObject3' is set
      if (inlineObject3 === undefined || inlineObject3 === null) {
        throw new Error("Missing the required parameter 'inlineObject3' when calling v1DatabasePathDatesDatePut");
      }

      let pathParams = {
        'path': path,
        'date': date
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];


      let returnType = SuccessPostResponse;

      return this.apiClient.callApi(
        '/v1/database/{path}/dates/{date}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Updates an existing date field value for single/multiple symbols or adds a new date/symbol within a date if not present in 3d database(OFDB).
     * @param {String} path Encode database path
     * @param {Number} date Date in YYYYMMDD format
     * @param {module:model/InlineObject3} inlineObject3 
     * @return { Promise.< module:model/SuccessPostResponse > } a Promise, with data of type {@link module:model/SuccessPostResponse }
     */
    v1DatabasePathDatesDatePut(path, date, inlineObject3) {
      return this.v1DatabasePathDatesDatePutWithHttpInfo(path, date, inlineObject3)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Deletes data specific to the symbol and date from a 3d database(OFDB).
     * @param {String} path Encode database path
     * @param {Number} date Date in YYYYMMDD format
     * @param {String} symbol Symbol with in the ofdb
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object} and HTTP response
     */
    v1DatabasePathDatesDateSymbolsSymbolDeleteWithHttpInfo(path, date, symbol) {
      let postBody = null;
      // verify the required parameter 'path' is set
      if (path === undefined || path === null) {
        throw new Error("Missing the required parameter 'path' when calling v1DatabasePathDatesDateSymbolsSymbolDelete");
      }
      // verify the required parameter 'date' is set
      if (date === undefined || date === null) {
        throw new Error("Missing the required parameter 'date' when calling v1DatabasePathDatesDateSymbolsSymbolDelete");
      }
      // verify the required parameter 'symbol' is set
      if (symbol === undefined || symbol === null) {
        throw new Error("Missing the required parameter 'symbol' when calling v1DatabasePathDatesDateSymbolsSymbolDelete");
      }

      let pathParams = {
        'path': path,
        'date': date,
        'symbol': symbol
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];


      let returnType = Object;

      return this.apiClient.callApi(
        '/v1/database/{path}/dates/{date}/symbols/{symbol}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Deletes data specific to the symbol and date from a 3d database(OFDB).
     * @param {String} path Encode database path
     * @param {Number} date Date in YYYYMMDD format
     * @param {String} symbol Symbol with in the ofdb
     * @return { Promise.< Object > } a Promise, with data of type {@link Object }
     */
    v1DatabasePathDatesDateSymbolsSymbolDelete(path, date, symbol) {
      return this.v1DatabasePathDatesDateSymbolsSymbolDeleteWithHttpInfo(path, date, symbol)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Updates a symbol field value for a given date of 3d database(OFDB)
     * @param {String} path Encode database path
     * @param {Number} date Date in YYYYMMDD format
     * @param {String} symbol Symbol with in the ofdb
     * @param {module:model/InlineObject5} inlineObject5 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/SuccessPostResponse} and HTTP response
     */
    v1DatabasePathDatesDateSymbolsSymbolPutWithHttpInfo(path, date, symbol, inlineObject5) {
      let postBody = inlineObject5;
      // verify the required parameter 'path' is set
      if (path === undefined || path === null) {
        throw new Error("Missing the required parameter 'path' when calling v1DatabasePathDatesDateSymbolsSymbolPut");
      }
      // verify the required parameter 'date' is set
      if (date === undefined || date === null) {
        throw new Error("Missing the required parameter 'date' when calling v1DatabasePathDatesDateSymbolsSymbolPut");
      }
      // verify the required parameter 'symbol' is set
      if (symbol === undefined || symbol === null) {
        throw new Error("Missing the required parameter 'symbol' when calling v1DatabasePathDatesDateSymbolsSymbolPut");
      }
      // verify the required parameter 'inlineObject5' is set
      if (inlineObject5 === undefined || inlineObject5 === null) {
        throw new Error("Missing the required parameter 'inlineObject5' when calling v1DatabasePathDatesDateSymbolsSymbolPut");
      }

      let pathParams = {
        'path': path,
        'date': date,
        'symbol': symbol
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];


      let returnType = SuccessPostResponse;

      return this.apiClient.callApi(
        '/v1/database/{path}/dates/{date}/symbols/{symbol}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Updates a symbol field value for a given date of 3d database(OFDB)
     * @param {String} path Encode database path
     * @param {Number} date Date in YYYYMMDD format
     * @param {String} symbol Symbol with in the ofdb
     * @param {module:model/InlineObject5} inlineObject5 
     * @return { Promise.< module:model/SuccessPostResponse > } a Promise, with data of type {@link module:model/SuccessPostResponse }
     */
    v1DatabasePathDatesDateSymbolsSymbolPut(path, date, symbol, inlineObject5) {
      return this.v1DatabasePathDatesDateSymbolsSymbolPutWithHttpInfo(path, date, symbol, inlineObject5)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Deletes all data specific to the symbol in both 2d and 3d database(OFDB). This includes all the dates related to that symbols in 3d database(OFDB)
     * @param {String} path Encode database path
     * @param {String} symbol Symbol with in the ofdb
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object} and HTTP response
     */
    v1DatabasePathSymbolsSymbolDeleteWithHttpInfo(path, symbol) {
      let postBody = null;
      // verify the required parameter 'path' is set
      if (path === undefined || path === null) {
        throw new Error("Missing the required parameter 'path' when calling v1DatabasePathSymbolsSymbolDelete");
      }
      // verify the required parameter 'symbol' is set
      if (symbol === undefined || symbol === null) {
        throw new Error("Missing the required parameter 'symbol' when calling v1DatabasePathSymbolsSymbolDelete");
      }

      let pathParams = {
        'path': path,
        'symbol': symbol
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];


      let returnType = Object;

      return this.apiClient.callApi(
        '/v1/database/{path}/symbols/{symbol}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Deletes all data specific to the symbol in both 2d and 3d database(OFDB). This includes all the dates related to that symbols in 3d database(OFDB)
     * @param {String} path Encode database path
     * @param {String} symbol Symbol with in the ofdb
     * @return { Promise.< Object > } a Promise, with data of type {@link Object }
     */
    v1DatabasePathSymbolsSymbolDelete(path, symbol) {
      return this.v1DatabasePathSymbolsSymbolDeleteWithHttpInfo(path, symbol)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Updates an existing symbol field value for single/multiple dates or adds a new symbol/date within a symbol if not present in 3d database(OFDB). Updates an existing symbol field value or adds a new symbol if not present in the 2d database(OFDB)
     * @param {String} path Encode database path
     * @param {String} symbol Symbol with in the ofdb
     * @param {module:model/InlineObject1} inlineObject1 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/SuccessPostResponse} and HTTP response
     */
    v1DatabasePathSymbolsSymbolPutWithHttpInfo(path, symbol, inlineObject1) {
      let postBody = inlineObject1;
      // verify the required parameter 'path' is set
      if (path === undefined || path === null) {
        throw new Error("Missing the required parameter 'path' when calling v1DatabasePathSymbolsSymbolPut");
      }
      // verify the required parameter 'symbol' is set
      if (symbol === undefined || symbol === null) {
        throw new Error("Missing the required parameter 'symbol' when calling v1DatabasePathSymbolsSymbolPut");
      }
      // verify the required parameter 'inlineObject1' is set
      if (inlineObject1 === undefined || inlineObject1 === null) {
        throw new Error("Missing the required parameter 'inlineObject1' when calling v1DatabasePathSymbolsSymbolPut");
      }

      let pathParams = {
        'path': path,
        'symbol': symbol
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];


      let returnType = SuccessPostResponse;

      return this.apiClient.callApi(
        '/v1/database/{path}/symbols/{symbol}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Updates an existing symbol field value for single/multiple dates or adds a new symbol/date within a symbol if not present in 3d database(OFDB). Updates an existing symbol field value or adds a new symbol if not present in the 2d database(OFDB)
     * @param {String} path Encode database path
     * @param {String} symbol Symbol with in the ofdb
     * @param {module:model/InlineObject1} inlineObject1 
     * @return { Promise.< module:model/SuccessPostResponse > } a Promise, with data of type {@link module:model/SuccessPostResponse }
     */
    v1DatabasePathSymbolsSymbolPut(path, symbol, inlineObject1) {
      return this.v1DatabasePathSymbolsSymbolPutWithHttpInfo(path, symbol, inlineObject1)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}





