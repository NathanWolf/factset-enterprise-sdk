/**
 * OFDB API
 * OFDB api
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: cpd-hyd-engineering@factset.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import DatabaseSchema from '../model/DatabaseSchema';
import InlineObject from '../model/InlineObject';
import InlineObject2 from '../model/InlineObject2';
import InlineObject4 from '../model/InlineObject4';
import InlineResponse201 from '../model/InlineResponse201';
import SuccessPostResponse from '../model/SuccessPostResponse';

/**
* Create service.
* @module api/CreateApi
* @version 0.9.0
*/
export default class CreateApi {

    /**
    * Constructs a new CreateApi. 
    * @alias module:api/CreateApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * Creates a 2d or 3d database(OFDB)
     * @param {Object} opts Optional parameters
     * @param {module:model/DatabaseSchema} opts.databaseSchema 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse201} and HTTP response
     */
    createDatabaseWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = opts['databaseSchema'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = InlineResponse201;
      return this.apiClient.callApi(
        '/v1/database/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Creates a 2d or 3d database(OFDB)
     * @param {Object} opts Optional parameters
     * @param {module:model/DatabaseSchema} opts.databaseSchema 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/InlineResponse201}
     */
    createDatabase(opts) {
      return this.createDatabaseWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Creates a new symbol for a given date in 3d database(OFDB)
     * @param {String} path Encode database path
     * @param {Number} date Date in YYYYMMDD format
     * @param {module:model/InlineObject4} inlineObject4 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/SuccessPostResponse} and HTTP response
     */
    v1DatabasePathDatesDateSymbolsPostWithHttpInfo(path, date, inlineObject4) {
      let postBody = inlineObject4;
      // verify the required parameter 'path' is set
      if (path === undefined || path === null) {
        throw new Error("Missing the required parameter 'path' when calling v1DatabasePathDatesDateSymbolsPost");
      }
      // verify the required parameter 'date' is set
      if (date === undefined || date === null) {
        throw new Error("Missing the required parameter 'date' when calling v1DatabasePathDatesDateSymbolsPost");
      }
      // verify the required parameter 'inlineObject4' is set
      if (inlineObject4 === undefined || inlineObject4 === null) {
        throw new Error("Missing the required parameter 'inlineObject4' when calling v1DatabasePathDatesDateSymbolsPost");
      }

      let pathParams = {
        'path': path,
        'date': date
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = SuccessPostResponse;
      return this.apiClient.callApi(
        '/v1/database/{path}/dates/{date}/symbols', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Creates a new symbol for a given date in 3d database(OFDB)
     * @param {String} path Encode database path
     * @param {Number} date Date in YYYYMMDD format
     * @param {module:model/InlineObject4} inlineObject4 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/SuccessPostResponse}
     */
    v1DatabasePathDatesDateSymbolsPost(path, date, inlineObject4) {
      return this.v1DatabasePathDatesDateSymbolsPostWithHttpInfo(path, date, inlineObject4)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Creates a new date with single/multiple symbols for a 3d database(OFDB).
     * @param {String} path Encode database path
     * @param {module:model/InlineObject2} inlineObject2 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/SuccessPostResponse} and HTTP response
     */
    v1DatabasePathDatesPostWithHttpInfo(path, inlineObject2) {
      let postBody = inlineObject2;
      // verify the required parameter 'path' is set
      if (path === undefined || path === null) {
        throw new Error("Missing the required parameter 'path' when calling v1DatabasePathDatesPost");
      }
      // verify the required parameter 'inlineObject2' is set
      if (inlineObject2 === undefined || inlineObject2 === null) {
        throw new Error("Missing the required parameter 'inlineObject2' when calling v1DatabasePathDatesPost");
      }

      let pathParams = {
        'path': path
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = SuccessPostResponse;
      return this.apiClient.callApi(
        '/v1/database/{path}/dates', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Creates a new date with single/multiple symbols for a 3d database(OFDB).
     * @param {String} path Encode database path
     * @param {module:model/InlineObject2} inlineObject2 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/SuccessPostResponse}
     */
    v1DatabasePathDatesPost(path, inlineObject2) {
      return this.v1DatabasePathDatesPostWithHttpInfo(path, inlineObject2)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Creates a new symbol with single/multiple dates for 3d database(OFDB). Creates a symbol for 2d database(OFDB)
     * @param {String} path Encode database path
     * @param {module:model/InlineObject} inlineObject 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/SuccessPostResponse} and HTTP response
     */
    v1DatabasePathSymbolsPostWithHttpInfo(path, inlineObject) {
      let postBody = inlineObject;
      // verify the required parameter 'path' is set
      if (path === undefined || path === null) {
        throw new Error("Missing the required parameter 'path' when calling v1DatabasePathSymbolsPost");
      }
      // verify the required parameter 'inlineObject' is set
      if (inlineObject === undefined || inlineObject === null) {
        throw new Error("Missing the required parameter 'inlineObject' when calling v1DatabasePathSymbolsPost");
      }

      let pathParams = {
        'path': path
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = SuccessPostResponse;
      return this.apiClient.callApi(
        '/v1/database/{path}/symbols', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Creates a new symbol with single/multiple dates for 3d database(OFDB). Creates a symbol for 2d database(OFDB)
     * @param {String} path Encode database path
     * @param {module:model/InlineObject} inlineObject 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/SuccessPostResponse}
     */
    v1DatabasePathSymbolsPost(path, inlineObject) {
      return this.v1DatabasePathSymbolsPostWithHttpInfo(path, inlineObject)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
