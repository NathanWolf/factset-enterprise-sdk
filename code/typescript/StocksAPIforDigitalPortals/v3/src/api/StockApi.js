/**
 * Stocks API For Digital Portals
 * The Stocks API features a screener to search for equity instruments based on stock-specific parameters.  Parameters for up to three fiscal years might now be used in one request; data is available for the ten most recent completed fiscal years. Estimates are available for the current and two consecutive fiscal years. Search criteria also include benchmark-related attributes (beta, correlation, outperformance), and ESG parameters, based on FactSetâ€™s Truvalue ESG scores.  A separate endpoint returns the possible values and value ranges for the parameters that the endpoint /stock/notation/screener/search accepts Application developers can request the values and value ranges only for a restricted set of notations that match predefined parameters. This functionality may be used to pre-fill the values and value ranges of the parameters of the /stock/notation/screener/search endpoint so that performing a search always leads to a non-empty set of notations.  The endpoint /stock/notation/ranking/intraday/list ranks stocks notations using intraday figures, for example to build a gainers/losers list.   Additional endpoints include end-of-day benchmark key figures, and selected fundamentals (as of end of fiscal year and with daily updates).  This API is fully integrated with the corresponding [Quotes API](https://developer.factset.com/api-catalog/quotes-api-digital-portals), allowing access to detailed price and performance information of instruments, as well as basic security identifier cross-reference. For direct access to price histories, please refer to the [Time Series API for Digital Portals](https://developer.factset.com/api-catalog/time-series-api-digital-portals).  Similar criteria based screener APIs exist for fixed income instruments and securitized derivatives: See the [Bonds API](https://developer.factset.com/api-catalog/bonds-api-digital-portals) and the [Securitized Derivatives API](https://developer.factset.com/api-catalog/securitized-derivatives-api-digital-portals) for details.  See also the recipe [\"Enrich Your Digital Portal with Flexible Equity Screening\"](https://developer.factset.com/recipe-catalog/enrich-your-digital-portal-flexible-equity-screening). 
 *
 * The version of the OpenAPI document: 2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import InlineResponse20010 from '../model/InlineResponse20010';
import InlineResponse20011 from '../model/InlineResponse20011';
import InlineResponse20012 from '../model/InlineResponse20012';
import InlineResponse20013 from '../model/InlineResponse20013';
import InlineResponse20014 from '../model/InlineResponse20014';
import InlineResponse20015 from '../model/InlineResponse20015';
import InlineResponse2003 from '../model/InlineResponse2003';
import InlineResponse2004 from '../model/InlineResponse2004';
import InlineResponse2008 from '../model/InlineResponse2008';
import InlineResponse2009 from '../model/InlineResponse2009';
import PostStockDividendListRequest from '../model/PostStockDividendListRequest';
import PostStockNotationRankingIntradayListRequest from '../model/PostStockNotationRankingIntradayListRequest';
import PostStockNotationScreenerSearchRequest from '../model/PostStockNotationScreenerSearchRequest';
import PostStockNotationScreenerValueRangesGetRequest from '../model/PostStockNotationScreenerValueRangesGetRequest';

/**
* Stock service.
* @module api/StockApi
*/
export default class StockApi {

    /**
    * Constructs a new StockApi. 
    * @alias module:api/StockApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * Provides key elements of a stock profile together with the profile of the issuing company.
     * Provides key elements of a stock profile together with the profile of the issuing company.
     * @param {String} identifier 
     * @param {module:model/String} identifierType 
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.attributes Limit the attributes returned in the response to the specified set.
     * @param {String} opts.language 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse2009} and HTTP response
     */
    getStockCompositeProfileGetByNotationWithHttpInfo(identifier, identifierType, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'identifier' is set
      if (identifier === undefined || identifier === null) {
        throw new Error("Missing the required parameter 'identifier' when calling getStockCompositeProfileGetByNotation");
      }
      // verify the required parameter 'identifierType' is set
      if (identifierType === undefined || identifierType === null) {
        throw new Error("Missing the required parameter 'identifierType' when calling getStockCompositeProfileGetByNotation");
      }

      let pathParams = {
      };
      let queryParams = {
        'identifier': identifier,
        'identifierType': identifierType,
        '_attributes': this.apiClient.buildCollectionParam(opts['attributes'], 'csv'),
        '_language': opts['language']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];


      let returnType = InlineResponse2009;

      return this.apiClient.callApi(
        '/stock/composite/profile/getByNotation', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Provides key elements of a stock profile together with the profile of the issuing company.
     * Provides key elements of a stock profile together with the profile of the issuing company.
     * @param {String} identifier 
     * @param {module:model/String} identifierType 
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.attributes Limit the attributes returned in the response to the specified set.
     * @param {String} opts.language 
     * @return { Promise.< module:model/InlineResponse2009 > } a Promise, with data of type {@link module:model/InlineResponse2009 }
     */
    getStockCompositeProfileGetByNotation(identifier, identifierType, opts) {
      return this.getStockCompositeProfileGetByNotationWithHttpInfo(identifier, identifierType, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List of dividend types.
     * List of dividend types.
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.attributes Limit the attributes returned in the response to the specified set.
     * @param {String} opts.language 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse20011} and HTTP response
     */
    getStockDividendTypeListWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        '_attributes': this.apiClient.buildCollectionParam(opts['attributes'], 'csv'),
        '_language': opts['language']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];


      let returnType = InlineResponse20011;

      return this.apiClient.callApi(
        '/stock/dividend/type/list', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * List of dividend types.
     * List of dividend types.
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.attributes Limit the attributes returned in the response to the specified set.
     * @param {String} opts.language 
     * @return { Promise.< module:model/InlineResponse20011 > } a Promise, with data of type {@link module:model/InlineResponse20011 }
     */
    getStockDividendTypeList(opts) {
      return this.getStockDividendTypeListWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * End-of-day (EOD) benchmark key figures of a stock for the time range of one month.
     * End-of-day (EOD) benchmark key figures of a stock for the time range of one month.
     * @param {String} identifier 
     * @param {module:model/String} identifierType 
     * @param {Array.<String>} idNotationBenchmark 
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.attributes Limit the attributes returned in the response to the specified set.
     * @param {String} opts.language 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse20012} and HTTP response
     */
    getStockNotationKeyFiguresBenchmarkMonth1GetWithHttpInfo(identifier, identifierType, idNotationBenchmark, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'identifier' is set
      if (identifier === undefined || identifier === null) {
        throw new Error("Missing the required parameter 'identifier' when calling getStockNotationKeyFiguresBenchmarkMonth1Get");
      }
      // verify the required parameter 'identifierType' is set
      if (identifierType === undefined || identifierType === null) {
        throw new Error("Missing the required parameter 'identifierType' when calling getStockNotationKeyFiguresBenchmarkMonth1Get");
      }
      // verify the required parameter 'idNotationBenchmark' is set
      if (idNotationBenchmark === undefined || idNotationBenchmark === null) {
        throw new Error("Missing the required parameter 'idNotationBenchmark' when calling getStockNotationKeyFiguresBenchmarkMonth1Get");
      }

      let pathParams = {
      };
      let queryParams = {
        'identifier': identifier,
        'identifierType': identifierType,
        'idNotationBenchmark': this.apiClient.buildCollectionParam(idNotationBenchmark, 'csv'),
        '_attributes': this.apiClient.buildCollectionParam(opts['attributes'], 'csv'),
        '_language': opts['language']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];


      let returnType = InlineResponse20012;

      return this.apiClient.callApi(
        '/stock/notation/keyFigures/benchmark/month/1/get', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * End-of-day (EOD) benchmark key figures of a stock for the time range of one month.
     * End-of-day (EOD) benchmark key figures of a stock for the time range of one month.
     * @param {String} identifier 
     * @param {module:model/String} identifierType 
     * @param {Array.<String>} idNotationBenchmark 
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.attributes Limit the attributes returned in the response to the specified set.
     * @param {String} opts.language 
     * @return { Promise.< module:model/InlineResponse20012 > } a Promise, with data of type {@link module:model/InlineResponse20012 }
     */
    getStockNotationKeyFiguresBenchmarkMonth1Get(identifier, identifierType, idNotationBenchmark, opts) {
      return this.getStockNotationKeyFiguresBenchmarkMonth1GetWithHttpInfo(identifier, identifierType, idNotationBenchmark, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * End-of-day (EOD) benchmark key figures of a stock for the time range of three months.
     * End-of-day (EOD) benchmark key figures of a stock for the time range of three months.
     * @param {String} identifier 
     * @param {module:model/String} identifierType 
     * @param {Array.<String>} idNotationBenchmark 
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.attributes Limit the attributes returned in the response to the specified set.
     * @param {String} opts.language 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse20012} and HTTP response
     */
    getStockNotationKeyFiguresBenchmarkMonth3GetWithHttpInfo(identifier, identifierType, idNotationBenchmark, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'identifier' is set
      if (identifier === undefined || identifier === null) {
        throw new Error("Missing the required parameter 'identifier' when calling getStockNotationKeyFiguresBenchmarkMonth3Get");
      }
      // verify the required parameter 'identifierType' is set
      if (identifierType === undefined || identifierType === null) {
        throw new Error("Missing the required parameter 'identifierType' when calling getStockNotationKeyFiguresBenchmarkMonth3Get");
      }
      // verify the required parameter 'idNotationBenchmark' is set
      if (idNotationBenchmark === undefined || idNotationBenchmark === null) {
        throw new Error("Missing the required parameter 'idNotationBenchmark' when calling getStockNotationKeyFiguresBenchmarkMonth3Get");
      }

      let pathParams = {
      };
      let queryParams = {
        'identifier': identifier,
        'identifierType': identifierType,
        'idNotationBenchmark': this.apiClient.buildCollectionParam(idNotationBenchmark, 'csv'),
        '_attributes': this.apiClient.buildCollectionParam(opts['attributes'], 'csv'),
        '_language': opts['language']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];


      let returnType = InlineResponse20012;

      return this.apiClient.callApi(
        '/stock/notation/keyFigures/benchmark/month/3/get', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * End-of-day (EOD) benchmark key figures of a stock for the time range of three months.
     * End-of-day (EOD) benchmark key figures of a stock for the time range of three months.
     * @param {String} identifier 
     * @param {module:model/String} identifierType 
     * @param {Array.<String>} idNotationBenchmark 
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.attributes Limit the attributes returned in the response to the specified set.
     * @param {String} opts.language 
     * @return { Promise.< module:model/InlineResponse20012 > } a Promise, with data of type {@link module:model/InlineResponse20012 }
     */
    getStockNotationKeyFiguresBenchmarkMonth3Get(identifier, identifierType, idNotationBenchmark, opts) {
      return this.getStockNotationKeyFiguresBenchmarkMonth3GetWithHttpInfo(identifier, identifierType, idNotationBenchmark, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * End-of-day (EOD) benchmark key figures of a stock for the time range of six months.
     * End-of-day (EOD) benchmark key figures of a stock for the time range of six months.
     * @param {String} identifier 
     * @param {module:model/String} identifierType 
     * @param {Array.<String>} idNotationBenchmark 
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.attributes Limit the attributes returned in the response to the specified set.
     * @param {String} opts.language 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse20012} and HTTP response
     */
    getStockNotationKeyFiguresBenchmarkMonth6GetWithHttpInfo(identifier, identifierType, idNotationBenchmark, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'identifier' is set
      if (identifier === undefined || identifier === null) {
        throw new Error("Missing the required parameter 'identifier' when calling getStockNotationKeyFiguresBenchmarkMonth6Get");
      }
      // verify the required parameter 'identifierType' is set
      if (identifierType === undefined || identifierType === null) {
        throw new Error("Missing the required parameter 'identifierType' when calling getStockNotationKeyFiguresBenchmarkMonth6Get");
      }
      // verify the required parameter 'idNotationBenchmark' is set
      if (idNotationBenchmark === undefined || idNotationBenchmark === null) {
        throw new Error("Missing the required parameter 'idNotationBenchmark' when calling getStockNotationKeyFiguresBenchmarkMonth6Get");
      }

      let pathParams = {
      };
      let queryParams = {
        'identifier': identifier,
        'identifierType': identifierType,
        'idNotationBenchmark': this.apiClient.buildCollectionParam(idNotationBenchmark, 'csv'),
        '_attributes': this.apiClient.buildCollectionParam(opts['attributes'], 'csv'),
        '_language': opts['language']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];


      let returnType = InlineResponse20012;

      return this.apiClient.callApi(
        '/stock/notation/keyFigures/benchmark/month/6/get', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * End-of-day (EOD) benchmark key figures of a stock for the time range of six months.
     * End-of-day (EOD) benchmark key figures of a stock for the time range of six months.
     * @param {String} identifier 
     * @param {module:model/String} identifierType 
     * @param {Array.<String>} idNotationBenchmark 
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.attributes Limit the attributes returned in the response to the specified set.
     * @param {String} opts.language 
     * @return { Promise.< module:model/InlineResponse20012 > } a Promise, with data of type {@link module:model/InlineResponse20012 }
     */
    getStockNotationKeyFiguresBenchmarkMonth6Get(identifier, identifierType, idNotationBenchmark, opts) {
      return this.getStockNotationKeyFiguresBenchmarkMonth6GetWithHttpInfo(identifier, identifierType, idNotationBenchmark, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * End-of-day (EOD) benchmark key figures of a stock for the time range of one week.
     * End-of-day (EOD) benchmark key figures of a stock for the time range of one week.
     * @param {String} identifier 
     * @param {module:model/String} identifierType 
     * @param {Array.<String>} idNotationBenchmark 
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.attributes Limit the attributes returned in the response to the specified set.
     * @param {String} opts.language 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse20012} and HTTP response
     */
    getStockNotationKeyFiguresBenchmarkWeek1GetWithHttpInfo(identifier, identifierType, idNotationBenchmark, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'identifier' is set
      if (identifier === undefined || identifier === null) {
        throw new Error("Missing the required parameter 'identifier' when calling getStockNotationKeyFiguresBenchmarkWeek1Get");
      }
      // verify the required parameter 'identifierType' is set
      if (identifierType === undefined || identifierType === null) {
        throw new Error("Missing the required parameter 'identifierType' when calling getStockNotationKeyFiguresBenchmarkWeek1Get");
      }
      // verify the required parameter 'idNotationBenchmark' is set
      if (idNotationBenchmark === undefined || idNotationBenchmark === null) {
        throw new Error("Missing the required parameter 'idNotationBenchmark' when calling getStockNotationKeyFiguresBenchmarkWeek1Get");
      }

      let pathParams = {
      };
      let queryParams = {
        'identifier': identifier,
        'identifierType': identifierType,
        'idNotationBenchmark': this.apiClient.buildCollectionParam(idNotationBenchmark, 'csv'),
        '_attributes': this.apiClient.buildCollectionParam(opts['attributes'], 'csv'),
        '_language': opts['language']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];


      let returnType = InlineResponse20012;

      return this.apiClient.callApi(
        '/stock/notation/keyFigures/benchmark/week/1/get', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * End-of-day (EOD) benchmark key figures of a stock for the time range of one week.
     * End-of-day (EOD) benchmark key figures of a stock for the time range of one week.
     * @param {String} identifier 
     * @param {module:model/String} identifierType 
     * @param {Array.<String>} idNotationBenchmark 
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.attributes Limit the attributes returned in the response to the specified set.
     * @param {String} opts.language 
     * @return { Promise.< module:model/InlineResponse20012 > } a Promise, with data of type {@link module:model/InlineResponse20012 }
     */
    getStockNotationKeyFiguresBenchmarkWeek1Get(identifier, identifierType, idNotationBenchmark, opts) {
      return this.getStockNotationKeyFiguresBenchmarkWeek1GetWithHttpInfo(identifier, identifierType, idNotationBenchmark, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * End-of-day (EOD) benchmark key figures of a stock for the time range of one year.
     * End-of-day (EOD) benchmark key figures of a stock for the time range of one year.
     * @param {String} identifier 
     * @param {module:model/String} identifierType 
     * @param {Array.<String>} idNotationBenchmark 
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.attributes Limit the attributes returned in the response to the specified set.
     * @param {String} opts.language 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse20012} and HTTP response
     */
    getStockNotationKeyFiguresBenchmarkYear1GetWithHttpInfo(identifier, identifierType, idNotationBenchmark, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'identifier' is set
      if (identifier === undefined || identifier === null) {
        throw new Error("Missing the required parameter 'identifier' when calling getStockNotationKeyFiguresBenchmarkYear1Get");
      }
      // verify the required parameter 'identifierType' is set
      if (identifierType === undefined || identifierType === null) {
        throw new Error("Missing the required parameter 'identifierType' when calling getStockNotationKeyFiguresBenchmarkYear1Get");
      }
      // verify the required parameter 'idNotationBenchmark' is set
      if (idNotationBenchmark === undefined || idNotationBenchmark === null) {
        throw new Error("Missing the required parameter 'idNotationBenchmark' when calling getStockNotationKeyFiguresBenchmarkYear1Get");
      }

      let pathParams = {
      };
      let queryParams = {
        'identifier': identifier,
        'identifierType': identifierType,
        'idNotationBenchmark': this.apiClient.buildCollectionParam(idNotationBenchmark, 'csv'),
        '_attributes': this.apiClient.buildCollectionParam(opts['attributes'], 'csv'),
        '_language': opts['language']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];


      let returnType = InlineResponse20012;

      return this.apiClient.callApi(
        '/stock/notation/keyFigures/benchmark/year/1/get', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * End-of-day (EOD) benchmark key figures of a stock for the time range of one year.
     * End-of-day (EOD) benchmark key figures of a stock for the time range of one year.
     * @param {String} identifier 
     * @param {module:model/String} identifierType 
     * @param {Array.<String>} idNotationBenchmark 
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.attributes Limit the attributes returned in the response to the specified set.
     * @param {String} opts.language 
     * @return { Promise.< module:model/InlineResponse20012 > } a Promise, with data of type {@link module:model/InlineResponse20012 }
     */
    getStockNotationKeyFiguresBenchmarkYear1Get(identifier, identifierType, idNotationBenchmark, opts) {
      return this.getStockNotationKeyFiguresBenchmarkYear1GetWithHttpInfo(identifier, identifierType, idNotationBenchmark, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * End-of-day (EOD) benchmark key figures of a stock for the time range of three years.
     * End-of-day (EOD) benchmark key figures of a stock for the time range of three years.
     * @param {String} identifier 
     * @param {module:model/String} identifierType 
     * @param {Array.<String>} idNotationBenchmark 
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.attributes Limit the attributes returned in the response to the specified set.
     * @param {String} opts.language 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse20012} and HTTP response
     */
    getStockNotationKeyFiguresBenchmarkYear3GetWithHttpInfo(identifier, identifierType, idNotationBenchmark, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'identifier' is set
      if (identifier === undefined || identifier === null) {
        throw new Error("Missing the required parameter 'identifier' when calling getStockNotationKeyFiguresBenchmarkYear3Get");
      }
      // verify the required parameter 'identifierType' is set
      if (identifierType === undefined || identifierType === null) {
        throw new Error("Missing the required parameter 'identifierType' when calling getStockNotationKeyFiguresBenchmarkYear3Get");
      }
      // verify the required parameter 'idNotationBenchmark' is set
      if (idNotationBenchmark === undefined || idNotationBenchmark === null) {
        throw new Error("Missing the required parameter 'idNotationBenchmark' when calling getStockNotationKeyFiguresBenchmarkYear3Get");
      }

      let pathParams = {
      };
      let queryParams = {
        'identifier': identifier,
        'identifierType': identifierType,
        'idNotationBenchmark': this.apiClient.buildCollectionParam(idNotationBenchmark, 'csv'),
        '_attributes': this.apiClient.buildCollectionParam(opts['attributes'], 'csv'),
        '_language': opts['language']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];


      let returnType = InlineResponse20012;

      return this.apiClient.callApi(
        '/stock/notation/keyFigures/benchmark/year/3/get', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * End-of-day (EOD) benchmark key figures of a stock for the time range of three years.
     * End-of-day (EOD) benchmark key figures of a stock for the time range of three years.
     * @param {String} identifier 
     * @param {module:model/String} identifierType 
     * @param {Array.<String>} idNotationBenchmark 
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.attributes Limit the attributes returned in the response to the specified set.
     * @param {String} opts.language 
     * @return { Promise.< module:model/InlineResponse20012 > } a Promise, with data of type {@link module:model/InlineResponse20012 }
     */
    getStockNotationKeyFiguresBenchmarkYear3Get(identifier, identifierType, idNotationBenchmark, opts) {
      return this.getStockNotationKeyFiguresBenchmarkYear3GetWithHttpInfo(identifier, identifierType, idNotationBenchmark, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * End-of-day (EOD) benchmark key figures of a stock for the time range of five years.
     * End-of-day (EOD) benchmark key figures of a stock for the time range of five years.
     * @param {String} identifier 
     * @param {module:model/String} identifierType 
     * @param {Array.<String>} idNotationBenchmark 
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.attributes Limit the attributes returned in the response to the specified set.
     * @param {String} opts.language 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse20012} and HTTP response
     */
    getStockNotationKeyFiguresBenchmarkYear5GetWithHttpInfo(identifier, identifierType, idNotationBenchmark, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'identifier' is set
      if (identifier === undefined || identifier === null) {
        throw new Error("Missing the required parameter 'identifier' when calling getStockNotationKeyFiguresBenchmarkYear5Get");
      }
      // verify the required parameter 'identifierType' is set
      if (identifierType === undefined || identifierType === null) {
        throw new Error("Missing the required parameter 'identifierType' when calling getStockNotationKeyFiguresBenchmarkYear5Get");
      }
      // verify the required parameter 'idNotationBenchmark' is set
      if (idNotationBenchmark === undefined || idNotationBenchmark === null) {
        throw new Error("Missing the required parameter 'idNotationBenchmark' when calling getStockNotationKeyFiguresBenchmarkYear5Get");
      }

      let pathParams = {
      };
      let queryParams = {
        'identifier': identifier,
        'identifierType': identifierType,
        'idNotationBenchmark': this.apiClient.buildCollectionParam(idNotationBenchmark, 'csv'),
        '_attributes': this.apiClient.buildCollectionParam(opts['attributes'], 'csv'),
        '_language': opts['language']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];


      let returnType = InlineResponse20012;

      return this.apiClient.callApi(
        '/stock/notation/keyFigures/benchmark/year/5/get', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * End-of-day (EOD) benchmark key figures of a stock for the time range of five years.
     * End-of-day (EOD) benchmark key figures of a stock for the time range of five years.
     * @param {String} identifier 
     * @param {module:model/String} identifierType 
     * @param {Array.<String>} idNotationBenchmark 
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.attributes Limit the attributes returned in the response to the specified set.
     * @param {String} opts.language 
     * @return { Promise.< module:model/InlineResponse20012 > } a Promise, with data of type {@link module:model/InlineResponse20012 }
     */
    getStockNotationKeyFiguresBenchmarkYear5Get(identifier, identifierType, idNotationBenchmark, opts) {
      return this.getStockNotationKeyFiguresBenchmarkYear5GetWithHttpInfo(identifier, identifierType, idNotationBenchmark, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List of owners for a specific type of a company's shares.
     * List of top-20 owners for a specific type of a company's shares.
     * @param {String} identifier 
     * @param {module:model/String} identifierType 
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.attributes Limit the attributes returned in the response to the specified set.
     * @param {String} opts.language 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse2008} and HTTP response
     */
    getStockOwnerListWithHttpInfo(identifier, identifierType, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'identifier' is set
      if (identifier === undefined || identifier === null) {
        throw new Error("Missing the required parameter 'identifier' when calling getStockOwnerList");
      }
      // verify the required parameter 'identifierType' is set
      if (identifierType === undefined || identifierType === null) {
        throw new Error("Missing the required parameter 'identifierType' when calling getStockOwnerList");
      }

      let pathParams = {
      };
      let queryParams = {
        'identifier': identifier,
        'identifierType': identifierType,
        '_attributes': this.apiClient.buildCollectionParam(opts['attributes'], 'csv'),
        '_language': opts['language']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];


      let returnType = InlineResponse2008;

      return this.apiClient.callApi(
        '/stock/owner/list', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * List of owners for a specific type of a company's shares.
     * List of top-20 owners for a specific type of a company's shares.
     * @param {String} identifier 
     * @param {module:model/String} identifierType 
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.attributes Limit the attributes returned in the response to the specified set.
     * @param {String} opts.language 
     * @return { Promise.< module:model/InlineResponse2008 > } a Promise, with data of type {@link module:model/InlineResponse2008 }
     */
    getStockOwnerList(identifier, identifierType, opts) {
      return this.getStockOwnerListWithHttpInfo(identifier, identifierType, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Target price and aggregated recommendations for a stock.
     * Target price and aggregated recommendations for a stock.
     * @param {String} identifier 
     * @param {module:model/String} identifierType 
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.attributes Limit the attributes returned in the response to the specified set.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse2003} and HTTP response
     */
    getStockRecommendationAggregateGetWithHttpInfo(identifier, identifierType, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'identifier' is set
      if (identifier === undefined || identifier === null) {
        throw new Error("Missing the required parameter 'identifier' when calling getStockRecommendationAggregateGet");
      }
      // verify the required parameter 'identifierType' is set
      if (identifierType === undefined || identifierType === null) {
        throw new Error("Missing the required parameter 'identifierType' when calling getStockRecommendationAggregateGet");
      }

      let pathParams = {
      };
      let queryParams = {
        'identifier': identifier,
        'identifierType': identifierType,
        '_attributes': this.apiClient.buildCollectionParam(opts['attributes'], 'csv')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];


      let returnType = InlineResponse2003;

      return this.apiClient.callApi(
        '/stock/recommendation/aggregate/get', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Target price and aggregated recommendations for a stock.
     * Target price and aggregated recommendations for a stock.
     * @param {String} identifier 
     * @param {module:model/String} identifierType 
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.attributes Limit the attributes returned in the response to the specified set.
     * @return { Promise.< module:model/InlineResponse2003 > } a Promise, with data of type {@link module:model/InlineResponse2003 }
     */
    getStockRecommendationAggregateGet(identifier, identifierType, opts) {
      return this.getStockRecommendationAggregateGetWithHttpInfo(identifier, identifierType, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Current and historical trade recommendations and target prices for a stock.
     * Current and historical trade recommendations and target prices for a stock.
     * @param {String} identifier 
     * @param {module:model/String} identifierType 
     * @param {Array.<module:model/String>} snapshots 
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.attributes Limit the attributes returned in the response to the specified set.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse2004} and HTTP response
     */
    getStockRecommendationAggregateHistoryListWithHttpInfo(identifier, identifierType, snapshots, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'identifier' is set
      if (identifier === undefined || identifier === null) {
        throw new Error("Missing the required parameter 'identifier' when calling getStockRecommendationAggregateHistoryList");
      }
      // verify the required parameter 'identifierType' is set
      if (identifierType === undefined || identifierType === null) {
        throw new Error("Missing the required parameter 'identifierType' when calling getStockRecommendationAggregateHistoryList");
      }
      // verify the required parameter 'snapshots' is set
      if (snapshots === undefined || snapshots === null) {
        throw new Error("Missing the required parameter 'snapshots' when calling getStockRecommendationAggregateHistoryList");
      }

      let pathParams = {
      };
      let queryParams = {
        'identifier': identifier,
        'identifierType': identifierType,
        'snapshots': this.apiClient.buildCollectionParam(snapshots, 'csv'),
        '_attributes': this.apiClient.buildCollectionParam(opts['attributes'], 'csv')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];


      let returnType = InlineResponse2004;

      return this.apiClient.callApi(
        '/stock/recommendation/aggregate/history/list', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Current and historical trade recommendations and target prices for a stock.
     * Current and historical trade recommendations and target prices for a stock.
     * @param {String} identifier 
     * @param {module:model/String} identifierType 
     * @param {Array.<module:model/String>} snapshots 
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.attributes Limit the attributes returned in the response to the specified set.
     * @return { Promise.< module:model/InlineResponse2004 > } a Promise, with data of type {@link module:model/InlineResponse2004 }
     */
    getStockRecommendationAggregateHistoryList(identifier, identifierType, snapshots, opts) {
      return this.getStockRecommendationAggregateHistoryListWithHttpInfo(identifier, identifierType, snapshots, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List of dividends for a stock.
     * List of dividends for a stock.
     * @param {Object} opts Optional parameters
     * @param {module:model/PostStockDividendListRequest} opts.postStockDividendListRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse20010} and HTTP response
     */
    postStockDividendListWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = opts['postStockDividendListRequest'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];


      let returnType = InlineResponse20010;

      return this.apiClient.callApi(
        '/stock/dividend/list', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * List of dividends for a stock.
     * List of dividends for a stock.
     * @param {Object} opts Optional parameters
     * @param {module:model/PostStockDividendListRequest} opts.postStockDividendListRequest 
     * @return { Promise.< module:model/InlineResponse20010 > } a Promise, with data of type {@link module:model/InlineResponse20010 }
     */
    postStockDividendList(opts) {
      return this.postStockDividendListWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Ranking of stocks' notations using intraday figures.
     * Ranking of stocks' notations using intraday figures. The result is limited to 100 notations that all must satisfy all selected filters. If more than one notation of an instrument matches the parameters, and no market priority has been specified, only the notation with the highest trading volume, averaged over one month, is considered.  By default, the result is sorted descending by the relative intraday performance corresponding to the most recent trade price, see attribute `trade.performance.relative`. The result may contain sortable values based on different currencies, possibly making the ranking nonsensical, if the parameter `currency` has not been specified.`  The search can be restricted to a specific set of products by using customer-specific instrument or notation restriction lists. Such restriction lists are set up by FactSet upon request.  All identifiers used as parameters must be valid and entitled.
     * @param {Object} opts Optional parameters
     * @param {module:model/PostStockNotationRankingIntradayListRequest} opts.postStockNotationRankingIntradayListRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse20013} and HTTP response
     */
    postStockNotationRankingIntradayListWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = opts['postStockNotationRankingIntradayListRequest'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];


      let returnType = InlineResponse20013;

      return this.apiClient.callApi(
        '/stock/notation/ranking/intraday/list', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Ranking of stocks' notations using intraday figures.
     * Ranking of stocks' notations using intraday figures. The result is limited to 100 notations that all must satisfy all selected filters. If more than one notation of an instrument matches the parameters, and no market priority has been specified, only the notation with the highest trading volume, averaged over one month, is considered.  By default, the result is sorted descending by the relative intraday performance corresponding to the most recent trade price, see attribute `trade.performance.relative`. The result may contain sortable values based on different currencies, possibly making the ranking nonsensical, if the parameter `currency` has not been specified.`  The search can be restricted to a specific set of products by using customer-specific instrument or notation restriction lists. Such restriction lists are set up by FactSet upon request.  All identifiers used as parameters must be valid and entitled.
     * @param {Object} opts Optional parameters
     * @param {module:model/PostStockNotationRankingIntradayListRequest} opts.postStockNotationRankingIntradayListRequest 
     * @return { Promise.< module:model/InlineResponse20013 > } a Promise, with data of type {@link module:model/InlineResponse20013 }
     */
    postStockNotationRankingIntradayList(opts) {
      return this.postStockNotationRankingIntradayListWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Screener for stocks' notations based on stock-specific parameters.
     * Screener for stocks' notations based on stock-specific parameters. The result is limited to the notations that satisfy all the selected filters. If more than one notation of an instrument matches the parameters, and no market priority has been specified, only the notation with the highest trading volume, averaged over one month, is considered.  Currency dependent current figures on company level (see attribute `currentKeyFigures.company.currencyDependent`) or on share instrument level (see attribute `currentKeyFigures.shareInstrument.currencyDependent`) are only returned if the currency (see parameter `currentKeyFigures.company.currencyDependent.currency.isoCode` or parameter `currentKeyFigures.shareInstrument.currencyDependent.currency.isoCode` respectively) are set.  Parameters for up to three fiscal years might be used in one request, see attribute `reportedKeyFigures`; data is available for the ten most recent completed fiscal years. Estimates are available for the current and two consecutive fiscal years; parameters for all three might be used in one request, see attribute `estimates`. The estimated values are calculated as the average of the most recent estimates provided by all analysts in a fixed time frame of 100 days. Screening and sorting by a currency-dependent attribute is not possible if the currency (see parameter `reportedKeyFigures.currencyDependentKeyFigures.currency.isoCode` and parameter `estimates.currencyDependentEstimates.currency.isoCode` respectively) is not set. If a fiscal year for the data as of the end of a fiscal year (see parameter `reportedKeyFigures.fiscalYear`) or for the estimates (see parameter `estimates.fiscalYear`) has been selected but no currency has been set, the respective data will be returned in the currency in which it was originally reported.  A specific set of stocks can be restricted to or excluded by using customer-specific instrument or notation selection lists. Such selection lists are set up by FactSet upon request. All identifiers used as parameters must be valid and entitled.
     * @param {Object} opts Optional parameters
     * @param {module:model/PostStockNotationScreenerSearchRequest} opts.postStockNotationScreenerSearchRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse20014} and HTTP response
     */
    postStockNotationScreenerSearchWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = opts['postStockNotationScreenerSearchRequest'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];


      let returnType = InlineResponse20014;

      return this.apiClient.callApi(
        '/stock/notation/screener/search', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Screener for stocks' notations based on stock-specific parameters.
     * Screener for stocks' notations based on stock-specific parameters. The result is limited to the notations that satisfy all the selected filters. If more than one notation of an instrument matches the parameters, and no market priority has been specified, only the notation with the highest trading volume, averaged over one month, is considered.  Currency dependent current figures on company level (see attribute `currentKeyFigures.company.currencyDependent`) or on share instrument level (see attribute `currentKeyFigures.shareInstrument.currencyDependent`) are only returned if the currency (see parameter `currentKeyFigures.company.currencyDependent.currency.isoCode` or parameter `currentKeyFigures.shareInstrument.currencyDependent.currency.isoCode` respectively) are set.  Parameters for up to three fiscal years might be used in one request, see attribute `reportedKeyFigures`; data is available for the ten most recent completed fiscal years. Estimates are available for the current and two consecutive fiscal years; parameters for all three might be used in one request, see attribute `estimates`. The estimated values are calculated as the average of the most recent estimates provided by all analysts in a fixed time frame of 100 days. Screening and sorting by a currency-dependent attribute is not possible if the currency (see parameter `reportedKeyFigures.currencyDependentKeyFigures.currency.isoCode` and parameter `estimates.currencyDependentEstimates.currency.isoCode` respectively) is not set. If a fiscal year for the data as of the end of a fiscal year (see parameter `reportedKeyFigures.fiscalYear`) or for the estimates (see parameter `estimates.fiscalYear`) has been selected but no currency has been set, the respective data will be returned in the currency in which it was originally reported.  A specific set of stocks can be restricted to or excluded by using customer-specific instrument or notation selection lists. Such selection lists are set up by FactSet upon request. All identifiers used as parameters must be valid and entitled.
     * @param {Object} opts Optional parameters
     * @param {module:model/PostStockNotationScreenerSearchRequest} opts.postStockNotationScreenerSearchRequest 
     * @return { Promise.< module:model/InlineResponse20014 > } a Promise, with data of type {@link module:model/InlineResponse20014 }
     */
    postStockNotationScreenerSearch(opts) {
      return this.postStockNotationScreenerSearchWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Possible values and value ranges for the parameters used in the endpoint `/stock/notation/screener/search`.
     * The endpoint returns the possible values and value ranges for the parameters used in the endpoint `/stock/notation/screener/search`. It allows to request the values and value ranges only for a restricted set of notations that match predefined parameters. The functionality may be used to pre-fill the values and value ranges of the parameters of the `/stock/notation/screener/search` endpoint so that performing a search always leads to a non-empty set of notations. If more than one notation of an instrument matches the parameters, and no market priority has been specified, only the notation with the highest trading volume, averaged over one month, is considered. For more information regarding the performance and volatility parameters, see the information available in the group description of the `/notation/keyFigures/` endpoints.
     * @param {Object} opts Optional parameters
     * @param {module:model/PostStockNotationScreenerValueRangesGetRequest} opts.postStockNotationScreenerValueRangesGetRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse20015} and HTTP response
     */
    postStockNotationScreenerValueRangesGetWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = opts['postStockNotationScreenerValueRangesGetRequest'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];


      let returnType = InlineResponse20015;

      return this.apiClient.callApi(
        '/stock/notation/screener/valueRanges/get', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Possible values and value ranges for the parameters used in the endpoint `/stock/notation/screener/search`.
     * The endpoint returns the possible values and value ranges for the parameters used in the endpoint `/stock/notation/screener/search`. It allows to request the values and value ranges only for a restricted set of notations that match predefined parameters. The functionality may be used to pre-fill the values and value ranges of the parameters of the `/stock/notation/screener/search` endpoint so that performing a search always leads to a non-empty set of notations. If more than one notation of an instrument matches the parameters, and no market priority has been specified, only the notation with the highest trading volume, averaged over one month, is considered. For more information regarding the performance and volatility parameters, see the information available in the group description of the `/notation/keyFigures/` endpoints.
     * @param {Object} opts Optional parameters
     * @param {module:model/PostStockNotationScreenerValueRangesGetRequest} opts.postStockNotationScreenerValueRangesGetRequest 
     * @return { Promise.< module:model/InlineResponse20015 > } a Promise, with data of type {@link module:model/InlineResponse20015 }
     */
    postStockNotationScreenerValueRangesGet(opts) {
      return this.postStockNotationScreenerValueRangesGetWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}





