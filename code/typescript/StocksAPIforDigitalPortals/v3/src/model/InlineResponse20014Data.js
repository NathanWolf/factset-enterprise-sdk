/**
 * Stocks API For Digital Portals
 * The Stocks API features a screener to search for equity instruments based on stock-specific parameters.  Parameters for up to three fiscal years might now be used in one request; data is available for the ten most recent completed fiscal years. Estimates are available for the current and two consecutive fiscal years. Search criteria also include benchmark-related attributes (beta, correlation, outperformance), and ESG parameters, based on FactSetâ€™s Truvalue ESG scores.  A separate endpoint returns the possible values and value ranges for the parameters that the endpoint /stock/notation/screener/search accepts Application developers can request the values and value ranges only for a restricted set of notations that match predefined parameters. This functionality may be used to pre-fill the values and value ranges of the parameters of the /stock/notation/screener/search endpoint so that performing a search always leads to a non-empty set of notations.  The endpoint /stock/notation/ranking/intraday/list ranks stocks notations using intraday figures, for example to build a gainers/losers list.   Additional endpoints include end-of-day benchmark key figures, and selected fundamentals (as of end of fiscal year and with daily updates).  This API is fully integrated with the corresponding [Quotes API](https://developer.factset.com/api-catalog/quotes-api-digital-portals), allowing access to detailed price and performance information of instruments, as well as basic security identifier cross-reference. For direct access to price histories, please refer to the [Time Series API for Digital Portals](https://developer.factset.com/api-catalog/time-series-api-digital-portals).  Similar criteria based screener APIs exist for fixed income instruments and securitized derivatives: See the [Bonds API](https://developer.factset.com/api-catalog/bonds-api-digital-portals) and the [Securitized Derivatives API](https://developer.factset.com/api-catalog/securitized-derivatives-api-digital-portals) for details.  See also the recipe [\"Enrich Your Digital Portal with Flexible Equity Screening\"](https://developer.factset.com/recipe-catalog/enrich-your-digital-portal-flexible-equity-screening). 
 *
 * The version of the OpenAPI document: 2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import InlineResponse20013Fsym from './InlineResponse20013Fsym';
import InlineResponse20014Benchmark from './InlineResponse20014Benchmark';
import InlineResponse20014Compliance from './InlineResponse20014Compliance';
import InlineResponse20014CurrentKeyFigures from './InlineResponse20014CurrentKeyFigures';
import InlineResponse20014Esg from './InlineResponse20014Esg';
import InlineResponse20014Estimates from './InlineResponse20014Estimates';
import InlineResponse20014Instrument from './InlineResponse20014Instrument';
import InlineResponse20014Market from './InlineResponse20014Market';
import InlineResponse20014Nsin from './InlineResponse20014Nsin';
import InlineResponse20014Performance from './InlineResponse20014Performance';
import InlineResponse20014Recommendation from './InlineResponse20014Recommendation';
import InlineResponse20014ReportedKeyFigures from './InlineResponse20014ReportedKeyFigures';
import InlineResponse20014RsiWilder from './InlineResponse20014RsiWilder';
import InlineResponse20014SimpleMovingAverage from './InlineResponse20014SimpleMovingAverage';
import InlineResponse20014TradingValue from './InlineResponse20014TradingValue';
import InlineResponse20014ValueUnit from './InlineResponse20014ValueUnit';
import InlineResponse20014Volatility from './InlineResponse20014Volatility';

/**
 * The InlineResponse20014Data model module.
 * @module model/InlineResponse20014Data
 */
class InlineResponse20014Data {
    /**
     * Constructs a new <code>InlineResponse20014Data</code>.
     * @alias module:model/InlineResponse20014Data
     */
    constructor() { 
        
        InlineResponse20014Data.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>InlineResponse20014Data</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/InlineResponse20014Data} obj Optional instance to populate.
     * @return {module:model/InlineResponse20014Data} The populated <code>InlineResponse20014Data</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new InlineResponse20014Data();

            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('valueUnit')) {
                obj['valueUnit'] = InlineResponse20014ValueUnit.constructFromObject(data['valueUnit']);
            }
            if (data.hasOwnProperty('market')) {
                obj['market'] = InlineResponse20014Market.constructFromObject(data['market']);
            }
            if (data.hasOwnProperty('symbol')) {
                obj['symbol'] = ApiClient.convertToType(data['symbol'], 'String');
            }
            if (data.hasOwnProperty('nsin')) {
                obj['nsin'] = InlineResponse20014Nsin.constructFromObject(data['nsin']);
            }
            if (data.hasOwnProperty('fsym')) {
                obj['fsym'] = InlineResponse20013Fsym.constructFromObject(data['fsym']);
            }
            if (data.hasOwnProperty('instrument')) {
                obj['instrument'] = InlineResponse20014Instrument.constructFromObject(data['instrument']);
            }
            if (data.hasOwnProperty('esg')) {
                obj['esg'] = InlineResponse20014Esg.constructFromObject(data['esg']);
            }
            if (data.hasOwnProperty('compliance')) {
                obj['compliance'] = InlineResponse20014Compliance.constructFromObject(data['compliance']);
            }
            if (data.hasOwnProperty('currentKeyFigures')) {
                obj['currentKeyFigures'] = InlineResponse20014CurrentKeyFigures.constructFromObject(data['currentKeyFigures']);
            }
            if (data.hasOwnProperty('reportedKeyFigures')) {
                obj['reportedKeyFigures'] = InlineResponse20014ReportedKeyFigures.constructFromObject(data['reportedKeyFigures']);
            }
            if (data.hasOwnProperty('benchmark')) {
                obj['benchmark'] = InlineResponse20014Benchmark.constructFromObject(data['benchmark']);
            }
            if (data.hasOwnProperty('performance')) {
                obj['performance'] = InlineResponse20014Performance.constructFromObject(data['performance']);
            }
            if (data.hasOwnProperty('volatility')) {
                obj['volatility'] = InlineResponse20014Volatility.constructFromObject(data['volatility']);
            }
            if (data.hasOwnProperty('tradingValue')) {
                obj['tradingValue'] = InlineResponse20014TradingValue.constructFromObject(data['tradingValue']);
            }
            if (data.hasOwnProperty('simpleMovingAverage')) {
                obj['simpleMovingAverage'] = InlineResponse20014SimpleMovingAverage.constructFromObject(data['simpleMovingAverage']);
            }
            if (data.hasOwnProperty('rsiWilder')) {
                obj['rsiWilder'] = InlineResponse20014RsiWilder.constructFromObject(data['rsiWilder']);
            }
            if (data.hasOwnProperty('recommendation')) {
                obj['recommendation'] = InlineResponse20014Recommendation.constructFromObject(data['recommendation']);
            }
            if (data.hasOwnProperty('estimates')) {
                obj['estimates'] = InlineResponse20014Estimates.constructFromObject(data['estimates']);
            }
        }
        return obj;
    }


}

/**
 * Identifier of the notation.
 * @member {String} id
 */
InlineResponse20014Data.prototype['id'] = undefined;

/**
 * @member {module:model/InlineResponse20014ValueUnit} valueUnit
 */
InlineResponse20014Data.prototype['valueUnit'] = undefined;

/**
 * @member {module:model/InlineResponse20014Market} market
 */
InlineResponse20014Data.prototype['market'] = undefined;

/**
 * The symbol of the notation. It is a market-specific code to identify the notation. Which characters can be part of a symbol depends on the market. If a market does not define a proprietary symbol, but uses a different identifier (for example, the ISIN or the WKN) to identify instruments, no symbol will be set for the notations of that market.
 * @member {String} symbol
 */
InlineResponse20014Data.prototype['symbol'] = undefined;

/**
 * @member {module:model/InlineResponse20014Nsin} nsin
 */
InlineResponse20014Data.prototype['nsin'] = undefined;

/**
 * @member {module:model/InlineResponse20013Fsym} fsym
 */
InlineResponse20014Data.prototype['fsym'] = undefined;

/**
 * @member {module:model/InlineResponse20014Instrument} instrument
 */
InlineResponse20014Data.prototype['instrument'] = undefined;

/**
 * @member {module:model/InlineResponse20014Esg} esg
 */
InlineResponse20014Data.prototype['esg'] = undefined;

/**
 * @member {module:model/InlineResponse20014Compliance} compliance
 */
InlineResponse20014Data.prototype['compliance'] = undefined;

/**
 * @member {module:model/InlineResponse20014CurrentKeyFigures} currentKeyFigures
 */
InlineResponse20014Data.prototype['currentKeyFigures'] = undefined;

/**
 * @member {module:model/InlineResponse20014ReportedKeyFigures} reportedKeyFigures
 */
InlineResponse20014Data.prototype['reportedKeyFigures'] = undefined;

/**
 * @member {module:model/InlineResponse20014Benchmark} benchmark
 */
InlineResponse20014Data.prototype['benchmark'] = undefined;

/**
 * @member {module:model/InlineResponse20014Performance} performance
 */
InlineResponse20014Data.prototype['performance'] = undefined;

/**
 * @member {module:model/InlineResponse20014Volatility} volatility
 */
InlineResponse20014Data.prototype['volatility'] = undefined;

/**
 * @member {module:model/InlineResponse20014TradingValue} tradingValue
 */
InlineResponse20014Data.prototype['tradingValue'] = undefined;

/**
 * @member {module:model/InlineResponse20014SimpleMovingAverage} simpleMovingAverage
 */
InlineResponse20014Data.prototype['simpleMovingAverage'] = undefined;

/**
 * @member {module:model/InlineResponse20014RsiWilder} rsiWilder
 */
InlineResponse20014Data.prototype['rsiWilder'] = undefined;

/**
 * @member {module:model/InlineResponse20014Recommendation} recommendation
 */
InlineResponse20014Data.prototype['recommendation'] = undefined;

/**
 * @member {module:model/InlineResponse20014Estimates} estimates
 */
InlineResponse20014Data.prototype['estimates'] = undefined;






export default InlineResponse20014Data;

