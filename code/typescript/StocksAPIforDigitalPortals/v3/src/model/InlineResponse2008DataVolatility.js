/**
 * Stocks API For Digital Portals
 * The stocks API features a screener to search for equity instruments based on stock-specific parameters.  Parameters for up to three fiscal years might now be used in one request; data is available for the ten most recent completed fiscal years. Estimates are available for the current and two consecutive fiscal years.  A separate endpoint returns the possible values and value ranges for the parameters that the endpoint /stock/notation/screener/search accepts: Application developers can request the values and value ranges only for a restricted set of notations that match predefined parameters. This functionality may be used to pre-fill the values and value ranges of the parameters of the /stock/notation/screener/search endpoint so that performing a search always leads to a non-empty set of notations.  The endpoint /stock/notation/ranking/intraday/list ranks stocks notations using intraday figures, for example to build a gainers/losers list.   Additional endpoints include end-of-day benchmark key figures, and selected fundamentals (as of end of fiscal year and with potentially daily updates).  This API is fully integrated with the corresponding Quotes API, allowing access to detailed price and performance information of instruments, as well as basic security identifier cross-reference. For direct access to price histories, please refer to the Time Series API for Digital Portals.  Similar criteria based screener APIs exist for fixed income instruments and securitized derivatives: See the Bonds API and the Securitized Derivatives API for details.
 *
 * The version of the OpenAPI document: 2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import InlineResponse2008DataPerformanceEndOfDayMonth1 from './InlineResponse2008DataPerformanceEndOfDayMonth1';
import InlineResponse2008DataPerformanceEndOfDayMonths3 from './InlineResponse2008DataPerformanceEndOfDayMonths3';
import InlineResponse2008DataPerformanceEndOfDayMonths6 from './InlineResponse2008DataPerformanceEndOfDayMonths6';
import InlineResponse2008DataPerformanceEndOfDayWeek1 from './InlineResponse2008DataPerformanceEndOfDayWeek1';
import InlineResponse2008DataPerformanceEndOfDayYear1 from './InlineResponse2008DataPerformanceEndOfDayYear1';
import InlineResponse2008DataPerformanceEndOfDayYearToDate from './InlineResponse2008DataPerformanceEndOfDayYearToDate';
import InlineResponse2008DataPerformanceEndOfDayYears3 from './InlineResponse2008DataPerformanceEndOfDayYears3';
import InlineResponse2008DataPerformanceEndOfDayYears5 from './InlineResponse2008DataPerformanceEndOfDayYears5';

/**
 * The InlineResponse2008DataVolatility model module.
 * @module model/InlineResponse2008DataVolatility
 */
class InlineResponse2008DataVolatility {
    /**
     * Constructs a new <code>InlineResponse2008DataVolatility</code>.
     * Value ranges related to the volatility for different time ranges.
     * @alias module:model/InlineResponse2008DataVolatility
     */
    constructor() { 
        
        InlineResponse2008DataVolatility.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>InlineResponse2008DataVolatility</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/InlineResponse2008DataVolatility} obj Optional instance to populate.
     * @return {module:model/InlineResponse2008DataVolatility} The populated <code>InlineResponse2008DataVolatility</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new InlineResponse2008DataVolatility();

            if (data.hasOwnProperty('week1')) {
                obj['week1'] = InlineResponse2008DataPerformanceEndOfDayWeek1.constructFromObject(data['week1']);
            }
            if (data.hasOwnProperty('month1')) {
                obj['month1'] = InlineResponse2008DataPerformanceEndOfDayMonth1.constructFromObject(data['month1']);
            }
            if (data.hasOwnProperty('months3')) {
                obj['months3'] = InlineResponse2008DataPerformanceEndOfDayMonths3.constructFromObject(data['months3']);
            }
            if (data.hasOwnProperty('months6')) {
                obj['months6'] = InlineResponse2008DataPerformanceEndOfDayMonths6.constructFromObject(data['months6']);
            }
            if (data.hasOwnProperty('year1')) {
                obj['year1'] = InlineResponse2008DataPerformanceEndOfDayYear1.constructFromObject(data['year1']);
            }
            if (data.hasOwnProperty('years3')) {
                obj['years3'] = InlineResponse2008DataPerformanceEndOfDayYears3.constructFromObject(data['years3']);
            }
            if (data.hasOwnProperty('years5')) {
                obj['years5'] = InlineResponse2008DataPerformanceEndOfDayYears5.constructFromObject(data['years5']);
            }
            if (data.hasOwnProperty('yearToDate')) {
                obj['yearToDate'] = InlineResponse2008DataPerformanceEndOfDayYearToDate.constructFromObject(data['yearToDate']);
            }
        }
        return obj;
    }


}

/**
 * @member {module:model/InlineResponse2008DataPerformanceEndOfDayWeek1} week1
 */
InlineResponse2008DataVolatility.prototype['week1'] = undefined;

/**
 * @member {module:model/InlineResponse2008DataPerformanceEndOfDayMonth1} month1
 */
InlineResponse2008DataVolatility.prototype['month1'] = undefined;

/**
 * @member {module:model/InlineResponse2008DataPerformanceEndOfDayMonths3} months3
 */
InlineResponse2008DataVolatility.prototype['months3'] = undefined;

/**
 * @member {module:model/InlineResponse2008DataPerformanceEndOfDayMonths6} months6
 */
InlineResponse2008DataVolatility.prototype['months6'] = undefined;

/**
 * @member {module:model/InlineResponse2008DataPerformanceEndOfDayYear1} year1
 */
InlineResponse2008DataVolatility.prototype['year1'] = undefined;

/**
 * @member {module:model/InlineResponse2008DataPerformanceEndOfDayYears3} years3
 */
InlineResponse2008DataVolatility.prototype['years3'] = undefined;

/**
 * @member {module:model/InlineResponse2008DataPerformanceEndOfDayYears5} years5
 */
InlineResponse2008DataVolatility.prototype['years5'] = undefined;

/**
 * @member {module:model/InlineResponse2008DataPerformanceEndOfDayYearToDate} yearToDate
 */
InlineResponse2008DataVolatility.prototype['yearToDate'] = undefined;






export default InlineResponse2008DataVolatility;

