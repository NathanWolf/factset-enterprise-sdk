/**
 * Prime Developer Trial
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The StockNotationRankingIntradayListDataIndexMembership model module.
 * @module model/StockNotationRankingIntradayListDataIndexMembership
 * @version 0.9.1
 */
class StockNotationRankingIntradayListDataIndexMembership {
    /**
     * Constructs a new <code>StockNotationRankingIntradayListDataIndexMembership</code>.
     * List of indices of which a stock is a constituent. The list restricts the request to return only those stocks that are a constituent of one of the specified indices.
     * @alias module:model/StockNotationRankingIntradayListDataIndexMembership
     */
    constructor() { 
        
        StockNotationRankingIntradayListDataIndexMembership.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>StockNotationRankingIntradayListDataIndexMembership</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/StockNotationRankingIntradayListDataIndexMembership} obj Optional instance to populate.
     * @return {module:model/StockNotationRankingIntradayListDataIndexMembership} The populated <code>StockNotationRankingIntradayListDataIndexMembership</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new StockNotationRankingIntradayListDataIndexMembership();

            if (data.hasOwnProperty('ids')) {
                obj['ids'] = ApiClient.convertToType(data['ids'], ['String']);
            }
            if (data.hasOwnProperty('useAlternativeNotation')) {
                obj['useAlternativeNotation'] = ApiClient.convertToType(data['useAlternativeNotation'], 'Boolean');
            }
        }
        return obj;
    }


}

/**
 * List of index instrument identifiers.
 * @member {Array.<String>} ids
 */
StockNotationRankingIntradayListDataIndexMembership.prototype['ids'] = undefined;

/**
 * Specifies whether an alternative notation of a constituent shall be retrieved if the market of the original notation is currently closed or if the user is not entitled for the market of the original notation. The alternative notation is the one with the highest trading volume averaged over one month that satisfies all other selected filters, such as only a specific market or a specific currency. If the original notation is not entitled and a currency has not been specified, the alternative notation may be in a different currency than the original one which makes the ranking less meaningful, especially a trading value-based ranking, see attribute `accumulated.tradingValue` in the response.
 * @member {Boolean} useAlternativeNotation
 * @default false
 */
StockNotationRankingIntradayListDataIndexMembership.prototype['useAlternativeNotation'] = false;






export default StockNotationRankingIntradayListDataIndexMembership;

