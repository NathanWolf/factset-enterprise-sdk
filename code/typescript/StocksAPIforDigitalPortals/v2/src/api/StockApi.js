/**
 * Prime Developer Trial
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import InlineObject from '../model/InlineObject';
import InlineObject1 from '../model/InlineObject1';
import InlineObject2 from '../model/InlineObject2';
import InlineObject3 from '../model/InlineObject3';
import InlineResponse200 from '../model/InlineResponse200';
import InlineResponse2001 from '../model/InlineResponse2001';
import InlineResponse2002 from '../model/InlineResponse2002';
import InlineResponse2003 from '../model/InlineResponse2003';
import InlineResponse2004 from '../model/InlineResponse2004';
import InlineResponse2005 from '../model/InlineResponse2005';

/**
* Stock service.
* @module api/StockApi
* @version 0.9.0
*/
export default class StockApi {

    /**
    * Constructs a new StockApi. 
    * @alias module:api/StockApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * List of dividend types.
     * List of dividend types.
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.attributes Limit the attributes returned in the response to the specified set.
     * @param {String} opts.language ISO 639-1 code of the language.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse2001} and HTTP response
     */
    getStockDividendTypeListWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        '_attributes': this.apiClient.buildCollectionParam(opts['attributes'], 'csv'),
        '_language': opts['language']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse2001;
      return this.apiClient.callApi(
        '/stock/dividend/type/list', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * List of dividend types.
     * List of dividend types.
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.attributes Limit the attributes returned in the response to the specified set.
     * @param {String} opts.language ISO 639-1 code of the language.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/InlineResponse2001}
     */
    getStockDividendTypeList(opts) {
      return this.getStockDividendTypeListWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * End-of-day (EOD) benchmark key figures of a stock for the time range of one month.
     * End-of-day (EOD) benchmark key figures of a stock for the time range of one month.
     * @param {String} id Identifier of the notation.
     * @param {Array.<String>} idNotationBenchmark List of identifiers of benchmark notations.
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.attributes Limit the attributes returned in the response to the specified set.
     * @param {String} opts.language ISO 639-1 code of the language.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse2002} and HTTP response
     */
    getStockNotationKeyFiguresBenchmarkMonth1GetWithHttpInfo(id, idNotationBenchmark, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getStockNotationKeyFiguresBenchmarkMonth1Get");
      }
      // verify the required parameter 'idNotationBenchmark' is set
      if (idNotationBenchmark === undefined || idNotationBenchmark === null) {
        throw new Error("Missing the required parameter 'idNotationBenchmark' when calling getStockNotationKeyFiguresBenchmarkMonth1Get");
      }

      let pathParams = {
      };
      let queryParams = {
        'id': id,
        'idNotationBenchmark': this.apiClient.buildCollectionParam(idNotationBenchmark, 'csv'),
        '_attributes': this.apiClient.buildCollectionParam(opts['attributes'], 'csv'),
        '_language': opts['language']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse2002;
      return this.apiClient.callApi(
        '/stock/notation/keyFigures/benchmark/month/1/get', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * End-of-day (EOD) benchmark key figures of a stock for the time range of one month.
     * End-of-day (EOD) benchmark key figures of a stock for the time range of one month.
     * @param {String} id Identifier of the notation.
     * @param {Array.<String>} idNotationBenchmark List of identifiers of benchmark notations.
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.attributes Limit the attributes returned in the response to the specified set.
     * @param {String} opts.language ISO 639-1 code of the language.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/InlineResponse2002}
     */
    getStockNotationKeyFiguresBenchmarkMonth1Get(id, idNotationBenchmark, opts) {
      return this.getStockNotationKeyFiguresBenchmarkMonth1GetWithHttpInfo(id, idNotationBenchmark, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * End-of-day (EOD) benchmark key figures of a stock for the time range of three months.
     * End-of-day (EOD) benchmark key figures of a stock for the time range of three months.
     * @param {String} id Identifier of the notation.
     * @param {Array.<String>} idNotationBenchmark List of identifiers of benchmark notations.
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.attributes Limit the attributes returned in the response to the specified set.
     * @param {String} opts.language ISO 639-1 code of the language.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse2002} and HTTP response
     */
    getStockNotationKeyFiguresBenchmarkMonth3GetWithHttpInfo(id, idNotationBenchmark, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getStockNotationKeyFiguresBenchmarkMonth3Get");
      }
      // verify the required parameter 'idNotationBenchmark' is set
      if (idNotationBenchmark === undefined || idNotationBenchmark === null) {
        throw new Error("Missing the required parameter 'idNotationBenchmark' when calling getStockNotationKeyFiguresBenchmarkMonth3Get");
      }

      let pathParams = {
      };
      let queryParams = {
        'id': id,
        'idNotationBenchmark': this.apiClient.buildCollectionParam(idNotationBenchmark, 'csv'),
        '_attributes': this.apiClient.buildCollectionParam(opts['attributes'], 'csv'),
        '_language': opts['language']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse2002;
      return this.apiClient.callApi(
        '/stock/notation/keyFigures/benchmark/month/3/get', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * End-of-day (EOD) benchmark key figures of a stock for the time range of three months.
     * End-of-day (EOD) benchmark key figures of a stock for the time range of three months.
     * @param {String} id Identifier of the notation.
     * @param {Array.<String>} idNotationBenchmark List of identifiers of benchmark notations.
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.attributes Limit the attributes returned in the response to the specified set.
     * @param {String} opts.language ISO 639-1 code of the language.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/InlineResponse2002}
     */
    getStockNotationKeyFiguresBenchmarkMonth3Get(id, idNotationBenchmark, opts) {
      return this.getStockNotationKeyFiguresBenchmarkMonth3GetWithHttpInfo(id, idNotationBenchmark, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * End-of-day (EOD) benchmark key figures of a stock for the time range of one week.
     * End-of-day (EOD) benchmark key figures of a stock for the time range of one week.
     * @param {String} id Identifier of the notation.
     * @param {Array.<String>} idNotationBenchmark List of identifiers of benchmark notations.
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.attributes Limit the attributes returned in the response to the specified set.
     * @param {String} opts.language ISO 639-1 code of the language.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse2002} and HTTP response
     */
    getStockNotationKeyFiguresBenchmarkWeek1GetWithHttpInfo(id, idNotationBenchmark, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getStockNotationKeyFiguresBenchmarkWeek1Get");
      }
      // verify the required parameter 'idNotationBenchmark' is set
      if (idNotationBenchmark === undefined || idNotationBenchmark === null) {
        throw new Error("Missing the required parameter 'idNotationBenchmark' when calling getStockNotationKeyFiguresBenchmarkWeek1Get");
      }

      let pathParams = {
      };
      let queryParams = {
        'id': id,
        'idNotationBenchmark': this.apiClient.buildCollectionParam(idNotationBenchmark, 'csv'),
        '_attributes': this.apiClient.buildCollectionParam(opts['attributes'], 'csv'),
        '_language': opts['language']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse2002;
      return this.apiClient.callApi(
        '/stock/notation/keyFigures/benchmark/week/1/get', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * End-of-day (EOD) benchmark key figures of a stock for the time range of one week.
     * End-of-day (EOD) benchmark key figures of a stock for the time range of one week.
     * @param {String} id Identifier of the notation.
     * @param {Array.<String>} idNotationBenchmark List of identifiers of benchmark notations.
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.attributes Limit the attributes returned in the response to the specified set.
     * @param {String} opts.language ISO 639-1 code of the language.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/InlineResponse2002}
     */
    getStockNotationKeyFiguresBenchmarkWeek1Get(id, idNotationBenchmark, opts) {
      return this.getStockNotationKeyFiguresBenchmarkWeek1GetWithHttpInfo(id, idNotationBenchmark, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * End-of-day (EOD) benchmark key figures of a stock for the time range of one year.
     * End-of-day (EOD) benchmark key figures of a stock for the time range of one year.
     * @param {String} id Identifier of the notation.
     * @param {Array.<String>} idNotationBenchmark List of identifiers of benchmark notations.
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.attributes Limit the attributes returned in the response to the specified set.
     * @param {String} opts.language ISO 639-1 code of the language.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse2002} and HTTP response
     */
    getStockNotationKeyFiguresBenchmarkYear1GetWithHttpInfo(id, idNotationBenchmark, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getStockNotationKeyFiguresBenchmarkYear1Get");
      }
      // verify the required parameter 'idNotationBenchmark' is set
      if (idNotationBenchmark === undefined || idNotationBenchmark === null) {
        throw new Error("Missing the required parameter 'idNotationBenchmark' when calling getStockNotationKeyFiguresBenchmarkYear1Get");
      }

      let pathParams = {
      };
      let queryParams = {
        'id': id,
        'idNotationBenchmark': this.apiClient.buildCollectionParam(idNotationBenchmark, 'csv'),
        '_attributes': this.apiClient.buildCollectionParam(opts['attributes'], 'csv'),
        '_language': opts['language']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse2002;
      return this.apiClient.callApi(
        '/stock/notation/keyFigures/benchmark/year/1/get', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * End-of-day (EOD) benchmark key figures of a stock for the time range of one year.
     * End-of-day (EOD) benchmark key figures of a stock for the time range of one year.
     * @param {String} id Identifier of the notation.
     * @param {Array.<String>} idNotationBenchmark List of identifiers of benchmark notations.
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.attributes Limit the attributes returned in the response to the specified set.
     * @param {String} opts.language ISO 639-1 code of the language.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/InlineResponse2002}
     */
    getStockNotationKeyFiguresBenchmarkYear1Get(id, idNotationBenchmark, opts) {
      return this.getStockNotationKeyFiguresBenchmarkYear1GetWithHttpInfo(id, idNotationBenchmark, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * End-of-day (EOD) benchmark key figures of a stock for the time range of three years.
     * End-of-day (EOD) benchmark key figures of a stock for the time range of three years.
     * @param {String} id Identifier of the notation.
     * @param {Array.<String>} idNotationBenchmark List of identifiers of benchmark notations.
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.attributes Limit the attributes returned in the response to the specified set.
     * @param {String} opts.language ISO 639-1 code of the language.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse2002} and HTTP response
     */
    getStockNotationKeyFiguresBenchmarkYear3GetWithHttpInfo(id, idNotationBenchmark, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getStockNotationKeyFiguresBenchmarkYear3Get");
      }
      // verify the required parameter 'idNotationBenchmark' is set
      if (idNotationBenchmark === undefined || idNotationBenchmark === null) {
        throw new Error("Missing the required parameter 'idNotationBenchmark' when calling getStockNotationKeyFiguresBenchmarkYear3Get");
      }

      let pathParams = {
      };
      let queryParams = {
        'id': id,
        'idNotationBenchmark': this.apiClient.buildCollectionParam(idNotationBenchmark, 'csv'),
        '_attributes': this.apiClient.buildCollectionParam(opts['attributes'], 'csv'),
        '_language': opts['language']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse2002;
      return this.apiClient.callApi(
        '/stock/notation/keyFigures/benchmark/year/3/get', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * End-of-day (EOD) benchmark key figures of a stock for the time range of three years.
     * End-of-day (EOD) benchmark key figures of a stock for the time range of three years.
     * @param {String} id Identifier of the notation.
     * @param {Array.<String>} idNotationBenchmark List of identifiers of benchmark notations.
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.attributes Limit the attributes returned in the response to the specified set.
     * @param {String} opts.language ISO 639-1 code of the language.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/InlineResponse2002}
     */
    getStockNotationKeyFiguresBenchmarkYear3Get(id, idNotationBenchmark, opts) {
      return this.getStockNotationKeyFiguresBenchmarkYear3GetWithHttpInfo(id, idNotationBenchmark, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * End-of-day (EOD) benchmark key figures of a stock for the time range of five years.
     * End-of-day (EOD) benchmark key figures of a stock for the time range of five years.
     * @param {String} id Identifier of the notation.
     * @param {Array.<String>} idNotationBenchmark List of identifiers of benchmark notations.
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.attributes Limit the attributes returned in the response to the specified set.
     * @param {String} opts.language ISO 639-1 code of the language.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse2002} and HTTP response
     */
    getStockNotationKeyFiguresBenchmarkYear5GetWithHttpInfo(id, idNotationBenchmark, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getStockNotationKeyFiguresBenchmarkYear5Get");
      }
      // verify the required parameter 'idNotationBenchmark' is set
      if (idNotationBenchmark === undefined || idNotationBenchmark === null) {
        throw new Error("Missing the required parameter 'idNotationBenchmark' when calling getStockNotationKeyFiguresBenchmarkYear5Get");
      }

      let pathParams = {
      };
      let queryParams = {
        'id': id,
        'idNotationBenchmark': this.apiClient.buildCollectionParam(idNotationBenchmark, 'csv'),
        '_attributes': this.apiClient.buildCollectionParam(opts['attributes'], 'csv'),
        '_language': opts['language']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse2002;
      return this.apiClient.callApi(
        '/stock/notation/keyFigures/benchmark/year/5/get', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * End-of-day (EOD) benchmark key figures of a stock for the time range of five years.
     * End-of-day (EOD) benchmark key figures of a stock for the time range of five years.
     * @param {String} id Identifier of the notation.
     * @param {Array.<String>} idNotationBenchmark List of identifiers of benchmark notations.
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.attributes Limit the attributes returned in the response to the specified set.
     * @param {String} opts.language ISO 639-1 code of the language.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/InlineResponse2002}
     */
    getStockNotationKeyFiguresBenchmarkYear5Get(id, idNotationBenchmark, opts) {
      return this.getStockNotationKeyFiguresBenchmarkYear5GetWithHttpInfo(id, idNotationBenchmark, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List of dividends for a stock.
     * List of dividends for a stock.
     * @param {module:model/InlineObject} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse200} and HTTP response
     */
    postStockDividendListWithHttpInfo(body) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling postStockDividendList");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = InlineResponse200;
      return this.apiClient.callApi(
        '/stock/dividend/list', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * List of dividends for a stock.
     * List of dividends for a stock.
     * @param {module:model/InlineObject} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/InlineResponse200}
     */
    postStockDividendList(body) {
      return this.postStockDividendListWithHttpInfo(body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Ranking of stocks' notations using intraday figures.
     * Ranking of stocks' notations using intraday figures. The result is limited to 100 notations that all must satisfy all selected filters. If more than one notation of an instrument matches the parameters, and no market priority has been specified, only the notation with the highest trading volume, averaged over one month, is considered.  By default, the result is sorted descending by the relative intraday performance corresponding to the most recent trade price, see attribute `trade.performance.relative`. The result may contain sortable values based on different currencies, possibly making the ranking nonsensical, if the parameter `currency` has not been specified.`  The search can be restricted to a specific set of products by using customer-specific instrument or notation restriction lists. Such restriction lists are set up by FactSet upon request.  All identifiers used as parameters must be valid and entitled.
     * @param {Object} opts Optional parameters
     * @param {module:model/InlineObject1} opts.body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse2003} and HTTP response
     */
    postStockNotationRankingIntradayListWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = opts['body'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = InlineResponse2003;
      return this.apiClient.callApi(
        '/stock/notation/ranking/intraday/list', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Ranking of stocks' notations using intraday figures.
     * Ranking of stocks' notations using intraday figures. The result is limited to 100 notations that all must satisfy all selected filters. If more than one notation of an instrument matches the parameters, and no market priority has been specified, only the notation with the highest trading volume, averaged over one month, is considered.  By default, the result is sorted descending by the relative intraday performance corresponding to the most recent trade price, see attribute `trade.performance.relative`. The result may contain sortable values based on different currencies, possibly making the ranking nonsensical, if the parameter `currency` has not been specified.`  The search can be restricted to a specific set of products by using customer-specific instrument or notation restriction lists. Such restriction lists are set up by FactSet upon request.  All identifiers used as parameters must be valid and entitled.
     * @param {Object} opts Optional parameters
     * @param {module:model/InlineObject1} opts.body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/InlineResponse2003}
     */
    postStockNotationRankingIntradayList(opts) {
      return this.postStockNotationRankingIntradayListWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Screener for stocks' notations based on stock-specific parameters.
     * Screener for stocks' notations based on stock-specific parameters. The result is limited to the notations that satisfy all the selected filters. If more than one notation of an instrument matches the parameters, and no market priority has been specified, only the notation with the highest trading volume, averaged over one month, is considered.  Parameters for up to three fiscal years might be used in one request, see attribute `reportedKeyFigures`; data is available for the ten most recent completed fiscal years. Estimates are available for the current and two consecutive fiscal years; parameters for all three might be used in one request, see attribute `estimates`. The estimated values are calculated as the average of the most recent estimates provided by all analysts in a fixed time frame of 100 days. Screening and sorting by a currency-dependent attribute is not possible if the currency (see parameter `reportedKeyFigures.currencyDependentKeyFigures.currency.isoCode` and parameter `estimates.currencyDependentEstimates.currency.isoCode` respectively) is not set. If a fiscal year for the data as of the end of a fiscal year (see parameter `reportedKeyFigures.fiscalYear`) or for the estimates (see parameter `estimates.fiscalYear`) has been selected but no currency has been set, the respective data will be returned in the currency in which it was originally reported.  A specific set of stocks can be restricted to or excluded by using customer-specific instrument or notation selection lists. Such selection lists are set up by FactSet upon request. All identifiers used as parameters must be valid and entitled.
     * @param {Object} opts Optional parameters
     * @param {module:model/InlineObject2} opts.body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse2004} and HTTP response
     */
    postStockNotationScreenerSearchWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = opts['body'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = InlineResponse2004;
      return this.apiClient.callApi(
        '/stock/notation/screener/search', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Screener for stocks' notations based on stock-specific parameters.
     * Screener for stocks' notations based on stock-specific parameters. The result is limited to the notations that satisfy all the selected filters. If more than one notation of an instrument matches the parameters, and no market priority has been specified, only the notation with the highest trading volume, averaged over one month, is considered.  Parameters for up to three fiscal years might be used in one request, see attribute `reportedKeyFigures`; data is available for the ten most recent completed fiscal years. Estimates are available for the current and two consecutive fiscal years; parameters for all three might be used in one request, see attribute `estimates`. The estimated values are calculated as the average of the most recent estimates provided by all analysts in a fixed time frame of 100 days. Screening and sorting by a currency-dependent attribute is not possible if the currency (see parameter `reportedKeyFigures.currencyDependentKeyFigures.currency.isoCode` and parameter `estimates.currencyDependentEstimates.currency.isoCode` respectively) is not set. If a fiscal year for the data as of the end of a fiscal year (see parameter `reportedKeyFigures.fiscalYear`) or for the estimates (see parameter `estimates.fiscalYear`) has been selected but no currency has been set, the respective data will be returned in the currency in which it was originally reported.  A specific set of stocks can be restricted to or excluded by using customer-specific instrument or notation selection lists. Such selection lists are set up by FactSet upon request. All identifiers used as parameters must be valid and entitled.
     * @param {Object} opts Optional parameters
     * @param {module:model/InlineObject2} opts.body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/InlineResponse2004}
     */
    postStockNotationScreenerSearch(opts) {
      return this.postStockNotationScreenerSearchWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Possible values and value ranges for the parameters used in the endpoint `/stock/notation/screener/search`.
     * The endpoint returns the possible values and value ranges for the parameters used in the endpoint `/stock/notation/screener/search`. It allows to request the values and value ranges only for a restricted set of notations that match predefined parameters. The functionality may be used to pre-fill the values and value ranges of the parameters of the `/stock/notation/screener/search` endpoint so that performing a search always leads to a non-empty set of notations. If more than one notation of an instrument matches the parameters, and no market priority has been specified, only the notation with the highest trading volume, averaged over one month, is considered. For more information regarding the performance and volatility parameters, see the information available in the group description of the `/notation/keyFigures/` endpoints.
     * @param {Object} opts Optional parameters
     * @param {module:model/InlineObject3} opts.body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse2005} and HTTP response
     */
    postStockNotationScreenerValueRangesGetWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = opts['body'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = InlineResponse2005;
      return this.apiClient.callApi(
        '/stock/notation/screener/valueRanges/get', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Possible values and value ranges for the parameters used in the endpoint `/stock/notation/screener/search`.
     * The endpoint returns the possible values and value ranges for the parameters used in the endpoint `/stock/notation/screener/search`. It allows to request the values and value ranges only for a restricted set of notations that match predefined parameters. The functionality may be used to pre-fill the values and value ranges of the parameters of the `/stock/notation/screener/search` endpoint so that performing a search always leads to a non-empty set of notations. If more than one notation of an instrument matches the parameters, and no market priority has been specified, only the notation with the highest trading volume, averaged over one month, is considered. For more information regarding the performance and volatility parameters, see the information available in the group description of the `/notation/keyFigures/` endpoints.
     * @param {Object} opts Optional parameters
     * @param {module:model/InlineObject3} opts.body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/InlineResponse2005}
     */
    postStockNotationScreenerValueRangesGet(opts) {
      return this.postStockNotationScreenerValueRangesGetWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
