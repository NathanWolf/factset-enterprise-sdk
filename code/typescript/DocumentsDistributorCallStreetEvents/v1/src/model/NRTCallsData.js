/**
 * Documents Distributor - CallStreet Events
 * CallStreet Events contains all the Documents Distributor APIs that offer events data such as Events Audio and Near Real-Time Transcripts.  The  Events Audio API provides access to historical as well as latest audio recordings of various company events covered by FactSet. The events include, but are not limited to: earnings calls, conferences, and investor days.   This API also provides relevant metadata such as timestamps and identifiers around each audio file.  The Documents Distributor - Near Real-time Transcripts API enables access to Near Real-time Transcripts provided by CallStreet to time-sensitive clients. This API also provides the relevant speaker metadata along with their confidence scores. This data caters to quant clients interested in building machine learning models.  Clients can leverage this API to perform sentiment analysis through natural language processing or machine learning. It can also be used to complement analysis using FactSet's transcripts service. 
 *
 * The version of the OpenAPI document: 1.8.0
 * Contact: api@factset.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The NRTCallsData model module.
 * @module model/NRTCallsData
 */
class NRTCallsData {
    /**
     * Constructs a new <code>NRTCallsData</code>.
     * @alias module:model/NRTCallsData
     */
    constructor() { 
        
        NRTCallsData.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>NRTCallsData</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/NRTCallsData} obj Optional instance to populate.
     * @return {module:model/NRTCallsData} The populated <code>NRTCallsData</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new NRTCallsData();

            if (data.hasOwnProperty('callStatus')) {
                obj['callStatus'] = ApiClient.convertToType(data['callStatus'], 'String');
            }
            if (data.hasOwnProperty('reportId')) {
                obj['reportId'] = ApiClient.convertToType(data['reportId'], 'Number');
            }
            if (data.hasOwnProperty('sourceCode')) {
                obj['sourceCode'] = ApiClient.convertToType(data['sourceCode'], 'String');
            }
            if (data.hasOwnProperty('audioSourceId')) {
                obj['audioSourceId'] = ApiClient.convertToType(data['audioSourceId'], 'Number');
            }
            if (data.hasOwnProperty('recordingStartTime')) {
                obj['recordingStartTime'] = ApiClient.convertToType(data['recordingStartTime'], 'String');
            }
            if (data.hasOwnProperty('ticker')) {
                obj['ticker'] = ApiClient.convertToType(data['ticker'], 'String');
            }
            if (data.hasOwnProperty('entityId')) {
                obj['entityId'] = ApiClient.convertToType(data['entityId'], 'String');
            }
            if (data.hasOwnProperty('eventType')) {
                obj['eventType'] = ApiClient.convertToType(data['eventType'], 'String');
            }
            if (data.hasOwnProperty('eventTitle')) {
                obj['eventTitle'] = ApiClient.convertToType(data['eventTitle'], 'String');
            }
            if (data.hasOwnProperty('eventDatetimeUtc')) {
                obj['eventDatetimeUtc'] = ApiClient.convertToType(data['eventDatetimeUtc'], 'String');
            }
        }
        return obj;
    }


}

/**
 * Status of the call i.e. ended or inProgress or ewn or issueAtSource.  * inProgress- the call is in progress. * ended- the call has ended. * ewn- the call has technically ended and can be considered as ended but is missing a notification from the upstream systems. * issueAtSource- the call has ended with no snippet data due to a possible issue at the source.
 * @member {String} callStatus
 */
NRTCallsData.prototype['callStatus'] = undefined;

/**
 * The unique ID for an event.
 * @member {Number} reportId
 */
NRTCallsData.prototype['reportId'] = undefined;

/**
 * Identifier for the source of how the event is recorded. P:- Phone Replay W:- Webcast
 * @member {String} sourceCode
 */
NRTCallsData.prototype['sourceCode'] = undefined;

/**
 * Unique ID for an Internal recording specific to reportID. For example, ReportID X would have multiple recordings from different source (dial-in - P or webcast - W). One reportId can have multiple audiosourceIDs.
 * @member {Number} audioSourceId
 */
NRTCallsData.prototype['audioSourceId'] = undefined;

/**
 * The official UTC timestamp when FactSet starts the recording.
 * @member {String} recordingStartTime
 */
NRTCallsData.prototype['recordingStartTime'] = undefined;

/**
 * Ticker-region identifier for the company hosting the event.
 * @member {String} ticker
 */
NRTCallsData.prototype['ticker'] = undefined;

/**
 * Factset entity level identifier for the company hosting the event.
 * @member {String} entityId
 */
NRTCallsData.prototype['entityId'] = undefined;

/**
 * Refers to the various event types covered by FactSet CallStreet - * Analyst, Investor & Shareholder Meeting => AS * Earnings Call => E * Earnings Release => ER * Guidance => G * Sales & Revenue Call => SA * Sales & Revenue Release => SR * Special & M&A (Special Situation) => SS
 * @member {String} eventType
 */
NRTCallsData.prototype['eventType'] = undefined;

/**
 * Title of the Event.
 * @member {String} eventTitle
 */
NRTCallsData.prototype['eventTitle'] = undefined;

/**
 * The official UTC timestamp of the start of the event.
 * @member {String} eventDatetimeUtc
 */
NRTCallsData.prototype['eventDatetimeUtc'] = undefined;






export default NRTCallsData;

