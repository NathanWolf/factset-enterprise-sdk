/**
 * Documents Distributor - CallStreet Events
 * CallStreet Events contains all the Documents Distributor APIs that offer events data such as Events Audio and Near Real-Time Transcripts.  The  Events Audio API provides access to historical as well as latest audio recordings of various company events covered by FactSet. The events include, but are not limited to: earnings calls, conferences, and investor days.   This API also provides relevant metadata such as timestamps and identifiers around each audio file.  The Documents Distributor - Near Real-time Transcripts API enables access to Near Real-time Transcripts provided by CallStreet to time-sensitive clients. This API also provides the relevant speaker metadata along with their confidence scores. This data caters to quant clients interested in building machine learning models.  Clients can leverage this API to perform sentiment analysis through natural language processing or machine learning. It can also be used to complement analysis using FactSet's transcripts service. 
 *
 * The version of the OpenAPI document: 1.8.0
 * Contact: api@factset.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Error from '../model/Error';
import IndexedNRT from '../model/IndexedNRT';
import NRT403Error from '../model/NRT403Error';
import NRTCalls from '../model/NRTCalls';
import NRTCalls400Response from '../model/NRTCalls400Response';
import NRTSnippets from '../model/NRTSnippets';
import NRTSnippets400Response from '../model/NRTSnippets400Response';
import NRTSpeakerids from '../model/NRTSpeakerids';
import NRTSpeakerids400Response from '../model/NRTSpeakerids400Response';

/**
* NearRealTimeTranscripts service.
* @module api/NearRealTimeTranscriptsApi
*/
export default class NearRealTimeTranscriptsApi {

    /**
    * Constructs a new NearRealTimeTranscriptsApi. 
    * @alias module:api/NearRealTimeTranscriptsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * Returns the active calls happening at the moment.
     * Returns the active calls happening at the moment
     * @param {Object} opts Optional parameters
     * @param {Number} opts.paginationLimit Specifies the  number of results to return per page. [ Min=0; Max=500] (default to 200)
     * @param {Number} opts.paginationOffset Specifies the starting point for pagination. This parameter is used to identify the beginning of next set of results. (default to 0)
     * @param {Number} opts.audioSourceId Unique ID for an Internal recording specific to reportID. For example, ReportID X would have multiple recordings from different source (dial-in or webcast). One ReportID can have multiple AudioSourceIDs.
     * @param {Number} opts.reportId Unique identifier for an event.
     * @param {module:model/String} opts.sort Enables to get the data in chronological or reverse chronological order based on startDate. Results are in reverse chronological order if this parameter is not used. (default to '-startDate')
     * @param {String} opts.entityId Factset entity level identifier for the company hosting the event.
     * @param {String} opts.ticker Ticker-region identifier for the company hosting the event.
     * @param {module:model/String} opts.callStatus Status of the call i.e. ended or inProgress or ewn or issueAtSource.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/NRTCalls} and HTTP response
     */
    getBulkDocumentsNrtV1CallsWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        '_paginationLimit': opts['paginationLimit'],
        '_paginationOffset': opts['paginationOffset'],
        'audioSourceId': opts['audioSourceId'],
        'reportId': opts['reportId'],
        '_sort': opts['sort'],
        'entityId': opts['entityId'],
        'ticker': opts['ticker'],
        'callStatus': opts['callStatus']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];


      let returnType = NRTCalls;

      return this.apiClient.callApi(
        '/bulk-documents/nrt/v1/calls', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Returns the active calls happening at the moment.
     * Returns the active calls happening at the moment
     * @param {Object} opts Optional parameters
     * @param {Number} opts.paginationLimit Specifies the  number of results to return per page. [ Min=0; Max=500] (default to 200)
     * @param {Number} opts.paginationOffset Specifies the starting point for pagination. This parameter is used to identify the beginning of next set of results. (default to 0)
     * @param {Number} opts.audioSourceId Unique ID for an Internal recording specific to reportID. For example, ReportID X would have multiple recordings from different source (dial-in or webcast). One ReportID can have multiple AudioSourceIDs.
     * @param {Number} opts.reportId Unique identifier for an event.
     * @param {module:model/String} opts.sort Enables to get the data in chronological or reverse chronological order based on startDate. Results are in reverse chronological order if this parameter is not used. (default to '-startDate')
     * @param {String} opts.entityId Factset entity level identifier for the company hosting the event.
     * @param {String} opts.ticker Ticker-region identifier for the company hosting the event.
     * @param {module:model/String} opts.callStatus Status of the call i.e. ended or inProgress or ewn or issueAtSource.
     * @return { Promise.< module:model/NRTCalls > } a Promise, with data of type {@link module:model/NRTCalls }
     */
    getBulkDocumentsNrtV1Calls(opts) {
      return this.getBulkDocumentsNrtV1CallsWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Returns the  indexed transcript data  in small increments throughout the duration of an active call.
     * Returns the  indexed transcript data  in small increments throughout the duration of an active call.
     * @param {Number} audioSourceId Unique ID for an Internal recording specific to reportID. For example, ReportID X would have multiple recordings from different source (dial-in or webcast). One ReportID can have multiple AudioSourceIDs.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.paginationLimit Specifies the  number of results to return per page. [ Min=0; Max=50 ] (default to 25)
     * @param {Number} opts.paginationOffset Specifies the starting point for pagination. This parameter is used to identify the beginning of next set of results. (default to 0)
     * @param {Number} opts.reportId Unique identifier for an event.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/IndexedNRT} and HTTP response
     */
    getBulkDocumentsNrtV1IndexedNrtWithHttpInfo(audioSourceId, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'audioSourceId' is set
      if (audioSourceId === undefined || audioSourceId === null) {
        throw new Error("Missing the required parameter 'audioSourceId' when calling getBulkDocumentsNrtV1IndexedNrt");
      }

      let pathParams = {
      };
      let queryParams = {
        '_paginationLimit': opts['paginationLimit'],
        '_paginationOffset': opts['paginationOffset'],
        'audioSourceId': audioSourceId,
        'reportId': opts['reportId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];


      let returnType = IndexedNRT;

      return this.apiClient.callApi(
        '/bulk-documents/nrt/v1/indexed-nrt', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Returns the  indexed transcript data  in small increments throughout the duration of an active call.
     * Returns the  indexed transcript data  in small increments throughout the duration of an active call.
     * @param {Number} audioSourceId Unique ID for an Internal recording specific to reportID. For example, ReportID X would have multiple recordings from different source (dial-in or webcast). One ReportID can have multiple AudioSourceIDs.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.paginationLimit Specifies the  number of results to return per page. [ Min=0; Max=50 ] (default to 25)
     * @param {Number} opts.paginationOffset Specifies the starting point for pagination. This parameter is used to identify the beginning of next set of results. (default to 0)
     * @param {Number} opts.reportId Unique identifier for an event.
     * @return { Promise.< module:model/IndexedNRT > } a Promise, with data of type {@link module:model/IndexedNRT }
     */
    getBulkDocumentsNrtV1IndexedNrt(audioSourceId, opts) {
      return this.getBulkDocumentsNrtV1IndexedNrtWithHttpInfo(audioSourceId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Returns the latest transcript snippets from an active call.
     * Returns the latest snippets from an active call
     * @param {Number} audioSourceId Unique ID for an Internal recording specific to reportID. For example, ReportID X would have multiple recordings from different source (dial-in or webcast). One ReportID can have multiple AudioSourceIDs.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.paginationLimit Specifies the  number of results to return per page. [ Min=0; Max=500] (default to 200)
     * @param {Number} opts.paginationOffset Specifies the starting point for pagination. This parameter is used to identify the beginning of next set of results. (default to 0)
     * @param {Number} opts.reportId Unique identifier for an event.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/NRTSnippets} and HTTP response
     */
    getBulkDocumentsNrtV1ListSnippetsWithHttpInfo(audioSourceId, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'audioSourceId' is set
      if (audioSourceId === undefined || audioSourceId === null) {
        throw new Error("Missing the required parameter 'audioSourceId' when calling getBulkDocumentsNrtV1ListSnippets");
      }

      let pathParams = {
      };
      let queryParams = {
        '_paginationLimit': opts['paginationLimit'],
        '_paginationOffset': opts['paginationOffset'],
        'audioSourceId': audioSourceId,
        'reportId': opts['reportId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];


      let returnType = NRTSnippets;

      return this.apiClient.callApi(
        '/bulk-documents/nrt/v1/list-snippets', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Returns the latest transcript snippets from an active call.
     * Returns the latest snippets from an active call
     * @param {Number} audioSourceId Unique ID for an Internal recording specific to reportID. For example, ReportID X would have multiple recordings from different source (dial-in or webcast). One ReportID can have multiple AudioSourceIDs.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.paginationLimit Specifies the  number of results to return per page. [ Min=0; Max=500] (default to 200)
     * @param {Number} opts.paginationOffset Specifies the starting point for pagination. This parameter is used to identify the beginning of next set of results. (default to 0)
     * @param {Number} opts.reportId Unique identifier for an event.
     * @return { Promise.< module:model/NRTSnippets > } a Promise, with data of type {@link module:model/NRTSnippets }
     */
    getBulkDocumentsNrtV1ListSnippets(audioSourceId, opts) {
      return this.getBulkDocumentsNrtV1ListSnippetsWithHttpInfo(audioSourceId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Returns the latest speakerIds with the confidence scores generated for an active call.
     * Returns the latest speakerIds with the cosine scores(confidence scores) generated for an active call.
     * @param {Number} audioSourceId Unique ID for an Internal recording specific to reportID. For example, ReportID X would have multiple recordings from different source (dial-in or webcast). One ReportID can have multiple AudioSourceIDs.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.paginationLimit Specifies the  number of results to return per page. [ Min=0; Max=500] (default to 200)
     * @param {Number} opts.paginationOffset Specifies the starting point for pagination. This parameter is used to identify the beginning of next set of results. (default to 0)
     * @param {module:model/String} opts.sort Enables to get the data in chronological or reverse chronological order. Results are in chronological order if this parameter is not used. (default to 'startDate')
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/NRTSpeakerids} and HTTP response
     */
    getBulkDocumentsNrtV1SpeakeridsWithHttpInfo(audioSourceId, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'audioSourceId' is set
      if (audioSourceId === undefined || audioSourceId === null) {
        throw new Error("Missing the required parameter 'audioSourceId' when calling getBulkDocumentsNrtV1Speakerids");
      }

      let pathParams = {
      };
      let queryParams = {
        '_paginationLimit': opts['paginationLimit'],
        '_paginationOffset': opts['paginationOffset'],
        'audioSourceId': audioSourceId,
        '_sort': opts['sort']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];


      let returnType = NRTSpeakerids;

      return this.apiClient.callApi(
        '/bulk-documents/nrt/v1/speakerids', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Returns the latest speakerIds with the confidence scores generated for an active call.
     * Returns the latest speakerIds with the cosine scores(confidence scores) generated for an active call.
     * @param {Number} audioSourceId Unique ID for an Internal recording specific to reportID. For example, ReportID X would have multiple recordings from different source (dial-in or webcast). One ReportID can have multiple AudioSourceIDs.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.paginationLimit Specifies the  number of results to return per page. [ Min=0; Max=500] (default to 200)
     * @param {Number} opts.paginationOffset Specifies the starting point for pagination. This parameter is used to identify the beginning of next set of results. (default to 0)
     * @param {module:model/String} opts.sort Enables to get the data in chronological or reverse chronological order. Results are in chronological order if this parameter is not used. (default to 'startDate')
     * @return { Promise.< module:model/NRTSpeakerids > } a Promise, with data of type {@link module:model/NRTSpeakerids }
     */
    getBulkDocumentsNrtV1Speakerids(audioSourceId, opts) {
      return this.getBulkDocumentsNrtV1SpeakeridsWithHttpInfo(audioSourceId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}





