/**
 * Vault API
 * Allow clients to fetch Vault Analytics through APIs.
 *
 * The version of the OpenAPI document: 2
 * Contact: analytics.api.support@factset.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ComponentSummary from '../model/ComponentSummary';
import VaultComponent from '../model/VaultComponent';

/**
* Components service.
* @module api/ComponentsApi
* @version 0.8.0
*/
export default class ComponentsApi {

    /**
    * Constructs a new ComponentsApi. 
    * @alias module:api/ComponentsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * Get Vault component by id
     * This endpoint returns the default settings of a Vault component.
     * @param {String} id Unique identifier for a vault component
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/VaultComponent} and HTTP response
     */
    getVaultComponentByIdWithHttpInfo(id) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getVaultComponentById");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = VaultComponent;
      return this.apiClient.callApi(
        '/analytics/lookups/v2/engines/vault/components/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get Vault component by id
     * This endpoint returns the default settings of a Vault component.
     * @param {String} id Unique identifier for a vault component
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/VaultComponent}
     */
    getVaultComponentById(id) {
      return this.getVaultComponentByIdWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get Vault components
     * This endpoint returns the list of Vault components in a given Vault document.
     * @param {String} document Document Name
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object.<String, module:model/{String: ComponentSummary}>} and HTTP response
     */
    getVaultComponentsWithHttpInfo(document) {
      let postBody = null;
      // verify the required parameter 'document' is set
      if (document === undefined || document === null) {
        throw new Error("Missing the required parameter 'document' when calling getVaultComponents");
      }

      let pathParams = {
      };
      let queryParams = {
        'document': document
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = {'String': ComponentSummary};
      return this.apiClient.callApi(
        '/analytics/lookups/v2/engines/vault/components', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get Vault components
     * This endpoint returns the list of Vault components in a given Vault document.
     * @param {String} document Document Name
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object.<String, module:model/{String: ComponentSummary}>}
     */
    getVaultComponents(document) {
      return this.getVaultComponentsWithHttpInfo(document)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
