/**
 * Market Intelligence
 * Through the Market Intelligence API, stay up to date on the companies and sectors you care most about with ease. Request the templates you have made in Market Intelligence to receive news and data on your portfolio.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from './ApiClient';
import FetchReportPollID from './model/FetchReportPollID';
import GetReportInfo from './model/GetReportInfo';
import MIAPIPostRequest from './model/MIAPIPostRequest';
import PostRequestExample from './model/PostRequestExample';
import PostResponseInfo from './model/PostResponseInfo';
import ReportContent from './model/ReportContent';
import ReportDataHeader from './model/ReportDataHeader';

import CreateReportApi from './api/CreateReportApi';
import RetrieveRefreshedDataApi from './api/RetrieveRefreshedDataApi';
import RetrieveRefreshedReportApi from './api/RetrieveRefreshedReportApi';
import RetrieveReportListApi from './api/RetrieveReportListApi';


/**
* Market Intelligence client library for JavaScript.<br>
* The <code>index</code> module provides access to constructors for all the classes which comprise the public API.
* <p>
* An AMD (recommended!) or CommonJS application will generally do something equivalent to the following:
* <pre>
* var marketintelligence = require('index'); // See note below*.
* var xxxSvc = new marketintelligence.XxxApi(); // Allocate the API class we're going to use.
* var yyyModel = new marketintelligence.Yyy(); // Construct a model instance.
* yyyModel.someProperty = 'someValue';
* ...
* var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.
* ...
* </pre>
* <em>*NOTE: For a top-level AMD script, use require(['index'], function(){...})
* and put the application logic within the callback function.</em>
* </p>
* <p>
* A non-AMD browser application (discouraged) might do something like this:
* <pre>
* var xxxSvc = new marketintelligence.XxxApi(); // Allocate the API class we're going to use.
* var yyy = new marketintelligence.Yyy(); // Construct a model instance.
* yyyModel.someProperty = 'someValue';
* ...
* var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.
* ...
* </pre>
* </p>
* @module index
* @version 0.20.0
*/
export {
    /**
     * The ApiClient constructor.
     * @property {module:ApiClient}
     */
    ApiClient,

    /**
     * The FetchReportPollID model constructor.
     * @property {module:model/FetchReportPollID}
     */
    FetchReportPollID,

    /**
     * The GetReportInfo model constructor.
     * @property {module:model/GetReportInfo}
     */
    GetReportInfo,

    /**
     * The MIAPIPostRequest model constructor.
     * @property {module:model/MIAPIPostRequest}
     */
    MIAPIPostRequest,

    /**
     * The PostRequestExample model constructor.
     * @property {module:model/PostRequestExample}
     */
    PostRequestExample,

    /**
     * The PostResponseInfo model constructor.
     * @property {module:model/PostResponseInfo}
     */
    PostResponseInfo,

    /**
     * The ReportContent model constructor.
     * @property {module:model/ReportContent}
     */
    ReportContent,

    /**
     * The ReportDataHeader model constructor.
     * @property {module:model/ReportDataHeader}
     */
    ReportDataHeader,

    /**
    * The CreateReportApi service constructor.
    * @property {module:api/CreateReportApi}
    */
    CreateReportApi,

    /**
    * The RetrieveRefreshedDataApi service constructor.
    * @property {module:api/RetrieveRefreshedDataApi}
    */
    RetrieveRefreshedDataApi,

    /**
    * The RetrieveRefreshedReportApi service constructor.
    * @property {module:api/RetrieveRefreshedReportApi}
    */
    RetrieveRefreshedReportApi,

    /**
    * The RetrieveReportListApi service constructor.
    * @property {module:api/RetrieveReportListApi}
    */
    RetrieveReportListApi,

};
