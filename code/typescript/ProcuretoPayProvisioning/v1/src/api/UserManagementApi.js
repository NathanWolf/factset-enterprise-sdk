/**
 * FactSet Procure to Pay API
 * Allows for Provisioning and Entitlement of FactSet accounts.     Authentication is provided via FactSet's [API Key System](https://developer.factset.com/authentication)    Please note that the on-page \"Try it out\" features do not function. You must authorize against our API and make requests directly againt the endpoints.    
 *
 * The version of the OpenAPI document: 1S
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import CancelIndividual from '../model/CancelIndividual';
import CreateIndividual from '../model/CreateIndividual';
import GetIndividual from '../model/GetIndividual';
import InlineResponse202 from '../model/InlineResponse202';
import ModifyIndividual from '../model/ModifyIndividual';

/**
* UserManagement service.
* @module api/UserManagementApi
* @version 0.9.0
*/
export default class UserManagementApi {

    /**
    * Constructs a new UserManagementApi. 
    * @alias module:api/UserManagementApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * Cancels an individual's serial and all productIds
     * @param {Object} opts Optional parameters
     * @param {module:model/CancelIndividual} opts.cancelIndividual 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse202} and HTTP response
     */
    cancelIndividualPostWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = opts['cancelIndividual'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json; charset=utf-8', 'text/plain'];
      let returnType = InlineResponse202;
      let basePaths = ['https://api.factset.com/procuretopay/provisioning/'];
      let basePath = basePaths[0]; // by default use the first one in "servers" defined in OpenAPI
      if (typeof opts['_base_path_index'] !== 'undefined') {
        if (opts['_base_path_index']  >= basePaths.length || opts['_base_path_index'] <  0) {
          throw new Error("Invalid index " + opts['_base_path_index'] + " when selecting the host settings. Must be less than " + basePaths.length);
        }
        basePath = basePaths[opts['_base_path_index']];
      }

      return this.apiClient.callApi(
        '/cancelIndividual', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, basePath
      );
    }

    /**
     * Cancels an individual's serial and all productIds
     * @param {Object} opts Optional parameters
     * @param {module:model/CancelIndividual} opts.cancelIndividual 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/InlineResponse202}
     */
    cancelIndividualPost(opts) {
      return this.cancelIndividualPostWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Provisions an individual for FactSet
     * @param {Object} opts Optional parameters
     * @param {module:model/CreateIndividual} opts.createIndividual 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse202} and HTTP response
     */
    createIndividualPostWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = opts['createIndividual'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json; charset=utf-8', 'text/plain'];
      let returnType = InlineResponse202;
      let basePaths = ['https://api.factset.com/procuretopay/provisioning/'];
      let basePath = basePaths[0]; // by default use the first one in "servers" defined in OpenAPI
      if (typeof opts['_base_path_index'] !== 'undefined') {
        if (opts['_base_path_index']  >= basePaths.length || opts['_base_path_index'] <  0) {
          throw new Error("Invalid index " + opts['_base_path_index'] + " when selecting the host settings. Must be less than " + basePaths.length);
        }
        basePath = basePaths[opts['_base_path_index']];
      }

      return this.apiClient.callApi(
        '/createIndividual', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, basePath
      );
    }

    /**
     * Provisions an individual for FactSet
     * @param {Object} opts Optional parameters
     * @param {module:model/CreateIndividual} opts.createIndividual 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/InlineResponse202}
     */
    createIndividualPost(opts) {
      return this.createIndividualPostWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Returns an individual's details by uniqueId
     * @param {String} uniqueid uniqueId to query
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GetIndividual} and HTTP response
     */
    getIndividualGetWithHttpInfo(uniqueid, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'uniqueid' is set
      if (uniqueid === undefined || uniqueid === null) {
        throw new Error("Missing the required parameter 'uniqueid' when calling getIndividualGet");
      }

      let pathParams = {
      };
      let queryParams = {
        'uniqueid': uniqueid
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = [];
      let accepts = ['application/json; charset=utf-8', 'text/plain'];
      let returnType = GetIndividual;
      let basePaths = ['https://api.factset.com/procuretopay/provisioning/'];
      let basePath = basePaths[0]; // by default use the first one in "servers" defined in OpenAPI
      if (typeof opts['_base_path_index'] !== 'undefined') {
        if (opts['_base_path_index']  >= basePaths.length || opts['_base_path_index'] <  0) {
          throw new Error("Invalid index " + opts['_base_path_index'] + " when selecting the host settings. Must be less than " + basePaths.length);
        }
        basePath = basePaths[opts['_base_path_index']];
      }

      return this.apiClient.callApi(
        '/getIndividual', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, basePath
      );
    }

    /**
     * Returns an individual's details by uniqueId
     * @param {String} uniqueid uniqueId to query
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GetIndividual}
     */
    getIndividualGet(uniqueid, opts) {
      return this.getIndividualGetWithHttpInfo(uniqueid, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Lists all individuals with details at all locations.
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.includeProductIds <br>Optional, if =TRUE will return additional product array per object with all productIds for all returned individuals.</br>
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<Object>} and HTTP response
     */
    listIndividualsGetWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'includeProductIds': opts['includeProductIds']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = [];
      let accepts = ['application/json; charset=utf-8', 'text/plain'];
      let returnType = [Object];
      let basePaths = ['https://api.factset.com/procuretopay/provisioning/'];
      let basePath = basePaths[0]; // by default use the first one in "servers" defined in OpenAPI
      if (typeof opts['_base_path_index'] !== 'undefined') {
        if (opts['_base_path_index']  >= basePaths.length || opts['_base_path_index'] <  0) {
          throw new Error("Invalid index " + opts['_base_path_index'] + " when selecting the host settings. Must be less than " + basePaths.length);
        }
        basePath = basePaths[opts['_base_path_index']];
      }

      return this.apiClient.callApi(
        '/listIndividuals', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, basePath
      );
    }

    /**
     * Lists all individuals with details at all locations.
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.includeProductIds <br>Optional, if =TRUE will return additional product array per object with all productIds for all returned individuals.</br>
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<Object>}
     */
    listIndividualsGet(opts) {
      return this.listIndividualsGetWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Modifies an individual's attributes as determined by the uniqueId in the body of the request. Please note that the uniqueId may not be changed. Fields not changing may be passed as NULL but never empty.
     * @param {Object} opts Optional parameters
     * @param {module:model/ModifyIndividual} opts.modifyIndividual 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse202} and HTTP response
     */
    modifyIndividualPostWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = opts['modifyIndividual'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json; charset=utf-8', 'text/plain'];
      let returnType = InlineResponse202;
      let basePaths = ['https://api.factset.com/procuretopay/provisioning/'];
      let basePath = basePaths[0]; // by default use the first one in "servers" defined in OpenAPI
      if (typeof opts['_base_path_index'] !== 'undefined') {
        if (opts['_base_path_index']  >= basePaths.length || opts['_base_path_index'] <  0) {
          throw new Error("Invalid index " + opts['_base_path_index'] + " when selecting the host settings. Must be less than " + basePaths.length);
        }
        basePath = basePaths[opts['_base_path_index']];
      }

      return this.apiClient.callApi(
        '/modifyIndividual', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, basePath
      );
    }

    /**
     * Modifies an individual's attributes as determined by the uniqueId in the body of the request. Please note that the uniqueId may not be changed. Fields not changing may be passed as NULL but never empty.
     * @param {Object} opts Optional parameters
     * @param {module:model/ModifyIndividual} opts.modifyIndividual 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/InlineResponse202}
     */
    modifyIndividualPost(opts) {
      return this.modifyIndividualPostWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
