/**
 * Quotes API For Digital Portals
 * The Quotes API combines endpoints for retrieving security end-of-day, delayed, and realtime prices with performance key figures and basic reference data on the security and market level.  The API supports over 20 different price types for each quote and comes with basic search endpoints based on security identifiers and instrument names. Market coverage is included in the *Sample Use Cases* section below.  The Digital Portal use case is focused on high-performance applications that are  * serving millions of end-users, * accessible by client browsers via the internet, * supporting subscriptions for streamed updates out-of-the-box, * typically combining a wide variety of *for Digital Portals*-APIs into a highly use-case specific solution for customers, * integrated into complex infrastructures such as existing frontend frameworks, authentication services.  All APIs labelled *for Digital Portals* have been designed for direct use by client web applications and feature extreme low latency: The average response time across all endpoints is 30 ms whereas 99% of all requests are answered in close to under 300ms.  See the [Time Series API for Digital Portals](https://developer.factset.com/api-catalog/time-series-api-digital-portals) for direct access to price histories, and the [News API for Digital Portals](https://developer.factset.com/api-catalog/news-api-digital-portals) for searching and fetching related news. 
 *
 * The version of the OpenAPI document: 2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import InlineResponse20050DataNotation from './InlineResponse20050DataNotation';
import InlineResponse20050DataValueUnit from './InlineResponse20050DataValueUnit';

/**
 * The InlineResponse20050DataComponents model module.
 * @module model/InlineResponse20050DataComponents
 */
class InlineResponse20050DataComponents {
    /**
     * Constructs a new <code>InlineResponse20050DataComponents</code>.
     * @alias module:model/InlineResponse20050DataComponents
     */
    constructor() { 
        
        InlineResponse20050DataComponents.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>InlineResponse20050DataComponents</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/InlineResponse20050DataComponents} obj Optional instance to populate.
     * @return {module:model/InlineResponse20050DataComponents} The populated <code>InlineResponse20050DataComponents</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new InlineResponse20050DataComponents();

            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('valueUnit')) {
                obj['valueUnit'] = InlineResponse20050DataValueUnit.constructFromObject(data['valueUnit']);
            }
            if (data.hasOwnProperty('notation')) {
                obj['notation'] = InlineResponse20050DataNotation.constructFromObject(data['notation']);
            }
            if (data.hasOwnProperty('participation')) {
                obj['participation'] = ApiClient.convertToType(data['participation'], 'String');
            }
            if (data.hasOwnProperty('numberShares')) {
                obj['numberShares'] = ApiClient.convertToType(data['numberShares'], 'Number');
            }
            if (data.hasOwnProperty('initialWeight')) {
                obj['initialWeight'] = ApiClient.convertToType(data['initialWeight'], 'Number');
            }
            if (data.hasOwnProperty('referenceLevel')) {
                obj['referenceLevel'] = ApiClient.convertToType(data['referenceLevel'], 'Number');
            }
            if (data.hasOwnProperty('constantLeverage')) {
                obj['constantLeverage'] = ApiClient.convertToType(data['constantLeverage'], 'Number');
            }
        }
        return obj;
    }


}

/**
 * Name of the component, provided also if there is no notation for the component.
 * @member {String} name
 */
InlineResponse20050DataComponents.prototype['name'] = undefined;

/**
 * @member {module:model/InlineResponse20050DataValueUnit} valueUnit
 */
InlineResponse20050DataComponents.prototype['valueUnit'] = undefined;

/**
 * @member {module:model/InlineResponse20050DataNotation} notation
 */
InlineResponse20050DataComponents.prototype['notation'] = undefined;

/**
 * Indicates whether the level of the composite instrument rises or falls with a rising level of the component. The level of a basket always rises with rising level of its components and vice versa; therefore, for those the attribute is not set. The level of an alpha structure or a futures spread is calculated by subtracting the performance (price) of the short component from that of the long one. The level of a factor index rises with rising level of its component if the latter is long, and falls if it is short. For the type of composite instrument, see attribute  `typeComposite`.
 * @member {module:model/InlineResponse20050DataComponents.ParticipationEnum} participation
 */
InlineResponse20050DataComponents.prototype['participation'] = undefined;

/**
 * Absolute number of shares of the component contained in the composite instrument.  The absolute number of shares can be subject to change due to corporate actions or active management of the composite instrument (see attribute `activeManagement`). If the component is an index, the number of shares is a factor which applies to the level of the index.
 * @member {Number} numberShares
 */
InlineResponse20050DataComponents.prototype['numberShares'] = undefined;

/**
 * Weighting of the component, valid only at initial fixing   (see attribute `initialFixing` in endpoint `/securitizedDerivative/get`). 
 * @member {Number} initialWeight
 */
InlineResponse20050DataComponents.prototype['initialWeight'] = undefined;

/**
 * Level of the component on the issue date of the derivative product.  For the value unit, see attribute `valueUnit`.
 * @member {Number} referenceLevel
 */
InlineResponse20050DataComponents.prototype['referenceLevel'] = undefined;

/**
 * For a leveraged component, e.g. a component of a factor index, day-to-day leverage factor of the component's performance.
 * @member {Number} constantLeverage
 */
InlineResponse20050DataComponents.prototype['constantLeverage'] = undefined;





/**
 * Allowed values for the <code>participation</code> property.
 * @enum {String}
 * @readonly
 */
InlineResponse20050DataComponents['ParticipationEnum'] = {

    /**
     * value: "long"
     * @const
     */
    "long": "long",

    /**
     * value: "short"
     * @const
     */
    "short": "short"
};



export default InlineResponse20050DataComponents;

