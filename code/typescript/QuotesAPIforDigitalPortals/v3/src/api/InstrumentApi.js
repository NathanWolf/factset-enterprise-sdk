/**
 * Quotes API For Digital Portals
 * The Quotes API combines endpoints for retrieving security end-of-day, delayed, and realtime prices with performance key figures and basic reference data on the security and market level.  The API supports over 20 different price types for each quote and comes with basic search endpoints based on security identifiers and instrument names. Market coverage is included in the *Sample Use Cases* section below.  The Digital Portal use case is focused on high-performance applications that are  * serving millions of end-users, * accessible by client browsers via the internet, * supporting subscriptions for streamed updates out-of-the-box, * typically combining a wide variety of *for Digital Portals*-APIs into a highly use-case specific solution for customers, * integrated into complex infrastructures such as existing frontend frameworks, authentication services.  All APIs labelled *for Digital Portals* have been designed for direct use by client web applications and feature extreme low latency: The average response time across all endpoints is 30 ms whereas 99% of all requests are answered in close to under 300ms.  See the [Time Series API for Digital Portals](https://developer.factset.com/api-catalog/time-series-api-digital-portals) for direct access to price histories, and the [News API for Digital Portals](https://developer.factset.com/api-catalog/news-api-digital-portals) for searching and fetching related news. 
 *
 * The version of the OpenAPI document: 2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import InlineResponse20042 from '../model/InlineResponse20042';
import InlineResponse20043 from '../model/InlineResponse20043';
import InlineResponse20044 from '../model/InlineResponse20044';
import InlineResponse20045 from '../model/InlineResponse20045';
import InlineResponse20046 from '../model/InlineResponse20046';
import InlineResponse20047 from '../model/InlineResponse20047';
import InlineResponse20048 from '../model/InlineResponse20048';
import InlineResponse20049 from '../model/InlineResponse20049';
import InlineResponse20050 from '../model/InlineResponse20050';
import InlineResponse20051 from '../model/InlineResponse20051';
import InlineResponse20052 from '../model/InlineResponse20052';
import InlineResponse20053 from '../model/InlineResponse20053';
import InlineResponse20054 from '../model/InlineResponse20054';
import InlineResponse20055 from '../model/InlineResponse20055';
import InlineResponse20056 from '../model/InlineResponse20056';
import InlineResponse20057 from '../model/InlineResponse20057';
import InlineResponse20058 from '../model/InlineResponse20058';
import InlineResponse20059 from '../model/InlineResponse20059';
import InlineResponse20060 from '../model/InlineResponse20060';
import InlineResponse20061 from '../model/InlineResponse20061';
import InlineResponse20062 from '../model/InlineResponse20062';
import InlineResponse20063 from '../model/InlineResponse20063';
import InlineResponse20064 from '../model/InlineResponse20064';
import InlineResponse20090 from '../model/InlineResponse20090';
import PostInstrumentBackgroundTextTypeListRequest from '../model/PostInstrumentBackgroundTextTypeListRequest';
import PostInstrumentBenchmarkListRequest from '../model/PostInstrumentBenchmarkListRequest';
import PostInstrumentCategoryListRequest from '../model/PostInstrumentCategoryListRequest';
import PostInstrumentCompliancePropertyListRequest from '../model/PostInstrumentCompliancePropertyListRequest';
import PostInstrumentCrossReferenceListByISINRequest from '../model/PostInstrumentCrossReferenceListByISINRequest';
import PostInstrumentCrossReferenceListByWKNRequest from '../model/PostInstrumentCrossReferenceListByWKNRequest';
import PostInstrumentNotationListRequest from '../model/PostInstrumentNotationListRequest';
import PostInstrumentRatingGradeListRequest from '../model/PostInstrumentRatingGradeListRequest';

/**
* Instrument service.
* @module api/InstrumentApi
*/
export default class InstrumentApi {

    /**
    * Constructs a new InstrumentApi. 
    * @alias module:api/InstrumentApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * Background texts of an instrument.
     * Background texts of an instrument.
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.attributes Limit the attributes returned in the response to the specified set.
     * @param {String} opts.language 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse20044} and HTTP response
     */
    getInstrumentBackgroundTextListByInstrumentWithHttpInfo(id, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getInstrumentBackgroundTextListByInstrument");
      }

      let pathParams = {
      };
      let queryParams = {
        'id': id,
        '_attributes': this.apiClient.buildCollectionParam(opts['attributes'], 'csv'),
        '_language': opts['language']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];


      let returnType = InlineResponse20044;

      return this.apiClient.callApi(
        '/instrument/backgroundText/listByInstrument', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Background texts of an instrument.
     * Background texts of an instrument.
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.attributes Limit the attributes returned in the response to the specified set.
     * @param {String} opts.language 
     * @return { Promise.< module:model/InlineResponse20044 > } a Promise, with data of type {@link module:model/InlineResponse20044 }
     */
    getInstrumentBackgroundTextListByInstrument(id, opts) {
      return this.getInstrumentBackgroundTextListByInstrumentWithHttpInfo(id, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Compliance properties of an instrument.
     * Compliance properties of an instrument.
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.attributes Limit the attributes returned in the response to the specified set.
     * @param {String} opts.language 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse20049} and HTTP response
     */
    getInstrumentCompliancePropertyListByInstrumentWithHttpInfo(id, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getInstrumentCompliancePropertyListByInstrument");
      }

      let pathParams = {
      };
      let queryParams = {
        'id': id,
        '_attributes': this.apiClient.buildCollectionParam(opts['attributes'], 'csv'),
        '_language': opts['language']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];


      let returnType = InlineResponse20049;

      return this.apiClient.callApi(
        '/instrument/complianceProperty/listByInstrument', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Compliance properties of an instrument.
     * Compliance properties of an instrument.
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.attributes Limit the attributes returned in the response to the specified set.
     * @param {String} opts.language 
     * @return { Promise.< module:model/InlineResponse20049 > } a Promise, with data of type {@link module:model/InlineResponse20049 }
     */
    getInstrumentCompliancePropertyListByInstrument(id, opts) {
      return this.getInstrumentCompliancePropertyListByInstrumentWithHttpInfo(id, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Composite instrument and its components.
     * Composite instrument and its components.
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.attributes Limit the attributes returned in the response to the specified set.
     * @param {String} opts.language 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse20050} and HTTP response
     */
    getInstrumentCompositeGetWithHttpInfo(id, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getInstrumentCompositeGet");
      }

      let pathParams = {
      };
      let queryParams = {
        'id': id,
        '_attributes': this.apiClient.buildCollectionParam(opts['attributes'], 'csv'),
        '_language': opts['language']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];


      let returnType = InlineResponse20050;

      return this.apiClient.callApi(
        '/instrument/composite/get', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Composite instrument and its components.
     * Composite instrument and its components.
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.attributes Limit the attributes returned in the response to the specified set.
     * @param {String} opts.language 
     * @return { Promise.< module:model/InlineResponse20050 > } a Promise, with data of type {@link module:model/InlineResponse20050 }
     */
    getInstrumentCompositeGet(id, opts) {
      return this.getInstrumentCompositeGetWithHttpInfo(id, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List of day count convention types.
     * List of day count convention types.
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.attributes Limit the attributes returned in the response to the specified set.
     * @param {String} opts.language 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse20052} and HTTP response
     */
    getInstrumentCouponDayCountConventionTypeListWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        '_attributes': this.apiClient.buildCollectionParam(opts['attributes'], 'csv'),
        '_language': opts['language']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];


      let returnType = InlineResponse20052;

      return this.apiClient.callApi(
        '/instrument/coupon/dayCountConvention/type/list', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * List of day count convention types.
     * List of day count convention types.
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.attributes Limit the attributes returned in the response to the specified set.
     * @param {String} opts.language 
     * @return { Promise.< module:model/InlineResponse20052 > } a Promise, with data of type {@link module:model/InlineResponse20052 }
     */
    getInstrumentCouponDayCountConventionTypeList(opts) {
      return this.getInstrumentCouponDayCountConventionTypeListWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List of interest rate types.
     * List of interest rate types.
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.attributes Limit the attributes returned in the response to the specified set.
     * @param {String} opts.language 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse20053} and HTTP response
     */
    getInstrumentCouponInterestRateTypeListWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        '_attributes': this.apiClient.buildCollectionParam(opts['attributes'], 'csv'),
        '_language': opts['language']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];


      let returnType = InlineResponse20053;

      return this.apiClient.callApi(
        '/instrument/coupon/interestRate/type/list', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * List of interest rate types.
     * List of interest rate types.
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.attributes Limit the attributes returned in the response to the specified set.
     * @param {String} opts.language 
     * @return { Promise.< module:model/InlineResponse20053 > } a Promise, with data of type {@link module:model/InlineResponse20053 }
     */
    getInstrumentCouponInterestRateTypeList(opts) {
      return this.getInstrumentCouponInterestRateTypeListWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Interest rate details for selected periods of an interest-bearing instrument.
     * Interest rate details for selected periods of an interest-bearing instrument; any other instrument yields empty values.
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.attributes Limit the attributes returned in the response to the specified set.
     * @param {String} opts.language 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse20054} and HTTP response
     */
    getInstrumentCouponKeyDataGetWithHttpInfo(id, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getInstrumentCouponKeyDataGet");
      }

      let pathParams = {
      };
      let queryParams = {
        'id': id,
        '_attributes': this.apiClient.buildCollectionParam(opts['attributes'], 'csv'),
        '_language': opts['language']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];


      let returnType = InlineResponse20054;

      return this.apiClient.callApi(
        '/instrument/coupon/keyData/get', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Interest rate details for selected periods of an interest-bearing instrument.
     * Interest rate details for selected periods of an interest-bearing instrument; any other instrument yields empty values.
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.attributes Limit the attributes returned in the response to the specified set.
     * @param {String} opts.language 
     * @return { Promise.< module:model/InlineResponse20054 > } a Promise, with data of type {@link module:model/InlineResponse20054 }
     */
    getInstrumentCouponKeyDataGet(id, opts) {
      return this.getInstrumentCouponKeyDataGetWithHttpInfo(id, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List of coupons for an interest-bearing instrument.
     * List of coupons for an interest-bearing instrument; any other instrument yields empty values. The endpoint provides details regarding the coupon period, the respective interest rate, and payable amount (the latter only for instruments with a fixed nominal value). The list of coupons is generally not available for a perpetual, i.e. without a predefined maturity date, interst-bearing instrument.   If there is no entitled provider supplying a full list of coupons, the list will be synthesized from summary data available from entitled suppliers (if any). Since the exact product terms are not known, e.g. the handling of holidays and weekends, the list may be imprecise.
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.attributes Limit the attributes returned in the response to the specified set.
     * @param {String} opts.language 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse20051} and HTTP response
     */
    getInstrumentCouponListWithHttpInfo(id, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getInstrumentCouponList");
      }

      let pathParams = {
      };
      let queryParams = {
        'id': id,
        '_attributes': this.apiClient.buildCollectionParam(opts['attributes'], 'csv'),
        '_language': opts['language']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];


      let returnType = InlineResponse20051;

      return this.apiClient.callApi(
        '/instrument/coupon/list', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * List of coupons for an interest-bearing instrument.
     * List of coupons for an interest-bearing instrument; any other instrument yields empty values. The endpoint provides details regarding the coupon period, the respective interest rate, and payable amount (the latter only for instruments with a fixed nominal value). The list of coupons is generally not available for a perpetual, i.e. without a predefined maturity date, interst-bearing instrument.   If there is no entitled provider supplying a full list of coupons, the list will be synthesized from summary data available from entitled suppliers (if any). Since the exact product terms are not known, e.g. the handling of holidays and weekends, the list may be imprecise.
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.attributes Limit the attributes returned in the response to the specified set.
     * @param {String} opts.language 
     * @return { Promise.< module:model/InlineResponse20051 > } a Promise, with data of type {@link module:model/InlineResponse20051 }
     */
    getInstrumentCouponList(id, opts) {
      return this.getInstrumentCouponListWithHttpInfo(id, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Translate ISIN to instrument.
     * Translate a given ISIN to the respective most recent instrument identifier, retrieved from the Cross Reference Service.
     * @param {String} isin 
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.attributes Limit the attributes returned in the response to the specified set.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse20055} and HTTP response
     */
    getInstrumentCrossReferenceGetByISINWithHttpInfo(isin, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'isin' is set
      if (isin === undefined || isin === null) {
        throw new Error("Missing the required parameter 'isin' when calling getInstrumentCrossReferenceGetByISIN");
      }

      let pathParams = {
      };
      let queryParams = {
        'isin': isin,
        '_attributes': this.apiClient.buildCollectionParam(opts['attributes'], 'csv')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];


      let returnType = InlineResponse20055;

      return this.apiClient.callApi(
        '/instrument/crossReference/getByISIN', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Translate ISIN to instrument.
     * Translate a given ISIN to the respective most recent instrument identifier, retrieved from the Cross Reference Service.
     * @param {String} isin 
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.attributes Limit the attributes returned in the response to the specified set.
     * @return { Promise.< module:model/InlineResponse20055 > } a Promise, with data of type {@link module:model/InlineResponse20055 }
     */
    getInstrumentCrossReferenceGetByISIN(isin, opts) {
      return this.getInstrumentCrossReferenceGetByISINWithHttpInfo(isin, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Translate WKN to instrument.
     * Translate a given WKN to the respective most recent instrument identifier, retrieved from the Cross Reference Service.
     * @param {String} wkn 
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.attributes Limit the attributes returned in the response to the specified set.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse20055} and HTTP response
     */
    getInstrumentCrossReferenceGetByWKNWithHttpInfo(wkn, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'wkn' is set
      if (wkn === undefined || wkn === null) {
        throw new Error("Missing the required parameter 'wkn' when calling getInstrumentCrossReferenceGetByWKN");
      }

      let pathParams = {
      };
      let queryParams = {
        'wkn': wkn,
        '_attributes': this.apiClient.buildCollectionParam(opts['attributes'], 'csv')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];


      let returnType = InlineResponse20055;

      return this.apiClient.callApi(
        '/instrument/crossReference/getByWKN', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Translate WKN to instrument.
     * Translate a given WKN to the respective most recent instrument identifier, retrieved from the Cross Reference Service.
     * @param {String} wkn 
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.attributes Limit the attributes returned in the response to the specified set.
     * @return { Promise.< module:model/InlineResponse20055 > } a Promise, with data of type {@link module:model/InlineResponse20055 }
     */
    getInstrumentCrossReferenceGetByWKN(wkn, opts) {
      return this.getInstrumentCrossReferenceGetByWKNWithHttpInfo(wkn, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * ISIN to instrument translation history.
     * Retrieve the complete translation history of a given ISIN to the respective instrument association from the Cross Reference Service. The results are sorted in descending order, starting with the most recent.
     * @param {String} isin 
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.attributes Limit the attributes returned in the response to the specified set.
     * @param {Number} opts.paginationOffset Non-negative number of entries to skip, or 0 (default). (default to 0)
     * @param {Number} opts.paginationLimit Non-negative maximum number of entries to return. (default to 10)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse20058} and HTTP response
     */
    getInstrumentCrossReferenceHistoryGetByISINWithHttpInfo(isin, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'isin' is set
      if (isin === undefined || isin === null) {
        throw new Error("Missing the required parameter 'isin' when calling getInstrumentCrossReferenceHistoryGetByISIN");
      }

      let pathParams = {
      };
      let queryParams = {
        'isin': isin,
        '_attributes': this.apiClient.buildCollectionParam(opts['attributes'], 'csv'),
        '_paginationOffset': opts['paginationOffset'],
        '_paginationLimit': opts['paginationLimit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];


      let returnType = InlineResponse20058;

      return this.apiClient.callApi(
        '/instrument/crossReference/history/getByISIN', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * ISIN to instrument translation history.
     * Retrieve the complete translation history of a given ISIN to the respective instrument association from the Cross Reference Service. The results are sorted in descending order, starting with the most recent.
     * @param {String} isin 
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.attributes Limit the attributes returned in the response to the specified set.
     * @param {Number} opts.paginationOffset Non-negative number of entries to skip, or 0 (default). (default to 0)
     * @param {Number} opts.paginationLimit Non-negative maximum number of entries to return. (default to 10)
     * @return { Promise.< module:model/InlineResponse20058 > } a Promise, with data of type {@link module:model/InlineResponse20058 }
     */
    getInstrumentCrossReferenceHistoryGetByISIN(isin, opts) {
      return this.getInstrumentCrossReferenceHistoryGetByISINWithHttpInfo(isin, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * WKN to instrument translation history.
     * Retrieve the complete translation history of a given WKN to the respective instrument association from the Cross Reference Service. The results are sorted in descending order, starting with the most recent.
     * @param {String} wkn 
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.attributes Limit the attributes returned in the response to the specified set.
     * @param {Number} opts.paginationOffset Non-negative number of entries to skip, or 0 (default). (default to 0)
     * @param {Number} opts.paginationLimit Non-negative maximum number of entries to return. (default to 10)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse20058} and HTTP response
     */
    getInstrumentCrossReferenceHistoryGetByWKNWithHttpInfo(wkn, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'wkn' is set
      if (wkn === undefined || wkn === null) {
        throw new Error("Missing the required parameter 'wkn' when calling getInstrumentCrossReferenceHistoryGetByWKN");
      }

      let pathParams = {
      };
      let queryParams = {
        'wkn': wkn,
        '_attributes': this.apiClient.buildCollectionParam(opts['attributes'], 'csv'),
        '_paginationOffset': opts['paginationOffset'],
        '_paginationLimit': opts['paginationLimit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];


      let returnType = InlineResponse20058;

      return this.apiClient.callApi(
        '/instrument/crossReference/history/getByWKN', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * WKN to instrument translation history.
     * Retrieve the complete translation history of a given WKN to the respective instrument association from the Cross Reference Service. The results are sorted in descending order, starting with the most recent.
     * @param {String} wkn 
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.attributes Limit the attributes returned in the response to the specified set.
     * @param {Number} opts.paginationOffset Non-negative number of entries to skip, or 0 (default). (default to 0)
     * @param {Number} opts.paginationLimit Non-negative maximum number of entries to return. (default to 10)
     * @return { Promise.< module:model/InlineResponse20058 > } a Promise, with data of type {@link module:model/InlineResponse20058 }
     */
    getInstrumentCrossReferenceHistoryGetByWKN(wkn, opts) {
      return this.getInstrumentCrossReferenceHistoryGetByWKNWithHttpInfo(wkn, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Retrieve an exchange rate instrument identifier.
     * Retrieve an exchange rate instrument identifier using the identifier of the main currencies represented by that exchange rate.    An error is returned if one of the provided parameters is invalid or if no instrument is associated with the given combination of parameters.
     * @param {Number} target 
     * @param {Number} source 
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.attributes Limit the attributes returned in the response to the specified set.
     * @param {String} opts.language 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse20059} and HTTP response
     */
    getInstrumentExchangeRateGetWithHttpInfo(target, source, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'target' is set
      if (target === undefined || target === null) {
        throw new Error("Missing the required parameter 'target' when calling getInstrumentExchangeRateGet");
      }
      // verify the required parameter 'source' is set
      if (source === undefined || source === null) {
        throw new Error("Missing the required parameter 'source' when calling getInstrumentExchangeRateGet");
      }

      let pathParams = {
      };
      let queryParams = {
        'target': target,
        'source': source,
        '_attributes': this.apiClient.buildCollectionParam(opts['attributes'], 'csv'),
        '_language': opts['language']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];


      let returnType = InlineResponse20059;

      return this.apiClient.callApi(
        '/instrument/exchangeRate/get', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Retrieve an exchange rate instrument identifier.
     * Retrieve an exchange rate instrument identifier using the identifier of the main currencies represented by that exchange rate.    An error is returned if one of the provided parameters is invalid or if no instrument is associated with the given combination of parameters.
     * @param {Number} target 
     * @param {Number} source 
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.attributes Limit the attributes returned in the response to the specified set.
     * @param {String} opts.language 
     * @return { Promise.< module:model/InlineResponse20059 > } a Promise, with data of type {@link module:model/InlineResponse20059 }
     */
    getInstrumentExchangeRateGet(target, source, opts) {
      return this.getInstrumentExchangeRateGetWithHttpInfo(target, source, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Retrieve an exchange rate instrument identifier.
     * Retrieve an exchange rate instrument identifier using the ISO 4217 code of the main currencies represented by that exchange rate.   An error is returned if one of the provided parameters is invalid or if no instrument is associated with the given combination of parameters.
     * @param {String} target 
     * @param {String} source 
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.attributes Limit the attributes returned in the response to the specified set.
     * @param {String} opts.language 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse20059} and HTTP response
     */
    getInstrumentExchangeRateGetByISOCodeWithHttpInfo(target, source, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'target' is set
      if (target === undefined || target === null) {
        throw new Error("Missing the required parameter 'target' when calling getInstrumentExchangeRateGetByISOCode");
      }
      // verify the required parameter 'source' is set
      if (source === undefined || source === null) {
        throw new Error("Missing the required parameter 'source' when calling getInstrumentExchangeRateGetByISOCode");
      }

      let pathParams = {
      };
      let queryParams = {
        'target': target,
        'source': source,
        '_attributes': this.apiClient.buildCollectionParam(opts['attributes'], 'csv'),
        '_language': opts['language']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];


      let returnType = InlineResponse20059;

      return this.apiClient.callApi(
        '/instrument/exchangeRate/getByISOCode', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Retrieve an exchange rate instrument identifier.
     * Retrieve an exchange rate instrument identifier using the ISO 4217 code of the main currencies represented by that exchange rate.   An error is returned if one of the provided parameters is invalid or if no instrument is associated with the given combination of parameters.
     * @param {String} target 
     * @param {String} source 
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.attributes Limit the attributes returned in the response to the specified set.
     * @param {String} opts.language 
     * @return { Promise.< module:model/InlineResponse20059 > } a Promise, with data of type {@link module:model/InlineResponse20059 }
     */
    getInstrumentExchangeRateGetByISOCode(target, source, opts) {
      return this.getInstrumentExchangeRateGetByISOCodeWithHttpInfo(target, source, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Basic data for an instrument.
     * Basic data for an instrument.
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.attributes Limit the attributes returned in the response to the specified set.
     * @param {String} opts.language 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse20042} and HTTP response
     */
    getInstrumentGetWithHttpInfo(id, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getInstrumentGet");
      }

      let pathParams = {
      };
      let queryParams = {
        'id': id,
        '_attributes': this.apiClient.buildCollectionParam(opts['attributes'], 'csv'),
        '_language': opts['language']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];


      let returnType = InlineResponse20042;

      return this.apiClient.callApi(
        '/instrument/get', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Basic data for an instrument.
     * Basic data for an instrument.
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.attributes Limit the attributes returned in the response to the specified set.
     * @param {String} opts.language 
     * @return { Promise.< module:model/InlineResponse20042 > } a Promise, with data of type {@link module:model/InlineResponse20042 }
     */
    getInstrumentGet(id, opts) {
      return this.getInstrumentGetWithHttpInfo(id, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Basic data for an instrument.
     * Basic data for an instrument.
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.attributes Limit the attributes returned in the response to the specified set.
     * @param {String} opts.language 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse20043} and HTTP response
     */
    getInstrumentGetByNotationWithHttpInfo(id, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getInstrumentGetByNotation");
      }

      let pathParams = {
      };
      let queryParams = {
        'id': id,
        '_attributes': this.apiClient.buildCollectionParam(opts['attributes'], 'csv'),
        '_language': opts['language']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];


      let returnType = InlineResponse20043;

      return this.apiClient.callApi(
        '/instrument/getByNotation', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Basic data for an instrument.
     * Basic data for an instrument.
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.attributes Limit the attributes returned in the response to the specified set.
     * @param {String} opts.language 
     * @return { Promise.< module:model/InlineResponse20043 > } a Promise, with data of type {@link module:model/InlineResponse20043 }
     */
    getInstrumentGetByNotation(id, opts) {
      return this.getInstrumentGetByNotationWithHttpInfo(id, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Role-specific background texts of legal entities related to an instrument.
     * Role-specific background texts of legal entities related to an instrument.
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.attributes Limit the attributes returned in the response to the specified set.
     * @param {String} opts.language 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse20060} and HTTP response
     */
    getInstrumentLegalEntityBackgroundTextListByInstrumentWithHttpInfo(id, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getInstrumentLegalEntityBackgroundTextListByInstrument");
      }

      let pathParams = {
      };
      let queryParams = {
        'id': id,
        '_attributes': this.apiClient.buildCollectionParam(opts['attributes'], 'csv'),
        '_language': opts['language']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];


      let returnType = InlineResponse20060;

      return this.apiClient.callApi(
        '/instrument/legalEntity/backgroundText/listByInstrument', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Role-specific background texts of legal entities related to an instrument.
     * Role-specific background texts of legal entities related to an instrument.
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.attributes Limit the attributes returned in the response to the specified set.
     * @param {String} opts.language 
     * @return { Promise.< module:model/InlineResponse20060 > } a Promise, with data of type {@link module:model/InlineResponse20060 }
     */
    getInstrumentLegalEntityBackgroundTextListByInstrument(id, opts) {
      return this.getInstrumentLegalEntityBackgroundTextListByInstrumentWithHttpInfo(id, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Role-specific compliance properties of legal entities related to an instrument.
     * Role-specic compliance properties of legal entities related to an instrument.
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.attributes Limit the attributes returned in the response to the specified set.
     * @param {String} opts.language 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse20061} and HTTP response
     */
    getInstrumentLegalEntityCompliancePropertyListByInstrumentWithHttpInfo(id, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getInstrumentLegalEntityCompliancePropertyListByInstrument");
      }

      let pathParams = {
      };
      let queryParams = {
        'id': id,
        '_attributes': this.apiClient.buildCollectionParam(opts['attributes'], 'csv'),
        '_language': opts['language']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];


      let returnType = InlineResponse20061;

      return this.apiClient.callApi(
        '/instrument/legalEntity/complianceProperty/listByInstrument', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Role-specific compliance properties of legal entities related to an instrument.
     * Role-specic compliance properties of legal entities related to an instrument.
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.attributes Limit the attributes returned in the response to the specified set.
     * @param {String} opts.language 
     * @return { Promise.< module:model/InlineResponse20061 > } a Promise, with data of type {@link module:model/InlineResponse20061 }
     */
    getInstrumentLegalEntityCompliancePropertyListByInstrument(id, opts) {
      return this.getInstrumentLegalEntityCompliancePropertyListByInstrumentWithHttpInfo(id, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * MiFID II data for a financial instrument.
     * MiFID II data for a specified financial instrument. The instruments governed by MiFID II are called \"investment products\".
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.attributes Limit the attributes returned in the response to the specified set.
     * @param {String} opts.language 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse20062} and HTTP response
     */
    getInstrumentMifidGetWithHttpInfo(id, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getInstrumentMifidGet");
      }

      let pathParams = {
      };
      let queryParams = {
        'id': id,
        '_attributes': this.apiClient.buildCollectionParam(opts['attributes'], 'csv'),
        '_language': opts['language']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];


      let returnType = InlineResponse20062;

      return this.apiClient.callApi(
        '/instrument/mifid/get', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * MiFID II data for a financial instrument.
     * MiFID II data for a specified financial instrument. The instruments governed by MiFID II are called \"investment products\".
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.attributes Limit the attributes returned in the response to the specified set.
     * @param {String} opts.language 
     * @return { Promise.< module:model/InlineResponse20062 > } a Promise, with data of type {@link module:model/InlineResponse20062 }
     */
    getInstrumentMifidGet(id, opts) {
      return this.getInstrumentMifidGetWithHttpInfo(id, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Basic search for instruments.
     * Search for instruments whose ISIN, specified NSINs, or name match the search value according to a tolerant full-text match algorithm. Better matching results appear in the response before less relevant matches.
     * @param {String} searchValue 
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/String>} opts.nsins 
     * @param {module:model/String} opts.assetClass 
     * @param {Boolean} opts.onlyActive  (default to true)
     * @param {Array.<String>} opts.attributes Limit the attributes returned in the response to the specified set.
     * @param {String} opts.language 
     * @param {Number} opts.paginationOffset Non-negative number of entries to skip, or 0 (default). (default to 0)
     * @param {Number} opts.paginationLimit Non-negative maximum number of entries to return. (default to 20)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse20090} and HTTP response
     */
    getInstrumentSearchBasicWithHttpInfo(searchValue, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'searchValue' is set
      if (searchValue === undefined || searchValue === null) {
        throw new Error("Missing the required parameter 'searchValue' when calling getInstrumentSearchBasic");
      }

      let pathParams = {
      };
      let queryParams = {
        'searchValue': searchValue,
        'nsins': this.apiClient.buildCollectionParam(opts['nsins'], 'csv'),
        'assetClass': opts['assetClass'],
        'onlyActive': opts['onlyActive'],
        '_attributes': this.apiClient.buildCollectionParam(opts['attributes'], 'csv'),
        '_language': opts['language'],
        '_paginationOffset': opts['paginationOffset'],
        '_paginationLimit': opts['paginationLimit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];


      let returnType = InlineResponse20090;

      return this.apiClient.callApi(
        '/instrument/search/basic', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Basic search for instruments.
     * Search for instruments whose ISIN, specified NSINs, or name match the search value according to a tolerant full-text match algorithm. Better matching results appear in the response before less relevant matches.
     * @param {String} searchValue 
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/String>} opts.nsins 
     * @param {module:model/String} opts.assetClass 
     * @param {Boolean} opts.onlyActive  (default to true)
     * @param {Array.<String>} opts.attributes Limit the attributes returned in the response to the specified set.
     * @param {String} opts.language 
     * @param {Number} opts.paginationOffset Non-negative number of entries to skip, or 0 (default). (default to 0)
     * @param {Number} opts.paginationLimit Non-negative maximum number of entries to return. (default to 20)
     * @return { Promise.< module:model/InlineResponse20090 > } a Promise, with data of type {@link module:model/InlineResponse20090 }
     */
    getInstrumentSearchBasic(searchValue, opts) {
      return this.getInstrumentSearchBasicWithHttpInfo(searchValue, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List of background text types for instruments.
     * List of background text types for instruments.
     * @param {Object} opts Optional parameters
     * @param {module:model/PostInstrumentBackgroundTextTypeListRequest} opts.postInstrumentBackgroundTextTypeListRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse20045} and HTTP response
     */
    postInstrumentBackgroundTextTypeListWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = opts['postInstrumentBackgroundTextTypeListRequest'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];


      let returnType = InlineResponse20045;

      return this.apiClient.callApi(
        '/instrument/backgroundText/type/list', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * List of background text types for instruments.
     * List of background text types for instruments.
     * @param {Object} opts Optional parameters
     * @param {module:model/PostInstrumentBackgroundTextTypeListRequest} opts.postInstrumentBackgroundTextTypeListRequest 
     * @return { Promise.< module:model/InlineResponse20045 > } a Promise, with data of type {@link module:model/InlineResponse20045 }
     */
    postInstrumentBackgroundTextTypeList(opts) {
      return this.postInstrumentBackgroundTextTypeListWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List of benchmarks of a financial instrument.
     * Provides a list of benchmark notations for a selected financial instrument, optionally restricted to specific benchmark types.
     * @param {Object} opts Optional parameters
     * @param {module:model/PostInstrumentBenchmarkListRequest} opts.postInstrumentBenchmarkListRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse20046} and HTTP response
     */
    postInstrumentBenchmarkListWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = opts['postInstrumentBenchmarkListRequest'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];


      let returnType = InlineResponse20046;

      return this.apiClient.callApi(
        '/instrument/benchmark/list', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * List of benchmarks of a financial instrument.
     * Provides a list of benchmark notations for a selected financial instrument, optionally restricted to specific benchmark types.
     * @param {Object} opts Optional parameters
     * @param {module:model/PostInstrumentBenchmarkListRequest} opts.postInstrumentBenchmarkListRequest 
     * @return { Promise.< module:model/InlineResponse20046 > } a Promise, with data of type {@link module:model/InlineResponse20046 }
     */
    postInstrumentBenchmarkList(opts) {
      return this.postInstrumentBenchmarkListWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List of categories assigned to a specific instrument the application is entitled to see.
     * List of categories assigned to a specific instrument the application is entitled to see. Optionally it is possible to restrict the output to only list those for a specific category dataset.
     * @param {Object} opts Optional parameters
     * @param {module:model/PostInstrumentCategoryListRequest} opts.postInstrumentCategoryListRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse20047} and HTTP response
     */
    postInstrumentCategoryListWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = opts['postInstrumentCategoryListRequest'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];


      let returnType = InlineResponse20047;

      return this.apiClient.callApi(
        '/instrument/category/list', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * List of categories assigned to a specific instrument the application is entitled to see.
     * List of categories assigned to a specific instrument the application is entitled to see. Optionally it is possible to restrict the output to only list those for a specific category dataset.
     * @param {Object} opts Optional parameters
     * @param {module:model/PostInstrumentCategoryListRequest} opts.postInstrumentCategoryListRequest 
     * @return { Promise.< module:model/InlineResponse20047 > } a Promise, with data of type {@link module:model/InlineResponse20047 }
     */
    postInstrumentCategoryList(opts) {
      return this.postInstrumentCategoryListWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List of compliance properties for instruments.
     * List of compliance properties for instruments.
     * @param {Object} opts Optional parameters
     * @param {module:model/PostInstrumentCompliancePropertyListRequest} opts.postInstrumentCompliancePropertyListRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse20048} and HTTP response
     */
    postInstrumentCompliancePropertyListWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = opts['postInstrumentCompliancePropertyListRequest'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];


      let returnType = InlineResponse20048;

      return this.apiClient.callApi(
        '/instrument/complianceProperty/list', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * List of compliance properties for instruments.
     * List of compliance properties for instruments.
     * @param {Object} opts Optional parameters
     * @param {module:model/PostInstrumentCompliancePropertyListRequest} opts.postInstrumentCompliancePropertyListRequest 
     * @return { Promise.< module:model/InlineResponse20048 > } a Promise, with data of type {@link module:model/InlineResponse20048 }
     */
    postInstrumentCompliancePropertyList(opts) {
      return this.postInstrumentCompliancePropertyListWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Translate a list of ISINs to instruments.
     * Translate a given list of ISINs to the respective most recent instrument identifiers, retrieved from the Cross Reference Service.
     * @param {Object} opts Optional parameters
     * @param {module:model/PostInstrumentCrossReferenceListByISINRequest} opts.postInstrumentCrossReferenceListByISINRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse20056} and HTTP response
     */
    postInstrumentCrossReferenceListByISINWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = opts['postInstrumentCrossReferenceListByISINRequest'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];


      let returnType = InlineResponse20056;

      return this.apiClient.callApi(
        '/instrument/crossReference/listByISIN', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Translate a list of ISINs to instruments.
     * Translate a given list of ISINs to the respective most recent instrument identifiers, retrieved from the Cross Reference Service.
     * @param {Object} opts Optional parameters
     * @param {module:model/PostInstrumentCrossReferenceListByISINRequest} opts.postInstrumentCrossReferenceListByISINRequest 
     * @return { Promise.< module:model/InlineResponse20056 > } a Promise, with data of type {@link module:model/InlineResponse20056 }
     */
    postInstrumentCrossReferenceListByISIN(opts) {
      return this.postInstrumentCrossReferenceListByISINWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Translate a list of WKNs to instruments.
     * Translate a given list of WKNs to the respective most recent instrument identifiers, retrieved from the Cross Reference Service.
     * @param {Object} opts Optional parameters
     * @param {module:model/PostInstrumentCrossReferenceListByWKNRequest} opts.postInstrumentCrossReferenceListByWKNRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse20057} and HTTP response
     */
    postInstrumentCrossReferenceListByWKNWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = opts['postInstrumentCrossReferenceListByWKNRequest'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];


      let returnType = InlineResponse20057;

      return this.apiClient.callApi(
        '/instrument/crossReference/listByWKN', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Translate a list of WKNs to instruments.
     * Translate a given list of WKNs to the respective most recent instrument identifiers, retrieved from the Cross Reference Service.
     * @param {Object} opts Optional parameters
     * @param {module:model/PostInstrumentCrossReferenceListByWKNRequest} opts.postInstrumentCrossReferenceListByWKNRequest 
     * @return { Promise.< module:model/InlineResponse20057 > } a Promise, with data of type {@link module:model/InlineResponse20057 }
     */
    postInstrumentCrossReferenceListByWKN(opts) {
      return this.postInstrumentCrossReferenceListByWKNWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List of active, entitled notations for a set of instruments.
     * List of active, entitled notations for a set of instruments. By default the list of notations (per instrument) is sorted descending by the trading volume, averaged over one month. All identifiers used as parameters must be valid and entitled.
     * @param {Object} opts Optional parameters
     * @param {module:model/PostInstrumentNotationListRequest} opts.postInstrumentNotationListRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse20063} and HTTP response
     */
    postInstrumentNotationListWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = opts['postInstrumentNotationListRequest'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];


      let returnType = InlineResponse20063;

      return this.apiClient.callApi(
        '/instrument/notation/list', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * List of active, entitled notations for a set of instruments.
     * List of active, entitled notations for a set of instruments. By default the list of notations (per instrument) is sorted descending by the trading volume, averaged over one month. All identifiers used as parameters must be valid and entitled.
     * @param {Object} opts Optional parameters
     * @param {module:model/PostInstrumentNotationListRequest} opts.postInstrumentNotationListRequest 
     * @return { Promise.< module:model/InlineResponse20063 > } a Promise, with data of type {@link module:model/InlineResponse20063 }
     */
    postInstrumentNotationList(opts) {
      return this.postInstrumentNotationListWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List of rating grades for a list of instruments.
     * List of rating grades for a list of instruments. The list can be restricted to rating grades belonging to particular rating systems.
     * @param {Object} opts Optional parameters
     * @param {module:model/PostInstrumentRatingGradeListRequest} opts.postInstrumentRatingGradeListRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse20064} and HTTP response
     */
    postInstrumentRatingGradeListWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = opts['postInstrumentRatingGradeListRequest'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];


      let returnType = InlineResponse20064;

      return this.apiClient.callApi(
        '/instrument/rating/grade/list', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * List of rating grades for a list of instruments.
     * List of rating grades for a list of instruments. The list can be restricted to rating grades belonging to particular rating systems.
     * @param {Object} opts Optional parameters
     * @param {module:model/PostInstrumentRatingGradeListRequest} opts.postInstrumentRatingGradeListRequest 
     * @return { Promise.< module:model/InlineResponse20064 > } a Promise, with data of type {@link module:model/InlineResponse20064 }
     */
    postInstrumentRatingGradeList(opts) {
      return this.postInstrumentRatingGradeListWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}





