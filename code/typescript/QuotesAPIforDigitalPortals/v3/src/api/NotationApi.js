/**
 * Quotes API For Digital Portals
 * The quotes API combines endpoints for retrieving security end-of-day, delayed, and realtime prices with performance key figures and basic reference data on the security and market level.  The API supports over 20 different price types for each quote and comes with basic search endpoints based on security identifiers and instrument names. Market coverage is included in the *Sample Use Cases* section below.  The Digital Portal use case is focused on high-performance applications that are  * serving millions of end-users, * accessible by client browsers via the internet, * supporting subscriptions for streamed updates out-of-the-box, * typically combining a wide variety of *for Digital Portals*-APIs into a highly use-case specific solution for customers, * integrated into complex infrastructures such as existing frontend frameworks, authentication services.  All APIs labelled *for Digital Portals* have been designed for direct use by client web applications and feature extreme low latency: The average response time across all endpoints is 30 ms whereas 99% of all requests are answered in close to under 300ms.  See the Time Series API for Digital Portals for direct access to price histories, and the News API for Digital Portals for searching and fetching related news.
 *
 * The version of the OpenAPI document: 2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import InlineObject16 from '../model/InlineObject16';
import InlineObject17 from '../model/InlineObject17';
import InlineObject18 from '../model/InlineObject18';
import InlineObject19 from '../model/InlineObject19';
import InlineObject20 from '../model/InlineObject20';
import InlineObject22 from '../model/InlineObject22';
import InlineResponse20064 from '../model/InlineResponse20064';
import InlineResponse20065 from '../model/InlineResponse20065';
import InlineResponse20066 from '../model/InlineResponse20066';
import InlineResponse20067 from '../model/InlineResponse20067';
import InlineResponse20068 from '../model/InlineResponse20068';
import InlineResponse20069 from '../model/InlineResponse20069';
import InlineResponse20070 from '../model/InlineResponse20070';
import InlineResponse20071 from '../model/InlineResponse20071';
import InlineResponse20072 from '../model/InlineResponse20072';
import InlineResponse20073 from '../model/InlineResponse20073';
import InlineResponse20074 from '../model/InlineResponse20074';
import InlineResponse20075 from '../model/InlineResponse20075';
import InlineResponse20076 from '../model/InlineResponse20076';
import InlineResponse20077 from '../model/InlineResponse20077';
import InlineResponse20078 from '../model/InlineResponse20078';
import InlineResponse20088 from '../model/InlineResponse20088';
import InlineResponse20089 from '../model/InlineResponse20089';
import InlineResponse20090 from '../model/InlineResponse20090';

/**
* Notation service.
* @module api/NotationApi
*/
export default class NotationApi {

    /**
    * Constructs a new NotationApi. 
    * @alias module:api/NotationApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * Retrieve FactSet identifiers for a given notation.
     * <p>Retrieve FactSet identifiers for a given notation. Security and listing-level identifiers are always included, regional level identifiers are included, if available.
     * @param {String} id Identifier of a notation.
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.attributes Limit the attributes returned in the response to the specified set.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse20069} and HTTP response
     */
    getNotationCrossReferenceFactSetIdentifierGetWithHttpInfo(id, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getNotationCrossReferenceFactSetIdentifierGet");
      }

      let pathParams = {
      };
      let queryParams = {
        'id': id,
        '_attributes': this.apiClient.buildCollectionParam(opts['attributes'], 'csv')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];


      let returnType = InlineResponse20069;

      return this.apiClient.callApi(
        '/notation/crossReference/factSetIdentifier/get', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Retrieve FactSet identifiers for a given notation.
     * <p>Retrieve FactSet identifiers for a given notation. Security and listing-level identifiers are always included, regional level identifiers are included, if available.
     * @param {String} id Identifier of a notation.
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.attributes Limit the attributes returned in the response to the specified set.
     * @return { Promise.< module:model/InlineResponse20069 > } a Promise, with data of type {@link module:model/InlineResponse20069 }
     */
    getNotationCrossReferenceFactSetIdentifierGet(id, opts) {
      return this.getNotationCrossReferenceFactSetIdentifierGetWithHttpInfo(id, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Translate a FactSet market symbol to a notation.
     * Translate a FactSet market symbol to a notation. This symbol is also known as TICKER_EXCHANGE.
     * @param {String} factSetMarketSymbol Market symbol defined by FactSet to identify a notation (i.e. TICKER_EXCHANGE).
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.attributes Limit the attributes returned in the response to the specified set.
     * @param {String} opts.language ISO 639-1 code of the language.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse20066} and HTTP response
     */
    getNotationCrossReferenceGetByFactSetMarketSymbolWithHttpInfo(factSetMarketSymbol, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'factSetMarketSymbol' is set
      if (factSetMarketSymbol === undefined || factSetMarketSymbol === null) {
        throw new Error("Missing the required parameter 'factSetMarketSymbol' when calling getNotationCrossReferenceGetByFactSetMarketSymbol");
      }

      let pathParams = {
      };
      let queryParams = {
        'factSetMarketSymbol': factSetMarketSymbol,
        '_attributes': this.apiClient.buildCollectionParam(opts['attributes'], 'csv'),
        '_language': opts['language']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];


      let returnType = InlineResponse20066;

      return this.apiClient.callApi(
        '/notation/crossReference/getByFactSetMarketSymbol', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Translate a FactSet market symbol to a notation.
     * Translate a FactSet market symbol to a notation. This symbol is also known as TICKER_EXCHANGE.
     * @param {String} factSetMarketSymbol Market symbol defined by FactSet to identify a notation (i.e. TICKER_EXCHANGE).
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.attributes Limit the attributes returned in the response to the specified set.
     * @param {String} opts.language ISO 639-1 code of the language.
     * @return { Promise.< module:model/InlineResponse20066 > } a Promise, with data of type {@link module:model/InlineResponse20066 }
     */
    getNotationCrossReferenceGetByFactSetMarketSymbol(factSetMarketSymbol, opts) {
      return this.getNotationCrossReferenceGetByFactSetMarketSymbolWithHttpInfo(factSetMarketSymbol, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Basic data for a notation.
     * Basic data for a notation.
     * @param {String} id Identifier of a notation.
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.attributes Limit the attributes returned in the response to the specified set.
     * @param {String} opts.language ISO 639-1 code of the language.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse20064} and HTTP response
     */
    getNotationGetWithHttpInfo(id, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getNotationGet");
      }

      let pathParams = {
      };
      let queryParams = {
        'id': id,
        '_attributes': this.apiClient.buildCollectionParam(opts['attributes'], 'csv'),
        '_language': opts['language']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];


      let returnType = InlineResponse20064;

      return this.apiClient.callApi(
        '/notation/get', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Basic data for a notation.
     * Basic data for a notation.
     * @param {String} id Identifier of a notation.
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.attributes Limit the attributes returned in the response to the specified set.
     * @param {String} opts.language ISO 639-1 code of the language.
     * @return { Promise.< module:model/InlineResponse20064 > } a Promise, with data of type {@link module:model/InlineResponse20064 }
     */
    getNotationGet(id, opts) {
      return this.getNotationGetWithHttpInfo(id, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * End-of-day (EOD) key figures for the time range of one month.
     * End-of-day (EOD) key figures for the time range of one month.
     * @param {String} id Identifier of the notation.
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.attributes Limit the attributes returned in the response to the specified set.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse20072} and HTTP response
     */
    getNotationKeyFiguresMonth1GetWithHttpInfo(id, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getNotationKeyFiguresMonth1Get");
      }

      let pathParams = {
      };
      let queryParams = {
        'id': id,
        '_attributes': this.apiClient.buildCollectionParam(opts['attributes'], 'csv')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];


      let returnType = InlineResponse20072;

      return this.apiClient.callApi(
        '/notation/keyFigures/month/1/get', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * End-of-day (EOD) key figures for the time range of one month.
     * End-of-day (EOD) key figures for the time range of one month.
     * @param {String} id Identifier of the notation.
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.attributes Limit the attributes returned in the response to the specified set.
     * @return { Promise.< module:model/InlineResponse20072 > } a Promise, with data of type {@link module:model/InlineResponse20072 }
     */
    getNotationKeyFiguresMonth1Get(id, opts) {
      return this.getNotationKeyFiguresMonth1GetWithHttpInfo(id, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * End-of-day (EOD) key figures for the time range of one month, for a list of notations.
     * End-of-day (EOD) key figures for the time range of one month, for a list of notations.
     * @param {Array.<String>} ids List of notations.
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.attributes Limit the attributes returned in the response to the specified set.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse20073} and HTTP response
     */
    getNotationKeyFiguresMonth1ListWithHttpInfo(ids, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'ids' is set
      if (ids === undefined || ids === null) {
        throw new Error("Missing the required parameter 'ids' when calling getNotationKeyFiguresMonth1List");
      }

      let pathParams = {
      };
      let queryParams = {
        'ids': this.apiClient.buildCollectionParam(ids, 'csv'),
        '_attributes': this.apiClient.buildCollectionParam(opts['attributes'], 'csv')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];


      let returnType = InlineResponse20073;

      return this.apiClient.callApi(
        '/notation/keyFigures/month/1/list', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * End-of-day (EOD) key figures for the time range of one month, for a list of notations.
     * End-of-day (EOD) key figures for the time range of one month, for a list of notations.
     * @param {Array.<String>} ids List of notations.
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.attributes Limit the attributes returned in the response to the specified set.
     * @return { Promise.< module:model/InlineResponse20073 > } a Promise, with data of type {@link module:model/InlineResponse20073 }
     */
    getNotationKeyFiguresMonth1List(ids, opts) {
      return this.getNotationKeyFiguresMonth1ListWithHttpInfo(ids, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * End-of-day (EOD) key figures for the time range of three months.
     * End-of-day (EOD) key figures for the time range of three months.
     * @param {String} id Identifier of the notation.
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.attributes Limit the attributes returned in the response to the specified set.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse20074} and HTTP response
     */
    getNotationKeyFiguresMonth3GetWithHttpInfo(id, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getNotationKeyFiguresMonth3Get");
      }

      let pathParams = {
      };
      let queryParams = {
        'id': id,
        '_attributes': this.apiClient.buildCollectionParam(opts['attributes'], 'csv')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];


      let returnType = InlineResponse20074;

      return this.apiClient.callApi(
        '/notation/keyFigures/month/3/get', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * End-of-day (EOD) key figures for the time range of three months.
     * End-of-day (EOD) key figures for the time range of three months.
     * @param {String} id Identifier of the notation.
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.attributes Limit the attributes returned in the response to the specified set.
     * @return { Promise.< module:model/InlineResponse20074 > } a Promise, with data of type {@link module:model/InlineResponse20074 }
     */
    getNotationKeyFiguresMonth3Get(id, opts) {
      return this.getNotationKeyFiguresMonth3GetWithHttpInfo(id, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * End-of-day (EOD) key figures for the time range of three months, for a list of notations.
     * End-of-day (EOD) key figures for the time range of three months, for a list of notations.
     * @param {Array.<String>} ids List of notations.
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.attributes Limit the attributes returned in the response to the specified set.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse20075} and HTTP response
     */
    getNotationKeyFiguresMonth3ListWithHttpInfo(ids, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'ids' is set
      if (ids === undefined || ids === null) {
        throw new Error("Missing the required parameter 'ids' when calling getNotationKeyFiguresMonth3List");
      }

      let pathParams = {
      };
      let queryParams = {
        'ids': this.apiClient.buildCollectionParam(ids, 'csv'),
        '_attributes': this.apiClient.buildCollectionParam(opts['attributes'], 'csv')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];


      let returnType = InlineResponse20075;

      return this.apiClient.callApi(
        '/notation/keyFigures/month/3/list', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * End-of-day (EOD) key figures for the time range of three months, for a list of notations.
     * End-of-day (EOD) key figures for the time range of three months, for a list of notations.
     * @param {Array.<String>} ids List of notations.
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.attributes Limit the attributes returned in the response to the specified set.
     * @return { Promise.< module:model/InlineResponse20075 > } a Promise, with data of type {@link module:model/InlineResponse20075 }
     */
    getNotationKeyFiguresMonth3List(ids, opts) {
      return this.getNotationKeyFiguresMonth3ListWithHttpInfo(ids, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * End-of-day (EOD) key figures for the time range of six months.
     * End-of-day (EOD) key figures for the time range of six months.
     * @param {String} id Identifier of the notation.
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.attributes Limit the attributes returned in the response to the specified set.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse20074} and HTTP response
     */
    getNotationKeyFiguresMonth6GetWithHttpInfo(id, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getNotationKeyFiguresMonth6Get");
      }

      let pathParams = {
      };
      let queryParams = {
        'id': id,
        '_attributes': this.apiClient.buildCollectionParam(opts['attributes'], 'csv')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];


      let returnType = InlineResponse20074;

      return this.apiClient.callApi(
        '/notation/keyFigures/month/6/get', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * End-of-day (EOD) key figures for the time range of six months.
     * End-of-day (EOD) key figures for the time range of six months.
     * @param {String} id Identifier of the notation.
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.attributes Limit the attributes returned in the response to the specified set.
     * @return { Promise.< module:model/InlineResponse20074 > } a Promise, with data of type {@link module:model/InlineResponse20074 }
     */
    getNotationKeyFiguresMonth6Get(id, opts) {
      return this.getNotationKeyFiguresMonth6GetWithHttpInfo(id, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * End-of-day (EOD) key figures for the time range of six months, for a list of notations.
     * End-of-day (EOD) key figures for the time range of six months, for a list of notations.
     * @param {Array.<String>} ids List of notations.
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.attributes Limit the attributes returned in the response to the specified set.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse20075} and HTTP response
     */
    getNotationKeyFiguresMonth6ListWithHttpInfo(ids, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'ids' is set
      if (ids === undefined || ids === null) {
        throw new Error("Missing the required parameter 'ids' when calling getNotationKeyFiguresMonth6List");
      }

      let pathParams = {
      };
      let queryParams = {
        'ids': this.apiClient.buildCollectionParam(ids, 'csv'),
        '_attributes': this.apiClient.buildCollectionParam(opts['attributes'], 'csv')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];


      let returnType = InlineResponse20075;

      return this.apiClient.callApi(
        '/notation/keyFigures/month/6/list', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * End-of-day (EOD) key figures for the time range of six months, for a list of notations.
     * End-of-day (EOD) key figures for the time range of six months, for a list of notations.
     * @param {Array.<String>} ids List of notations.
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.attributes Limit the attributes returned in the response to the specified set.
     * @return { Promise.< module:model/InlineResponse20075 > } a Promise, with data of type {@link module:model/InlineResponse20075 }
     */
    getNotationKeyFiguresMonth6List(ids, opts) {
      return this.getNotationKeyFiguresMonth6ListWithHttpInfo(ids, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * End-of-day (EOD) key figures for the time range of one week.
     * End-of-day (EOD) key figures for the time range of one week.
     * @param {String} id Identifier of the notation.
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.attributes Limit the attributes returned in the response to the specified set.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse20072} and HTTP response
     */
    getNotationKeyFiguresWeek1GetWithHttpInfo(id, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getNotationKeyFiguresWeek1Get");
      }

      let pathParams = {
      };
      let queryParams = {
        'id': id,
        '_attributes': this.apiClient.buildCollectionParam(opts['attributes'], 'csv')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];


      let returnType = InlineResponse20072;

      return this.apiClient.callApi(
        '/notation/keyFigures/week/1/get', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * End-of-day (EOD) key figures for the time range of one week.
     * End-of-day (EOD) key figures for the time range of one week.
     * @param {String} id Identifier of the notation.
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.attributes Limit the attributes returned in the response to the specified set.
     * @return { Promise.< module:model/InlineResponse20072 > } a Promise, with data of type {@link module:model/InlineResponse20072 }
     */
    getNotationKeyFiguresWeek1Get(id, opts) {
      return this.getNotationKeyFiguresWeek1GetWithHttpInfo(id, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * End-of-day (EOD) key figures for the time range of one week, for a list of notations.
     * End-of-day (EOD) key figures for the time range of one week, for a list of notations.
     * @param {Array.<String>} ids List of notations.
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.attributes Limit the attributes returned in the response to the specified set.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse20073} and HTTP response
     */
    getNotationKeyFiguresWeek1ListWithHttpInfo(ids, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'ids' is set
      if (ids === undefined || ids === null) {
        throw new Error("Missing the required parameter 'ids' when calling getNotationKeyFiguresWeek1List");
      }

      let pathParams = {
      };
      let queryParams = {
        'ids': this.apiClient.buildCollectionParam(ids, 'csv'),
        '_attributes': this.apiClient.buildCollectionParam(opts['attributes'], 'csv')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];


      let returnType = InlineResponse20073;

      return this.apiClient.callApi(
        '/notation/keyFigures/week/1/list', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * End-of-day (EOD) key figures for the time range of one week, for a list of notations.
     * End-of-day (EOD) key figures for the time range of one week, for a list of notations.
     * @param {Array.<String>} ids List of notations.
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.attributes Limit the attributes returned in the response to the specified set.
     * @return { Promise.< module:model/InlineResponse20073 > } a Promise, with data of type {@link module:model/InlineResponse20073 }
     */
    getNotationKeyFiguresWeek1List(ids, opts) {
      return this.getNotationKeyFiguresWeek1ListWithHttpInfo(ids, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * End-of-day (EOD) key figures for the time range of one year.
     * End-of-day (EOD) key figures for the time range of one year.
     * @param {String} id Identifier of the notation.
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.attributes Limit the attributes returned in the response to the specified set.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse20072} and HTTP response
     */
    getNotationKeyFiguresYear1GetWithHttpInfo(id, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getNotationKeyFiguresYear1Get");
      }

      let pathParams = {
      };
      let queryParams = {
        'id': id,
        '_attributes': this.apiClient.buildCollectionParam(opts['attributes'], 'csv')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];


      let returnType = InlineResponse20072;

      return this.apiClient.callApi(
        '/notation/keyFigures/year/1/get', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * End-of-day (EOD) key figures for the time range of one year.
     * End-of-day (EOD) key figures for the time range of one year.
     * @param {String} id Identifier of the notation.
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.attributes Limit the attributes returned in the response to the specified set.
     * @return { Promise.< module:model/InlineResponse20072 > } a Promise, with data of type {@link module:model/InlineResponse20072 }
     */
    getNotationKeyFiguresYear1Get(id, opts) {
      return this.getNotationKeyFiguresYear1GetWithHttpInfo(id, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * End-of-day (EOD) key figures for the time range of one year, for a list of notations.
     * End-of-day (EOD) key figures for the time range of one year, for a list of notations.
     * @param {Array.<String>} ids List of notations.
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.attributes Limit the attributes returned in the response to the specified set.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse20073} and HTTP response
     */
    getNotationKeyFiguresYear1ListWithHttpInfo(ids, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'ids' is set
      if (ids === undefined || ids === null) {
        throw new Error("Missing the required parameter 'ids' when calling getNotationKeyFiguresYear1List");
      }

      let pathParams = {
      };
      let queryParams = {
        'ids': this.apiClient.buildCollectionParam(ids, 'csv'),
        '_attributes': this.apiClient.buildCollectionParam(opts['attributes'], 'csv')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];


      let returnType = InlineResponse20073;

      return this.apiClient.callApi(
        '/notation/keyFigures/year/1/list', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * End-of-day (EOD) key figures for the time range of one year, for a list of notations.
     * End-of-day (EOD) key figures for the time range of one year, for a list of notations.
     * @param {Array.<String>} ids List of notations.
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.attributes Limit the attributes returned in the response to the specified set.
     * @return { Promise.< module:model/InlineResponse20073 > } a Promise, with data of type {@link module:model/InlineResponse20073 }
     */
    getNotationKeyFiguresYear1List(ids, opts) {
      return this.getNotationKeyFiguresYear1ListWithHttpInfo(ids, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * End-of-day (EOD) key figures for the time range of three years.
     * End-of-day (EOD) key figures for the time range of three years.
     * @param {String} id Identifier of the notation.
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.attributes Limit the attributes returned in the response to the specified set.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse20074} and HTTP response
     */
    getNotationKeyFiguresYear3GetWithHttpInfo(id, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getNotationKeyFiguresYear3Get");
      }

      let pathParams = {
      };
      let queryParams = {
        'id': id,
        '_attributes': this.apiClient.buildCollectionParam(opts['attributes'], 'csv')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];


      let returnType = InlineResponse20074;

      return this.apiClient.callApi(
        '/notation/keyFigures/year/3/get', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * End-of-day (EOD) key figures for the time range of three years.
     * End-of-day (EOD) key figures for the time range of three years.
     * @param {String} id Identifier of the notation.
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.attributes Limit the attributes returned in the response to the specified set.
     * @return { Promise.< module:model/InlineResponse20074 > } a Promise, with data of type {@link module:model/InlineResponse20074 }
     */
    getNotationKeyFiguresYear3Get(id, opts) {
      return this.getNotationKeyFiguresYear3GetWithHttpInfo(id, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * End-of-day (EOD) key figures for the time range of three years, for a list of notations.
     * End-of-day (EOD) key figures for the time range of three years, for a list of notations.
     * @param {Array.<String>} ids List of notations.
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.attributes Limit the attributes returned in the response to the specified set.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse20075} and HTTP response
     */
    getNotationKeyFiguresYear3ListWithHttpInfo(ids, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'ids' is set
      if (ids === undefined || ids === null) {
        throw new Error("Missing the required parameter 'ids' when calling getNotationKeyFiguresYear3List");
      }

      let pathParams = {
      };
      let queryParams = {
        'ids': this.apiClient.buildCollectionParam(ids, 'csv'),
        '_attributes': this.apiClient.buildCollectionParam(opts['attributes'], 'csv')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];


      let returnType = InlineResponse20075;

      return this.apiClient.callApi(
        '/notation/keyFigures/year/3/list', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * End-of-day (EOD) key figures for the time range of three years, for a list of notations.
     * End-of-day (EOD) key figures for the time range of three years, for a list of notations.
     * @param {Array.<String>} ids List of notations.
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.attributes Limit the attributes returned in the response to the specified set.
     * @return { Promise.< module:model/InlineResponse20075 > } a Promise, with data of type {@link module:model/InlineResponse20075 }
     */
    getNotationKeyFiguresYear3List(ids, opts) {
      return this.getNotationKeyFiguresYear3ListWithHttpInfo(ids, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * End-of-day (EOD) key figures for the time range of five years.
     * End-of-day (EOD) key figures for the time range of five years.
     * @param {String} id Identifier of the notation.
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.attributes Limit the attributes returned in the response to the specified set.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse20074} and HTTP response
     */
    getNotationKeyFiguresYear5GetWithHttpInfo(id, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getNotationKeyFiguresYear5Get");
      }

      let pathParams = {
      };
      let queryParams = {
        'id': id,
        '_attributes': this.apiClient.buildCollectionParam(opts['attributes'], 'csv')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];


      let returnType = InlineResponse20074;

      return this.apiClient.callApi(
        '/notation/keyFigures/year/5/get', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * End-of-day (EOD) key figures for the time range of five years.
     * End-of-day (EOD) key figures for the time range of five years.
     * @param {String} id Identifier of the notation.
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.attributes Limit the attributes returned in the response to the specified set.
     * @return { Promise.< module:model/InlineResponse20074 > } a Promise, with data of type {@link module:model/InlineResponse20074 }
     */
    getNotationKeyFiguresYear5Get(id, opts) {
      return this.getNotationKeyFiguresYear5GetWithHttpInfo(id, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * End-of-day (EOD) key figures for the time range of five years, for a list of notations.
     * End-of-day (EOD) key figures for the time range of five years, for a list of notations.
     * @param {Array.<String>} ids List of notations.
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.attributes Limit the attributes returned in the response to the specified set.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse20075} and HTTP response
     */
    getNotationKeyFiguresYear5ListWithHttpInfo(ids, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'ids' is set
      if (ids === undefined || ids === null) {
        throw new Error("Missing the required parameter 'ids' when calling getNotationKeyFiguresYear5List");
      }

      let pathParams = {
      };
      let queryParams = {
        'ids': this.apiClient.buildCollectionParam(ids, 'csv'),
        '_attributes': this.apiClient.buildCollectionParam(opts['attributes'], 'csv')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];


      let returnType = InlineResponse20075;

      return this.apiClient.callApi(
        '/notation/keyFigures/year/5/list', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * End-of-day (EOD) key figures for the time range of five years, for a list of notations.
     * End-of-day (EOD) key figures for the time range of five years, for a list of notations.
     * @param {Array.<String>} ids List of notations.
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.attributes Limit the attributes returned in the response to the specified set.
     * @return { Promise.< module:model/InlineResponse20075 > } a Promise, with data of type {@link module:model/InlineResponse20075 }
     */
    getNotationKeyFiguresYear5List(ids, opts) {
      return this.getNotationKeyFiguresYear5ListWithHttpInfo(ids, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * End-of-day (EOD) key figures for the time range year-to-date (YTD)..
     * End-of-day (EOD) key figures for the time range year-to-date (YTD). The time range YTD begins with the last trading day of the previous calendar year for which EOD prices are available and ends with the most recent trading day of the current calendar year for which EOD prices are available..
     * @param {String} id Identifier of the notation.
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.attributes Limit the attributes returned in the response to the specified set.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse20076} and HTTP response
     */
    getNotationKeyFiguresYearToDateGetWithHttpInfo(id, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getNotationKeyFiguresYearToDateGet");
      }

      let pathParams = {
      };
      let queryParams = {
        'id': id,
        '_attributes': this.apiClient.buildCollectionParam(opts['attributes'], 'csv')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];


      let returnType = InlineResponse20076;

      return this.apiClient.callApi(
        '/notation/keyFigures/yearToDate/get', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * End-of-day (EOD) key figures for the time range year-to-date (YTD)..
     * End-of-day (EOD) key figures for the time range year-to-date (YTD). The time range YTD begins with the last trading day of the previous calendar year for which EOD prices are available and ends with the most recent trading day of the current calendar year for which EOD prices are available..
     * @param {String} id Identifier of the notation.
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.attributes Limit the attributes returned in the response to the specified set.
     * @return { Promise.< module:model/InlineResponse20076 > } a Promise, with data of type {@link module:model/InlineResponse20076 }
     */
    getNotationKeyFiguresYearToDateGet(id, opts) {
      return this.getNotationKeyFiguresYearToDateGetWithHttpInfo(id, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * End-of-day (EOD) key figures for the time range year-to-date (YTD), for a list of notations..
     * End-of-day (EOD) key figures for the time range year-to-date (YTD), for a list of notations. The time range YTD begins with the last trading day of the previous calendar year for which EOD prices are available and ends with the most recent tradingday of the current calendar year for which EOD prices are available..
     * @param {Array.<String>} ids List of notations.
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.attributes Limit the attributes returned in the response to the specified set.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse20077} and HTTP response
     */
    getNotationKeyFiguresYearToDateListWithHttpInfo(ids, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'ids' is set
      if (ids === undefined || ids === null) {
        throw new Error("Missing the required parameter 'ids' when calling getNotationKeyFiguresYearToDateList");
      }

      let pathParams = {
      };
      let queryParams = {
        'ids': this.apiClient.buildCollectionParam(ids, 'csv'),
        '_attributes': this.apiClient.buildCollectionParam(opts['attributes'], 'csv')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];


      let returnType = InlineResponse20077;

      return this.apiClient.callApi(
        '/notation/keyFigures/yearToDate/list', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * End-of-day (EOD) key figures for the time range year-to-date (YTD), for a list of notations..
     * End-of-day (EOD) key figures for the time range year-to-date (YTD), for a list of notations. The time range YTD begins with the last trading day of the previous calendar year for which EOD prices are available and ends with the most recent tradingday of the current calendar year for which EOD prices are available..
     * @param {Array.<String>} ids List of notations.
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.attributes Limit the attributes returned in the response to the specified set.
     * @return { Promise.< module:model/InlineResponse20077 > } a Promise, with data of type {@link module:model/InlineResponse20077 }
     */
    getNotationKeyFiguresYearToDateList(ids, opts) {
      return this.getNotationKeyFiguresYearToDateListWithHttpInfo(ids, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Basic data for a list of notations.
     * Basic data for a list of notations.
     * @param {Array.<String>} ids List of notations.
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.attributes Limit the attributes returned in the response to the specified set.
     * @param {String} opts.language ISO 639-1 code of the language.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse20065} and HTTP response
     */
    getNotationListWithHttpInfo(ids, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'ids' is set
      if (ids === undefined || ids === null) {
        throw new Error("Missing the required parameter 'ids' when calling getNotationList");
      }

      let pathParams = {
      };
      let queryParams = {
        'ids': this.apiClient.buildCollectionParam(ids, 'csv'),
        '_attributes': this.apiClient.buildCollectionParam(opts['attributes'], 'csv'),
        '_language': opts['language']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];


      let returnType = InlineResponse20065;

      return this.apiClient.callApi(
        '/notation/list', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Basic data for a list of notations.
     * Basic data for a list of notations.
     * @param {Array.<String>} ids List of notations.
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.attributes Limit the attributes returned in the response to the specified set.
     * @param {String} opts.language ISO 639-1 code of the language.
     * @return { Promise.< module:model/InlineResponse20065 > } a Promise, with data of type {@link module:model/InlineResponse20065 }
     */
    getNotationList(ids, opts) {
      return this.getNotationListWithHttpInfo(ids, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Basic search for notations.
     * Search for a notation whose ISIN, specified NSINs, name, or symbol match the search value according to a tolerant full-text match algorithm. If more than one notation of an instrument matches, only the notation with the highest monetary trading volume, averaged over one month, is considered. Better matching results appear in the response before less relevant matches. If the parameter popularity is set to true, the popularity of the notation is the primary sort criterion. Popularity is affected mostly by the request frequency of the notation.
     * @param {String} searchValue Full-text search string. It may be enclosed in double quotes (\"). No escaping is provided, therefore it is impossible to specify a search string containing double quotes. Relevance of word starts is indicated by a phrase starting with a space character, such as \" daimler\".
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/String>} opts.nsins A set of NSIN kinds to consider in the search. If the parameter is absent or the value is empty, all valid NSIN kinds are searched.
     * @param {module:model/String} opts.assetClass A parameter to limit the output to a particular asset class.
     * @param {Boolean} opts.onlyActive If true, restricts the result to active notations. (default to true)
     * @param {Boolean} opts.popularity If true, the results are sorted by descending popularity. (default to false)
     * @param {Array.<String>} opts.attributes Limit the attributes returned in the response to the specified set.
     * @param {String} opts.language ISO 639-1 code of the language.
     * @param {Number} opts.paginationOffset Non-negative number of entries to skip, or 0 (default). (default to 0.0)
     * @param {Number} opts.paginationLimit Non-negative maximum number of entries to return. (default to 20.0)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse20088} and HTTP response
     */
    getNotationSearchBasicWithHttpInfo(searchValue, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'searchValue' is set
      if (searchValue === undefined || searchValue === null) {
        throw new Error("Missing the required parameter 'searchValue' when calling getNotationSearchBasic");
      }

      let pathParams = {
      };
      let queryParams = {
        'searchValue': searchValue,
        'nsins': this.apiClient.buildCollectionParam(opts['nsins'], 'csv'),
        'assetClass': opts['assetClass'],
        'onlyActive': opts['onlyActive'],
        'popularity': opts['popularity'],
        '_attributes': this.apiClient.buildCollectionParam(opts['attributes'], 'csv'),
        '_language': opts['language'],
        '_paginationOffset': opts['paginationOffset'],
        '_paginationLimit': opts['paginationLimit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];


      let returnType = InlineResponse20088;

      return this.apiClient.callApi(
        '/notation/search/basic', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Basic search for notations.
     * Search for a notation whose ISIN, specified NSINs, name, or symbol match the search value according to a tolerant full-text match algorithm. If more than one notation of an instrument matches, only the notation with the highest monetary trading volume, averaged over one month, is considered. Better matching results appear in the response before less relevant matches. If the parameter popularity is set to true, the popularity of the notation is the primary sort criterion. Popularity is affected mostly by the request frequency of the notation.
     * @param {String} searchValue Full-text search string. It may be enclosed in double quotes (\"). No escaping is provided, therefore it is impossible to specify a search string containing double quotes. Relevance of word starts is indicated by a phrase starting with a space character, such as \" daimler\".
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/String>} opts.nsins A set of NSIN kinds to consider in the search. If the parameter is absent or the value is empty, all valid NSIN kinds are searched.
     * @param {module:model/String} opts.assetClass A parameter to limit the output to a particular asset class.
     * @param {Boolean} opts.onlyActive If true, restricts the result to active notations. (default to true)
     * @param {Boolean} opts.popularity If true, the results are sorted by descending popularity. (default to false)
     * @param {Array.<String>} opts.attributes Limit the attributes returned in the response to the specified set.
     * @param {String} opts.language ISO 639-1 code of the language.
     * @param {Number} opts.paginationOffset Non-negative number of entries to skip, or 0 (default). (default to 0.0)
     * @param {Number} opts.paginationLimit Non-negative maximum number of entries to return. (default to 20.0)
     * @return { Promise.< module:model/InlineResponse20088 > } a Promise, with data of type {@link module:model/InlineResponse20088 }
     */
    getNotationSearchBasic(searchValue, opts) {
      return this.getNotationSearchBasicWithHttpInfo(searchValue, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Basic search for notations.
     * Search for notations whose ISIN, specified NSINs, name, or symbol match the search value according to a tolerant full-text match algorithm. If more than one notation of an instrument matches, only the notation with the highest monetary trading volume, averaged over one month, is considered.
     * @param {String} searchValue Full-text search string. It may be enclosed in double quotes (\"). No escaping is provided, therefore it is impossible to specify a search string containing double quotes. Relevance of word starts is indicated by a phrase starting with a space character, such as \" daimler\".
     * @param {Object} opts Optional parameters
     * @param {Array.<Number>} opts.idMarkets List of market identifiers. Limits the results to the given markets. For possible values, see endpoint `/basic/market/list`.
     * @param {Array.<module:model/String>} opts.nsins A set of NSIN kinds to consider in the search. If the parameter is absent or the value is empty, all valid NSIN kinds are searched.
     * @param {Array.<module:model/String>} opts.assetClass Limits the results to a particular asset class.
     * @param {Boolean} opts.onlyActive If true, restricts the result to active notations. (default to true)
     * @param {Array.<String>} opts.attributes Limit the attributes returned in the response to the specified set.
     * @param {String} opts.language ISO 639-1 code of the language.
     * @param {Number} opts.paginationOffset Non-negative number of entries to skip, or 0 (default). (default to 0.0)
     * @param {Number} opts.paginationLimit Non-negative maximum number of entries to return. (default to 20.0)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse20090} and HTTP response
     */
    getNotationSearchByTextRankedByVolumeWithHttpInfo(searchValue, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'searchValue' is set
      if (searchValue === undefined || searchValue === null) {
        throw new Error("Missing the required parameter 'searchValue' when calling getNotationSearchByTextRankedByVolume");
      }

      let pathParams = {
      };
      let queryParams = {
        'searchValue': searchValue,
        'idMarkets': this.apiClient.buildCollectionParam(opts['idMarkets'], 'csv'),
        'nsins': this.apiClient.buildCollectionParam(opts['nsins'], 'csv'),
        'assetClass': this.apiClient.buildCollectionParam(opts['assetClass'], 'csv'),
        'onlyActive': opts['onlyActive'],
        '_attributes': this.apiClient.buildCollectionParam(opts['attributes'], 'csv'),
        '_language': opts['language'],
        '_paginationOffset': opts['paginationOffset'],
        '_paginationLimit': opts['paginationLimit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];


      let returnType = InlineResponse20090;

      return this.apiClient.callApi(
        '/notation/searchByTextRankedByVolume', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Basic search for notations.
     * Search for notations whose ISIN, specified NSINs, name, or symbol match the search value according to a tolerant full-text match algorithm. If more than one notation of an instrument matches, only the notation with the highest monetary trading volume, averaged over one month, is considered.
     * @param {String} searchValue Full-text search string. It may be enclosed in double quotes (\"). No escaping is provided, therefore it is impossible to specify a search string containing double quotes. Relevance of word starts is indicated by a phrase starting with a space character, such as \" daimler\".
     * @param {Object} opts Optional parameters
     * @param {Array.<Number>} opts.idMarkets List of market identifiers. Limits the results to the given markets. For possible values, see endpoint `/basic/market/list`.
     * @param {Array.<module:model/String>} opts.nsins A set of NSIN kinds to consider in the search. If the parameter is absent or the value is empty, all valid NSIN kinds are searched.
     * @param {Array.<module:model/String>} opts.assetClass Limits the results to a particular asset class.
     * @param {Boolean} opts.onlyActive If true, restricts the result to active notations. (default to true)
     * @param {Array.<String>} opts.attributes Limit the attributes returned in the response to the specified set.
     * @param {String} opts.language ISO 639-1 code of the language.
     * @param {Number} opts.paginationOffset Non-negative number of entries to skip, or 0 (default). (default to 0.0)
     * @param {Number} opts.paginationLimit Non-negative maximum number of entries to return. (default to 20.0)
     * @return { Promise.< module:model/InlineResponse20090 > } a Promise, with data of type {@link module:model/InlineResponse20090 }
     */
    getNotationSearchByTextRankedByVolume(searchValue, opts) {
      return this.getNotationSearchByTextRankedByVolumeWithHttpInfo(searchValue, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Intraday trading status of a notation.
     * Intraday trading status of a notation.
     * @param {String} id Identifier of a notation.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} opts.quality Quality of the trading status. The trading status and related data for a notation cannot be retrieved in end-of-day quality (EOD). (default to 'DLY')
     * @param {Array.<String>} opts.attributes Limit the attributes returned in the response to the specified set.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse20078} and HTTP response
     */
    getNotationStatusGetWithHttpInfo(id, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getNotationStatusGet");
      }

      let pathParams = {
      };
      let queryParams = {
        'id': id,
        'quality': opts['quality'],
        '_attributes': this.apiClient.buildCollectionParam(opts['attributes'], 'csv')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];


      let returnType = InlineResponse20078;

      return this.apiClient.callApi(
        '/notation/status/get', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Intraday trading status of a notation.
     * Intraday trading status of a notation.
     * @param {String} id Identifier of a notation.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} opts.quality Quality of the trading status. The trading status and related data for a notation cannot be retrieved in end-of-day quality (EOD). (default to 'DLY')
     * @param {Array.<String>} opts.attributes Limit the attributes returned in the response to the specified set.
     * @return { Promise.< module:model/InlineResponse20078 > } a Promise, with data of type {@link module:model/InlineResponse20078 }
     */
    getNotationStatusGet(id, opts) {
      return this.getNotationStatusGetWithHttpInfo(id, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Retrieve a list of notations for a given FactSet identifier.
     * <p>Retrieve a list of notations for a given FactSet identifier, grouped by regional identifiers, if available. Listings without a regional identifier are grouped at the end of the response.</p><p>The notation corresponding to the security's primary listing has the attributes <big><tt>regional.isPrimary</tt></big> and <big><tt>regional.listing.isPrimary</tt></big> both set to true.The security's primary listing might not be among the results depending on the entitlement.</p><p>See the group description for more information about the security's primary listing.</p>
     * @param {module:model/InlineObject19} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse20070} and HTTP response
     */
    postNotationCrossReferenceFactSetIdentifierListByFactSetIdentifierWithHttpInfo(body) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling postNotationCrossReferenceFactSetIdentifierListByFactSetIdentifier");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];


      let returnType = InlineResponse20070;

      return this.apiClient.callApi(
        '/notation/crossReference/factSetIdentifier/listByFactSetIdentifier', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Retrieve a list of notations for a given FactSet identifier.
     * <p>Retrieve a list of notations for a given FactSet identifier, grouped by regional identifiers, if available. Listings without a regional identifier are grouped at the end of the response.</p><p>The notation corresponding to the security's primary listing has the attributes <big><tt>regional.isPrimary</tt></big> and <big><tt>regional.listing.isPrimary</tt></big> both set to true.The security's primary listing might not be among the results depending on the entitlement.</p><p>See the group description for more information about the security's primary listing.</p>
     * @param {module:model/InlineObject19} body 
     * @return { Promise.< module:model/InlineResponse20070 > } a Promise, with data of type {@link module:model/InlineResponse20070 }
     */
    postNotationCrossReferenceFactSetIdentifierListByFactSetIdentifier(body) {
      return this.postNotationCrossReferenceFactSetIdentifierListByFactSetIdentifierWithHttpInfo(body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Retrieve a list of FactSet identifiers for a given instrument.
     * <p>Retrieve a list of FactSet identifiers for a given instrument, grouped by regional identifiers, if available. Listings without a regional identifier are grouped at the end of the response.</p><p>The notation corresponding to the security's primary listing has the attributes <big><tt>regional.isPrimary</tt></big> and <big><tt>regional.listing.isPrimary</tt></big> both set to true.The security's primary listing might not be among the results depending on the entitlement.</p><p>The result contains only notations that have at least one FactSet identifier (see <big><tt>listing.permanentIdentifier</tt></big>, <big><tt>listing.tickerExchange</tt></big>).</p><p>See the group description for more information about the security's primary listing.</p>
     * @param {module:model/InlineObject20} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse20071} and HTTP response
     */
    postNotationCrossReferenceFactSetIdentifierListByInstrumentWithHttpInfo(body) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling postNotationCrossReferenceFactSetIdentifierListByInstrument");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];


      let returnType = InlineResponse20071;

      return this.apiClient.callApi(
        '/notation/crossReference/factSetIdentifier/listByInstrument', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Retrieve a list of FactSet identifiers for a given instrument.
     * <p>Retrieve a list of FactSet identifiers for a given instrument, grouped by regional identifiers, if available. Listings without a regional identifier are grouped at the end of the response.</p><p>The notation corresponding to the security's primary listing has the attributes <big><tt>regional.isPrimary</tt></big> and <big><tt>regional.listing.isPrimary</tt></big> both set to true.The security's primary listing might not be among the results depending on the entitlement.</p><p>The result contains only notations that have at least one FactSet identifier (see <big><tt>listing.permanentIdentifier</tt></big>, <big><tt>listing.tickerExchange</tt></big>).</p><p>See the group description for more information about the security's primary listing.</p>
     * @param {module:model/InlineObject20} body 
     * @return { Promise.< module:model/InlineResponse20071 > } a Promise, with data of type {@link module:model/InlineResponse20071 }
     */
    postNotationCrossReferenceFactSetIdentifierListByInstrument(body) {
      return this.postNotationCrossReferenceFactSetIdentifierListByInstrumentWithHttpInfo(body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List of entitled notations.
     * List of entitled notations.
     * @param {Object} opts Optional parameters
     * @param {module:model/InlineObject17} opts.body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse20067} and HTTP response
     */
    postNotationCrossReferenceListByISINWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = opts['body'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];


      let returnType = InlineResponse20067;

      return this.apiClient.callApi(
        '/notation/crossReference/listByISIN', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * List of entitled notations.
     * List of entitled notations.
     * @param {Object} opts Optional parameters
     * @param {module:model/InlineObject17} opts.body 
     * @return { Promise.< module:model/InlineResponse20067 > } a Promise, with data of type {@link module:model/InlineResponse20067 }
     */
    postNotationCrossReferenceListByISIN(opts) {
      return this.postNotationCrossReferenceListByISINWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List of entitled notations.
     * List of entitled notations.
     * @param {Object} opts Optional parameters
     * @param {module:model/InlineObject16} opts.body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse20067} and HTTP response
     */
    postNotationCrossReferenceListByInstrumentWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = opts['body'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];


      let returnType = InlineResponse20067;

      return this.apiClient.callApi(
        '/notation/crossReference/listByInstrument', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * List of entitled notations.
     * List of entitled notations.
     * @param {Object} opts Optional parameters
     * @param {module:model/InlineObject16} opts.body 
     * @return { Promise.< module:model/InlineResponse20067 > } a Promise, with data of type {@link module:model/InlineResponse20067 }
     */
    postNotationCrossReferenceListByInstrument(opts) {
      return this.postNotationCrossReferenceListByInstrumentWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List of entitled notations.
     * List of entitled notations. Symbols are not globally unique; therefore, a given symbol interpreted in different markets might refer to different instruments.
     * @param {Object} opts Optional parameters
     * @param {module:model/InlineObject18} opts.body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse20068} and HTTP response
     */
    postNotationCrossReferenceListBySymbolWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = opts['body'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];


      let returnType = InlineResponse20068;

      return this.apiClient.callApi(
        '/notation/crossReference/listBySymbol', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * List of entitled notations.
     * List of entitled notations. Symbols are not globally unique; therefore, a given symbol interpreted in different markets might refer to different instruments.
     * @param {Object} opts Optional parameters
     * @param {module:model/InlineObject18} opts.body 
     * @return { Promise.< module:model/InlineResponse20068 > } a Promise, with data of type {@link module:model/InlineResponse20068 }
     */
    postNotationCrossReferenceListBySymbol(opts) {
      return this.postNotationCrossReferenceListBySymbolWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Text-based search for notations.
     * Text-based search for notations in selected identifier and name attributes according to a tolerant full-text match algorithm. The results satisfy all selected filters; sorting by various attributes is possible. If more than one notation of an instrument matches the parameters, and no market priority has been specified, only the notation with the highest trading volume, averaged over one month, is considered.       The result is limited to 10000 notations. All identifiers used as parameters must be valid and entitled.
     * @param {module:model/InlineObject22} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse20089} and HTTP response
     */
    postNotationSearchByTextWithHttpInfo(body) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling postNotationSearchByText");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];


      let returnType = InlineResponse20089;

      return this.apiClient.callApi(
        '/notation/searchByText', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Text-based search for notations.
     * Text-based search for notations in selected identifier and name attributes according to a tolerant full-text match algorithm. The results satisfy all selected filters; sorting by various attributes is possible. If more than one notation of an instrument matches the parameters, and no market priority has been specified, only the notation with the highest trading volume, averaged over one month, is considered.       The result is limited to 10000 notations. All identifiers used as parameters must be valid and entitled.
     * @param {module:model/InlineObject22} body 
     * @return { Promise.< module:model/InlineResponse20089 > } a Promise, with data of type {@link module:model/InlineResponse20089 }
     */
    postNotationSearchByText(body) {
      return this.postNotationSearchByTextWithHttpInfo(body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}





