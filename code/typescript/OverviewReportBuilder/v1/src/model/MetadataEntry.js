/**
 * FactSet Overview Report Builder API
 * Get relevant industry-specific data for high level analysis of public and private companies
 *
 * The version of the OpenAPI document: 1.2.0
 * Contact: api@factset.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Category from './Category';
import CategoryCategory from './CategoryCategory';
import CurrencyCode from './CurrencyCode';
import CurrencyCodeCurrencyCode from './CurrencyCodeCurrencyCode';
import CurrencySymbol from './CurrencySymbol';
import CurrencySymbolCurrencySymbol from './CurrencySymbolCurrencySymbol';
import Description from './Description';
import DescriptionDescription from './DescriptionDescription';
import Frequency from './Frequency';
import FrequencyFrequency from './FrequencyFrequency';
import Metric from './Metric';
import MetricMetric from './MetricMetric';
import Scale from './Scale';
import ScaleScale from './ScaleScale';
import Sources from './Sources';
import TransactionId from './TransactionId';
import TransactionIdTransactionId from './TransactionIdTransactionId';
import TransactionType from './TransactionType';
import TransactionTypeTransactionType from './TransactionTypeTransactionType';
import ValueType from './ValueType';
import ValueTypeValueType from './ValueTypeValueType';

/**
 * The MetadataEntry model module.
 * @module model/MetadataEntry
 */
class MetadataEntry {
    /**
     * Constructs a new <code>MetadataEntry</code>.
     * Restricted metadata entries. Restricts the possible key in the following STACH schema: - RowOrganizedPackage.CellDetail.CellMetadataEntry - RowOrganizedPackage.HeaderCellDetail.CellMetadataEntry - RowOrganizedPackage.MapOfMetadata.ItemsEntry - RowOrganizedPackage.Row.RowMetadataEntry - RowOrganizedPackage.TableData.TableMetadataEntry And sets restrictions on the possible values for a MetadataItem. 
     * @alias module:model/MetadataEntry
     * @implements module:model/Category
     * @implements module:model/CurrencyCode
     * @implements module:model/CurrencySymbol
     * @implements module:model/Description
     * @implements module:model/Frequency
     * @implements module:model/Metric
     * @implements module:model/Scale
     * @implements module:model/Sources
     * @implements module:model/TransactionId
     * @implements module:model/TransactionType
     * @implements module:model/ValueType
     */
    constructor() { 
        Category.initialize(this);CurrencyCode.initialize(this);CurrencySymbol.initialize(this);Description.initialize(this);Frequency.initialize(this);Metric.initialize(this);Scale.initialize(this);Sources.initialize(this);TransactionId.initialize(this);TransactionType.initialize(this);ValueType.initialize(this);
        MetadataEntry.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>MetadataEntry</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/MetadataEntry} obj Optional instance to populate.
     * @return {module:model/MetadataEntry} The populated <code>MetadataEntry</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new MetadataEntry();
            Category.constructFromObject(data, obj);
            CurrencyCode.constructFromObject(data, obj);
            CurrencySymbol.constructFromObject(data, obj);
            Description.constructFromObject(data, obj);
            Frequency.constructFromObject(data, obj);
            Metric.constructFromObject(data, obj);
            Scale.constructFromObject(data, obj);
            Sources.constructFromObject(data, obj);
            TransactionId.constructFromObject(data, obj);
            TransactionType.constructFromObject(data, obj);
            ValueType.constructFromObject(data, obj);

            if (data.hasOwnProperty('category')) {
                obj['category'] = CategoryCategory.constructFromObject(data['category']);
            }
            if (data.hasOwnProperty('currencyCode')) {
                obj['currencyCode'] = CurrencyCodeCurrencyCode.constructFromObject(data['currencyCode']);
            }
            if (data.hasOwnProperty('currencySymbol')) {
                obj['currencySymbol'] = CurrencySymbolCurrencySymbol.constructFromObject(data['currencySymbol']);
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = DescriptionDescription.constructFromObject(data['description']);
            }
            if (data.hasOwnProperty('frequency')) {
                obj['frequency'] = FrequencyFrequency.constructFromObject(data['frequency']);
            }
            if (data.hasOwnProperty('metric')) {
                obj['metric'] = MetricMetric.constructFromObject(data['metric']);
            }
            if (data.hasOwnProperty('scale')) {
                obj['scale'] = ScaleScale.constructFromObject(data['scale']);
            }
            if (data.hasOwnProperty('value')) {
                obj['value'] = ApiClient.convertToType(data['value'], ['String']);
            }
            if (data.hasOwnProperty('transactionId')) {
                obj['transactionId'] = TransactionIdTransactionId.constructFromObject(data['transactionId']);
            }
            if (data.hasOwnProperty('transactionType')) {
                obj['transactionType'] = TransactionTypeTransactionType.constructFromObject(data['transactionType']);
            }
            if (data.hasOwnProperty('valueType')) {
                obj['valueType'] = ValueTypeValueType.constructFromObject(data['valueType']);
            }
        }
        return obj;
    }


}

/**
 * @member {module:model/CategoryCategory} category
 */
MetadataEntry.prototype['category'] = undefined;

/**
 * @member {module:model/CurrencyCodeCurrencyCode} currencyCode
 */
MetadataEntry.prototype['currencyCode'] = undefined;

/**
 * @member {module:model/CurrencySymbolCurrencySymbol} currencySymbol
 */
MetadataEntry.prototype['currencySymbol'] = undefined;

/**
 * @member {module:model/DescriptionDescription} description
 */
MetadataEntry.prototype['description'] = undefined;

/**
 * @member {module:model/FrequencyFrequency} frequency
 */
MetadataEntry.prototype['frequency'] = undefined;

/**
 * @member {module:model/MetricMetric} metric
 */
MetadataEntry.prototype['metric'] = undefined;

/**
 * @member {module:model/ScaleScale} scale
 */
MetadataEntry.prototype['scale'] = undefined;

/**
 * @member {Array.<String>} value
 */
MetadataEntry.prototype['value'] = undefined;

/**
 * @member {module:model/TransactionIdTransactionId} transactionId
 */
MetadataEntry.prototype['transactionId'] = undefined;

/**
 * @member {module:model/TransactionTypeTransactionType} transactionType
 */
MetadataEntry.prototype['transactionType'] = undefined;

/**
 * @member {module:model/ValueTypeValueType} valueType
 */
MetadataEntry.prototype['valueType'] = undefined;


// Implement Category interface:
/**
 * @member {module:model/CategoryCategory} category
 */
Category.prototype['category'] = undefined;
// Implement CurrencyCode interface:
/**
 * @member {module:model/CurrencyCodeCurrencyCode} currencyCode
 */
CurrencyCode.prototype['currencyCode'] = undefined;
// Implement CurrencySymbol interface:
/**
 * @member {module:model/CurrencySymbolCurrencySymbol} currencySymbol
 */
CurrencySymbol.prototype['currencySymbol'] = undefined;
// Implement Description interface:
/**
 * @member {module:model/DescriptionDescription} description
 */
Description.prototype['description'] = undefined;
// Implement Frequency interface:
/**
 * @member {module:model/FrequencyFrequency} frequency
 */
Frequency.prototype['frequency'] = undefined;
// Implement Metric interface:
/**
 * @member {module:model/MetricMetric} metric
 */
Metric.prototype['metric'] = undefined;
// Implement Scale interface:
/**
 * @member {module:model/ScaleScale} scale
 */
Scale.prototype['scale'] = undefined;
// Implement Sources interface:
/**
 * @member {Array.<String>} value
 */
Sources.prototype['value'] = undefined;
// Implement TransactionId interface:
/**
 * @member {module:model/TransactionIdTransactionId} transactionId
 */
TransactionId.prototype['transactionId'] = undefined;
// Implement TransactionType interface:
/**
 * @member {module:model/TransactionTypeTransactionType} transactionType
 */
TransactionType.prototype['transactionType'] = undefined;
// Implement ValueType interface:
/**
 * @member {module:model/ValueTypeValueType} valueType
 */
ValueType.prototype['valueType'] = undefined;




export default MetadataEntry;

