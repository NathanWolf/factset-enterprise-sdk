/**
 * FactSet Overview Report Builder API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The UnitsUnits model module.
 * @module model/UnitsUnits
 * @version 0.20.0
 */
class UnitsUnits {
    /**
     * Constructs a new <code>UnitsUnits</code>.
     * Represents the scale for the data, expresses the quantity.  Exception: units &#x3D; A (Actual) in combination with metric &#x3D; RAT (Ratio) should be treated similarly as units &#x3D; RATIO; the value is returned in the same format. 
     * @alias module:model/UnitsUnits
     */
    constructor() { 
        
        UnitsUnits.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>UnitsUnits</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/UnitsUnits} obj Optional instance to populate.
     * @return {module:model/UnitsUnits} The populated <code>UnitsUnits</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new UnitsUnits();

            if (data.hasOwnProperty('value')) {
                obj['value'] = ApiClient.convertToType(data['value'], 'String');
            }
        }
        return obj;
    }


}

/**
 * @member {module:model/UnitsUnits.ValueEnum} value
 */
UnitsUnits.prototype['value'] = undefined;





/**
 * Allowed values for the <code>value</code> property.
 * @enum {String}
 * @readonly
 */
UnitsUnits['ValueEnum'] = {

    /**
     * value: "A (Actual)"
     * @const
     */
    "A (Actual)": "A (Actual)",

    /**
     * value: "B (Billions)"
     * @const
     */
    "B (Billions)": "B (Billions)",

    /**
     * value: "M (Millions)"
     * @const
     */
    "M (Millions)": "M (Millions)",

    /**
     * value: "PCT (Percent)"
     * @const
     */
    "PCT (Percent)": "PCT (Percent)",

    /**
     * value: "RATIO (Ratio)"
     * @const
     */
    "RATIO (Ratio)": "RATIO (Ratio)",

    /**
     * value: "T (Thousands)"
     * @const
     */
    "T (Thousands)": "T (Thousands)"
};



export default UnitsUnits;

