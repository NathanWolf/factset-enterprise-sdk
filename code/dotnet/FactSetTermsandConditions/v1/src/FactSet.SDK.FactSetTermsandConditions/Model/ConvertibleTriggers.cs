/*
 * FactSet Terms & Conditions API
 *
 * The FactSet Terms & Conditions API exposes Terms & Conditions data for Fixed Income Corporate, Governement & Agency securities. The FactSet Corporate Government & Agency Terms & Conditions library provides descriptive data on the issue level, such as offering details, redemption information, and coupon schedules. Issuer level data is also available. Coverage is global and includes corporate, sovereign, and agency issues. 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: api@factset.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = FactSet.SDK.FactSetTermsandConditions.Client.OpenAPIDateConverter;

namespace FactSet.SDK.FactSetTermsandConditions.Model
{
    /// <summary>
    /// Convertible Triggers for a Fixed Income security.
    /// </summary>
    [DataContract(Name = "convertibleTriggers")]
    public partial class ConvertibleTriggers : IEquatable<ConvertibleTriggers>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ConvertibleTriggers" /> class.
        /// </summary>
        /// <param name="requestId">Security identifier used in the request..</param>
        /// <param name="fsymId">FactSet Permanent Security Identifier..</param>
        /// <param name="convTriggerEvent">Convertible Trigger Event.</param>
        /// <param name="convTriggerEventDesc">Convertible Trigger Event Description.</param>
        /// <param name="triggerId">Convertible Trigger Id.</param>
        public ConvertibleTriggers(string requestId = default(string), string fsymId = default(string), string convTriggerEvent = default(string), string convTriggerEventDesc = default(string), int triggerId = default(int))
        {
            this.RequestId = requestId;
            this.FsymId = fsymId;
            this.ConvTriggerEvent = convTriggerEvent;
            this.ConvTriggerEventDesc = convTriggerEventDesc;
            this.TriggerId = triggerId;
        }

        /// <summary>
        /// Security identifier used in the request.
        /// </summary>
        /// <value>Security identifier used in the request.</value>
        [DataMember(Name = "requestId", EmitDefaultValue = false)]
        public string RequestId { get; set; }

        /// <summary>
        /// FactSet Permanent Security Identifier.
        /// </summary>
        /// <value>FactSet Permanent Security Identifier.</value>
        [DataMember(Name = "fsymId", EmitDefaultValue = false)]
        public string FsymId { get; set; }

        /// <summary>
        /// Convertible Trigger Event
        /// </summary>
        /// <value>Convertible Trigger Event</value>
        [DataMember(Name = "convTriggerEvent", EmitDefaultValue = false)]
        public string ConvTriggerEvent { get; set; }

        /// <summary>
        /// Convertible Trigger Event Description
        /// </summary>
        /// <value>Convertible Trigger Event Description</value>
        [DataMember(Name = "convTriggerEventDesc", EmitDefaultValue = false)]
        public string ConvTriggerEventDesc { get; set; }

        /// <summary>
        /// Convertible Trigger Id
        /// </summary>
        /// <value>Convertible Trigger Id</value>
        [DataMember(Name = "triggerId", EmitDefaultValue = false)]
        public int TriggerId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ConvertibleTriggers {\n");
            sb.Append("  RequestId: ").Append(RequestId).Append("\n");
            sb.Append("  FsymId: ").Append(FsymId).Append("\n");
            sb.Append("  ConvTriggerEvent: ").Append(ConvTriggerEvent).Append("\n");
            sb.Append("  ConvTriggerEventDesc: ").Append(ConvTriggerEventDesc).Append("\n");
            sb.Append("  TriggerId: ").Append(TriggerId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ConvertibleTriggers);
        }

        /// <summary>
        /// Returns true if ConvertibleTriggers instances are equal
        /// </summary>
        /// <param name="input">Instance of ConvertibleTriggers to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ConvertibleTriggers input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.RequestId == input.RequestId ||
                    (this.RequestId != null &&
                    this.RequestId.Equals(input.RequestId))
                ) && 
                (
                    this.FsymId == input.FsymId ||
                    (this.FsymId != null &&
                    this.FsymId.Equals(input.FsymId))
                ) && 
                (
                    this.ConvTriggerEvent == input.ConvTriggerEvent ||
                    (this.ConvTriggerEvent != null &&
                    this.ConvTriggerEvent.Equals(input.ConvTriggerEvent))
                ) && 
                (
                    this.ConvTriggerEventDesc == input.ConvTriggerEventDesc ||
                    (this.ConvTriggerEventDesc != null &&
                    this.ConvTriggerEventDesc.Equals(input.ConvTriggerEventDesc))
                ) && 
                (
                    this.TriggerId == input.TriggerId ||
                    this.TriggerId.Equals(input.TriggerId)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.RequestId != null)
                {
                    hashCode = (hashCode * 59) + this.RequestId.GetHashCode();
                }
                if (this.FsymId != null)
                {
                    hashCode = (hashCode * 59) + this.FsymId.GetHashCode();
                }
                if (this.ConvTriggerEvent != null)
                {
                    hashCode = (hashCode * 59) + this.ConvTriggerEvent.GetHashCode();
                }
                if (this.ConvTriggerEventDesc != null)
                {
                    hashCode = (hashCode * 59) + this.ConvTriggerEventDesc.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.TriggerId.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
