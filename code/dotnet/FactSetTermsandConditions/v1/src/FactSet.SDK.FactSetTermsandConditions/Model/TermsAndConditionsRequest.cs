/*
 * FactSet Terms & Conditions API
 *
 * The FactSet Terms & Conditions API exposes Terms & Conditions data for Fixed Income Corporate, Governement & Agency securities. The FactSet Corporate Government & Agency Terms & Conditions library provides descriptive data on the issue level, such as offering details, redemption information, and coupon schedules. Issuer level data is also available. Coverage is global and includes corporate, sovereign, and agency issues. 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: api@factset.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = FactSet.SDK.FactSetTermsandConditions.Client.OpenAPIDateConverter;

namespace FactSet.SDK.FactSetTermsandConditions.Model
{
    /// <summary>
    /// TermsAndConditionsRequest
    /// </summary>
    [DataContract(Name = "termsAndConditionsRequest")]
    public partial class TermsAndConditionsRequest : IEquatable<TermsAndConditionsRequest>, IValidatableObject
    {
        /// <summary>
        /// Defines Categories
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum CategoriesEnum
        {
            /// <summary>
            /// Enum SECURITYDETAILS for value: SECURITY_DETAILS
            /// </summary>
            [EnumMember(Value = "SECURITY_DETAILS")]
            SECURITYDETAILS = 1,

            /// <summary>
            /// Enum COUPONDETAILS for value: COUPON_DETAILS
            /// </summary>
            [EnumMember(Value = "COUPON_DETAILS")]
            COUPONDETAILS = 2,

            /// <summary>
            /// Enum CONVERTIBLEFEATURES for value: CONVERTIBLE_FEATURES
            /// </summary>
            [EnumMember(Value = "CONVERTIBLE_FEATURES")]
            CONVERTIBLEFEATURES = 3,

            /// <summary>
            /// Enum REDEMPTIONOPTIONS for value: REDEMPTION_OPTIONS
            /// </summary>
            [EnumMember(Value = "REDEMPTION_OPTIONS")]
            REDEMPTIONOPTIONS = 4

        }



        /// <summary>
        /// Selects the Fixed Income metrics by major category - * **SECURITY_DETAILS** &#x3D; Detailed information about the security. * **COUPON_DETAILS** &#x3D; Coupon details. * **CONVERTIBLE_FEATURES** &#x3D; Features of convertible instruments. * **REDEMPTION_OPTIONS** &#x3D; Redemption options. 
        /// </summary>
        /// <value>Selects the Fixed Income metrics by major category - * **SECURITY_DETAILS** &#x3D; Detailed information about the security. * **COUPON_DETAILS** &#x3D; Coupon details. * **CONVERTIBLE_FEATURES** &#x3D; Features of convertible instruments. * **REDEMPTION_OPTIONS** &#x3D; Redemption options. </value>
        [DataMember(Name = "categories", EmitDefaultValue = false)]
        public List<CategoriesEnum> Categories { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="TermsAndConditionsRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected TermsAndConditionsRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="TermsAndConditionsRequest" /> class.
        /// </summary>
        /// <param name="ids">List of Fixed Income Security identifiers. Supported symbol types include CUSIP, SEDOL, ISIN, and FactSet Security Permanent Identifier (-S).  **ID LIMIT &#x3D; 250** *per request*.  (required).</param>
        /// <param name="fields">List of Terms and Conditions data items..</param>
        /// <param name="categories">Selects the Fixed Income metrics by major category - * **SECURITY_DETAILS** &#x3D; Detailed information about the security. * **COUPON_DETAILS** &#x3D; Coupon details. * **CONVERTIBLE_FEATURES** &#x3D; Features of convertible instruments. * **REDEMPTION_OPTIONS** &#x3D; Redemption options. .</param>
        public TermsAndConditionsRequest(List<string> ids,List<string> fields = default(List<string>), List<CategoriesEnum> categories = default(List<CategoriesEnum>))
        {
            // to ensure "ids" is required (not null)
            if (ids == null) {
                throw new ArgumentNullException("ids is a required property for TermsAndConditionsRequest and cannot be null");
            }
            this.Ids = ids;
            this.Fields = fields;
            this.Categories = categories;
        }

        /// <summary>
        /// List of Fixed Income Security identifiers. Supported symbol types include CUSIP, SEDOL, ISIN, and FactSet Security Permanent Identifier (-S).  **ID LIMIT &#x3D; 250** *per request*. 
        /// </summary>
        /// <value>List of Fixed Income Security identifiers. Supported symbol types include CUSIP, SEDOL, ISIN, and FactSet Security Permanent Identifier (-S).  **ID LIMIT &#x3D; 250** *per request*. </value>
        [DataMember(Name = "ids", IsRequired = true, EmitDefaultValue = false)]
        public List<string> Ids { get; set; }

        /// <summary>
        /// List of Terms and Conditions data items.
        /// </summary>
        /// <value>List of Terms and Conditions data items.</value>
        [DataMember(Name = "fields", EmitDefaultValue = false)]
        public List<string> Fields { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class TermsAndConditionsRequest {\n");
            sb.Append("  Ids: ").Append(Ids).Append("\n");
            sb.Append("  Fields: ").Append(Fields).Append("\n");
            sb.Append("  Categories: ").Append(Categories).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TermsAndConditionsRequest);
        }

        /// <summary>
        /// Returns true if TermsAndConditionsRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of TermsAndConditionsRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TermsAndConditionsRequest input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Ids == input.Ids ||
                    this.Ids != null &&
                    input.Ids != null &&
                    this.Ids.SequenceEqual(input.Ids)
                ) && 
                (
                    this.Fields == input.Fields ||
                    this.Fields != null &&
                    input.Fields != null &&
                    this.Fields.SequenceEqual(input.Fields)
                ) && 
                (
                    this.Categories == input.Categories ||
                    this.Categories.SequenceEqual(input.Categories)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Ids != null)
                {
                    hashCode = (hashCode * 59) + this.Ids.GetHashCode();
                }
                if (this.Fields != null)
                {
                    hashCode = (hashCode * 59) + this.Fields.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Categories.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
