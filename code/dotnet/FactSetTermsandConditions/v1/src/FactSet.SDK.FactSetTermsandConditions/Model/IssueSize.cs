/*
 * FactSet Terms & Conditions API
 *
 * The FactSet Terms & Conditions API exposes Terms & Conditions data for Fixed Income Corporate, Governement & Agency securities. The FactSet Corporate Government & Agency Terms & Conditions library provides descriptive data on the issue level, such as offering details, redemption information, and coupon schedules. Issuer level data is also available. Coverage is global and includes corporate, sovereign, and agency issues. 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: api@factset.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = FactSet.SDK.FactSetTermsandConditions.Client.OpenAPIDateConverter;

namespace FactSet.SDK.FactSetTermsandConditions.Model
{
    /// <summary>
    /// Issue Size Data Items for a Fixed Income security.
    /// </summary>
    [DataContract(Name = "issueSize")]
    public partial class IssueSize : IEquatable<IssueSize>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="IssueSize" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected IssueSize() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="IssueSize" /> class.
        /// </summary>
        /// <param name="requestId">Security identifier used in the request. (required).</param>
        /// <param name="fsymId">FactSet Permanent Security Identifier. (required).</param>
        /// <param name="outAmtEffDate">Amount Outstanding Effective Date (out_amt_eff_date).</param>
        /// <param name="outAmtCurrency">Amount Outstanding Currency.</param>
        /// <param name="outAmt">Amount Outstanding.</param>
        /// <param name="outAmtChange">Amount Outstanding Action Amount.</param>
        /// <param name="outAmtChangePrice">Price - Amount Outstanding Action.</param>
        /// <param name="outAmtChangeType">Amount Outstanding Action Type.</param>
        public IssueSize(string requestId, string fsymId,DateTime outAmtEffDate = default(DateTime), string outAmtCurrency = default(string), double outAmt = default(double), double outAmtChange = default(double), double outAmtChangePrice = default(double), string outAmtChangeType = default(string))
        {
            // to ensure "requestId" is required (not null)
            if (requestId == null) {
                throw new ArgumentNullException("requestId is a required property for IssueSize and cannot be null");
            }
            this.RequestId = requestId;
            // to ensure "fsymId" is required (not null)
            if (fsymId == null) {
                throw new ArgumentNullException("fsymId is a required property for IssueSize and cannot be null");
            }
            this.FsymId = fsymId;
            this.OutAmtEffDate = outAmtEffDate;
            this.OutAmtCurrency = outAmtCurrency;
            this.OutAmt = outAmt;
            this.OutAmtChange = outAmtChange;
            this.OutAmtChangePrice = outAmtChangePrice;
            this.OutAmtChangeType = outAmtChangeType;
        }

        /// <summary>
        /// Security identifier used in the request.
        /// </summary>
        /// <value>Security identifier used in the request.</value>
        [DataMember(Name = "requestId", IsRequired = true, EmitDefaultValue = false)]
        public string RequestId { get; set; }

        /// <summary>
        /// FactSet Permanent Security Identifier.
        /// </summary>
        /// <value>FactSet Permanent Security Identifier.</value>
        [DataMember(Name = "fsymId", IsRequired = true, EmitDefaultValue = false)]
        public string FsymId { get; set; }

        /// <summary>
        /// Amount Outstanding Effective Date (out_amt_eff_date)
        /// </summary>
        /// <value>Amount Outstanding Effective Date (out_amt_eff_date)</value>
        [DataMember(Name = "outAmtEffDate", EmitDefaultValue = false)]
        [JsonConverter(typeof(OpenAPIDateConverter))]
        public DateTime OutAmtEffDate { get; set; }

        /// <summary>
        /// Amount Outstanding Currency
        /// </summary>
        /// <value>Amount Outstanding Currency</value>
        [DataMember(Name = "outAmtCurrency", EmitDefaultValue = false)]
        public string OutAmtCurrency { get; set; }

        /// <summary>
        /// Amount Outstanding
        /// </summary>
        /// <value>Amount Outstanding</value>
        [DataMember(Name = "outAmt", EmitDefaultValue = false)]
        public double OutAmt { get; set; }

        /// <summary>
        /// Amount Outstanding Action Amount
        /// </summary>
        /// <value>Amount Outstanding Action Amount</value>
        [DataMember(Name = "outAmtChange", EmitDefaultValue = false)]
        public double OutAmtChange { get; set; }

        /// <summary>
        /// Price - Amount Outstanding Action
        /// </summary>
        /// <value>Price - Amount Outstanding Action</value>
        [DataMember(Name = "outAmtChangePrice", EmitDefaultValue = false)]
        public double OutAmtChangePrice { get; set; }

        /// <summary>
        /// Amount Outstanding Action Type
        /// </summary>
        /// <value>Amount Outstanding Action Type</value>
        [DataMember(Name = "outAmtChangeType", EmitDefaultValue = false)]
        public string OutAmtChangeType { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class IssueSize {\n");
            sb.Append("  RequestId: ").Append(RequestId).Append("\n");
            sb.Append("  FsymId: ").Append(FsymId).Append("\n");
            sb.Append("  OutAmtEffDate: ").Append(OutAmtEffDate).Append("\n");
            sb.Append("  OutAmtCurrency: ").Append(OutAmtCurrency).Append("\n");
            sb.Append("  OutAmt: ").Append(OutAmt).Append("\n");
            sb.Append("  OutAmtChange: ").Append(OutAmtChange).Append("\n");
            sb.Append("  OutAmtChangePrice: ").Append(OutAmtChangePrice).Append("\n");
            sb.Append("  OutAmtChangeType: ").Append(OutAmtChangeType).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as IssueSize);
        }

        /// <summary>
        /// Returns true if IssueSize instances are equal
        /// </summary>
        /// <param name="input">Instance of IssueSize to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(IssueSize input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.RequestId == input.RequestId ||
                    (this.RequestId != null &&
                    this.RequestId.Equals(input.RequestId))
                ) && 
                (
                    this.FsymId == input.FsymId ||
                    (this.FsymId != null &&
                    this.FsymId.Equals(input.FsymId))
                ) && 
                (
                    this.OutAmtEffDate == input.OutAmtEffDate ||
                    (this.OutAmtEffDate != null &&
                    this.OutAmtEffDate.Equals(input.OutAmtEffDate))
                ) && 
                (
                    this.OutAmtCurrency == input.OutAmtCurrency ||
                    (this.OutAmtCurrency != null &&
                    this.OutAmtCurrency.Equals(input.OutAmtCurrency))
                ) && 
                (
                    this.OutAmt == input.OutAmt ||
                    this.OutAmt.Equals(input.OutAmt)
                ) && 
                (
                    this.OutAmtChange == input.OutAmtChange ||
                    this.OutAmtChange.Equals(input.OutAmtChange)
                ) && 
                (
                    this.OutAmtChangePrice == input.OutAmtChangePrice ||
                    this.OutAmtChangePrice.Equals(input.OutAmtChangePrice)
                ) && 
                (
                    this.OutAmtChangeType == input.OutAmtChangeType ||
                    (this.OutAmtChangeType != null &&
                    this.OutAmtChangeType.Equals(input.OutAmtChangeType))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.RequestId != null)
                {
                    hashCode = (hashCode * 59) + this.RequestId.GetHashCode();
                }
                if (this.FsymId != null)
                {
                    hashCode = (hashCode * 59) + this.FsymId.GetHashCode();
                }
                if (this.OutAmtEffDate != null)
                {
                    hashCode = (hashCode * 59) + this.OutAmtEffDate.GetHashCode();
                }
                if (this.OutAmtCurrency != null)
                {
                    hashCode = (hashCode * 59) + this.OutAmtCurrency.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.OutAmt.GetHashCode();
                hashCode = (hashCode * 59) + this.OutAmtChange.GetHashCode();
                hashCode = (hashCode * 59) + this.OutAmtChangePrice.GetHashCode();
                if (this.OutAmtChangeType != null)
                {
                    hashCode = (hashCode * 59) + this.OutAmtChangeType.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
