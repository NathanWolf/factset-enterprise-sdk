/*
 * FactSet Terms & Conditions API
 *
 * The FactSet Terms & Conditions API exposes Terms & Conditions data for Fixed Income Corporate, Governement & Agency securities. The FactSet Corporate Government & Agency Terms & Conditions library provides descriptive data on the issue level, such as offering details, redemption information, and coupon schedules. Issuer level data is also available. Coverage is global and includes corporate, sovereign, and agency issues. 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: api@factset.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using FactSet.SDK.FactSetTermsandConditions.Client;
using FactSet.SDK.FactSetTermsandConditions.Model;
using FactSet.SDK.Utils.Authentication;

namespace FactSet.SDK.FactSetTermsandConditions.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IRedemptionsApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Return Redemption Prices for a Fixed Income security.
        /// </summary>
        /// <remarks>
        /// Returns Redemption Prices for the Fixed Income security. 
        /// </remarks>
        /// <exception cref="FactSet.SDK.FactSetTermsandConditions.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">List of Fixed Income Security identifiers. Supported symbol types include CUSIP, SEDOL, ISIN, and FactSet Security Permanent Identifier (-S).  **ID LIMIT &#x3D; 250** *per request*. </param>
        /// <param name="categories">Filters the list of Redemption Prices Categories -   * **CALL** &#x3D; Call prices.   * **PUT** &#x3D; Put prices.   * **SF** &#x3D; Sinking Fund prices. </param>
        /// <returns>RedemptionPricesResponse</returns>
        RedemptionPricesResponse GetFixedIncomeRedemptionPrices(List<string> ids, string categories);

        /// <summary>
        /// Return Redemption Prices for a Fixed Income security.
        /// </summary>
        /// <remarks>
        /// Returns Redemption Prices for the Fixed Income security. 
        /// </remarks>
        /// <exception cref="FactSet.SDK.FactSetTermsandConditions.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">List of Fixed Income Security identifiers. Supported symbol types include CUSIP, SEDOL, ISIN, and FactSet Security Permanent Identifier (-S).  **ID LIMIT &#x3D; 250** *per request*. </param>
        /// <param name="categories">Filters the list of Redemption Prices Categories -   * **CALL** &#x3D; Call prices.   * **PUT** &#x3D; Put prices.   * **SF** &#x3D; Sinking Fund prices. </param>
        /// <returns>ApiResponse of RedemptionPricesResponse</returns>
        ApiResponse<RedemptionPricesResponse> GetFixedIncomeRedemptionPricesWithHttpInfo(List<string> ids, string categories);
        /// <summary>
        /// Return Redemption Prices for a list of Fixed Income securities.
        /// </summary>
        /// <remarks>
        /// Returns Redemption Prices for a list of Fixed Income securities. 
        /// </remarks>
        /// <exception cref="FactSet.SDK.FactSetTermsandConditions.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="redemptionPricesRequest">Request object for Fixed Income Redemption Prices.</param>
        /// <returns>RedemptionPricesResponse</returns>
        RedemptionPricesResponse GetFixedIncomeRedemptionPricesForList(RedemptionPricesRequest redemptionPricesRequest);

        /// <summary>
        /// Return Redemption Prices for a list of Fixed Income securities.
        /// </summary>
        /// <remarks>
        /// Returns Redemption Prices for a list of Fixed Income securities. 
        /// </remarks>
        /// <exception cref="FactSet.SDK.FactSetTermsandConditions.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="redemptionPricesRequest">Request object for Fixed Income Redemption Prices.</param>
        /// <returns>ApiResponse of RedemptionPricesResponse</returns>
        ApiResponse<RedemptionPricesResponse> GetFixedIncomeRedemptionPricesForListWithHttpInfo(RedemptionPricesRequest redemptionPricesRequest);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IRedemptionsApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Return Redemption Prices for a Fixed Income security.
        /// </summary>
        /// <remarks>
        /// Returns Redemption Prices for the Fixed Income security. 
        /// </remarks>
        /// <exception cref="FactSet.SDK.FactSetTermsandConditions.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">List of Fixed Income Security identifiers. Supported symbol types include CUSIP, SEDOL, ISIN, and FactSet Security Permanent Identifier (-S).  **ID LIMIT &#x3D; 250** *per request*. </param>
        /// <param name="categories">Filters the list of Redemption Prices Categories -   * **CALL** &#x3D; Call prices.   * **PUT** &#x3D; Put prices.   * **SF** &#x3D; Sinking Fund prices. </param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RedemptionPricesResponse</returns>
        System.Threading.Tasks.Task<RedemptionPricesResponse> GetFixedIncomeRedemptionPricesAsync(List<string> ids, string categories, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Return Redemption Prices for a Fixed Income security.
        /// </summary>
        /// <remarks>
        /// Returns Redemption Prices for the Fixed Income security. 
        /// </remarks>
        /// <exception cref="FactSet.SDK.FactSetTermsandConditions.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">List of Fixed Income Security identifiers. Supported symbol types include CUSIP, SEDOL, ISIN, and FactSet Security Permanent Identifier (-S).  **ID LIMIT &#x3D; 250** *per request*. </param>
        /// <param name="categories">Filters the list of Redemption Prices Categories -   * **CALL** &#x3D; Call prices.   * **PUT** &#x3D; Put prices.   * **SF** &#x3D; Sinking Fund prices. </param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RedemptionPricesResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<RedemptionPricesResponse>> GetFixedIncomeRedemptionPricesWithHttpInfoAsync(List<string> ids, string categories, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Return Redemption Prices for a list of Fixed Income securities.
        /// </summary>
        /// <remarks>
        /// Returns Redemption Prices for a list of Fixed Income securities. 
        /// </remarks>
        /// <exception cref="FactSet.SDK.FactSetTermsandConditions.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="redemptionPricesRequest">Request object for Fixed Income Redemption Prices.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RedemptionPricesResponse</returns>
        System.Threading.Tasks.Task<RedemptionPricesResponse> GetFixedIncomeRedemptionPricesForListAsync(RedemptionPricesRequest redemptionPricesRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Return Redemption Prices for a list of Fixed Income securities.
        /// </summary>
        /// <remarks>
        /// Returns Redemption Prices for a list of Fixed Income securities. 
        /// </remarks>
        /// <exception cref="FactSet.SDK.FactSetTermsandConditions.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="redemptionPricesRequest">Request object for Fixed Income Redemption Prices.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RedemptionPricesResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<RedemptionPricesResponse>> GetFixedIncomeRedemptionPricesForListWithHttpInfoAsync(RedemptionPricesRequest redemptionPricesRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IRedemptionsApi : IRedemptionsApiSync, IRedemptionsApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class RedemptionsApi : IRedemptionsApi
    {
        private FactSet.SDK.FactSetTermsandConditions.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        # region Response Type Disctionaries
                private static readonly Dictionary<HttpStatusCode, System.Type> GetFixedIncomeRedemptionPricesResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)200, typeof(RedemptionPricesResponse) },
            { (HttpStatusCode)400, typeof(ErrorResponse) },
            { (HttpStatusCode)401, typeof(ErrorResponse) },
            { (HttpStatusCode)403, typeof(ErrorResponse) },
            { (HttpStatusCode)415, typeof(ErrorResponse) },
            { (HttpStatusCode)500, typeof(ErrorResponse) },
        };
        private static readonly Dictionary<HttpStatusCode, System.Type> GetFixedIncomeRedemptionPricesForListResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)200, typeof(RedemptionPricesResponse) },
            { (HttpStatusCode)400, typeof(ErrorResponse) },
            { (HttpStatusCode)401, typeof(ErrorResponse) },
            { (HttpStatusCode)403, typeof(ErrorResponse) },
            { (HttpStatusCode)415, typeof(ErrorResponse) },
            { (HttpStatusCode)500, typeof(ErrorResponse) },
        };

        # endregion Response Type Disctionaries

        # region Api Response Objects
         

        # endregion Api Response Objects

        /// <summary>
        /// Initializes a new instance of the <see cref="RedemptionsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public RedemptionsApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="RedemptionsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public RedemptionsApi(string basePath)
        {
            this.Configuration = FactSet.SDK.FactSetTermsandConditions.Client.Configuration.MergeConfigurations(
                FactSet.SDK.FactSetTermsandConditions.Client.GlobalConfiguration.Instance,
                new FactSet.SDK.FactSetTermsandConditions.Client.Configuration { BasePath = basePath }
            );
            this.Client = new FactSet.SDK.FactSetTermsandConditions.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new FactSet.SDK.FactSetTermsandConditions.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = FactSet.SDK.FactSetTermsandConditions.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="RedemptionsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public RedemptionsApi(FactSet.SDK.FactSetTermsandConditions.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = FactSet.SDK.FactSetTermsandConditions.Client.Configuration.MergeConfigurations(
                FactSet.SDK.FactSetTermsandConditions.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new FactSet.SDK.FactSetTermsandConditions.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new FactSet.SDK.FactSetTermsandConditions.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = FactSet.SDK.FactSetTermsandConditions.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="RedemptionsApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public RedemptionsApi(FactSet.SDK.FactSetTermsandConditions.Client.ISynchronousClient client, FactSet.SDK.FactSetTermsandConditions.Client.IAsynchronousClient asyncClient, FactSet.SDK.FactSetTermsandConditions.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = FactSet.SDK.FactSetTermsandConditions.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public FactSet.SDK.FactSetTermsandConditions.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public FactSet.SDK.FactSetTermsandConditions.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public FactSet.SDK.FactSetTermsandConditions.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public FactSet.SDK.FactSetTermsandConditions.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Return Redemption Prices for a Fixed Income security. Returns Redemption Prices for the Fixed Income security. 
        /// </summary>
        /// <exception cref="FactSet.SDK.FactSetTermsandConditions.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">List of Fixed Income Security identifiers. Supported symbol types include CUSIP, SEDOL, ISIN, and FactSet Security Permanent Identifier (-S).  **ID LIMIT &#x3D; 250** *per request*. </param>
        /// <param name="categories">Filters the list of Redemption Prices Categories -   * **CALL** &#x3D; Call prices.   * **PUT** &#x3D; Put prices.   * **SF** &#x3D; Sinking Fund prices. </param>
        /// <returns>RedemptionPricesResponse</returns>
        public RedemptionPricesResponse GetFixedIncomeRedemptionPrices(List<string> ids, string categories)
        {
            var localVarResponse = GetFixedIncomeRedemptionPricesWithHttpInfo(ids, categories);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Return Redemption Prices for a Fixed Income security. Returns Redemption Prices for the Fixed Income security. 
        /// </summary>
        /// <exception cref="FactSet.SDK.FactSetTermsandConditions.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">List of Fixed Income Security identifiers. Supported symbol types include CUSIP, SEDOL, ISIN, and FactSet Security Permanent Identifier (-S).  **ID LIMIT &#x3D; 250** *per request*. </param>
        /// <param name="categories">Filters the list of Redemption Prices Categories -   * **CALL** &#x3D; Call prices.   * **PUT** &#x3D; Put prices.   * **SF** &#x3D; Sinking Fund prices. </param>
        /// <returns>ApiResponse of RedemptionPricesResponse</returns>
        public ApiResponse<RedemptionPricesResponse> GetFixedIncomeRedemptionPricesWithHttpInfo(List<string> ids, string categories)
        {
            // verify the required parameter 'ids' is set
            if (ids == null)
            {
                throw new FactSet.SDK.FactSetTermsandConditions.Client.ApiException(400, "Missing required parameter 'ids' when calling RedemptionsApi->GetFixedIncomeRedemptionPrices");
            }

            // verify the required parameter 'categories' is set
            if (categories == null)
            {
                throw new FactSet.SDK.FactSetTermsandConditions.Client.ApiException(400, "Missing required parameter 'categories' when calling RedemptionsApi->GetFixedIncomeRedemptionPrices");
            }

            FactSet.SDK.FactSetTermsandConditions.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.FactSetTermsandConditions.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.FactSetTermsandConditions.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.FactSetTermsandConditions.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.FactSetTermsandConditions.Client.ClientUtils.ParameterToMultiMap("csv", "ids", ids));
            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.FactSetTermsandConditions.Client.ClientUtils.ParameterToMultiMap("", "categories", categories));

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.FactSetTermsandConditions.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = GetFixedIncomeRedemptionPricesResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Get<
            RedemptionPricesResponse>("/factset-terms-and-conditions/v1/redemption-prices", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetFixedIncomeRedemptionPrices", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// Return Redemption Prices for a Fixed Income security. Returns Redemption Prices for the Fixed Income security. 
        /// </summary>
        /// <exception cref="FactSet.SDK.FactSetTermsandConditions.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">List of Fixed Income Security identifiers. Supported symbol types include CUSIP, SEDOL, ISIN, and FactSet Security Permanent Identifier (-S).  **ID LIMIT &#x3D; 250** *per request*. </param>
        /// <param name="categories">Filters the list of Redemption Prices Categories -   * **CALL** &#x3D; Call prices.   * **PUT** &#x3D; Put prices.   * **SF** &#x3D; Sinking Fund prices. </param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RedemptionPricesResponse</returns>
        public async System.Threading.Tasks.Task<RedemptionPricesResponse>GetFixedIncomeRedemptionPricesAsync(List<string> ids, string categories, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await GetFixedIncomeRedemptionPricesWithHttpInfoAsync(ids, categories, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Return Redemption Prices for a Fixed Income security. Returns Redemption Prices for the Fixed Income security. 
        /// </summary>
        /// <exception cref="FactSet.SDK.FactSetTermsandConditions.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">List of Fixed Income Security identifiers. Supported symbol types include CUSIP, SEDOL, ISIN, and FactSet Security Permanent Identifier (-S).  **ID LIMIT &#x3D; 250** *per request*. </param>
        /// <param name="categories">Filters the list of Redemption Prices Categories -   * **CALL** &#x3D; Call prices.   * **PUT** &#x3D; Put prices.   * **SF** &#x3D; Sinking Fund prices. </param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RedemptionPricesResponse)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<RedemptionPricesResponse>> GetFixedIncomeRedemptionPricesWithHttpInfoAsync(List<string> ids, string categories, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'ids' is set
            if (ids == null)
            {
                throw new FactSet.SDK.FactSetTermsandConditions.Client.ApiException(400, "Missing required parameter 'ids' when calling RedemptionsApi->GetFixedIncomeRedemptionPrices");
            }

            // verify the required parameter 'categories' is set
            if (categories == null)
            {
                throw new FactSet.SDK.FactSetTermsandConditions.Client.ApiException(400, "Missing required parameter 'categories' when calling RedemptionsApi->GetFixedIncomeRedemptionPrices");
            }


            FactSet.SDK.FactSetTermsandConditions.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.FactSetTermsandConditions.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.FactSetTermsandConditions.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.FactSetTermsandConditions.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.FactSetTermsandConditions.Client.ClientUtils.ParameterToMultiMap("csv", "ids", ids));
            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.FactSetTermsandConditions.Client.ClientUtils.ParameterToMultiMap("", "categories", categories));

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.FactSetTermsandConditions.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = GetFixedIncomeRedemptionPricesResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<RedemptionPricesResponse>("/factset-terms-and-conditions/v1/redemption-prices", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetFixedIncomeRedemptionPrices", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Return Redemption Prices for a list of Fixed Income securities. Returns Redemption Prices for a list of Fixed Income securities. 
        /// </summary>
        /// <exception cref="FactSet.SDK.FactSetTermsandConditions.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="redemptionPricesRequest">Request object for Fixed Income Redemption Prices.</param>
        /// <returns>RedemptionPricesResponse</returns>
        public RedemptionPricesResponse GetFixedIncomeRedemptionPricesForList(RedemptionPricesRequest redemptionPricesRequest)
        {
            var localVarResponse = GetFixedIncomeRedemptionPricesForListWithHttpInfo(redemptionPricesRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Return Redemption Prices for a list of Fixed Income securities. Returns Redemption Prices for a list of Fixed Income securities. 
        /// </summary>
        /// <exception cref="FactSet.SDK.FactSetTermsandConditions.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="redemptionPricesRequest">Request object for Fixed Income Redemption Prices.</param>
        /// <returns>ApiResponse of RedemptionPricesResponse</returns>
        public ApiResponse<RedemptionPricesResponse> GetFixedIncomeRedemptionPricesForListWithHttpInfo(RedemptionPricesRequest redemptionPricesRequest)
        {
            // verify the required parameter 'redemptionPricesRequest' is set
            if (redemptionPricesRequest == null)
            {
                throw new FactSet.SDK.FactSetTermsandConditions.Client.ApiException(400, "Missing required parameter 'redemptionPricesRequest' when calling RedemptionsApi->GetFixedIncomeRedemptionPricesForList");
            }

            FactSet.SDK.FactSetTermsandConditions.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.FactSetTermsandConditions.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.FactSetTermsandConditions.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.FactSetTermsandConditions.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = redemptionPricesRequest;

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.FactSetTermsandConditions.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = GetFixedIncomeRedemptionPricesForListResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Post<
            RedemptionPricesResponse>("/factset-terms-and-conditions/v1/redemption-prices", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetFixedIncomeRedemptionPricesForList", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// Return Redemption Prices for a list of Fixed Income securities. Returns Redemption Prices for a list of Fixed Income securities. 
        /// </summary>
        /// <exception cref="FactSet.SDK.FactSetTermsandConditions.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="redemptionPricesRequest">Request object for Fixed Income Redemption Prices.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RedemptionPricesResponse</returns>
        public async System.Threading.Tasks.Task<RedemptionPricesResponse>GetFixedIncomeRedemptionPricesForListAsync(RedemptionPricesRequest redemptionPricesRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await GetFixedIncomeRedemptionPricesForListWithHttpInfoAsync(redemptionPricesRequest, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Return Redemption Prices for a list of Fixed Income securities. Returns Redemption Prices for a list of Fixed Income securities. 
        /// </summary>
        /// <exception cref="FactSet.SDK.FactSetTermsandConditions.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="redemptionPricesRequest">Request object for Fixed Income Redemption Prices.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RedemptionPricesResponse)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<RedemptionPricesResponse>> GetFixedIncomeRedemptionPricesForListWithHttpInfoAsync(RedemptionPricesRequest redemptionPricesRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'redemptionPricesRequest' is set
            if (redemptionPricesRequest == null)
            {
                throw new FactSet.SDK.FactSetTermsandConditions.Client.ApiException(400, "Missing required parameter 'redemptionPricesRequest' when calling RedemptionsApi->GetFixedIncomeRedemptionPricesForList");
            }


            FactSet.SDK.FactSetTermsandConditions.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.FactSetTermsandConditions.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.FactSetTermsandConditions.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.FactSetTermsandConditions.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = redemptionPricesRequest;

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.FactSetTermsandConditions.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = GetFixedIncomeRedemptionPricesForListResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<RedemptionPricesResponse>("/factset-terms-and-conditions/v1/redemption-prices", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetFixedIncomeRedemptionPricesForList", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
