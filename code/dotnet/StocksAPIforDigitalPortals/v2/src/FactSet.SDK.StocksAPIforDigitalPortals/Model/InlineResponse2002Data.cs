/*
 * Prime Developer Trial
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = FactSet.SDK.StocksAPIforDigitalPortals.Client.OpenAPIDateConverter;

namespace FactSet.SDK.StocksAPIforDigitalPortals.Model
{
    /// <summary>
    /// InlineResponse2002Data
    /// </summary>
    [DataContract(Name = "inline_response_200_2_data")]
    public partial class InlineResponse2002Data : IEquatable<InlineResponse2002Data>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="InlineResponse2002Data" /> class.
        /// </summary>
        /// <param name="notation">notation.</param>
        /// <param name="beta">Beta of the notation..</param>
        /// <param name="correlation">Correlation of the notation..</param>
        /// <param name="outperformance">Outperformance of the notation..</param>
        /// <param name="relativeStrength">Relative strength of the notation..</param>
        /// <param name="status">status.</param>
        public InlineResponse2002Data(InlineResponse2002Notation notation = default(InlineResponse2002Notation), decimal beta = default(decimal), decimal correlation = default(decimal), decimal outperformance = default(decimal), decimal relativeStrength = default(decimal), InlineResponse2002Status status = default(InlineResponse2002Status))
        {
            this.Notation = notation;
            this.Beta = beta;
            this.Correlation = correlation;
            this.Outperformance = outperformance;
            this.RelativeStrength = relativeStrength;
            this.Status = status;
        }

        /// <summary>
        /// Gets or Sets Notation
        /// </summary>
        [DataMember(Name = "notation", EmitDefaultValue = false)]
        public InlineResponse2002Notation Notation { get; set; }

        /// <summary>
        /// Beta of the notation.
        /// </summary>
        /// <value>Beta of the notation.</value>
        [DataMember(Name = "beta", EmitDefaultValue = false)]
        public decimal Beta { get; set; }

        /// <summary>
        /// Correlation of the notation.
        /// </summary>
        /// <value>Correlation of the notation.</value>
        [DataMember(Name = "correlation", EmitDefaultValue = false)]
        public decimal Correlation { get; set; }

        /// <summary>
        /// Outperformance of the notation.
        /// </summary>
        /// <value>Outperformance of the notation.</value>
        [DataMember(Name = "outperformance", EmitDefaultValue = false)]
        public decimal Outperformance { get; set; }

        /// <summary>
        /// Relative strength of the notation.
        /// </summary>
        /// <value>Relative strength of the notation.</value>
        [DataMember(Name = "relativeStrength", EmitDefaultValue = false)]
        public decimal RelativeStrength { get; set; }

        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [DataMember(Name = "status", EmitDefaultValue = false)]
        public InlineResponse2002Status Status { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class InlineResponse2002Data {\n");
            sb.Append("  Notation: ").Append(Notation).Append("\n");
            sb.Append("  Beta: ").Append(Beta).Append("\n");
            sb.Append("  Correlation: ").Append(Correlation).Append("\n");
            sb.Append("  Outperformance: ").Append(Outperformance).Append("\n");
            sb.Append("  RelativeStrength: ").Append(RelativeStrength).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as InlineResponse2002Data);
        }

        /// <summary>
        /// Returns true if InlineResponse2002Data instances are equal
        /// </summary>
        /// <param name="input">Instance of InlineResponse2002Data to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(InlineResponse2002Data input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Notation == input.Notation ||
                    (this.Notation != null &&
                    this.Notation.Equals(input.Notation))
                ) && 
                (
                    this.Beta == input.Beta ||
                    this.Beta.Equals(input.Beta)
                ) && 
                (
                    this.Correlation == input.Correlation ||
                    this.Correlation.Equals(input.Correlation)
                ) && 
                (
                    this.Outperformance == input.Outperformance ||
                    this.Outperformance.Equals(input.Outperformance)
                ) && 
                (
                    this.RelativeStrength == input.RelativeStrength ||
                    this.RelativeStrength.Equals(input.RelativeStrength)
                ) && 
                (
                    this.Status == input.Status ||
                    (this.Status != null &&
                    this.Status.Equals(input.Status))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Notation != null)
                    hashCode = hashCode * 59 + this.Notation.GetHashCode();
                hashCode = hashCode * 59 + this.Beta.GetHashCode();
                hashCode = hashCode * 59 + this.Correlation.GetHashCode();
                hashCode = hashCode * 59 + this.Outperformance.GetHashCode();
                hashCode = hashCode * 59 + this.RelativeStrength.GetHashCode();
                if (this.Status != null)
                    hashCode = hashCode * 59 + this.Status.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
