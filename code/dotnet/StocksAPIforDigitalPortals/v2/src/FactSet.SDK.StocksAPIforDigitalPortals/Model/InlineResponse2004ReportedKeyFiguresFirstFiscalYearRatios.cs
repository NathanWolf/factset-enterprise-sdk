/*
 * Prime Developer Trial
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = FactSet.SDK.StocksAPIforDigitalPortals.Client.OpenAPIDateConverter;

namespace FactSet.SDK.StocksAPIforDigitalPortals.Model
{
    /// <summary>
    /// Ratios.
    /// </summary>
    [DataContract(Name = "inline_response_200_4_reportedKeyFigures_firstFiscalYear_ratios")]
    public partial class InlineResponse2004ReportedKeyFiguresFirstFiscalYearRatios : IEquatable<InlineResponse2004ReportedKeyFiguresFirstFiscalYearRatios>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="InlineResponse2004ReportedKeyFiguresFirstFiscalYearRatios" /> class.
        /// </summary>
        /// <param name="priceSales">Ratio of the price, divided by the total sales revenue per share..</param>
        /// <param name="priceEarnings">Ratio of the price, divided by the reported earnings per share (basic or diluted) by the company..</param>
        /// <param name="priceBookValue">Ratio of the price, divided by the book value per share..</param>
        /// <param name="priceCashFlow">Ratio of the price, divided by the cash flow per share..</param>
        /// <param name="priceFreeCashFlow">Ratio of the price, divided by the free (i.e. without subtraction of dividends) cash flow per share..</param>
        /// <param name="dividendYield">Ratio of the dividend per share, divided by the price..</param>
        /// <param name="enterpriseValueEbit">Ratio of the enterprise value, divided by the EBIT..</param>
        /// <param name="enterpriseValueEbitda">Ratio of the enterprise value, divided by the EBITDA..</param>
        /// <param name="enterpriseValueSales">Ratio of the enterprise value, divided by the total amount of sales revenue..</param>
        /// <param name="debtEquity">Total-debt-to-total-equity ratio, which is the ratio of the total debt, divided by the total shareholders&#39; equity..</param>
        public InlineResponse2004ReportedKeyFiguresFirstFiscalYearRatios(decimal priceSales = default(decimal), decimal priceEarnings = default(decimal), decimal priceBookValue = default(decimal), decimal priceCashFlow = default(decimal), decimal priceFreeCashFlow = default(decimal), decimal dividendYield = default(decimal), decimal enterpriseValueEbit = default(decimal), decimal enterpriseValueEbitda = default(decimal), decimal enterpriseValueSales = default(decimal), decimal debtEquity = default(decimal))
        {
            this.PriceSales = priceSales;
            this.PriceEarnings = priceEarnings;
            this.PriceBookValue = priceBookValue;
            this.PriceCashFlow = priceCashFlow;
            this.PriceFreeCashFlow = priceFreeCashFlow;
            this.DividendYield = dividendYield;
            this.EnterpriseValueEbit = enterpriseValueEbit;
            this.EnterpriseValueEbitda = enterpriseValueEbitda;
            this.EnterpriseValueSales = enterpriseValueSales;
            this.DebtEquity = debtEquity;
        }

        /// <summary>
        /// Ratio of the price, divided by the total sales revenue per share.
        /// </summary>
        /// <value>Ratio of the price, divided by the total sales revenue per share.</value>
        [DataMember(Name = "priceSales", EmitDefaultValue = false)]
        public decimal PriceSales { get; set; }

        /// <summary>
        /// Ratio of the price, divided by the reported earnings per share (basic or diluted) by the company.
        /// </summary>
        /// <value>Ratio of the price, divided by the reported earnings per share (basic or diluted) by the company.</value>
        [DataMember(Name = "priceEarnings", EmitDefaultValue = false)]
        public decimal PriceEarnings { get; set; }

        /// <summary>
        /// Ratio of the price, divided by the book value per share.
        /// </summary>
        /// <value>Ratio of the price, divided by the book value per share.</value>
        [DataMember(Name = "priceBookValue", EmitDefaultValue = false)]
        public decimal PriceBookValue { get; set; }

        /// <summary>
        /// Ratio of the price, divided by the cash flow per share.
        /// </summary>
        /// <value>Ratio of the price, divided by the cash flow per share.</value>
        [DataMember(Name = "priceCashFlow", EmitDefaultValue = false)]
        public decimal PriceCashFlow { get; set; }

        /// <summary>
        /// Ratio of the price, divided by the free (i.e. without subtraction of dividends) cash flow per share.
        /// </summary>
        /// <value>Ratio of the price, divided by the free (i.e. without subtraction of dividends) cash flow per share.</value>
        [DataMember(Name = "priceFreeCashFlow", EmitDefaultValue = false)]
        public decimal PriceFreeCashFlow { get; set; }

        /// <summary>
        /// Ratio of the dividend per share, divided by the price.
        /// </summary>
        /// <value>Ratio of the dividend per share, divided by the price.</value>
        [DataMember(Name = "dividendYield", EmitDefaultValue = false)]
        public decimal DividendYield { get; set; }

        /// <summary>
        /// Ratio of the enterprise value, divided by the EBIT.
        /// </summary>
        /// <value>Ratio of the enterprise value, divided by the EBIT.</value>
        [DataMember(Name = "enterpriseValueEbit", EmitDefaultValue = false)]
        public decimal EnterpriseValueEbit { get; set; }

        /// <summary>
        /// Ratio of the enterprise value, divided by the EBITDA.
        /// </summary>
        /// <value>Ratio of the enterprise value, divided by the EBITDA.</value>
        [DataMember(Name = "enterpriseValueEbitda", EmitDefaultValue = false)]
        public decimal EnterpriseValueEbitda { get; set; }

        /// <summary>
        /// Ratio of the enterprise value, divided by the total amount of sales revenue.
        /// </summary>
        /// <value>Ratio of the enterprise value, divided by the total amount of sales revenue.</value>
        [DataMember(Name = "enterpriseValueSales", EmitDefaultValue = false)]
        public decimal EnterpriseValueSales { get; set; }

        /// <summary>
        /// Total-debt-to-total-equity ratio, which is the ratio of the total debt, divided by the total shareholders&#39; equity.
        /// </summary>
        /// <value>Total-debt-to-total-equity ratio, which is the ratio of the total debt, divided by the total shareholders&#39; equity.</value>
        [DataMember(Name = "debtEquity", EmitDefaultValue = false)]
        public decimal DebtEquity { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class InlineResponse2004ReportedKeyFiguresFirstFiscalYearRatios {\n");
            sb.Append("  PriceSales: ").Append(PriceSales).Append("\n");
            sb.Append("  PriceEarnings: ").Append(PriceEarnings).Append("\n");
            sb.Append("  PriceBookValue: ").Append(PriceBookValue).Append("\n");
            sb.Append("  PriceCashFlow: ").Append(PriceCashFlow).Append("\n");
            sb.Append("  PriceFreeCashFlow: ").Append(PriceFreeCashFlow).Append("\n");
            sb.Append("  DividendYield: ").Append(DividendYield).Append("\n");
            sb.Append("  EnterpriseValueEbit: ").Append(EnterpriseValueEbit).Append("\n");
            sb.Append("  EnterpriseValueEbitda: ").Append(EnterpriseValueEbitda).Append("\n");
            sb.Append("  EnterpriseValueSales: ").Append(EnterpriseValueSales).Append("\n");
            sb.Append("  DebtEquity: ").Append(DebtEquity).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as InlineResponse2004ReportedKeyFiguresFirstFiscalYearRatios);
        }

        /// <summary>
        /// Returns true if InlineResponse2004ReportedKeyFiguresFirstFiscalYearRatios instances are equal
        /// </summary>
        /// <param name="input">Instance of InlineResponse2004ReportedKeyFiguresFirstFiscalYearRatios to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(InlineResponse2004ReportedKeyFiguresFirstFiscalYearRatios input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.PriceSales == input.PriceSales ||
                    this.PriceSales.Equals(input.PriceSales)
                ) && 
                (
                    this.PriceEarnings == input.PriceEarnings ||
                    this.PriceEarnings.Equals(input.PriceEarnings)
                ) && 
                (
                    this.PriceBookValue == input.PriceBookValue ||
                    this.PriceBookValue.Equals(input.PriceBookValue)
                ) && 
                (
                    this.PriceCashFlow == input.PriceCashFlow ||
                    this.PriceCashFlow.Equals(input.PriceCashFlow)
                ) && 
                (
                    this.PriceFreeCashFlow == input.PriceFreeCashFlow ||
                    this.PriceFreeCashFlow.Equals(input.PriceFreeCashFlow)
                ) && 
                (
                    this.DividendYield == input.DividendYield ||
                    this.DividendYield.Equals(input.DividendYield)
                ) && 
                (
                    this.EnterpriseValueEbit == input.EnterpriseValueEbit ||
                    this.EnterpriseValueEbit.Equals(input.EnterpriseValueEbit)
                ) && 
                (
                    this.EnterpriseValueEbitda == input.EnterpriseValueEbitda ||
                    this.EnterpriseValueEbitda.Equals(input.EnterpriseValueEbitda)
                ) && 
                (
                    this.EnterpriseValueSales == input.EnterpriseValueSales ||
                    this.EnterpriseValueSales.Equals(input.EnterpriseValueSales)
                ) && 
                (
                    this.DebtEquity == input.DebtEquity ||
                    this.DebtEquity.Equals(input.DebtEquity)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = hashCode * 59 + this.PriceSales.GetHashCode();
                hashCode = hashCode * 59 + this.PriceEarnings.GetHashCode();
                hashCode = hashCode * 59 + this.PriceBookValue.GetHashCode();
                hashCode = hashCode * 59 + this.PriceCashFlow.GetHashCode();
                hashCode = hashCode * 59 + this.PriceFreeCashFlow.GetHashCode();
                hashCode = hashCode * 59 + this.DividendYield.GetHashCode();
                hashCode = hashCode * 59 + this.EnterpriseValueEbit.GetHashCode();
                hashCode = hashCode * 59 + this.EnterpriseValueEbitda.GetHashCode();
                hashCode = hashCode * 59 + this.EnterpriseValueSales.GetHashCode();
                hashCode = hashCode * 59 + this.DebtEquity.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
