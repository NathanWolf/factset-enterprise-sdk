/*
 * Prime Developer Trial
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = FactSet.SDK.StocksAPIforDigitalPortals.Client.OpenAPIDateConverter;

namespace FactSet.SDK.StocksAPIforDigitalPortals.Model
{
    /// <summary>
    /// Per-share figures.
    /// </summary>
    [DataContract(Name = "inline_response_200_4_reportedKeyFigures_firstFiscalYear_currencyDependentKeyFigures_perShare")]
    public partial class InlineResponse2004ReportedKeyFiguresFirstFiscalYearCurrencyDependentKeyFiguresPerShare : IEquatable<InlineResponse2004ReportedKeyFiguresFirstFiscalYearCurrencyDependentKeyFiguresPerShare>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="InlineResponse2004ReportedKeyFiguresFirstFiscalYearCurrencyDependentKeyFiguresPerShare" /> class.
        /// </summary>
        /// <param name="sales">Total sales revenue per share..</param>
        /// <param name="recurringDilutedEarnings">Recurring (excluding extraordinary items) diluted earnings per share, which is the ratio of the net income excluding extraordinary items, divided by the diluted shares outstanding. An extraordinary item is an atypical and infrequent gain or loss due to an unforeseeable event..</param>
        /// <param name="dividends">Dividends per share, which is the ratio of the total dividends paid out, divided by the shares outstanding. In general, the figure is based on the gross dividend, i.e. before taxes, except for countries with special tax regimes..</param>
        /// <param name="bookValue">Book value per share, which is the ratio of the book value (common equity), divided by the shares outstanding..</param>
        /// <param name="cashFlow">Cash flow per share, which is the ratio of the net operating cash flow, divided by the diluted shares outstanding..</param>
        public InlineResponse2004ReportedKeyFiguresFirstFiscalYearCurrencyDependentKeyFiguresPerShare(decimal sales = default(decimal), decimal recurringDilutedEarnings = default(decimal), decimal dividends = default(decimal), decimal bookValue = default(decimal), decimal cashFlow = default(decimal))
        {
            this.Sales = sales;
            this.RecurringDilutedEarnings = recurringDilutedEarnings;
            this.Dividends = dividends;
            this.BookValue = bookValue;
            this.CashFlow = cashFlow;
        }

        /// <summary>
        /// Total sales revenue per share.
        /// </summary>
        /// <value>Total sales revenue per share.</value>
        [DataMember(Name = "sales", EmitDefaultValue = false)]
        public decimal Sales { get; set; }

        /// <summary>
        /// Recurring (excluding extraordinary items) diluted earnings per share, which is the ratio of the net income excluding extraordinary items, divided by the diluted shares outstanding. An extraordinary item is an atypical and infrequent gain or loss due to an unforeseeable event.
        /// </summary>
        /// <value>Recurring (excluding extraordinary items) diluted earnings per share, which is the ratio of the net income excluding extraordinary items, divided by the diluted shares outstanding. An extraordinary item is an atypical and infrequent gain or loss due to an unforeseeable event.</value>
        [DataMember(Name = "recurringDilutedEarnings", EmitDefaultValue = false)]
        public decimal RecurringDilutedEarnings { get; set; }

        /// <summary>
        /// Dividends per share, which is the ratio of the total dividends paid out, divided by the shares outstanding. In general, the figure is based on the gross dividend, i.e. before taxes, except for countries with special tax regimes.
        /// </summary>
        /// <value>Dividends per share, which is the ratio of the total dividends paid out, divided by the shares outstanding. In general, the figure is based on the gross dividend, i.e. before taxes, except for countries with special tax regimes.</value>
        [DataMember(Name = "dividends", EmitDefaultValue = false)]
        public decimal Dividends { get; set; }

        /// <summary>
        /// Book value per share, which is the ratio of the book value (common equity), divided by the shares outstanding.
        /// </summary>
        /// <value>Book value per share, which is the ratio of the book value (common equity), divided by the shares outstanding.</value>
        [DataMember(Name = "bookValue", EmitDefaultValue = false)]
        public decimal BookValue { get; set; }

        /// <summary>
        /// Cash flow per share, which is the ratio of the net operating cash flow, divided by the diluted shares outstanding.
        /// </summary>
        /// <value>Cash flow per share, which is the ratio of the net operating cash flow, divided by the diluted shares outstanding.</value>
        [DataMember(Name = "cashFlow", EmitDefaultValue = false)]
        public decimal CashFlow { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class InlineResponse2004ReportedKeyFiguresFirstFiscalYearCurrencyDependentKeyFiguresPerShare {\n");
            sb.Append("  Sales: ").Append(Sales).Append("\n");
            sb.Append("  RecurringDilutedEarnings: ").Append(RecurringDilutedEarnings).Append("\n");
            sb.Append("  Dividends: ").Append(Dividends).Append("\n");
            sb.Append("  BookValue: ").Append(BookValue).Append("\n");
            sb.Append("  CashFlow: ").Append(CashFlow).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as InlineResponse2004ReportedKeyFiguresFirstFiscalYearCurrencyDependentKeyFiguresPerShare);
        }

        /// <summary>
        /// Returns true if InlineResponse2004ReportedKeyFiguresFirstFiscalYearCurrencyDependentKeyFiguresPerShare instances are equal
        /// </summary>
        /// <param name="input">Instance of InlineResponse2004ReportedKeyFiguresFirstFiscalYearCurrencyDependentKeyFiguresPerShare to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(InlineResponse2004ReportedKeyFiguresFirstFiscalYearCurrencyDependentKeyFiguresPerShare input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Sales == input.Sales ||
                    this.Sales.Equals(input.Sales)
                ) && 
                (
                    this.RecurringDilutedEarnings == input.RecurringDilutedEarnings ||
                    this.RecurringDilutedEarnings.Equals(input.RecurringDilutedEarnings)
                ) && 
                (
                    this.Dividends == input.Dividends ||
                    this.Dividends.Equals(input.Dividends)
                ) && 
                (
                    this.BookValue == input.BookValue ||
                    this.BookValue.Equals(input.BookValue)
                ) && 
                (
                    this.CashFlow == input.CashFlow ||
                    this.CashFlow.Equals(input.CashFlow)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.Sales.GetHashCode();
                hashCode = (hashCode * 59) + this.RecurringDilutedEarnings.GetHashCode();
                hashCode = (hashCode * 59) + this.Dividends.GetHashCode();
                hashCode = (hashCode * 59) + this.BookValue.GetHashCode();
                hashCode = (hashCode * 59) + this.CashFlow.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
