/*
 * Prime Developer Trial
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = FactSet.SDK.StocksAPIforDigitalPortals.Client.OpenAPIDateConverter;

namespace FactSet.SDK.StocksAPIforDigitalPortals.Model
{
    /// <summary>
    /// Possible values and value ranges of the parameters. 
    /// </summary>
    [DataContract(Name = "inline_response_200_5_data")]
    public partial class InlineResponse2005Data : IEquatable<InlineResponse2005Data>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="InlineResponse2005Data" /> class.
        /// </summary>
        /// <param name="totalCount">Number of notations that satisfy the request parameters, hence have been used to retrieve the possible values and value ranges..</param>
        /// <param name="valueUnit">List of value unit identifiers. See endpoint &#x60;/basic/valueUnit/list&#x60; for possible values..</param>
        /// <param name="market">List of market identifiers. See endpoint &#x60;/basic/market/list&#x60; for possible values..</param>
        /// <param name="stockType">List of stock types..</param>
        /// <param name="industryClassification">Lists of categories of the industry classification. Here, an industry is a category from any level of category system FactSet Revere Business Industry Classification System (RBICS). Starting with the most coarse level (one), for each level of the category system, the list of categories of the stocks, matching the parameters, is returned. See endpoint &#x60;/category/listBySystem&#x60; with &#x60;id&#x3D;48&#x60; for possible values..</param>
        /// <param name="company">company.</param>
        /// <param name="compliance">compliance.</param>
        /// <param name="reportedKeyFigures">reportedKeyFigures.</param>
        /// <param name="performance">performance.</param>
        /// <param name="volatility">volatility.</param>
        /// <param name="tradingValue">tradingValue.</param>
        /// <param name="simpleMovingAverage">simpleMovingAverage.</param>
        /// <param name="rsiWilder">rsiWilder.</param>
        /// <param name="recommendation">recommendation.</param>
        /// <param name="estimates">estimates.</param>
        public InlineResponse2005Data(decimal totalCount = default(decimal), List<InlineResponse2005DataValueUnit> valueUnit = default(List<InlineResponse2005DataValueUnit>), List<InlineResponse2005DataMarket> market = default(List<InlineResponse2005DataMarket>), List<InlineResponse2005DataStockType> stockType = default(List<InlineResponse2005DataStockType>), List<InlineResponse2005DataIndustryClassification> industryClassification = default(List<InlineResponse2005DataIndustryClassification>), InlineResponse2005DataCompany company = default(InlineResponse2005DataCompany), InlineResponse2005DataCompliance compliance = default(InlineResponse2005DataCompliance), InlineResponse2005DataReportedKeyFigures reportedKeyFigures = default(InlineResponse2005DataReportedKeyFigures), InlineResponse2005DataPerformance performance = default(InlineResponse2005DataPerformance), InlineResponse2005DataVolatility volatility = default(InlineResponse2005DataVolatility), InlineResponse2005DataTradingValue tradingValue = default(InlineResponse2005DataTradingValue), InlineResponse2005DataSimpleMovingAverage simpleMovingAverage = default(InlineResponse2005DataSimpleMovingAverage), InlineResponse2005DataRsiWilder rsiWilder = default(InlineResponse2005DataRsiWilder), InlineResponse2005DataRecommendation recommendation = default(InlineResponse2005DataRecommendation), InlineResponse2005DataEstimates estimates = default(InlineResponse2005DataEstimates))
        {
            this.TotalCount = totalCount;
            this.ValueUnit = valueUnit;
            this.Market = market;
            this.StockType = stockType;
            this.IndustryClassification = industryClassification;
            this.Company = company;
            this.Compliance = compliance;
            this.ReportedKeyFigures = reportedKeyFigures;
            this.Performance = performance;
            this.Volatility = volatility;
            this.TradingValue = tradingValue;
            this.SimpleMovingAverage = simpleMovingAverage;
            this.RsiWilder = rsiWilder;
            this.Recommendation = recommendation;
            this.Estimates = estimates;
        }

        /// <summary>
        /// Number of notations that satisfy the request parameters, hence have been used to retrieve the possible values and value ranges.
        /// </summary>
        /// <value>Number of notations that satisfy the request parameters, hence have been used to retrieve the possible values and value ranges.</value>
        [DataMember(Name = "totalCount", EmitDefaultValue = false)]
        public decimal TotalCount { get; set; }

        /// <summary>
        /// List of value unit identifiers. See endpoint &#x60;/basic/valueUnit/list&#x60; for possible values.
        /// </summary>
        /// <value>List of value unit identifiers. See endpoint &#x60;/basic/valueUnit/list&#x60; for possible values.</value>
        [DataMember(Name = "valueUnit", EmitDefaultValue = false)]
        public List<InlineResponse2005DataValueUnit> ValueUnit { get; set; }

        /// <summary>
        /// List of market identifiers. See endpoint &#x60;/basic/market/list&#x60; for possible values.
        /// </summary>
        /// <value>List of market identifiers. See endpoint &#x60;/basic/market/list&#x60; for possible values.</value>
        [DataMember(Name = "market", EmitDefaultValue = false)]
        public List<InlineResponse2005DataMarket> Market { get; set; }

        /// <summary>
        /// List of stock types.
        /// </summary>
        /// <value>List of stock types.</value>
        [DataMember(Name = "stockType", EmitDefaultValue = false)]
        public List<InlineResponse2005DataStockType> StockType { get; set; }

        /// <summary>
        /// Lists of categories of the industry classification. Here, an industry is a category from any level of category system FactSet Revere Business Industry Classification System (RBICS). Starting with the most coarse level (one), for each level of the category system, the list of categories of the stocks, matching the parameters, is returned. See endpoint &#x60;/category/listBySystem&#x60; with &#x60;id&#x3D;48&#x60; for possible values.
        /// </summary>
        /// <value>Lists of categories of the industry classification. Here, an industry is a category from any level of category system FactSet Revere Business Industry Classification System (RBICS). Starting with the most coarse level (one), for each level of the category system, the list of categories of the stocks, matching the parameters, is returned. See endpoint &#x60;/category/listBySystem&#x60; with &#x60;id&#x3D;48&#x60; for possible values.</value>
        [DataMember(Name = "industryClassification", EmitDefaultValue = false)]
        public List<InlineResponse2005DataIndustryClassification> IndustryClassification { get; set; }

        /// <summary>
        /// Gets or Sets Company
        /// </summary>
        [DataMember(Name = "company", EmitDefaultValue = false)]
        public InlineResponse2005DataCompany Company { get; set; }

        /// <summary>
        /// Gets or Sets Compliance
        /// </summary>
        [DataMember(Name = "compliance", EmitDefaultValue = false)]
        public InlineResponse2005DataCompliance Compliance { get; set; }

        /// <summary>
        /// Gets or Sets ReportedKeyFigures
        /// </summary>
        [DataMember(Name = "reportedKeyFigures", EmitDefaultValue = false)]
        public InlineResponse2005DataReportedKeyFigures ReportedKeyFigures { get; set; }

        /// <summary>
        /// Gets or Sets Performance
        /// </summary>
        [DataMember(Name = "performance", EmitDefaultValue = false)]
        public InlineResponse2005DataPerformance Performance { get; set; }

        /// <summary>
        /// Gets or Sets Volatility
        /// </summary>
        [DataMember(Name = "volatility", EmitDefaultValue = false)]
        public InlineResponse2005DataVolatility Volatility { get; set; }

        /// <summary>
        /// Gets or Sets TradingValue
        /// </summary>
        [DataMember(Name = "tradingValue", EmitDefaultValue = false)]
        public InlineResponse2005DataTradingValue TradingValue { get; set; }

        /// <summary>
        /// Gets or Sets SimpleMovingAverage
        /// </summary>
        [DataMember(Name = "simpleMovingAverage", EmitDefaultValue = false)]
        public InlineResponse2005DataSimpleMovingAverage SimpleMovingAverage { get; set; }

        /// <summary>
        /// Gets or Sets RsiWilder
        /// </summary>
        [DataMember(Name = "rsiWilder", EmitDefaultValue = false)]
        public InlineResponse2005DataRsiWilder RsiWilder { get; set; }

        /// <summary>
        /// Gets or Sets Recommendation
        /// </summary>
        [DataMember(Name = "recommendation", EmitDefaultValue = false)]
        public InlineResponse2005DataRecommendation Recommendation { get; set; }

        /// <summary>
        /// Gets or Sets Estimates
        /// </summary>
        [DataMember(Name = "estimates", EmitDefaultValue = false)]
        public InlineResponse2005DataEstimates Estimates { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class InlineResponse2005Data {\n");
            sb.Append("  TotalCount: ").Append(TotalCount).Append("\n");
            sb.Append("  ValueUnit: ").Append(ValueUnit).Append("\n");
            sb.Append("  Market: ").Append(Market).Append("\n");
            sb.Append("  StockType: ").Append(StockType).Append("\n");
            sb.Append("  IndustryClassification: ").Append(IndustryClassification).Append("\n");
            sb.Append("  Company: ").Append(Company).Append("\n");
            sb.Append("  Compliance: ").Append(Compliance).Append("\n");
            sb.Append("  ReportedKeyFigures: ").Append(ReportedKeyFigures).Append("\n");
            sb.Append("  Performance: ").Append(Performance).Append("\n");
            sb.Append("  Volatility: ").Append(Volatility).Append("\n");
            sb.Append("  TradingValue: ").Append(TradingValue).Append("\n");
            sb.Append("  SimpleMovingAverage: ").Append(SimpleMovingAverage).Append("\n");
            sb.Append("  RsiWilder: ").Append(RsiWilder).Append("\n");
            sb.Append("  Recommendation: ").Append(Recommendation).Append("\n");
            sb.Append("  Estimates: ").Append(Estimates).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as InlineResponse2005Data);
        }

        /// <summary>
        /// Returns true if InlineResponse2005Data instances are equal
        /// </summary>
        /// <param name="input">Instance of InlineResponse2005Data to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(InlineResponse2005Data input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.TotalCount == input.TotalCount ||
                    this.TotalCount.Equals(input.TotalCount)
                ) && 
                (
                    this.ValueUnit == input.ValueUnit ||
                    this.ValueUnit != null &&
                    input.ValueUnit != null &&
                    this.ValueUnit.SequenceEqual(input.ValueUnit)
                ) && 
                (
                    this.Market == input.Market ||
                    this.Market != null &&
                    input.Market != null &&
                    this.Market.SequenceEqual(input.Market)
                ) && 
                (
                    this.StockType == input.StockType ||
                    this.StockType != null &&
                    input.StockType != null &&
                    this.StockType.SequenceEqual(input.StockType)
                ) && 
                (
                    this.IndustryClassification == input.IndustryClassification ||
                    this.IndustryClassification != null &&
                    input.IndustryClassification != null &&
                    this.IndustryClassification.SequenceEqual(input.IndustryClassification)
                ) && 
                (
                    this.Company == input.Company ||
                    (this.Company != null &&
                    this.Company.Equals(input.Company))
                ) && 
                (
                    this.Compliance == input.Compliance ||
                    (this.Compliance != null &&
                    this.Compliance.Equals(input.Compliance))
                ) && 
                (
                    this.ReportedKeyFigures == input.ReportedKeyFigures ||
                    (this.ReportedKeyFigures != null &&
                    this.ReportedKeyFigures.Equals(input.ReportedKeyFigures))
                ) && 
                (
                    this.Performance == input.Performance ||
                    (this.Performance != null &&
                    this.Performance.Equals(input.Performance))
                ) && 
                (
                    this.Volatility == input.Volatility ||
                    (this.Volatility != null &&
                    this.Volatility.Equals(input.Volatility))
                ) && 
                (
                    this.TradingValue == input.TradingValue ||
                    (this.TradingValue != null &&
                    this.TradingValue.Equals(input.TradingValue))
                ) && 
                (
                    this.SimpleMovingAverage == input.SimpleMovingAverage ||
                    (this.SimpleMovingAverage != null &&
                    this.SimpleMovingAverage.Equals(input.SimpleMovingAverage))
                ) && 
                (
                    this.RsiWilder == input.RsiWilder ||
                    (this.RsiWilder != null &&
                    this.RsiWilder.Equals(input.RsiWilder))
                ) && 
                (
                    this.Recommendation == input.Recommendation ||
                    (this.Recommendation != null &&
                    this.Recommendation.Equals(input.Recommendation))
                ) && 
                (
                    this.Estimates == input.Estimates ||
                    (this.Estimates != null &&
                    this.Estimates.Equals(input.Estimates))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.TotalCount.GetHashCode();
                if (this.ValueUnit != null)
                {
                    hashCode = (hashCode * 59) + this.ValueUnit.GetHashCode();
                }
                if (this.Market != null)
                {
                    hashCode = (hashCode * 59) + this.Market.GetHashCode();
                }
                if (this.StockType != null)
                {
                    hashCode = (hashCode * 59) + this.StockType.GetHashCode();
                }
                if (this.IndustryClassification != null)
                {
                    hashCode = (hashCode * 59) + this.IndustryClassification.GetHashCode();
                }
                if (this.Company != null)
                {
                    hashCode = (hashCode * 59) + this.Company.GetHashCode();
                }
                if (this.Compliance != null)
                {
                    hashCode = (hashCode * 59) + this.Compliance.GetHashCode();
                }
                if (this.ReportedKeyFigures != null)
                {
                    hashCode = (hashCode * 59) + this.ReportedKeyFigures.GetHashCode();
                }
                if (this.Performance != null)
                {
                    hashCode = (hashCode * 59) + this.Performance.GetHashCode();
                }
                if (this.Volatility != null)
                {
                    hashCode = (hashCode * 59) + this.Volatility.GetHashCode();
                }
                if (this.TradingValue != null)
                {
                    hashCode = (hashCode * 59) + this.TradingValue.GetHashCode();
                }
                if (this.SimpleMovingAverage != null)
                {
                    hashCode = (hashCode * 59) + this.SimpleMovingAverage.GetHashCode();
                }
                if (this.RsiWilder != null)
                {
                    hashCode = (hashCode * 59) + this.RsiWilder.GetHashCode();
                }
                if (this.Recommendation != null)
                {
                    hashCode = (hashCode * 59) + this.Recommendation.GetHashCode();
                }
                if (this.Estimates != null)
                {
                    hashCode = (hashCode * 59) + this.Estimates.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
