/*
 * Prime Developer Trial
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = FactSet.SDK.StocksAPIforDigitalPortals.Client.OpenAPIDateConverter;

namespace FactSet.SDK.StocksAPIforDigitalPortals.Model
{
    /// <summary>
    /// Relative strength index (RSI) by Wilder for different time ranges. This is the ratio of smoothed moving averages of the upwards and downwards daily returns over the given period, normalized to the range between 0 and 100. The RSI by Wilder measures the magnitude of the price changes in a given time period evaluating whether an asset is overbought or oversold and deriving a respective sell or buy signal.
    /// </summary>
    [DataContract(Name = "_stock_notation_screener_search_data_rsiWilder")]
    public partial class StockNotationScreenerSearchDataRsiWilder : IEquatable<StockNotationScreenerSearchDataRsiWilder>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="StockNotationScreenerSearchDataRsiWilder" /> class.
        /// </summary>
        /// <param name="days14">days14.</param>
        public StockNotationScreenerSearchDataRsiWilder(StockNotationScreenerSearchDataRsiWilderDays14 days14 = default(StockNotationScreenerSearchDataRsiWilderDays14))
        {
            this.Days14 = days14;
        }

        /// <summary>
        /// Gets or Sets Days14
        /// </summary>
        [DataMember(Name = "days14", EmitDefaultValue = false)]
        public StockNotationScreenerSearchDataRsiWilderDays14 Days14 { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class StockNotationScreenerSearchDataRsiWilder {\n");
            sb.Append("  Days14: ").Append(Days14).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as StockNotationScreenerSearchDataRsiWilder);
        }

        /// <summary>
        /// Returns true if StockNotationScreenerSearchDataRsiWilder instances are equal
        /// </summary>
        /// <param name="input">Instance of StockNotationScreenerSearchDataRsiWilder to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(StockNotationScreenerSearchDataRsiWilder input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Days14 == input.Days14 ||
                    (this.Days14 != null &&
                    this.Days14.Equals(input.Days14))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Days14 != null)
                {
                    hashCode = (hashCode * 59) + this.Days14.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
