/*
 * Prime Developer Trial
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = FactSet.SDK.StocksAPIforDigitalPortals.Client.OpenAPIDateConverter;

namespace FactSet.SDK.StocksAPIforDigitalPortals.Model
{
    /// <summary>
    /// Relevant dates related to the dividend.
    /// </summary>
    [DataContract(Name = "inline_response_200_dates")]
    public partial class InlineResponse200Dates : IEquatable<InlineResponse200Dates>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="InlineResponse200Dates" /> class.
        /// </summary>
        /// <param name="announcement">Announcement date..</param>
        /// <param name="record">Record date..</param>
        /// <param name="effective">Effective date (ex-date)..</param>
        /// <param name="payment">Payment date..</param>
        public InlineResponse200Dates(DateTime announcement = default(DateTime), DateTime record = default(DateTime), DateTime effective = default(DateTime), DateTime payment = default(DateTime))
        {
            this.Announcement = announcement;
            this.Record = record;
            this.Effective = effective;
            this.Payment = payment;
        }

        /// <summary>
        /// Announcement date.
        /// </summary>
        /// <value>Announcement date.</value>
        [DataMember(Name = "announcement", EmitDefaultValue = false)]
        [JsonConverter(typeof(OpenAPIDateConverter))]
        public DateTime Announcement { get; set; }

        /// <summary>
        /// Record date.
        /// </summary>
        /// <value>Record date.</value>
        [DataMember(Name = "record", EmitDefaultValue = false)]
        [JsonConverter(typeof(OpenAPIDateConverter))]
        public DateTime Record { get; set; }

        /// <summary>
        /// Effective date (ex-date).
        /// </summary>
        /// <value>Effective date (ex-date).</value>
        [DataMember(Name = "effective", EmitDefaultValue = false)]
        [JsonConverter(typeof(OpenAPIDateConverter))]
        public DateTime Effective { get; set; }

        /// <summary>
        /// Payment date.
        /// </summary>
        /// <value>Payment date.</value>
        [DataMember(Name = "payment", EmitDefaultValue = false)]
        [JsonConverter(typeof(OpenAPIDateConverter))]
        public DateTime Payment { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class InlineResponse200Dates {\n");
            sb.Append("  Announcement: ").Append(Announcement).Append("\n");
            sb.Append("  Record: ").Append(Record).Append("\n");
            sb.Append("  Effective: ").Append(Effective).Append("\n");
            sb.Append("  Payment: ").Append(Payment).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as InlineResponse200Dates);
        }

        /// <summary>
        /// Returns true if InlineResponse200Dates instances are equal
        /// </summary>
        /// <param name="input">Instance of InlineResponse200Dates to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(InlineResponse200Dates input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Announcement == input.Announcement ||
                    (this.Announcement != null &&
                    this.Announcement.Equals(input.Announcement))
                ) && 
                (
                    this.Record == input.Record ||
                    (this.Record != null &&
                    this.Record.Equals(input.Record))
                ) && 
                (
                    this.Effective == input.Effective ||
                    (this.Effective != null &&
                    this.Effective.Equals(input.Effective))
                ) && 
                (
                    this.Payment == input.Payment ||
                    (this.Payment != null &&
                    this.Payment.Equals(input.Payment))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Announcement != null)
                {
                    hashCode = (hashCode * 59) + this.Announcement.GetHashCode();
                }
                if (this.Record != null)
                {
                    hashCode = (hashCode * 59) + this.Record.GetHashCode();
                }
                if (this.Effective != null)
                {
                    hashCode = (hashCode * 59) + this.Effective.GetHashCode();
                }
                if (this.Payment != null)
                {
                    hashCode = (hashCode * 59) + this.Payment.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
