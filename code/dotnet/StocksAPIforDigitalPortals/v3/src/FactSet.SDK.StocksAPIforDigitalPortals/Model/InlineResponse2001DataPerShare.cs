/*
 * Stocks API For Digital Portals
 *
 * The Stocks API features a screener to search for equity instruments based on stock-specific parameters.  Parameters for up to three fiscal years might now be used in one request; data is available for the ten most recent completed fiscal years. Estimates are available for the current and two consecutive fiscal years. Search criteria also include benchmark-related attributes (beta, correlation, outperformance), and ESG parameters, based on FactSetâ€™s Truvalue ESG scores.  A separate endpoint returns the possible values and value ranges for the parameters that the endpoint /stock/notation/screener/search accepts Application developers can request the values and value ranges only for a restricted set of notations that match predefined parameters. This functionality may be used to pre-fill the values and value ranges of the parameters of the /stock/notation/screener/search endpoint so that performing a search always leads to a non-empty set of notations.  The endpoint /stock/notation/ranking/intraday/list ranks stocks notations using intraday figures, for example to build a gainers/losers list.   Additional endpoints include end-of-day benchmark key figures, and selected fundamentals (as of end of fiscal year and with daily updates).  This API is fully integrated with the corresponding [Quotes API](https://developer.factset.com/api-catalog/quotes-api-digital-portals), allowing access to detailed price and performance information of instruments, as well as basic security identifier cross-reference. For direct access to price histories, please refer to the [Time Series API for Digital Portals](https://developer.factset.com/api-catalog/time-series-api-digital-portals).  Similar criteria based screener APIs exist for fixed income instruments and securitized derivatives: See the [Bonds API](https://developer.factset.com/api-catalog/bonds-api-digital-portals) and the [Securitized Derivatives API](https://developer.factset.com/api-catalog/securitized-derivatives-api-digital-portals) for details.  See also the recipe [\"Enrich Your Digital Portal with Flexible Equity Screening\"](https://developer.factset.com/recipe-catalog/enrich-your-digital-portal-flexible-equity-screening). 
 *
 * The version of the OpenAPI document: 2
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = FactSet.SDK.StocksAPIforDigitalPortals.Client.OpenAPIDateConverter;

namespace FactSet.SDK.StocksAPIforDigitalPortals.Model
{
    /// <summary>
    /// Key per-share figures used in a fundamental analysis.
    /// </summary>
    [DataContract(Name = "inline_response_200_1_data_perShare")]
    public partial class InlineResponse2001DataPerShare : IEquatable<InlineResponse2001DataPerShare>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="InlineResponse2001DataPerShare" /> class.
        /// </summary>
        /// <param name="sales">sales.</param>
        /// <param name="earnings">earnings.</param>
        /// <param name="recurringDilutedEarnings">recurringDilutedEarnings.</param>
        /// <param name="dilutedEarnings">dilutedEarnings.</param>
        /// <param name="dividends">dividends.</param>
        /// <param name="bookValue">bookValue.</param>
        /// <param name="tangibleBookValue">tangibleBookValue.</param>
        /// <param name="cashFlow">cashFlow.</param>
        /// <param name="freeCashFlow">freeCashFlow.</param>
        public InlineResponse2001DataPerShare(InlineResponse2001DataPerShareSales sales = default(InlineResponse2001DataPerShareSales), InlineResponse2001DataPerShareEarnings earnings = default(InlineResponse2001DataPerShareEarnings), InlineResponse2001DataPerShareRecurringDilutedEarnings recurringDilutedEarnings = default(InlineResponse2001DataPerShareRecurringDilutedEarnings), InlineResponse2001DataPerShareDilutedEarnings dilutedEarnings = default(InlineResponse2001DataPerShareDilutedEarnings), InlineResponse2001DataPerShareDividends dividends = default(InlineResponse2001DataPerShareDividends), InlineResponse2001DataPerShareBookValue bookValue = default(InlineResponse2001DataPerShareBookValue), InlineResponse2001DataPerShareTangibleBookValue tangibleBookValue = default(InlineResponse2001DataPerShareTangibleBookValue), InlineResponse2001DataPerShareCashFlow cashFlow = default(InlineResponse2001DataPerShareCashFlow), InlineResponse2001DataPerShareFreeCashFlow freeCashFlow = default(InlineResponse2001DataPerShareFreeCashFlow))
        {
            this.Sales = sales;
            this.Earnings = earnings;
            this.RecurringDilutedEarnings = recurringDilutedEarnings;
            this.DilutedEarnings = dilutedEarnings;
            this.Dividends = dividends;
            this.BookValue = bookValue;
            this.TangibleBookValue = tangibleBookValue;
            this.CashFlow = cashFlow;
            this.FreeCashFlow = freeCashFlow;
        }

        /// <summary>
        /// Gets or Sets Sales
        /// </summary>
        [DataMember(Name = "sales", EmitDefaultValue = false)]
        public InlineResponse2001DataPerShareSales Sales { get; set; }

        /// <summary>
        /// Gets or Sets Earnings
        /// </summary>
        [DataMember(Name = "earnings", EmitDefaultValue = false)]
        public InlineResponse2001DataPerShareEarnings Earnings { get; set; }

        /// <summary>
        /// Gets or Sets RecurringDilutedEarnings
        /// </summary>
        [DataMember(Name = "recurringDilutedEarnings", EmitDefaultValue = false)]
        public InlineResponse2001DataPerShareRecurringDilutedEarnings RecurringDilutedEarnings { get; set; }

        /// <summary>
        /// Gets or Sets DilutedEarnings
        /// </summary>
        [DataMember(Name = "dilutedEarnings", EmitDefaultValue = false)]
        public InlineResponse2001DataPerShareDilutedEarnings DilutedEarnings { get; set; }

        /// <summary>
        /// Gets or Sets Dividends
        /// </summary>
        [DataMember(Name = "dividends", EmitDefaultValue = false)]
        public InlineResponse2001DataPerShareDividends Dividends { get; set; }

        /// <summary>
        /// Gets or Sets BookValue
        /// </summary>
        [DataMember(Name = "bookValue", EmitDefaultValue = false)]
        public InlineResponse2001DataPerShareBookValue BookValue { get; set; }

        /// <summary>
        /// Gets or Sets TangibleBookValue
        /// </summary>
        [DataMember(Name = "tangibleBookValue", EmitDefaultValue = false)]
        public InlineResponse2001DataPerShareTangibleBookValue TangibleBookValue { get; set; }

        /// <summary>
        /// Gets or Sets CashFlow
        /// </summary>
        [DataMember(Name = "cashFlow", EmitDefaultValue = false)]
        public InlineResponse2001DataPerShareCashFlow CashFlow { get; set; }

        /// <summary>
        /// Gets or Sets FreeCashFlow
        /// </summary>
        [DataMember(Name = "freeCashFlow", EmitDefaultValue = false)]
        public InlineResponse2001DataPerShareFreeCashFlow FreeCashFlow { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class InlineResponse2001DataPerShare {\n");
            sb.Append("  Sales: ").Append(Sales).Append("\n");
            sb.Append("  Earnings: ").Append(Earnings).Append("\n");
            sb.Append("  RecurringDilutedEarnings: ").Append(RecurringDilutedEarnings).Append("\n");
            sb.Append("  DilutedEarnings: ").Append(DilutedEarnings).Append("\n");
            sb.Append("  Dividends: ").Append(Dividends).Append("\n");
            sb.Append("  BookValue: ").Append(BookValue).Append("\n");
            sb.Append("  TangibleBookValue: ").Append(TangibleBookValue).Append("\n");
            sb.Append("  CashFlow: ").Append(CashFlow).Append("\n");
            sb.Append("  FreeCashFlow: ").Append(FreeCashFlow).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as InlineResponse2001DataPerShare);
        }

        /// <summary>
        /// Returns true if InlineResponse2001DataPerShare instances are equal
        /// </summary>
        /// <param name="input">Instance of InlineResponse2001DataPerShare to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(InlineResponse2001DataPerShare input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Sales == input.Sales ||
                    (this.Sales != null &&
                    this.Sales.Equals(input.Sales))
                ) && 
                (
                    this.Earnings == input.Earnings ||
                    (this.Earnings != null &&
                    this.Earnings.Equals(input.Earnings))
                ) && 
                (
                    this.RecurringDilutedEarnings == input.RecurringDilutedEarnings ||
                    (this.RecurringDilutedEarnings != null &&
                    this.RecurringDilutedEarnings.Equals(input.RecurringDilutedEarnings))
                ) && 
                (
                    this.DilutedEarnings == input.DilutedEarnings ||
                    (this.DilutedEarnings != null &&
                    this.DilutedEarnings.Equals(input.DilutedEarnings))
                ) && 
                (
                    this.Dividends == input.Dividends ||
                    (this.Dividends != null &&
                    this.Dividends.Equals(input.Dividends))
                ) && 
                (
                    this.BookValue == input.BookValue ||
                    (this.BookValue != null &&
                    this.BookValue.Equals(input.BookValue))
                ) && 
                (
                    this.TangibleBookValue == input.TangibleBookValue ||
                    (this.TangibleBookValue != null &&
                    this.TangibleBookValue.Equals(input.TangibleBookValue))
                ) && 
                (
                    this.CashFlow == input.CashFlow ||
                    (this.CashFlow != null &&
                    this.CashFlow.Equals(input.CashFlow))
                ) && 
                (
                    this.FreeCashFlow == input.FreeCashFlow ||
                    (this.FreeCashFlow != null &&
                    this.FreeCashFlow.Equals(input.FreeCashFlow))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Sales != null)
                {
                    hashCode = (hashCode * 59) + this.Sales.GetHashCode();
                }
                if (this.Earnings != null)
                {
                    hashCode = (hashCode * 59) + this.Earnings.GetHashCode();
                }
                if (this.RecurringDilutedEarnings != null)
                {
                    hashCode = (hashCode * 59) + this.RecurringDilutedEarnings.GetHashCode();
                }
                if (this.DilutedEarnings != null)
                {
                    hashCode = (hashCode * 59) + this.DilutedEarnings.GetHashCode();
                }
                if (this.Dividends != null)
                {
                    hashCode = (hashCode * 59) + this.Dividends.GetHashCode();
                }
                if (this.BookValue != null)
                {
                    hashCode = (hashCode * 59) + this.BookValue.GetHashCode();
                }
                if (this.TangibleBookValue != null)
                {
                    hashCode = (hashCode * 59) + this.TangibleBookValue.GetHashCode();
                }
                if (this.CashFlow != null)
                {
                    hashCode = (hashCode * 59) + this.CashFlow.GetHashCode();
                }
                if (this.FreeCashFlow != null)
                {
                    hashCode = (hashCode * 59) + this.FreeCashFlow.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
