/*
 * Stocks API For Digital Portals
 *
 * The Stocks API features a screener to search for equity instruments based on stock-specific parameters.  Parameters for up to three fiscal years might now be used in one request; data is available for the ten most recent completed fiscal years. Estimates are available for the current and two consecutive fiscal years. Search criteria also include benchmark-related attributes (beta, correlation, outperformance), and ESG parameters, based on FactSetâ€™s Truvalue ESG scores.  A separate endpoint returns the possible values and value ranges for the parameters that the endpoint /stock/notation/screener/search accepts Application developers can request the values and value ranges only for a restricted set of notations that match predefined parameters. This functionality may be used to pre-fill the values and value ranges of the parameters of the /stock/notation/screener/search endpoint so that performing a search always leads to a non-empty set of notations.  The endpoint /stock/notation/ranking/intraday/list ranks stocks notations using intraday figures, for example to build a gainers/losers list.   Additional endpoints include end-of-day benchmark key figures, and selected fundamentals (as of end of fiscal year and with daily updates).  This API is fully integrated with the corresponding [Quotes API](https://developer.factset.com/api-catalog/quotes-api-digital-portals), allowing access to detailed price and performance information of instruments, as well as basic security identifier cross-reference. For direct access to price histories, please refer to the [Time Series API for Digital Portals](https://developer.factset.com/api-catalog/time-series-api-digital-portals).  Similar criteria based screener APIs exist for fixed income instruments and securitized derivatives: See the [Bonds API](https://developer.factset.com/api-catalog/bonds-api-digital-portals) and the [Securitized Derivatives API](https://developer.factset.com/api-catalog/securitized-derivatives-api-digital-portals) for details.  See also the recipe [\"Enrich Your Digital Portal with Flexible Equity Screening\"](https://developer.factset.com/recipe-catalog/enrich-your-digital-portal-flexible-equity-screening). 
 *
 * The version of the OpenAPI document: 2
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = FactSet.SDK.StocksAPIforDigitalPortals.Client.OpenAPIDateConverter;

namespace FactSet.SDK.StocksAPIforDigitalPortals.Model
{
    /// <summary>
    /// Number of recommendations.
    /// </summary>
    [DataContract(Name = "inline_response_200_3_data_recommendation_counts")]
    public partial class InlineResponse2003DataRecommendationCounts : IEquatable<InlineResponse2003DataRecommendationCounts>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="InlineResponse2003DataRecommendationCounts" /> class.
        /// </summary>
        /// <param name="total">Total number..</param>
        /// <param name="buy">Number of buy recommendations. A buy recommendation contributes with the numeric value 1 when calculating the consensus..</param>
        /// <param name="overweight">Number of overweight recommendations. A overweight recommendation contributes with the numeric value 2 when calculating the consensus..</param>
        /// <param name="hold">Number of hold recommendations. A hold recommendation contributes with the numeric value 3 when calculating the consensus..</param>
        /// <param name="underweight">Number of underweight recommendations. A underweight recommendation contributes with the numeric value 4 when calculating the consensus..</param>
        /// <param name="sell">Number of sell recommendations. A sell recommendation contributes with the numeric value 5 when calculating the consensus..</param>
        public InlineResponse2003DataRecommendationCounts(decimal? total = default(decimal?), decimal? buy = default(decimal?), decimal? overweight = default(decimal?), decimal? hold = default(decimal?), decimal? underweight = default(decimal?), decimal? sell = default(decimal?))
        {
            this.Total = total;
            this.Buy = buy;
            this.Overweight = overweight;
            this.Hold = hold;
            this.Underweight = underweight;
            this.Sell = sell;
        }

        /// <summary>
        /// Total number.
        /// </summary>
        /// <value>Total number.</value>
        [DataMember(Name = "total", EmitDefaultValue = true)]
        public decimal? Total { get; set; }

        /// <summary>
        /// Number of buy recommendations. A buy recommendation contributes with the numeric value 1 when calculating the consensus.
        /// </summary>
        /// <value>Number of buy recommendations. A buy recommendation contributes with the numeric value 1 when calculating the consensus.</value>
        [DataMember(Name = "buy", EmitDefaultValue = true)]
        public decimal? Buy { get; set; }

        /// <summary>
        /// Number of overweight recommendations. A overweight recommendation contributes with the numeric value 2 when calculating the consensus.
        /// </summary>
        /// <value>Number of overweight recommendations. A overweight recommendation contributes with the numeric value 2 when calculating the consensus.</value>
        [DataMember(Name = "overweight", EmitDefaultValue = true)]
        public decimal? Overweight { get; set; }

        /// <summary>
        /// Number of hold recommendations. A hold recommendation contributes with the numeric value 3 when calculating the consensus.
        /// </summary>
        /// <value>Number of hold recommendations. A hold recommendation contributes with the numeric value 3 when calculating the consensus.</value>
        [DataMember(Name = "hold", EmitDefaultValue = true)]
        public decimal? Hold { get; set; }

        /// <summary>
        /// Number of underweight recommendations. A underweight recommendation contributes with the numeric value 4 when calculating the consensus.
        /// </summary>
        /// <value>Number of underweight recommendations. A underweight recommendation contributes with the numeric value 4 when calculating the consensus.</value>
        [DataMember(Name = "underweight", EmitDefaultValue = true)]
        public decimal? Underweight { get; set; }

        /// <summary>
        /// Number of sell recommendations. A sell recommendation contributes with the numeric value 5 when calculating the consensus.
        /// </summary>
        /// <value>Number of sell recommendations. A sell recommendation contributes with the numeric value 5 when calculating the consensus.</value>
        [DataMember(Name = "sell", EmitDefaultValue = true)]
        public decimal? Sell { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class InlineResponse2003DataRecommendationCounts {\n");
            sb.Append("  Total: ").Append(Total).Append("\n");
            sb.Append("  Buy: ").Append(Buy).Append("\n");
            sb.Append("  Overweight: ").Append(Overweight).Append("\n");
            sb.Append("  Hold: ").Append(Hold).Append("\n");
            sb.Append("  Underweight: ").Append(Underweight).Append("\n");
            sb.Append("  Sell: ").Append(Sell).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as InlineResponse2003DataRecommendationCounts);
        }

        /// <summary>
        /// Returns true if InlineResponse2003DataRecommendationCounts instances are equal
        /// </summary>
        /// <param name="input">Instance of InlineResponse2003DataRecommendationCounts to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(InlineResponse2003DataRecommendationCounts input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Total == input.Total ||
                    (this.Total != null &&
                    this.Total.Equals(input.Total))
                ) && 
                (
                    this.Buy == input.Buy ||
                    (this.Buy != null &&
                    this.Buy.Equals(input.Buy))
                ) && 
                (
                    this.Overweight == input.Overweight ||
                    (this.Overweight != null &&
                    this.Overweight.Equals(input.Overweight))
                ) && 
                (
                    this.Hold == input.Hold ||
                    (this.Hold != null &&
                    this.Hold.Equals(input.Hold))
                ) && 
                (
                    this.Underweight == input.Underweight ||
                    (this.Underweight != null &&
                    this.Underweight.Equals(input.Underweight))
                ) && 
                (
                    this.Sell == input.Sell ||
                    (this.Sell != null &&
                    this.Sell.Equals(input.Sell))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Total != null)
                {
                    hashCode = (hashCode * 59) + this.Total.GetHashCode();
                }
                if (this.Buy != null)
                {
                    hashCode = (hashCode * 59) + this.Buy.GetHashCode();
                }
                if (this.Overweight != null)
                {
                    hashCode = (hashCode * 59) + this.Overweight.GetHashCode();
                }
                if (this.Hold != null)
                {
                    hashCode = (hashCode * 59) + this.Hold.GetHashCode();
                }
                if (this.Underweight != null)
                {
                    hashCode = (hashCode * 59) + this.Underweight.GetHashCode();
                }
                if (this.Sell != null)
                {
                    hashCode = (hashCode * 59) + this.Sell.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
