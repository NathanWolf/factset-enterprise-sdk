/*
 * Stocks API For Digital Portals
 *
 * The Stocks API features a screener to search for equity instruments based on stock-specific parameters.  Parameters for up to three fiscal years might now be used in one request; data is available for the ten most recent completed fiscal years. Estimates are available for the current and two consecutive fiscal years. Search criteria also include benchmark-related attributes (beta, correlation, outperformance), and ESG parameters, based on FactSetâ€™s Truvalue ESG scores.  A separate endpoint returns the possible values and value ranges for the parameters that the endpoint /stock/notation/screener/search accepts Application developers can request the values and value ranges only for a restricted set of notations that match predefined parameters. This functionality may be used to pre-fill the values and value ranges of the parameters of the /stock/notation/screener/search endpoint so that performing a search always leads to a non-empty set of notations.  The endpoint /stock/notation/ranking/intraday/list ranks stocks notations using intraday figures, for example to build a gainers/losers list.   Additional endpoints include end-of-day benchmark key figures, and selected fundamentals (as of end of fiscal year and with daily updates).  This API is fully integrated with the corresponding [Quotes API](https://developer.factset.com/api-catalog/quotes-api-digital-portals), allowing access to detailed price and performance information of instruments, as well as basic security identifier cross-reference. For direct access to price histories, please refer to the [Time Series API for Digital Portals](https://developer.factset.com/api-catalog/time-series-api-digital-portals).  Similar criteria based screener APIs exist for fixed income instruments and securitized derivatives: See the [Bonds API](https://developer.factset.com/api-catalog/bonds-api-digital-portals) and the [Securitized Derivatives API](https://developer.factset.com/api-catalog/securitized-derivatives-api-digital-portals) for details.  See also the recipe [\"Enrich Your Digital Portal with Flexible Equity Screening\"](https://developer.factset.com/recipe-catalog/enrich-your-digital-portal-flexible-equity-screening). 
 *
 * The version of the OpenAPI document: 2
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = FactSet.SDK.StocksAPIforDigitalPortals.Client.OpenAPIDateConverter;

namespace FactSet.SDK.StocksAPIforDigitalPortals.Model
{
    /// <summary>
    /// Balance sheet data.
    /// </summary>
    [DataContract(Name = "inline_response_200_1_data_balanceSheet")]
    public partial class InlineResponse2001DataBalanceSheet : IEquatable<InlineResponse2001DataBalanceSheet>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="InlineResponse2001DataBalanceSheet" /> class.
        /// </summary>
        /// <param name="cashAndShortTermInvestments">cashAndShortTermInvestments.</param>
        /// <param name="totalAssets">totalAssets.</param>
        /// <param name="totalDebt">totalDebt.</param>
        /// <param name="netDebt">netDebt.</param>
        /// <param name="totalLiabilities">totalLiabilities.</param>
        /// <param name="totalShareholdersEquity">totalShareholdersEquity.</param>
        /// <param name="totalLoans">totalLoans.</param>
        /// <param name="cashAndDueFromBanks">cashAndDueFromBanks.</param>
        /// <param name="totalDeposits">totalDeposits.</param>
        /// <param name="totalCash">totalCash.</param>
        public InlineResponse2001DataBalanceSheet(InlineResponse2001DataBalanceSheetCashAndShortTermInvestments cashAndShortTermInvestments = default(InlineResponse2001DataBalanceSheetCashAndShortTermInvestments), InlineResponse2001DataBalanceSheetTotalAssets totalAssets = default(InlineResponse2001DataBalanceSheetTotalAssets), InlineResponse2001DataBalanceSheetTotalDebt totalDebt = default(InlineResponse2001DataBalanceSheetTotalDebt), InlineResponse2001DataBalanceSheetNetDebt netDebt = default(InlineResponse2001DataBalanceSheetNetDebt), InlineResponse2001DataBalanceSheetTotalLiabilities totalLiabilities = default(InlineResponse2001DataBalanceSheetTotalLiabilities), InlineResponse2001DataBalanceSheetTotalShareholdersEquity totalShareholdersEquity = default(InlineResponse2001DataBalanceSheetTotalShareholdersEquity), InlineResponse2001DataBalanceSheetTotalLoans totalLoans = default(InlineResponse2001DataBalanceSheetTotalLoans), InlineResponse2001DataBalanceSheetCashAndDueFromBanks cashAndDueFromBanks = default(InlineResponse2001DataBalanceSheetCashAndDueFromBanks), InlineResponse2001DataBalanceSheetTotalDeposits totalDeposits = default(InlineResponse2001DataBalanceSheetTotalDeposits), InlineResponse2001DataBalanceSheetTotalCash totalCash = default(InlineResponse2001DataBalanceSheetTotalCash))
        {
            this.CashAndShortTermInvestments = cashAndShortTermInvestments;
            this.TotalAssets = totalAssets;
            this.TotalDebt = totalDebt;
            this.NetDebt = netDebt;
            this.TotalLiabilities = totalLiabilities;
            this.TotalShareholdersEquity = totalShareholdersEquity;
            this.TotalLoans = totalLoans;
            this.CashAndDueFromBanks = cashAndDueFromBanks;
            this.TotalDeposits = totalDeposits;
            this.TotalCash = totalCash;
        }

        /// <summary>
        /// Gets or Sets CashAndShortTermInvestments
        /// </summary>
        [DataMember(Name = "cashAndShortTermInvestments", EmitDefaultValue = false)]
        public InlineResponse2001DataBalanceSheetCashAndShortTermInvestments CashAndShortTermInvestments { get; set; }

        /// <summary>
        /// Gets or Sets TotalAssets
        /// </summary>
        [DataMember(Name = "totalAssets", EmitDefaultValue = false)]
        public InlineResponse2001DataBalanceSheetTotalAssets TotalAssets { get; set; }

        /// <summary>
        /// Gets or Sets TotalDebt
        /// </summary>
        [DataMember(Name = "totalDebt", EmitDefaultValue = false)]
        public InlineResponse2001DataBalanceSheetTotalDebt TotalDebt { get; set; }

        /// <summary>
        /// Gets or Sets NetDebt
        /// </summary>
        [DataMember(Name = "netDebt", EmitDefaultValue = false)]
        public InlineResponse2001DataBalanceSheetNetDebt NetDebt { get; set; }

        /// <summary>
        /// Gets or Sets TotalLiabilities
        /// </summary>
        [DataMember(Name = "totalLiabilities", EmitDefaultValue = false)]
        public InlineResponse2001DataBalanceSheetTotalLiabilities TotalLiabilities { get; set; }

        /// <summary>
        /// Gets or Sets TotalShareholdersEquity
        /// </summary>
        [DataMember(Name = "totalShareholdersEquity", EmitDefaultValue = false)]
        public InlineResponse2001DataBalanceSheetTotalShareholdersEquity TotalShareholdersEquity { get; set; }

        /// <summary>
        /// Gets or Sets TotalLoans
        /// </summary>
        [DataMember(Name = "totalLoans", EmitDefaultValue = false)]
        public InlineResponse2001DataBalanceSheetTotalLoans TotalLoans { get; set; }

        /// <summary>
        /// Gets or Sets CashAndDueFromBanks
        /// </summary>
        [DataMember(Name = "cashAndDueFromBanks", EmitDefaultValue = false)]
        public InlineResponse2001DataBalanceSheetCashAndDueFromBanks CashAndDueFromBanks { get; set; }

        /// <summary>
        /// Gets or Sets TotalDeposits
        /// </summary>
        [DataMember(Name = "totalDeposits", EmitDefaultValue = false)]
        public InlineResponse2001DataBalanceSheetTotalDeposits TotalDeposits { get; set; }

        /// <summary>
        /// Gets or Sets TotalCash
        /// </summary>
        [DataMember(Name = "totalCash", EmitDefaultValue = false)]
        public InlineResponse2001DataBalanceSheetTotalCash TotalCash { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class InlineResponse2001DataBalanceSheet {\n");
            sb.Append("  CashAndShortTermInvestments: ").Append(CashAndShortTermInvestments).Append("\n");
            sb.Append("  TotalAssets: ").Append(TotalAssets).Append("\n");
            sb.Append("  TotalDebt: ").Append(TotalDebt).Append("\n");
            sb.Append("  NetDebt: ").Append(NetDebt).Append("\n");
            sb.Append("  TotalLiabilities: ").Append(TotalLiabilities).Append("\n");
            sb.Append("  TotalShareholdersEquity: ").Append(TotalShareholdersEquity).Append("\n");
            sb.Append("  TotalLoans: ").Append(TotalLoans).Append("\n");
            sb.Append("  CashAndDueFromBanks: ").Append(CashAndDueFromBanks).Append("\n");
            sb.Append("  TotalDeposits: ").Append(TotalDeposits).Append("\n");
            sb.Append("  TotalCash: ").Append(TotalCash).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as InlineResponse2001DataBalanceSheet);
        }

        /// <summary>
        /// Returns true if InlineResponse2001DataBalanceSheet instances are equal
        /// </summary>
        /// <param name="input">Instance of InlineResponse2001DataBalanceSheet to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(InlineResponse2001DataBalanceSheet input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.CashAndShortTermInvestments == input.CashAndShortTermInvestments ||
                    (this.CashAndShortTermInvestments != null &&
                    this.CashAndShortTermInvestments.Equals(input.CashAndShortTermInvestments))
                ) && 
                (
                    this.TotalAssets == input.TotalAssets ||
                    (this.TotalAssets != null &&
                    this.TotalAssets.Equals(input.TotalAssets))
                ) && 
                (
                    this.TotalDebt == input.TotalDebt ||
                    (this.TotalDebt != null &&
                    this.TotalDebt.Equals(input.TotalDebt))
                ) && 
                (
                    this.NetDebt == input.NetDebt ||
                    (this.NetDebt != null &&
                    this.NetDebt.Equals(input.NetDebt))
                ) && 
                (
                    this.TotalLiabilities == input.TotalLiabilities ||
                    (this.TotalLiabilities != null &&
                    this.TotalLiabilities.Equals(input.TotalLiabilities))
                ) && 
                (
                    this.TotalShareholdersEquity == input.TotalShareholdersEquity ||
                    (this.TotalShareholdersEquity != null &&
                    this.TotalShareholdersEquity.Equals(input.TotalShareholdersEquity))
                ) && 
                (
                    this.TotalLoans == input.TotalLoans ||
                    (this.TotalLoans != null &&
                    this.TotalLoans.Equals(input.TotalLoans))
                ) && 
                (
                    this.CashAndDueFromBanks == input.CashAndDueFromBanks ||
                    (this.CashAndDueFromBanks != null &&
                    this.CashAndDueFromBanks.Equals(input.CashAndDueFromBanks))
                ) && 
                (
                    this.TotalDeposits == input.TotalDeposits ||
                    (this.TotalDeposits != null &&
                    this.TotalDeposits.Equals(input.TotalDeposits))
                ) && 
                (
                    this.TotalCash == input.TotalCash ||
                    (this.TotalCash != null &&
                    this.TotalCash.Equals(input.TotalCash))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.CashAndShortTermInvestments != null)
                {
                    hashCode = (hashCode * 59) + this.CashAndShortTermInvestments.GetHashCode();
                }
                if (this.TotalAssets != null)
                {
                    hashCode = (hashCode * 59) + this.TotalAssets.GetHashCode();
                }
                if (this.TotalDebt != null)
                {
                    hashCode = (hashCode * 59) + this.TotalDebt.GetHashCode();
                }
                if (this.NetDebt != null)
                {
                    hashCode = (hashCode * 59) + this.NetDebt.GetHashCode();
                }
                if (this.TotalLiabilities != null)
                {
                    hashCode = (hashCode * 59) + this.TotalLiabilities.GetHashCode();
                }
                if (this.TotalShareholdersEquity != null)
                {
                    hashCode = (hashCode * 59) + this.TotalShareholdersEquity.GetHashCode();
                }
                if (this.TotalLoans != null)
                {
                    hashCode = (hashCode * 59) + this.TotalLoans.GetHashCode();
                }
                if (this.CashAndDueFromBanks != null)
                {
                    hashCode = (hashCode * 59) + this.CashAndDueFromBanks.GetHashCode();
                }
                if (this.TotalDeposits != null)
                {
                    hashCode = (hashCode * 59) + this.TotalDeposits.GetHashCode();
                }
                if (this.TotalCash != null)
                {
                    hashCode = (hashCode * 59) + this.TotalCash.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
