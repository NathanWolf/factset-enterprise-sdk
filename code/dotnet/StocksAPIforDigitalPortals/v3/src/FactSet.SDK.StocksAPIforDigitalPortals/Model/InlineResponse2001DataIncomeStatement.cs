/*
 * Stocks API For Digital Portals
 *
 * The Stocks API features a screener to search for equity instruments based on stock-specific parameters.  Parameters for up to three fiscal years might now be used in one request; data is available for the ten most recent completed fiscal years. Estimates are available for the current and two consecutive fiscal years. Search criteria also include benchmark-related attributes (beta, correlation, outperformance), and ESG parameters, based on FactSetâ€™s Truvalue ESG scores.  A separate endpoint returns the possible values and value ranges for the parameters that the endpoint /stock/notation/screener/search accepts Application developers can request the values and value ranges only for a restricted set of notations that match predefined parameters. This functionality may be used to pre-fill the values and value ranges of the parameters of the /stock/notation/screener/search endpoint so that performing a search always leads to a non-empty set of notations.  The endpoint /stock/notation/ranking/intraday/list ranks stocks notations using intraday figures, for example to build a gainers/losers list.   Additional endpoints include end-of-day benchmark key figures, and selected fundamentals (as of end of fiscal year and with daily updates).  This API is fully integrated with the corresponding [Quotes API](https://developer.factset.com/api-catalog/quotes-api-digital-portals), allowing access to detailed price and performance information of instruments, as well as basic security identifier cross-reference. For direct access to price histories, please refer to the [Time Series API for Digital Portals](https://developer.factset.com/api-catalog/time-series-api-digital-portals).  Similar criteria based screener APIs exist for fixed income instruments and securitized derivatives: See the [Bonds API](https://developer.factset.com/api-catalog/bonds-api-digital-portals) and the [Securitized Derivatives API](https://developer.factset.com/api-catalog/securitized-derivatives-api-digital-portals) for details.  See also the recipe [\"Enrich Your Digital Portal with Flexible Equity Screening\"](https://developer.factset.com/recipe-catalog/enrich-your-digital-portal-flexible-equity-screening). 
 *
 * The version of the OpenAPI document: 2
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = FactSet.SDK.StocksAPIforDigitalPortals.Client.OpenAPIDateConverter;

namespace FactSet.SDK.StocksAPIforDigitalPortals.Model
{
    /// <summary>
    /// Income statement data.
    /// </summary>
    [DataContract(Name = "inline_response_200_1_data_incomeStatement")]
    public partial class InlineResponse2001DataIncomeStatement : IEquatable<InlineResponse2001DataIncomeStatement>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="InlineResponse2001DataIncomeStatement" /> class.
        /// </summary>
        /// <param name="sales">sales.</param>
        /// <param name="grossIncome">grossIncome.</param>
        /// <param name="ebit">ebit.</param>
        /// <param name="ebitda">ebitda.</param>
        /// <param name="interestIncome">interestIncome.</param>
        /// <param name="interestExpense">interestExpense.</param>
        /// <param name="loanLossProvision">loanLossProvision.</param>
        /// <param name="netInterestIncome">netInterestIncome.</param>
        /// <param name="netIncome">netIncome.</param>
        /// <param name="operatingIncome">operatingIncome.</param>
        /// <param name="operatingExpense">operatingExpense.</param>
        /// <param name="claimLossExpense">claimLossExpense.</param>
        /// <param name="longTermInsuranceReserves">longTermInsuranceReserves.</param>
        public InlineResponse2001DataIncomeStatement(InlineResponse2001DataIncomeStatementSales sales = default(InlineResponse2001DataIncomeStatementSales), InlineResponse2001DataIncomeStatementGrossIncome grossIncome = default(InlineResponse2001DataIncomeStatementGrossIncome), InlineResponse2001DataIncomeStatementEbit ebit = default(InlineResponse2001DataIncomeStatementEbit), InlineResponse2001DataIncomeStatementEbitda ebitda = default(InlineResponse2001DataIncomeStatementEbitda), InlineResponse2001DataIncomeStatementInterestIncome interestIncome = default(InlineResponse2001DataIncomeStatementInterestIncome), InlineResponse2001DataIncomeStatementInterestExpense interestExpense = default(InlineResponse2001DataIncomeStatementInterestExpense), InlineResponse2001DataIncomeStatementLoanLossProvision loanLossProvision = default(InlineResponse2001DataIncomeStatementLoanLossProvision), InlineResponse2001DataIncomeStatementNetInterestIncome netInterestIncome = default(InlineResponse2001DataIncomeStatementNetInterestIncome), InlineResponse2001DataIncomeStatementNetIncome netIncome = default(InlineResponse2001DataIncomeStatementNetIncome), InlineResponse2001DataIncomeStatementOperatingIncome operatingIncome = default(InlineResponse2001DataIncomeStatementOperatingIncome), InlineResponse2001DataIncomeStatementOperatingExpense operatingExpense = default(InlineResponse2001DataIncomeStatementOperatingExpense), InlineResponse2001DataIncomeStatementClaimLossExpense claimLossExpense = default(InlineResponse2001DataIncomeStatementClaimLossExpense), InlineResponse2001DataIncomeStatementLongTermInsuranceReserves longTermInsuranceReserves = default(InlineResponse2001DataIncomeStatementLongTermInsuranceReserves))
        {
            this.Sales = sales;
            this.GrossIncome = grossIncome;
            this.Ebit = ebit;
            this.Ebitda = ebitda;
            this.InterestIncome = interestIncome;
            this.InterestExpense = interestExpense;
            this.LoanLossProvision = loanLossProvision;
            this.NetInterestIncome = netInterestIncome;
            this.NetIncome = netIncome;
            this.OperatingIncome = operatingIncome;
            this.OperatingExpense = operatingExpense;
            this.ClaimLossExpense = claimLossExpense;
            this.LongTermInsuranceReserves = longTermInsuranceReserves;
        }

        /// <summary>
        /// Gets or Sets Sales
        /// </summary>
        [DataMember(Name = "sales", EmitDefaultValue = false)]
        public InlineResponse2001DataIncomeStatementSales Sales { get; set; }

        /// <summary>
        /// Gets or Sets GrossIncome
        /// </summary>
        [DataMember(Name = "grossIncome", EmitDefaultValue = false)]
        public InlineResponse2001DataIncomeStatementGrossIncome GrossIncome { get; set; }

        /// <summary>
        /// Gets or Sets Ebit
        /// </summary>
        [DataMember(Name = "ebit", EmitDefaultValue = false)]
        public InlineResponse2001DataIncomeStatementEbit Ebit { get; set; }

        /// <summary>
        /// Gets or Sets Ebitda
        /// </summary>
        [DataMember(Name = "ebitda", EmitDefaultValue = false)]
        public InlineResponse2001DataIncomeStatementEbitda Ebitda { get; set; }

        /// <summary>
        /// Gets or Sets InterestIncome
        /// </summary>
        [DataMember(Name = "interestIncome", EmitDefaultValue = false)]
        public InlineResponse2001DataIncomeStatementInterestIncome InterestIncome { get; set; }

        /// <summary>
        /// Gets or Sets InterestExpense
        /// </summary>
        [DataMember(Name = "interestExpense", EmitDefaultValue = false)]
        public InlineResponse2001DataIncomeStatementInterestExpense InterestExpense { get; set; }

        /// <summary>
        /// Gets or Sets LoanLossProvision
        /// </summary>
        [DataMember(Name = "loanLossProvision", EmitDefaultValue = false)]
        public InlineResponse2001DataIncomeStatementLoanLossProvision LoanLossProvision { get; set; }

        /// <summary>
        /// Gets or Sets NetInterestIncome
        /// </summary>
        [DataMember(Name = "netInterestIncome", EmitDefaultValue = false)]
        public InlineResponse2001DataIncomeStatementNetInterestIncome NetInterestIncome { get; set; }

        /// <summary>
        /// Gets or Sets NetIncome
        /// </summary>
        [DataMember(Name = "netIncome", EmitDefaultValue = false)]
        public InlineResponse2001DataIncomeStatementNetIncome NetIncome { get; set; }

        /// <summary>
        /// Gets or Sets OperatingIncome
        /// </summary>
        [DataMember(Name = "operatingIncome", EmitDefaultValue = false)]
        public InlineResponse2001DataIncomeStatementOperatingIncome OperatingIncome { get; set; }

        /// <summary>
        /// Gets or Sets OperatingExpense
        /// </summary>
        [DataMember(Name = "operatingExpense", EmitDefaultValue = false)]
        public InlineResponse2001DataIncomeStatementOperatingExpense OperatingExpense { get; set; }

        /// <summary>
        /// Gets or Sets ClaimLossExpense
        /// </summary>
        [DataMember(Name = "claimLossExpense", EmitDefaultValue = false)]
        public InlineResponse2001DataIncomeStatementClaimLossExpense ClaimLossExpense { get; set; }

        /// <summary>
        /// Gets or Sets LongTermInsuranceReserves
        /// </summary>
        [DataMember(Name = "longTermInsuranceReserves", EmitDefaultValue = false)]
        public InlineResponse2001DataIncomeStatementLongTermInsuranceReserves LongTermInsuranceReserves { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class InlineResponse2001DataIncomeStatement {\n");
            sb.Append("  Sales: ").Append(Sales).Append("\n");
            sb.Append("  GrossIncome: ").Append(GrossIncome).Append("\n");
            sb.Append("  Ebit: ").Append(Ebit).Append("\n");
            sb.Append("  Ebitda: ").Append(Ebitda).Append("\n");
            sb.Append("  InterestIncome: ").Append(InterestIncome).Append("\n");
            sb.Append("  InterestExpense: ").Append(InterestExpense).Append("\n");
            sb.Append("  LoanLossProvision: ").Append(LoanLossProvision).Append("\n");
            sb.Append("  NetInterestIncome: ").Append(NetInterestIncome).Append("\n");
            sb.Append("  NetIncome: ").Append(NetIncome).Append("\n");
            sb.Append("  OperatingIncome: ").Append(OperatingIncome).Append("\n");
            sb.Append("  OperatingExpense: ").Append(OperatingExpense).Append("\n");
            sb.Append("  ClaimLossExpense: ").Append(ClaimLossExpense).Append("\n");
            sb.Append("  LongTermInsuranceReserves: ").Append(LongTermInsuranceReserves).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as InlineResponse2001DataIncomeStatement);
        }

        /// <summary>
        /// Returns true if InlineResponse2001DataIncomeStatement instances are equal
        /// </summary>
        /// <param name="input">Instance of InlineResponse2001DataIncomeStatement to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(InlineResponse2001DataIncomeStatement input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Sales == input.Sales ||
                    (this.Sales != null &&
                    this.Sales.Equals(input.Sales))
                ) && 
                (
                    this.GrossIncome == input.GrossIncome ||
                    (this.GrossIncome != null &&
                    this.GrossIncome.Equals(input.GrossIncome))
                ) && 
                (
                    this.Ebit == input.Ebit ||
                    (this.Ebit != null &&
                    this.Ebit.Equals(input.Ebit))
                ) && 
                (
                    this.Ebitda == input.Ebitda ||
                    (this.Ebitda != null &&
                    this.Ebitda.Equals(input.Ebitda))
                ) && 
                (
                    this.InterestIncome == input.InterestIncome ||
                    (this.InterestIncome != null &&
                    this.InterestIncome.Equals(input.InterestIncome))
                ) && 
                (
                    this.InterestExpense == input.InterestExpense ||
                    (this.InterestExpense != null &&
                    this.InterestExpense.Equals(input.InterestExpense))
                ) && 
                (
                    this.LoanLossProvision == input.LoanLossProvision ||
                    (this.LoanLossProvision != null &&
                    this.LoanLossProvision.Equals(input.LoanLossProvision))
                ) && 
                (
                    this.NetInterestIncome == input.NetInterestIncome ||
                    (this.NetInterestIncome != null &&
                    this.NetInterestIncome.Equals(input.NetInterestIncome))
                ) && 
                (
                    this.NetIncome == input.NetIncome ||
                    (this.NetIncome != null &&
                    this.NetIncome.Equals(input.NetIncome))
                ) && 
                (
                    this.OperatingIncome == input.OperatingIncome ||
                    (this.OperatingIncome != null &&
                    this.OperatingIncome.Equals(input.OperatingIncome))
                ) && 
                (
                    this.OperatingExpense == input.OperatingExpense ||
                    (this.OperatingExpense != null &&
                    this.OperatingExpense.Equals(input.OperatingExpense))
                ) && 
                (
                    this.ClaimLossExpense == input.ClaimLossExpense ||
                    (this.ClaimLossExpense != null &&
                    this.ClaimLossExpense.Equals(input.ClaimLossExpense))
                ) && 
                (
                    this.LongTermInsuranceReserves == input.LongTermInsuranceReserves ||
                    (this.LongTermInsuranceReserves != null &&
                    this.LongTermInsuranceReserves.Equals(input.LongTermInsuranceReserves))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Sales != null)
                {
                    hashCode = (hashCode * 59) + this.Sales.GetHashCode();
                }
                if (this.GrossIncome != null)
                {
                    hashCode = (hashCode * 59) + this.GrossIncome.GetHashCode();
                }
                if (this.Ebit != null)
                {
                    hashCode = (hashCode * 59) + this.Ebit.GetHashCode();
                }
                if (this.Ebitda != null)
                {
                    hashCode = (hashCode * 59) + this.Ebitda.GetHashCode();
                }
                if (this.InterestIncome != null)
                {
                    hashCode = (hashCode * 59) + this.InterestIncome.GetHashCode();
                }
                if (this.InterestExpense != null)
                {
                    hashCode = (hashCode * 59) + this.InterestExpense.GetHashCode();
                }
                if (this.LoanLossProvision != null)
                {
                    hashCode = (hashCode * 59) + this.LoanLossProvision.GetHashCode();
                }
                if (this.NetInterestIncome != null)
                {
                    hashCode = (hashCode * 59) + this.NetInterestIncome.GetHashCode();
                }
                if (this.NetIncome != null)
                {
                    hashCode = (hashCode * 59) + this.NetIncome.GetHashCode();
                }
                if (this.OperatingIncome != null)
                {
                    hashCode = (hashCode * 59) + this.OperatingIncome.GetHashCode();
                }
                if (this.OperatingExpense != null)
                {
                    hashCode = (hashCode * 59) + this.OperatingExpense.GetHashCode();
                }
                if (this.ClaimLossExpense != null)
                {
                    hashCode = (hashCode * 59) + this.ClaimLossExpense.GetHashCode();
                }
                if (this.LongTermInsuranceReserves != null)
                {
                    hashCode = (hashCode * 59) + this.LongTermInsuranceReserves.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
