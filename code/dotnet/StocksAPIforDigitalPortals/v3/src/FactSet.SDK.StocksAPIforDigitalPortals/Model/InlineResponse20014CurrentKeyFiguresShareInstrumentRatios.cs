/*
 * Stocks API For Digital Portals
 *
 * The Stocks API features a screener to search for equity instruments based on stock-specific parameters.  Parameters for up to three fiscal years might now be used in one request; data is available for the ten most recent completed fiscal years. Estimates are available for the current and two consecutive fiscal years. Search criteria also include benchmark-related attributes (beta, correlation, outperformance), and ESG parameters, based on FactSetâ€™s Truvalue ESG scores.  A separate endpoint returns the possible values and value ranges for the parameters that the endpoint /stock/notation/screener/search accepts Application developers can request the values and value ranges only for a restricted set of notations that match predefined parameters. This functionality may be used to pre-fill the values and value ranges of the parameters of the /stock/notation/screener/search endpoint so that performing a search always leads to a non-empty set of notations.  The endpoint /stock/notation/ranking/intraday/list ranks stocks notations using intraday figures, for example to build a gainers/losers list.   Additional endpoints include end-of-day benchmark key figures, and selected fundamentals (as of end of fiscal year and with daily updates).  This API is fully integrated with the corresponding [Quotes API](https://developer.factset.com/api-catalog/quotes-api-digital-portals), allowing access to detailed price and performance information of instruments, as well as basic security identifier cross-reference. For direct access to price histories, please refer to the [Time Series API for Digital Portals](https://developer.factset.com/api-catalog/time-series-api-digital-portals).  Similar criteria based screener APIs exist for fixed income instruments and securitized derivatives: See the [Bonds API](https://developer.factset.com/api-catalog/bonds-api-digital-portals) and the [Securitized Derivatives API](https://developer.factset.com/api-catalog/securitized-derivatives-api-digital-portals) for details.  See also the recipe [\"Enrich Your Digital Portal with Flexible Equity Screening\"](https://developer.factset.com/recipe-catalog/enrich-your-digital-portal-flexible-equity-screening). 
 *
 * The version of the OpenAPI document: 2
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = FactSet.SDK.StocksAPIforDigitalPortals.Client.OpenAPIDateConverter;

namespace FactSet.SDK.StocksAPIforDigitalPortals.Model
{
    /// <summary>
    /// Ratios.
    /// </summary>
    [DataContract(Name = "inline_response_200_14_currentKeyFigures_shareInstrument_ratios")]
    public partial class InlineResponse20014CurrentKeyFiguresShareInstrumentRatios : IEquatable<InlineResponse20014CurrentKeyFiguresShareInstrumentRatios>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="InlineResponse20014CurrentKeyFiguresShareInstrumentRatios" /> class.
        /// </summary>
        /// <param name="priceEarnings">Price earnings ratio..</param>
        /// <param name="priceBookValue">Price book value ratio..</param>
        /// <param name="priceCashFlow">Price cash flow ratio..</param>
        /// <param name="priceSales">Price sales ratio..</param>
        /// <param name="dividendYield">Dividend yield..</param>
        /// <param name="earningsYield">Earnings yield..</param>
        public InlineResponse20014CurrentKeyFiguresShareInstrumentRatios(decimal? priceEarnings = default(decimal?), decimal? priceBookValue = default(decimal?), decimal? priceCashFlow = default(decimal?), decimal? priceSales = default(decimal?), decimal? dividendYield = default(decimal?), decimal? earningsYield = default(decimal?))
        {
            this.PriceEarnings = priceEarnings;
            this.PriceBookValue = priceBookValue;
            this.PriceCashFlow = priceCashFlow;
            this.PriceSales = priceSales;
            this.DividendYield = dividendYield;
            this.EarningsYield = earningsYield;
        }

        /// <summary>
        /// Price earnings ratio.
        /// </summary>
        /// <value>Price earnings ratio.</value>
        [DataMember(Name = "priceEarnings", EmitDefaultValue = true)]
        public decimal? PriceEarnings { get; set; }

        /// <summary>
        /// Price book value ratio.
        /// </summary>
        /// <value>Price book value ratio.</value>
        [DataMember(Name = "priceBookValue", EmitDefaultValue = true)]
        public decimal? PriceBookValue { get; set; }

        /// <summary>
        /// Price cash flow ratio.
        /// </summary>
        /// <value>Price cash flow ratio.</value>
        [DataMember(Name = "priceCashFlow", EmitDefaultValue = true)]
        public decimal? PriceCashFlow { get; set; }

        /// <summary>
        /// Price sales ratio.
        /// </summary>
        /// <value>Price sales ratio.</value>
        [DataMember(Name = "priceSales", EmitDefaultValue = true)]
        public decimal? PriceSales { get; set; }

        /// <summary>
        /// Dividend yield.
        /// </summary>
        /// <value>Dividend yield.</value>
        [DataMember(Name = "dividendYield", EmitDefaultValue = true)]
        public decimal? DividendYield { get; set; }

        /// <summary>
        /// Earnings yield.
        /// </summary>
        /// <value>Earnings yield.</value>
        [DataMember(Name = "earningsYield", EmitDefaultValue = true)]
        public decimal? EarningsYield { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class InlineResponse20014CurrentKeyFiguresShareInstrumentRatios {\n");
            sb.Append("  PriceEarnings: ").Append(PriceEarnings).Append("\n");
            sb.Append("  PriceBookValue: ").Append(PriceBookValue).Append("\n");
            sb.Append("  PriceCashFlow: ").Append(PriceCashFlow).Append("\n");
            sb.Append("  PriceSales: ").Append(PriceSales).Append("\n");
            sb.Append("  DividendYield: ").Append(DividendYield).Append("\n");
            sb.Append("  EarningsYield: ").Append(EarningsYield).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as InlineResponse20014CurrentKeyFiguresShareInstrumentRatios);
        }

        /// <summary>
        /// Returns true if InlineResponse20014CurrentKeyFiguresShareInstrumentRatios instances are equal
        /// </summary>
        /// <param name="input">Instance of InlineResponse20014CurrentKeyFiguresShareInstrumentRatios to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(InlineResponse20014CurrentKeyFiguresShareInstrumentRatios input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.PriceEarnings == input.PriceEarnings ||
                    (this.PriceEarnings != null &&
                    this.PriceEarnings.Equals(input.PriceEarnings))
                ) && 
                (
                    this.PriceBookValue == input.PriceBookValue ||
                    (this.PriceBookValue != null &&
                    this.PriceBookValue.Equals(input.PriceBookValue))
                ) && 
                (
                    this.PriceCashFlow == input.PriceCashFlow ||
                    (this.PriceCashFlow != null &&
                    this.PriceCashFlow.Equals(input.PriceCashFlow))
                ) && 
                (
                    this.PriceSales == input.PriceSales ||
                    (this.PriceSales != null &&
                    this.PriceSales.Equals(input.PriceSales))
                ) && 
                (
                    this.DividendYield == input.DividendYield ||
                    (this.DividendYield != null &&
                    this.DividendYield.Equals(input.DividendYield))
                ) && 
                (
                    this.EarningsYield == input.EarningsYield ||
                    (this.EarningsYield != null &&
                    this.EarningsYield.Equals(input.EarningsYield))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.PriceEarnings != null)
                {
                    hashCode = (hashCode * 59) + this.PriceEarnings.GetHashCode();
                }
                if (this.PriceBookValue != null)
                {
                    hashCode = (hashCode * 59) + this.PriceBookValue.GetHashCode();
                }
                if (this.PriceCashFlow != null)
                {
                    hashCode = (hashCode * 59) + this.PriceCashFlow.GetHashCode();
                }
                if (this.PriceSales != null)
                {
                    hashCode = (hashCode * 59) + this.PriceSales.GetHashCode();
                }
                if (this.DividendYield != null)
                {
                    hashCode = (hashCode * 59) + this.DividendYield.GetHashCode();
                }
                if (this.EarningsYield != null)
                {
                    hashCode = (hashCode * 59) + this.EarningsYield.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
