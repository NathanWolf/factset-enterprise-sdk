/*
 * Stocks API For Digital Portals
 *
 * The stocks API features a screener to search for equity instruments based on stock-specific parameters.  Parameters for up to three fiscal years might now be used in one request; data is available for the ten most recent completed fiscal years. Estimates are available for the current and two consecutive fiscal years.  A separate endpoint returns the possible values and value ranges for the parameters that the endpoint /stock/notation/screener/search accepts: Application developers can request the values and value ranges only for a restricted set of notations that match predefined parameters. This functionality may be used to pre-fill the values and value ranges of the parameters of the /stock/notation/screener/search endpoint so that performing a search always leads to a non-empty set of notations.  The endpoint /stock/notation/ranking/intraday/list ranks stocks notations using intraday figures, for example to build a gainers/losers list.   Additional endpoints include end-of-day benchmark key figures, and selected fundamentals (as of end of fiscal year and with potentially daily updates).  This API is fully integrated with the corresponding Quotes API, allowing access to detailed price and performance information of instruments, as well as basic security identifier cross-reference. For direct access to price histories, please refer to the Time Series API for Digital Portals.  Similar criteria based screener APIs exist for fixed income instruments and securitized derivatives: See the Bonds API and the Securitized Derivatives API for details.
 *
 * The version of the OpenAPI document: 2
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = FactSet.SDK.StocksAPIforDigitalPortals.Client.OpenAPIDateConverter;

namespace FactSet.SDK.StocksAPIforDigitalPortals.Model
{
    /// <summary>
    /// StockNotationScreenerSearchDataReportedKeyFigures
    /// </summary>
    [DataContract(Name = "_stock_notation_screener_search_data_reportedKeyFigures")]
    public partial class StockNotationScreenerSearchDataReportedKeyFigures : IEquatable<StockNotationScreenerSearchDataReportedKeyFigures>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="StockNotationScreenerSearchDataReportedKeyFigures" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected StockNotationScreenerSearchDataReportedKeyFigures() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="StockNotationScreenerSearchDataReportedKeyFigures" /> class.
        /// </summary>
        /// <param name="fiscalYear">fiscalYear (required).</param>
        /// <param name="currencyDependentKeyFigures">currencyDependentKeyFigures.</param>
        /// <param name="ebitMargin">ebitMargin.</param>
        /// <param name="ebitdaMargin">ebitdaMargin.</param>
        /// <param name="netIncomeMargin">netIncomeMargin.</param>
        /// <param name="grossIncomeMargin">grossIncomeMargin.</param>
        /// <param name="operatingMargin">operatingMargin.</param>
        /// <param name="returnOnAssets">returnOnAssets.</param>
        /// <param name="returnOnEquity">returnOnEquity.</param>
        /// <param name="ratios">ratios.</param>
        public StockNotationScreenerSearchDataReportedKeyFigures(StockNotationScreenerSearchDataFiscalYear fiscalYear = default(StockNotationScreenerSearchDataFiscalYear), StockNotationScreenerSearchDataCurrencyDependentKeyFigures currencyDependentKeyFigures = default(StockNotationScreenerSearchDataCurrencyDependentKeyFigures), StockNotationScreenerSearchDataEbitMargin ebitMargin = default(StockNotationScreenerSearchDataEbitMargin), StockNotationScreenerSearchDataEbitdaMargin ebitdaMargin = default(StockNotationScreenerSearchDataEbitdaMargin), StockNotationScreenerSearchDataNetIncomeMargin netIncomeMargin = default(StockNotationScreenerSearchDataNetIncomeMargin), StockNotationScreenerSearchDataGrossIncomeMargin grossIncomeMargin = default(StockNotationScreenerSearchDataGrossIncomeMargin), StockNotationScreenerSearchDataOperatingMargin operatingMargin = default(StockNotationScreenerSearchDataOperatingMargin), StockNotationScreenerSearchDataReturnOnAssets returnOnAssets = default(StockNotationScreenerSearchDataReturnOnAssets), StockNotationScreenerSearchDataReturnOnEquity returnOnEquity = default(StockNotationScreenerSearchDataReturnOnEquity), StockNotationScreenerSearchDataRatios ratios = default(StockNotationScreenerSearchDataRatios))
        {
            // to ensure "fiscalYear" is required (not null)
            if (fiscalYear == null) {
                throw new ArgumentNullException("fiscalYear is a required property for StockNotationScreenerSearchDataReportedKeyFigures and cannot be null");
            }
            this.FiscalYear = fiscalYear;
            this.CurrencyDependentKeyFigures = currencyDependentKeyFigures;
            this.EbitMargin = ebitMargin;
            this.EbitdaMargin = ebitdaMargin;
            this.NetIncomeMargin = netIncomeMargin;
            this.GrossIncomeMargin = grossIncomeMargin;
            this.OperatingMargin = operatingMargin;
            this.ReturnOnAssets = returnOnAssets;
            this.ReturnOnEquity = returnOnEquity;
            this.Ratios = ratios;
        }

        /// <summary>
        /// Gets or Sets FiscalYear
        /// </summary>
        [DataMember(Name = "fiscalYear", IsRequired = true, EmitDefaultValue = false)]
        public StockNotationScreenerSearchDataFiscalYear FiscalYear { get; set; }

        /// <summary>
        /// Gets or Sets CurrencyDependentKeyFigures
        /// </summary>
        [DataMember(Name = "currencyDependentKeyFigures", EmitDefaultValue = false)]
        public StockNotationScreenerSearchDataCurrencyDependentKeyFigures CurrencyDependentKeyFigures { get; set; }

        /// <summary>
        /// Gets or Sets EbitMargin
        /// </summary>
        [DataMember(Name = "ebitMargin", EmitDefaultValue = false)]
        public StockNotationScreenerSearchDataEbitMargin EbitMargin { get; set; }

        /// <summary>
        /// Gets or Sets EbitdaMargin
        /// </summary>
        [DataMember(Name = "ebitdaMargin", EmitDefaultValue = false)]
        public StockNotationScreenerSearchDataEbitdaMargin EbitdaMargin { get; set; }

        /// <summary>
        /// Gets or Sets NetIncomeMargin
        /// </summary>
        [DataMember(Name = "netIncomeMargin", EmitDefaultValue = false)]
        public StockNotationScreenerSearchDataNetIncomeMargin NetIncomeMargin { get; set; }

        /// <summary>
        /// Gets or Sets GrossIncomeMargin
        /// </summary>
        [DataMember(Name = "grossIncomeMargin", EmitDefaultValue = false)]
        public StockNotationScreenerSearchDataGrossIncomeMargin GrossIncomeMargin { get; set; }

        /// <summary>
        /// Gets or Sets OperatingMargin
        /// </summary>
        [DataMember(Name = "operatingMargin", EmitDefaultValue = false)]
        public StockNotationScreenerSearchDataOperatingMargin OperatingMargin { get; set; }

        /// <summary>
        /// Gets or Sets ReturnOnAssets
        /// </summary>
        [DataMember(Name = "returnOnAssets", EmitDefaultValue = false)]
        public StockNotationScreenerSearchDataReturnOnAssets ReturnOnAssets { get; set; }

        /// <summary>
        /// Gets or Sets ReturnOnEquity
        /// </summary>
        [DataMember(Name = "returnOnEquity", EmitDefaultValue = false)]
        public StockNotationScreenerSearchDataReturnOnEquity ReturnOnEquity { get; set; }

        /// <summary>
        /// Gets or Sets Ratios
        /// </summary>
        [DataMember(Name = "ratios", EmitDefaultValue = false)]
        public StockNotationScreenerSearchDataRatios Ratios { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class StockNotationScreenerSearchDataReportedKeyFigures {\n");
            sb.Append("  FiscalYear: ").Append(FiscalYear).Append("\n");
            sb.Append("  CurrencyDependentKeyFigures: ").Append(CurrencyDependentKeyFigures).Append("\n");
            sb.Append("  EbitMargin: ").Append(EbitMargin).Append("\n");
            sb.Append("  EbitdaMargin: ").Append(EbitdaMargin).Append("\n");
            sb.Append("  NetIncomeMargin: ").Append(NetIncomeMargin).Append("\n");
            sb.Append("  GrossIncomeMargin: ").Append(GrossIncomeMargin).Append("\n");
            sb.Append("  OperatingMargin: ").Append(OperatingMargin).Append("\n");
            sb.Append("  ReturnOnAssets: ").Append(ReturnOnAssets).Append("\n");
            sb.Append("  ReturnOnEquity: ").Append(ReturnOnEquity).Append("\n");
            sb.Append("  Ratios: ").Append(Ratios).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as StockNotationScreenerSearchDataReportedKeyFigures);
        }

        /// <summary>
        /// Returns true if StockNotationScreenerSearchDataReportedKeyFigures instances are equal
        /// </summary>
        /// <param name="input">Instance of StockNotationScreenerSearchDataReportedKeyFigures to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(StockNotationScreenerSearchDataReportedKeyFigures input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.FiscalYear == input.FiscalYear ||
                    (this.FiscalYear != null &&
                    this.FiscalYear.Equals(input.FiscalYear))
                ) && 
                (
                    this.CurrencyDependentKeyFigures == input.CurrencyDependentKeyFigures ||
                    (this.CurrencyDependentKeyFigures != null &&
                    this.CurrencyDependentKeyFigures.Equals(input.CurrencyDependentKeyFigures))
                ) && 
                (
                    this.EbitMargin == input.EbitMargin ||
                    (this.EbitMargin != null &&
                    this.EbitMargin.Equals(input.EbitMargin))
                ) && 
                (
                    this.EbitdaMargin == input.EbitdaMargin ||
                    (this.EbitdaMargin != null &&
                    this.EbitdaMargin.Equals(input.EbitdaMargin))
                ) && 
                (
                    this.NetIncomeMargin == input.NetIncomeMargin ||
                    (this.NetIncomeMargin != null &&
                    this.NetIncomeMargin.Equals(input.NetIncomeMargin))
                ) && 
                (
                    this.GrossIncomeMargin == input.GrossIncomeMargin ||
                    (this.GrossIncomeMargin != null &&
                    this.GrossIncomeMargin.Equals(input.GrossIncomeMargin))
                ) && 
                (
                    this.OperatingMargin == input.OperatingMargin ||
                    (this.OperatingMargin != null &&
                    this.OperatingMargin.Equals(input.OperatingMargin))
                ) && 
                (
                    this.ReturnOnAssets == input.ReturnOnAssets ||
                    (this.ReturnOnAssets != null &&
                    this.ReturnOnAssets.Equals(input.ReturnOnAssets))
                ) && 
                (
                    this.ReturnOnEquity == input.ReturnOnEquity ||
                    (this.ReturnOnEquity != null &&
                    this.ReturnOnEquity.Equals(input.ReturnOnEquity))
                ) && 
                (
                    this.Ratios == input.Ratios ||
                    (this.Ratios != null &&
                    this.Ratios.Equals(input.Ratios))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.FiscalYear != null)
                {
                    hashCode = (hashCode * 59) + this.FiscalYear.GetHashCode();
                }
                if (this.CurrencyDependentKeyFigures != null)
                {
                    hashCode = (hashCode * 59) + this.CurrencyDependentKeyFigures.GetHashCode();
                }
                if (this.EbitMargin != null)
                {
                    hashCode = (hashCode * 59) + this.EbitMargin.GetHashCode();
                }
                if (this.EbitdaMargin != null)
                {
                    hashCode = (hashCode * 59) + this.EbitdaMargin.GetHashCode();
                }
                if (this.NetIncomeMargin != null)
                {
                    hashCode = (hashCode * 59) + this.NetIncomeMargin.GetHashCode();
                }
                if (this.GrossIncomeMargin != null)
                {
                    hashCode = (hashCode * 59) + this.GrossIncomeMargin.GetHashCode();
                }
                if (this.OperatingMargin != null)
                {
                    hashCode = (hashCode * 59) + this.OperatingMargin.GetHashCode();
                }
                if (this.ReturnOnAssets != null)
                {
                    hashCode = (hashCode * 59) + this.ReturnOnAssets.GetHashCode();
                }
                if (this.ReturnOnEquity != null)
                {
                    hashCode = (hashCode * 59) + this.ReturnOnEquity.GetHashCode();
                }
                if (this.Ratios != null)
                {
                    hashCode = (hashCode * 59) + this.Ratios.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
