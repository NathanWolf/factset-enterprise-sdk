/*
 * Stocks API For Digital Portals
 *
 * The Stocks API features a screener to search for equity instruments based on stock-specific parameters.  Parameters for up to three fiscal years might now be used in one request; data is available for the ten most recent completed fiscal years. Estimates are available for the current and two consecutive fiscal years. Search criteria also include benchmark-related attributes (beta, correlation, outperformance), and ESG parameters, based on FactSetâ€™s Truvalue ESG scores.  A separate endpoint returns the possible values and value ranges for the parameters that the endpoint /stock/notation/screener/search accepts Application developers can request the values and value ranges only for a restricted set of notations that match predefined parameters. This functionality may be used to pre-fill the values and value ranges of the parameters of the /stock/notation/screener/search endpoint so that performing a search always leads to a non-empty set of notations.  The endpoint /stock/notation/ranking/intraday/list ranks stocks notations using intraday figures, for example to build a gainers/losers list.   Additional endpoints include end-of-day benchmark key figures, and selected fundamentals (as of end of fiscal year and with daily updates).  This API is fully integrated with the corresponding [Quotes API](https://developer.factset.com/api-catalog/quotes-api-digital-portals), allowing access to detailed price and performance information of instruments, as well as basic security identifier cross-reference. For direct access to price histories, please refer to the [Time Series API for Digital Portals](https://developer.factset.com/api-catalog/time-series-api-digital-portals).  Similar criteria based screener APIs exist for fixed income instruments and securitized derivatives: See the [Bonds API](https://developer.factset.com/api-catalog/bonds-api-digital-portals) and the [Securitized Derivatives API](https://developer.factset.com/api-catalog/securitized-derivatives-api-digital-portals) for details.  See also the recipe [\"Enrich Your Digital Portal with Flexible Equity Screening\"](https://developer.factset.com/recipe-catalog/enrich-your-digital-portal-flexible-equity-screening). 
 *
 * The version of the OpenAPI document: 2
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = FactSet.SDK.StocksAPIforDigitalPortals.Client.OpenAPIDateConverter;

namespace FactSet.SDK.StocksAPIforDigitalPortals.Model
{
    /// <summary>
    /// The data member contains the request&#39;s primary data.
    /// </summary>
    [DataContract(Name = "PostStockNotationRankingIntradayListRequest_data")]
    public partial class PostStockNotationRankingIntradayListRequestData : IEquatable<PostStockNotationRankingIntradayListRequestData>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PostStockNotationRankingIntradayListRequestData" /> class.
        /// </summary>
        /// <param name="prices">prices.</param>
        /// <param name="currency">currency.</param>
        /// <param name="market">market.</param>
        /// <param name="instrumentRestrictionList">instrumentRestrictionList.</param>
        /// <param name="notationRestrictionList">notationRestrictionList.</param>
        /// <param name="industryClassification">industryClassification.</param>
        /// <param name="company">company.</param>
        /// <param name="indexMembership">indexMembership.</param>
        /// <param name="performance">performance.</param>
        public PostStockNotationRankingIntradayListRequestData(PostStockNotationRankingIntradayListRequestDataPrices prices = default(PostStockNotationRankingIntradayListRequestDataPrices), PostStockNotationRankingIntradayListRequestDataCurrency currency = default(PostStockNotationRankingIntradayListRequestDataCurrency), PostStockNotationRankingIntradayListRequestDataMarket market = default(PostStockNotationRankingIntradayListRequestDataMarket), PostStockNotationRankingIntradayListRequestDataInstrumentRestrictionList instrumentRestrictionList = default(PostStockNotationRankingIntradayListRequestDataInstrumentRestrictionList), PostStockNotationRankingIntradayListRequestDataNotationRestrictionList notationRestrictionList = default(PostStockNotationRankingIntradayListRequestDataNotationRestrictionList), PostStockNotationRankingIntradayListRequestDataIndustryClassification industryClassification = default(PostStockNotationRankingIntradayListRequestDataIndustryClassification), PostStockNotationRankingIntradayListRequestDataCompany company = default(PostStockNotationRankingIntradayListRequestDataCompany), PostStockNotationRankingIntradayListRequestDataIndexMembership indexMembership = default(PostStockNotationRankingIntradayListRequestDataIndexMembership), PostStockNotationRankingIntradayListRequestDataPerformance performance = default(PostStockNotationRankingIntradayListRequestDataPerformance))
        {
            this.Prices = prices;
            this.Currency = currency;
            this.Market = market;
            this.InstrumentRestrictionList = instrumentRestrictionList;
            this.NotationRestrictionList = notationRestrictionList;
            this.IndustryClassification = industryClassification;
            this.Company = company;
            this.IndexMembership = indexMembership;
            this.Performance = performance;
        }

        /// <summary>
        /// Gets or Sets Prices
        /// </summary>
        [DataMember(Name = "prices", EmitDefaultValue = false)]
        public PostStockNotationRankingIntradayListRequestDataPrices Prices { get; set; }

        /// <summary>
        /// Gets or Sets Currency
        /// </summary>
        [DataMember(Name = "currency", EmitDefaultValue = false)]
        public PostStockNotationRankingIntradayListRequestDataCurrency Currency { get; set; }

        /// <summary>
        /// Gets or Sets Market
        /// </summary>
        [DataMember(Name = "market", EmitDefaultValue = false)]
        public PostStockNotationRankingIntradayListRequestDataMarket Market { get; set; }

        /// <summary>
        /// Gets or Sets InstrumentRestrictionList
        /// </summary>
        [DataMember(Name = "instrumentRestrictionList", EmitDefaultValue = false)]
        public PostStockNotationRankingIntradayListRequestDataInstrumentRestrictionList InstrumentRestrictionList { get; set; }

        /// <summary>
        /// Gets or Sets NotationRestrictionList
        /// </summary>
        [DataMember(Name = "notationRestrictionList", EmitDefaultValue = false)]
        public PostStockNotationRankingIntradayListRequestDataNotationRestrictionList NotationRestrictionList { get; set; }

        /// <summary>
        /// Gets or Sets IndustryClassification
        /// </summary>
        [DataMember(Name = "industryClassification", EmitDefaultValue = false)]
        public PostStockNotationRankingIntradayListRequestDataIndustryClassification IndustryClassification { get; set; }

        /// <summary>
        /// Gets or Sets Company
        /// </summary>
        [DataMember(Name = "company", EmitDefaultValue = false)]
        public PostStockNotationRankingIntradayListRequestDataCompany Company { get; set; }

        /// <summary>
        /// Gets or Sets IndexMembership
        /// </summary>
        [DataMember(Name = "indexMembership", EmitDefaultValue = false)]
        public PostStockNotationRankingIntradayListRequestDataIndexMembership IndexMembership { get; set; }

        /// <summary>
        /// Gets or Sets Performance
        /// </summary>
        [DataMember(Name = "performance", EmitDefaultValue = false)]
        public PostStockNotationRankingIntradayListRequestDataPerformance Performance { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class PostStockNotationRankingIntradayListRequestData {\n");
            sb.Append("  Prices: ").Append(Prices).Append("\n");
            sb.Append("  Currency: ").Append(Currency).Append("\n");
            sb.Append("  Market: ").Append(Market).Append("\n");
            sb.Append("  InstrumentRestrictionList: ").Append(InstrumentRestrictionList).Append("\n");
            sb.Append("  NotationRestrictionList: ").Append(NotationRestrictionList).Append("\n");
            sb.Append("  IndustryClassification: ").Append(IndustryClassification).Append("\n");
            sb.Append("  Company: ").Append(Company).Append("\n");
            sb.Append("  IndexMembership: ").Append(IndexMembership).Append("\n");
            sb.Append("  Performance: ").Append(Performance).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PostStockNotationRankingIntradayListRequestData);
        }

        /// <summary>
        /// Returns true if PostStockNotationRankingIntradayListRequestData instances are equal
        /// </summary>
        /// <param name="input">Instance of PostStockNotationRankingIntradayListRequestData to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PostStockNotationRankingIntradayListRequestData input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Prices == input.Prices ||
                    (this.Prices != null &&
                    this.Prices.Equals(input.Prices))
                ) && 
                (
                    this.Currency == input.Currency ||
                    (this.Currency != null &&
                    this.Currency.Equals(input.Currency))
                ) && 
                (
                    this.Market == input.Market ||
                    (this.Market != null &&
                    this.Market.Equals(input.Market))
                ) && 
                (
                    this.InstrumentRestrictionList == input.InstrumentRestrictionList ||
                    (this.InstrumentRestrictionList != null &&
                    this.InstrumentRestrictionList.Equals(input.InstrumentRestrictionList))
                ) && 
                (
                    this.NotationRestrictionList == input.NotationRestrictionList ||
                    (this.NotationRestrictionList != null &&
                    this.NotationRestrictionList.Equals(input.NotationRestrictionList))
                ) && 
                (
                    this.IndustryClassification == input.IndustryClassification ||
                    (this.IndustryClassification != null &&
                    this.IndustryClassification.Equals(input.IndustryClassification))
                ) && 
                (
                    this.Company == input.Company ||
                    (this.Company != null &&
                    this.Company.Equals(input.Company))
                ) && 
                (
                    this.IndexMembership == input.IndexMembership ||
                    (this.IndexMembership != null &&
                    this.IndexMembership.Equals(input.IndexMembership))
                ) && 
                (
                    this.Performance == input.Performance ||
                    (this.Performance != null &&
                    this.Performance.Equals(input.Performance))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Prices != null)
                {
                    hashCode = (hashCode * 59) + this.Prices.GetHashCode();
                }
                if (this.Currency != null)
                {
                    hashCode = (hashCode * 59) + this.Currency.GetHashCode();
                }
                if (this.Market != null)
                {
                    hashCode = (hashCode * 59) + this.Market.GetHashCode();
                }
                if (this.InstrumentRestrictionList != null)
                {
                    hashCode = (hashCode * 59) + this.InstrumentRestrictionList.GetHashCode();
                }
                if (this.NotationRestrictionList != null)
                {
                    hashCode = (hashCode * 59) + this.NotationRestrictionList.GetHashCode();
                }
                if (this.IndustryClassification != null)
                {
                    hashCode = (hashCode * 59) + this.IndustryClassification.GetHashCode();
                }
                if (this.Company != null)
                {
                    hashCode = (hashCode * 59) + this.Company.GetHashCode();
                }
                if (this.IndexMembership != null)
                {
                    hashCode = (hashCode * 59) + this.IndexMembership.GetHashCode();
                }
                if (this.Performance != null)
                {
                    hashCode = (hashCode * 59) + this.Performance.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
