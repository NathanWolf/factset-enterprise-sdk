/*
 * Stocks API For Digital Portals
 *
 * The Stocks API features a screener to search for equity instruments based on stock-specific parameters.  Parameters for up to three fiscal years might now be used in one request; data is available for the ten most recent completed fiscal years. Estimates are available for the current and two consecutive fiscal years. Search criteria also include benchmark-related attributes (beta, correlation, outperformance), and ESG parameters, based on FactSetâ€™s Truvalue ESG scores.  A separate endpoint returns the possible values and value ranges for the parameters that the endpoint /stock/notation/screener/search accepts Application developers can request the values and value ranges only for a restricted set of notations that match predefined parameters. This functionality may be used to pre-fill the values and value ranges of the parameters of the /stock/notation/screener/search endpoint so that performing a search always leads to a non-empty set of notations.  The endpoint /stock/notation/ranking/intraday/list ranks stocks notations using intraday figures, for example to build a gainers/losers list.   Additional endpoints include end-of-day benchmark key figures, and selected fundamentals (as of end of fiscal year and with daily updates).  This API is fully integrated with the corresponding [Quotes API](https://developer.factset.com/api-catalog/quotes-api-digital-portals), allowing access to detailed price and performance information of instruments, as well as basic security identifier cross-reference. For direct access to price histories, please refer to the [Time Series API for Digital Portals](https://developer.factset.com/api-catalog/time-series-api-digital-portals).  Similar criteria based screener APIs exist for fixed income instruments and securitized derivatives: See the [Bonds API](https://developer.factset.com/api-catalog/bonds-api-digital-portals) and the [Securitized Derivatives API](https://developer.factset.com/api-catalog/securitized-derivatives-api-digital-portals) for details.  See also the recipe [\"Enrich Your Digital Portal with Flexible Equity Screening\"](https://developer.factset.com/recipe-catalog/enrich-your-digital-portal-flexible-equity-screening). 
 *
 * The version of the OpenAPI document: 2
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = FactSet.SDK.StocksAPIforDigitalPortals.Client.OpenAPIDateConverter;

namespace FactSet.SDK.StocksAPIforDigitalPortals.Model
{
    /// <summary>
    /// Total claim and loss expenses, which is all expenses related to the payment of policy benefits, including adjusters&#39; fees, investigating expenses and other costs associated with settling claims. Relevant for insurance companies.
    /// </summary>
    [DataContract(Name = "inline_response_200_1_data_incomeStatement_claimLossExpense")]
    public partial class InlineResponse2001DataIncomeStatementClaimLossExpense : IEquatable<InlineResponse2001DataIncomeStatementClaimLossExpense>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="InlineResponse2001DataIncomeStatementClaimLossExpense" /> class.
        /// </summary>
        /// <param name="value">Value of the total claim and loss expenses..</param>
        /// <param name="growth">Annual growth rate of the total claim and loss expenses..</param>
        /// <param name="lossRatio">Loss ratio, which is the ratio of the total claim and loss expenses divided by the portion of total premiums needed to cover all expenses and benefits. Relevant for insurance companies..</param>
        public InlineResponse2001DataIncomeStatementClaimLossExpense(decimal? value = default(decimal?), decimal? growth = default(decimal?), decimal? lossRatio = default(decimal?))
        {
            this.Value = value;
            this.Growth = growth;
            this.LossRatio = lossRatio;
        }

        /// <summary>
        /// Value of the total claim and loss expenses.
        /// </summary>
        /// <value>Value of the total claim and loss expenses.</value>
        [DataMember(Name = "value", EmitDefaultValue = true)]
        public decimal? Value { get; set; }

        /// <summary>
        /// Annual growth rate of the total claim and loss expenses.
        /// </summary>
        /// <value>Annual growth rate of the total claim and loss expenses.</value>
        [DataMember(Name = "growth", EmitDefaultValue = true)]
        public decimal? Growth { get; set; }

        /// <summary>
        /// Loss ratio, which is the ratio of the total claim and loss expenses divided by the portion of total premiums needed to cover all expenses and benefits. Relevant for insurance companies.
        /// </summary>
        /// <value>Loss ratio, which is the ratio of the total claim and loss expenses divided by the portion of total premiums needed to cover all expenses and benefits. Relevant for insurance companies.</value>
        [DataMember(Name = "lossRatio", EmitDefaultValue = true)]
        public decimal? LossRatio { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class InlineResponse2001DataIncomeStatementClaimLossExpense {\n");
            sb.Append("  Value: ").Append(Value).Append("\n");
            sb.Append("  Growth: ").Append(Growth).Append("\n");
            sb.Append("  LossRatio: ").Append(LossRatio).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as InlineResponse2001DataIncomeStatementClaimLossExpense);
        }

        /// <summary>
        /// Returns true if InlineResponse2001DataIncomeStatementClaimLossExpense instances are equal
        /// </summary>
        /// <param name="input">Instance of InlineResponse2001DataIncomeStatementClaimLossExpense to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(InlineResponse2001DataIncomeStatementClaimLossExpense input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Value == input.Value ||
                    (this.Value != null &&
                    this.Value.Equals(input.Value))
                ) && 
                (
                    this.Growth == input.Growth ||
                    (this.Growth != null &&
                    this.Growth.Equals(input.Growth))
                ) && 
                (
                    this.LossRatio == input.LossRatio ||
                    (this.LossRatio != null &&
                    this.LossRatio.Equals(input.LossRatio))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Value != null)
                {
                    hashCode = (hashCode * 59) + this.Value.GetHashCode();
                }
                if (this.Growth != null)
                {
                    hashCode = (hashCode * 59) + this.Growth.GetHashCode();
                }
                if (this.LossRatio != null)
                {
                    hashCode = (hashCode * 59) + this.LossRatio.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
