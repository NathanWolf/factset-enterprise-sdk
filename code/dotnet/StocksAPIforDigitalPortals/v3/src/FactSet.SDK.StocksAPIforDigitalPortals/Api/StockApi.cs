/*
 * Stocks API For Digital Portals
 *
 * The Stocks API features a screener to search for equity instruments based on stock-specific parameters.  Parameters for up to three fiscal years might now be used in one request; data is available for the ten most recent completed fiscal years. Estimates are available for the current and two consecutive fiscal years. Search criteria also include benchmark-related attributes (beta, correlation, outperformance), and ESG parameters, based on FactSetâ€™s Truvalue ESG scores.  A separate endpoint returns the possible values and value ranges for the parameters that the endpoint /stock/notation/screener/search accepts Application developers can request the values and value ranges only for a restricted set of notations that match predefined parameters. This functionality may be used to pre-fill the values and value ranges of the parameters of the /stock/notation/screener/search endpoint so that performing a search always leads to a non-empty set of notations.  The endpoint /stock/notation/ranking/intraday/list ranks stocks notations using intraday figures, for example to build a gainers/losers list.   Additional endpoints include end-of-day benchmark key figures, and selected fundamentals (as of end of fiscal year and with daily updates).  This API is fully integrated with the corresponding [Quotes API](https://developer.factset.com/api-catalog/quotes-api-digital-portals), allowing access to detailed price and performance information of instruments, as well as basic security identifier cross-reference. For direct access to price histories, please refer to the [Time Series API for Digital Portals](https://developer.factset.com/api-catalog/time-series-api-digital-portals).  Similar criteria based screener APIs exist for fixed income instruments and securitized derivatives: See the [Bonds API](https://developer.factset.com/api-catalog/bonds-api-digital-portals) and the [Securitized Derivatives API](https://developer.factset.com/api-catalog/securitized-derivatives-api-digital-portals) for details.  See also the recipe [\"Enrich Your Digital Portal with Flexible Equity Screening\"](https://developer.factset.com/recipe-catalog/enrich-your-digital-portal-flexible-equity-screening). 
 *
 * The version of the OpenAPI document: 2
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using FactSet.SDK.StocksAPIforDigitalPortals.Client;
using FactSet.SDK.StocksAPIforDigitalPortals.Model;
using FactSet.SDK.Utils.Authentication;

namespace FactSet.SDK.StocksAPIforDigitalPortals.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IStockApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Provides key elements of a stock profile together with the profile of the issuing company.
        /// </summary>
        /// <remarks>
        /// Provides key elements of a stock profile together with the profile of the issuing company.
        /// </remarks>
        /// <exception cref="FactSet.SDK.StocksAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifier"></param>
        /// <param name="identifierType"></param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="language"> (optional)</param>
        /// <returns>InlineResponse2009</returns>
        InlineResponse2009 GetStockCompositeProfileGetByNotation(string identifier, string identifierType, List<string> attributes = default(List<string>), string language = default(string));

        /// <summary>
        /// Provides key elements of a stock profile together with the profile of the issuing company.
        /// </summary>
        /// <remarks>
        /// Provides key elements of a stock profile together with the profile of the issuing company.
        /// </remarks>
        /// <exception cref="FactSet.SDK.StocksAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifier"></param>
        /// <param name="identifierType"></param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="language"> (optional)</param>
        /// <returns>ApiResponse of InlineResponse2009</returns>
        ApiResponse<InlineResponse2009> GetStockCompositeProfileGetByNotationWithHttpInfo(string identifier, string identifierType, List<string> attributes = default(List<string>), string language = default(string));
        /// <summary>
        /// List of dividend types.
        /// </summary>
        /// <remarks>
        /// List of dividend types.
        /// </remarks>
        /// <exception cref="FactSet.SDK.StocksAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="language"> (optional)</param>
        /// <returns>InlineResponse20011</returns>
        InlineResponse20011 GetStockDividendTypeList(List<string> attributes = default(List<string>), string language = default(string));

        /// <summary>
        /// List of dividend types.
        /// </summary>
        /// <remarks>
        /// List of dividend types.
        /// </remarks>
        /// <exception cref="FactSet.SDK.StocksAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="language"> (optional)</param>
        /// <returns>ApiResponse of InlineResponse20011</returns>
        ApiResponse<InlineResponse20011> GetStockDividendTypeListWithHttpInfo(List<string> attributes = default(List<string>), string language = default(string));
        /// <summary>
        /// End-of-day (EOD) benchmark key figures of a stock for the time range of one month.
        /// </summary>
        /// <remarks>
        /// End-of-day (EOD) benchmark key figures of a stock for the time range of one month.
        /// </remarks>
        /// <exception cref="FactSet.SDK.StocksAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifier"></param>
        /// <param name="identifierType"></param>
        /// <param name="idNotationBenchmark"></param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="language"> (optional)</param>
        /// <returns>InlineResponse20012</returns>
        InlineResponse20012 GetStockNotationKeyFiguresBenchmarkMonth1Get(string identifier, string identifierType, List<string> idNotationBenchmark, List<string> attributes = default(List<string>), string language = default(string));

        /// <summary>
        /// End-of-day (EOD) benchmark key figures of a stock for the time range of one month.
        /// </summary>
        /// <remarks>
        /// End-of-day (EOD) benchmark key figures of a stock for the time range of one month.
        /// </remarks>
        /// <exception cref="FactSet.SDK.StocksAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifier"></param>
        /// <param name="identifierType"></param>
        /// <param name="idNotationBenchmark"></param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="language"> (optional)</param>
        /// <returns>ApiResponse of InlineResponse20012</returns>
        ApiResponse<InlineResponse20012> GetStockNotationKeyFiguresBenchmarkMonth1GetWithHttpInfo(string identifier, string identifierType, List<string> idNotationBenchmark, List<string> attributes = default(List<string>), string language = default(string));
        /// <summary>
        /// End-of-day (EOD) benchmark key figures of a stock for the time range of three months.
        /// </summary>
        /// <remarks>
        /// End-of-day (EOD) benchmark key figures of a stock for the time range of three months.
        /// </remarks>
        /// <exception cref="FactSet.SDK.StocksAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifier"></param>
        /// <param name="identifierType"></param>
        /// <param name="idNotationBenchmark"></param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="language"> (optional)</param>
        /// <returns>InlineResponse20012</returns>
        InlineResponse20012 GetStockNotationKeyFiguresBenchmarkMonth3Get(string identifier, string identifierType, List<string> idNotationBenchmark, List<string> attributes = default(List<string>), string language = default(string));

        /// <summary>
        /// End-of-day (EOD) benchmark key figures of a stock for the time range of three months.
        /// </summary>
        /// <remarks>
        /// End-of-day (EOD) benchmark key figures of a stock for the time range of three months.
        /// </remarks>
        /// <exception cref="FactSet.SDK.StocksAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifier"></param>
        /// <param name="identifierType"></param>
        /// <param name="idNotationBenchmark"></param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="language"> (optional)</param>
        /// <returns>ApiResponse of InlineResponse20012</returns>
        ApiResponse<InlineResponse20012> GetStockNotationKeyFiguresBenchmarkMonth3GetWithHttpInfo(string identifier, string identifierType, List<string> idNotationBenchmark, List<string> attributes = default(List<string>), string language = default(string));
        /// <summary>
        /// End-of-day (EOD) benchmark key figures of a stock for the time range of six months.
        /// </summary>
        /// <remarks>
        /// End-of-day (EOD) benchmark key figures of a stock for the time range of six months.
        /// </remarks>
        /// <exception cref="FactSet.SDK.StocksAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifier"></param>
        /// <param name="identifierType"></param>
        /// <param name="idNotationBenchmark"></param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="language"> (optional)</param>
        /// <returns>InlineResponse20012</returns>
        InlineResponse20012 GetStockNotationKeyFiguresBenchmarkMonth6Get(string identifier, string identifierType, List<string> idNotationBenchmark, List<string> attributes = default(List<string>), string language = default(string));

        /// <summary>
        /// End-of-day (EOD) benchmark key figures of a stock for the time range of six months.
        /// </summary>
        /// <remarks>
        /// End-of-day (EOD) benchmark key figures of a stock for the time range of six months.
        /// </remarks>
        /// <exception cref="FactSet.SDK.StocksAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifier"></param>
        /// <param name="identifierType"></param>
        /// <param name="idNotationBenchmark"></param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="language"> (optional)</param>
        /// <returns>ApiResponse of InlineResponse20012</returns>
        ApiResponse<InlineResponse20012> GetStockNotationKeyFiguresBenchmarkMonth6GetWithHttpInfo(string identifier, string identifierType, List<string> idNotationBenchmark, List<string> attributes = default(List<string>), string language = default(string));
        /// <summary>
        /// End-of-day (EOD) benchmark key figures of a stock for the time range of one week.
        /// </summary>
        /// <remarks>
        /// End-of-day (EOD) benchmark key figures of a stock for the time range of one week.
        /// </remarks>
        /// <exception cref="FactSet.SDK.StocksAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifier"></param>
        /// <param name="identifierType"></param>
        /// <param name="idNotationBenchmark"></param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="language"> (optional)</param>
        /// <returns>InlineResponse20012</returns>
        InlineResponse20012 GetStockNotationKeyFiguresBenchmarkWeek1Get(string identifier, string identifierType, List<string> idNotationBenchmark, List<string> attributes = default(List<string>), string language = default(string));

        /// <summary>
        /// End-of-day (EOD) benchmark key figures of a stock for the time range of one week.
        /// </summary>
        /// <remarks>
        /// End-of-day (EOD) benchmark key figures of a stock for the time range of one week.
        /// </remarks>
        /// <exception cref="FactSet.SDK.StocksAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifier"></param>
        /// <param name="identifierType"></param>
        /// <param name="idNotationBenchmark"></param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="language"> (optional)</param>
        /// <returns>ApiResponse of InlineResponse20012</returns>
        ApiResponse<InlineResponse20012> GetStockNotationKeyFiguresBenchmarkWeek1GetWithHttpInfo(string identifier, string identifierType, List<string> idNotationBenchmark, List<string> attributes = default(List<string>), string language = default(string));
        /// <summary>
        /// End-of-day (EOD) benchmark key figures of a stock for the time range of one year.
        /// </summary>
        /// <remarks>
        /// End-of-day (EOD) benchmark key figures of a stock for the time range of one year.
        /// </remarks>
        /// <exception cref="FactSet.SDK.StocksAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifier"></param>
        /// <param name="identifierType"></param>
        /// <param name="idNotationBenchmark"></param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="language"> (optional)</param>
        /// <returns>InlineResponse20012</returns>
        InlineResponse20012 GetStockNotationKeyFiguresBenchmarkYear1Get(string identifier, string identifierType, List<string> idNotationBenchmark, List<string> attributes = default(List<string>), string language = default(string));

        /// <summary>
        /// End-of-day (EOD) benchmark key figures of a stock for the time range of one year.
        /// </summary>
        /// <remarks>
        /// End-of-day (EOD) benchmark key figures of a stock for the time range of one year.
        /// </remarks>
        /// <exception cref="FactSet.SDK.StocksAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifier"></param>
        /// <param name="identifierType"></param>
        /// <param name="idNotationBenchmark"></param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="language"> (optional)</param>
        /// <returns>ApiResponse of InlineResponse20012</returns>
        ApiResponse<InlineResponse20012> GetStockNotationKeyFiguresBenchmarkYear1GetWithHttpInfo(string identifier, string identifierType, List<string> idNotationBenchmark, List<string> attributes = default(List<string>), string language = default(string));
        /// <summary>
        /// End-of-day (EOD) benchmark key figures of a stock for the time range of three years.
        /// </summary>
        /// <remarks>
        /// End-of-day (EOD) benchmark key figures of a stock for the time range of three years.
        /// </remarks>
        /// <exception cref="FactSet.SDK.StocksAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifier"></param>
        /// <param name="identifierType"></param>
        /// <param name="idNotationBenchmark"></param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="language"> (optional)</param>
        /// <returns>InlineResponse20012</returns>
        InlineResponse20012 GetStockNotationKeyFiguresBenchmarkYear3Get(string identifier, string identifierType, List<string> idNotationBenchmark, List<string> attributes = default(List<string>), string language = default(string));

        /// <summary>
        /// End-of-day (EOD) benchmark key figures of a stock for the time range of three years.
        /// </summary>
        /// <remarks>
        /// End-of-day (EOD) benchmark key figures of a stock for the time range of three years.
        /// </remarks>
        /// <exception cref="FactSet.SDK.StocksAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifier"></param>
        /// <param name="identifierType"></param>
        /// <param name="idNotationBenchmark"></param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="language"> (optional)</param>
        /// <returns>ApiResponse of InlineResponse20012</returns>
        ApiResponse<InlineResponse20012> GetStockNotationKeyFiguresBenchmarkYear3GetWithHttpInfo(string identifier, string identifierType, List<string> idNotationBenchmark, List<string> attributes = default(List<string>), string language = default(string));
        /// <summary>
        /// End-of-day (EOD) benchmark key figures of a stock for the time range of five years.
        /// </summary>
        /// <remarks>
        /// End-of-day (EOD) benchmark key figures of a stock for the time range of five years.
        /// </remarks>
        /// <exception cref="FactSet.SDK.StocksAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifier"></param>
        /// <param name="identifierType"></param>
        /// <param name="idNotationBenchmark"></param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="language"> (optional)</param>
        /// <returns>InlineResponse20012</returns>
        InlineResponse20012 GetStockNotationKeyFiguresBenchmarkYear5Get(string identifier, string identifierType, List<string> idNotationBenchmark, List<string> attributes = default(List<string>), string language = default(string));

        /// <summary>
        /// End-of-day (EOD) benchmark key figures of a stock for the time range of five years.
        /// </summary>
        /// <remarks>
        /// End-of-day (EOD) benchmark key figures of a stock for the time range of five years.
        /// </remarks>
        /// <exception cref="FactSet.SDK.StocksAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifier"></param>
        /// <param name="identifierType"></param>
        /// <param name="idNotationBenchmark"></param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="language"> (optional)</param>
        /// <returns>ApiResponse of InlineResponse20012</returns>
        ApiResponse<InlineResponse20012> GetStockNotationKeyFiguresBenchmarkYear5GetWithHttpInfo(string identifier, string identifierType, List<string> idNotationBenchmark, List<string> attributes = default(List<string>), string language = default(string));
        /// <summary>
        /// List of owners for a specific type of a company&#39;s shares.
        /// </summary>
        /// <remarks>
        /// List of top-20 owners for a specific type of a company&#39;s shares.
        /// </remarks>
        /// <exception cref="FactSet.SDK.StocksAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifier"></param>
        /// <param name="identifierType"></param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="language"> (optional)</param>
        /// <returns>InlineResponse2008</returns>
        InlineResponse2008 GetStockOwnerList(string identifier, string identifierType, List<string> attributes = default(List<string>), string language = default(string));

        /// <summary>
        /// List of owners for a specific type of a company&#39;s shares.
        /// </summary>
        /// <remarks>
        /// List of top-20 owners for a specific type of a company&#39;s shares.
        /// </remarks>
        /// <exception cref="FactSet.SDK.StocksAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifier"></param>
        /// <param name="identifierType"></param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="language"> (optional)</param>
        /// <returns>ApiResponse of InlineResponse2008</returns>
        ApiResponse<InlineResponse2008> GetStockOwnerListWithHttpInfo(string identifier, string identifierType, List<string> attributes = default(List<string>), string language = default(string));
        /// <summary>
        /// Target price and aggregated recommendations for a stock.
        /// </summary>
        /// <remarks>
        /// Target price and aggregated recommendations for a stock.
        /// </remarks>
        /// <exception cref="FactSet.SDK.StocksAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifier"></param>
        /// <param name="identifierType"></param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <returns>InlineResponse2003</returns>
        InlineResponse2003 GetStockRecommendationAggregateGet(string identifier, string identifierType, List<string> attributes = default(List<string>));

        /// <summary>
        /// Target price and aggregated recommendations for a stock.
        /// </summary>
        /// <remarks>
        /// Target price and aggregated recommendations for a stock.
        /// </remarks>
        /// <exception cref="FactSet.SDK.StocksAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifier"></param>
        /// <param name="identifierType"></param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <returns>ApiResponse of InlineResponse2003</returns>
        ApiResponse<InlineResponse2003> GetStockRecommendationAggregateGetWithHttpInfo(string identifier, string identifierType, List<string> attributes = default(List<string>));
        /// <summary>
        /// Current and historical trade recommendations and target prices for a stock.
        /// </summary>
        /// <remarks>
        /// Current and historical trade recommendations and target prices for a stock.
        /// </remarks>
        /// <exception cref="FactSet.SDK.StocksAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifier"></param>
        /// <param name="identifierType"></param>
        /// <param name="snapshots"></param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <returns>InlineResponse2004</returns>
        InlineResponse2004 GetStockRecommendationAggregateHistoryList(string identifier, string identifierType, List<string> snapshots, List<string> attributes = default(List<string>));

        /// <summary>
        /// Current and historical trade recommendations and target prices for a stock.
        /// </summary>
        /// <remarks>
        /// Current and historical trade recommendations and target prices for a stock.
        /// </remarks>
        /// <exception cref="FactSet.SDK.StocksAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifier"></param>
        /// <param name="identifierType"></param>
        /// <param name="snapshots"></param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <returns>ApiResponse of InlineResponse2004</returns>
        ApiResponse<InlineResponse2004> GetStockRecommendationAggregateHistoryListWithHttpInfo(string identifier, string identifierType, List<string> snapshots, List<string> attributes = default(List<string>));
        /// <summary>
        /// List of dividends for a stock.
        /// </summary>
        /// <remarks>
        /// List of dividends for a stock.
        /// </remarks>
        /// <exception cref="FactSet.SDK.StocksAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postStockDividendListRequest"> (optional)</param>
        /// <returns>InlineResponse20010</returns>
        InlineResponse20010 PostStockDividendList(PostStockDividendListRequest postStockDividendListRequest = default(PostStockDividendListRequest));

        /// <summary>
        /// List of dividends for a stock.
        /// </summary>
        /// <remarks>
        /// List of dividends for a stock.
        /// </remarks>
        /// <exception cref="FactSet.SDK.StocksAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postStockDividendListRequest"> (optional)</param>
        /// <returns>ApiResponse of InlineResponse20010</returns>
        ApiResponse<InlineResponse20010> PostStockDividendListWithHttpInfo(PostStockDividendListRequest postStockDividendListRequest = default(PostStockDividendListRequest));
        /// <summary>
        /// Ranking of stocks&#39; notations using intraday figures.
        /// </summary>
        /// <remarks>
        /// Ranking of stocks&#39; notations using intraday figures. The result is limited to 100 notations that all must satisfy all selected filters. If more than one notation of an instrument matches the parameters, and no market priority has been specified, only the notation with the highest trading volume, averaged over one month, is considered.  By default, the result is sorted descending by the relative intraday performance corresponding to the most recent trade price, see attribute &#x60;trade.performance.relative&#x60;. The result may contain sortable values based on different currencies, possibly making the ranking nonsensical, if the parameter &#x60;currency&#x60; has not been specified.&#x60;  The search can be restricted to a specific set of products by using customer-specific instrument or notation restriction lists. Such restriction lists are set up by FactSet upon request.  All identifiers used as parameters must be valid and entitled.
        /// </remarks>
        /// <exception cref="FactSet.SDK.StocksAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postStockNotationRankingIntradayListRequest"> (optional)</param>
        /// <returns>InlineResponse20013</returns>
        InlineResponse20013 PostStockNotationRankingIntradayList(PostStockNotationRankingIntradayListRequest postStockNotationRankingIntradayListRequest = default(PostStockNotationRankingIntradayListRequest));

        /// <summary>
        /// Ranking of stocks&#39; notations using intraday figures.
        /// </summary>
        /// <remarks>
        /// Ranking of stocks&#39; notations using intraday figures. The result is limited to 100 notations that all must satisfy all selected filters. If more than one notation of an instrument matches the parameters, and no market priority has been specified, only the notation with the highest trading volume, averaged over one month, is considered.  By default, the result is sorted descending by the relative intraday performance corresponding to the most recent trade price, see attribute &#x60;trade.performance.relative&#x60;. The result may contain sortable values based on different currencies, possibly making the ranking nonsensical, if the parameter &#x60;currency&#x60; has not been specified.&#x60;  The search can be restricted to a specific set of products by using customer-specific instrument or notation restriction lists. Such restriction lists are set up by FactSet upon request.  All identifiers used as parameters must be valid and entitled.
        /// </remarks>
        /// <exception cref="FactSet.SDK.StocksAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postStockNotationRankingIntradayListRequest"> (optional)</param>
        /// <returns>ApiResponse of InlineResponse20013</returns>
        ApiResponse<InlineResponse20013> PostStockNotationRankingIntradayListWithHttpInfo(PostStockNotationRankingIntradayListRequest postStockNotationRankingIntradayListRequest = default(PostStockNotationRankingIntradayListRequest));
        /// <summary>
        /// Screener for stocks&#39; notations based on stock-specific parameters.
        /// </summary>
        /// <remarks>
        /// Screener for stocks&#39; notations based on stock-specific parameters. The result is limited to the notations that satisfy all the selected filters. If more than one notation of an instrument matches the parameters, and no market priority has been specified, only the notation with the highest trading volume, averaged over one month, is considered.  Currency dependent current figures on company level (see attribute &#x60;currentKeyFigures.company.currencyDependent&#x60;) or on share instrument level (see attribute &#x60;currentKeyFigures.shareInstrument.currencyDependent&#x60;) are only returned if the currency (see parameter &#x60;currentKeyFigures.company.currencyDependent.currency.isoCode&#x60; or parameter &#x60;currentKeyFigures.shareInstrument.currencyDependent.currency.isoCode&#x60; respectively) are set.  Parameters for up to three fiscal years might be used in one request, see attribute &#x60;reportedKeyFigures&#x60;; data is available for the ten most recent completed fiscal years. Estimates are available for the current and two consecutive fiscal years; parameters for all three might be used in one request, see attribute &#x60;estimates&#x60;. The estimated values are calculated as the average of the most recent estimates provided by all analysts in a fixed time frame of 100 days. Screening and sorting by a currency-dependent attribute is not possible if the currency (see parameter &#x60;reportedKeyFigures.currencyDependentKeyFigures.currency.isoCode&#x60; and parameter &#x60;estimates.currencyDependentEstimates.currency.isoCode&#x60; respectively) is not set. If a fiscal year for the data as of the end of a fiscal year (see parameter &#x60;reportedKeyFigures.fiscalYear&#x60;) or for the estimates (see parameter &#x60;estimates.fiscalYear&#x60;) has been selected but no currency has been set, the respective data will be returned in the currency in which it was originally reported.  A specific set of stocks can be restricted to or excluded by using customer-specific instrument or notation selection lists. Such selection lists are set up by FactSet upon request. All identifiers used as parameters must be valid and entitled.
        /// </remarks>
        /// <exception cref="FactSet.SDK.StocksAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postStockNotationScreenerSearchRequest"> (optional)</param>
        /// <returns>InlineResponse20014</returns>
        InlineResponse20014 PostStockNotationScreenerSearch(PostStockNotationScreenerSearchRequest postStockNotationScreenerSearchRequest = default(PostStockNotationScreenerSearchRequest));

        /// <summary>
        /// Screener for stocks&#39; notations based on stock-specific parameters.
        /// </summary>
        /// <remarks>
        /// Screener for stocks&#39; notations based on stock-specific parameters. The result is limited to the notations that satisfy all the selected filters. If more than one notation of an instrument matches the parameters, and no market priority has been specified, only the notation with the highest trading volume, averaged over one month, is considered.  Currency dependent current figures on company level (see attribute &#x60;currentKeyFigures.company.currencyDependent&#x60;) or on share instrument level (see attribute &#x60;currentKeyFigures.shareInstrument.currencyDependent&#x60;) are only returned if the currency (see parameter &#x60;currentKeyFigures.company.currencyDependent.currency.isoCode&#x60; or parameter &#x60;currentKeyFigures.shareInstrument.currencyDependent.currency.isoCode&#x60; respectively) are set.  Parameters for up to three fiscal years might be used in one request, see attribute &#x60;reportedKeyFigures&#x60;; data is available for the ten most recent completed fiscal years. Estimates are available for the current and two consecutive fiscal years; parameters for all three might be used in one request, see attribute &#x60;estimates&#x60;. The estimated values are calculated as the average of the most recent estimates provided by all analysts in a fixed time frame of 100 days. Screening and sorting by a currency-dependent attribute is not possible if the currency (see parameter &#x60;reportedKeyFigures.currencyDependentKeyFigures.currency.isoCode&#x60; and parameter &#x60;estimates.currencyDependentEstimates.currency.isoCode&#x60; respectively) is not set. If a fiscal year for the data as of the end of a fiscal year (see parameter &#x60;reportedKeyFigures.fiscalYear&#x60;) or for the estimates (see parameter &#x60;estimates.fiscalYear&#x60;) has been selected but no currency has been set, the respective data will be returned in the currency in which it was originally reported.  A specific set of stocks can be restricted to or excluded by using customer-specific instrument or notation selection lists. Such selection lists are set up by FactSet upon request. All identifiers used as parameters must be valid and entitled.
        /// </remarks>
        /// <exception cref="FactSet.SDK.StocksAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postStockNotationScreenerSearchRequest"> (optional)</param>
        /// <returns>ApiResponse of InlineResponse20014</returns>
        ApiResponse<InlineResponse20014> PostStockNotationScreenerSearchWithHttpInfo(PostStockNotationScreenerSearchRequest postStockNotationScreenerSearchRequest = default(PostStockNotationScreenerSearchRequest));
        /// <summary>
        /// Possible values and value ranges for the parameters used in the endpoint &#x60;/stock/notation/screener/search&#x60;.
        /// </summary>
        /// <remarks>
        /// The endpoint returns the possible values and value ranges for the parameters used in the endpoint &#x60;/stock/notation/screener/search&#x60;. It allows to request the values and value ranges only for a restricted set of notations that match predefined parameters. The functionality may be used to pre-fill the values and value ranges of the parameters of the &#x60;/stock/notation/screener/search&#x60; endpoint so that performing a search always leads to a non-empty set of notations. If more than one notation of an instrument matches the parameters, and no market priority has been specified, only the notation with the highest trading volume, averaged over one month, is considered. For more information regarding the performance and volatility parameters, see the information available in the group description of the &#x60;/notation/keyFigures/&#x60; endpoints.
        /// </remarks>
        /// <exception cref="FactSet.SDK.StocksAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postStockNotationScreenerValueRangesGetRequest"> (optional)</param>
        /// <returns>InlineResponse20015</returns>
        InlineResponse20015 PostStockNotationScreenerValueRangesGet(PostStockNotationScreenerValueRangesGetRequest postStockNotationScreenerValueRangesGetRequest = default(PostStockNotationScreenerValueRangesGetRequest));

        /// <summary>
        /// Possible values and value ranges for the parameters used in the endpoint &#x60;/stock/notation/screener/search&#x60;.
        /// </summary>
        /// <remarks>
        /// The endpoint returns the possible values and value ranges for the parameters used in the endpoint &#x60;/stock/notation/screener/search&#x60;. It allows to request the values and value ranges only for a restricted set of notations that match predefined parameters. The functionality may be used to pre-fill the values and value ranges of the parameters of the &#x60;/stock/notation/screener/search&#x60; endpoint so that performing a search always leads to a non-empty set of notations. If more than one notation of an instrument matches the parameters, and no market priority has been specified, only the notation with the highest trading volume, averaged over one month, is considered. For more information regarding the performance and volatility parameters, see the information available in the group description of the &#x60;/notation/keyFigures/&#x60; endpoints.
        /// </remarks>
        /// <exception cref="FactSet.SDK.StocksAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postStockNotationScreenerValueRangesGetRequest"> (optional)</param>
        /// <returns>ApiResponse of InlineResponse20015</returns>
        ApiResponse<InlineResponse20015> PostStockNotationScreenerValueRangesGetWithHttpInfo(PostStockNotationScreenerValueRangesGetRequest postStockNotationScreenerValueRangesGetRequest = default(PostStockNotationScreenerValueRangesGetRequest));
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IStockApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Provides key elements of a stock profile together with the profile of the issuing company.
        /// </summary>
        /// <remarks>
        /// Provides key elements of a stock profile together with the profile of the issuing company.
        /// </remarks>
        /// <exception cref="FactSet.SDK.StocksAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifier"></param>
        /// <param name="identifierType"></param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="language"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse2009</returns>
        System.Threading.Tasks.Task<InlineResponse2009> GetStockCompositeProfileGetByNotationAsync(string identifier, string identifierType, List<string> attributes = default(List<string>), string language = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Provides key elements of a stock profile together with the profile of the issuing company.
        /// </summary>
        /// <remarks>
        /// Provides key elements of a stock profile together with the profile of the issuing company.
        /// </remarks>
        /// <exception cref="FactSet.SDK.StocksAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifier"></param>
        /// <param name="identifierType"></param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="language"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse2009)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse2009>> GetStockCompositeProfileGetByNotationWithHttpInfoAsync(string identifier, string identifierType, List<string> attributes = default(List<string>), string language = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// List of dividend types.
        /// </summary>
        /// <remarks>
        /// List of dividend types.
        /// </remarks>
        /// <exception cref="FactSet.SDK.StocksAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="language"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse20011</returns>
        System.Threading.Tasks.Task<InlineResponse20011> GetStockDividendTypeListAsync(List<string> attributes = default(List<string>), string language = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// List of dividend types.
        /// </summary>
        /// <remarks>
        /// List of dividend types.
        /// </remarks>
        /// <exception cref="FactSet.SDK.StocksAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="language"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse20011)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20011>> GetStockDividendTypeListWithHttpInfoAsync(List<string> attributes = default(List<string>), string language = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// End-of-day (EOD) benchmark key figures of a stock for the time range of one month.
        /// </summary>
        /// <remarks>
        /// End-of-day (EOD) benchmark key figures of a stock for the time range of one month.
        /// </remarks>
        /// <exception cref="FactSet.SDK.StocksAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifier"></param>
        /// <param name="identifierType"></param>
        /// <param name="idNotationBenchmark"></param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="language"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse20012</returns>
        System.Threading.Tasks.Task<InlineResponse20012> GetStockNotationKeyFiguresBenchmarkMonth1GetAsync(string identifier, string identifierType, List<string> idNotationBenchmark, List<string> attributes = default(List<string>), string language = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// End-of-day (EOD) benchmark key figures of a stock for the time range of one month.
        /// </summary>
        /// <remarks>
        /// End-of-day (EOD) benchmark key figures of a stock for the time range of one month.
        /// </remarks>
        /// <exception cref="FactSet.SDK.StocksAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifier"></param>
        /// <param name="identifierType"></param>
        /// <param name="idNotationBenchmark"></param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="language"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse20012)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20012>> GetStockNotationKeyFiguresBenchmarkMonth1GetWithHttpInfoAsync(string identifier, string identifierType, List<string> idNotationBenchmark, List<string> attributes = default(List<string>), string language = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// End-of-day (EOD) benchmark key figures of a stock for the time range of three months.
        /// </summary>
        /// <remarks>
        /// End-of-day (EOD) benchmark key figures of a stock for the time range of three months.
        /// </remarks>
        /// <exception cref="FactSet.SDK.StocksAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifier"></param>
        /// <param name="identifierType"></param>
        /// <param name="idNotationBenchmark"></param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="language"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse20012</returns>
        System.Threading.Tasks.Task<InlineResponse20012> GetStockNotationKeyFiguresBenchmarkMonth3GetAsync(string identifier, string identifierType, List<string> idNotationBenchmark, List<string> attributes = default(List<string>), string language = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// End-of-day (EOD) benchmark key figures of a stock for the time range of three months.
        /// </summary>
        /// <remarks>
        /// End-of-day (EOD) benchmark key figures of a stock for the time range of three months.
        /// </remarks>
        /// <exception cref="FactSet.SDK.StocksAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifier"></param>
        /// <param name="identifierType"></param>
        /// <param name="idNotationBenchmark"></param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="language"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse20012)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20012>> GetStockNotationKeyFiguresBenchmarkMonth3GetWithHttpInfoAsync(string identifier, string identifierType, List<string> idNotationBenchmark, List<string> attributes = default(List<string>), string language = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// End-of-day (EOD) benchmark key figures of a stock for the time range of six months.
        /// </summary>
        /// <remarks>
        /// End-of-day (EOD) benchmark key figures of a stock for the time range of six months.
        /// </remarks>
        /// <exception cref="FactSet.SDK.StocksAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifier"></param>
        /// <param name="identifierType"></param>
        /// <param name="idNotationBenchmark"></param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="language"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse20012</returns>
        System.Threading.Tasks.Task<InlineResponse20012> GetStockNotationKeyFiguresBenchmarkMonth6GetAsync(string identifier, string identifierType, List<string> idNotationBenchmark, List<string> attributes = default(List<string>), string language = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// End-of-day (EOD) benchmark key figures of a stock for the time range of six months.
        /// </summary>
        /// <remarks>
        /// End-of-day (EOD) benchmark key figures of a stock for the time range of six months.
        /// </remarks>
        /// <exception cref="FactSet.SDK.StocksAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifier"></param>
        /// <param name="identifierType"></param>
        /// <param name="idNotationBenchmark"></param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="language"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse20012)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20012>> GetStockNotationKeyFiguresBenchmarkMonth6GetWithHttpInfoAsync(string identifier, string identifierType, List<string> idNotationBenchmark, List<string> attributes = default(List<string>), string language = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// End-of-day (EOD) benchmark key figures of a stock for the time range of one week.
        /// </summary>
        /// <remarks>
        /// End-of-day (EOD) benchmark key figures of a stock for the time range of one week.
        /// </remarks>
        /// <exception cref="FactSet.SDK.StocksAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifier"></param>
        /// <param name="identifierType"></param>
        /// <param name="idNotationBenchmark"></param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="language"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse20012</returns>
        System.Threading.Tasks.Task<InlineResponse20012> GetStockNotationKeyFiguresBenchmarkWeek1GetAsync(string identifier, string identifierType, List<string> idNotationBenchmark, List<string> attributes = default(List<string>), string language = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// End-of-day (EOD) benchmark key figures of a stock for the time range of one week.
        /// </summary>
        /// <remarks>
        /// End-of-day (EOD) benchmark key figures of a stock for the time range of one week.
        /// </remarks>
        /// <exception cref="FactSet.SDK.StocksAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifier"></param>
        /// <param name="identifierType"></param>
        /// <param name="idNotationBenchmark"></param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="language"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse20012)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20012>> GetStockNotationKeyFiguresBenchmarkWeek1GetWithHttpInfoAsync(string identifier, string identifierType, List<string> idNotationBenchmark, List<string> attributes = default(List<string>), string language = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// End-of-day (EOD) benchmark key figures of a stock for the time range of one year.
        /// </summary>
        /// <remarks>
        /// End-of-day (EOD) benchmark key figures of a stock for the time range of one year.
        /// </remarks>
        /// <exception cref="FactSet.SDK.StocksAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifier"></param>
        /// <param name="identifierType"></param>
        /// <param name="idNotationBenchmark"></param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="language"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse20012</returns>
        System.Threading.Tasks.Task<InlineResponse20012> GetStockNotationKeyFiguresBenchmarkYear1GetAsync(string identifier, string identifierType, List<string> idNotationBenchmark, List<string> attributes = default(List<string>), string language = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// End-of-day (EOD) benchmark key figures of a stock for the time range of one year.
        /// </summary>
        /// <remarks>
        /// End-of-day (EOD) benchmark key figures of a stock for the time range of one year.
        /// </remarks>
        /// <exception cref="FactSet.SDK.StocksAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifier"></param>
        /// <param name="identifierType"></param>
        /// <param name="idNotationBenchmark"></param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="language"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse20012)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20012>> GetStockNotationKeyFiguresBenchmarkYear1GetWithHttpInfoAsync(string identifier, string identifierType, List<string> idNotationBenchmark, List<string> attributes = default(List<string>), string language = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// End-of-day (EOD) benchmark key figures of a stock for the time range of three years.
        /// </summary>
        /// <remarks>
        /// End-of-day (EOD) benchmark key figures of a stock for the time range of three years.
        /// </remarks>
        /// <exception cref="FactSet.SDK.StocksAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifier"></param>
        /// <param name="identifierType"></param>
        /// <param name="idNotationBenchmark"></param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="language"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse20012</returns>
        System.Threading.Tasks.Task<InlineResponse20012> GetStockNotationKeyFiguresBenchmarkYear3GetAsync(string identifier, string identifierType, List<string> idNotationBenchmark, List<string> attributes = default(List<string>), string language = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// End-of-day (EOD) benchmark key figures of a stock for the time range of three years.
        /// </summary>
        /// <remarks>
        /// End-of-day (EOD) benchmark key figures of a stock for the time range of three years.
        /// </remarks>
        /// <exception cref="FactSet.SDK.StocksAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifier"></param>
        /// <param name="identifierType"></param>
        /// <param name="idNotationBenchmark"></param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="language"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse20012)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20012>> GetStockNotationKeyFiguresBenchmarkYear3GetWithHttpInfoAsync(string identifier, string identifierType, List<string> idNotationBenchmark, List<string> attributes = default(List<string>), string language = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// End-of-day (EOD) benchmark key figures of a stock for the time range of five years.
        /// </summary>
        /// <remarks>
        /// End-of-day (EOD) benchmark key figures of a stock for the time range of five years.
        /// </remarks>
        /// <exception cref="FactSet.SDK.StocksAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifier"></param>
        /// <param name="identifierType"></param>
        /// <param name="idNotationBenchmark"></param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="language"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse20012</returns>
        System.Threading.Tasks.Task<InlineResponse20012> GetStockNotationKeyFiguresBenchmarkYear5GetAsync(string identifier, string identifierType, List<string> idNotationBenchmark, List<string> attributes = default(List<string>), string language = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// End-of-day (EOD) benchmark key figures of a stock for the time range of five years.
        /// </summary>
        /// <remarks>
        /// End-of-day (EOD) benchmark key figures of a stock for the time range of five years.
        /// </remarks>
        /// <exception cref="FactSet.SDK.StocksAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifier"></param>
        /// <param name="identifierType"></param>
        /// <param name="idNotationBenchmark"></param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="language"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse20012)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20012>> GetStockNotationKeyFiguresBenchmarkYear5GetWithHttpInfoAsync(string identifier, string identifierType, List<string> idNotationBenchmark, List<string> attributes = default(List<string>), string language = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// List of owners for a specific type of a company&#39;s shares.
        /// </summary>
        /// <remarks>
        /// List of top-20 owners for a specific type of a company&#39;s shares.
        /// </remarks>
        /// <exception cref="FactSet.SDK.StocksAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifier"></param>
        /// <param name="identifierType"></param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="language"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse2008</returns>
        System.Threading.Tasks.Task<InlineResponse2008> GetStockOwnerListAsync(string identifier, string identifierType, List<string> attributes = default(List<string>), string language = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// List of owners for a specific type of a company&#39;s shares.
        /// </summary>
        /// <remarks>
        /// List of top-20 owners for a specific type of a company&#39;s shares.
        /// </remarks>
        /// <exception cref="FactSet.SDK.StocksAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifier"></param>
        /// <param name="identifierType"></param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="language"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse2008)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse2008>> GetStockOwnerListWithHttpInfoAsync(string identifier, string identifierType, List<string> attributes = default(List<string>), string language = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Target price and aggregated recommendations for a stock.
        /// </summary>
        /// <remarks>
        /// Target price and aggregated recommendations for a stock.
        /// </remarks>
        /// <exception cref="FactSet.SDK.StocksAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifier"></param>
        /// <param name="identifierType"></param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse2003</returns>
        System.Threading.Tasks.Task<InlineResponse2003> GetStockRecommendationAggregateGetAsync(string identifier, string identifierType, List<string> attributes = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Target price and aggregated recommendations for a stock.
        /// </summary>
        /// <remarks>
        /// Target price and aggregated recommendations for a stock.
        /// </remarks>
        /// <exception cref="FactSet.SDK.StocksAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifier"></param>
        /// <param name="identifierType"></param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse2003)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse2003>> GetStockRecommendationAggregateGetWithHttpInfoAsync(string identifier, string identifierType, List<string> attributes = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Current and historical trade recommendations and target prices for a stock.
        /// </summary>
        /// <remarks>
        /// Current and historical trade recommendations and target prices for a stock.
        /// </remarks>
        /// <exception cref="FactSet.SDK.StocksAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifier"></param>
        /// <param name="identifierType"></param>
        /// <param name="snapshots"></param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse2004</returns>
        System.Threading.Tasks.Task<InlineResponse2004> GetStockRecommendationAggregateHistoryListAsync(string identifier, string identifierType, List<string> snapshots, List<string> attributes = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Current and historical trade recommendations and target prices for a stock.
        /// </summary>
        /// <remarks>
        /// Current and historical trade recommendations and target prices for a stock.
        /// </remarks>
        /// <exception cref="FactSet.SDK.StocksAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifier"></param>
        /// <param name="identifierType"></param>
        /// <param name="snapshots"></param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse2004)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse2004>> GetStockRecommendationAggregateHistoryListWithHttpInfoAsync(string identifier, string identifierType, List<string> snapshots, List<string> attributes = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// List of dividends for a stock.
        /// </summary>
        /// <remarks>
        /// List of dividends for a stock.
        /// </remarks>
        /// <exception cref="FactSet.SDK.StocksAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postStockDividendListRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse20010</returns>
        System.Threading.Tasks.Task<InlineResponse20010> PostStockDividendListAsync(PostStockDividendListRequest postStockDividendListRequest = default(PostStockDividendListRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// List of dividends for a stock.
        /// </summary>
        /// <remarks>
        /// List of dividends for a stock.
        /// </remarks>
        /// <exception cref="FactSet.SDK.StocksAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postStockDividendListRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse20010)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20010>> PostStockDividendListWithHttpInfoAsync(PostStockDividendListRequest postStockDividendListRequest = default(PostStockDividendListRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Ranking of stocks&#39; notations using intraday figures.
        /// </summary>
        /// <remarks>
        /// Ranking of stocks&#39; notations using intraday figures. The result is limited to 100 notations that all must satisfy all selected filters. If more than one notation of an instrument matches the parameters, and no market priority has been specified, only the notation with the highest trading volume, averaged over one month, is considered.  By default, the result is sorted descending by the relative intraday performance corresponding to the most recent trade price, see attribute &#x60;trade.performance.relative&#x60;. The result may contain sortable values based on different currencies, possibly making the ranking nonsensical, if the parameter &#x60;currency&#x60; has not been specified.&#x60;  The search can be restricted to a specific set of products by using customer-specific instrument or notation restriction lists. Such restriction lists are set up by FactSet upon request.  All identifiers used as parameters must be valid and entitled.
        /// </remarks>
        /// <exception cref="FactSet.SDK.StocksAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postStockNotationRankingIntradayListRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse20013</returns>
        System.Threading.Tasks.Task<InlineResponse20013> PostStockNotationRankingIntradayListAsync(PostStockNotationRankingIntradayListRequest postStockNotationRankingIntradayListRequest = default(PostStockNotationRankingIntradayListRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Ranking of stocks&#39; notations using intraday figures.
        /// </summary>
        /// <remarks>
        /// Ranking of stocks&#39; notations using intraday figures. The result is limited to 100 notations that all must satisfy all selected filters. If more than one notation of an instrument matches the parameters, and no market priority has been specified, only the notation with the highest trading volume, averaged over one month, is considered.  By default, the result is sorted descending by the relative intraday performance corresponding to the most recent trade price, see attribute &#x60;trade.performance.relative&#x60;. The result may contain sortable values based on different currencies, possibly making the ranking nonsensical, if the parameter &#x60;currency&#x60; has not been specified.&#x60;  The search can be restricted to a specific set of products by using customer-specific instrument or notation restriction lists. Such restriction lists are set up by FactSet upon request.  All identifiers used as parameters must be valid and entitled.
        /// </remarks>
        /// <exception cref="FactSet.SDK.StocksAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postStockNotationRankingIntradayListRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse20013)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20013>> PostStockNotationRankingIntradayListWithHttpInfoAsync(PostStockNotationRankingIntradayListRequest postStockNotationRankingIntradayListRequest = default(PostStockNotationRankingIntradayListRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Screener for stocks&#39; notations based on stock-specific parameters.
        /// </summary>
        /// <remarks>
        /// Screener for stocks&#39; notations based on stock-specific parameters. The result is limited to the notations that satisfy all the selected filters. If more than one notation of an instrument matches the parameters, and no market priority has been specified, only the notation with the highest trading volume, averaged over one month, is considered.  Currency dependent current figures on company level (see attribute &#x60;currentKeyFigures.company.currencyDependent&#x60;) or on share instrument level (see attribute &#x60;currentKeyFigures.shareInstrument.currencyDependent&#x60;) are only returned if the currency (see parameter &#x60;currentKeyFigures.company.currencyDependent.currency.isoCode&#x60; or parameter &#x60;currentKeyFigures.shareInstrument.currencyDependent.currency.isoCode&#x60; respectively) are set.  Parameters for up to three fiscal years might be used in one request, see attribute &#x60;reportedKeyFigures&#x60;; data is available for the ten most recent completed fiscal years. Estimates are available for the current and two consecutive fiscal years; parameters for all three might be used in one request, see attribute &#x60;estimates&#x60;. The estimated values are calculated as the average of the most recent estimates provided by all analysts in a fixed time frame of 100 days. Screening and sorting by a currency-dependent attribute is not possible if the currency (see parameter &#x60;reportedKeyFigures.currencyDependentKeyFigures.currency.isoCode&#x60; and parameter &#x60;estimates.currencyDependentEstimates.currency.isoCode&#x60; respectively) is not set. If a fiscal year for the data as of the end of a fiscal year (see parameter &#x60;reportedKeyFigures.fiscalYear&#x60;) or for the estimates (see parameter &#x60;estimates.fiscalYear&#x60;) has been selected but no currency has been set, the respective data will be returned in the currency in which it was originally reported.  A specific set of stocks can be restricted to or excluded by using customer-specific instrument or notation selection lists. Such selection lists are set up by FactSet upon request. All identifiers used as parameters must be valid and entitled.
        /// </remarks>
        /// <exception cref="FactSet.SDK.StocksAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postStockNotationScreenerSearchRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse20014</returns>
        System.Threading.Tasks.Task<InlineResponse20014> PostStockNotationScreenerSearchAsync(PostStockNotationScreenerSearchRequest postStockNotationScreenerSearchRequest = default(PostStockNotationScreenerSearchRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Screener for stocks&#39; notations based on stock-specific parameters.
        /// </summary>
        /// <remarks>
        /// Screener for stocks&#39; notations based on stock-specific parameters. The result is limited to the notations that satisfy all the selected filters. If more than one notation of an instrument matches the parameters, and no market priority has been specified, only the notation with the highest trading volume, averaged over one month, is considered.  Currency dependent current figures on company level (see attribute &#x60;currentKeyFigures.company.currencyDependent&#x60;) or on share instrument level (see attribute &#x60;currentKeyFigures.shareInstrument.currencyDependent&#x60;) are only returned if the currency (see parameter &#x60;currentKeyFigures.company.currencyDependent.currency.isoCode&#x60; or parameter &#x60;currentKeyFigures.shareInstrument.currencyDependent.currency.isoCode&#x60; respectively) are set.  Parameters for up to three fiscal years might be used in one request, see attribute &#x60;reportedKeyFigures&#x60;; data is available for the ten most recent completed fiscal years. Estimates are available for the current and two consecutive fiscal years; parameters for all three might be used in one request, see attribute &#x60;estimates&#x60;. The estimated values are calculated as the average of the most recent estimates provided by all analysts in a fixed time frame of 100 days. Screening and sorting by a currency-dependent attribute is not possible if the currency (see parameter &#x60;reportedKeyFigures.currencyDependentKeyFigures.currency.isoCode&#x60; and parameter &#x60;estimates.currencyDependentEstimates.currency.isoCode&#x60; respectively) is not set. If a fiscal year for the data as of the end of a fiscal year (see parameter &#x60;reportedKeyFigures.fiscalYear&#x60;) or for the estimates (see parameter &#x60;estimates.fiscalYear&#x60;) has been selected but no currency has been set, the respective data will be returned in the currency in which it was originally reported.  A specific set of stocks can be restricted to or excluded by using customer-specific instrument or notation selection lists. Such selection lists are set up by FactSet upon request. All identifiers used as parameters must be valid and entitled.
        /// </remarks>
        /// <exception cref="FactSet.SDK.StocksAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postStockNotationScreenerSearchRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse20014)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20014>> PostStockNotationScreenerSearchWithHttpInfoAsync(PostStockNotationScreenerSearchRequest postStockNotationScreenerSearchRequest = default(PostStockNotationScreenerSearchRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Possible values and value ranges for the parameters used in the endpoint &#x60;/stock/notation/screener/search&#x60;.
        /// </summary>
        /// <remarks>
        /// The endpoint returns the possible values and value ranges for the parameters used in the endpoint &#x60;/stock/notation/screener/search&#x60;. It allows to request the values and value ranges only for a restricted set of notations that match predefined parameters. The functionality may be used to pre-fill the values and value ranges of the parameters of the &#x60;/stock/notation/screener/search&#x60; endpoint so that performing a search always leads to a non-empty set of notations. If more than one notation of an instrument matches the parameters, and no market priority has been specified, only the notation with the highest trading volume, averaged over one month, is considered. For more information regarding the performance and volatility parameters, see the information available in the group description of the &#x60;/notation/keyFigures/&#x60; endpoints.
        /// </remarks>
        /// <exception cref="FactSet.SDK.StocksAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postStockNotationScreenerValueRangesGetRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse20015</returns>
        System.Threading.Tasks.Task<InlineResponse20015> PostStockNotationScreenerValueRangesGetAsync(PostStockNotationScreenerValueRangesGetRequest postStockNotationScreenerValueRangesGetRequest = default(PostStockNotationScreenerValueRangesGetRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Possible values and value ranges for the parameters used in the endpoint &#x60;/stock/notation/screener/search&#x60;.
        /// </summary>
        /// <remarks>
        /// The endpoint returns the possible values and value ranges for the parameters used in the endpoint &#x60;/stock/notation/screener/search&#x60;. It allows to request the values and value ranges only for a restricted set of notations that match predefined parameters. The functionality may be used to pre-fill the values and value ranges of the parameters of the &#x60;/stock/notation/screener/search&#x60; endpoint so that performing a search always leads to a non-empty set of notations. If more than one notation of an instrument matches the parameters, and no market priority has been specified, only the notation with the highest trading volume, averaged over one month, is considered. For more information regarding the performance and volatility parameters, see the information available in the group description of the &#x60;/notation/keyFigures/&#x60; endpoints.
        /// </remarks>
        /// <exception cref="FactSet.SDK.StocksAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postStockNotationScreenerValueRangesGetRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse20015)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20015>> PostStockNotationScreenerValueRangesGetWithHttpInfoAsync(PostStockNotationScreenerValueRangesGetRequest postStockNotationScreenerValueRangesGetRequest = default(PostStockNotationScreenerValueRangesGetRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IStockApi : IStockApiSync, IStockApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class StockApi : IStockApi
    {
        private FactSet.SDK.StocksAPIforDigitalPortals.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        # region Response Type Disctionaries
                private static readonly Dictionary<HttpStatusCode, System.Type> GetStockCompositeProfileGetByNotationResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)200, typeof(InlineResponse2009) },
        };
        private static readonly Dictionary<HttpStatusCode, System.Type> GetStockDividendTypeListResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)200, typeof(InlineResponse20011) },
        };
        private static readonly Dictionary<HttpStatusCode, System.Type> GetStockNotationKeyFiguresBenchmarkMonth1GetResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)200, typeof(InlineResponse20012) },
        };
        private static readonly Dictionary<HttpStatusCode, System.Type> GetStockNotationKeyFiguresBenchmarkMonth3GetResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)200, typeof(InlineResponse20012) },
        };
        private static readonly Dictionary<HttpStatusCode, System.Type> GetStockNotationKeyFiguresBenchmarkMonth6GetResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)200, typeof(InlineResponse20012) },
        };
        private static readonly Dictionary<HttpStatusCode, System.Type> GetStockNotationKeyFiguresBenchmarkWeek1GetResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)200, typeof(InlineResponse20012) },
        };
        private static readonly Dictionary<HttpStatusCode, System.Type> GetStockNotationKeyFiguresBenchmarkYear1GetResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)200, typeof(InlineResponse20012) },
        };
        private static readonly Dictionary<HttpStatusCode, System.Type> GetStockNotationKeyFiguresBenchmarkYear3GetResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)200, typeof(InlineResponse20012) },
        };
        private static readonly Dictionary<HttpStatusCode, System.Type> GetStockNotationKeyFiguresBenchmarkYear5GetResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)200, typeof(InlineResponse20012) },
        };
        private static readonly Dictionary<HttpStatusCode, System.Type> GetStockOwnerListResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)200, typeof(InlineResponse2008) },
        };
        private static readonly Dictionary<HttpStatusCode, System.Type> GetStockRecommendationAggregateGetResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)200, typeof(InlineResponse2003) },
        };
        private static readonly Dictionary<HttpStatusCode, System.Type> GetStockRecommendationAggregateHistoryListResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)200, typeof(InlineResponse2004) },
        };
        private static readonly Dictionary<HttpStatusCode, System.Type> PostStockDividendListResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)200, typeof(InlineResponse20010) },
        };
        private static readonly Dictionary<HttpStatusCode, System.Type> PostStockNotationRankingIntradayListResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)200, typeof(InlineResponse20013) },
        };
        private static readonly Dictionary<HttpStatusCode, System.Type> PostStockNotationScreenerSearchResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)200, typeof(InlineResponse20014) },
        };
        private static readonly Dictionary<HttpStatusCode, System.Type> PostStockNotationScreenerValueRangesGetResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)200, typeof(InlineResponse20015) },
        };

        # endregion Response Type Disctionaries

        # region Api Response Objects
         

        # endregion Api Response Objects

        /// <summary>
        /// Initializes a new instance of the <see cref="StockApi"/> class.
        /// </summary>
        /// <returns></returns>
        public StockApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="StockApi"/> class.
        /// </summary>
        /// <returns></returns>
        public StockApi(string basePath)
        {
            this.Configuration = FactSet.SDK.StocksAPIforDigitalPortals.Client.Configuration.MergeConfigurations(
                FactSet.SDK.StocksAPIforDigitalPortals.Client.GlobalConfiguration.Instance,
                new FactSet.SDK.StocksAPIforDigitalPortals.Client.Configuration { BasePath = basePath }
            );
            this.Client = new FactSet.SDK.StocksAPIforDigitalPortals.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new FactSet.SDK.StocksAPIforDigitalPortals.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = FactSet.SDK.StocksAPIforDigitalPortals.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="StockApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public StockApi(FactSet.SDK.StocksAPIforDigitalPortals.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = FactSet.SDK.StocksAPIforDigitalPortals.Client.Configuration.MergeConfigurations(
                FactSet.SDK.StocksAPIforDigitalPortals.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new FactSet.SDK.StocksAPIforDigitalPortals.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new FactSet.SDK.StocksAPIforDigitalPortals.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = FactSet.SDK.StocksAPIforDigitalPortals.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="StockApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public StockApi(FactSet.SDK.StocksAPIforDigitalPortals.Client.ISynchronousClient client, FactSet.SDK.StocksAPIforDigitalPortals.Client.IAsynchronousClient asyncClient, FactSet.SDK.StocksAPIforDigitalPortals.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = FactSet.SDK.StocksAPIforDigitalPortals.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public FactSet.SDK.StocksAPIforDigitalPortals.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public FactSet.SDK.StocksAPIforDigitalPortals.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public FactSet.SDK.StocksAPIforDigitalPortals.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public FactSet.SDK.StocksAPIforDigitalPortals.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Provides key elements of a stock profile together with the profile of the issuing company. Provides key elements of a stock profile together with the profile of the issuing company.
        /// </summary>
        /// <exception cref="FactSet.SDK.StocksAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifier"></param>
        /// <param name="identifierType"></param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="language"> (optional)</param>
        /// <returns>InlineResponse2009</returns>
        public InlineResponse2009 GetStockCompositeProfileGetByNotation(string identifier, string identifierType, List<string> attributes = default(List<string>), string language = default(string))
        {
            var localVarResponse = GetStockCompositeProfileGetByNotationWithHttpInfo(identifier, identifierType, attributes, language);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Provides key elements of a stock profile together with the profile of the issuing company. Provides key elements of a stock profile together with the profile of the issuing company.
        /// </summary>
        /// <exception cref="FactSet.SDK.StocksAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifier"></param>
        /// <param name="identifierType"></param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="language"> (optional)</param>
        /// <returns>ApiResponse of InlineResponse2009</returns>
        public ApiResponse<InlineResponse2009> GetStockCompositeProfileGetByNotationWithHttpInfo(string identifier, string identifierType, List<string> attributes = default(List<string>), string language = default(string))
        {
            // verify the required parameter 'identifier' is set
            if (identifier == null)
            {
                throw new FactSet.SDK.StocksAPIforDigitalPortals.Client.ApiException(400, "Missing required parameter 'identifier' when calling StockApi->GetStockCompositeProfileGetByNotation");
            }

            // verify the required parameter 'identifierType' is set
            if (identifierType == null)
            {
                throw new FactSet.SDK.StocksAPIforDigitalPortals.Client.ApiException(400, "Missing required parameter 'identifierType' when calling StockApi->GetStockCompositeProfileGetByNotation");
            }

            FactSet.SDK.StocksAPIforDigitalPortals.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.StocksAPIforDigitalPortals.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.StocksAPIforDigitalPortals.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.StocksAPIforDigitalPortals.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.StocksAPIforDigitalPortals.Client.ClientUtils.ParameterToMultiMap("", "identifier", identifier));
            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.StocksAPIforDigitalPortals.Client.ClientUtils.ParameterToMultiMap("", "identifierType", identifierType));
            if (attributes != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.StocksAPIforDigitalPortals.Client.ClientUtils.ParameterToMultiMap("csv", "_attributes", attributes));
            }
            if (language != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.StocksAPIforDigitalPortals.Client.ClientUtils.ParameterToMultiMap("", "_language", language));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.StocksAPIforDigitalPortals.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = GetStockCompositeProfileGetByNotationResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Get<
            InlineResponse2009>("/stock/composite/profile/getByNotation", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetStockCompositeProfileGetByNotation", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// Provides key elements of a stock profile together with the profile of the issuing company. Provides key elements of a stock profile together with the profile of the issuing company.
        /// </summary>
        /// <exception cref="FactSet.SDK.StocksAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifier"></param>
        /// <param name="identifierType"></param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="language"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse2009</returns>
        public async System.Threading.Tasks.Task<InlineResponse2009>GetStockCompositeProfileGetByNotationAsync(string identifier, string identifierType, List<string> attributes = default(List<string>), string language = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await GetStockCompositeProfileGetByNotationWithHttpInfoAsync(identifier, identifierType, attributes, language, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Provides key elements of a stock profile together with the profile of the issuing company. Provides key elements of a stock profile together with the profile of the issuing company.
        /// </summary>
        /// <exception cref="FactSet.SDK.StocksAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifier"></param>
        /// <param name="identifierType"></param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="language"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse2009)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse2009>> GetStockCompositeProfileGetByNotationWithHttpInfoAsync(string identifier, string identifierType, List<string> attributes = default(List<string>), string language = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'identifier' is set
            if (identifier == null)
            {
                throw new FactSet.SDK.StocksAPIforDigitalPortals.Client.ApiException(400, "Missing required parameter 'identifier' when calling StockApi->GetStockCompositeProfileGetByNotation");
            }

            // verify the required parameter 'identifierType' is set
            if (identifierType == null)
            {
                throw new FactSet.SDK.StocksAPIforDigitalPortals.Client.ApiException(400, "Missing required parameter 'identifierType' when calling StockApi->GetStockCompositeProfileGetByNotation");
            }


            FactSet.SDK.StocksAPIforDigitalPortals.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.StocksAPIforDigitalPortals.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.StocksAPIforDigitalPortals.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.StocksAPIforDigitalPortals.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.StocksAPIforDigitalPortals.Client.ClientUtils.ParameterToMultiMap("", "identifier", identifier));
            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.StocksAPIforDigitalPortals.Client.ClientUtils.ParameterToMultiMap("", "identifierType", identifierType));
            if (attributes != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.StocksAPIforDigitalPortals.Client.ClientUtils.ParameterToMultiMap("csv", "_attributes", attributes));
            }
            if (language != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.StocksAPIforDigitalPortals.Client.ClientUtils.ParameterToMultiMap("", "_language", language));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.StocksAPIforDigitalPortals.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = GetStockCompositeProfileGetByNotationResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<InlineResponse2009>("/stock/composite/profile/getByNotation", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetStockCompositeProfileGetByNotation", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List of dividend types. List of dividend types.
        /// </summary>
        /// <exception cref="FactSet.SDK.StocksAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="language"> (optional)</param>
        /// <returns>InlineResponse20011</returns>
        public InlineResponse20011 GetStockDividendTypeList(List<string> attributes = default(List<string>), string language = default(string))
        {
            var localVarResponse = GetStockDividendTypeListWithHttpInfo(attributes, language);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List of dividend types. List of dividend types.
        /// </summary>
        /// <exception cref="FactSet.SDK.StocksAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="language"> (optional)</param>
        /// <returns>ApiResponse of InlineResponse20011</returns>
        public ApiResponse<InlineResponse20011> GetStockDividendTypeListWithHttpInfo(List<string> attributes = default(List<string>), string language = default(string))
        {
            FactSet.SDK.StocksAPIforDigitalPortals.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.StocksAPIforDigitalPortals.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.StocksAPIforDigitalPortals.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.StocksAPIforDigitalPortals.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (attributes != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.StocksAPIforDigitalPortals.Client.ClientUtils.ParameterToMultiMap("csv", "_attributes", attributes));
            }
            if (language != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.StocksAPIforDigitalPortals.Client.ClientUtils.ParameterToMultiMap("", "_language", language));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.StocksAPIforDigitalPortals.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = GetStockDividendTypeListResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Get<
            InlineResponse20011>("/stock/dividend/type/list", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetStockDividendTypeList", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// List of dividend types. List of dividend types.
        /// </summary>
        /// <exception cref="FactSet.SDK.StocksAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="language"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse20011</returns>
        public async System.Threading.Tasks.Task<InlineResponse20011>GetStockDividendTypeListAsync(List<string> attributes = default(List<string>), string language = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await GetStockDividendTypeListWithHttpInfoAsync(attributes, language, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List of dividend types. List of dividend types.
        /// </summary>
        /// <exception cref="FactSet.SDK.StocksAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="language"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse20011)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20011>> GetStockDividendTypeListWithHttpInfoAsync(List<string> attributes = default(List<string>), string language = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            FactSet.SDK.StocksAPIforDigitalPortals.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.StocksAPIforDigitalPortals.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.StocksAPIforDigitalPortals.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.StocksAPIforDigitalPortals.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (attributes != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.StocksAPIforDigitalPortals.Client.ClientUtils.ParameterToMultiMap("csv", "_attributes", attributes));
            }
            if (language != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.StocksAPIforDigitalPortals.Client.ClientUtils.ParameterToMultiMap("", "_language", language));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.StocksAPIforDigitalPortals.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = GetStockDividendTypeListResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<InlineResponse20011>("/stock/dividend/type/list", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetStockDividendTypeList", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// End-of-day (EOD) benchmark key figures of a stock for the time range of one month. End-of-day (EOD) benchmark key figures of a stock for the time range of one month.
        /// </summary>
        /// <exception cref="FactSet.SDK.StocksAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifier"></param>
        /// <param name="identifierType"></param>
        /// <param name="idNotationBenchmark"></param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="language"> (optional)</param>
        /// <returns>InlineResponse20012</returns>
        public InlineResponse20012 GetStockNotationKeyFiguresBenchmarkMonth1Get(string identifier, string identifierType, List<string> idNotationBenchmark, List<string> attributes = default(List<string>), string language = default(string))
        {
            var localVarResponse = GetStockNotationKeyFiguresBenchmarkMonth1GetWithHttpInfo(identifier, identifierType, idNotationBenchmark, attributes, language);
            return localVarResponse.Data;
        }

        /// <summary>
        /// End-of-day (EOD) benchmark key figures of a stock for the time range of one month. End-of-day (EOD) benchmark key figures of a stock for the time range of one month.
        /// </summary>
        /// <exception cref="FactSet.SDK.StocksAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifier"></param>
        /// <param name="identifierType"></param>
        /// <param name="idNotationBenchmark"></param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="language"> (optional)</param>
        /// <returns>ApiResponse of InlineResponse20012</returns>
        public ApiResponse<InlineResponse20012> GetStockNotationKeyFiguresBenchmarkMonth1GetWithHttpInfo(string identifier, string identifierType, List<string> idNotationBenchmark, List<string> attributes = default(List<string>), string language = default(string))
        {
            // verify the required parameter 'identifier' is set
            if (identifier == null)
            {
                throw new FactSet.SDK.StocksAPIforDigitalPortals.Client.ApiException(400, "Missing required parameter 'identifier' when calling StockApi->GetStockNotationKeyFiguresBenchmarkMonth1Get");
            }

            // verify the required parameter 'identifierType' is set
            if (identifierType == null)
            {
                throw new FactSet.SDK.StocksAPIforDigitalPortals.Client.ApiException(400, "Missing required parameter 'identifierType' when calling StockApi->GetStockNotationKeyFiguresBenchmarkMonth1Get");
            }

            // verify the required parameter 'idNotationBenchmark' is set
            if (idNotationBenchmark == null)
            {
                throw new FactSet.SDK.StocksAPIforDigitalPortals.Client.ApiException(400, "Missing required parameter 'idNotationBenchmark' when calling StockApi->GetStockNotationKeyFiguresBenchmarkMonth1Get");
            }

            FactSet.SDK.StocksAPIforDigitalPortals.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.StocksAPIforDigitalPortals.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.StocksAPIforDigitalPortals.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.StocksAPIforDigitalPortals.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.StocksAPIforDigitalPortals.Client.ClientUtils.ParameterToMultiMap("", "identifier", identifier));
            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.StocksAPIforDigitalPortals.Client.ClientUtils.ParameterToMultiMap("", "identifierType", identifierType));
            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.StocksAPIforDigitalPortals.Client.ClientUtils.ParameterToMultiMap("csv", "idNotationBenchmark", idNotationBenchmark));
            if (attributes != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.StocksAPIforDigitalPortals.Client.ClientUtils.ParameterToMultiMap("csv", "_attributes", attributes));
            }
            if (language != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.StocksAPIforDigitalPortals.Client.ClientUtils.ParameterToMultiMap("", "_language", language));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.StocksAPIforDigitalPortals.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = GetStockNotationKeyFiguresBenchmarkMonth1GetResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Get<
            InlineResponse20012>("/stock/notation/keyFigures/benchmark/month/1/get", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetStockNotationKeyFiguresBenchmarkMonth1Get", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// End-of-day (EOD) benchmark key figures of a stock for the time range of one month. End-of-day (EOD) benchmark key figures of a stock for the time range of one month.
        /// </summary>
        /// <exception cref="FactSet.SDK.StocksAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifier"></param>
        /// <param name="identifierType"></param>
        /// <param name="idNotationBenchmark"></param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="language"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse20012</returns>
        public async System.Threading.Tasks.Task<InlineResponse20012>GetStockNotationKeyFiguresBenchmarkMonth1GetAsync(string identifier, string identifierType, List<string> idNotationBenchmark, List<string> attributes = default(List<string>), string language = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await GetStockNotationKeyFiguresBenchmarkMonth1GetWithHttpInfoAsync(identifier, identifierType, idNotationBenchmark, attributes, language, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// End-of-day (EOD) benchmark key figures of a stock for the time range of one month. End-of-day (EOD) benchmark key figures of a stock for the time range of one month.
        /// </summary>
        /// <exception cref="FactSet.SDK.StocksAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifier"></param>
        /// <param name="identifierType"></param>
        /// <param name="idNotationBenchmark"></param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="language"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse20012)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20012>> GetStockNotationKeyFiguresBenchmarkMonth1GetWithHttpInfoAsync(string identifier, string identifierType, List<string> idNotationBenchmark, List<string> attributes = default(List<string>), string language = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'identifier' is set
            if (identifier == null)
            {
                throw new FactSet.SDK.StocksAPIforDigitalPortals.Client.ApiException(400, "Missing required parameter 'identifier' when calling StockApi->GetStockNotationKeyFiguresBenchmarkMonth1Get");
            }

            // verify the required parameter 'identifierType' is set
            if (identifierType == null)
            {
                throw new FactSet.SDK.StocksAPIforDigitalPortals.Client.ApiException(400, "Missing required parameter 'identifierType' when calling StockApi->GetStockNotationKeyFiguresBenchmarkMonth1Get");
            }

            // verify the required parameter 'idNotationBenchmark' is set
            if (idNotationBenchmark == null)
            {
                throw new FactSet.SDK.StocksAPIforDigitalPortals.Client.ApiException(400, "Missing required parameter 'idNotationBenchmark' when calling StockApi->GetStockNotationKeyFiguresBenchmarkMonth1Get");
            }


            FactSet.SDK.StocksAPIforDigitalPortals.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.StocksAPIforDigitalPortals.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.StocksAPIforDigitalPortals.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.StocksAPIforDigitalPortals.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.StocksAPIforDigitalPortals.Client.ClientUtils.ParameterToMultiMap("", "identifier", identifier));
            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.StocksAPIforDigitalPortals.Client.ClientUtils.ParameterToMultiMap("", "identifierType", identifierType));
            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.StocksAPIforDigitalPortals.Client.ClientUtils.ParameterToMultiMap("csv", "idNotationBenchmark", idNotationBenchmark));
            if (attributes != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.StocksAPIforDigitalPortals.Client.ClientUtils.ParameterToMultiMap("csv", "_attributes", attributes));
            }
            if (language != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.StocksAPIforDigitalPortals.Client.ClientUtils.ParameterToMultiMap("", "_language", language));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.StocksAPIforDigitalPortals.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = GetStockNotationKeyFiguresBenchmarkMonth1GetResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<InlineResponse20012>("/stock/notation/keyFigures/benchmark/month/1/get", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetStockNotationKeyFiguresBenchmarkMonth1Get", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// End-of-day (EOD) benchmark key figures of a stock for the time range of three months. End-of-day (EOD) benchmark key figures of a stock for the time range of three months.
        /// </summary>
        /// <exception cref="FactSet.SDK.StocksAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifier"></param>
        /// <param name="identifierType"></param>
        /// <param name="idNotationBenchmark"></param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="language"> (optional)</param>
        /// <returns>InlineResponse20012</returns>
        public InlineResponse20012 GetStockNotationKeyFiguresBenchmarkMonth3Get(string identifier, string identifierType, List<string> idNotationBenchmark, List<string> attributes = default(List<string>), string language = default(string))
        {
            var localVarResponse = GetStockNotationKeyFiguresBenchmarkMonth3GetWithHttpInfo(identifier, identifierType, idNotationBenchmark, attributes, language);
            return localVarResponse.Data;
        }

        /// <summary>
        /// End-of-day (EOD) benchmark key figures of a stock for the time range of three months. End-of-day (EOD) benchmark key figures of a stock for the time range of three months.
        /// </summary>
        /// <exception cref="FactSet.SDK.StocksAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifier"></param>
        /// <param name="identifierType"></param>
        /// <param name="idNotationBenchmark"></param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="language"> (optional)</param>
        /// <returns>ApiResponse of InlineResponse20012</returns>
        public ApiResponse<InlineResponse20012> GetStockNotationKeyFiguresBenchmarkMonth3GetWithHttpInfo(string identifier, string identifierType, List<string> idNotationBenchmark, List<string> attributes = default(List<string>), string language = default(string))
        {
            // verify the required parameter 'identifier' is set
            if (identifier == null)
            {
                throw new FactSet.SDK.StocksAPIforDigitalPortals.Client.ApiException(400, "Missing required parameter 'identifier' when calling StockApi->GetStockNotationKeyFiguresBenchmarkMonth3Get");
            }

            // verify the required parameter 'identifierType' is set
            if (identifierType == null)
            {
                throw new FactSet.SDK.StocksAPIforDigitalPortals.Client.ApiException(400, "Missing required parameter 'identifierType' when calling StockApi->GetStockNotationKeyFiguresBenchmarkMonth3Get");
            }

            // verify the required parameter 'idNotationBenchmark' is set
            if (idNotationBenchmark == null)
            {
                throw new FactSet.SDK.StocksAPIforDigitalPortals.Client.ApiException(400, "Missing required parameter 'idNotationBenchmark' when calling StockApi->GetStockNotationKeyFiguresBenchmarkMonth3Get");
            }

            FactSet.SDK.StocksAPIforDigitalPortals.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.StocksAPIforDigitalPortals.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.StocksAPIforDigitalPortals.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.StocksAPIforDigitalPortals.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.StocksAPIforDigitalPortals.Client.ClientUtils.ParameterToMultiMap("", "identifier", identifier));
            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.StocksAPIforDigitalPortals.Client.ClientUtils.ParameterToMultiMap("", "identifierType", identifierType));
            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.StocksAPIforDigitalPortals.Client.ClientUtils.ParameterToMultiMap("csv", "idNotationBenchmark", idNotationBenchmark));
            if (attributes != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.StocksAPIforDigitalPortals.Client.ClientUtils.ParameterToMultiMap("csv", "_attributes", attributes));
            }
            if (language != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.StocksAPIforDigitalPortals.Client.ClientUtils.ParameterToMultiMap("", "_language", language));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.StocksAPIforDigitalPortals.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = GetStockNotationKeyFiguresBenchmarkMonth3GetResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Get<
            InlineResponse20012>("/stock/notation/keyFigures/benchmark/month/3/get", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetStockNotationKeyFiguresBenchmarkMonth3Get", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// End-of-day (EOD) benchmark key figures of a stock for the time range of three months. End-of-day (EOD) benchmark key figures of a stock for the time range of three months.
        /// </summary>
        /// <exception cref="FactSet.SDK.StocksAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifier"></param>
        /// <param name="identifierType"></param>
        /// <param name="idNotationBenchmark"></param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="language"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse20012</returns>
        public async System.Threading.Tasks.Task<InlineResponse20012>GetStockNotationKeyFiguresBenchmarkMonth3GetAsync(string identifier, string identifierType, List<string> idNotationBenchmark, List<string> attributes = default(List<string>), string language = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await GetStockNotationKeyFiguresBenchmarkMonth3GetWithHttpInfoAsync(identifier, identifierType, idNotationBenchmark, attributes, language, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// End-of-day (EOD) benchmark key figures of a stock for the time range of three months. End-of-day (EOD) benchmark key figures of a stock for the time range of three months.
        /// </summary>
        /// <exception cref="FactSet.SDK.StocksAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifier"></param>
        /// <param name="identifierType"></param>
        /// <param name="idNotationBenchmark"></param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="language"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse20012)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20012>> GetStockNotationKeyFiguresBenchmarkMonth3GetWithHttpInfoAsync(string identifier, string identifierType, List<string> idNotationBenchmark, List<string> attributes = default(List<string>), string language = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'identifier' is set
            if (identifier == null)
            {
                throw new FactSet.SDK.StocksAPIforDigitalPortals.Client.ApiException(400, "Missing required parameter 'identifier' when calling StockApi->GetStockNotationKeyFiguresBenchmarkMonth3Get");
            }

            // verify the required parameter 'identifierType' is set
            if (identifierType == null)
            {
                throw new FactSet.SDK.StocksAPIforDigitalPortals.Client.ApiException(400, "Missing required parameter 'identifierType' when calling StockApi->GetStockNotationKeyFiguresBenchmarkMonth3Get");
            }

            // verify the required parameter 'idNotationBenchmark' is set
            if (idNotationBenchmark == null)
            {
                throw new FactSet.SDK.StocksAPIforDigitalPortals.Client.ApiException(400, "Missing required parameter 'idNotationBenchmark' when calling StockApi->GetStockNotationKeyFiguresBenchmarkMonth3Get");
            }


            FactSet.SDK.StocksAPIforDigitalPortals.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.StocksAPIforDigitalPortals.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.StocksAPIforDigitalPortals.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.StocksAPIforDigitalPortals.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.StocksAPIforDigitalPortals.Client.ClientUtils.ParameterToMultiMap("", "identifier", identifier));
            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.StocksAPIforDigitalPortals.Client.ClientUtils.ParameterToMultiMap("", "identifierType", identifierType));
            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.StocksAPIforDigitalPortals.Client.ClientUtils.ParameterToMultiMap("csv", "idNotationBenchmark", idNotationBenchmark));
            if (attributes != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.StocksAPIforDigitalPortals.Client.ClientUtils.ParameterToMultiMap("csv", "_attributes", attributes));
            }
            if (language != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.StocksAPIforDigitalPortals.Client.ClientUtils.ParameterToMultiMap("", "_language", language));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.StocksAPIforDigitalPortals.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = GetStockNotationKeyFiguresBenchmarkMonth3GetResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<InlineResponse20012>("/stock/notation/keyFigures/benchmark/month/3/get", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetStockNotationKeyFiguresBenchmarkMonth3Get", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// End-of-day (EOD) benchmark key figures of a stock for the time range of six months. End-of-day (EOD) benchmark key figures of a stock for the time range of six months.
        /// </summary>
        /// <exception cref="FactSet.SDK.StocksAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifier"></param>
        /// <param name="identifierType"></param>
        /// <param name="idNotationBenchmark"></param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="language"> (optional)</param>
        /// <returns>InlineResponse20012</returns>
        public InlineResponse20012 GetStockNotationKeyFiguresBenchmarkMonth6Get(string identifier, string identifierType, List<string> idNotationBenchmark, List<string> attributes = default(List<string>), string language = default(string))
        {
            var localVarResponse = GetStockNotationKeyFiguresBenchmarkMonth6GetWithHttpInfo(identifier, identifierType, idNotationBenchmark, attributes, language);
            return localVarResponse.Data;
        }

        /// <summary>
        /// End-of-day (EOD) benchmark key figures of a stock for the time range of six months. End-of-day (EOD) benchmark key figures of a stock for the time range of six months.
        /// </summary>
        /// <exception cref="FactSet.SDK.StocksAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifier"></param>
        /// <param name="identifierType"></param>
        /// <param name="idNotationBenchmark"></param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="language"> (optional)</param>
        /// <returns>ApiResponse of InlineResponse20012</returns>
        public ApiResponse<InlineResponse20012> GetStockNotationKeyFiguresBenchmarkMonth6GetWithHttpInfo(string identifier, string identifierType, List<string> idNotationBenchmark, List<string> attributes = default(List<string>), string language = default(string))
        {
            // verify the required parameter 'identifier' is set
            if (identifier == null)
            {
                throw new FactSet.SDK.StocksAPIforDigitalPortals.Client.ApiException(400, "Missing required parameter 'identifier' when calling StockApi->GetStockNotationKeyFiguresBenchmarkMonth6Get");
            }

            // verify the required parameter 'identifierType' is set
            if (identifierType == null)
            {
                throw new FactSet.SDK.StocksAPIforDigitalPortals.Client.ApiException(400, "Missing required parameter 'identifierType' when calling StockApi->GetStockNotationKeyFiguresBenchmarkMonth6Get");
            }

            // verify the required parameter 'idNotationBenchmark' is set
            if (idNotationBenchmark == null)
            {
                throw new FactSet.SDK.StocksAPIforDigitalPortals.Client.ApiException(400, "Missing required parameter 'idNotationBenchmark' when calling StockApi->GetStockNotationKeyFiguresBenchmarkMonth6Get");
            }

            FactSet.SDK.StocksAPIforDigitalPortals.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.StocksAPIforDigitalPortals.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.StocksAPIforDigitalPortals.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.StocksAPIforDigitalPortals.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.StocksAPIforDigitalPortals.Client.ClientUtils.ParameterToMultiMap("", "identifier", identifier));
            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.StocksAPIforDigitalPortals.Client.ClientUtils.ParameterToMultiMap("", "identifierType", identifierType));
            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.StocksAPIforDigitalPortals.Client.ClientUtils.ParameterToMultiMap("csv", "idNotationBenchmark", idNotationBenchmark));
            if (attributes != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.StocksAPIforDigitalPortals.Client.ClientUtils.ParameterToMultiMap("csv", "_attributes", attributes));
            }
            if (language != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.StocksAPIforDigitalPortals.Client.ClientUtils.ParameterToMultiMap("", "_language", language));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.StocksAPIforDigitalPortals.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = GetStockNotationKeyFiguresBenchmarkMonth6GetResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Get<
            InlineResponse20012>("/stock/notation/keyFigures/benchmark/month/6/get", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetStockNotationKeyFiguresBenchmarkMonth6Get", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// End-of-day (EOD) benchmark key figures of a stock for the time range of six months. End-of-day (EOD) benchmark key figures of a stock for the time range of six months.
        /// </summary>
        /// <exception cref="FactSet.SDK.StocksAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifier"></param>
        /// <param name="identifierType"></param>
        /// <param name="idNotationBenchmark"></param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="language"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse20012</returns>
        public async System.Threading.Tasks.Task<InlineResponse20012>GetStockNotationKeyFiguresBenchmarkMonth6GetAsync(string identifier, string identifierType, List<string> idNotationBenchmark, List<string> attributes = default(List<string>), string language = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await GetStockNotationKeyFiguresBenchmarkMonth6GetWithHttpInfoAsync(identifier, identifierType, idNotationBenchmark, attributes, language, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// End-of-day (EOD) benchmark key figures of a stock for the time range of six months. End-of-day (EOD) benchmark key figures of a stock for the time range of six months.
        /// </summary>
        /// <exception cref="FactSet.SDK.StocksAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifier"></param>
        /// <param name="identifierType"></param>
        /// <param name="idNotationBenchmark"></param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="language"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse20012)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20012>> GetStockNotationKeyFiguresBenchmarkMonth6GetWithHttpInfoAsync(string identifier, string identifierType, List<string> idNotationBenchmark, List<string> attributes = default(List<string>), string language = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'identifier' is set
            if (identifier == null)
            {
                throw new FactSet.SDK.StocksAPIforDigitalPortals.Client.ApiException(400, "Missing required parameter 'identifier' when calling StockApi->GetStockNotationKeyFiguresBenchmarkMonth6Get");
            }

            // verify the required parameter 'identifierType' is set
            if (identifierType == null)
            {
                throw new FactSet.SDK.StocksAPIforDigitalPortals.Client.ApiException(400, "Missing required parameter 'identifierType' when calling StockApi->GetStockNotationKeyFiguresBenchmarkMonth6Get");
            }

            // verify the required parameter 'idNotationBenchmark' is set
            if (idNotationBenchmark == null)
            {
                throw new FactSet.SDK.StocksAPIforDigitalPortals.Client.ApiException(400, "Missing required parameter 'idNotationBenchmark' when calling StockApi->GetStockNotationKeyFiguresBenchmarkMonth6Get");
            }


            FactSet.SDK.StocksAPIforDigitalPortals.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.StocksAPIforDigitalPortals.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.StocksAPIforDigitalPortals.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.StocksAPIforDigitalPortals.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.StocksAPIforDigitalPortals.Client.ClientUtils.ParameterToMultiMap("", "identifier", identifier));
            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.StocksAPIforDigitalPortals.Client.ClientUtils.ParameterToMultiMap("", "identifierType", identifierType));
            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.StocksAPIforDigitalPortals.Client.ClientUtils.ParameterToMultiMap("csv", "idNotationBenchmark", idNotationBenchmark));
            if (attributes != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.StocksAPIforDigitalPortals.Client.ClientUtils.ParameterToMultiMap("csv", "_attributes", attributes));
            }
            if (language != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.StocksAPIforDigitalPortals.Client.ClientUtils.ParameterToMultiMap("", "_language", language));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.StocksAPIforDigitalPortals.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = GetStockNotationKeyFiguresBenchmarkMonth6GetResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<InlineResponse20012>("/stock/notation/keyFigures/benchmark/month/6/get", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetStockNotationKeyFiguresBenchmarkMonth6Get", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// End-of-day (EOD) benchmark key figures of a stock for the time range of one week. End-of-day (EOD) benchmark key figures of a stock for the time range of one week.
        /// </summary>
        /// <exception cref="FactSet.SDK.StocksAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifier"></param>
        /// <param name="identifierType"></param>
        /// <param name="idNotationBenchmark"></param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="language"> (optional)</param>
        /// <returns>InlineResponse20012</returns>
        public InlineResponse20012 GetStockNotationKeyFiguresBenchmarkWeek1Get(string identifier, string identifierType, List<string> idNotationBenchmark, List<string> attributes = default(List<string>), string language = default(string))
        {
            var localVarResponse = GetStockNotationKeyFiguresBenchmarkWeek1GetWithHttpInfo(identifier, identifierType, idNotationBenchmark, attributes, language);
            return localVarResponse.Data;
        }

        /// <summary>
        /// End-of-day (EOD) benchmark key figures of a stock for the time range of one week. End-of-day (EOD) benchmark key figures of a stock for the time range of one week.
        /// </summary>
        /// <exception cref="FactSet.SDK.StocksAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifier"></param>
        /// <param name="identifierType"></param>
        /// <param name="idNotationBenchmark"></param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="language"> (optional)</param>
        /// <returns>ApiResponse of InlineResponse20012</returns>
        public ApiResponse<InlineResponse20012> GetStockNotationKeyFiguresBenchmarkWeek1GetWithHttpInfo(string identifier, string identifierType, List<string> idNotationBenchmark, List<string> attributes = default(List<string>), string language = default(string))
        {
            // verify the required parameter 'identifier' is set
            if (identifier == null)
            {
                throw new FactSet.SDK.StocksAPIforDigitalPortals.Client.ApiException(400, "Missing required parameter 'identifier' when calling StockApi->GetStockNotationKeyFiguresBenchmarkWeek1Get");
            }

            // verify the required parameter 'identifierType' is set
            if (identifierType == null)
            {
                throw new FactSet.SDK.StocksAPIforDigitalPortals.Client.ApiException(400, "Missing required parameter 'identifierType' when calling StockApi->GetStockNotationKeyFiguresBenchmarkWeek1Get");
            }

            // verify the required parameter 'idNotationBenchmark' is set
            if (idNotationBenchmark == null)
            {
                throw new FactSet.SDK.StocksAPIforDigitalPortals.Client.ApiException(400, "Missing required parameter 'idNotationBenchmark' when calling StockApi->GetStockNotationKeyFiguresBenchmarkWeek1Get");
            }

            FactSet.SDK.StocksAPIforDigitalPortals.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.StocksAPIforDigitalPortals.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.StocksAPIforDigitalPortals.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.StocksAPIforDigitalPortals.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.StocksAPIforDigitalPortals.Client.ClientUtils.ParameterToMultiMap("", "identifier", identifier));
            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.StocksAPIforDigitalPortals.Client.ClientUtils.ParameterToMultiMap("", "identifierType", identifierType));
            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.StocksAPIforDigitalPortals.Client.ClientUtils.ParameterToMultiMap("csv", "idNotationBenchmark", idNotationBenchmark));
            if (attributes != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.StocksAPIforDigitalPortals.Client.ClientUtils.ParameterToMultiMap("csv", "_attributes", attributes));
            }
            if (language != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.StocksAPIforDigitalPortals.Client.ClientUtils.ParameterToMultiMap("", "_language", language));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.StocksAPIforDigitalPortals.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = GetStockNotationKeyFiguresBenchmarkWeek1GetResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Get<
            InlineResponse20012>("/stock/notation/keyFigures/benchmark/week/1/get", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetStockNotationKeyFiguresBenchmarkWeek1Get", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// End-of-day (EOD) benchmark key figures of a stock for the time range of one week. End-of-day (EOD) benchmark key figures of a stock for the time range of one week.
        /// </summary>
        /// <exception cref="FactSet.SDK.StocksAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifier"></param>
        /// <param name="identifierType"></param>
        /// <param name="idNotationBenchmark"></param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="language"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse20012</returns>
        public async System.Threading.Tasks.Task<InlineResponse20012>GetStockNotationKeyFiguresBenchmarkWeek1GetAsync(string identifier, string identifierType, List<string> idNotationBenchmark, List<string> attributes = default(List<string>), string language = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await GetStockNotationKeyFiguresBenchmarkWeek1GetWithHttpInfoAsync(identifier, identifierType, idNotationBenchmark, attributes, language, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// End-of-day (EOD) benchmark key figures of a stock for the time range of one week. End-of-day (EOD) benchmark key figures of a stock for the time range of one week.
        /// </summary>
        /// <exception cref="FactSet.SDK.StocksAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifier"></param>
        /// <param name="identifierType"></param>
        /// <param name="idNotationBenchmark"></param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="language"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse20012)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20012>> GetStockNotationKeyFiguresBenchmarkWeek1GetWithHttpInfoAsync(string identifier, string identifierType, List<string> idNotationBenchmark, List<string> attributes = default(List<string>), string language = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'identifier' is set
            if (identifier == null)
            {
                throw new FactSet.SDK.StocksAPIforDigitalPortals.Client.ApiException(400, "Missing required parameter 'identifier' when calling StockApi->GetStockNotationKeyFiguresBenchmarkWeek1Get");
            }

            // verify the required parameter 'identifierType' is set
            if (identifierType == null)
            {
                throw new FactSet.SDK.StocksAPIforDigitalPortals.Client.ApiException(400, "Missing required parameter 'identifierType' when calling StockApi->GetStockNotationKeyFiguresBenchmarkWeek1Get");
            }

            // verify the required parameter 'idNotationBenchmark' is set
            if (idNotationBenchmark == null)
            {
                throw new FactSet.SDK.StocksAPIforDigitalPortals.Client.ApiException(400, "Missing required parameter 'idNotationBenchmark' when calling StockApi->GetStockNotationKeyFiguresBenchmarkWeek1Get");
            }


            FactSet.SDK.StocksAPIforDigitalPortals.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.StocksAPIforDigitalPortals.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.StocksAPIforDigitalPortals.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.StocksAPIforDigitalPortals.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.StocksAPIforDigitalPortals.Client.ClientUtils.ParameterToMultiMap("", "identifier", identifier));
            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.StocksAPIforDigitalPortals.Client.ClientUtils.ParameterToMultiMap("", "identifierType", identifierType));
            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.StocksAPIforDigitalPortals.Client.ClientUtils.ParameterToMultiMap("csv", "idNotationBenchmark", idNotationBenchmark));
            if (attributes != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.StocksAPIforDigitalPortals.Client.ClientUtils.ParameterToMultiMap("csv", "_attributes", attributes));
            }
            if (language != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.StocksAPIforDigitalPortals.Client.ClientUtils.ParameterToMultiMap("", "_language", language));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.StocksAPIforDigitalPortals.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = GetStockNotationKeyFiguresBenchmarkWeek1GetResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<InlineResponse20012>("/stock/notation/keyFigures/benchmark/week/1/get", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetStockNotationKeyFiguresBenchmarkWeek1Get", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// End-of-day (EOD) benchmark key figures of a stock for the time range of one year. End-of-day (EOD) benchmark key figures of a stock for the time range of one year.
        /// </summary>
        /// <exception cref="FactSet.SDK.StocksAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifier"></param>
        /// <param name="identifierType"></param>
        /// <param name="idNotationBenchmark"></param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="language"> (optional)</param>
        /// <returns>InlineResponse20012</returns>
        public InlineResponse20012 GetStockNotationKeyFiguresBenchmarkYear1Get(string identifier, string identifierType, List<string> idNotationBenchmark, List<string> attributes = default(List<string>), string language = default(string))
        {
            var localVarResponse = GetStockNotationKeyFiguresBenchmarkYear1GetWithHttpInfo(identifier, identifierType, idNotationBenchmark, attributes, language);
            return localVarResponse.Data;
        }

        /// <summary>
        /// End-of-day (EOD) benchmark key figures of a stock for the time range of one year. End-of-day (EOD) benchmark key figures of a stock for the time range of one year.
        /// </summary>
        /// <exception cref="FactSet.SDK.StocksAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifier"></param>
        /// <param name="identifierType"></param>
        /// <param name="idNotationBenchmark"></param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="language"> (optional)</param>
        /// <returns>ApiResponse of InlineResponse20012</returns>
        public ApiResponse<InlineResponse20012> GetStockNotationKeyFiguresBenchmarkYear1GetWithHttpInfo(string identifier, string identifierType, List<string> idNotationBenchmark, List<string> attributes = default(List<string>), string language = default(string))
        {
            // verify the required parameter 'identifier' is set
            if (identifier == null)
            {
                throw new FactSet.SDK.StocksAPIforDigitalPortals.Client.ApiException(400, "Missing required parameter 'identifier' when calling StockApi->GetStockNotationKeyFiguresBenchmarkYear1Get");
            }

            // verify the required parameter 'identifierType' is set
            if (identifierType == null)
            {
                throw new FactSet.SDK.StocksAPIforDigitalPortals.Client.ApiException(400, "Missing required parameter 'identifierType' when calling StockApi->GetStockNotationKeyFiguresBenchmarkYear1Get");
            }

            // verify the required parameter 'idNotationBenchmark' is set
            if (idNotationBenchmark == null)
            {
                throw new FactSet.SDK.StocksAPIforDigitalPortals.Client.ApiException(400, "Missing required parameter 'idNotationBenchmark' when calling StockApi->GetStockNotationKeyFiguresBenchmarkYear1Get");
            }

            FactSet.SDK.StocksAPIforDigitalPortals.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.StocksAPIforDigitalPortals.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.StocksAPIforDigitalPortals.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.StocksAPIforDigitalPortals.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.StocksAPIforDigitalPortals.Client.ClientUtils.ParameterToMultiMap("", "identifier", identifier));
            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.StocksAPIforDigitalPortals.Client.ClientUtils.ParameterToMultiMap("", "identifierType", identifierType));
            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.StocksAPIforDigitalPortals.Client.ClientUtils.ParameterToMultiMap("csv", "idNotationBenchmark", idNotationBenchmark));
            if (attributes != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.StocksAPIforDigitalPortals.Client.ClientUtils.ParameterToMultiMap("csv", "_attributes", attributes));
            }
            if (language != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.StocksAPIforDigitalPortals.Client.ClientUtils.ParameterToMultiMap("", "_language", language));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.StocksAPIforDigitalPortals.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = GetStockNotationKeyFiguresBenchmarkYear1GetResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Get<
            InlineResponse20012>("/stock/notation/keyFigures/benchmark/year/1/get", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetStockNotationKeyFiguresBenchmarkYear1Get", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// End-of-day (EOD) benchmark key figures of a stock for the time range of one year. End-of-day (EOD) benchmark key figures of a stock for the time range of one year.
        /// </summary>
        /// <exception cref="FactSet.SDK.StocksAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifier"></param>
        /// <param name="identifierType"></param>
        /// <param name="idNotationBenchmark"></param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="language"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse20012</returns>
        public async System.Threading.Tasks.Task<InlineResponse20012>GetStockNotationKeyFiguresBenchmarkYear1GetAsync(string identifier, string identifierType, List<string> idNotationBenchmark, List<string> attributes = default(List<string>), string language = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await GetStockNotationKeyFiguresBenchmarkYear1GetWithHttpInfoAsync(identifier, identifierType, idNotationBenchmark, attributes, language, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// End-of-day (EOD) benchmark key figures of a stock for the time range of one year. End-of-day (EOD) benchmark key figures of a stock for the time range of one year.
        /// </summary>
        /// <exception cref="FactSet.SDK.StocksAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifier"></param>
        /// <param name="identifierType"></param>
        /// <param name="idNotationBenchmark"></param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="language"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse20012)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20012>> GetStockNotationKeyFiguresBenchmarkYear1GetWithHttpInfoAsync(string identifier, string identifierType, List<string> idNotationBenchmark, List<string> attributes = default(List<string>), string language = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'identifier' is set
            if (identifier == null)
            {
                throw new FactSet.SDK.StocksAPIforDigitalPortals.Client.ApiException(400, "Missing required parameter 'identifier' when calling StockApi->GetStockNotationKeyFiguresBenchmarkYear1Get");
            }

            // verify the required parameter 'identifierType' is set
            if (identifierType == null)
            {
                throw new FactSet.SDK.StocksAPIforDigitalPortals.Client.ApiException(400, "Missing required parameter 'identifierType' when calling StockApi->GetStockNotationKeyFiguresBenchmarkYear1Get");
            }

            // verify the required parameter 'idNotationBenchmark' is set
            if (idNotationBenchmark == null)
            {
                throw new FactSet.SDK.StocksAPIforDigitalPortals.Client.ApiException(400, "Missing required parameter 'idNotationBenchmark' when calling StockApi->GetStockNotationKeyFiguresBenchmarkYear1Get");
            }


            FactSet.SDK.StocksAPIforDigitalPortals.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.StocksAPIforDigitalPortals.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.StocksAPIforDigitalPortals.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.StocksAPIforDigitalPortals.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.StocksAPIforDigitalPortals.Client.ClientUtils.ParameterToMultiMap("", "identifier", identifier));
            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.StocksAPIforDigitalPortals.Client.ClientUtils.ParameterToMultiMap("", "identifierType", identifierType));
            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.StocksAPIforDigitalPortals.Client.ClientUtils.ParameterToMultiMap("csv", "idNotationBenchmark", idNotationBenchmark));
            if (attributes != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.StocksAPIforDigitalPortals.Client.ClientUtils.ParameterToMultiMap("csv", "_attributes", attributes));
            }
            if (language != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.StocksAPIforDigitalPortals.Client.ClientUtils.ParameterToMultiMap("", "_language", language));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.StocksAPIforDigitalPortals.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = GetStockNotationKeyFiguresBenchmarkYear1GetResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<InlineResponse20012>("/stock/notation/keyFigures/benchmark/year/1/get", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetStockNotationKeyFiguresBenchmarkYear1Get", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// End-of-day (EOD) benchmark key figures of a stock for the time range of three years. End-of-day (EOD) benchmark key figures of a stock for the time range of three years.
        /// </summary>
        /// <exception cref="FactSet.SDK.StocksAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifier"></param>
        /// <param name="identifierType"></param>
        /// <param name="idNotationBenchmark"></param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="language"> (optional)</param>
        /// <returns>InlineResponse20012</returns>
        public InlineResponse20012 GetStockNotationKeyFiguresBenchmarkYear3Get(string identifier, string identifierType, List<string> idNotationBenchmark, List<string> attributes = default(List<string>), string language = default(string))
        {
            var localVarResponse = GetStockNotationKeyFiguresBenchmarkYear3GetWithHttpInfo(identifier, identifierType, idNotationBenchmark, attributes, language);
            return localVarResponse.Data;
        }

        /// <summary>
        /// End-of-day (EOD) benchmark key figures of a stock for the time range of three years. End-of-day (EOD) benchmark key figures of a stock for the time range of three years.
        /// </summary>
        /// <exception cref="FactSet.SDK.StocksAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifier"></param>
        /// <param name="identifierType"></param>
        /// <param name="idNotationBenchmark"></param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="language"> (optional)</param>
        /// <returns>ApiResponse of InlineResponse20012</returns>
        public ApiResponse<InlineResponse20012> GetStockNotationKeyFiguresBenchmarkYear3GetWithHttpInfo(string identifier, string identifierType, List<string> idNotationBenchmark, List<string> attributes = default(List<string>), string language = default(string))
        {
            // verify the required parameter 'identifier' is set
            if (identifier == null)
            {
                throw new FactSet.SDK.StocksAPIforDigitalPortals.Client.ApiException(400, "Missing required parameter 'identifier' when calling StockApi->GetStockNotationKeyFiguresBenchmarkYear3Get");
            }

            // verify the required parameter 'identifierType' is set
            if (identifierType == null)
            {
                throw new FactSet.SDK.StocksAPIforDigitalPortals.Client.ApiException(400, "Missing required parameter 'identifierType' when calling StockApi->GetStockNotationKeyFiguresBenchmarkYear3Get");
            }

            // verify the required parameter 'idNotationBenchmark' is set
            if (idNotationBenchmark == null)
            {
                throw new FactSet.SDK.StocksAPIforDigitalPortals.Client.ApiException(400, "Missing required parameter 'idNotationBenchmark' when calling StockApi->GetStockNotationKeyFiguresBenchmarkYear3Get");
            }

            FactSet.SDK.StocksAPIforDigitalPortals.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.StocksAPIforDigitalPortals.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.StocksAPIforDigitalPortals.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.StocksAPIforDigitalPortals.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.StocksAPIforDigitalPortals.Client.ClientUtils.ParameterToMultiMap("", "identifier", identifier));
            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.StocksAPIforDigitalPortals.Client.ClientUtils.ParameterToMultiMap("", "identifierType", identifierType));
            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.StocksAPIforDigitalPortals.Client.ClientUtils.ParameterToMultiMap("csv", "idNotationBenchmark", idNotationBenchmark));
            if (attributes != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.StocksAPIforDigitalPortals.Client.ClientUtils.ParameterToMultiMap("csv", "_attributes", attributes));
            }
            if (language != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.StocksAPIforDigitalPortals.Client.ClientUtils.ParameterToMultiMap("", "_language", language));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.StocksAPIforDigitalPortals.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = GetStockNotationKeyFiguresBenchmarkYear3GetResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Get<
            InlineResponse20012>("/stock/notation/keyFigures/benchmark/year/3/get", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetStockNotationKeyFiguresBenchmarkYear3Get", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// End-of-day (EOD) benchmark key figures of a stock for the time range of three years. End-of-day (EOD) benchmark key figures of a stock for the time range of three years.
        /// </summary>
        /// <exception cref="FactSet.SDK.StocksAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifier"></param>
        /// <param name="identifierType"></param>
        /// <param name="idNotationBenchmark"></param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="language"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse20012</returns>
        public async System.Threading.Tasks.Task<InlineResponse20012>GetStockNotationKeyFiguresBenchmarkYear3GetAsync(string identifier, string identifierType, List<string> idNotationBenchmark, List<string> attributes = default(List<string>), string language = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await GetStockNotationKeyFiguresBenchmarkYear3GetWithHttpInfoAsync(identifier, identifierType, idNotationBenchmark, attributes, language, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// End-of-day (EOD) benchmark key figures of a stock for the time range of three years. End-of-day (EOD) benchmark key figures of a stock for the time range of three years.
        /// </summary>
        /// <exception cref="FactSet.SDK.StocksAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifier"></param>
        /// <param name="identifierType"></param>
        /// <param name="idNotationBenchmark"></param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="language"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse20012)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20012>> GetStockNotationKeyFiguresBenchmarkYear3GetWithHttpInfoAsync(string identifier, string identifierType, List<string> idNotationBenchmark, List<string> attributes = default(List<string>), string language = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'identifier' is set
            if (identifier == null)
            {
                throw new FactSet.SDK.StocksAPIforDigitalPortals.Client.ApiException(400, "Missing required parameter 'identifier' when calling StockApi->GetStockNotationKeyFiguresBenchmarkYear3Get");
            }

            // verify the required parameter 'identifierType' is set
            if (identifierType == null)
            {
                throw new FactSet.SDK.StocksAPIforDigitalPortals.Client.ApiException(400, "Missing required parameter 'identifierType' when calling StockApi->GetStockNotationKeyFiguresBenchmarkYear3Get");
            }

            // verify the required parameter 'idNotationBenchmark' is set
            if (idNotationBenchmark == null)
            {
                throw new FactSet.SDK.StocksAPIforDigitalPortals.Client.ApiException(400, "Missing required parameter 'idNotationBenchmark' when calling StockApi->GetStockNotationKeyFiguresBenchmarkYear3Get");
            }


            FactSet.SDK.StocksAPIforDigitalPortals.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.StocksAPIforDigitalPortals.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.StocksAPIforDigitalPortals.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.StocksAPIforDigitalPortals.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.StocksAPIforDigitalPortals.Client.ClientUtils.ParameterToMultiMap("", "identifier", identifier));
            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.StocksAPIforDigitalPortals.Client.ClientUtils.ParameterToMultiMap("", "identifierType", identifierType));
            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.StocksAPIforDigitalPortals.Client.ClientUtils.ParameterToMultiMap("csv", "idNotationBenchmark", idNotationBenchmark));
            if (attributes != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.StocksAPIforDigitalPortals.Client.ClientUtils.ParameterToMultiMap("csv", "_attributes", attributes));
            }
            if (language != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.StocksAPIforDigitalPortals.Client.ClientUtils.ParameterToMultiMap("", "_language", language));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.StocksAPIforDigitalPortals.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = GetStockNotationKeyFiguresBenchmarkYear3GetResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<InlineResponse20012>("/stock/notation/keyFigures/benchmark/year/3/get", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetStockNotationKeyFiguresBenchmarkYear3Get", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// End-of-day (EOD) benchmark key figures of a stock for the time range of five years. End-of-day (EOD) benchmark key figures of a stock for the time range of five years.
        /// </summary>
        /// <exception cref="FactSet.SDK.StocksAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifier"></param>
        /// <param name="identifierType"></param>
        /// <param name="idNotationBenchmark"></param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="language"> (optional)</param>
        /// <returns>InlineResponse20012</returns>
        public InlineResponse20012 GetStockNotationKeyFiguresBenchmarkYear5Get(string identifier, string identifierType, List<string> idNotationBenchmark, List<string> attributes = default(List<string>), string language = default(string))
        {
            var localVarResponse = GetStockNotationKeyFiguresBenchmarkYear5GetWithHttpInfo(identifier, identifierType, idNotationBenchmark, attributes, language);
            return localVarResponse.Data;
        }

        /// <summary>
        /// End-of-day (EOD) benchmark key figures of a stock for the time range of five years. End-of-day (EOD) benchmark key figures of a stock for the time range of five years.
        /// </summary>
        /// <exception cref="FactSet.SDK.StocksAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifier"></param>
        /// <param name="identifierType"></param>
        /// <param name="idNotationBenchmark"></param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="language"> (optional)</param>
        /// <returns>ApiResponse of InlineResponse20012</returns>
        public ApiResponse<InlineResponse20012> GetStockNotationKeyFiguresBenchmarkYear5GetWithHttpInfo(string identifier, string identifierType, List<string> idNotationBenchmark, List<string> attributes = default(List<string>), string language = default(string))
        {
            // verify the required parameter 'identifier' is set
            if (identifier == null)
            {
                throw new FactSet.SDK.StocksAPIforDigitalPortals.Client.ApiException(400, "Missing required parameter 'identifier' when calling StockApi->GetStockNotationKeyFiguresBenchmarkYear5Get");
            }

            // verify the required parameter 'identifierType' is set
            if (identifierType == null)
            {
                throw new FactSet.SDK.StocksAPIforDigitalPortals.Client.ApiException(400, "Missing required parameter 'identifierType' when calling StockApi->GetStockNotationKeyFiguresBenchmarkYear5Get");
            }

            // verify the required parameter 'idNotationBenchmark' is set
            if (idNotationBenchmark == null)
            {
                throw new FactSet.SDK.StocksAPIforDigitalPortals.Client.ApiException(400, "Missing required parameter 'idNotationBenchmark' when calling StockApi->GetStockNotationKeyFiguresBenchmarkYear5Get");
            }

            FactSet.SDK.StocksAPIforDigitalPortals.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.StocksAPIforDigitalPortals.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.StocksAPIforDigitalPortals.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.StocksAPIforDigitalPortals.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.StocksAPIforDigitalPortals.Client.ClientUtils.ParameterToMultiMap("", "identifier", identifier));
            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.StocksAPIforDigitalPortals.Client.ClientUtils.ParameterToMultiMap("", "identifierType", identifierType));
            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.StocksAPIforDigitalPortals.Client.ClientUtils.ParameterToMultiMap("csv", "idNotationBenchmark", idNotationBenchmark));
            if (attributes != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.StocksAPIforDigitalPortals.Client.ClientUtils.ParameterToMultiMap("csv", "_attributes", attributes));
            }
            if (language != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.StocksAPIforDigitalPortals.Client.ClientUtils.ParameterToMultiMap("", "_language", language));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.StocksAPIforDigitalPortals.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = GetStockNotationKeyFiguresBenchmarkYear5GetResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Get<
            InlineResponse20012>("/stock/notation/keyFigures/benchmark/year/5/get", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetStockNotationKeyFiguresBenchmarkYear5Get", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// End-of-day (EOD) benchmark key figures of a stock for the time range of five years. End-of-day (EOD) benchmark key figures of a stock for the time range of five years.
        /// </summary>
        /// <exception cref="FactSet.SDK.StocksAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifier"></param>
        /// <param name="identifierType"></param>
        /// <param name="idNotationBenchmark"></param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="language"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse20012</returns>
        public async System.Threading.Tasks.Task<InlineResponse20012>GetStockNotationKeyFiguresBenchmarkYear5GetAsync(string identifier, string identifierType, List<string> idNotationBenchmark, List<string> attributes = default(List<string>), string language = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await GetStockNotationKeyFiguresBenchmarkYear5GetWithHttpInfoAsync(identifier, identifierType, idNotationBenchmark, attributes, language, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// End-of-day (EOD) benchmark key figures of a stock for the time range of five years. End-of-day (EOD) benchmark key figures of a stock for the time range of five years.
        /// </summary>
        /// <exception cref="FactSet.SDK.StocksAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifier"></param>
        /// <param name="identifierType"></param>
        /// <param name="idNotationBenchmark"></param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="language"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse20012)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20012>> GetStockNotationKeyFiguresBenchmarkYear5GetWithHttpInfoAsync(string identifier, string identifierType, List<string> idNotationBenchmark, List<string> attributes = default(List<string>), string language = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'identifier' is set
            if (identifier == null)
            {
                throw new FactSet.SDK.StocksAPIforDigitalPortals.Client.ApiException(400, "Missing required parameter 'identifier' when calling StockApi->GetStockNotationKeyFiguresBenchmarkYear5Get");
            }

            // verify the required parameter 'identifierType' is set
            if (identifierType == null)
            {
                throw new FactSet.SDK.StocksAPIforDigitalPortals.Client.ApiException(400, "Missing required parameter 'identifierType' when calling StockApi->GetStockNotationKeyFiguresBenchmarkYear5Get");
            }

            // verify the required parameter 'idNotationBenchmark' is set
            if (idNotationBenchmark == null)
            {
                throw new FactSet.SDK.StocksAPIforDigitalPortals.Client.ApiException(400, "Missing required parameter 'idNotationBenchmark' when calling StockApi->GetStockNotationKeyFiguresBenchmarkYear5Get");
            }


            FactSet.SDK.StocksAPIforDigitalPortals.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.StocksAPIforDigitalPortals.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.StocksAPIforDigitalPortals.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.StocksAPIforDigitalPortals.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.StocksAPIforDigitalPortals.Client.ClientUtils.ParameterToMultiMap("", "identifier", identifier));
            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.StocksAPIforDigitalPortals.Client.ClientUtils.ParameterToMultiMap("", "identifierType", identifierType));
            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.StocksAPIforDigitalPortals.Client.ClientUtils.ParameterToMultiMap("csv", "idNotationBenchmark", idNotationBenchmark));
            if (attributes != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.StocksAPIforDigitalPortals.Client.ClientUtils.ParameterToMultiMap("csv", "_attributes", attributes));
            }
            if (language != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.StocksAPIforDigitalPortals.Client.ClientUtils.ParameterToMultiMap("", "_language", language));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.StocksAPIforDigitalPortals.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = GetStockNotationKeyFiguresBenchmarkYear5GetResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<InlineResponse20012>("/stock/notation/keyFigures/benchmark/year/5/get", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetStockNotationKeyFiguresBenchmarkYear5Get", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List of owners for a specific type of a company&#39;s shares. List of top-20 owners for a specific type of a company&#39;s shares.
        /// </summary>
        /// <exception cref="FactSet.SDK.StocksAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifier"></param>
        /// <param name="identifierType"></param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="language"> (optional)</param>
        /// <returns>InlineResponse2008</returns>
        public InlineResponse2008 GetStockOwnerList(string identifier, string identifierType, List<string> attributes = default(List<string>), string language = default(string))
        {
            var localVarResponse = GetStockOwnerListWithHttpInfo(identifier, identifierType, attributes, language);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List of owners for a specific type of a company&#39;s shares. List of top-20 owners for a specific type of a company&#39;s shares.
        /// </summary>
        /// <exception cref="FactSet.SDK.StocksAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifier"></param>
        /// <param name="identifierType"></param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="language"> (optional)</param>
        /// <returns>ApiResponse of InlineResponse2008</returns>
        public ApiResponse<InlineResponse2008> GetStockOwnerListWithHttpInfo(string identifier, string identifierType, List<string> attributes = default(List<string>), string language = default(string))
        {
            // verify the required parameter 'identifier' is set
            if (identifier == null)
            {
                throw new FactSet.SDK.StocksAPIforDigitalPortals.Client.ApiException(400, "Missing required parameter 'identifier' when calling StockApi->GetStockOwnerList");
            }

            // verify the required parameter 'identifierType' is set
            if (identifierType == null)
            {
                throw new FactSet.SDK.StocksAPIforDigitalPortals.Client.ApiException(400, "Missing required parameter 'identifierType' when calling StockApi->GetStockOwnerList");
            }

            FactSet.SDK.StocksAPIforDigitalPortals.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.StocksAPIforDigitalPortals.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.StocksAPIforDigitalPortals.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.StocksAPIforDigitalPortals.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.StocksAPIforDigitalPortals.Client.ClientUtils.ParameterToMultiMap("", "identifier", identifier));
            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.StocksAPIforDigitalPortals.Client.ClientUtils.ParameterToMultiMap("", "identifierType", identifierType));
            if (attributes != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.StocksAPIforDigitalPortals.Client.ClientUtils.ParameterToMultiMap("csv", "_attributes", attributes));
            }
            if (language != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.StocksAPIforDigitalPortals.Client.ClientUtils.ParameterToMultiMap("", "_language", language));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.StocksAPIforDigitalPortals.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = GetStockOwnerListResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Get<
            InlineResponse2008>("/stock/owner/list", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetStockOwnerList", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// List of owners for a specific type of a company&#39;s shares. List of top-20 owners for a specific type of a company&#39;s shares.
        /// </summary>
        /// <exception cref="FactSet.SDK.StocksAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifier"></param>
        /// <param name="identifierType"></param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="language"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse2008</returns>
        public async System.Threading.Tasks.Task<InlineResponse2008>GetStockOwnerListAsync(string identifier, string identifierType, List<string> attributes = default(List<string>), string language = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await GetStockOwnerListWithHttpInfoAsync(identifier, identifierType, attributes, language, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List of owners for a specific type of a company&#39;s shares. List of top-20 owners for a specific type of a company&#39;s shares.
        /// </summary>
        /// <exception cref="FactSet.SDK.StocksAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifier"></param>
        /// <param name="identifierType"></param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="language"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse2008)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse2008>> GetStockOwnerListWithHttpInfoAsync(string identifier, string identifierType, List<string> attributes = default(List<string>), string language = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'identifier' is set
            if (identifier == null)
            {
                throw new FactSet.SDK.StocksAPIforDigitalPortals.Client.ApiException(400, "Missing required parameter 'identifier' when calling StockApi->GetStockOwnerList");
            }

            // verify the required parameter 'identifierType' is set
            if (identifierType == null)
            {
                throw new FactSet.SDK.StocksAPIforDigitalPortals.Client.ApiException(400, "Missing required parameter 'identifierType' when calling StockApi->GetStockOwnerList");
            }


            FactSet.SDK.StocksAPIforDigitalPortals.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.StocksAPIforDigitalPortals.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.StocksAPIforDigitalPortals.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.StocksAPIforDigitalPortals.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.StocksAPIforDigitalPortals.Client.ClientUtils.ParameterToMultiMap("", "identifier", identifier));
            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.StocksAPIforDigitalPortals.Client.ClientUtils.ParameterToMultiMap("", "identifierType", identifierType));
            if (attributes != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.StocksAPIforDigitalPortals.Client.ClientUtils.ParameterToMultiMap("csv", "_attributes", attributes));
            }
            if (language != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.StocksAPIforDigitalPortals.Client.ClientUtils.ParameterToMultiMap("", "_language", language));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.StocksAPIforDigitalPortals.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = GetStockOwnerListResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<InlineResponse2008>("/stock/owner/list", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetStockOwnerList", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Target price and aggregated recommendations for a stock. Target price and aggregated recommendations for a stock.
        /// </summary>
        /// <exception cref="FactSet.SDK.StocksAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifier"></param>
        /// <param name="identifierType"></param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <returns>InlineResponse2003</returns>
        public InlineResponse2003 GetStockRecommendationAggregateGet(string identifier, string identifierType, List<string> attributes = default(List<string>))
        {
            var localVarResponse = GetStockRecommendationAggregateGetWithHttpInfo(identifier, identifierType, attributes);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Target price and aggregated recommendations for a stock. Target price and aggregated recommendations for a stock.
        /// </summary>
        /// <exception cref="FactSet.SDK.StocksAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifier"></param>
        /// <param name="identifierType"></param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <returns>ApiResponse of InlineResponse2003</returns>
        public ApiResponse<InlineResponse2003> GetStockRecommendationAggregateGetWithHttpInfo(string identifier, string identifierType, List<string> attributes = default(List<string>))
        {
            // verify the required parameter 'identifier' is set
            if (identifier == null)
            {
                throw new FactSet.SDK.StocksAPIforDigitalPortals.Client.ApiException(400, "Missing required parameter 'identifier' when calling StockApi->GetStockRecommendationAggregateGet");
            }

            // verify the required parameter 'identifierType' is set
            if (identifierType == null)
            {
                throw new FactSet.SDK.StocksAPIforDigitalPortals.Client.ApiException(400, "Missing required parameter 'identifierType' when calling StockApi->GetStockRecommendationAggregateGet");
            }

            FactSet.SDK.StocksAPIforDigitalPortals.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.StocksAPIforDigitalPortals.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.StocksAPIforDigitalPortals.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.StocksAPIforDigitalPortals.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.StocksAPIforDigitalPortals.Client.ClientUtils.ParameterToMultiMap("", "identifier", identifier));
            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.StocksAPIforDigitalPortals.Client.ClientUtils.ParameterToMultiMap("", "identifierType", identifierType));
            if (attributes != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.StocksAPIforDigitalPortals.Client.ClientUtils.ParameterToMultiMap("csv", "_attributes", attributes));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.StocksAPIforDigitalPortals.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = GetStockRecommendationAggregateGetResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Get<
            InlineResponse2003>("/stock/recommendation/aggregate/get", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetStockRecommendationAggregateGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// Target price and aggregated recommendations for a stock. Target price and aggregated recommendations for a stock.
        /// </summary>
        /// <exception cref="FactSet.SDK.StocksAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifier"></param>
        /// <param name="identifierType"></param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse2003</returns>
        public async System.Threading.Tasks.Task<InlineResponse2003>GetStockRecommendationAggregateGetAsync(string identifier, string identifierType, List<string> attributes = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await GetStockRecommendationAggregateGetWithHttpInfoAsync(identifier, identifierType, attributes, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Target price and aggregated recommendations for a stock. Target price and aggregated recommendations for a stock.
        /// </summary>
        /// <exception cref="FactSet.SDK.StocksAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifier"></param>
        /// <param name="identifierType"></param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse2003)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse2003>> GetStockRecommendationAggregateGetWithHttpInfoAsync(string identifier, string identifierType, List<string> attributes = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'identifier' is set
            if (identifier == null)
            {
                throw new FactSet.SDK.StocksAPIforDigitalPortals.Client.ApiException(400, "Missing required parameter 'identifier' when calling StockApi->GetStockRecommendationAggregateGet");
            }

            // verify the required parameter 'identifierType' is set
            if (identifierType == null)
            {
                throw new FactSet.SDK.StocksAPIforDigitalPortals.Client.ApiException(400, "Missing required parameter 'identifierType' when calling StockApi->GetStockRecommendationAggregateGet");
            }


            FactSet.SDK.StocksAPIforDigitalPortals.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.StocksAPIforDigitalPortals.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.StocksAPIforDigitalPortals.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.StocksAPIforDigitalPortals.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.StocksAPIforDigitalPortals.Client.ClientUtils.ParameterToMultiMap("", "identifier", identifier));
            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.StocksAPIforDigitalPortals.Client.ClientUtils.ParameterToMultiMap("", "identifierType", identifierType));
            if (attributes != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.StocksAPIforDigitalPortals.Client.ClientUtils.ParameterToMultiMap("csv", "_attributes", attributes));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.StocksAPIforDigitalPortals.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = GetStockRecommendationAggregateGetResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<InlineResponse2003>("/stock/recommendation/aggregate/get", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetStockRecommendationAggregateGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Current and historical trade recommendations and target prices for a stock. Current and historical trade recommendations and target prices for a stock.
        /// </summary>
        /// <exception cref="FactSet.SDK.StocksAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifier"></param>
        /// <param name="identifierType"></param>
        /// <param name="snapshots"></param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <returns>InlineResponse2004</returns>
        public InlineResponse2004 GetStockRecommendationAggregateHistoryList(string identifier, string identifierType, List<string> snapshots, List<string> attributes = default(List<string>))
        {
            var localVarResponse = GetStockRecommendationAggregateHistoryListWithHttpInfo(identifier, identifierType, snapshots, attributes);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Current and historical trade recommendations and target prices for a stock. Current and historical trade recommendations and target prices for a stock.
        /// </summary>
        /// <exception cref="FactSet.SDK.StocksAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifier"></param>
        /// <param name="identifierType"></param>
        /// <param name="snapshots"></param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <returns>ApiResponse of InlineResponse2004</returns>
        public ApiResponse<InlineResponse2004> GetStockRecommendationAggregateHistoryListWithHttpInfo(string identifier, string identifierType, List<string> snapshots, List<string> attributes = default(List<string>))
        {
            // verify the required parameter 'identifier' is set
            if (identifier == null)
            {
                throw new FactSet.SDK.StocksAPIforDigitalPortals.Client.ApiException(400, "Missing required parameter 'identifier' when calling StockApi->GetStockRecommendationAggregateHistoryList");
            }

            // verify the required parameter 'identifierType' is set
            if (identifierType == null)
            {
                throw new FactSet.SDK.StocksAPIforDigitalPortals.Client.ApiException(400, "Missing required parameter 'identifierType' when calling StockApi->GetStockRecommendationAggregateHistoryList");
            }

            // verify the required parameter 'snapshots' is set
            if (snapshots == null)
            {
                throw new FactSet.SDK.StocksAPIforDigitalPortals.Client.ApiException(400, "Missing required parameter 'snapshots' when calling StockApi->GetStockRecommendationAggregateHistoryList");
            }

            FactSet.SDK.StocksAPIforDigitalPortals.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.StocksAPIforDigitalPortals.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.StocksAPIforDigitalPortals.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.StocksAPIforDigitalPortals.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.StocksAPIforDigitalPortals.Client.ClientUtils.ParameterToMultiMap("", "identifier", identifier));
            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.StocksAPIforDigitalPortals.Client.ClientUtils.ParameterToMultiMap("", "identifierType", identifierType));
            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.StocksAPIforDigitalPortals.Client.ClientUtils.ParameterToMultiMap("csv", "snapshots", snapshots));
            if (attributes != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.StocksAPIforDigitalPortals.Client.ClientUtils.ParameterToMultiMap("csv", "_attributes", attributes));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.StocksAPIforDigitalPortals.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = GetStockRecommendationAggregateHistoryListResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Get<
            InlineResponse2004>("/stock/recommendation/aggregate/history/list", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetStockRecommendationAggregateHistoryList", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// Current and historical trade recommendations and target prices for a stock. Current and historical trade recommendations and target prices for a stock.
        /// </summary>
        /// <exception cref="FactSet.SDK.StocksAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifier"></param>
        /// <param name="identifierType"></param>
        /// <param name="snapshots"></param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse2004</returns>
        public async System.Threading.Tasks.Task<InlineResponse2004>GetStockRecommendationAggregateHistoryListAsync(string identifier, string identifierType, List<string> snapshots, List<string> attributes = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await GetStockRecommendationAggregateHistoryListWithHttpInfoAsync(identifier, identifierType, snapshots, attributes, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Current and historical trade recommendations and target prices for a stock. Current and historical trade recommendations and target prices for a stock.
        /// </summary>
        /// <exception cref="FactSet.SDK.StocksAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifier"></param>
        /// <param name="identifierType"></param>
        /// <param name="snapshots"></param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse2004)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse2004>> GetStockRecommendationAggregateHistoryListWithHttpInfoAsync(string identifier, string identifierType, List<string> snapshots, List<string> attributes = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'identifier' is set
            if (identifier == null)
            {
                throw new FactSet.SDK.StocksAPIforDigitalPortals.Client.ApiException(400, "Missing required parameter 'identifier' when calling StockApi->GetStockRecommendationAggregateHistoryList");
            }

            // verify the required parameter 'identifierType' is set
            if (identifierType == null)
            {
                throw new FactSet.SDK.StocksAPIforDigitalPortals.Client.ApiException(400, "Missing required parameter 'identifierType' when calling StockApi->GetStockRecommendationAggregateHistoryList");
            }

            // verify the required parameter 'snapshots' is set
            if (snapshots == null)
            {
                throw new FactSet.SDK.StocksAPIforDigitalPortals.Client.ApiException(400, "Missing required parameter 'snapshots' when calling StockApi->GetStockRecommendationAggregateHistoryList");
            }


            FactSet.SDK.StocksAPIforDigitalPortals.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.StocksAPIforDigitalPortals.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.StocksAPIforDigitalPortals.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.StocksAPIforDigitalPortals.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.StocksAPIforDigitalPortals.Client.ClientUtils.ParameterToMultiMap("", "identifier", identifier));
            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.StocksAPIforDigitalPortals.Client.ClientUtils.ParameterToMultiMap("", "identifierType", identifierType));
            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.StocksAPIforDigitalPortals.Client.ClientUtils.ParameterToMultiMap("csv", "snapshots", snapshots));
            if (attributes != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.StocksAPIforDigitalPortals.Client.ClientUtils.ParameterToMultiMap("csv", "_attributes", attributes));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.StocksAPIforDigitalPortals.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = GetStockRecommendationAggregateHistoryListResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<InlineResponse2004>("/stock/recommendation/aggregate/history/list", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetStockRecommendationAggregateHistoryList", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List of dividends for a stock. List of dividends for a stock.
        /// </summary>
        /// <exception cref="FactSet.SDK.StocksAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postStockDividendListRequest"> (optional)</param>
        /// <returns>InlineResponse20010</returns>
        public InlineResponse20010 PostStockDividendList(PostStockDividendListRequest postStockDividendListRequest = default(PostStockDividendListRequest))
        {
            var localVarResponse = PostStockDividendListWithHttpInfo(postStockDividendListRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List of dividends for a stock. List of dividends for a stock.
        /// </summary>
        /// <exception cref="FactSet.SDK.StocksAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postStockDividendListRequest"> (optional)</param>
        /// <returns>ApiResponse of InlineResponse20010</returns>
        public ApiResponse<InlineResponse20010> PostStockDividendListWithHttpInfo(PostStockDividendListRequest postStockDividendListRequest = default(PostStockDividendListRequest))
        {
            FactSet.SDK.StocksAPIforDigitalPortals.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.StocksAPIforDigitalPortals.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.StocksAPIforDigitalPortals.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.StocksAPIforDigitalPortals.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = postStockDividendListRequest;

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.StocksAPIforDigitalPortals.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = PostStockDividendListResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Post<
            InlineResponse20010>("/stock/dividend/list", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostStockDividendList", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// List of dividends for a stock. List of dividends for a stock.
        /// </summary>
        /// <exception cref="FactSet.SDK.StocksAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postStockDividendListRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse20010</returns>
        public async System.Threading.Tasks.Task<InlineResponse20010>PostStockDividendListAsync(PostStockDividendListRequest postStockDividendListRequest = default(PostStockDividendListRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await PostStockDividendListWithHttpInfoAsync(postStockDividendListRequest, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List of dividends for a stock. List of dividends for a stock.
        /// </summary>
        /// <exception cref="FactSet.SDK.StocksAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postStockDividendListRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse20010)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20010>> PostStockDividendListWithHttpInfoAsync(PostStockDividendListRequest postStockDividendListRequest = default(PostStockDividendListRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            FactSet.SDK.StocksAPIforDigitalPortals.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.StocksAPIforDigitalPortals.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.StocksAPIforDigitalPortals.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.StocksAPIforDigitalPortals.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = postStockDividendListRequest;

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.StocksAPIforDigitalPortals.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = PostStockDividendListResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<InlineResponse20010>("/stock/dividend/list", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostStockDividendList", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Ranking of stocks&#39; notations using intraday figures. Ranking of stocks&#39; notations using intraday figures. The result is limited to 100 notations that all must satisfy all selected filters. If more than one notation of an instrument matches the parameters, and no market priority has been specified, only the notation with the highest trading volume, averaged over one month, is considered.  By default, the result is sorted descending by the relative intraday performance corresponding to the most recent trade price, see attribute &#x60;trade.performance.relative&#x60;. The result may contain sortable values based on different currencies, possibly making the ranking nonsensical, if the parameter &#x60;currency&#x60; has not been specified.&#x60;  The search can be restricted to a specific set of products by using customer-specific instrument or notation restriction lists. Such restriction lists are set up by FactSet upon request.  All identifiers used as parameters must be valid and entitled.
        /// </summary>
        /// <exception cref="FactSet.SDK.StocksAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postStockNotationRankingIntradayListRequest"> (optional)</param>
        /// <returns>InlineResponse20013</returns>
        public InlineResponse20013 PostStockNotationRankingIntradayList(PostStockNotationRankingIntradayListRequest postStockNotationRankingIntradayListRequest = default(PostStockNotationRankingIntradayListRequest))
        {
            var localVarResponse = PostStockNotationRankingIntradayListWithHttpInfo(postStockNotationRankingIntradayListRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Ranking of stocks&#39; notations using intraday figures. Ranking of stocks&#39; notations using intraday figures. The result is limited to 100 notations that all must satisfy all selected filters. If more than one notation of an instrument matches the parameters, and no market priority has been specified, only the notation with the highest trading volume, averaged over one month, is considered.  By default, the result is sorted descending by the relative intraday performance corresponding to the most recent trade price, see attribute &#x60;trade.performance.relative&#x60;. The result may contain sortable values based on different currencies, possibly making the ranking nonsensical, if the parameter &#x60;currency&#x60; has not been specified.&#x60;  The search can be restricted to a specific set of products by using customer-specific instrument or notation restriction lists. Such restriction lists are set up by FactSet upon request.  All identifiers used as parameters must be valid and entitled.
        /// </summary>
        /// <exception cref="FactSet.SDK.StocksAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postStockNotationRankingIntradayListRequest"> (optional)</param>
        /// <returns>ApiResponse of InlineResponse20013</returns>
        public ApiResponse<InlineResponse20013> PostStockNotationRankingIntradayListWithHttpInfo(PostStockNotationRankingIntradayListRequest postStockNotationRankingIntradayListRequest = default(PostStockNotationRankingIntradayListRequest))
        {
            FactSet.SDK.StocksAPIforDigitalPortals.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.StocksAPIforDigitalPortals.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.StocksAPIforDigitalPortals.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.StocksAPIforDigitalPortals.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = postStockNotationRankingIntradayListRequest;

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.StocksAPIforDigitalPortals.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = PostStockNotationRankingIntradayListResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Post<
            InlineResponse20013>("/stock/notation/ranking/intraday/list", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostStockNotationRankingIntradayList", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// Ranking of stocks&#39; notations using intraday figures. Ranking of stocks&#39; notations using intraday figures. The result is limited to 100 notations that all must satisfy all selected filters. If more than one notation of an instrument matches the parameters, and no market priority has been specified, only the notation with the highest trading volume, averaged over one month, is considered.  By default, the result is sorted descending by the relative intraday performance corresponding to the most recent trade price, see attribute &#x60;trade.performance.relative&#x60;. The result may contain sortable values based on different currencies, possibly making the ranking nonsensical, if the parameter &#x60;currency&#x60; has not been specified.&#x60;  The search can be restricted to a specific set of products by using customer-specific instrument or notation restriction lists. Such restriction lists are set up by FactSet upon request.  All identifiers used as parameters must be valid and entitled.
        /// </summary>
        /// <exception cref="FactSet.SDK.StocksAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postStockNotationRankingIntradayListRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse20013</returns>
        public async System.Threading.Tasks.Task<InlineResponse20013>PostStockNotationRankingIntradayListAsync(PostStockNotationRankingIntradayListRequest postStockNotationRankingIntradayListRequest = default(PostStockNotationRankingIntradayListRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await PostStockNotationRankingIntradayListWithHttpInfoAsync(postStockNotationRankingIntradayListRequest, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Ranking of stocks&#39; notations using intraday figures. Ranking of stocks&#39; notations using intraday figures. The result is limited to 100 notations that all must satisfy all selected filters. If more than one notation of an instrument matches the parameters, and no market priority has been specified, only the notation with the highest trading volume, averaged over one month, is considered.  By default, the result is sorted descending by the relative intraday performance corresponding to the most recent trade price, see attribute &#x60;trade.performance.relative&#x60;. The result may contain sortable values based on different currencies, possibly making the ranking nonsensical, if the parameter &#x60;currency&#x60; has not been specified.&#x60;  The search can be restricted to a specific set of products by using customer-specific instrument or notation restriction lists. Such restriction lists are set up by FactSet upon request.  All identifiers used as parameters must be valid and entitled.
        /// </summary>
        /// <exception cref="FactSet.SDK.StocksAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postStockNotationRankingIntradayListRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse20013)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20013>> PostStockNotationRankingIntradayListWithHttpInfoAsync(PostStockNotationRankingIntradayListRequest postStockNotationRankingIntradayListRequest = default(PostStockNotationRankingIntradayListRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            FactSet.SDK.StocksAPIforDigitalPortals.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.StocksAPIforDigitalPortals.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.StocksAPIforDigitalPortals.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.StocksAPIforDigitalPortals.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = postStockNotationRankingIntradayListRequest;

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.StocksAPIforDigitalPortals.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = PostStockNotationRankingIntradayListResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<InlineResponse20013>("/stock/notation/ranking/intraday/list", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostStockNotationRankingIntradayList", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Screener for stocks&#39; notations based on stock-specific parameters. Screener for stocks&#39; notations based on stock-specific parameters. The result is limited to the notations that satisfy all the selected filters. If more than one notation of an instrument matches the parameters, and no market priority has been specified, only the notation with the highest trading volume, averaged over one month, is considered.  Currency dependent current figures on company level (see attribute &#x60;currentKeyFigures.company.currencyDependent&#x60;) or on share instrument level (see attribute &#x60;currentKeyFigures.shareInstrument.currencyDependent&#x60;) are only returned if the currency (see parameter &#x60;currentKeyFigures.company.currencyDependent.currency.isoCode&#x60; or parameter &#x60;currentKeyFigures.shareInstrument.currencyDependent.currency.isoCode&#x60; respectively) are set.  Parameters for up to three fiscal years might be used in one request, see attribute &#x60;reportedKeyFigures&#x60;; data is available for the ten most recent completed fiscal years. Estimates are available for the current and two consecutive fiscal years; parameters for all three might be used in one request, see attribute &#x60;estimates&#x60;. The estimated values are calculated as the average of the most recent estimates provided by all analysts in a fixed time frame of 100 days. Screening and sorting by a currency-dependent attribute is not possible if the currency (see parameter &#x60;reportedKeyFigures.currencyDependentKeyFigures.currency.isoCode&#x60; and parameter &#x60;estimates.currencyDependentEstimates.currency.isoCode&#x60; respectively) is not set. If a fiscal year for the data as of the end of a fiscal year (see parameter &#x60;reportedKeyFigures.fiscalYear&#x60;) or for the estimates (see parameter &#x60;estimates.fiscalYear&#x60;) has been selected but no currency has been set, the respective data will be returned in the currency in which it was originally reported.  A specific set of stocks can be restricted to or excluded by using customer-specific instrument or notation selection lists. Such selection lists are set up by FactSet upon request. All identifiers used as parameters must be valid and entitled.
        /// </summary>
        /// <exception cref="FactSet.SDK.StocksAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postStockNotationScreenerSearchRequest"> (optional)</param>
        /// <returns>InlineResponse20014</returns>
        public InlineResponse20014 PostStockNotationScreenerSearch(PostStockNotationScreenerSearchRequest postStockNotationScreenerSearchRequest = default(PostStockNotationScreenerSearchRequest))
        {
            var localVarResponse = PostStockNotationScreenerSearchWithHttpInfo(postStockNotationScreenerSearchRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Screener for stocks&#39; notations based on stock-specific parameters. Screener for stocks&#39; notations based on stock-specific parameters. The result is limited to the notations that satisfy all the selected filters. If more than one notation of an instrument matches the parameters, and no market priority has been specified, only the notation with the highest trading volume, averaged over one month, is considered.  Currency dependent current figures on company level (see attribute &#x60;currentKeyFigures.company.currencyDependent&#x60;) or on share instrument level (see attribute &#x60;currentKeyFigures.shareInstrument.currencyDependent&#x60;) are only returned if the currency (see parameter &#x60;currentKeyFigures.company.currencyDependent.currency.isoCode&#x60; or parameter &#x60;currentKeyFigures.shareInstrument.currencyDependent.currency.isoCode&#x60; respectively) are set.  Parameters for up to three fiscal years might be used in one request, see attribute &#x60;reportedKeyFigures&#x60;; data is available for the ten most recent completed fiscal years. Estimates are available for the current and two consecutive fiscal years; parameters for all three might be used in one request, see attribute &#x60;estimates&#x60;. The estimated values are calculated as the average of the most recent estimates provided by all analysts in a fixed time frame of 100 days. Screening and sorting by a currency-dependent attribute is not possible if the currency (see parameter &#x60;reportedKeyFigures.currencyDependentKeyFigures.currency.isoCode&#x60; and parameter &#x60;estimates.currencyDependentEstimates.currency.isoCode&#x60; respectively) is not set. If a fiscal year for the data as of the end of a fiscal year (see parameter &#x60;reportedKeyFigures.fiscalYear&#x60;) or for the estimates (see parameter &#x60;estimates.fiscalYear&#x60;) has been selected but no currency has been set, the respective data will be returned in the currency in which it was originally reported.  A specific set of stocks can be restricted to or excluded by using customer-specific instrument or notation selection lists. Such selection lists are set up by FactSet upon request. All identifiers used as parameters must be valid and entitled.
        /// </summary>
        /// <exception cref="FactSet.SDK.StocksAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postStockNotationScreenerSearchRequest"> (optional)</param>
        /// <returns>ApiResponse of InlineResponse20014</returns>
        public ApiResponse<InlineResponse20014> PostStockNotationScreenerSearchWithHttpInfo(PostStockNotationScreenerSearchRequest postStockNotationScreenerSearchRequest = default(PostStockNotationScreenerSearchRequest))
        {
            FactSet.SDK.StocksAPIforDigitalPortals.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.StocksAPIforDigitalPortals.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.StocksAPIforDigitalPortals.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.StocksAPIforDigitalPortals.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = postStockNotationScreenerSearchRequest;

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.StocksAPIforDigitalPortals.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = PostStockNotationScreenerSearchResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Post<
            InlineResponse20014>("/stock/notation/screener/search", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostStockNotationScreenerSearch", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// Screener for stocks&#39; notations based on stock-specific parameters. Screener for stocks&#39; notations based on stock-specific parameters. The result is limited to the notations that satisfy all the selected filters. If more than one notation of an instrument matches the parameters, and no market priority has been specified, only the notation with the highest trading volume, averaged over one month, is considered.  Currency dependent current figures on company level (see attribute &#x60;currentKeyFigures.company.currencyDependent&#x60;) or on share instrument level (see attribute &#x60;currentKeyFigures.shareInstrument.currencyDependent&#x60;) are only returned if the currency (see parameter &#x60;currentKeyFigures.company.currencyDependent.currency.isoCode&#x60; or parameter &#x60;currentKeyFigures.shareInstrument.currencyDependent.currency.isoCode&#x60; respectively) are set.  Parameters for up to three fiscal years might be used in one request, see attribute &#x60;reportedKeyFigures&#x60;; data is available for the ten most recent completed fiscal years. Estimates are available for the current and two consecutive fiscal years; parameters for all three might be used in one request, see attribute &#x60;estimates&#x60;. The estimated values are calculated as the average of the most recent estimates provided by all analysts in a fixed time frame of 100 days. Screening and sorting by a currency-dependent attribute is not possible if the currency (see parameter &#x60;reportedKeyFigures.currencyDependentKeyFigures.currency.isoCode&#x60; and parameter &#x60;estimates.currencyDependentEstimates.currency.isoCode&#x60; respectively) is not set. If a fiscal year for the data as of the end of a fiscal year (see parameter &#x60;reportedKeyFigures.fiscalYear&#x60;) or for the estimates (see parameter &#x60;estimates.fiscalYear&#x60;) has been selected but no currency has been set, the respective data will be returned in the currency in which it was originally reported.  A specific set of stocks can be restricted to or excluded by using customer-specific instrument or notation selection lists. Such selection lists are set up by FactSet upon request. All identifiers used as parameters must be valid and entitled.
        /// </summary>
        /// <exception cref="FactSet.SDK.StocksAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postStockNotationScreenerSearchRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse20014</returns>
        public async System.Threading.Tasks.Task<InlineResponse20014>PostStockNotationScreenerSearchAsync(PostStockNotationScreenerSearchRequest postStockNotationScreenerSearchRequest = default(PostStockNotationScreenerSearchRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await PostStockNotationScreenerSearchWithHttpInfoAsync(postStockNotationScreenerSearchRequest, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Screener for stocks&#39; notations based on stock-specific parameters. Screener for stocks&#39; notations based on stock-specific parameters. The result is limited to the notations that satisfy all the selected filters. If more than one notation of an instrument matches the parameters, and no market priority has been specified, only the notation with the highest trading volume, averaged over one month, is considered.  Currency dependent current figures on company level (see attribute &#x60;currentKeyFigures.company.currencyDependent&#x60;) or on share instrument level (see attribute &#x60;currentKeyFigures.shareInstrument.currencyDependent&#x60;) are only returned if the currency (see parameter &#x60;currentKeyFigures.company.currencyDependent.currency.isoCode&#x60; or parameter &#x60;currentKeyFigures.shareInstrument.currencyDependent.currency.isoCode&#x60; respectively) are set.  Parameters for up to three fiscal years might be used in one request, see attribute &#x60;reportedKeyFigures&#x60;; data is available for the ten most recent completed fiscal years. Estimates are available for the current and two consecutive fiscal years; parameters for all three might be used in one request, see attribute &#x60;estimates&#x60;. The estimated values are calculated as the average of the most recent estimates provided by all analysts in a fixed time frame of 100 days. Screening and sorting by a currency-dependent attribute is not possible if the currency (see parameter &#x60;reportedKeyFigures.currencyDependentKeyFigures.currency.isoCode&#x60; and parameter &#x60;estimates.currencyDependentEstimates.currency.isoCode&#x60; respectively) is not set. If a fiscal year for the data as of the end of a fiscal year (see parameter &#x60;reportedKeyFigures.fiscalYear&#x60;) or for the estimates (see parameter &#x60;estimates.fiscalYear&#x60;) has been selected but no currency has been set, the respective data will be returned in the currency in which it was originally reported.  A specific set of stocks can be restricted to or excluded by using customer-specific instrument or notation selection lists. Such selection lists are set up by FactSet upon request. All identifiers used as parameters must be valid and entitled.
        /// </summary>
        /// <exception cref="FactSet.SDK.StocksAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postStockNotationScreenerSearchRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse20014)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20014>> PostStockNotationScreenerSearchWithHttpInfoAsync(PostStockNotationScreenerSearchRequest postStockNotationScreenerSearchRequest = default(PostStockNotationScreenerSearchRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            FactSet.SDK.StocksAPIforDigitalPortals.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.StocksAPIforDigitalPortals.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.StocksAPIforDigitalPortals.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.StocksAPIforDigitalPortals.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = postStockNotationScreenerSearchRequest;

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.StocksAPIforDigitalPortals.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = PostStockNotationScreenerSearchResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<InlineResponse20014>("/stock/notation/screener/search", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostStockNotationScreenerSearch", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Possible values and value ranges for the parameters used in the endpoint &#x60;/stock/notation/screener/search&#x60;. The endpoint returns the possible values and value ranges for the parameters used in the endpoint &#x60;/stock/notation/screener/search&#x60;. It allows to request the values and value ranges only for a restricted set of notations that match predefined parameters. The functionality may be used to pre-fill the values and value ranges of the parameters of the &#x60;/stock/notation/screener/search&#x60; endpoint so that performing a search always leads to a non-empty set of notations. If more than one notation of an instrument matches the parameters, and no market priority has been specified, only the notation with the highest trading volume, averaged over one month, is considered. For more information regarding the performance and volatility parameters, see the information available in the group description of the &#x60;/notation/keyFigures/&#x60; endpoints.
        /// </summary>
        /// <exception cref="FactSet.SDK.StocksAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postStockNotationScreenerValueRangesGetRequest"> (optional)</param>
        /// <returns>InlineResponse20015</returns>
        public InlineResponse20015 PostStockNotationScreenerValueRangesGet(PostStockNotationScreenerValueRangesGetRequest postStockNotationScreenerValueRangesGetRequest = default(PostStockNotationScreenerValueRangesGetRequest))
        {
            var localVarResponse = PostStockNotationScreenerValueRangesGetWithHttpInfo(postStockNotationScreenerValueRangesGetRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Possible values and value ranges for the parameters used in the endpoint &#x60;/stock/notation/screener/search&#x60;. The endpoint returns the possible values and value ranges for the parameters used in the endpoint &#x60;/stock/notation/screener/search&#x60;. It allows to request the values and value ranges only for a restricted set of notations that match predefined parameters. The functionality may be used to pre-fill the values and value ranges of the parameters of the &#x60;/stock/notation/screener/search&#x60; endpoint so that performing a search always leads to a non-empty set of notations. If more than one notation of an instrument matches the parameters, and no market priority has been specified, only the notation with the highest trading volume, averaged over one month, is considered. For more information regarding the performance and volatility parameters, see the information available in the group description of the &#x60;/notation/keyFigures/&#x60; endpoints.
        /// </summary>
        /// <exception cref="FactSet.SDK.StocksAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postStockNotationScreenerValueRangesGetRequest"> (optional)</param>
        /// <returns>ApiResponse of InlineResponse20015</returns>
        public ApiResponse<InlineResponse20015> PostStockNotationScreenerValueRangesGetWithHttpInfo(PostStockNotationScreenerValueRangesGetRequest postStockNotationScreenerValueRangesGetRequest = default(PostStockNotationScreenerValueRangesGetRequest))
        {
            FactSet.SDK.StocksAPIforDigitalPortals.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.StocksAPIforDigitalPortals.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.StocksAPIforDigitalPortals.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.StocksAPIforDigitalPortals.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = postStockNotationScreenerValueRangesGetRequest;

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.StocksAPIforDigitalPortals.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = PostStockNotationScreenerValueRangesGetResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Post<
            InlineResponse20015>("/stock/notation/screener/valueRanges/get", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostStockNotationScreenerValueRangesGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// Possible values and value ranges for the parameters used in the endpoint &#x60;/stock/notation/screener/search&#x60;. The endpoint returns the possible values and value ranges for the parameters used in the endpoint &#x60;/stock/notation/screener/search&#x60;. It allows to request the values and value ranges only for a restricted set of notations that match predefined parameters. The functionality may be used to pre-fill the values and value ranges of the parameters of the &#x60;/stock/notation/screener/search&#x60; endpoint so that performing a search always leads to a non-empty set of notations. If more than one notation of an instrument matches the parameters, and no market priority has been specified, only the notation with the highest trading volume, averaged over one month, is considered. For more information regarding the performance and volatility parameters, see the information available in the group description of the &#x60;/notation/keyFigures/&#x60; endpoints.
        /// </summary>
        /// <exception cref="FactSet.SDK.StocksAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postStockNotationScreenerValueRangesGetRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse20015</returns>
        public async System.Threading.Tasks.Task<InlineResponse20015>PostStockNotationScreenerValueRangesGetAsync(PostStockNotationScreenerValueRangesGetRequest postStockNotationScreenerValueRangesGetRequest = default(PostStockNotationScreenerValueRangesGetRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await PostStockNotationScreenerValueRangesGetWithHttpInfoAsync(postStockNotationScreenerValueRangesGetRequest, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Possible values and value ranges for the parameters used in the endpoint &#x60;/stock/notation/screener/search&#x60;. The endpoint returns the possible values and value ranges for the parameters used in the endpoint &#x60;/stock/notation/screener/search&#x60;. It allows to request the values and value ranges only for a restricted set of notations that match predefined parameters. The functionality may be used to pre-fill the values and value ranges of the parameters of the &#x60;/stock/notation/screener/search&#x60; endpoint so that performing a search always leads to a non-empty set of notations. If more than one notation of an instrument matches the parameters, and no market priority has been specified, only the notation with the highest trading volume, averaged over one month, is considered. For more information regarding the performance and volatility parameters, see the information available in the group description of the &#x60;/notation/keyFigures/&#x60; endpoints.
        /// </summary>
        /// <exception cref="FactSet.SDK.StocksAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postStockNotationScreenerValueRangesGetRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse20015)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20015>> PostStockNotationScreenerValueRangesGetWithHttpInfoAsync(PostStockNotationScreenerValueRangesGetRequest postStockNotationScreenerValueRangesGetRequest = default(PostStockNotationScreenerValueRangesGetRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            FactSet.SDK.StocksAPIforDigitalPortals.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.StocksAPIforDigitalPortals.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.StocksAPIforDigitalPortals.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.StocksAPIforDigitalPortals.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = postStockNotationScreenerValueRangesGetRequest;

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.StocksAPIforDigitalPortals.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = PostStockNotationScreenerValueRangesGetResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<InlineResponse20015>("/stock/notation/screener/valueRanges/get", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostStockNotationScreenerValueRangesGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
