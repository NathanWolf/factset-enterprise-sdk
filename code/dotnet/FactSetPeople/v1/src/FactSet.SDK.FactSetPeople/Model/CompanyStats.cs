/*
 * FactSet People API
 *
 * The FactSet People API exposes FactSet data for individuals and their jobs. 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: api@factset.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = FactSet.SDK.FactSetPeople.Client.OpenAPIDateConverter;

namespace FactSet.SDK.FactSetPeople.Model
{
    /// <summary>
    /// List of the statistics such as the average age, tenure, compensation of leadership, the number of executives, and the gender diversity of leadership for the requested identifier.
    /// </summary>
    [DataContract(Name = "companyStats")]
    public partial class CompanyStats : IEquatable<CompanyStats>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CompanyStats" /> class.
        /// </summary>
        /// <param name="averageMgmtCompensation">Average compensation for the executives.</param>
        /// <param name="averageTenure">Avergae tenure of the people.</param>
        /// <param name="medianTenure">Median tenure.</param>
        /// <param name="averageAge">Average of the executives on the management and board.</param>
        /// <param name="maxAge">Maximum age of the people on Management &amp; Board.</param>
        /// <param name="minimumAge">Minimum age of the person on board.</param>
        /// <param name="medianAge">Median age of the people on board.</param>
        /// <param name="boardIndependentDirectors">Independent directors on the board.</param>
        /// <param name="femaleBoardMembers">Number of female members on the board.</param>
        /// <param name="numberOfMembers">Number of people on board..</param>
        /// <param name="onOtherBoardsAll">On Other Boards All.</param>
        /// <param name="onOtherBoardsCorporate">On Other Boards Corporate.</param>
        /// <param name="mbType">Management and Board type, where MB &#x3D; Management &amp; Board, MGMT &#x3D; Management, and BRD &#x3D; Board. This is a pass-through value from the input used in the &#x60;mbType&#x60; query parameter..</param>
        /// <param name="requestId">Original identifier used for the request..</param>
        public CompanyStats(decimal averageMgmtCompensation = default(decimal), double averageTenure = default(double), double medianTenure = default(double), double averageAge = default(double), decimal maxAge = default(decimal), decimal minimumAge = default(decimal), decimal medianAge = default(decimal), decimal boardIndependentDirectors = default(decimal), decimal femaleBoardMembers = default(decimal), decimal numberOfMembers = default(decimal), decimal onOtherBoardsAll = default(decimal), decimal onOtherBoardsCorporate = default(decimal), string mbType = default(string), string requestId = default(string))
        {
            this.AverageMgmtCompensation = averageMgmtCompensation;
            this.AverageTenure = averageTenure;
            this.MedianTenure = medianTenure;
            this.AverageAge = averageAge;
            this.MaxAge = maxAge;
            this.MinimumAge = minimumAge;
            this.MedianAge = medianAge;
            this.BoardIndependentDirectors = boardIndependentDirectors;
            this.FemaleBoardMembers = femaleBoardMembers;
            this.NumberOfMembers = numberOfMembers;
            this.OnOtherBoardsAll = onOtherBoardsAll;
            this.OnOtherBoardsCorporate = onOtherBoardsCorporate;
            this.MbType = mbType;
            this.RequestId = requestId;
        }

        /// <summary>
        /// Average compensation for the executives
        /// </summary>
        /// <value>Average compensation for the executives</value>
        [DataMember(Name = "averageMgmtCompensation", EmitDefaultValue = false)]
        public decimal AverageMgmtCompensation { get; set; }

        /// <summary>
        /// Avergae tenure of the people
        /// </summary>
        /// <value>Avergae tenure of the people</value>
        [DataMember(Name = "averageTenure", EmitDefaultValue = false)]
        public double AverageTenure { get; set; }

        /// <summary>
        /// Median tenure
        /// </summary>
        /// <value>Median tenure</value>
        [DataMember(Name = "medianTenure", EmitDefaultValue = false)]
        public double MedianTenure { get; set; }

        /// <summary>
        /// Average of the executives on the management and board
        /// </summary>
        /// <value>Average of the executives on the management and board</value>
        [DataMember(Name = "averageAge", EmitDefaultValue = false)]
        public double AverageAge { get; set; }

        /// <summary>
        /// Maximum age of the people on Management &amp; Board
        /// </summary>
        /// <value>Maximum age of the people on Management &amp; Board</value>
        [DataMember(Name = "maxAge", EmitDefaultValue = false)]
        public decimal MaxAge { get; set; }

        /// <summary>
        /// Minimum age of the person on board
        /// </summary>
        /// <value>Minimum age of the person on board</value>
        [DataMember(Name = "minimumAge", EmitDefaultValue = false)]
        public decimal MinimumAge { get; set; }

        /// <summary>
        /// Median age of the people on board
        /// </summary>
        /// <value>Median age of the people on board</value>
        [DataMember(Name = "medianAge", EmitDefaultValue = false)]
        public decimal MedianAge { get; set; }

        /// <summary>
        /// Independent directors on the board
        /// </summary>
        /// <value>Independent directors on the board</value>
        [DataMember(Name = "boardIndependentDirectors", EmitDefaultValue = false)]
        public decimal BoardIndependentDirectors { get; set; }

        /// <summary>
        /// Number of female members on the board
        /// </summary>
        /// <value>Number of female members on the board</value>
        [DataMember(Name = "femaleBoardMembers", EmitDefaultValue = false)]
        public decimal FemaleBoardMembers { get; set; }

        /// <summary>
        /// Number of people on board.
        /// </summary>
        /// <value>Number of people on board.</value>
        [DataMember(Name = "numberOfMembers", EmitDefaultValue = false)]
        public decimal NumberOfMembers { get; set; }

        /// <summary>
        /// On Other Boards All
        /// </summary>
        /// <value>On Other Boards All</value>
        [DataMember(Name = "onOtherBoardsAll", EmitDefaultValue = false)]
        public decimal OnOtherBoardsAll { get; set; }

        /// <summary>
        /// On Other Boards Corporate
        /// </summary>
        /// <value>On Other Boards Corporate</value>
        [DataMember(Name = "onOtherBoardsCorporate", EmitDefaultValue = false)]
        public decimal OnOtherBoardsCorporate { get; set; }

        /// <summary>
        /// Management and Board type, where MB &#x3D; Management &amp; Board, MGMT &#x3D; Management, and BRD &#x3D; Board. This is a pass-through value from the input used in the &#x60;mbType&#x60; query parameter.
        /// </summary>
        /// <value>Management and Board type, where MB &#x3D; Management &amp; Board, MGMT &#x3D; Management, and BRD &#x3D; Board. This is a pass-through value from the input used in the &#x60;mbType&#x60; query parameter.</value>
        [DataMember(Name = "mbType", EmitDefaultValue = false)]
        public string MbType { get; set; }

        /// <summary>
        /// Original identifier used for the request.
        /// </summary>
        /// <value>Original identifier used for the request.</value>
        [DataMember(Name = "requestId", EmitDefaultValue = false)]
        public string RequestId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CompanyStats {\n");
            sb.Append("  AverageMgmtCompensation: ").Append(AverageMgmtCompensation).Append("\n");
            sb.Append("  AverageTenure: ").Append(AverageTenure).Append("\n");
            sb.Append("  MedianTenure: ").Append(MedianTenure).Append("\n");
            sb.Append("  AverageAge: ").Append(AverageAge).Append("\n");
            sb.Append("  MaxAge: ").Append(MaxAge).Append("\n");
            sb.Append("  MinimumAge: ").Append(MinimumAge).Append("\n");
            sb.Append("  MedianAge: ").Append(MedianAge).Append("\n");
            sb.Append("  BoardIndependentDirectors: ").Append(BoardIndependentDirectors).Append("\n");
            sb.Append("  FemaleBoardMembers: ").Append(FemaleBoardMembers).Append("\n");
            sb.Append("  NumberOfMembers: ").Append(NumberOfMembers).Append("\n");
            sb.Append("  OnOtherBoardsAll: ").Append(OnOtherBoardsAll).Append("\n");
            sb.Append("  OnOtherBoardsCorporate: ").Append(OnOtherBoardsCorporate).Append("\n");
            sb.Append("  MbType: ").Append(MbType).Append("\n");
            sb.Append("  RequestId: ").Append(RequestId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CompanyStats);
        }

        /// <summary>
        /// Returns true if CompanyStats instances are equal
        /// </summary>
        /// <param name="input">Instance of CompanyStats to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CompanyStats input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.AverageMgmtCompensation == input.AverageMgmtCompensation ||
                    this.AverageMgmtCompensation.Equals(input.AverageMgmtCompensation)
                ) && 
                (
                    this.AverageTenure == input.AverageTenure ||
                    this.AverageTenure.Equals(input.AverageTenure)
                ) && 
                (
                    this.MedianTenure == input.MedianTenure ||
                    this.MedianTenure.Equals(input.MedianTenure)
                ) && 
                (
                    this.AverageAge == input.AverageAge ||
                    this.AverageAge.Equals(input.AverageAge)
                ) && 
                (
                    this.MaxAge == input.MaxAge ||
                    this.MaxAge.Equals(input.MaxAge)
                ) && 
                (
                    this.MinimumAge == input.MinimumAge ||
                    this.MinimumAge.Equals(input.MinimumAge)
                ) && 
                (
                    this.MedianAge == input.MedianAge ||
                    this.MedianAge.Equals(input.MedianAge)
                ) && 
                (
                    this.BoardIndependentDirectors == input.BoardIndependentDirectors ||
                    this.BoardIndependentDirectors.Equals(input.BoardIndependentDirectors)
                ) && 
                (
                    this.FemaleBoardMembers == input.FemaleBoardMembers ||
                    this.FemaleBoardMembers.Equals(input.FemaleBoardMembers)
                ) && 
                (
                    this.NumberOfMembers == input.NumberOfMembers ||
                    this.NumberOfMembers.Equals(input.NumberOfMembers)
                ) && 
                (
                    this.OnOtherBoardsAll == input.OnOtherBoardsAll ||
                    this.OnOtherBoardsAll.Equals(input.OnOtherBoardsAll)
                ) && 
                (
                    this.OnOtherBoardsCorporate == input.OnOtherBoardsCorporate ||
                    this.OnOtherBoardsCorporate.Equals(input.OnOtherBoardsCorporate)
                ) && 
                (
                    this.MbType == input.MbType ||
                    (this.MbType != null &&
                    this.MbType.Equals(input.MbType))
                ) && 
                (
                    this.RequestId == input.RequestId ||
                    (this.RequestId != null &&
                    this.RequestId.Equals(input.RequestId))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = hashCode * 59 + this.AverageMgmtCompensation.GetHashCode();
                hashCode = hashCode * 59 + this.AverageTenure.GetHashCode();
                hashCode = hashCode * 59 + this.MedianTenure.GetHashCode();
                hashCode = hashCode * 59 + this.AverageAge.GetHashCode();
                hashCode = hashCode * 59 + this.MaxAge.GetHashCode();
                hashCode = hashCode * 59 + this.MinimumAge.GetHashCode();
                hashCode = hashCode * 59 + this.MedianAge.GetHashCode();
                hashCode = hashCode * 59 + this.BoardIndependentDirectors.GetHashCode();
                hashCode = hashCode * 59 + this.FemaleBoardMembers.GetHashCode();
                hashCode = hashCode * 59 + this.NumberOfMembers.GetHashCode();
                hashCode = hashCode * 59 + this.OnOtherBoardsAll.GetHashCode();
                hashCode = hashCode * 59 + this.OnOtherBoardsCorporate.GetHashCode();
                if (this.MbType != null)
                    hashCode = hashCode * 59 + this.MbType.GetHashCode();
                if (this.RequestId != null)
                    hashCode = hashCode * 59 + this.RequestId.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
