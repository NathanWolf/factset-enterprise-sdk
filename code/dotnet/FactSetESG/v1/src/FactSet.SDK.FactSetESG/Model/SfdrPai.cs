/*
 * FactSet ESG API
 *
 * FactSet ESG (powered by FactSet Truvalue Labs) applies machine learning to uncover risks and opportunities from companies' Environmental, Social and Governance (ESG) behavior, which are aggregated and categorized into continuously updated, material ESG scores. The service focuses on company ESG behavior from external sources and includes both positive and negative events that go beyond traditional sources of ESG risk data.<p> FactSet ESG extracts, analyzes, and generates scores from millions of documents each month collected from more than 100,000 data sources in over 30 languages. Sources include news, trade journals, NGOs, watchdog groups, trade blogs, industry reports and social media. Products deliver investable insights by revealing value and risk factors from unstructured data at the speed of current events.</p> 
 *
 * The version of the OpenAPI document: 1.6.0
 * Contact: api@factset.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = FactSet.SDK.FactSetESG.Client.OpenAPIDateConverter;

namespace FactSet.SDK.FactSetESG.Model
{
    /// <summary>
    /// SfdrPai
    /// </summary>
    [DataContract(Name = "sfdrPai")]
    public partial class SfdrPai : IEquatable<SfdrPai>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SfdrPai" /> class.
        /// </summary>
        /// <param name="fsymId">FactSet Entity Identifier. Six alpha-numeric characters, excluding vowels, with a -E suffix (XXXXXX-E)..</param>
        /// <param name="requestId">Identifier that was used for the request..</param>
        /// <param name="subTopicCode">Codes for the General, Mandatory and Additional PAI indicators.</param>
        /// <param name="subTopicName">Names for the General, Mandatory and Additional PAI indicators.</param>
        /// <param name="indicatorType">The type of indicator - General, Additional &amp; Mandatory.</param>
        /// <param name="periodEndDate">The Reporting period end date expressed in YYYY-MM-DD format.</param>
        /// <param name="reportingPeriod">The reporting period of the company expressed in YYYY format.</param>
        /// <param name="standardizedUnit">The units of measurements for the indicators.</param>
        /// <param name="standardizedValue">The PAI calculations based on the company-reported data, some metrics sourced from Factset Databases and Truvalue SASB Spotlights.</param>
        public SfdrPai(string fsymId = default(string), string requestId = default(string), string subTopicCode = default(string), string subTopicName = default(string), string indicatorType = default(string), DateTime? periodEndDate = default(DateTime?), string reportingPeriod = default(string), string standardizedUnit = default(string), string standardizedValue = default(string))
        {
            this.FsymId = fsymId;
            this.RequestId = requestId;
            this.SubTopicCode = subTopicCode;
            this.SubTopicName = subTopicName;
            this.IndicatorType = indicatorType;
            this.PeriodEndDate = periodEndDate;
            this.ReportingPeriod = reportingPeriod;
            this.StandardizedUnit = standardizedUnit;
            this.StandardizedValue = standardizedValue;
        }

        /// <summary>
        /// FactSet Entity Identifier. Six alpha-numeric characters, excluding vowels, with a -E suffix (XXXXXX-E).
        /// </summary>
        /// <value>FactSet Entity Identifier. Six alpha-numeric characters, excluding vowels, with a -E suffix (XXXXXX-E).</value>
        [DataMember(Name = "fsymId", EmitDefaultValue = true)]
        public string FsymId { get; set; }

        /// <summary>
        /// Identifier that was used for the request.
        /// </summary>
        /// <value>Identifier that was used for the request.</value>
        [DataMember(Name = "requestId", EmitDefaultValue = false)]
        public string RequestId { get; set; }

        /// <summary>
        /// Codes for the General, Mandatory and Additional PAI indicators
        /// </summary>
        /// <value>Codes for the General, Mandatory and Additional PAI indicators</value>
        [DataMember(Name = "subTopicCode", EmitDefaultValue = true)]
        public string SubTopicCode { get; set; }

        /// <summary>
        /// Names for the General, Mandatory and Additional PAI indicators
        /// </summary>
        /// <value>Names for the General, Mandatory and Additional PAI indicators</value>
        [DataMember(Name = "subTopicName", EmitDefaultValue = true)]
        public string SubTopicName { get; set; }

        /// <summary>
        /// The type of indicator - General, Additional &amp; Mandatory
        /// </summary>
        /// <value>The type of indicator - General, Additional &amp; Mandatory</value>
        [DataMember(Name = "indicatorType", EmitDefaultValue = true)]
        public string IndicatorType { get; set; }

        /// <summary>
        /// The Reporting period end date expressed in YYYY-MM-DD format
        /// </summary>
        /// <value>The Reporting period end date expressed in YYYY-MM-DD format</value>
        [DataMember(Name = "periodEndDate", EmitDefaultValue = true)]
        [JsonConverter(typeof(OpenAPIDateConverter))]
        public DateTime? PeriodEndDate { get; set; }

        /// <summary>
        /// The reporting period of the company expressed in YYYY format
        /// </summary>
        /// <value>The reporting period of the company expressed in YYYY format</value>
        [DataMember(Name = "reportingPeriod", EmitDefaultValue = true)]
        public string ReportingPeriod { get; set; }

        /// <summary>
        /// The units of measurements for the indicators
        /// </summary>
        /// <value>The units of measurements for the indicators</value>
        [DataMember(Name = "standardizedUnit", EmitDefaultValue = true)]
        public string StandardizedUnit { get; set; }

        /// <summary>
        /// The PAI calculations based on the company-reported data, some metrics sourced from Factset Databases and Truvalue SASB Spotlights
        /// </summary>
        /// <value>The PAI calculations based on the company-reported data, some metrics sourced from Factset Databases and Truvalue SASB Spotlights</value>
        [DataMember(Name = "standardizedValue", EmitDefaultValue = true)]
        public string StandardizedValue { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SfdrPai {\n");
            sb.Append("  FsymId: ").Append(FsymId).Append("\n");
            sb.Append("  RequestId: ").Append(RequestId).Append("\n");
            sb.Append("  SubTopicCode: ").Append(SubTopicCode).Append("\n");
            sb.Append("  SubTopicName: ").Append(SubTopicName).Append("\n");
            sb.Append("  IndicatorType: ").Append(IndicatorType).Append("\n");
            sb.Append("  PeriodEndDate: ").Append(PeriodEndDate).Append("\n");
            sb.Append("  ReportingPeriod: ").Append(ReportingPeriod).Append("\n");
            sb.Append("  StandardizedUnit: ").Append(StandardizedUnit).Append("\n");
            sb.Append("  StandardizedValue: ").Append(StandardizedValue).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SfdrPai);
        }

        /// <summary>
        /// Returns true if SfdrPai instances are equal
        /// </summary>
        /// <param name="input">Instance of SfdrPai to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SfdrPai input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.FsymId == input.FsymId ||
                    (this.FsymId != null &&
                    this.FsymId.Equals(input.FsymId))
                ) && 
                (
                    this.RequestId == input.RequestId ||
                    (this.RequestId != null &&
                    this.RequestId.Equals(input.RequestId))
                ) && 
                (
                    this.SubTopicCode == input.SubTopicCode ||
                    (this.SubTopicCode != null &&
                    this.SubTopicCode.Equals(input.SubTopicCode))
                ) && 
                (
                    this.SubTopicName == input.SubTopicName ||
                    (this.SubTopicName != null &&
                    this.SubTopicName.Equals(input.SubTopicName))
                ) && 
                (
                    this.IndicatorType == input.IndicatorType ||
                    (this.IndicatorType != null &&
                    this.IndicatorType.Equals(input.IndicatorType))
                ) && 
                (
                    this.PeriodEndDate == input.PeriodEndDate ||
                    (this.PeriodEndDate != null &&
                    this.PeriodEndDate.Equals(input.PeriodEndDate))
                ) && 
                (
                    this.ReportingPeriod == input.ReportingPeriod ||
                    (this.ReportingPeriod != null &&
                    this.ReportingPeriod.Equals(input.ReportingPeriod))
                ) && 
                (
                    this.StandardizedUnit == input.StandardizedUnit ||
                    (this.StandardizedUnit != null &&
                    this.StandardizedUnit.Equals(input.StandardizedUnit))
                ) && 
                (
                    this.StandardizedValue == input.StandardizedValue ||
                    (this.StandardizedValue != null &&
                    this.StandardizedValue.Equals(input.StandardizedValue))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.FsymId != null)
                {
                    hashCode = (hashCode * 59) + this.FsymId.GetHashCode();
                }
                if (this.RequestId != null)
                {
                    hashCode = (hashCode * 59) + this.RequestId.GetHashCode();
                }
                if (this.SubTopicCode != null)
                {
                    hashCode = (hashCode * 59) + this.SubTopicCode.GetHashCode();
                }
                if (this.SubTopicName != null)
                {
                    hashCode = (hashCode * 59) + this.SubTopicName.GetHashCode();
                }
                if (this.IndicatorType != null)
                {
                    hashCode = (hashCode * 59) + this.IndicatorType.GetHashCode();
                }
                if (this.PeriodEndDate != null)
                {
                    hashCode = (hashCode * 59) + this.PeriodEndDate.GetHashCode();
                }
                if (this.ReportingPeriod != null)
                {
                    hashCode = (hashCode * 59) + this.ReportingPeriod.GetHashCode();
                }
                if (this.StandardizedUnit != null)
                {
                    hashCode = (hashCode * 59) + this.StandardizedUnit.GetHashCode();
                }
                if (this.StandardizedValue != null)
                {
                    hashCode = (hashCode * 59) + this.StandardizedValue.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
