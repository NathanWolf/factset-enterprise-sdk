/*
 * SDF Download API
 *
 * The Standard DataFeed (SDF) Download API provides an alternative method for users to request and retrieve SDF packages (schemas & bundles). This service is not a direct replacement and does not have 100% feature parity with the Loader Application. This API provides an alternative for users who are unable to utilize the Loader application due to following reasons:   - Inability to install 3rd party executables due to Corporate Security policies     - Inability to utilize the Loader application due to limitations or restrictions with the environment used to consume Standard Datafeed   - Clients who are utilizing existing delivery method like FTP, who may want to use a more secured & modern solution     This API allows users to retrieve maximum of latest 30 days of data     Additional parameters are available to filter requests to get the exact files users are looking for.    QFL data is delivered through Content API & Bulk Data API (SDF API)  - Content API : Provides direct access to FactSet-hosted QFL data.  Suitable for interactive, ad hoc QFL requests.  Constraints on large extracts.  Costs are based on consumption, i.e. more calls can result in more costs.  - Bulk Data API : Provides access to download locations of zip files for client download. Suitable for production processes within a client environment. Cost is based on the use case and fixed unless scope changes (same as other SDFs).
 *
 * The version of the OpenAPI document: 1.2.0
 * Contact: teammustang@factset.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = FactSet.SDK.StandardDatafeed.Client.OpenAPIDateConverter;

namespace FactSet.SDK.StandardDatafeed.Model
{
    /// <summary>
    /// Array of data objects
    /// </summary>
    [DataContract(Name = "dataresponseitems")]
    public partial class Dataresponseitems : IEquatable<Dataresponseitems>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Dataresponseitems" /> class.
        /// </summary>
        /// <param name="type">file type, full or delta.</param>
        /// <param name="bundle">bundle name  QFL:- For QFL its Factor Group name.</param>
        /// <param name="schema">schema name  QFL:- In case of QFL its always qfl_v1.</param>
        /// <param name="sequence">full or delta file sequence.</param>
        /// <param name="relatedBundles">bundles related to the sequence number.</param>
        /// <param name="timestamp">time stamp of when the bundle was generated.</param>
        /// <param name="url">pre-signed downloadable url, containing the bundle information.</param>
        /// <param name="fileSize">file size of the particular bundle.</param>
        public Dataresponseitems(string type = default(string), string bundle = default(string), string schema = default(string), string sequence = default(string), List<DataresponseitemsRelatedBundles> relatedBundles = default(List<DataresponseitemsRelatedBundles>), string timestamp = default(string), string url = default(string), string fileSize = default(string))
        {
            this.Type = type;
            this.Bundle = bundle;
            this.Schema = schema;
            this.Sequence = sequence;
            this.RelatedBundles = relatedBundles;
            this.Timestamp = timestamp;
            this.Url = url;
            this.FileSize = fileSize;
        }

        /// <summary>
        /// file type, full or delta
        /// </summary>
        /// <value>file type, full or delta</value>
        [DataMember(Name = "type", EmitDefaultValue = false)]
        public string Type { get; set; }

        /// <summary>
        /// bundle name  QFL:- For QFL its Factor Group name
        /// </summary>
        /// <value>bundle name  QFL:- For QFL its Factor Group name</value>
        [DataMember(Name = "bundle", EmitDefaultValue = false)]
        public string Bundle { get; set; }

        /// <summary>
        /// schema name  QFL:- In case of QFL its always qfl_v1
        /// </summary>
        /// <value>schema name  QFL:- In case of QFL its always qfl_v1</value>
        [DataMember(Name = "schema", EmitDefaultValue = false)]
        public string Schema { get; set; }

        /// <summary>
        /// full or delta file sequence
        /// </summary>
        /// <value>full or delta file sequence</value>
        [DataMember(Name = "sequence", EmitDefaultValue = false)]
        public string Sequence { get; set; }

        /// <summary>
        /// bundles related to the sequence number
        /// </summary>
        /// <value>bundles related to the sequence number</value>
        [DataMember(Name = "related_bundles", EmitDefaultValue = false)]
        public List<DataresponseitemsRelatedBundles> RelatedBundles { get; set; }

        /// <summary>
        /// time stamp of when the bundle was generated
        /// </summary>
        /// <value>time stamp of when the bundle was generated</value>
        [DataMember(Name = "timestamp", EmitDefaultValue = false)]
        public string Timestamp { get; set; }

        /// <summary>
        /// pre-signed downloadable url, containing the bundle information
        /// </summary>
        /// <value>pre-signed downloadable url, containing the bundle information</value>
        [DataMember(Name = "url", EmitDefaultValue = false)]
        public string Url { get; set; }

        /// <summary>
        /// file size of the particular bundle
        /// </summary>
        /// <value>file size of the particular bundle</value>
        [DataMember(Name = "fileSize", EmitDefaultValue = false)]
        public string FileSize { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Dataresponseitems {\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Bundle: ").Append(Bundle).Append("\n");
            sb.Append("  Schema: ").Append(Schema).Append("\n");
            sb.Append("  Sequence: ").Append(Sequence).Append("\n");
            sb.Append("  RelatedBundles: ").Append(RelatedBundles).Append("\n");
            sb.Append("  Timestamp: ").Append(Timestamp).Append("\n");
            sb.Append("  Url: ").Append(Url).Append("\n");
            sb.Append("  FileSize: ").Append(FileSize).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Dataresponseitems);
        }

        /// <summary>
        /// Returns true if Dataresponseitems instances are equal
        /// </summary>
        /// <param name="input">Instance of Dataresponseitems to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Dataresponseitems input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.Bundle == input.Bundle ||
                    (this.Bundle != null &&
                    this.Bundle.Equals(input.Bundle))
                ) && 
                (
                    this.Schema == input.Schema ||
                    (this.Schema != null &&
                    this.Schema.Equals(input.Schema))
                ) && 
                (
                    this.Sequence == input.Sequence ||
                    (this.Sequence != null &&
                    this.Sequence.Equals(input.Sequence))
                ) && 
                (
                    this.RelatedBundles == input.RelatedBundles ||
                    this.RelatedBundles != null &&
                    input.RelatedBundles != null &&
                    this.RelatedBundles.SequenceEqual(input.RelatedBundles)
                ) && 
                (
                    this.Timestamp == input.Timestamp ||
                    (this.Timestamp != null &&
                    this.Timestamp.Equals(input.Timestamp))
                ) && 
                (
                    this.Url == input.Url ||
                    (this.Url != null &&
                    this.Url.Equals(input.Url))
                ) && 
                (
                    this.FileSize == input.FileSize ||
                    (this.FileSize != null &&
                    this.FileSize.Equals(input.FileSize))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Type != null)
                {
                    hashCode = (hashCode * 59) + this.Type.GetHashCode();
                }
                if (this.Bundle != null)
                {
                    hashCode = (hashCode * 59) + this.Bundle.GetHashCode();
                }
                if (this.Schema != null)
                {
                    hashCode = (hashCode * 59) + this.Schema.GetHashCode();
                }
                if (this.Sequence != null)
                {
                    hashCode = (hashCode * 59) + this.Sequence.GetHashCode();
                }
                if (this.RelatedBundles != null)
                {
                    hashCode = (hashCode * 59) + this.RelatedBundles.GetHashCode();
                }
                if (this.Timestamp != null)
                {
                    hashCode = (hashCode * 59) + this.Timestamp.GetHashCode();
                }
                if (this.Url != null)
                {
                    hashCode = (hashCode * 59) + this.Url.GetHashCode();
                }
                if (this.FileSize != null)
                {
                    hashCode = (hashCode * 59) + this.FileSize.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
