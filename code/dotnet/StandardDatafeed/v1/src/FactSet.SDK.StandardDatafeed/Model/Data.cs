/*
 * SDF_API
 *
 * The Standard Datafeed (SDF) API provides an alternative method for users to request and retrieve SDF packages (schemas & bundles). This service is not a direct replacement and does not have 100% feature parity with the Loader. This API provides an alternative for users who are unable to utilize the Loader due to:  Unable to install 3rd party executables due to Corporate Security policies Unable to utilize the Loader due to limitations or restrictions with the environment used to consume Standard Datafeed Clients who are utilizing existing delivery method like FTP, who may want to use a more secured & modern solution This API allows users to retrieve SDF packages they have subscriptions for, going back to August 31, 2021. Additional parameters are available to filter requests to get the exact files users are looking for. 
 *
 * The version of the OpenAPI document: 1.0
 * Contact: teammustang@factset.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = FactSet.SDK.StandardDatafeed.Client.OpenAPIDateConverter;

namespace FactSet.SDK.StandardDatafeed.Model
{
    /// <summary>
    /// Array of data objects
    /// </summary>
    [DataContract(Name = "data")]
    public partial class Data : IEquatable<Data>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Data" /> class.
        /// </summary>
        /// <param name="type">file type, full or delta.</param>
        /// <param name="bundle">bundle name.</param>
        /// <param name="schema">schema name.</param>
        /// <param name="sequence">full or delta file sequence.</param>
        /// <param name="relatedBundles">bundles related to the sequence number.</param>
        /// <param name="timestamp">time stamp of when the bundle was generated.</param>
        /// <param name="url">pre-signed downloadable url.</param>
        /// <param name="fileSize">file size of the particular bundle.</param>
        public Data(string type = default(string), string bundle = default(string), string schema = default(string), int sequence = default(int), string relatedBundles = default(string), string timestamp = default(string), string url = default(string), string fileSize = default(string))
        {
            this.Type = type;
            this.Bundle = bundle;
            this.Schema = schema;
            this.Sequence = sequence;
            this.RelatedBundles = relatedBundles;
            this.Timestamp = timestamp;
            this.Url = url;
            this.FileSize = fileSize;
        }

        /// <summary>
        /// file type, full or delta
        /// </summary>
        /// <value>file type, full or delta</value>
        [DataMember(Name = "type", EmitDefaultValue = false)]
        public string Type { get; set; }

        /// <summary>
        /// bundle name
        /// </summary>
        /// <value>bundle name</value>
        [DataMember(Name = "bundle", EmitDefaultValue = false)]
        public string Bundle { get; set; }

        /// <summary>
        /// schema name
        /// </summary>
        /// <value>schema name</value>
        [DataMember(Name = "schema", EmitDefaultValue = false)]
        public string Schema { get; set; }

        /// <summary>
        /// full or delta file sequence
        /// </summary>
        /// <value>full or delta file sequence</value>
        [DataMember(Name = "sequence", EmitDefaultValue = false)]
        public int Sequence { get; set; }

        /// <summary>
        /// bundles related to the sequence number
        /// </summary>
        /// <value>bundles related to the sequence number</value>
        [DataMember(Name = "related_bundles", EmitDefaultValue = false)]
        public string RelatedBundles { get; set; }

        /// <summary>
        /// time stamp of when the bundle was generated
        /// </summary>
        /// <value>time stamp of when the bundle was generated</value>
        [DataMember(Name = "timestamp", EmitDefaultValue = false)]
        public string Timestamp { get; set; }

        /// <summary>
        /// pre-signed downloadable url
        /// </summary>
        /// <value>pre-signed downloadable url</value>
        [DataMember(Name = "url", EmitDefaultValue = false)]
        public string Url { get; set; }

        /// <summary>
        /// file size of the particular bundle
        /// </summary>
        /// <value>file size of the particular bundle</value>
        [DataMember(Name = "fileSize", EmitDefaultValue = false)]
        public string FileSize { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Data {\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Bundle: ").Append(Bundle).Append("\n");
            sb.Append("  Schema: ").Append(Schema).Append("\n");
            sb.Append("  Sequence: ").Append(Sequence).Append("\n");
            sb.Append("  RelatedBundles: ").Append(RelatedBundles).Append("\n");
            sb.Append("  Timestamp: ").Append(Timestamp).Append("\n");
            sb.Append("  Url: ").Append(Url).Append("\n");
            sb.Append("  FileSize: ").Append(FileSize).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Data);
        }

        /// <summary>
        /// Returns true if Data instances are equal
        /// </summary>
        /// <param name="input">Instance of Data to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Data input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.Bundle == input.Bundle ||
                    (this.Bundle != null &&
                    this.Bundle.Equals(input.Bundle))
                ) && 
                (
                    this.Schema == input.Schema ||
                    (this.Schema != null &&
                    this.Schema.Equals(input.Schema))
                ) && 
                (
                    this.Sequence == input.Sequence ||
                    this.Sequence.Equals(input.Sequence)
                ) && 
                (
                    this.RelatedBundles == input.RelatedBundles ||
                    (this.RelatedBundles != null &&
                    this.RelatedBundles.Equals(input.RelatedBundles))
                ) && 
                (
                    this.Timestamp == input.Timestamp ||
                    (this.Timestamp != null &&
                    this.Timestamp.Equals(input.Timestamp))
                ) && 
                (
                    this.Url == input.Url ||
                    (this.Url != null &&
                    this.Url.Equals(input.Url))
                ) && 
                (
                    this.FileSize == input.FileSize ||
                    (this.FileSize != null &&
                    this.FileSize.Equals(input.FileSize))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Type != null)
                {
                    hashCode = (hashCode * 59) + this.Type.GetHashCode();
                }
                if (this.Bundle != null)
                {
                    hashCode = (hashCode * 59) + this.Bundle.GetHashCode();
                }
                if (this.Schema != null)
                {
                    hashCode = (hashCode * 59) + this.Schema.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Sequence.GetHashCode();
                if (this.RelatedBundles != null)
                {
                    hashCode = (hashCode * 59) + this.RelatedBundles.GetHashCode();
                }
                if (this.Timestamp != null)
                {
                    hashCode = (hashCode * 59) + this.Timestamp.GetHashCode();
                }
                if (this.Url != null)
                {
                    hashCode = (hashCode * 59) + this.Url.GetHashCode();
                }
                if (this.FileSize != null)
                {
                    hashCode = (hashCode * 59) + this.FileSize.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
