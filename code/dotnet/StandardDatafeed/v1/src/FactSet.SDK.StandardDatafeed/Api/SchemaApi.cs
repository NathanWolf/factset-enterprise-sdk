/*
 * SDF_API
 *
 * The Standard Datafeed (SDF) API provides an alternative method for users to request and retrieve SDF packages (schemas & bundles). This service is not a direct replacement and does not have 100% feature parity with the Loader. This API provides an alternative for users who are unable to utilize the Loader due to:  Unable to install 3rd party executables due to Corporate Security policies Unable to utilize the Loader due to limitations or restrictions with the environment used to consume Standard Datafeed Clients who are utilizing existing delivery method like FTP, who may want to use a more secured & modern solution This API allows users to retrieve SDF packages they have subscriptions for, going back to August 31, 2021. Additional parameters are available to filter requests to get the exact files users are looking for. 
 *
 * The version of the OpenAPI document: 1.0
 * Contact: teammustang@factset.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using FactSet.SDK.StandardDatafeed.Client;
using FactSet.SDK.StandardDatafeed.Model;
using FactSet.SDK.Utils.Authentication;

namespace FactSet.SDK.StandardDatafeed.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ISchemaApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// schemas
        /// </summary>
        /// <remarks>
        /// &lt;a href&#x3D;https://api.factset.com/bulk-documents/sdf/v1/list-schemas&gt;List-Schemas&lt;/a&gt; helper end point provides the list of schemas subscribed by the client  This API provides a downloadable file for the schema &amp; sequence number (version number of schema) specified
        /// </remarks>
        /// <exception cref="FactSet.SDK.StandardDatafeed.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="schema">schema name&lt;/p&gt; Default is all schemas &amp; bundles subscribed by the client&lt;/p&gt; **Example: acta_v1, fgp_v1, yn_v1** (optional)</param>
        /// <param name="sequence">Enter the sequence number associated with a schema&lt;/p&gt; Provides a pre-signed url to download the respective schema file&lt;/p&gt; \&quot;**Example: \&quot;8\&quot; from acta_v1: [8],** (optional)</param>
        /// <returns>ListSchema200Response</returns>
        ListSchema200Response GetV1ListSchemas(string schema = default(string), int? sequence = default(int?));

        /// <summary>
        /// schemas
        /// </summary>
        /// <remarks>
        /// &lt;a href&#x3D;https://api.factset.com/bulk-documents/sdf/v1/list-schemas&gt;List-Schemas&lt;/a&gt; helper end point provides the list of schemas subscribed by the client  This API provides a downloadable file for the schema &amp; sequence number (version number of schema) specified
        /// </remarks>
        /// <exception cref="FactSet.SDK.StandardDatafeed.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="schema">schema name&lt;/p&gt; Default is all schemas &amp; bundles subscribed by the client&lt;/p&gt; **Example: acta_v1, fgp_v1, yn_v1** (optional)</param>
        /// <param name="sequence">Enter the sequence number associated with a schema&lt;/p&gt; Provides a pre-signed url to download the respective schema file&lt;/p&gt; \&quot;**Example: \&quot;8\&quot; from acta_v1: [8],** (optional)</param>
        /// <returns>ApiResponse of ListSchema200Response</returns>
        ApiResponse<ListSchema200Response> GetV1ListSchemasWithHttpInfo(string schema = default(string), int? sequence = default(int?));
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ISchemaApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// schemas
        /// </summary>
        /// <remarks>
        /// &lt;a href&#x3D;https://api.factset.com/bulk-documents/sdf/v1/list-schemas&gt;List-Schemas&lt;/a&gt; helper end point provides the list of schemas subscribed by the client  This API provides a downloadable file for the schema &amp; sequence number (version number of schema) specified
        /// </remarks>
        /// <exception cref="FactSet.SDK.StandardDatafeed.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="schema">schema name&lt;/p&gt; Default is all schemas &amp; bundles subscribed by the client&lt;/p&gt; **Example: acta_v1, fgp_v1, yn_v1** (optional)</param>
        /// <param name="sequence">Enter the sequence number associated with a schema&lt;/p&gt; Provides a pre-signed url to download the respective schema file&lt;/p&gt; \&quot;**Example: \&quot;8\&quot; from acta_v1: [8],** (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ListSchema200Response</returns>
        System.Threading.Tasks.Task<ListSchema200Response> GetV1ListSchemasAsync(string schema = default(string), int? sequence = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// schemas
        /// </summary>
        /// <remarks>
        /// &lt;a href&#x3D;https://api.factset.com/bulk-documents/sdf/v1/list-schemas&gt;List-Schemas&lt;/a&gt; helper end point provides the list of schemas subscribed by the client  This API provides a downloadable file for the schema &amp; sequence number (version number of schema) specified
        /// </remarks>
        /// <exception cref="FactSet.SDK.StandardDatafeed.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="schema">schema name&lt;/p&gt; Default is all schemas &amp; bundles subscribed by the client&lt;/p&gt; **Example: acta_v1, fgp_v1, yn_v1** (optional)</param>
        /// <param name="sequence">Enter the sequence number associated with a schema&lt;/p&gt; Provides a pre-signed url to download the respective schema file&lt;/p&gt; \&quot;**Example: \&quot;8\&quot; from acta_v1: [8],** (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ListSchema200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<ListSchema200Response>> GetV1ListSchemasWithHttpInfoAsync(string schema = default(string), int? sequence = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ISchemaApi : ISchemaApiSync, ISchemaApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class SchemaApi : ISchemaApi
    {
        private FactSet.SDK.StandardDatafeed.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        # region Response Type Disctionaries
                private static readonly Dictionary<HttpStatusCode, System.Type> GetV1ListSchemasResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)200, typeof(ListSchema200Response) },
            { (HttpStatusCode)400, typeof(ListSchema400Response) },
        };

        # endregion Response Type Disctionaries

        # region Api Response Objects
         

        # endregion Api Response Objects

        /// <summary>
        /// Initializes a new instance of the <see cref="SchemaApi"/> class.
        /// </summary>
        /// <returns></returns>
        public SchemaApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SchemaApi"/> class.
        /// </summary>
        /// <returns></returns>
        public SchemaApi(string basePath)
        {
            this.Configuration = FactSet.SDK.StandardDatafeed.Client.Configuration.MergeConfigurations(
                FactSet.SDK.StandardDatafeed.Client.GlobalConfiguration.Instance,
                new FactSet.SDK.StandardDatafeed.Client.Configuration { BasePath = basePath }
            );
            this.Client = new FactSet.SDK.StandardDatafeed.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new FactSet.SDK.StandardDatafeed.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = FactSet.SDK.StandardDatafeed.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SchemaApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public SchemaApi(FactSet.SDK.StandardDatafeed.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = FactSet.SDK.StandardDatafeed.Client.Configuration.MergeConfigurations(
                FactSet.SDK.StandardDatafeed.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new FactSet.SDK.StandardDatafeed.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new FactSet.SDK.StandardDatafeed.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = FactSet.SDK.StandardDatafeed.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SchemaApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public SchemaApi(FactSet.SDK.StandardDatafeed.Client.ISynchronousClient client, FactSet.SDK.StandardDatafeed.Client.IAsynchronousClient asyncClient, FactSet.SDK.StandardDatafeed.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = FactSet.SDK.StandardDatafeed.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public FactSet.SDK.StandardDatafeed.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public FactSet.SDK.StandardDatafeed.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public FactSet.SDK.StandardDatafeed.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public FactSet.SDK.StandardDatafeed.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// schemas &lt;a href&#x3D;https://api.factset.com/bulk-documents/sdf/v1/list-schemas&gt;List-Schemas&lt;/a&gt; helper end point provides the list of schemas subscribed by the client  This API provides a downloadable file for the schema &amp; sequence number (version number of schema) specified
        /// </summary>
        /// <exception cref="FactSet.SDK.StandardDatafeed.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="schema">schema name&lt;/p&gt; Default is all schemas &amp; bundles subscribed by the client&lt;/p&gt; **Example: acta_v1, fgp_v1, yn_v1** (optional)</param>
        /// <param name="sequence">Enter the sequence number associated with a schema&lt;/p&gt; Provides a pre-signed url to download the respective schema file&lt;/p&gt; \&quot;**Example: \&quot;8\&quot; from acta_v1: [8],** (optional)</param>
        /// <returns>ListSchema200Response</returns>
        public ListSchema200Response GetV1ListSchemas(string schema = default(string), int? sequence = default(int?))
        {
            var localVarResponse = GetV1ListSchemasWithHttpInfo(schema, sequence);
            return localVarResponse.Data;
        }

        /// <summary>
        /// schemas &lt;a href&#x3D;https://api.factset.com/bulk-documents/sdf/v1/list-schemas&gt;List-Schemas&lt;/a&gt; helper end point provides the list of schemas subscribed by the client  This API provides a downloadable file for the schema &amp; sequence number (version number of schema) specified
        /// </summary>
        /// <exception cref="FactSet.SDK.StandardDatafeed.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="schema">schema name&lt;/p&gt; Default is all schemas &amp; bundles subscribed by the client&lt;/p&gt; **Example: acta_v1, fgp_v1, yn_v1** (optional)</param>
        /// <param name="sequence">Enter the sequence number associated with a schema&lt;/p&gt; Provides a pre-signed url to download the respective schema file&lt;/p&gt; \&quot;**Example: \&quot;8\&quot; from acta_v1: [8],** (optional)</param>
        /// <returns>ApiResponse of ListSchema200Response</returns>
        public ApiResponse<ListSchema200Response> GetV1ListSchemasWithHttpInfo(string schema = default(string), int? sequence = default(int?))
        {
            FactSet.SDK.StandardDatafeed.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.StandardDatafeed.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.StandardDatafeed.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.StandardDatafeed.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (schema != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.StandardDatafeed.Client.ClientUtils.ParameterToMultiMap("", "schema", schema));
            }
            if (sequence != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.StandardDatafeed.Client.ClientUtils.ParameterToMultiMap("", "sequence", sequence));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.StandardDatafeed.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = GetV1ListSchemasResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Get<
            ListSchema200Response>("/v1/list-schemas", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetV1ListSchemas", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// schemas &lt;a href&#x3D;https://api.factset.com/bulk-documents/sdf/v1/list-schemas&gt;List-Schemas&lt;/a&gt; helper end point provides the list of schemas subscribed by the client  This API provides a downloadable file for the schema &amp; sequence number (version number of schema) specified
        /// </summary>
        /// <exception cref="FactSet.SDK.StandardDatafeed.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="schema">schema name&lt;/p&gt; Default is all schemas &amp; bundles subscribed by the client&lt;/p&gt; **Example: acta_v1, fgp_v1, yn_v1** (optional)</param>
        /// <param name="sequence">Enter the sequence number associated with a schema&lt;/p&gt; Provides a pre-signed url to download the respective schema file&lt;/p&gt; \&quot;**Example: \&quot;8\&quot; from acta_v1: [8],** (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ListSchema200Response</returns>
        public async System.Threading.Tasks.Task<ListSchema200Response>GetV1ListSchemasAsync(string schema = default(string), int? sequence = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await GetV1ListSchemasWithHttpInfoAsync(schema, sequence, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// schemas &lt;a href&#x3D;https://api.factset.com/bulk-documents/sdf/v1/list-schemas&gt;List-Schemas&lt;/a&gt; helper end point provides the list of schemas subscribed by the client  This API provides a downloadable file for the schema &amp; sequence number (version number of schema) specified
        /// </summary>
        /// <exception cref="FactSet.SDK.StandardDatafeed.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="schema">schema name&lt;/p&gt; Default is all schemas &amp; bundles subscribed by the client&lt;/p&gt; **Example: acta_v1, fgp_v1, yn_v1** (optional)</param>
        /// <param name="sequence">Enter the sequence number associated with a schema&lt;/p&gt; Provides a pre-signed url to download the respective schema file&lt;/p&gt; \&quot;**Example: \&quot;8\&quot; from acta_v1: [8],** (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ListSchema200Response)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<ListSchema200Response>> GetV1ListSchemasWithHttpInfoAsync(string schema = default(string), int? sequence = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            FactSet.SDK.StandardDatafeed.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.StandardDatafeed.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.StandardDatafeed.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.StandardDatafeed.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (schema != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.StandardDatafeed.Client.ClientUtils.ParameterToMultiMap("", "schema", schema));
            }
            if (sequence != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.StandardDatafeed.Client.ClientUtils.ParameterToMultiMap("", "sequence", sequence));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.StandardDatafeed.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = GetV1ListSchemasResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ListSchema200Response>("/v1/list-schemas", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetV1ListSchemas", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
