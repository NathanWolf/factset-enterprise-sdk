/*
 * SDF Download API
 *
 * The Standard DataFeed (SDF) Download API provides an alternative method for users to request and retrieve SDF packages (schemas & bundles). This service is not a direct replacement and does not have 100% feature parity with the Loader Application. This API provides an alternative for users who are unable to utilize the Loader application due to following reasons:   - Inability to install 3rd party executables due to Corporate Security policies     - Inability to utilize the Loader application due to limitations or restrictions with the environment used to consume Standard Datafeed   - Clients who are utilizing existing delivery method like FTP, who may want to use a more secured & modern solution     This API allows users to retrieve  - SDF packages(excluding Quant Factor Library) they have subscriptions for, going back to August 31, 2021,  - QFL - Quant Factor Library (Factor Family & Factor Groups) packages they have subscriptions for, going back to January 01, 1995.    Additional parameters are available to filter requests to get the exact files users are looking for.    QFL data is delivered through Content API & Bulk Data API (SDF API)  - Content API : Provides direct access to FactSet-hosted QFL data.  Suitable for interactive, ad hoc QFL requests.  Constraints on large extracts.  Costs are based on consumption, i.e. more calls can result in more costs.  - Bulk Data API : Provides access to download locations of zip files for client download. Suitable for production processes within a client environment. Cost is based on the use case and fixed unless scope changes (same as other SDFs).
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: teammustang@factset.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using FactSet.SDK.StandardDatafeed.Client;
using FactSet.SDK.StandardDatafeed.Model;
using FactSet.SDK.Utils.Authentication;

namespace FactSet.SDK.StandardDatafeed.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ISDFAndQFLContentLibraryApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// &lt;a href&#x3D;https://api.factset.com/bulk-documents/sdf/v1/list-files&gt;List-Files&lt;/a&gt; end point provides the delta &amp; full files in a reverse chronological order by default for all the schemas &amp; bundles subscribed by the client    QFL:-    - In case of QFL, &lt;a href&#x3D;https://api.factset.com/bulk-documents/sdf/v1/list-files&gt;List-Files&lt;/a&gt; end point provides the \&quot;Historical &amp; Year to Date (YTD)\&quot; data in a reverse chronological order by default for all the factor families &amp; groups subscribed to by the user&lt;/p&gt; Provides \&quot;full files\&quot; only for historical bundles[data available from 1995 to previous year], \&quot;full &amp; delta files\&quot; for YTD bundles[data available for current year]        If startDate and endDate parameters are not specified in the request, this endpoint returns past 10 days data by default. 
        /// </remarks>
        /// <exception cref="FactSet.SDK.StandardDatafeed.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="schema">schema name&lt;/p&gt; &lt;/p&gt; **Example: acta_v1, fgp_v1, yn_v1**  QFL:- To query QFL data, please use value:   **qfl_v1**  (optional)</param>
        /// <param name="bundle">bundle name&lt;/p&gt; If this parameter is not passed in the request, all the bundles a client is subscribed to are returned.  QFL:- - For QFL its the factor group name - If this parameter is not passed in the request, all the the factor families &amp; factor groups subscribed to by the user are returned. - Supports comma separated list of multiple factor groups (optional)</param>
        /// <param name="type">file type &#x3D; Full or Delta&lt;/p&gt; Full files are weekly files generated every weekend (Saturday). **The date range should include weekend dates if requesting for \&quot;Full\&quot; files**  QFL:- In case of QFL we have - Historical files (1995 to previous year)- Always \&quot;Full\&quot; . A \&quot;Full\&quot; file is generated for each year - For YTD (Current year)- \&quot;Full\&quot; files are weekly files generated every weekend (Saturday). The date range should include weekend dates if requesting for \&quot;Full\&quot; files (optional)</param>
        /// <param name="startDate">The earliest date of the feed file the API should fetch for based on the fileTimestamp.&lt;/p&gt;   - If schema parameter is not specified in the request, then data requested should be in batches of 10days or less**(Date range should be less than or equal to 10)** - If the schema parameter is specified in the request, date range can be greater than 10 days - If startDate and endDate parameters are not specified in the request, this endpoint returns past 10 days data by default. - startDate can be absolute- YYYY-MM-DD or relative:-  -1 for yesterday  QFL:- In case of QFL - Historical files available from 1995-01-01 to 2021-12-31. YTD files are current year files. (optional)</param>
        /// <param name="endDate">The latest date of the feed file the API should fetch for based on the fileTimestamp  If startDate and endDate parameters are not specified in the request, this endpoint returns past 10 days data by default.  endDate can be in absolute- YYYY-MM-DD or relative date:- 0 for today (optional)</param>
        /// <param name="paginationLimit">Specifies the number of results to return per page. Default is 20 &amp; Maximum is 500 results per page (optional, default to 20)</param>
        /// <param name="paginationOffset">Specifies the starting point for pagination. This parameter is used to identify the beginning of next set of results (optional, default to 0)</param>
        /// <param name="sort">Enables to get the data in ascending or descending order based on startTime. Results are in reverse chronological order if this parameter is not used (optional)</param>
        /// <returns>ListFiles200Response</returns>
        ListFiles200Response GetV1ListFiles(string schema = default(string), string bundle = default(string), string type = default(string), string startDate = default(string), string endDate = default(string), int? paginationLimit = default(int?), int? paginationOffset = default(int?), string sort = default(string));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// &lt;a href&#x3D;https://api.factset.com/bulk-documents/sdf/v1/list-files&gt;List-Files&lt;/a&gt; end point provides the delta &amp; full files in a reverse chronological order by default for all the schemas &amp; bundles subscribed by the client    QFL:-    - In case of QFL, &lt;a href&#x3D;https://api.factset.com/bulk-documents/sdf/v1/list-files&gt;List-Files&lt;/a&gt; end point provides the \&quot;Historical &amp; Year to Date (YTD)\&quot; data in a reverse chronological order by default for all the factor families &amp; groups subscribed to by the user&lt;/p&gt; Provides \&quot;full files\&quot; only for historical bundles[data available from 1995 to previous year], \&quot;full &amp; delta files\&quot; for YTD bundles[data available for current year]        If startDate and endDate parameters are not specified in the request, this endpoint returns past 10 days data by default. 
        /// </remarks>
        /// <exception cref="FactSet.SDK.StandardDatafeed.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="schema">schema name&lt;/p&gt; &lt;/p&gt; **Example: acta_v1, fgp_v1, yn_v1**  QFL:- To query QFL data, please use value:   **qfl_v1**  (optional)</param>
        /// <param name="bundle">bundle name&lt;/p&gt; If this parameter is not passed in the request, all the bundles a client is subscribed to are returned.  QFL:- - For QFL its the factor group name - If this parameter is not passed in the request, all the the factor families &amp; factor groups subscribed to by the user are returned. - Supports comma separated list of multiple factor groups (optional)</param>
        /// <param name="type">file type &#x3D; Full or Delta&lt;/p&gt; Full files are weekly files generated every weekend (Saturday). **The date range should include weekend dates if requesting for \&quot;Full\&quot; files**  QFL:- In case of QFL we have - Historical files (1995 to previous year)- Always \&quot;Full\&quot; . A \&quot;Full\&quot; file is generated for each year - For YTD (Current year)- \&quot;Full\&quot; files are weekly files generated every weekend (Saturday). The date range should include weekend dates if requesting for \&quot;Full\&quot; files (optional)</param>
        /// <param name="startDate">The earliest date of the feed file the API should fetch for based on the fileTimestamp.&lt;/p&gt;   - If schema parameter is not specified in the request, then data requested should be in batches of 10days or less**(Date range should be less than or equal to 10)** - If the schema parameter is specified in the request, date range can be greater than 10 days - If startDate and endDate parameters are not specified in the request, this endpoint returns past 10 days data by default. - startDate can be absolute- YYYY-MM-DD or relative:-  -1 for yesterday  QFL:- In case of QFL - Historical files available from 1995-01-01 to 2021-12-31. YTD files are current year files. (optional)</param>
        /// <param name="endDate">The latest date of the feed file the API should fetch for based on the fileTimestamp  If startDate and endDate parameters are not specified in the request, this endpoint returns past 10 days data by default.  endDate can be in absolute- YYYY-MM-DD or relative date:- 0 for today (optional)</param>
        /// <param name="paginationLimit">Specifies the number of results to return per page. Default is 20 &amp; Maximum is 500 results per page (optional, default to 20)</param>
        /// <param name="paginationOffset">Specifies the starting point for pagination. This parameter is used to identify the beginning of next set of results (optional, default to 0)</param>
        /// <param name="sort">Enables to get the data in ascending or descending order based on startTime. Results are in reverse chronological order if this parameter is not used (optional)</param>
        /// <returns>ApiResponse of ListFiles200Response</returns>
        ApiResponse<ListFiles200Response> GetV1ListFilesWithHttpInfo(string schema = default(string), string bundle = default(string), string type = default(string), string startDate = default(string), string endDate = default(string), int? paginationLimit = default(int?), int? paginationOffset = default(int?), string sort = default(string));
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ISDFAndQFLContentLibraryApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// &lt;a href&#x3D;https://api.factset.com/bulk-documents/sdf/v1/list-files&gt;List-Files&lt;/a&gt; end point provides the delta &amp; full files in a reverse chronological order by default for all the schemas &amp; bundles subscribed by the client    QFL:-    - In case of QFL, &lt;a href&#x3D;https://api.factset.com/bulk-documents/sdf/v1/list-files&gt;List-Files&lt;/a&gt; end point provides the \&quot;Historical &amp; Year to Date (YTD)\&quot; data in a reverse chronological order by default for all the factor families &amp; groups subscribed to by the user&lt;/p&gt; Provides \&quot;full files\&quot; only for historical bundles[data available from 1995 to previous year], \&quot;full &amp; delta files\&quot; for YTD bundles[data available for current year]        If startDate and endDate parameters are not specified in the request, this endpoint returns past 10 days data by default. 
        /// </remarks>
        /// <exception cref="FactSet.SDK.StandardDatafeed.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="schema">schema name&lt;/p&gt; &lt;/p&gt; **Example: acta_v1, fgp_v1, yn_v1**  QFL:- To query QFL data, please use value:   **qfl_v1**  (optional)</param>
        /// <param name="bundle">bundle name&lt;/p&gt; If this parameter is not passed in the request, all the bundles a client is subscribed to are returned.  QFL:- - For QFL its the factor group name - If this parameter is not passed in the request, all the the factor families &amp; factor groups subscribed to by the user are returned. - Supports comma separated list of multiple factor groups (optional)</param>
        /// <param name="type">file type &#x3D; Full or Delta&lt;/p&gt; Full files are weekly files generated every weekend (Saturday). **The date range should include weekend dates if requesting for \&quot;Full\&quot; files**  QFL:- In case of QFL we have - Historical files (1995 to previous year)- Always \&quot;Full\&quot; . A \&quot;Full\&quot; file is generated for each year - For YTD (Current year)- \&quot;Full\&quot; files are weekly files generated every weekend (Saturday). The date range should include weekend dates if requesting for \&quot;Full\&quot; files (optional)</param>
        /// <param name="startDate">The earliest date of the feed file the API should fetch for based on the fileTimestamp.&lt;/p&gt;   - If schema parameter is not specified in the request, then data requested should be in batches of 10days or less**(Date range should be less than or equal to 10)** - If the schema parameter is specified in the request, date range can be greater than 10 days - If startDate and endDate parameters are not specified in the request, this endpoint returns past 10 days data by default. - startDate can be absolute- YYYY-MM-DD or relative:-  -1 for yesterday  QFL:- In case of QFL - Historical files available from 1995-01-01 to 2021-12-31. YTD files are current year files. (optional)</param>
        /// <param name="endDate">The latest date of the feed file the API should fetch for based on the fileTimestamp  If startDate and endDate parameters are not specified in the request, this endpoint returns past 10 days data by default.  endDate can be in absolute- YYYY-MM-DD or relative date:- 0 for today (optional)</param>
        /// <param name="paginationLimit">Specifies the number of results to return per page. Default is 20 &amp; Maximum is 500 results per page (optional, default to 20)</param>
        /// <param name="paginationOffset">Specifies the starting point for pagination. This parameter is used to identify the beginning of next set of results (optional, default to 0)</param>
        /// <param name="sort">Enables to get the data in ascending or descending order based on startTime. Results are in reverse chronological order if this parameter is not used (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ListFiles200Response</returns>
        System.Threading.Tasks.Task<ListFiles200Response> GetV1ListFilesAsync(string schema = default(string), string bundle = default(string), string type = default(string), string startDate = default(string), string endDate = default(string), int? paginationLimit = default(int?), int? paginationOffset = default(int?), string sort = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// &lt;a href&#x3D;https://api.factset.com/bulk-documents/sdf/v1/list-files&gt;List-Files&lt;/a&gt; end point provides the delta &amp; full files in a reverse chronological order by default for all the schemas &amp; bundles subscribed by the client    QFL:-    - In case of QFL, &lt;a href&#x3D;https://api.factset.com/bulk-documents/sdf/v1/list-files&gt;List-Files&lt;/a&gt; end point provides the \&quot;Historical &amp; Year to Date (YTD)\&quot; data in a reverse chronological order by default for all the factor families &amp; groups subscribed to by the user&lt;/p&gt; Provides \&quot;full files\&quot; only for historical bundles[data available from 1995 to previous year], \&quot;full &amp; delta files\&quot; for YTD bundles[data available for current year]        If startDate and endDate parameters are not specified in the request, this endpoint returns past 10 days data by default. 
        /// </remarks>
        /// <exception cref="FactSet.SDK.StandardDatafeed.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="schema">schema name&lt;/p&gt; &lt;/p&gt; **Example: acta_v1, fgp_v1, yn_v1**  QFL:- To query QFL data, please use value:   **qfl_v1**  (optional)</param>
        /// <param name="bundle">bundle name&lt;/p&gt; If this parameter is not passed in the request, all the bundles a client is subscribed to are returned.  QFL:- - For QFL its the factor group name - If this parameter is not passed in the request, all the the factor families &amp; factor groups subscribed to by the user are returned. - Supports comma separated list of multiple factor groups (optional)</param>
        /// <param name="type">file type &#x3D; Full or Delta&lt;/p&gt; Full files are weekly files generated every weekend (Saturday). **The date range should include weekend dates if requesting for \&quot;Full\&quot; files**  QFL:- In case of QFL we have - Historical files (1995 to previous year)- Always \&quot;Full\&quot; . A \&quot;Full\&quot; file is generated for each year - For YTD (Current year)- \&quot;Full\&quot; files are weekly files generated every weekend (Saturday). The date range should include weekend dates if requesting for \&quot;Full\&quot; files (optional)</param>
        /// <param name="startDate">The earliest date of the feed file the API should fetch for based on the fileTimestamp.&lt;/p&gt;   - If schema parameter is not specified in the request, then data requested should be in batches of 10days or less**(Date range should be less than or equal to 10)** - If the schema parameter is specified in the request, date range can be greater than 10 days - If startDate and endDate parameters are not specified in the request, this endpoint returns past 10 days data by default. - startDate can be absolute- YYYY-MM-DD or relative:-  -1 for yesterday  QFL:- In case of QFL - Historical files available from 1995-01-01 to 2021-12-31. YTD files are current year files. (optional)</param>
        /// <param name="endDate">The latest date of the feed file the API should fetch for based on the fileTimestamp  If startDate and endDate parameters are not specified in the request, this endpoint returns past 10 days data by default.  endDate can be in absolute- YYYY-MM-DD or relative date:- 0 for today (optional)</param>
        /// <param name="paginationLimit">Specifies the number of results to return per page. Default is 20 &amp; Maximum is 500 results per page (optional, default to 20)</param>
        /// <param name="paginationOffset">Specifies the starting point for pagination. This parameter is used to identify the beginning of next set of results (optional, default to 0)</param>
        /// <param name="sort">Enables to get the data in ascending or descending order based on startTime. Results are in reverse chronological order if this parameter is not used (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ListFiles200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<ListFiles200Response>> GetV1ListFilesWithHttpInfoAsync(string schema = default(string), string bundle = default(string), string type = default(string), string startDate = default(string), string endDate = default(string), int? paginationLimit = default(int?), int? paginationOffset = default(int?), string sort = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ISDFAndQFLContentLibraryApi : ISDFAndQFLContentLibraryApiSync, ISDFAndQFLContentLibraryApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class SDFAndQFLContentLibraryApi : ISDFAndQFLContentLibraryApi
    {
        private FactSet.SDK.StandardDatafeed.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        # region Response Type Disctionaries
        
        private static readonly Dictionary<HttpStatusCode, System.Type> GetV1ListFilesResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)200, typeof(ListFiles200Response) },
            { (HttpStatusCode)400, typeof(ListFiles400Response) },
        };

        # endregion Response Type Disctionaries

        # region Api Response Objects
        

        # endregion Api Response Objects

        /// <summary>
        /// Initializes a new instance of the <see cref="SDFAndQFLContentLibraryApi"/> class.
        /// </summary>
        /// <returns></returns>
        public SDFAndQFLContentLibraryApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SDFAndQFLContentLibraryApi"/> class.
        /// </summary>
        /// <returns></returns>
        public SDFAndQFLContentLibraryApi(string basePath)
        {
            this.Configuration = FactSet.SDK.StandardDatafeed.Client.Configuration.MergeConfigurations(
                FactSet.SDK.StandardDatafeed.Client.GlobalConfiguration.Instance,
                new FactSet.SDK.StandardDatafeed.Client.Configuration { BasePath = basePath }
            );
            this.Client = new FactSet.SDK.StandardDatafeed.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new FactSet.SDK.StandardDatafeed.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = FactSet.SDK.StandardDatafeed.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SDFAndQFLContentLibraryApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public SDFAndQFLContentLibraryApi(FactSet.SDK.StandardDatafeed.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = FactSet.SDK.StandardDatafeed.Client.Configuration.MergeConfigurations(
                FactSet.SDK.StandardDatafeed.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new FactSet.SDK.StandardDatafeed.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new FactSet.SDK.StandardDatafeed.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = FactSet.SDK.StandardDatafeed.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SDFAndQFLContentLibraryApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public SDFAndQFLContentLibraryApi(FactSet.SDK.StandardDatafeed.Client.ISynchronousClient client, FactSet.SDK.StandardDatafeed.Client.IAsynchronousClient asyncClient, FactSet.SDK.StandardDatafeed.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = FactSet.SDK.StandardDatafeed.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public FactSet.SDK.StandardDatafeed.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public FactSet.SDK.StandardDatafeed.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public FactSet.SDK.StandardDatafeed.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public FactSet.SDK.StandardDatafeed.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        ///  &lt;a href&#x3D;https://api.factset.com/bulk-documents/sdf/v1/list-files&gt;List-Files&lt;/a&gt; end point provides the delta &amp; full files in a reverse chronological order by default for all the schemas &amp; bundles subscribed by the client    QFL:-    - In case of QFL, &lt;a href&#x3D;https://api.factset.com/bulk-documents/sdf/v1/list-files&gt;List-Files&lt;/a&gt; end point provides the \&quot;Historical &amp; Year to Date (YTD)\&quot; data in a reverse chronological order by default for all the factor families &amp; groups subscribed to by the user&lt;/p&gt; Provides \&quot;full files\&quot; only for historical bundles[data available from 1995 to previous year], \&quot;full &amp; delta files\&quot; for YTD bundles[data available for current year]        If startDate and endDate parameters are not specified in the request, this endpoint returns past 10 days data by default. 
        /// </summary>
        /// <exception cref="FactSet.SDK.StandardDatafeed.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="schema">schema name&lt;/p&gt; &lt;/p&gt; **Example: acta_v1, fgp_v1, yn_v1**  QFL:- To query QFL data, please use value:   **qfl_v1**  (optional)</param>
        /// <param name="bundle">bundle name&lt;/p&gt; If this parameter is not passed in the request, all the bundles a client is subscribed to are returned.  QFL:- - For QFL its the factor group name - If this parameter is not passed in the request, all the the factor families &amp; factor groups subscribed to by the user are returned. - Supports comma separated list of multiple factor groups (optional)</param>
        /// <param name="type">file type &#x3D; Full or Delta&lt;/p&gt; Full files are weekly files generated every weekend (Saturday). **The date range should include weekend dates if requesting for \&quot;Full\&quot; files**  QFL:- In case of QFL we have - Historical files (1995 to previous year)- Always \&quot;Full\&quot; . A \&quot;Full\&quot; file is generated for each year - For YTD (Current year)- \&quot;Full\&quot; files are weekly files generated every weekend (Saturday). The date range should include weekend dates if requesting for \&quot;Full\&quot; files (optional)</param>
        /// <param name="startDate">The earliest date of the feed file the API should fetch for based on the fileTimestamp.&lt;/p&gt;   - If schema parameter is not specified in the request, then data requested should be in batches of 10days or less**(Date range should be less than or equal to 10)** - If the schema parameter is specified in the request, date range can be greater than 10 days - If startDate and endDate parameters are not specified in the request, this endpoint returns past 10 days data by default. - startDate can be absolute- YYYY-MM-DD or relative:-  -1 for yesterday  QFL:- In case of QFL - Historical files available from 1995-01-01 to 2021-12-31. YTD files are current year files. (optional)</param>
        /// <param name="endDate">The latest date of the feed file the API should fetch for based on the fileTimestamp  If startDate and endDate parameters are not specified in the request, this endpoint returns past 10 days data by default.  endDate can be in absolute- YYYY-MM-DD or relative date:- 0 for today (optional)</param>
        /// <param name="paginationLimit">Specifies the number of results to return per page. Default is 20 &amp; Maximum is 500 results per page (optional, default to 20)</param>
        /// <param name="paginationOffset">Specifies the starting point for pagination. This parameter is used to identify the beginning of next set of results (optional, default to 0)</param>
        /// <param name="sort">Enables to get the data in ascending or descending order based on startTime. Results are in reverse chronological order if this parameter is not used (optional)</param>
        /// <returns>ListFiles200Response</returns>
        public ListFiles200Response GetV1ListFiles(string schema = default(string), string bundle = default(string), string type = default(string), string startDate = default(string), string endDate = default(string), int? paginationLimit = default(int?), int? paginationOffset = default(int?), string sort = default(string))
        {
            var localVarResponse = GetV1ListFilesWithHttpInfo(schema, bundle, type, startDate, endDate, paginationLimit, paginationOffset, sort);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  &lt;a href&#x3D;https://api.factset.com/bulk-documents/sdf/v1/list-files&gt;List-Files&lt;/a&gt; end point provides the delta &amp; full files in a reverse chronological order by default for all the schemas &amp; bundles subscribed by the client    QFL:-    - In case of QFL, &lt;a href&#x3D;https://api.factset.com/bulk-documents/sdf/v1/list-files&gt;List-Files&lt;/a&gt; end point provides the \&quot;Historical &amp; Year to Date (YTD)\&quot; data in a reverse chronological order by default for all the factor families &amp; groups subscribed to by the user&lt;/p&gt; Provides \&quot;full files\&quot; only for historical bundles[data available from 1995 to previous year], \&quot;full &amp; delta files\&quot; for YTD bundles[data available for current year]        If startDate and endDate parameters are not specified in the request, this endpoint returns past 10 days data by default. 
        /// </summary>
        /// <exception cref="FactSet.SDK.StandardDatafeed.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="schema">schema name&lt;/p&gt; &lt;/p&gt; **Example: acta_v1, fgp_v1, yn_v1**  QFL:- To query QFL data, please use value:   **qfl_v1**  (optional)</param>
        /// <param name="bundle">bundle name&lt;/p&gt; If this parameter is not passed in the request, all the bundles a client is subscribed to are returned.  QFL:- - For QFL its the factor group name - If this parameter is not passed in the request, all the the factor families &amp; factor groups subscribed to by the user are returned. - Supports comma separated list of multiple factor groups (optional)</param>
        /// <param name="type">file type &#x3D; Full or Delta&lt;/p&gt; Full files are weekly files generated every weekend (Saturday). **The date range should include weekend dates if requesting for \&quot;Full\&quot; files**  QFL:- In case of QFL we have - Historical files (1995 to previous year)- Always \&quot;Full\&quot; . A \&quot;Full\&quot; file is generated for each year - For YTD (Current year)- \&quot;Full\&quot; files are weekly files generated every weekend (Saturday). The date range should include weekend dates if requesting for \&quot;Full\&quot; files (optional)</param>
        /// <param name="startDate">The earliest date of the feed file the API should fetch for based on the fileTimestamp.&lt;/p&gt;   - If schema parameter is not specified in the request, then data requested should be in batches of 10days or less**(Date range should be less than or equal to 10)** - If the schema parameter is specified in the request, date range can be greater than 10 days - If startDate and endDate parameters are not specified in the request, this endpoint returns past 10 days data by default. - startDate can be absolute- YYYY-MM-DD or relative:-  -1 for yesterday  QFL:- In case of QFL - Historical files available from 1995-01-01 to 2021-12-31. YTD files are current year files. (optional)</param>
        /// <param name="endDate">The latest date of the feed file the API should fetch for based on the fileTimestamp  If startDate and endDate parameters are not specified in the request, this endpoint returns past 10 days data by default.  endDate can be in absolute- YYYY-MM-DD or relative date:- 0 for today (optional)</param>
        /// <param name="paginationLimit">Specifies the number of results to return per page. Default is 20 &amp; Maximum is 500 results per page (optional, default to 20)</param>
        /// <param name="paginationOffset">Specifies the starting point for pagination. This parameter is used to identify the beginning of next set of results (optional, default to 0)</param>
        /// <param name="sort">Enables to get the data in ascending or descending order based on startTime. Results are in reverse chronological order if this parameter is not used (optional)</param>
        /// <returns>ApiResponse of ListFiles200Response</returns>
        public ApiResponse<ListFiles200Response> GetV1ListFilesWithHttpInfo(string schema = default(string), string bundle = default(string), string type = default(string), string startDate = default(string), string endDate = default(string), int? paginationLimit = default(int?), int? paginationOffset = default(int?), string sort = default(string))
        {
            FactSet.SDK.StandardDatafeed.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.StandardDatafeed.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.StandardDatafeed.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.StandardDatafeed.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (schema != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.StandardDatafeed.Client.ClientUtils.ParameterToMultiMap("", "schema", schema));
            }
            if (bundle != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.StandardDatafeed.Client.ClientUtils.ParameterToMultiMap("", "bundle", bundle));
            }
            if (type != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.StandardDatafeed.Client.ClientUtils.ParameterToMultiMap("", "type", type));
            }
            if (startDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.StandardDatafeed.Client.ClientUtils.ParameterToMultiMap("", "startDate", startDate));
            }
            if (endDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.StandardDatafeed.Client.ClientUtils.ParameterToMultiMap("", "endDate", endDate));
            }
            if (paginationLimit != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.StandardDatafeed.Client.ClientUtils.ParameterToMultiMap("", "_paginationLimit", paginationLimit));
            }
            if (paginationOffset != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.StandardDatafeed.Client.ClientUtils.ParameterToMultiMap("", "_paginationOffset", paginationOffset));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.StandardDatafeed.Client.ClientUtils.ParameterToMultiMap("", "_sort", sort));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.StandardDatafeed.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = GetV1ListFilesResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Get<
            ListFiles200Response>("/list-files", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetV1ListFiles", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        ///  &lt;a href&#x3D;https://api.factset.com/bulk-documents/sdf/v1/list-files&gt;List-Files&lt;/a&gt; end point provides the delta &amp; full files in a reverse chronological order by default for all the schemas &amp; bundles subscribed by the client    QFL:-    - In case of QFL, &lt;a href&#x3D;https://api.factset.com/bulk-documents/sdf/v1/list-files&gt;List-Files&lt;/a&gt; end point provides the \&quot;Historical &amp; Year to Date (YTD)\&quot; data in a reverse chronological order by default for all the factor families &amp; groups subscribed to by the user&lt;/p&gt; Provides \&quot;full files\&quot; only for historical bundles[data available from 1995 to previous year], \&quot;full &amp; delta files\&quot; for YTD bundles[data available for current year]        If startDate and endDate parameters are not specified in the request, this endpoint returns past 10 days data by default. 
        /// </summary>
        /// <exception cref="FactSet.SDK.StandardDatafeed.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="schema">schema name&lt;/p&gt; &lt;/p&gt; **Example: acta_v1, fgp_v1, yn_v1**  QFL:- To query QFL data, please use value:   **qfl_v1**  (optional)</param>
        /// <param name="bundle">bundle name&lt;/p&gt; If this parameter is not passed in the request, all the bundles a client is subscribed to are returned.  QFL:- - For QFL its the factor group name - If this parameter is not passed in the request, all the the factor families &amp; factor groups subscribed to by the user are returned. - Supports comma separated list of multiple factor groups (optional)</param>
        /// <param name="type">file type &#x3D; Full or Delta&lt;/p&gt; Full files are weekly files generated every weekend (Saturday). **The date range should include weekend dates if requesting for \&quot;Full\&quot; files**  QFL:- In case of QFL we have - Historical files (1995 to previous year)- Always \&quot;Full\&quot; . A \&quot;Full\&quot; file is generated for each year - For YTD (Current year)- \&quot;Full\&quot; files are weekly files generated every weekend (Saturday). The date range should include weekend dates if requesting for \&quot;Full\&quot; files (optional)</param>
        /// <param name="startDate">The earliest date of the feed file the API should fetch for based on the fileTimestamp.&lt;/p&gt;   - If schema parameter is not specified in the request, then data requested should be in batches of 10days or less**(Date range should be less than or equal to 10)** - If the schema parameter is specified in the request, date range can be greater than 10 days - If startDate and endDate parameters are not specified in the request, this endpoint returns past 10 days data by default. - startDate can be absolute- YYYY-MM-DD or relative:-  -1 for yesterday  QFL:- In case of QFL - Historical files available from 1995-01-01 to 2021-12-31. YTD files are current year files. (optional)</param>
        /// <param name="endDate">The latest date of the feed file the API should fetch for based on the fileTimestamp  If startDate and endDate parameters are not specified in the request, this endpoint returns past 10 days data by default.  endDate can be in absolute- YYYY-MM-DD or relative date:- 0 for today (optional)</param>
        /// <param name="paginationLimit">Specifies the number of results to return per page. Default is 20 &amp; Maximum is 500 results per page (optional, default to 20)</param>
        /// <param name="paginationOffset">Specifies the starting point for pagination. This parameter is used to identify the beginning of next set of results (optional, default to 0)</param>
        /// <param name="sort">Enables to get the data in ascending or descending order based on startTime. Results are in reverse chronological order if this parameter is not used (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ListFiles200Response</returns>
        public async System.Threading.Tasks.Task<ListFiles200Response>GetV1ListFilesAsync(string schema = default(string), string bundle = default(string), string type = default(string), string startDate = default(string), string endDate = default(string), int? paginationLimit = default(int?), int? paginationOffset = default(int?), string sort = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await GetV1ListFilesWithHttpInfoAsync(schema, bundle, type, startDate, endDate, paginationLimit, paginationOffset, sort, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  &lt;a href&#x3D;https://api.factset.com/bulk-documents/sdf/v1/list-files&gt;List-Files&lt;/a&gt; end point provides the delta &amp; full files in a reverse chronological order by default for all the schemas &amp; bundles subscribed by the client    QFL:-    - In case of QFL, &lt;a href&#x3D;https://api.factset.com/bulk-documents/sdf/v1/list-files&gt;List-Files&lt;/a&gt; end point provides the \&quot;Historical &amp; Year to Date (YTD)\&quot; data in a reverse chronological order by default for all the factor families &amp; groups subscribed to by the user&lt;/p&gt; Provides \&quot;full files\&quot; only for historical bundles[data available from 1995 to previous year], \&quot;full &amp; delta files\&quot; for YTD bundles[data available for current year]        If startDate and endDate parameters are not specified in the request, this endpoint returns past 10 days data by default. 
        /// </summary>
        /// <exception cref="FactSet.SDK.StandardDatafeed.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="schema">schema name&lt;/p&gt; &lt;/p&gt; **Example: acta_v1, fgp_v1, yn_v1**  QFL:- To query QFL data, please use value:   **qfl_v1**  (optional)</param>
        /// <param name="bundle">bundle name&lt;/p&gt; If this parameter is not passed in the request, all the bundles a client is subscribed to are returned.  QFL:- - For QFL its the factor group name - If this parameter is not passed in the request, all the the factor families &amp; factor groups subscribed to by the user are returned. - Supports comma separated list of multiple factor groups (optional)</param>
        /// <param name="type">file type &#x3D; Full or Delta&lt;/p&gt; Full files are weekly files generated every weekend (Saturday). **The date range should include weekend dates if requesting for \&quot;Full\&quot; files**  QFL:- In case of QFL we have - Historical files (1995 to previous year)- Always \&quot;Full\&quot; . A \&quot;Full\&quot; file is generated for each year - For YTD (Current year)- \&quot;Full\&quot; files are weekly files generated every weekend (Saturday). The date range should include weekend dates if requesting for \&quot;Full\&quot; files (optional)</param>
        /// <param name="startDate">The earliest date of the feed file the API should fetch for based on the fileTimestamp.&lt;/p&gt;   - If schema parameter is not specified in the request, then data requested should be in batches of 10days or less**(Date range should be less than or equal to 10)** - If the schema parameter is specified in the request, date range can be greater than 10 days - If startDate and endDate parameters are not specified in the request, this endpoint returns past 10 days data by default. - startDate can be absolute- YYYY-MM-DD or relative:-  -1 for yesterday  QFL:- In case of QFL - Historical files available from 1995-01-01 to 2021-12-31. YTD files are current year files. (optional)</param>
        /// <param name="endDate">The latest date of the feed file the API should fetch for based on the fileTimestamp  If startDate and endDate parameters are not specified in the request, this endpoint returns past 10 days data by default.  endDate can be in absolute- YYYY-MM-DD or relative date:- 0 for today (optional)</param>
        /// <param name="paginationLimit">Specifies the number of results to return per page. Default is 20 &amp; Maximum is 500 results per page (optional, default to 20)</param>
        /// <param name="paginationOffset">Specifies the starting point for pagination. This parameter is used to identify the beginning of next set of results (optional, default to 0)</param>
        /// <param name="sort">Enables to get the data in ascending or descending order based on startTime. Results are in reverse chronological order if this parameter is not used (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ListFiles200Response)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<ListFiles200Response>> GetV1ListFilesWithHttpInfoAsync(string schema = default(string), string bundle = default(string), string type = default(string), string startDate = default(string), string endDate = default(string), int? paginationLimit = default(int?), int? paginationOffset = default(int?), string sort = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            FactSet.SDK.StandardDatafeed.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.StandardDatafeed.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.StandardDatafeed.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.StandardDatafeed.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (schema != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.StandardDatafeed.Client.ClientUtils.ParameterToMultiMap("", "schema", schema));
            }
            if (bundle != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.StandardDatafeed.Client.ClientUtils.ParameterToMultiMap("", "bundle", bundle));
            }
            if (type != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.StandardDatafeed.Client.ClientUtils.ParameterToMultiMap("", "type", type));
            }
            if (startDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.StandardDatafeed.Client.ClientUtils.ParameterToMultiMap("", "startDate", startDate));
            }
            if (endDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.StandardDatafeed.Client.ClientUtils.ParameterToMultiMap("", "endDate", endDate));
            }
            if (paginationLimit != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.StandardDatafeed.Client.ClientUtils.ParameterToMultiMap("", "_paginationLimit", paginationLimit));
            }
            if (paginationOffset != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.StandardDatafeed.Client.ClientUtils.ParameterToMultiMap("", "_paginationOffset", paginationOffset));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.StandardDatafeed.Client.ClientUtils.ParameterToMultiMap("", "_sort", sort));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.StandardDatafeed.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = GetV1ListFilesResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ListFiles200Response>("/list-files", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetV1ListFiles", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
