/*
 * Standard DataFeed (SDF) Download API
 *
 * [The Standard DataFeed (SDF) Download API](https://www.factset.com/marketplace/catalog/product/factset-standard-datafeed-download-api)  provides an alternative method for users to request and retrieve SDF packages (schemas & bundles).  This service is not a direct replacement and does not have 100% feature parity with the Loader Application.  This API provides an alternative for users who are unable to utilize the Loader application due to the following reasons:  * Inability to install 3rd party executables due to Corporate Security policies.  * Inability to utilize the Loader application due to limitations or restrictions with the environment used to consume Standard Datafeed.  * Clients who are utilizing existing delivery methods like FTP, who may want to use a more secure & modern solution.  This API allows users to retrieve  * Both SDF and the QFL (Quant Factor Library (Factor Family & Factor Groups)) packages they have subscriptions for, with data available since January 1, 1995.  Additional parameters are available to filter requests to get the exact files users are looking for.  QFL data is delivered through Content API & Bulk Data API (SDF API).  * Content API: Provides direct access to FactSet-hosted QFL data. Suitable for interactive, ad hoc QFL requests. Constraints on large extracts. Costs are based on consumption, i.e. more calls can result in more costs.  * Bulk Data API: Provides access to download locations of zip files for client download. Suitable for production processes within a client environment. Cost is based on the use case and fixed unless scope changes (same as other SDFs).  Please find all the content-related comprehensive documentation [here](https://my.apps.factset.com/oa/pages/15222). 
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: api@factset.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using FactSet.SDK.StandardDatafeed.Client;
using FactSet.SDK.StandardDatafeed.Model;
using FactSet.SDK.Utils.Authentication;

namespace FactSet.SDK.StandardDatafeed.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ISchemaApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// List of Standard DataFeed (SDF) schemas.
        /// </summary>
        /// <remarks>
        /// This helper endpoint provides the list of schemas subscribed by the client and their corresponding versions. 
        /// </remarks>
        /// <exception cref="FactSet.SDK.StandardDatafeed.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ListSchema</returns>
        ListSchema GetListSchemaswithoutwithooutRequiredParameters();

        /// <summary>
        /// List of Standard DataFeed (SDF) schemas.
        /// </summary>
        /// <remarks>
        /// This helper endpoint provides the list of schemas subscribed by the client and their corresponding versions. 
        /// </remarks>
        /// <exception cref="FactSet.SDK.StandardDatafeed.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of ListSchema</returns>
        ApiResponse<ListSchema> GetListSchemaswithoutwithooutRequiredParametersWithHttpInfo();
        /// <summary>
        /// Schema Details.
        /// </summary>
        /// <remarks>
        /// If the schema and version number are passed in the request, this endpoint provides a pre-signed URL pointing to the location from where the schema details can be downloaded. 
        /// </remarks>
        /// <exception cref="FactSet.SDK.StandardDatafeed.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="schema">Name of the schema.</param>
        /// <param name="version">Version number of the schema.</param>
        /// <returns>SchemaDetail</returns>
        SchemaDetail GetSchemaDetails(string schema, int version);

        /// <summary>
        /// Schema Details.
        /// </summary>
        /// <remarks>
        /// If the schema and version number are passed in the request, this endpoint provides a pre-signed URL pointing to the location from where the schema details can be downloaded. 
        /// </remarks>
        /// <exception cref="FactSet.SDK.StandardDatafeed.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="schema">Name of the schema.</param>
        /// <param name="version">Version number of the schema.</param>
        /// <returns>ApiResponse of SchemaDetail</returns>
        ApiResponse<SchemaDetail> GetSchemaDetailsWithHttpInfo(string schema, int version);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ISchemaApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// List of Standard DataFeed (SDF) schemas.
        /// </summary>
        /// <remarks>
        /// This helper endpoint provides the list of schemas subscribed by the client and their corresponding versions. 
        /// </remarks>
        /// <exception cref="FactSet.SDK.StandardDatafeed.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ListSchema</returns>
        System.Threading.Tasks.Task<ListSchema> GetListSchemaswithoutwithooutRequiredParametersAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// List of Standard DataFeed (SDF) schemas.
        /// </summary>
        /// <remarks>
        /// This helper endpoint provides the list of schemas subscribed by the client and their corresponding versions. 
        /// </remarks>
        /// <exception cref="FactSet.SDK.StandardDatafeed.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ListSchema)</returns>
        System.Threading.Tasks.Task<ApiResponse<ListSchema>> GetListSchemaswithoutwithooutRequiredParametersWithHttpInfoAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Schema Details.
        /// </summary>
        /// <remarks>
        /// If the schema and version number are passed in the request, this endpoint provides a pre-signed URL pointing to the location from where the schema details can be downloaded. 
        /// </remarks>
        /// <exception cref="FactSet.SDK.StandardDatafeed.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="schema">Name of the schema.</param>
        /// <param name="version">Version number of the schema.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SchemaDetail</returns>
        System.Threading.Tasks.Task<SchemaDetail> GetSchemaDetailsAsync(string schema, int version, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Schema Details.
        /// </summary>
        /// <remarks>
        /// If the schema and version number are passed in the request, this endpoint provides a pre-signed URL pointing to the location from where the schema details can be downloaded. 
        /// </remarks>
        /// <exception cref="FactSet.SDK.StandardDatafeed.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="schema">Name of the schema.</param>
        /// <param name="version">Version number of the schema.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SchemaDetail)</returns>
        System.Threading.Tasks.Task<ApiResponse<SchemaDetail>> GetSchemaDetailsWithHttpInfoAsync(string schema, int version, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ISchemaApi : ISchemaApiSync, ISchemaApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class SchemaApi : ISchemaApi
    {
        private FactSet.SDK.StandardDatafeed.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        # region Response Type Disctionaries
        
        private static readonly Dictionary<HttpStatusCode, System.Type> GetListSchemaswithoutwithooutRequiredParametersResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)200, typeof(ListSchema) },
            { (HttpStatusCode)400, typeof(ErrorResponse) },
            { (HttpStatusCode)401, typeof(ErrorResponse) },
            { (HttpStatusCode)403, typeof(ErrorResponse) },
            { (HttpStatusCode)429, typeof(ErrorResponse) },
            { (HttpStatusCode)500, typeof(ErrorResponse) },
        };

        private static readonly Dictionary<HttpStatusCode, System.Type> GetSchemaDetailsResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)200, typeof(SchemaDetail) },
            { (HttpStatusCode)400, typeof(ErrorResponse) },
            { (HttpStatusCode)401, typeof(ErrorResponse) },
            { (HttpStatusCode)403, typeof(ErrorResponse) },
            { (HttpStatusCode)429, typeof(ErrorResponse) },
            { (HttpStatusCode)500, typeof(ErrorResponse) },
        };

        # endregion Response Type Disctionaries

        # region Api Response Objects
        

        # endregion Api Response Objects

        /// <summary>
        /// Initializes a new instance of the <see cref="SchemaApi"/> class.
        /// </summary>
        /// <returns></returns>
        public SchemaApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SchemaApi"/> class.
        /// </summary>
        /// <returns></returns>
        public SchemaApi(string basePath)
        {
            this.Configuration = FactSet.SDK.StandardDatafeed.Client.Configuration.MergeConfigurations(
                FactSet.SDK.StandardDatafeed.Client.GlobalConfiguration.Instance,
                new FactSet.SDK.StandardDatafeed.Client.Configuration { BasePath = basePath }
            );
            this.Client = new FactSet.SDK.StandardDatafeed.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new FactSet.SDK.StandardDatafeed.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = FactSet.SDK.StandardDatafeed.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SchemaApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public SchemaApi(FactSet.SDK.StandardDatafeed.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = FactSet.SDK.StandardDatafeed.Client.Configuration.MergeConfigurations(
                FactSet.SDK.StandardDatafeed.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new FactSet.SDK.StandardDatafeed.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new FactSet.SDK.StandardDatafeed.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = FactSet.SDK.StandardDatafeed.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SchemaApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public SchemaApi(FactSet.SDK.StandardDatafeed.Client.ISynchronousClient client, FactSet.SDK.StandardDatafeed.Client.IAsynchronousClient asyncClient, FactSet.SDK.StandardDatafeed.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = FactSet.SDK.StandardDatafeed.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public FactSet.SDK.StandardDatafeed.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public FactSet.SDK.StandardDatafeed.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public FactSet.SDK.StandardDatafeed.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public FactSet.SDK.StandardDatafeed.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// List of Standard DataFeed (SDF) schemas. This helper endpoint provides the list of schemas subscribed by the client and their corresponding versions. 
        /// </summary>
        /// <exception cref="FactSet.SDK.StandardDatafeed.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ListSchema</returns>
        public ListSchema GetListSchemaswithoutwithooutRequiredParameters()
        {
            var localVarResponse = GetListSchemaswithoutwithooutRequiredParametersWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        /// List of Standard DataFeed (SDF) schemas. This helper endpoint provides the list of schemas subscribed by the client and their corresponding versions. 
        /// </summary>
        /// <exception cref="FactSet.SDK.StandardDatafeed.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of ListSchema</returns>
        public ApiResponse<ListSchema> GetListSchemaswithoutwithooutRequiredParametersWithHttpInfo()
        {
            FactSet.SDK.StandardDatafeed.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.StandardDatafeed.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.StandardDatafeed.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.StandardDatafeed.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.StandardDatafeed.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = GetListSchemaswithoutwithooutRequiredParametersResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Get<
            ListSchema>("/list-schemas", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetListSchemaswithoutwithooutRequiredParameters", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// List of Standard DataFeed (SDF) schemas. This helper endpoint provides the list of schemas subscribed by the client and their corresponding versions. 
        /// </summary>
        /// <exception cref="FactSet.SDK.StandardDatafeed.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ListSchema</returns>
        public async System.Threading.Tasks.Task<ListSchema>GetListSchemaswithoutwithooutRequiredParametersAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await GetListSchemaswithoutwithooutRequiredParametersWithHttpInfoAsync(cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List of Standard DataFeed (SDF) schemas. This helper endpoint provides the list of schemas subscribed by the client and their corresponding versions. 
        /// </summary>
        /// <exception cref="FactSet.SDK.StandardDatafeed.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ListSchema)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<ListSchema>> GetListSchemaswithoutwithooutRequiredParametersWithHttpInfoAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            FactSet.SDK.StandardDatafeed.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.StandardDatafeed.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.StandardDatafeed.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.StandardDatafeed.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.StandardDatafeed.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = GetListSchemaswithoutwithooutRequiredParametersResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ListSchema>("/list-schemas", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetListSchemaswithoutwithooutRequiredParameters", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Schema Details. If the schema and version number are passed in the request, this endpoint provides a pre-signed URL pointing to the location from where the schema details can be downloaded. 
        /// </summary>
        /// <exception cref="FactSet.SDK.StandardDatafeed.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="schema">Name of the schema.</param>
        /// <param name="version">Version number of the schema.</param>
        /// <returns>SchemaDetail</returns>
        public SchemaDetail GetSchemaDetails(string schema, int version)
        {
            var localVarResponse = GetSchemaDetailsWithHttpInfo(schema, version);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Schema Details. If the schema and version number are passed in the request, this endpoint provides a pre-signed URL pointing to the location from where the schema details can be downloaded. 
        /// </summary>
        /// <exception cref="FactSet.SDK.StandardDatafeed.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="schema">Name of the schema.</param>
        /// <param name="version">Version number of the schema.</param>
        /// <returns>ApiResponse of SchemaDetail</returns>
        public ApiResponse<SchemaDetail> GetSchemaDetailsWithHttpInfo(string schema, int version)
        {
            // verify the required parameter 'schema' is set
            if (schema == null)
            {
                throw new FactSet.SDK.StandardDatafeed.Client.ApiException(400, "Missing required parameter 'schema' when calling SchemaApi->GetSchemaDetails");
            }

            FactSet.SDK.StandardDatafeed.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.StandardDatafeed.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.StandardDatafeed.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.StandardDatafeed.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.StandardDatafeed.Client.ClientUtils.ParameterToMultiMap("", "schema", schema));
            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.StandardDatafeed.Client.ClientUtils.ParameterToMultiMap("", "version", version));

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.StandardDatafeed.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = GetSchemaDetailsResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Get<
            SchemaDetail>("/schema-details", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetSchemaDetails", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// Schema Details. If the schema and version number are passed in the request, this endpoint provides a pre-signed URL pointing to the location from where the schema details can be downloaded. 
        /// </summary>
        /// <exception cref="FactSet.SDK.StandardDatafeed.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="schema">Name of the schema.</param>
        /// <param name="version">Version number of the schema.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SchemaDetail</returns>
        public async System.Threading.Tasks.Task<SchemaDetail>GetSchemaDetailsAsync(string schema, int version, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await GetSchemaDetailsWithHttpInfoAsync(schema, version, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Schema Details. If the schema and version number are passed in the request, this endpoint provides a pre-signed URL pointing to the location from where the schema details can be downloaded. 
        /// </summary>
        /// <exception cref="FactSet.SDK.StandardDatafeed.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="schema">Name of the schema.</param>
        /// <param name="version">Version number of the schema.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SchemaDetail)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<SchemaDetail>> GetSchemaDetailsWithHttpInfoAsync(string schema, int version, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'schema' is set
            if (schema == null)
            {
                throw new FactSet.SDK.StandardDatafeed.Client.ApiException(400, "Missing required parameter 'schema' when calling SchemaApi->GetSchemaDetails");
            }


            FactSet.SDK.StandardDatafeed.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.StandardDatafeed.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.StandardDatafeed.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.StandardDatafeed.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.StandardDatafeed.Client.ClientUtils.ParameterToMultiMap("", "schema", schema));
            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.StandardDatafeed.Client.ClientUtils.ParameterToMultiMap("", "version", version));

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.StandardDatafeed.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = GetSchemaDetailsResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<SchemaDetail>("/schema-details", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetSchemaDetails", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
