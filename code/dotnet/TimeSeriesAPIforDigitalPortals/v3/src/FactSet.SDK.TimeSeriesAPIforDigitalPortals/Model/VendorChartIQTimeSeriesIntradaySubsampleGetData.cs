/*
 * Time Series API For Digital Portals
 *
 * Time series data, end-of-day or intraday, tick-by-tick or subsampled. Additional vendor-specific endpoints provide a modified interface for seamless integration with the ChartIQ chart library.
 *
 * The version of the OpenAPI document: 2
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = FactSet.SDK.TimeSeriesAPIforDigitalPortals.Client.OpenAPIDateConverter;

namespace FactSet.SDK.TimeSeriesAPIforDigitalPortals.Model
{
    /// <summary>
    /// The data member contains the request&#39;s primary data.
    /// </summary>
    [DataContract(Name = "_vendor_chartIQ_timeSeries_intraday_subsample_get_data")]
    public partial class VendorChartIQTimeSeriesIntradaySubsampleGetData : IEquatable<VendorChartIQTimeSeriesIntradaySubsampleGetData>, IValidatableObject
    {
        /// <summary>
        /// Type of the price as configured for the customer.
        /// </summary>
        /// <value>Type of the price as configured for the customer.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TypeEnum
        {
            /// <summary>
            /// Enum Trade for value: trade
            /// </summary>
            [EnumMember(Value = "trade")]
            Trade = 1,

            /// <summary>
            /// Enum Bid for value: bid
            /// </summary>
            [EnumMember(Value = "bid")]
            Bid = 2,

            /// <summary>
            /// Enum Ask for value: ask
            /// </summary>
            [EnumMember(Value = "ask")]
            Ask = 3,

            /// <summary>
            /// Enum Yield for value: yield
            /// </summary>
            [EnumMember(Value = "yield")]
            Yield = 4

        }


        /// <summary>
        /// Type of the price as configured for the customer.
        /// </summary>
        /// <value>Type of the price as configured for the customer.</value>
        [DataMember(Name = "type", EmitDefaultValue = false)]
        public TypeEnum? Type { get; set; }
        /// <summary>
        /// Quality of the price.
        /// </summary>
        /// <value>Quality of the price.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum QualityEnum
        {
            /// <summary>
            /// Enum RLT for value: RLT
            /// </summary>
            [EnumMember(Value = "RLT")]
            RLT = 1,

            /// <summary>
            /// Enum DLY for value: DLY
            /// </summary>
            [EnumMember(Value = "DLY")]
            DLY = 2,

            /// <summary>
            /// Enum BST for value: BST
            /// </summary>
            [EnumMember(Value = "BST")]
            BST = 3

        }


        /// <summary>
        /// Quality of the price.
        /// </summary>
        /// <value>Quality of the price.</value>
        [DataMember(Name = "quality", EmitDefaultValue = false)]
        public QualityEnum? Quality { get; set; }
        /// <summary>
        /// Subsample granularities suitable for intraday data.
        /// </summary>
        /// <value>Subsample granularities suitable for intraday data.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum GranularityEnum
        {
            /// <summary>
            /// Enum _1s for value: 1s
            /// </summary>
            [EnumMember(Value = "1s")]
            _1s = 1,

            /// <summary>
            /// Enum _5s for value: 5s
            /// </summary>
            [EnumMember(Value = "5s")]
            _5s = 2,

            /// <summary>
            /// Enum _10s for value: 10s
            /// </summary>
            [EnumMember(Value = "10s")]
            _10s = 3,

            /// <summary>
            /// Enum _30s for value: 30s
            /// </summary>
            [EnumMember(Value = "30s")]
            _30s = 4,

            /// <summary>
            /// Enum _1m for value: 1m
            /// </summary>
            [EnumMember(Value = "1m")]
            _1m = 5,

            /// <summary>
            /// Enum _5m for value: 5m
            /// </summary>
            [EnumMember(Value = "5m")]
            _5m = 6,

            /// <summary>
            /// Enum _10m for value: 10m
            /// </summary>
            [EnumMember(Value = "10m")]
            _10m = 7,

            /// <summary>
            /// Enum _15m for value: 15m
            /// </summary>
            [EnumMember(Value = "15m")]
            _15m = 8,

            /// <summary>
            /// Enum _30m for value: 30m
            /// </summary>
            [EnumMember(Value = "30m")]
            _30m = 9,

            /// <summary>
            /// Enum _1h for value: 1h
            /// </summary>
            [EnumMember(Value = "1h")]
            _1h = 10

        }


        /// <summary>
        /// Subsample granularities suitable for intraday data.
        /// </summary>
        /// <value>Subsample granularities suitable for intraday data.</value>
        [DataMember(Name = "granularity", EmitDefaultValue = false)]
        public GranularityEnum? Granularity { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="VendorChartIQTimeSeriesIntradaySubsampleGetData" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected VendorChartIQTimeSeriesIntradaySubsampleGetData() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="VendorChartIQTimeSeriesIntradaySubsampleGetData" /> class.
        /// </summary>
        /// <param name="id">Identifier of the notation. (required).</param>
        /// <param name="type">Type of the price as configured for the customer. (default to TypeEnum.Trade).</param>
        /// <param name="quality">Quality of the price. (default to QualityEnum.DLY).</param>
        /// <param name="from">Date and time of the start point of the subsample (inclusive). &#x60;from&#x60; must be aligned to &#x60;granularity&#x60;. That is, the numerical value is an integral multiple of the time span value represented by &#x60;granularity&#x60;. The data accessible in the past is limited to a few weeks at most. Values in the future are not allowed. (required).</param>
        /// <param name="granularity">Subsample granularities suitable for intraday data. (default to GranularityEnum._1h).</param>
        /// <param name="adjustments">adjustments.</param>
        public VendorChartIQTimeSeriesIntradaySubsampleGetData(string id, string from,TypeEnum? type = TypeEnum.Trade, QualityEnum? quality = QualityEnum.DLY, GranularityEnum? granularity = GranularityEnum._1h, VendorChartIQTimeSeriesIntradaySubsampleGetDataAdjustments adjustments = default(VendorChartIQTimeSeriesIntradaySubsampleGetDataAdjustments))
        {
            // to ensure "id" is required (not null)
            if (id == null) {
                throw new ArgumentNullException("id is a required property for VendorChartIQTimeSeriesIntradaySubsampleGetData and cannot be null");
            }
            this.Id = id;
            // to ensure "from" is required (not null)
            if (from == null) {
                throw new ArgumentNullException("from is a required property for VendorChartIQTimeSeriesIntradaySubsampleGetData and cannot be null");
            }
            this.From = from;
            this.Type = type;
            this.Quality = quality;
            this.Granularity = granularity;
            this.Adjustments = adjustments;
        }

        /// <summary>
        /// Identifier of the notation.
        /// </summary>
        /// <value>Identifier of the notation.</value>
        [DataMember(Name = "id", IsRequired = true, EmitDefaultValue = false)]
        public string Id { get; set; }

        /// <summary>
        /// Date and time of the start point of the subsample (inclusive). &#x60;from&#x60; must be aligned to &#x60;granularity&#x60;. That is, the numerical value is an integral multiple of the time span value represented by &#x60;granularity&#x60;. The data accessible in the past is limited to a few weeks at most. Values in the future are not allowed.
        /// </summary>
        /// <value>Date and time of the start point of the subsample (inclusive). &#x60;from&#x60; must be aligned to &#x60;granularity&#x60;. That is, the numerical value is an integral multiple of the time span value represented by &#x60;granularity&#x60;. The data accessible in the past is limited to a few weeks at most. Values in the future are not allowed.</value>
        [DataMember(Name = "from", IsRequired = true, EmitDefaultValue = false)]
        public string From { get; set; }

        /// <summary>
        /// Gets or Sets Adjustments
        /// </summary>
        [DataMember(Name = "adjustments", EmitDefaultValue = false)]
        public VendorChartIQTimeSeriesIntradaySubsampleGetDataAdjustments Adjustments { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class VendorChartIQTimeSeriesIntradaySubsampleGetData {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Quality: ").Append(Quality).Append("\n");
            sb.Append("  From: ").Append(From).Append("\n");
            sb.Append("  Granularity: ").Append(Granularity).Append("\n");
            sb.Append("  Adjustments: ").Append(Adjustments).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as VendorChartIQTimeSeriesIntradaySubsampleGetData);
        }

        /// <summary>
        /// Returns true if VendorChartIQTimeSeriesIntradaySubsampleGetData instances are equal
        /// </summary>
        /// <param name="input">Instance of VendorChartIQTimeSeriesIntradaySubsampleGetData to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(VendorChartIQTimeSeriesIntradaySubsampleGetData input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Type == input.Type ||
                    this.Type.Equals(input.Type)
                ) && 
                (
                    this.Quality == input.Quality ||
                    this.Quality.Equals(input.Quality)
                ) && 
                (
                    this.From == input.From ||
                    (this.From != null &&
                    this.From.Equals(input.From))
                ) && 
                (
                    this.Granularity == input.Granularity ||
                    this.Granularity.Equals(input.Granularity)
                ) && 
                (
                    this.Adjustments == input.Adjustments ||
                    (this.Adjustments != null &&
                    this.Adjustments.Equals(input.Adjustments))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                {
                    hashCode = (hashCode * 59) + this.Id.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Type.GetHashCode();
                hashCode = (hashCode * 59) + this.Quality.GetHashCode();
                if (this.From != null)
                {
                    hashCode = (hashCode * 59) + this.From.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Granularity.GetHashCode();
                if (this.Adjustments != null)
                {
                    hashCode = (hashCode * 59) + this.Adjustments.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
