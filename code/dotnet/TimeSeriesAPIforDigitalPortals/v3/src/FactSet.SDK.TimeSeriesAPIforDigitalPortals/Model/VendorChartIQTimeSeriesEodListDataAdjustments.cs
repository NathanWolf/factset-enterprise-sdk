/*
 * Time Series API For Digital Portals
 *
 * Time series data, end-of-day or intraday, tick-by-tick or subsampled. Additional vendor-specific endpoints provide a modified interface for seamless integration with the ChartIQ chart library.
 *
 * The version of the OpenAPI document: 2
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = FactSet.SDK.TimeSeriesAPIforDigitalPortals.Client.OpenAPIDateConverter;

namespace FactSet.SDK.TimeSeriesAPIforDigitalPortals.Model
{
    /// <summary>
    /// Adjustments values returned.
    /// </summary>
    [DataContract(Name = "_vendor_chartIQ_timeSeries_eod_list_data_adjustments")]
    public partial class VendorChartIQTimeSeriesEodListDataAdjustments : IEquatable<VendorChartIQTimeSeriesEodListDataAdjustments>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="VendorChartIQTimeSeriesEodListDataAdjustments" /> class.
        /// </summary>
        /// <param name="payout">Adjustments are applied for corporate action effects due to dividends, payouts, or other cash disbursements. (default to false).</param>
        /// <param name="split">Adjustments are applied for corporate action effects due to the notation having a split, a reverse split, or a similar factor-based corporate action. (default to true).</param>
        public VendorChartIQTimeSeriesEodListDataAdjustments(bool payout = false, bool split = true)
        {
            this.Payout = payout;
            this.Split = split;
        }

        /// <summary>
        /// Adjustments are applied for corporate action effects due to dividends, payouts, or other cash disbursements.
        /// </summary>
        /// <value>Adjustments are applied for corporate action effects due to dividends, payouts, or other cash disbursements.</value>
        [DataMember(Name = "payout", EmitDefaultValue = true)]
        public bool Payout { get; set; }

        /// <summary>
        /// Adjustments are applied for corporate action effects due to the notation having a split, a reverse split, or a similar factor-based corporate action.
        /// </summary>
        /// <value>Adjustments are applied for corporate action effects due to the notation having a split, a reverse split, or a similar factor-based corporate action.</value>
        [DataMember(Name = "split", EmitDefaultValue = true)]
        public bool Split { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class VendorChartIQTimeSeriesEodListDataAdjustments {\n");
            sb.Append("  Payout: ").Append(Payout).Append("\n");
            sb.Append("  Split: ").Append(Split).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as VendorChartIQTimeSeriesEodListDataAdjustments);
        }

        /// <summary>
        /// Returns true if VendorChartIQTimeSeriesEodListDataAdjustments instances are equal
        /// </summary>
        /// <param name="input">Instance of VendorChartIQTimeSeriesEodListDataAdjustments to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(VendorChartIQTimeSeriesEodListDataAdjustments input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Payout == input.Payout ||
                    this.Payout.Equals(input.Payout)
                ) && 
                (
                    this.Split == input.Split ||
                    this.Split.Equals(input.Split)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.Payout.GetHashCode();
                hashCode = (hashCode * 59) + this.Split.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
