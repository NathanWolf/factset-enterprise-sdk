/*
 * Prime Developer Trial
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using FactSet.SDK.TimeSeriesAPIforDigitalPortals.Client;
using FactSet.SDK.TimeSeriesAPIforDigitalPortals.Model;
using FactSet.SDK.Utils.Authentication;

namespace FactSet.SDK.TimeSeriesAPIforDigitalPortals.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IPricesApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Single subsample intraday data for a notation.
        /// </summary>
        /// <remarks>
        /// Single subsample intraday data for a notation. The subsample may exceed the entitled time range, but will be based only on ticks that are in the entitled range.
        /// </remarks>
        /// <exception cref="FactSet.SDK.TimeSeriesAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of the notation.</param>
        /// <param name="from">Date and time of the start point of the subsample (inclusive). &#x60;from&#x60; must be aligned to &#x60;granularity&#x60;. That is, the numerical value is an integral multiple of the time span value represented by &#x60;granularity&#x60;. The data accessible in the past is limited to a few weeks at most. Dates in the future are not allowed.</param>
        /// <param name="type">Type of the price as configured for the customer. (optional, default to trade)</param>
        /// <param name="quality">Quality of the price. (optional, default to DLY)</param>
        /// <param name="granularity">Subsample granularities suitable for intraday data. (optional, default to 1h)</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <returns>InlineResponse2009</returns>
        InlineResponse2009 GetPricesTimeSeriesIntradaySubsampleGet(string id, string from, string type = default(string), string quality = default(string), string granularity = default(string), List<string> attributes = default(List<string>));

        /// <summary>
        /// Single subsample intraday data for a notation.
        /// </summary>
        /// <remarks>
        /// Single subsample intraday data for a notation. The subsample may exceed the entitled time range, but will be based only on ticks that are in the entitled range.
        /// </remarks>
        /// <exception cref="FactSet.SDK.TimeSeriesAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of the notation.</param>
        /// <param name="from">Date and time of the start point of the subsample (inclusive). &#x60;from&#x60; must be aligned to &#x60;granularity&#x60;. That is, the numerical value is an integral multiple of the time span value represented by &#x60;granularity&#x60;. The data accessible in the past is limited to a few weeks at most. Dates in the future are not allowed.</param>
        /// <param name="type">Type of the price as configured for the customer. (optional, default to trade)</param>
        /// <param name="quality">Quality of the price. (optional, default to DLY)</param>
        /// <param name="granularity">Subsample granularities suitable for intraday data. (optional, default to 1h)</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <returns>ApiResponse of InlineResponse2009</returns>
        ApiResponse<InlineResponse2009> GetPricesTimeSeriesIntradaySubsampleGetWithHttpInfo(string id, string from, string type = default(string), string quality = default(string), string granularity = default(string), List<string> attributes = default(List<string>));
        /// <summary>
        /// End-of-day time series data for a notation.
        /// </summary>
        /// <remarks>
        /// End-of-day time series data for a notation. The resulting time series is always adjusted for currency changes.
        /// </remarks>
        /// <exception cref="FactSet.SDK.TimeSeriesAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>InlineResponse2005</returns>
        InlineResponse2005 PostPricesTimeSeriesEodList(InlineObject4 body);

        /// <summary>
        /// End-of-day time series data for a notation.
        /// </summary>
        /// <remarks>
        /// End-of-day time series data for a notation. The resulting time series is always adjusted for currency changes.
        /// </remarks>
        /// <exception cref="FactSet.SDK.TimeSeriesAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of InlineResponse2005</returns>
        ApiResponse<InlineResponse2005> PostPricesTimeSeriesEodListWithHttpInfo(InlineObject4 body);
        /// <summary>
        /// Single subsample end-of-day data for a notation.
        /// </summary>
        /// <remarks>
        /// Single subsample end-of-day data for a notation. The sample is always adjusted for currency changes. The subsample may exceed the entitled date range, but will be based only on days that are in the entitled range.
        /// </remarks>
        /// <exception cref="FactSet.SDK.TimeSeriesAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>InlineResponse2006</returns>
        InlineResponse2006 PostPricesTimeSeriesEodSubsampleGet(InlineObject5 body);

        /// <summary>
        /// Single subsample end-of-day data for a notation.
        /// </summary>
        /// <remarks>
        /// Single subsample end-of-day data for a notation. The sample is always adjusted for currency changes. The subsample may exceed the entitled date range, but will be based only on days that are in the entitled range.
        /// </remarks>
        /// <exception cref="FactSet.SDK.TimeSeriesAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of InlineResponse2006</returns>
        ApiResponse<InlineResponse2006> PostPricesTimeSeriesEodSubsampleGetWithHttpInfo(InlineObject5 body);
        /// <summary>
        /// Subsampled end-of-day time series data for a notation.
        /// </summary>
        /// <remarks>
        /// Subsampled end-of-day time series data for a notation. The resulting time series is always adjusted for currency changes. If a subsample&#39;s date range is not entirely within the maximally entitled date range, the subsample is excluded from the response.
        /// </remarks>
        /// <exception cref="FactSet.SDK.TimeSeriesAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>InlineResponse2007</returns>
        InlineResponse2007 PostPricesTimeSeriesEodSubsampleList(InlineObject6 body);

        /// <summary>
        /// Subsampled end-of-day time series data for a notation.
        /// </summary>
        /// <remarks>
        /// Subsampled end-of-day time series data for a notation. The resulting time series is always adjusted for currency changes. If a subsample&#39;s date range is not entirely within the maximally entitled date range, the subsample is excluded from the response.
        /// </remarks>
        /// <exception cref="FactSet.SDK.TimeSeriesAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of InlineResponse2007</returns>
        ApiResponse<InlineResponse2007> PostPricesTimeSeriesEodSubsampleListWithHttpInfo(InlineObject6 body);
        /// <summary>
        /// Intraday time series data for a notation.
        /// </summary>
        /// <remarks>
        /// Intraday time series data for a notation.
        /// </remarks>
        /// <exception cref="FactSet.SDK.TimeSeriesAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>InlineResponse2008</returns>
        InlineResponse2008 PostPricesTimeSeriesIntradayList(InlineObject7 body);

        /// <summary>
        /// Intraday time series data for a notation.
        /// </summary>
        /// <remarks>
        /// Intraday time series data for a notation.
        /// </remarks>
        /// <exception cref="FactSet.SDK.TimeSeriesAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of InlineResponse2008</returns>
        ApiResponse<InlineResponse2008> PostPricesTimeSeriesIntradayListWithHttpInfo(InlineObject7 body);
        /// <summary>
        /// Subsampled intraday time series data for a notation.
        /// </summary>
        /// <remarks>
        /// Subsampled intraday time series data for a notation. If a subsample&#39;s time range is not entirely within the maximally entitled time range, the subsample is excluded from the response.
        /// </remarks>
        /// <exception cref="FactSet.SDK.TimeSeriesAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>InlineResponse20010</returns>
        InlineResponse20010 PostPricesTimeSeriesIntradaySubsampleList(InlineObject8 body);

        /// <summary>
        /// Subsampled intraday time series data for a notation.
        /// </summary>
        /// <remarks>
        /// Subsampled intraday time series data for a notation. If a subsample&#39;s time range is not entirely within the maximally entitled time range, the subsample is excluded from the response.
        /// </remarks>
        /// <exception cref="FactSet.SDK.TimeSeriesAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of InlineResponse20010</returns>
        ApiResponse<InlineResponse20010> PostPricesTimeSeriesIntradaySubsampleListWithHttpInfo(InlineObject8 body);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IPricesApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Single subsample intraday data for a notation.
        /// </summary>
        /// <remarks>
        /// Single subsample intraday data for a notation. The subsample may exceed the entitled time range, but will be based only on ticks that are in the entitled range.
        /// </remarks>
        /// <exception cref="FactSet.SDK.TimeSeriesAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of the notation.</param>
        /// <param name="from">Date and time of the start point of the subsample (inclusive). &#x60;from&#x60; must be aligned to &#x60;granularity&#x60;. That is, the numerical value is an integral multiple of the time span value represented by &#x60;granularity&#x60;. The data accessible in the past is limited to a few weeks at most. Dates in the future are not allowed.</param>
        /// <param name="type">Type of the price as configured for the customer. (optional, default to trade)</param>
        /// <param name="quality">Quality of the price. (optional, default to DLY)</param>
        /// <param name="granularity">Subsample granularities suitable for intraday data. (optional, default to 1h)</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse2009</returns>
        System.Threading.Tasks.Task<InlineResponse2009> GetPricesTimeSeriesIntradaySubsampleGetAsync(string id, string from, string type = default(string), string quality = default(string), string granularity = default(string), List<string> attributes = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Single subsample intraday data for a notation.
        /// </summary>
        /// <remarks>
        /// Single subsample intraday data for a notation. The subsample may exceed the entitled time range, but will be based only on ticks that are in the entitled range.
        /// </remarks>
        /// <exception cref="FactSet.SDK.TimeSeriesAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of the notation.</param>
        /// <param name="from">Date and time of the start point of the subsample (inclusive). &#x60;from&#x60; must be aligned to &#x60;granularity&#x60;. That is, the numerical value is an integral multiple of the time span value represented by &#x60;granularity&#x60;. The data accessible in the past is limited to a few weeks at most. Dates in the future are not allowed.</param>
        /// <param name="type">Type of the price as configured for the customer. (optional, default to trade)</param>
        /// <param name="quality">Quality of the price. (optional, default to DLY)</param>
        /// <param name="granularity">Subsample granularities suitable for intraday data. (optional, default to 1h)</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse2009)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse2009>> GetPricesTimeSeriesIntradaySubsampleGetWithHttpInfoAsync(string id, string from, string type = default(string), string quality = default(string), string granularity = default(string), List<string> attributes = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// End-of-day time series data for a notation.
        /// </summary>
        /// <remarks>
        /// End-of-day time series data for a notation. The resulting time series is always adjusted for currency changes.
        /// </remarks>
        /// <exception cref="FactSet.SDK.TimeSeriesAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse2005</returns>
        System.Threading.Tasks.Task<InlineResponse2005> PostPricesTimeSeriesEodListAsync(InlineObject4 body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// End-of-day time series data for a notation.
        /// </summary>
        /// <remarks>
        /// End-of-day time series data for a notation. The resulting time series is always adjusted for currency changes.
        /// </remarks>
        /// <exception cref="FactSet.SDK.TimeSeriesAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse2005)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse2005>> PostPricesTimeSeriesEodListWithHttpInfoAsync(InlineObject4 body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Single subsample end-of-day data for a notation.
        /// </summary>
        /// <remarks>
        /// Single subsample end-of-day data for a notation. The sample is always adjusted for currency changes. The subsample may exceed the entitled date range, but will be based only on days that are in the entitled range.
        /// </remarks>
        /// <exception cref="FactSet.SDK.TimeSeriesAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse2006</returns>
        System.Threading.Tasks.Task<InlineResponse2006> PostPricesTimeSeriesEodSubsampleGetAsync(InlineObject5 body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Single subsample end-of-day data for a notation.
        /// </summary>
        /// <remarks>
        /// Single subsample end-of-day data for a notation. The sample is always adjusted for currency changes. The subsample may exceed the entitled date range, but will be based only on days that are in the entitled range.
        /// </remarks>
        /// <exception cref="FactSet.SDK.TimeSeriesAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse2006)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse2006>> PostPricesTimeSeriesEodSubsampleGetWithHttpInfoAsync(InlineObject5 body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Subsampled end-of-day time series data for a notation.
        /// </summary>
        /// <remarks>
        /// Subsampled end-of-day time series data for a notation. The resulting time series is always adjusted for currency changes. If a subsample&#39;s date range is not entirely within the maximally entitled date range, the subsample is excluded from the response.
        /// </remarks>
        /// <exception cref="FactSet.SDK.TimeSeriesAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse2007</returns>
        System.Threading.Tasks.Task<InlineResponse2007> PostPricesTimeSeriesEodSubsampleListAsync(InlineObject6 body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Subsampled end-of-day time series data for a notation.
        /// </summary>
        /// <remarks>
        /// Subsampled end-of-day time series data for a notation. The resulting time series is always adjusted for currency changes. If a subsample&#39;s date range is not entirely within the maximally entitled date range, the subsample is excluded from the response.
        /// </remarks>
        /// <exception cref="FactSet.SDK.TimeSeriesAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse2007)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse2007>> PostPricesTimeSeriesEodSubsampleListWithHttpInfoAsync(InlineObject6 body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Intraday time series data for a notation.
        /// </summary>
        /// <remarks>
        /// Intraday time series data for a notation.
        /// </remarks>
        /// <exception cref="FactSet.SDK.TimeSeriesAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse2008</returns>
        System.Threading.Tasks.Task<InlineResponse2008> PostPricesTimeSeriesIntradayListAsync(InlineObject7 body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Intraday time series data for a notation.
        /// </summary>
        /// <remarks>
        /// Intraday time series data for a notation.
        /// </remarks>
        /// <exception cref="FactSet.SDK.TimeSeriesAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse2008)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse2008>> PostPricesTimeSeriesIntradayListWithHttpInfoAsync(InlineObject7 body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Subsampled intraday time series data for a notation.
        /// </summary>
        /// <remarks>
        /// Subsampled intraday time series data for a notation. If a subsample&#39;s time range is not entirely within the maximally entitled time range, the subsample is excluded from the response.
        /// </remarks>
        /// <exception cref="FactSet.SDK.TimeSeriesAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse20010</returns>
        System.Threading.Tasks.Task<InlineResponse20010> PostPricesTimeSeriesIntradaySubsampleListAsync(InlineObject8 body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Subsampled intraday time series data for a notation.
        /// </summary>
        /// <remarks>
        /// Subsampled intraday time series data for a notation. If a subsample&#39;s time range is not entirely within the maximally entitled time range, the subsample is excluded from the response.
        /// </remarks>
        /// <exception cref="FactSet.SDK.TimeSeriesAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse20010)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20010>> PostPricesTimeSeriesIntradaySubsampleListWithHttpInfoAsync(InlineObject8 body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IPricesApi : IPricesApiSync, IPricesApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class PricesApi : IPricesApi
    {
        private FactSet.SDK.TimeSeriesAPIforDigitalPortals.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="PricesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public PricesApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PricesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public PricesApi(string basePath)
        {
            this.Configuration = FactSet.SDK.TimeSeriesAPIforDigitalPortals.Client.Configuration.MergeConfigurations(
                FactSet.SDK.TimeSeriesAPIforDigitalPortals.Client.GlobalConfiguration.Instance,
                new FactSet.SDK.TimeSeriesAPIforDigitalPortals.Client.Configuration { BasePath = basePath }
            );
            this.Client = new FactSet.SDK.TimeSeriesAPIforDigitalPortals.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new FactSet.SDK.TimeSeriesAPIforDigitalPortals.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = FactSet.SDK.TimeSeriesAPIforDigitalPortals.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PricesApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public PricesApi(FactSet.SDK.TimeSeriesAPIforDigitalPortals.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = FactSet.SDK.TimeSeriesAPIforDigitalPortals.Client.Configuration.MergeConfigurations(
                FactSet.SDK.TimeSeriesAPIforDigitalPortals.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new FactSet.SDK.TimeSeriesAPIforDigitalPortals.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new FactSet.SDK.TimeSeriesAPIforDigitalPortals.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = FactSet.SDK.TimeSeriesAPIforDigitalPortals.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PricesApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public PricesApi(FactSet.SDK.TimeSeriesAPIforDigitalPortals.Client.ISynchronousClient client, FactSet.SDK.TimeSeriesAPIforDigitalPortals.Client.IAsynchronousClient asyncClient, FactSet.SDK.TimeSeriesAPIforDigitalPortals.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = FactSet.SDK.TimeSeriesAPIforDigitalPortals.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public FactSet.SDK.TimeSeriesAPIforDigitalPortals.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public FactSet.SDK.TimeSeriesAPIforDigitalPortals.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public FactSet.SDK.TimeSeriesAPIforDigitalPortals.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public FactSet.SDK.TimeSeriesAPIforDigitalPortals.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Single subsample intraday data for a notation. Single subsample intraday data for a notation. The subsample may exceed the entitled time range, but will be based only on ticks that are in the entitled range.
        /// </summary>
        /// <exception cref="FactSet.SDK.TimeSeriesAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of the notation.</param>
        /// <param name="from">Date and time of the start point of the subsample (inclusive). &#x60;from&#x60; must be aligned to &#x60;granularity&#x60;. That is, the numerical value is an integral multiple of the time span value represented by &#x60;granularity&#x60;. The data accessible in the past is limited to a few weeks at most. Dates in the future are not allowed.</param>
        /// <param name="type">Type of the price as configured for the customer. (optional, default to trade)</param>
        /// <param name="quality">Quality of the price. (optional, default to DLY)</param>
        /// <param name="granularity">Subsample granularities suitable for intraday data. (optional, default to 1h)</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <returns>InlineResponse2009</returns>
        public InlineResponse2009 GetPricesTimeSeriesIntradaySubsampleGet(string id, string from, string type = default(string), string quality = default(string), string granularity = default(string), List<string> attributes = default(List<string>))
        {
            FactSet.SDK.TimeSeriesAPIforDigitalPortals.Client.ApiResponse<InlineResponse2009> localVarResponse = GetPricesTimeSeriesIntradaySubsampleGetWithHttpInfo(id, from, type, quality, granularity, attributes);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Single subsample intraday data for a notation. Single subsample intraday data for a notation. The subsample may exceed the entitled time range, but will be based only on ticks that are in the entitled range.
        /// </summary>
        /// <exception cref="FactSet.SDK.TimeSeriesAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of the notation.</param>
        /// <param name="from">Date and time of the start point of the subsample (inclusive). &#x60;from&#x60; must be aligned to &#x60;granularity&#x60;. That is, the numerical value is an integral multiple of the time span value represented by &#x60;granularity&#x60;. The data accessible in the past is limited to a few weeks at most. Dates in the future are not allowed.</param>
        /// <param name="type">Type of the price as configured for the customer. (optional, default to trade)</param>
        /// <param name="quality">Quality of the price. (optional, default to DLY)</param>
        /// <param name="granularity">Subsample granularities suitable for intraday data. (optional, default to 1h)</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <returns>ApiResponse of InlineResponse2009</returns>
        public FactSet.SDK.TimeSeriesAPIforDigitalPortals.Client.ApiResponse<InlineResponse2009> GetPricesTimeSeriesIntradaySubsampleGetWithHttpInfo(string id, string from, string type = default(string), string quality = default(string), string granularity = default(string), List<string> attributes = default(List<string>))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new FactSet.SDK.TimeSeriesAPIforDigitalPortals.Client.ApiException(400, "Missing required parameter 'id' when calling PricesApi->GetPricesTimeSeriesIntradaySubsampleGet");

            // verify the required parameter 'from' is set
            if (from == null)
                throw new FactSet.SDK.TimeSeriesAPIforDigitalPortals.Client.ApiException(400, "Missing required parameter 'from' when calling PricesApi->GetPricesTimeSeriesIntradaySubsampleGet");

            FactSet.SDK.TimeSeriesAPIforDigitalPortals.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.TimeSeriesAPIforDigitalPortals.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.TimeSeriesAPIforDigitalPortals.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = FactSet.SDK.TimeSeriesAPIforDigitalPortals.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.TimeSeriesAPIforDigitalPortals.Client.ClientUtils.ParameterToMultiMap("", "id", id));
            if (type != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.TimeSeriesAPIforDigitalPortals.Client.ClientUtils.ParameterToMultiMap("", "type", type));
            }
            if (quality != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.TimeSeriesAPIforDigitalPortals.Client.ClientUtils.ParameterToMultiMap("", "quality", quality));
            }
            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.TimeSeriesAPIforDigitalPortals.Client.ClientUtils.ParameterToMultiMap("", "from", from));
            if (granularity != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.TimeSeriesAPIforDigitalPortals.Client.ClientUtils.ParameterToMultiMap("", "granularity", granularity));
            }
            if (attributes != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.TimeSeriesAPIforDigitalPortals.Client.ClientUtils.ParameterToMultiMap("csv", "_attributes", attributes));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.TimeSeriesAPIforDigitalPortals.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<InlineResponse2009>("/prices/timeSeries/intraday/subsample/get", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetPricesTimeSeriesIntradaySubsampleGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Single subsample intraday data for a notation. Single subsample intraday data for a notation. The subsample may exceed the entitled time range, but will be based only on ticks that are in the entitled range.
        /// </summary>
        /// <exception cref="FactSet.SDK.TimeSeriesAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of the notation.</param>
        /// <param name="from">Date and time of the start point of the subsample (inclusive). &#x60;from&#x60; must be aligned to &#x60;granularity&#x60;. That is, the numerical value is an integral multiple of the time span value represented by &#x60;granularity&#x60;. The data accessible in the past is limited to a few weeks at most. Dates in the future are not allowed.</param>
        /// <param name="type">Type of the price as configured for the customer. (optional, default to trade)</param>
        /// <param name="quality">Quality of the price. (optional, default to DLY)</param>
        /// <param name="granularity">Subsample granularities suitable for intraday data. (optional, default to 1h)</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse2009</returns>
        public async System.Threading.Tasks.Task<InlineResponse2009> GetPricesTimeSeriesIntradaySubsampleGetAsync(string id, string from, string type = default(string), string quality = default(string), string granularity = default(string), List<string> attributes = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            FactSet.SDK.TimeSeriesAPIforDigitalPortals.Client.ApiResponse<InlineResponse2009> localVarResponse = await GetPricesTimeSeriesIntradaySubsampleGetWithHttpInfoAsync(id, from, type, quality, granularity, attributes, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Single subsample intraday data for a notation. Single subsample intraday data for a notation. The subsample may exceed the entitled time range, but will be based only on ticks that are in the entitled range.
        /// </summary>
        /// <exception cref="FactSet.SDK.TimeSeriesAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of the notation.</param>
        /// <param name="from">Date and time of the start point of the subsample (inclusive). &#x60;from&#x60; must be aligned to &#x60;granularity&#x60;. That is, the numerical value is an integral multiple of the time span value represented by &#x60;granularity&#x60;. The data accessible in the past is limited to a few weeks at most. Dates in the future are not allowed.</param>
        /// <param name="type">Type of the price as configured for the customer. (optional, default to trade)</param>
        /// <param name="quality">Quality of the price. (optional, default to DLY)</param>
        /// <param name="granularity">Subsample granularities suitable for intraday data. (optional, default to 1h)</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse2009)</returns>
        public async System.Threading.Tasks.Task<FactSet.SDK.TimeSeriesAPIforDigitalPortals.Client.ApiResponse<InlineResponse2009>> GetPricesTimeSeriesIntradaySubsampleGetWithHttpInfoAsync(string id, string from, string type = default(string), string quality = default(string), string granularity = default(string), List<string> attributes = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new FactSet.SDK.TimeSeriesAPIforDigitalPortals.Client.ApiException(400, "Missing required parameter 'id' when calling PricesApi->GetPricesTimeSeriesIntradaySubsampleGet");

            // verify the required parameter 'from' is set
            if (from == null)
                throw new FactSet.SDK.TimeSeriesAPIforDigitalPortals.Client.ApiException(400, "Missing required parameter 'from' when calling PricesApi->GetPricesTimeSeriesIntradaySubsampleGet");


            FactSet.SDK.TimeSeriesAPIforDigitalPortals.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.TimeSeriesAPIforDigitalPortals.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = FactSet.SDK.TimeSeriesAPIforDigitalPortals.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = FactSet.SDK.TimeSeriesAPIforDigitalPortals.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.TimeSeriesAPIforDigitalPortals.Client.ClientUtils.ParameterToMultiMap("", "id", id));
            if (type != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.TimeSeriesAPIforDigitalPortals.Client.ClientUtils.ParameterToMultiMap("", "type", type));
            }
            if (quality != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.TimeSeriesAPIforDigitalPortals.Client.ClientUtils.ParameterToMultiMap("", "quality", quality));
            }
            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.TimeSeriesAPIforDigitalPortals.Client.ClientUtils.ParameterToMultiMap("", "from", from));
            if (granularity != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.TimeSeriesAPIforDigitalPortals.Client.ClientUtils.ParameterToMultiMap("", "granularity", granularity));
            }
            if (attributes != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.TimeSeriesAPIforDigitalPortals.Client.ClientUtils.ParameterToMultiMap("csv", "_attributes", attributes));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.TimeSeriesAPIforDigitalPortals.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<InlineResponse2009>("/prices/timeSeries/intraday/subsample/get", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetPricesTimeSeriesIntradaySubsampleGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// End-of-day time series data for a notation. End-of-day time series data for a notation. The resulting time series is always adjusted for currency changes.
        /// </summary>
        /// <exception cref="FactSet.SDK.TimeSeriesAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>InlineResponse2005</returns>
        public InlineResponse2005 PostPricesTimeSeriesEodList(InlineObject4 body)
        {
            FactSet.SDK.TimeSeriesAPIforDigitalPortals.Client.ApiResponse<InlineResponse2005> localVarResponse = PostPricesTimeSeriesEodListWithHttpInfo(body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// End-of-day time series data for a notation. End-of-day time series data for a notation. The resulting time series is always adjusted for currency changes.
        /// </summary>
        /// <exception cref="FactSet.SDK.TimeSeriesAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of InlineResponse2005</returns>
        public FactSet.SDK.TimeSeriesAPIforDigitalPortals.Client.ApiResponse<InlineResponse2005> PostPricesTimeSeriesEodListWithHttpInfo(InlineObject4 body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new FactSet.SDK.TimeSeriesAPIforDigitalPortals.Client.ApiException(400, "Missing required parameter 'body' when calling PricesApi->PostPricesTimeSeriesEodList");

            FactSet.SDK.TimeSeriesAPIforDigitalPortals.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.TimeSeriesAPIforDigitalPortals.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.TimeSeriesAPIforDigitalPortals.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = FactSet.SDK.TimeSeriesAPIforDigitalPortals.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.TimeSeriesAPIforDigitalPortals.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<InlineResponse2005>("/prices/timeSeries/eod/list", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostPricesTimeSeriesEodList", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// End-of-day time series data for a notation. End-of-day time series data for a notation. The resulting time series is always adjusted for currency changes.
        /// </summary>
        /// <exception cref="FactSet.SDK.TimeSeriesAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse2005</returns>
        public async System.Threading.Tasks.Task<InlineResponse2005> PostPricesTimeSeriesEodListAsync(InlineObject4 body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            FactSet.SDK.TimeSeriesAPIforDigitalPortals.Client.ApiResponse<InlineResponse2005> localVarResponse = await PostPricesTimeSeriesEodListWithHttpInfoAsync(body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// End-of-day time series data for a notation. End-of-day time series data for a notation. The resulting time series is always adjusted for currency changes.
        /// </summary>
        /// <exception cref="FactSet.SDK.TimeSeriesAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse2005)</returns>
        public async System.Threading.Tasks.Task<FactSet.SDK.TimeSeriesAPIforDigitalPortals.Client.ApiResponse<InlineResponse2005>> PostPricesTimeSeriesEodListWithHttpInfoAsync(InlineObject4 body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new FactSet.SDK.TimeSeriesAPIforDigitalPortals.Client.ApiException(400, "Missing required parameter 'body' when calling PricesApi->PostPricesTimeSeriesEodList");


            FactSet.SDK.TimeSeriesAPIforDigitalPortals.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.TimeSeriesAPIforDigitalPortals.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = FactSet.SDK.TimeSeriesAPIforDigitalPortals.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = FactSet.SDK.TimeSeriesAPIforDigitalPortals.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.TimeSeriesAPIforDigitalPortals.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<InlineResponse2005>("/prices/timeSeries/eod/list", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostPricesTimeSeriesEodList", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Single subsample end-of-day data for a notation. Single subsample end-of-day data for a notation. The sample is always adjusted for currency changes. The subsample may exceed the entitled date range, but will be based only on days that are in the entitled range.
        /// </summary>
        /// <exception cref="FactSet.SDK.TimeSeriesAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>InlineResponse2006</returns>
        public InlineResponse2006 PostPricesTimeSeriesEodSubsampleGet(InlineObject5 body)
        {
            FactSet.SDK.TimeSeriesAPIforDigitalPortals.Client.ApiResponse<InlineResponse2006> localVarResponse = PostPricesTimeSeriesEodSubsampleGetWithHttpInfo(body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Single subsample end-of-day data for a notation. Single subsample end-of-day data for a notation. The sample is always adjusted for currency changes. The subsample may exceed the entitled date range, but will be based only on days that are in the entitled range.
        /// </summary>
        /// <exception cref="FactSet.SDK.TimeSeriesAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of InlineResponse2006</returns>
        public FactSet.SDK.TimeSeriesAPIforDigitalPortals.Client.ApiResponse<InlineResponse2006> PostPricesTimeSeriesEodSubsampleGetWithHttpInfo(InlineObject5 body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new FactSet.SDK.TimeSeriesAPIforDigitalPortals.Client.ApiException(400, "Missing required parameter 'body' when calling PricesApi->PostPricesTimeSeriesEodSubsampleGet");

            FactSet.SDK.TimeSeriesAPIforDigitalPortals.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.TimeSeriesAPIforDigitalPortals.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.TimeSeriesAPIforDigitalPortals.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = FactSet.SDK.TimeSeriesAPIforDigitalPortals.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.TimeSeriesAPIforDigitalPortals.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<InlineResponse2006>("/prices/timeSeries/eod/subsample/get", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostPricesTimeSeriesEodSubsampleGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Single subsample end-of-day data for a notation. Single subsample end-of-day data for a notation. The sample is always adjusted for currency changes. The subsample may exceed the entitled date range, but will be based only on days that are in the entitled range.
        /// </summary>
        /// <exception cref="FactSet.SDK.TimeSeriesAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse2006</returns>
        public async System.Threading.Tasks.Task<InlineResponse2006> PostPricesTimeSeriesEodSubsampleGetAsync(InlineObject5 body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            FactSet.SDK.TimeSeriesAPIforDigitalPortals.Client.ApiResponse<InlineResponse2006> localVarResponse = await PostPricesTimeSeriesEodSubsampleGetWithHttpInfoAsync(body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Single subsample end-of-day data for a notation. Single subsample end-of-day data for a notation. The sample is always adjusted for currency changes. The subsample may exceed the entitled date range, but will be based only on days that are in the entitled range.
        /// </summary>
        /// <exception cref="FactSet.SDK.TimeSeriesAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse2006)</returns>
        public async System.Threading.Tasks.Task<FactSet.SDK.TimeSeriesAPIforDigitalPortals.Client.ApiResponse<InlineResponse2006>> PostPricesTimeSeriesEodSubsampleGetWithHttpInfoAsync(InlineObject5 body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new FactSet.SDK.TimeSeriesAPIforDigitalPortals.Client.ApiException(400, "Missing required parameter 'body' when calling PricesApi->PostPricesTimeSeriesEodSubsampleGet");


            FactSet.SDK.TimeSeriesAPIforDigitalPortals.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.TimeSeriesAPIforDigitalPortals.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = FactSet.SDK.TimeSeriesAPIforDigitalPortals.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = FactSet.SDK.TimeSeriesAPIforDigitalPortals.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.TimeSeriesAPIforDigitalPortals.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<InlineResponse2006>("/prices/timeSeries/eod/subsample/get", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostPricesTimeSeriesEodSubsampleGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Subsampled end-of-day time series data for a notation. Subsampled end-of-day time series data for a notation. The resulting time series is always adjusted for currency changes. If a subsample&#39;s date range is not entirely within the maximally entitled date range, the subsample is excluded from the response.
        /// </summary>
        /// <exception cref="FactSet.SDK.TimeSeriesAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>InlineResponse2007</returns>
        public InlineResponse2007 PostPricesTimeSeriesEodSubsampleList(InlineObject6 body)
        {
            FactSet.SDK.TimeSeriesAPIforDigitalPortals.Client.ApiResponse<InlineResponse2007> localVarResponse = PostPricesTimeSeriesEodSubsampleListWithHttpInfo(body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Subsampled end-of-day time series data for a notation. Subsampled end-of-day time series data for a notation. The resulting time series is always adjusted for currency changes. If a subsample&#39;s date range is not entirely within the maximally entitled date range, the subsample is excluded from the response.
        /// </summary>
        /// <exception cref="FactSet.SDK.TimeSeriesAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of InlineResponse2007</returns>
        public FactSet.SDK.TimeSeriesAPIforDigitalPortals.Client.ApiResponse<InlineResponse2007> PostPricesTimeSeriesEodSubsampleListWithHttpInfo(InlineObject6 body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new FactSet.SDK.TimeSeriesAPIforDigitalPortals.Client.ApiException(400, "Missing required parameter 'body' when calling PricesApi->PostPricesTimeSeriesEodSubsampleList");

            FactSet.SDK.TimeSeriesAPIforDigitalPortals.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.TimeSeriesAPIforDigitalPortals.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.TimeSeriesAPIforDigitalPortals.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = FactSet.SDK.TimeSeriesAPIforDigitalPortals.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.TimeSeriesAPIforDigitalPortals.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<InlineResponse2007>("/prices/timeSeries/eod/subsample/list", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostPricesTimeSeriesEodSubsampleList", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Subsampled end-of-day time series data for a notation. Subsampled end-of-day time series data for a notation. The resulting time series is always adjusted for currency changes. If a subsample&#39;s date range is not entirely within the maximally entitled date range, the subsample is excluded from the response.
        /// </summary>
        /// <exception cref="FactSet.SDK.TimeSeriesAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse2007</returns>
        public async System.Threading.Tasks.Task<InlineResponse2007> PostPricesTimeSeriesEodSubsampleListAsync(InlineObject6 body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            FactSet.SDK.TimeSeriesAPIforDigitalPortals.Client.ApiResponse<InlineResponse2007> localVarResponse = await PostPricesTimeSeriesEodSubsampleListWithHttpInfoAsync(body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Subsampled end-of-day time series data for a notation. Subsampled end-of-day time series data for a notation. The resulting time series is always adjusted for currency changes. If a subsample&#39;s date range is not entirely within the maximally entitled date range, the subsample is excluded from the response.
        /// </summary>
        /// <exception cref="FactSet.SDK.TimeSeriesAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse2007)</returns>
        public async System.Threading.Tasks.Task<FactSet.SDK.TimeSeriesAPIforDigitalPortals.Client.ApiResponse<InlineResponse2007>> PostPricesTimeSeriesEodSubsampleListWithHttpInfoAsync(InlineObject6 body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new FactSet.SDK.TimeSeriesAPIforDigitalPortals.Client.ApiException(400, "Missing required parameter 'body' when calling PricesApi->PostPricesTimeSeriesEodSubsampleList");


            FactSet.SDK.TimeSeriesAPIforDigitalPortals.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.TimeSeriesAPIforDigitalPortals.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = FactSet.SDK.TimeSeriesAPIforDigitalPortals.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = FactSet.SDK.TimeSeriesAPIforDigitalPortals.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.TimeSeriesAPIforDigitalPortals.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<InlineResponse2007>("/prices/timeSeries/eod/subsample/list", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostPricesTimeSeriesEodSubsampleList", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Intraday time series data for a notation. Intraday time series data for a notation.
        /// </summary>
        /// <exception cref="FactSet.SDK.TimeSeriesAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>InlineResponse2008</returns>
        public InlineResponse2008 PostPricesTimeSeriesIntradayList(InlineObject7 body)
        {
            FactSet.SDK.TimeSeriesAPIforDigitalPortals.Client.ApiResponse<InlineResponse2008> localVarResponse = PostPricesTimeSeriesIntradayListWithHttpInfo(body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Intraday time series data for a notation. Intraday time series data for a notation.
        /// </summary>
        /// <exception cref="FactSet.SDK.TimeSeriesAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of InlineResponse2008</returns>
        public FactSet.SDK.TimeSeriesAPIforDigitalPortals.Client.ApiResponse<InlineResponse2008> PostPricesTimeSeriesIntradayListWithHttpInfo(InlineObject7 body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new FactSet.SDK.TimeSeriesAPIforDigitalPortals.Client.ApiException(400, "Missing required parameter 'body' when calling PricesApi->PostPricesTimeSeriesIntradayList");

            FactSet.SDK.TimeSeriesAPIforDigitalPortals.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.TimeSeriesAPIforDigitalPortals.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.TimeSeriesAPIforDigitalPortals.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = FactSet.SDK.TimeSeriesAPIforDigitalPortals.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.TimeSeriesAPIforDigitalPortals.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<InlineResponse2008>("/prices/timeSeries/intraday/list", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostPricesTimeSeriesIntradayList", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Intraday time series data for a notation. Intraday time series data for a notation.
        /// </summary>
        /// <exception cref="FactSet.SDK.TimeSeriesAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse2008</returns>
        public async System.Threading.Tasks.Task<InlineResponse2008> PostPricesTimeSeriesIntradayListAsync(InlineObject7 body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            FactSet.SDK.TimeSeriesAPIforDigitalPortals.Client.ApiResponse<InlineResponse2008> localVarResponse = await PostPricesTimeSeriesIntradayListWithHttpInfoAsync(body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Intraday time series data for a notation. Intraday time series data for a notation.
        /// </summary>
        /// <exception cref="FactSet.SDK.TimeSeriesAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse2008)</returns>
        public async System.Threading.Tasks.Task<FactSet.SDK.TimeSeriesAPIforDigitalPortals.Client.ApiResponse<InlineResponse2008>> PostPricesTimeSeriesIntradayListWithHttpInfoAsync(InlineObject7 body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new FactSet.SDK.TimeSeriesAPIforDigitalPortals.Client.ApiException(400, "Missing required parameter 'body' when calling PricesApi->PostPricesTimeSeriesIntradayList");


            FactSet.SDK.TimeSeriesAPIforDigitalPortals.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.TimeSeriesAPIforDigitalPortals.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = FactSet.SDK.TimeSeriesAPIforDigitalPortals.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = FactSet.SDK.TimeSeriesAPIforDigitalPortals.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.TimeSeriesAPIforDigitalPortals.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<InlineResponse2008>("/prices/timeSeries/intraday/list", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostPricesTimeSeriesIntradayList", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Subsampled intraday time series data for a notation. Subsampled intraday time series data for a notation. If a subsample&#39;s time range is not entirely within the maximally entitled time range, the subsample is excluded from the response.
        /// </summary>
        /// <exception cref="FactSet.SDK.TimeSeriesAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>InlineResponse20010</returns>
        public InlineResponse20010 PostPricesTimeSeriesIntradaySubsampleList(InlineObject8 body)
        {
            FactSet.SDK.TimeSeriesAPIforDigitalPortals.Client.ApiResponse<InlineResponse20010> localVarResponse = PostPricesTimeSeriesIntradaySubsampleListWithHttpInfo(body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Subsampled intraday time series data for a notation. Subsampled intraday time series data for a notation. If a subsample&#39;s time range is not entirely within the maximally entitled time range, the subsample is excluded from the response.
        /// </summary>
        /// <exception cref="FactSet.SDK.TimeSeriesAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of InlineResponse20010</returns>
        public FactSet.SDK.TimeSeriesAPIforDigitalPortals.Client.ApiResponse<InlineResponse20010> PostPricesTimeSeriesIntradaySubsampleListWithHttpInfo(InlineObject8 body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new FactSet.SDK.TimeSeriesAPIforDigitalPortals.Client.ApiException(400, "Missing required parameter 'body' when calling PricesApi->PostPricesTimeSeriesIntradaySubsampleList");

            FactSet.SDK.TimeSeriesAPIforDigitalPortals.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.TimeSeriesAPIforDigitalPortals.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.TimeSeriesAPIforDigitalPortals.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = FactSet.SDK.TimeSeriesAPIforDigitalPortals.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.TimeSeriesAPIforDigitalPortals.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<InlineResponse20010>("/prices/timeSeries/intraday/subsample/list", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostPricesTimeSeriesIntradaySubsampleList", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Subsampled intraday time series data for a notation. Subsampled intraday time series data for a notation. If a subsample&#39;s time range is not entirely within the maximally entitled time range, the subsample is excluded from the response.
        /// </summary>
        /// <exception cref="FactSet.SDK.TimeSeriesAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse20010</returns>
        public async System.Threading.Tasks.Task<InlineResponse20010> PostPricesTimeSeriesIntradaySubsampleListAsync(InlineObject8 body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            FactSet.SDK.TimeSeriesAPIforDigitalPortals.Client.ApiResponse<InlineResponse20010> localVarResponse = await PostPricesTimeSeriesIntradaySubsampleListWithHttpInfoAsync(body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Subsampled intraday time series data for a notation. Subsampled intraday time series data for a notation. If a subsample&#39;s time range is not entirely within the maximally entitled time range, the subsample is excluded from the response.
        /// </summary>
        /// <exception cref="FactSet.SDK.TimeSeriesAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse20010)</returns>
        public async System.Threading.Tasks.Task<FactSet.SDK.TimeSeriesAPIforDigitalPortals.Client.ApiResponse<InlineResponse20010>> PostPricesTimeSeriesIntradaySubsampleListWithHttpInfoAsync(InlineObject8 body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new FactSet.SDK.TimeSeriesAPIforDigitalPortals.Client.ApiException(400, "Missing required parameter 'body' when calling PricesApi->PostPricesTimeSeriesIntradaySubsampleList");


            FactSet.SDK.TimeSeriesAPIforDigitalPortals.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.TimeSeriesAPIforDigitalPortals.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = FactSet.SDK.TimeSeriesAPIforDigitalPortals.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = FactSet.SDK.TimeSeriesAPIforDigitalPortals.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.TimeSeriesAPIforDigitalPortals.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<InlineResponse20010>("/prices/timeSeries/intraday/subsample/list", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostPricesTimeSeriesIntradaySubsampleList", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
