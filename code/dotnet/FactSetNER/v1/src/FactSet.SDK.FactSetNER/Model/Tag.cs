/*
 * NER API
 *
 * Extract named entities and their FactSet entity IDs from given document text.
 *
 * The version of the OpenAPI document: 1.5.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = FactSet.SDK.FactSetNER.Client.OpenAPIDateConverter;

namespace FactSet.SDK.FactSetNER.Model
{
    /// <summary>
    /// Tag
    /// </summary>
    [DataContract(Name = "Tag")]
    public partial class Tag : IEquatable<Tag>, IValidatableObject
    {
        /// <summary>
        /// Type of the extracted named-entity (NE).
        /// </summary>
        /// <value>Type of the extracted named-entity (NE).</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TypeEnum
        {
            /// <summary>
            /// Enum GPE for value: NE_GPE
            /// </summary>
            [EnumMember(Value = "NE_GPE")]
            GPE = 1,

            /// <summary>
            /// Enum ORG for value: NE_ORG
            /// </summary>
            [EnumMember(Value = "NE_ORG")]
            ORG = 2,

            /// <summary>
            /// Enum PERSON for value: NE_PERSON
            /// </summary>
            [EnumMember(Value = "NE_PERSON")]
            PERSON = 3,

            /// <summary>
            /// Enum PHARMACEUTICAL for value: NE_PHARMACEUTICAL
            /// </summary>
            [EnumMember(Value = "NE_PHARMACEUTICAL")]
            PHARMACEUTICAL = 4,

            /// <summary>
            /// Enum DATETIME for value: NE_DATETIME
            /// </summary>
            [EnumMember(Value = "NE_DATETIME")]
            DATETIME = 5,

            /// <summary>
            /// Enum NUMBER for value: NE_NUMBER
            /// </summary>
            [EnumMember(Value = "NE_NUMBER")]
            NUMBER = 6,

            /// <summary>
            /// Enum MONEY for value: NE_MONEY
            /// </summary>
            [EnumMember(Value = "NE_MONEY")]
            MONEY = 7

        }


        /// <summary>
        /// Type of the extracted named-entity (NE).
        /// </summary>
        /// <value>Type of the extracted named-entity (NE).</value>
        [DataMember(Name = "type", EmitDefaultValue = false)]
        public TypeEnum? Type { get; set; }
        /// <summary>
        /// More specific sub-type (e.g., NE_COUNTRY) of the named-entity (if applicable).
        /// </summary>
        /// <value>More specific sub-type (e.g., NE_COUNTRY) of the named-entity (if applicable).</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum SubTypeEnum
        {
            /// <summary>
            /// Enum GENERICDRUG for value: NE_GENERIC_DRUG
            /// </summary>
            [EnumMember(Value = "NE_GENERIC_DRUG")]
            GENERICDRUG = 1,

            /// <summary>
            /// Enum BRANDEDDRUG for value: NE_BRANDED_DRUG
            /// </summary>
            [EnumMember(Value = "NE_BRANDED_DRUG")]
            BRANDEDDRUG = 2,

            /// <summary>
            /// Enum DRUGCLASS for value: NE_DRUG_CLASS
            /// </summary>
            [EnumMember(Value = "NE_DRUG_CLASS")]
            DRUGCLASS = 3,

            /// <summary>
            /// Enum PIPELINEDRUG for value: NE_PIPELINE_DRUG
            /// </summary>
            [EnumMember(Value = "NE_PIPELINE_DRUG")]
            PIPELINEDRUG = 4,

            /// <summary>
            /// Enum INDICATION for value: NE_INDICATION
            /// </summary>
            [EnumMember(Value = "NE_INDICATION")]
            INDICATION = 5

        }


        /// <summary>
        /// More specific sub-type (e.g., NE_COUNTRY) of the named-entity (if applicable).
        /// </summary>
        /// <value>More specific sub-type (e.g., NE_COUNTRY) of the named-entity (if applicable).</value>
        [DataMember(Name = "subType", EmitDefaultValue = false)]
        public SubTypeEnum? SubType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="Tag" /> class.
        /// </summary>
        /// <param name="type">Type of the extracted named-entity (NE)..</param>
        /// <param name="subType">More specific sub-type (e.g., NE_COUNTRY) of the named-entity (if applicable)..</param>
        /// <param name="text">Text for the named-entity (NE), as extracted from the given document..</param>
        /// <param name="score">score.</param>
        /// <param name="startChar">Starting character position of the named-entity text (relative to any offset provided (default offset&#x3D;0))..</param>
        /// <param name="endChar">Ending character position of the named-entity text (relative to any offset provided (default offset&#x3D;0)).</param>
        /// <param name="lookupText">Best-matching (FactSet) looked-up name for the extracted named-entity..</param>
        /// <param name="neId">Best-matching (FactSet) entity-id for the extracted named-entity.</param>
        public Tag(TypeEnum? type = default(TypeEnum?), SubTypeEnum? subType = default(SubTypeEnum?), string text = default(string), decimal score = default(decimal), int startChar = default(int), int endChar = default(int), string lookupText = default(string), string neId = default(string))
        {
            this.Type = type;
            this.SubType = subType;
            this.Text = text;
            this.Score = score;
            this.StartChar = startChar;
            this.EndChar = endChar;
            this.LookupText = lookupText;
            this.NeId = neId;
        }

        /// <summary>
        /// Text for the named-entity (NE), as extracted from the given document.
        /// </summary>
        /// <value>Text for the named-entity (NE), as extracted from the given document.</value>
        [DataMember(Name = "text", EmitDefaultValue = false)]
        public string Text { get; set; }

        /// <summary>
        /// Gets or Sets Score
        /// </summary>
        [DataMember(Name = "score", EmitDefaultValue = false)]
        public decimal Score { get; set; }

        /// <summary>
        /// Starting character position of the named-entity text (relative to any offset provided (default offset&#x3D;0)).
        /// </summary>
        /// <value>Starting character position of the named-entity text (relative to any offset provided (default offset&#x3D;0)).</value>
        [DataMember(Name = "startChar", EmitDefaultValue = false)]
        public int StartChar { get; set; }

        /// <summary>
        /// Ending character position of the named-entity text (relative to any offset provided (default offset&#x3D;0))
        /// </summary>
        /// <value>Ending character position of the named-entity text (relative to any offset provided (default offset&#x3D;0))</value>
        [DataMember(Name = "endChar", EmitDefaultValue = false)]
        public int EndChar { get; set; }

        /// <summary>
        /// Best-matching (FactSet) looked-up name for the extracted named-entity.
        /// </summary>
        /// <value>Best-matching (FactSet) looked-up name for the extracted named-entity.</value>
        [DataMember(Name = "lookupText", EmitDefaultValue = false)]
        public string LookupText { get; set; }

        /// <summary>
        /// Best-matching (FactSet) entity-id for the extracted named-entity
        /// </summary>
        /// <value>Best-matching (FactSet) entity-id for the extracted named-entity</value>
        [DataMember(Name = "neId", EmitDefaultValue = false)]
        public string NeId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Tag {\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  SubType: ").Append(SubType).Append("\n");
            sb.Append("  Text: ").Append(Text).Append("\n");
            sb.Append("  Score: ").Append(Score).Append("\n");
            sb.Append("  StartChar: ").Append(StartChar).Append("\n");
            sb.Append("  EndChar: ").Append(EndChar).Append("\n");
            sb.Append("  LookupText: ").Append(LookupText).Append("\n");
            sb.Append("  NeId: ").Append(NeId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Tag);
        }

        /// <summary>
        /// Returns true if Tag instances are equal
        /// </summary>
        /// <param name="input">Instance of Tag to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Tag input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Type == input.Type ||
                    this.Type.Equals(input.Type)
                ) && 
                (
                    this.SubType == input.SubType ||
                    this.SubType.Equals(input.SubType)
                ) && 
                (
                    this.Text == input.Text ||
                    (this.Text != null &&
                    this.Text.Equals(input.Text))
                ) && 
                (
                    this.Score == input.Score ||
                    this.Score.Equals(input.Score)
                ) && 
                (
                    this.StartChar == input.StartChar ||
                    this.StartChar.Equals(input.StartChar)
                ) && 
                (
                    this.EndChar == input.EndChar ||
                    this.EndChar.Equals(input.EndChar)
                ) && 
                (
                    this.LookupText == input.LookupText ||
                    (this.LookupText != null &&
                    this.LookupText.Equals(input.LookupText))
                ) && 
                (
                    this.NeId == input.NeId ||
                    (this.NeId != null &&
                    this.NeId.Equals(input.NeId))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.Type.GetHashCode();
                hashCode = (hashCode * 59) + this.SubType.GetHashCode();
                if (this.Text != null)
                {
                    hashCode = (hashCode * 59) + this.Text.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Score.GetHashCode();
                hashCode = (hashCode * 59) + this.StartChar.GetHashCode();
                hashCode = (hashCode * 59) + this.EndChar.GetHashCode();
                if (this.LookupText != null)
                {
                    hashCode = (hashCode * 59) + this.LookupText.GetHashCode();
                }
                if (this.NeId != null)
                {
                    hashCode = (hashCode * 59) + this.NeId.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            // Score (decimal) minimum
            if (this.Score < (decimal)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Score, must be a value greater than or equal to 0.", new [] { "Score" });
            }

            // StartChar (int) minimum
            if (this.StartChar < (int)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for StartChar, must be a value greater than or equal to 0.", new [] { "StartChar" });
            }

            // EndChar (int) minimum
            if (this.EndChar < (int)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for EndChar, must be a value greater than or equal to 0.", new [] { "EndChar" });
            }

            yield break;
        }
    }

}
