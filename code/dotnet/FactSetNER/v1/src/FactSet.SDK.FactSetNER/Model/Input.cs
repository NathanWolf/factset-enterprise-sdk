/*
 * NER API
 *
 * Extract named entities and their FactSet entity IDs from given document text.
 *
 * The version of the OpenAPI document: 1.5.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = FactSet.SDK.FactSetNER.Client.OpenAPIDateConverter;

namespace FactSet.SDK.FactSetNER.Model
{
    /// <summary>
    /// Input
    /// </summary>
    [DataContract(Name = "Input")]
    public partial class Input : IEquatable<Input>, IValidatableObject
    {
        /// <summary>
        /// Format of the Ids to return for the extracted named entities.
        /// </summary>
        /// <value>Format of the Ids to return for the extracted named entities.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum IdTypeEnum
        {
            /// <summary>
            /// Enum Iconum for value: iconum
            /// </summary>
            [EnumMember(Value = "iconum")]
            Iconum = 1,

            /// <summary>
            /// Enum EntityId for value: entityId
            /// </summary>
            [EnumMember(Value = "entityId")]
            EntityId = 2

        }


        /// <summary>
        /// Format of the Ids to return for the extracted named entities.
        /// </summary>
        /// <value>Format of the Ids to return for the extracted named entities.</value>
        [DataMember(Name = "idType", EmitDefaultValue = false)]
        public IdTypeEnum? IdType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="Input" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Input() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Input" /> class.
        /// </summary>
        /// <param name="text">Input-text (plain text (preferred) or HTML-formatted) of document to extract named-entities from. (required).</param>
        /// <param name="characterOffset">Offset to add to the returned named entity positions; useful if the given text input is not from the beginning of the original document..</param>
        /// <param name="idType">Format of the Ids to return for the extracted named entities. (default to IdTypeEnum.Iconum).</param>
        /// <param name="filterTagsWithoutId">Boolean flag, set True [False] to [not] drop named entities for which a matching Id could not be found. (default to true).</param>
        public Input(string text = default(string), int characterOffset = default(int), IdTypeEnum? idType = IdTypeEnum.Iconum, bool filterTagsWithoutId = true)
        {
            // to ensure "text" is required (not null)
            if (text == null) {
                throw new ArgumentNullException("text is a required property for Input and cannot be null");
            }
            this.Text = text;
            this.CharacterOffset = characterOffset;
            this.IdType = idType;
            this.FilterTagsWithoutId = filterTagsWithoutId;
        }

        /// <summary>
        /// Input-text (plain text (preferred) or HTML-formatted) of document to extract named-entities from.
        /// </summary>
        /// <value>Input-text (plain text (preferred) or HTML-formatted) of document to extract named-entities from.</value>
        [DataMember(Name = "text", IsRequired = true, EmitDefaultValue = false)]
        public string Text { get; set; }

        /// <summary>
        /// Offset to add to the returned named entity positions; useful if the given text input is not from the beginning of the original document.
        /// </summary>
        /// <value>Offset to add to the returned named entity positions; useful if the given text input is not from the beginning of the original document.</value>
        [DataMember(Name = "characterOffset", EmitDefaultValue = false)]
        public int CharacterOffset { get; set; }

        /// <summary>
        /// Boolean flag, set True [False] to [not] drop named entities for which a matching Id could not be found.
        /// </summary>
        /// <value>Boolean flag, set True [False] to [not] drop named entities for which a matching Id could not be found.</value>
        [DataMember(Name = "filterTagsWithoutId", EmitDefaultValue = true)]
        public bool FilterTagsWithoutId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Input {\n");
            sb.Append("  Text: ").Append(Text).Append("\n");
            sb.Append("  CharacterOffset: ").Append(CharacterOffset).Append("\n");
            sb.Append("  IdType: ").Append(IdType).Append("\n");
            sb.Append("  FilterTagsWithoutId: ").Append(FilterTagsWithoutId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Input);
        }

        /// <summary>
        /// Returns true if Input instances are equal
        /// </summary>
        /// <param name="input">Instance of Input to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Input input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Text == input.Text ||
                    (this.Text != null &&
                    this.Text.Equals(input.Text))
                ) && 
                (
                    this.CharacterOffset == input.CharacterOffset ||
                    this.CharacterOffset.Equals(input.CharacterOffset)
                ) && 
                (
                    this.IdType == input.IdType ||
                    this.IdType.Equals(input.IdType)
                ) && 
                (
                    this.FilterTagsWithoutId == input.FilterTagsWithoutId ||
                    this.FilterTagsWithoutId.Equals(input.FilterTagsWithoutId)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Text != null)
                {
                    hashCode = (hashCode * 59) + this.Text.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.CharacterOffset.GetHashCode();
                hashCode = (hashCode * 59) + this.IdType.GetHashCode();
                hashCode = (hashCode * 59) + this.FilterTagsWithoutId.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            // CharacterOffset (int) minimum
            if (this.CharacterOffset < (int)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for CharacterOffset, must be a value greater than or equal to 0.", new [] { "CharacterOffset" });
            }

            yield break;
        }
    }

}
