/*
 * FactSet NER
 *
 * Extract named entities and their FactSet entity IDs from given document text.
 *
 * The version of the OpenAPI document: 2.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = FactSet.SDK.FactSetNER.Client.OpenAPIDateConverter;

namespace FactSet.SDK.FactSetNER.Model
{
    /// <summary>
    /// AssociatedOrganization
    /// </summary>
    [DataContract(Name = "Associated_Organization")]
    public partial class AssociatedOrganization : IEquatable<AssociatedOrganization>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AssociatedOrganization" /> class.
        /// </summary>
        /// <param name="name">Name of the entity.</param>
        /// <param name="entityId">FactSet Entity ID for the entity.</param>
        /// <param name="lookupUrl">FactSet description of the entity.</param>
        public AssociatedOrganization(string name = default(string), string entityId = default(string), string lookupUrl = default(string))
        {
            this.Name = name;
            this.EntityId = entityId;
            this.LookupUrl = lookupUrl;
        }

        /// <summary>
        /// Name of the entity
        /// </summary>
        /// <value>Name of the entity</value>
        [DataMember(Name = "name", EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// FactSet Entity ID for the entity
        /// </summary>
        /// <value>FactSet Entity ID for the entity</value>
        [DataMember(Name = "entityId", EmitDefaultValue = false)]
        public string EntityId { get; set; }

        /// <summary>
        /// FactSet description of the entity
        /// </summary>
        /// <value>FactSet description of the entity</value>
        [DataMember(Name = "lookupUrl", EmitDefaultValue = false)]
        public string LookupUrl { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AssociatedOrganization {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  EntityId: ").Append(EntityId).Append("\n");
            sb.Append("  LookupUrl: ").Append(LookupUrl).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AssociatedOrganization);
        }

        /// <summary>
        /// Returns true if AssociatedOrganization instances are equal
        /// </summary>
        /// <param name="input">Instance of AssociatedOrganization to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AssociatedOrganization input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.EntityId == input.EntityId ||
                    (this.EntityId != null &&
                    this.EntityId.Equals(input.EntityId))
                ) && 
                (
                    this.LookupUrl == input.LookupUrl ||
                    (this.LookupUrl != null &&
                    this.LookupUrl.Equals(input.LookupUrl))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.EntityId != null)
                    hashCode = hashCode * 59 + this.EntityId.GetHashCode();
                if (this.LookupUrl != null)
                    hashCode = hashCode * 59 + this.LookupUrl.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
