/*
 * Watchlist API For Digital Portals
 *
 * Watchlists keeps track of users' individual investment objectives. They are meant to support the self-directed business of wealth management firms.  The Watchlist API for Digital Portals is fully integrated with the corresponding Quotes API, allowing access to detailed price and performance information of instruments in a watchlist. This also supports basic security identifier cross-reference. To complement the Watchlist API with direct access to price histories, please refer to the Time Series API for Digital Portals.
 *
 * The version of the OpenAPI document: 2
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = FactSet.SDK.WatchlistAPIforDigitalPortals.Client.OpenAPIDateConverter;

namespace FactSet.SDK.WatchlistAPIforDigitalPortals.Model
{
    /// <summary>
    /// The data member contains the request&#39;s primary data.
    /// </summary>
    [DataContract(Name = "_watchlist_position_create_data")]
    public partial class WatchlistPositionCreateData : IEquatable<WatchlistPositionCreateData>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="WatchlistPositionCreateData" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected WatchlistPositionCreateData() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="WatchlistPositionCreateData" /> class.
        /// </summary>
        /// <param name="id">Identifier of the watchlist. (required).</param>
        /// <param name="notation">notation.</param>
        /// <param name="comment">Personal note for the watchlist position..</param>
        public WatchlistPositionCreateData(string id,WatchlistPositionCreateDataNotation notation = default(WatchlistPositionCreateDataNotation), string comment = default(string))
        {
            // to ensure "id" is required (not null)
            if (id == null) {
                throw new ArgumentNullException("id is a required property for WatchlistPositionCreateData and cannot be null");
            }
            this.Id = id;
            this.Notation = notation;
            this.Comment = comment;
        }

        /// <summary>
        /// Identifier of the watchlist.
        /// </summary>
        /// <value>Identifier of the watchlist.</value>
        [DataMember(Name = "id", IsRequired = true, EmitDefaultValue = false)]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets Notation
        /// </summary>
        [DataMember(Name = "notation", EmitDefaultValue = false)]
        public WatchlistPositionCreateDataNotation Notation { get; set; }

        /// <summary>
        /// Personal note for the watchlist position.
        /// </summary>
        /// <value>Personal note for the watchlist position.</value>
        [DataMember(Name = "comment", EmitDefaultValue = false)]
        public string Comment { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class WatchlistPositionCreateData {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Notation: ").Append(Notation).Append("\n");
            sb.Append("  Comment: ").Append(Comment).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as WatchlistPositionCreateData);
        }

        /// <summary>
        /// Returns true if WatchlistPositionCreateData instances are equal
        /// </summary>
        /// <param name="input">Instance of WatchlistPositionCreateData to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(WatchlistPositionCreateData input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Notation == input.Notation ||
                    (this.Notation != null &&
                    this.Notation.Equals(input.Notation))
                ) && 
                (
                    this.Comment == input.Comment ||
                    (this.Comment != null &&
                    this.Comment.Equals(input.Comment))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                {
                    hashCode = (hashCode * 59) + this.Id.GetHashCode();
                }
                if (this.Notation != null)
                {
                    hashCode = (hashCode * 59) + this.Notation.GetHashCode();
                }
                if (this.Comment != null)
                {
                    hashCode = (hashCode * 59) + this.Comment.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            // Comment (string) maxLength
            if (this.Comment != null && this.Comment.Length > 200)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Comment, length must be less than 200.", new [] { "Comment" });
            }

            // Comment (string) pattern
            Regex regexComment = new Regex(@"^[\\u0020-\\u005d\\u005f\\u0061-\\u007e\\u00c0-\\u00ff\\u20ac]*$", RegexOptions.CultureInvariant);
            if (false == regexComment.Match(this.Comment).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Comment, must match a pattern of " + regexComment, new [] { "Comment" });
            }

            yield break;
        }
    }

}
