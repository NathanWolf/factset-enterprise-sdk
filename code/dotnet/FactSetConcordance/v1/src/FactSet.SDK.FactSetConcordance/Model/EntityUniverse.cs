/*
 * FactSet Concordance API
 *
 * The FactSet Concordance API provides the ability to programmatically look up several types of entities by their name and other attributes. It attempts to match attributes that you supply for the entity and returns as many match candidates as it can find. The result is a \"concorded\" FactSet Entity Permanent identifier.  The Entity Identifier can then be used as input throughout FactSet's Content soultions, such as Content APIs and Standard DataFeeds.<p> There are types of workflows supported in the API. The first workflow type follows traditional API conventions in that a request is accepted and a response is returned synchronously. The second workflow type involves a background task. With this workflow, a task is created for uploading a set of queries, and then the client polls for the task to complete. Once the task has completed, the client retrieves the concordance results throught the decisions endpoint.</p> 
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: api@factset.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = FactSet.SDK.FactSetConcordance.Client.OpenAPIDateConverter;

namespace FactSet.SDK.FactSetConcordance.Model
{
    /// <summary>
    /// Universe Statistics and array of &#x60;Entity Mapping&#x60; objects. Universes are defined by the users FactSet USERNAME only, and not USERNAME-SERIAL.
    /// </summary>
    [DataContract(Name = "EntityUniverse")]
    public partial class EntityUniverse : IEquatable<EntityUniverse>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EntityUniverse" /> class.
        /// </summary>
        /// <param name="totalCount">Total number of entities in the universe.</param>
        /// <param name="mappedCount">Number of MAPPED entities in the universe.</param>
        /// <param name="indeterminateCount">Number of INDETERMINATE entities in the universe.</param>
        /// <param name="unmappedCount">Number of UNMAPPED entities in the universe.</param>
        /// <param name="entities">entities.</param>
        public EntityUniverse(int totalCount = default(int), int mappedCount = default(int), int indeterminateCount = default(int), int unmappedCount = default(int), List<EntityMapping> entities = default(List<EntityMapping>))
        {
            this.TotalCount = totalCount;
            this.MappedCount = mappedCount;
            this.IndeterminateCount = indeterminateCount;
            this.UnmappedCount = unmappedCount;
            this.Entities = entities;
        }

        /// <summary>
        /// Total number of entities in the universe
        /// </summary>
        /// <value>Total number of entities in the universe</value>
        [DataMember(Name = "totalCount", EmitDefaultValue = false)]
        public int TotalCount { get; set; }

        /// <summary>
        /// Number of MAPPED entities in the universe
        /// </summary>
        /// <value>Number of MAPPED entities in the universe</value>
        [DataMember(Name = "mappedCount", EmitDefaultValue = false)]
        public int MappedCount { get; set; }

        /// <summary>
        /// Number of INDETERMINATE entities in the universe
        /// </summary>
        /// <value>Number of INDETERMINATE entities in the universe</value>
        [DataMember(Name = "indeterminateCount", EmitDefaultValue = false)]
        public int IndeterminateCount { get; set; }

        /// <summary>
        /// Number of UNMAPPED entities in the universe
        /// </summary>
        /// <value>Number of UNMAPPED entities in the universe</value>
        [DataMember(Name = "unmappedCount", EmitDefaultValue = false)]
        public int UnmappedCount { get; set; }

        /// <summary>
        /// Gets or Sets Entities
        /// </summary>
        [DataMember(Name = "entities", EmitDefaultValue = false)]
        public List<EntityMapping> Entities { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class EntityUniverse {\n");
            sb.Append("  TotalCount: ").Append(TotalCount).Append("\n");
            sb.Append("  MappedCount: ").Append(MappedCount).Append("\n");
            sb.Append("  IndeterminateCount: ").Append(IndeterminateCount).Append("\n");
            sb.Append("  UnmappedCount: ").Append(UnmappedCount).Append("\n");
            sb.Append("  Entities: ").Append(Entities).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as EntityUniverse);
        }

        /// <summary>
        /// Returns true if EntityUniverse instances are equal
        /// </summary>
        /// <param name="input">Instance of EntityUniverse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(EntityUniverse input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.TotalCount == input.TotalCount ||
                    this.TotalCount.Equals(input.TotalCount)
                ) && 
                (
                    this.MappedCount == input.MappedCount ||
                    this.MappedCount.Equals(input.MappedCount)
                ) && 
                (
                    this.IndeterminateCount == input.IndeterminateCount ||
                    this.IndeterminateCount.Equals(input.IndeterminateCount)
                ) && 
                (
                    this.UnmappedCount == input.UnmappedCount ||
                    this.UnmappedCount.Equals(input.UnmappedCount)
                ) && 
                (
                    this.Entities == input.Entities ||
                    this.Entities != null &&
                    input.Entities != null &&
                    this.Entities.SequenceEqual(input.Entities)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = hashCode * 59 + this.TotalCount.GetHashCode();
                hashCode = hashCode * 59 + this.MappedCount.GetHashCode();
                hashCode = hashCode * 59 + this.IndeterminateCount.GetHashCode();
                hashCode = hashCode * 59 + this.UnmappedCount.GetHashCode();
                if (this.Entities != null)
                    hashCode = hashCode * 59 + this.Entities.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
