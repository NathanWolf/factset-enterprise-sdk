/*
 * FactSet Concordance API
 *
 * The FactSet Concordance API provides the ability to programmatically look up several types of entities by their name and other attributes. It attempts to match attributes that you supply for the entity and returns as many match candidates as it can find. The result is a \"concorded\" FactSet Entity Permanent identifier.  The Entity Identifier can then be used as input throughout FactSet's Content soultions, such as Content APIs and Standard DataFeeds.<p> There are types of workflows supported in the API. The first workflow type follows traditional API conventions in that a request is accepted and a response is returned synchronously. The second workflow type involves a background task. With this workflow, a task is created for uploading a set of queries, and then the client polls for the task to complete. Once the task has completed, the client retrieves the concordance results throught the decisions endpoint.</p> 
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: api@factset.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using FactSet.SDK.FactSetConcordance.Client;
using FactSet.SDK.FactSetConcordance.Model;
using FactSet.SDK.Utils.Authentication;

namespace FactSet.SDK.FactSetConcordance.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IEntityMatchBulkApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Input a file with names and attributes, creating a taskId.
        /// </summary>
        /// <remarks>
        /// Upload a Comma-Separated List file (.csv / UTF-8 encoding) with a list of names and attributes and receive a &#x60;taskId&#x60;. The taskId is then used for reference in the *_/entity-task-status* and *_/entity-decisions* endpoints to receive results once the task is successful. &lt;p&gt; **Number of ids is limited to 10,000 ids per upload file.** &lt;/p&gt;&lt;p&gt;This is the first step in the overall \&quot;Bulk\&quot; workflow. Use the /entity-task-status endpoint to check the status.&lt;/p&gt; 
        /// </remarks>
        /// <exception cref="FactSet.SDK.FactSetConcordance.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskName">User defined name for the task that will be used to name the output files.</param>
        /// <param name="inputFile">The UTF-8 encoded CSV File containing the entity names to be concorded to a FactSet Entity Identifier. The files first row **MUST** include headers as defined in the *Column parameters. Be mindful of casing and spacing in column headers. Only 10,001 rows are accepted, including the Header row. The input file is posted as a file object in the form. For this reason, the mime type of this post request must be multipart/form-data. </param>
        /// <param name="clientIdColumn">Header Name of the column in the input file that contains a unique identifier supplied by the user referred to as a \\\&quot;clientId\\\&quot;. This clientId can be used to create custom mappings or references. </param>
        /// <param name="nameColumn">Header name of the column in the input file that contains the Entity Name to be matched. </param>
        /// <param name="countryColumn">Header Name of the column in the input file that contains the country&#39;s ISO Code. This is used to filter the candidates before taking a match decision.  (optional)</param>
        /// <param name="urlColumn">Header Name of the column in the input file that contains the Entity&#39;s URL. URL corresponding to the entity name that is used when evaluating candidates for a match.  (optional)</param>
        /// <param name="stateColumn">Header Name of the column in the input file that contains the two letter State Code of the state or province where the Entity is located. Currently, only US state codes are supported.  (optional)</param>
        /// <param name="includeEntityType">Three-character FactSet entity type code used to filter candidates in order to determine the final match result. Only candidates with an entity type specified will be considered for the final match result. Multiple types can be entered separated by commas. **Do not include within &#x60;inputFile&#x60;.**  (optional)</param>
        /// <param name="excludeEntityType">Three-character FactSet entity type code used to filter candidates in order to determine the final match result. Entities with these types will be excluded from the decisions. It is a global option used to filter the candidates before taking a match decision. Candidates with an entity type specified will *not* be considered for the final match result. **Do not include within &#x60;inputFile&#x60;.**  (optional)</param>
        /// <param name="includeEntitySubType">Two-character FactSet entity subtype code used to filter candidates in order to determine the final match result. Only candidates with an entity subtype specified will be considered for the final match result. Multiple types can be entered separated by commas. **Do not include within &#x60;inputFile&#x60;.**  (optional)</param>
        /// <param name="excludeEntitySubType">Two-character FactSet entity subtype code used to filter candidates in order to determine the final match result. Candidates with an entity subtype specified will *not* be considered for the final match result. Multiple types can be entered separated by commas. **Do not include within &#x60;inputFile&#x60;.**  (optional)</param>
        /// <returns>EntityTaskResponse</returns>
        EntityTaskResponse CreateEntityTask(string taskName, System.IO.Stream inputFile, string clientIdColumn, string nameColumn, string countryColumn = default(string), string urlColumn = default(string), string stateColumn = default(string), List<string> includeEntityType = default(List<string>), List<string> excludeEntityType = default(List<string>), List<string> includeEntitySubType = default(List<string>), List<string> excludeEntitySubType = default(List<string>));

        /// <summary>
        /// Input a file with names and attributes, creating a taskId.
        /// </summary>
        /// <remarks>
        /// Upload a Comma-Separated List file (.csv / UTF-8 encoding) with a list of names and attributes and receive a &#x60;taskId&#x60;. The taskId is then used for reference in the *_/entity-task-status* and *_/entity-decisions* endpoints to receive results once the task is successful. &lt;p&gt; **Number of ids is limited to 10,000 ids per upload file.** &lt;/p&gt;&lt;p&gt;This is the first step in the overall \&quot;Bulk\&quot; workflow. Use the /entity-task-status endpoint to check the status.&lt;/p&gt; 
        /// </remarks>
        /// <exception cref="FactSet.SDK.FactSetConcordance.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskName">User defined name for the task that will be used to name the output files.</param>
        /// <param name="inputFile">The UTF-8 encoded CSV File containing the entity names to be concorded to a FactSet Entity Identifier. The files first row **MUST** include headers as defined in the *Column parameters. Be mindful of casing and spacing in column headers. Only 10,001 rows are accepted, including the Header row. The input file is posted as a file object in the form. For this reason, the mime type of this post request must be multipart/form-data. </param>
        /// <param name="clientIdColumn">Header Name of the column in the input file that contains a unique identifier supplied by the user referred to as a \\\&quot;clientId\\\&quot;. This clientId can be used to create custom mappings or references. </param>
        /// <param name="nameColumn">Header name of the column in the input file that contains the Entity Name to be matched. </param>
        /// <param name="countryColumn">Header Name of the column in the input file that contains the country&#39;s ISO Code. This is used to filter the candidates before taking a match decision.  (optional)</param>
        /// <param name="urlColumn">Header Name of the column in the input file that contains the Entity&#39;s URL. URL corresponding to the entity name that is used when evaluating candidates for a match.  (optional)</param>
        /// <param name="stateColumn">Header Name of the column in the input file that contains the two letter State Code of the state or province where the Entity is located. Currently, only US state codes are supported.  (optional)</param>
        /// <param name="includeEntityType">Three-character FactSet entity type code used to filter candidates in order to determine the final match result. Only candidates with an entity type specified will be considered for the final match result. Multiple types can be entered separated by commas. **Do not include within &#x60;inputFile&#x60;.**  (optional)</param>
        /// <param name="excludeEntityType">Three-character FactSet entity type code used to filter candidates in order to determine the final match result. Entities with these types will be excluded from the decisions. It is a global option used to filter the candidates before taking a match decision. Candidates with an entity type specified will *not* be considered for the final match result. **Do not include within &#x60;inputFile&#x60;.**  (optional)</param>
        /// <param name="includeEntitySubType">Two-character FactSet entity subtype code used to filter candidates in order to determine the final match result. Only candidates with an entity subtype specified will be considered for the final match result. Multiple types can be entered separated by commas. **Do not include within &#x60;inputFile&#x60;.**  (optional)</param>
        /// <param name="excludeEntitySubType">Two-character FactSet entity subtype code used to filter candidates in order to determine the final match result. Candidates with an entity subtype specified will *not* be considered for the final match result. Multiple types can be entered separated by commas. **Do not include within &#x60;inputFile&#x60;.**  (optional)</param>
        /// <returns>ApiResponse of EntityTaskResponse</returns>
        ApiResponse<EntityTaskResponse> CreateEntityTaskWithHttpInfo(string taskName, System.IO.Stream inputFile, string clientIdColumn, string nameColumn, string countryColumn = default(string), string urlColumn = default(string), string stateColumn = default(string), List<string> includeEntityType = default(List<string>), List<string> excludeEntityType = default(List<string>), List<string> includeEntitySubType = default(List<string>), List<string> excludeEntitySubType = default(List<string>));
        /// <summary>
        /// Get the decisions of matches for the requested taskId.
        /// </summary>
        /// <remarks>
        /// Retrieves the &#x60;Decision&#x60; objects for an Entity Task (taskId). The decisions do not include all candidates, but rather the status of concording the requested list of names included in the input file. Mapped entities will include a FactSet Entity Identifier (-E). 
        /// </remarks>
        /// <exception cref="FactSet.SDK.FactSetConcordance.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">Concordance Task Identifier. The taskId is created in response from the /entity-task endpoint.</param>
        /// <param name="offset">Starting row for records to return or rows to skip. (optional, default to 0)</param>
        /// <param name="limit">Limits the number of records in the response. (optional)</param>
        /// <returns>EntityDecisionsResponse</returns>
        EntityDecisionsResponse GetEntityDecisions(int taskId, int? offset = default(int?), int? limit = default(int?));

        /// <summary>
        /// Get the decisions of matches for the requested taskId.
        /// </summary>
        /// <remarks>
        /// Retrieves the &#x60;Decision&#x60; objects for an Entity Task (taskId). The decisions do not include all candidates, but rather the status of concording the requested list of names included in the input file. Mapped entities will include a FactSet Entity Identifier (-E). 
        /// </remarks>
        /// <exception cref="FactSet.SDK.FactSetConcordance.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">Concordance Task Identifier. The taskId is created in response from the /entity-task endpoint.</param>
        /// <param name="offset">Starting row for records to return or rows to skip. (optional, default to 0)</param>
        /// <param name="limit">Limits the number of records in the response. (optional)</param>
        /// <returns>ApiResponse of EntityDecisionsResponse</returns>
        ApiResponse<EntityDecisionsResponse> GetEntityDecisionsWithHttpInfo(int taskId, int? offset = default(int?), int? limit = default(int?));
        /// <summary>
        /// Gets the status of the requested taskId or all tasks for a User
        /// </summary>
        /// <remarks>
        /// Pulls the **status** for ALL the Entity Tasks submitted by a client within the last 30 days, and related details such as task duration and decision rates. Specific Tasks can also be retrieved by using the _taskId_ parameter.&lt;p&gt;Status types include -   * PENDING - The task has not yet started.   * IN_PROGRESS - The task is submitted and decisions are in progress.   * SUCCESS - The task was successful! Move to the /entity-decisions endpoint to retrieve decisions.   * FAILURE - The task failed. Reach out to FactSet Support for assistance.   * BAD_REQUEST - The task creation was unsuccesfull. Typically occurs with an incorrect input file format or column headers.   * ABORTED - The task was aborted. 
        /// </remarks>
        /// <exception cref="FactSet.SDK.FactSetConcordance.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">Concordance Task Identifier. The taskId is created in response from the /entity-task endpoint. (optional)</param>
        /// <param name="offset">Starting row for records to return or rows to skip. (optional, default to 0)</param>
        /// <param name="limit">Limits the number of records in the response. (optional)</param>
        /// <param name="status">Filter on the status of the Concordance Tasks. Default is no filter.   * PENDING - The task has not yet started   * IN_PROGRESS - The task is submitted and decisions are in progress.   * SUCCESS - The task was successful! Move to the /entity-decisions endpoint to retrieve decisions.   * FAILURE - The task failed. Reach out to FactSet Support for assistance.   * BAD_REQUEST - The task creation was unsuccesfull. Typically occurs with an incorrect input file format or column headers.   * ABORTED - The task was aborted.  (optional)</param>
        /// <returns>EntityTaskStatusResponse</returns>
        EntityTaskStatusResponse GetEntityTaskStatus(int? taskId = default(int?), int? offset = default(int?), int? limit = default(int?), List<string> status = default(List<string>));

        /// <summary>
        /// Gets the status of the requested taskId or all tasks for a User
        /// </summary>
        /// <remarks>
        /// Pulls the **status** for ALL the Entity Tasks submitted by a client within the last 30 days, and related details such as task duration and decision rates. Specific Tasks can also be retrieved by using the _taskId_ parameter.&lt;p&gt;Status types include -   * PENDING - The task has not yet started.   * IN_PROGRESS - The task is submitted and decisions are in progress.   * SUCCESS - The task was successful! Move to the /entity-decisions endpoint to retrieve decisions.   * FAILURE - The task failed. Reach out to FactSet Support for assistance.   * BAD_REQUEST - The task creation was unsuccesfull. Typically occurs with an incorrect input file format or column headers.   * ABORTED - The task was aborted. 
        /// </remarks>
        /// <exception cref="FactSet.SDK.FactSetConcordance.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">Concordance Task Identifier. The taskId is created in response from the /entity-task endpoint. (optional)</param>
        /// <param name="offset">Starting row for records to return or rows to skip. (optional, default to 0)</param>
        /// <param name="limit">Limits the number of records in the response. (optional)</param>
        /// <param name="status">Filter on the status of the Concordance Tasks. Default is no filter.   * PENDING - The task has not yet started   * IN_PROGRESS - The task is submitted and decisions are in progress.   * SUCCESS - The task was successful! Move to the /entity-decisions endpoint to retrieve decisions.   * FAILURE - The task failed. Reach out to FactSet Support for assistance.   * BAD_REQUEST - The task creation was unsuccesfull. Typically occurs with an incorrect input file format or column headers.   * ABORTED - The task was aborted.  (optional)</param>
        /// <returns>ApiResponse of EntityTaskStatusResponse</returns>
        ApiResponse<EntityTaskStatusResponse> GetEntityTaskStatusWithHttpInfo(int? taskId = default(int?), int? offset = default(int?), int? limit = default(int?), List<string> status = default(List<string>));
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IEntityMatchBulkApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Input a file with names and attributes, creating a taskId.
        /// </summary>
        /// <remarks>
        /// Upload a Comma-Separated List file (.csv / UTF-8 encoding) with a list of names and attributes and receive a &#x60;taskId&#x60;. The taskId is then used for reference in the *_/entity-task-status* and *_/entity-decisions* endpoints to receive results once the task is successful. &lt;p&gt; **Number of ids is limited to 10,000 ids per upload file.** &lt;/p&gt;&lt;p&gt;This is the first step in the overall \&quot;Bulk\&quot; workflow. Use the /entity-task-status endpoint to check the status.&lt;/p&gt; 
        /// </remarks>
        /// <exception cref="FactSet.SDK.FactSetConcordance.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskName">User defined name for the task that will be used to name the output files.</param>
        /// <param name="inputFile">The UTF-8 encoded CSV File containing the entity names to be concorded to a FactSet Entity Identifier. The files first row **MUST** include headers as defined in the *Column parameters. Be mindful of casing and spacing in column headers. Only 10,001 rows are accepted, including the Header row. The input file is posted as a file object in the form. For this reason, the mime type of this post request must be multipart/form-data. </param>
        /// <param name="clientIdColumn">Header Name of the column in the input file that contains a unique identifier supplied by the user referred to as a \\\&quot;clientId\\\&quot;. This clientId can be used to create custom mappings or references. </param>
        /// <param name="nameColumn">Header name of the column in the input file that contains the Entity Name to be matched. </param>
        /// <param name="countryColumn">Header Name of the column in the input file that contains the country&#39;s ISO Code. This is used to filter the candidates before taking a match decision.  (optional)</param>
        /// <param name="urlColumn">Header Name of the column in the input file that contains the Entity&#39;s URL. URL corresponding to the entity name that is used when evaluating candidates for a match.  (optional)</param>
        /// <param name="stateColumn">Header Name of the column in the input file that contains the two letter State Code of the state or province where the Entity is located. Currently, only US state codes are supported.  (optional)</param>
        /// <param name="includeEntityType">Three-character FactSet entity type code used to filter candidates in order to determine the final match result. Only candidates with an entity type specified will be considered for the final match result. Multiple types can be entered separated by commas. **Do not include within &#x60;inputFile&#x60;.**  (optional)</param>
        /// <param name="excludeEntityType">Three-character FactSet entity type code used to filter candidates in order to determine the final match result. Entities with these types will be excluded from the decisions. It is a global option used to filter the candidates before taking a match decision. Candidates with an entity type specified will *not* be considered for the final match result. **Do not include within &#x60;inputFile&#x60;.**  (optional)</param>
        /// <param name="includeEntitySubType">Two-character FactSet entity subtype code used to filter candidates in order to determine the final match result. Only candidates with an entity subtype specified will be considered for the final match result. Multiple types can be entered separated by commas. **Do not include within &#x60;inputFile&#x60;.**  (optional)</param>
        /// <param name="excludeEntitySubType">Two-character FactSet entity subtype code used to filter candidates in order to determine the final match result. Candidates with an entity subtype specified will *not* be considered for the final match result. Multiple types can be entered separated by commas. **Do not include within &#x60;inputFile&#x60;.**  (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EntityTaskResponse</returns>
        System.Threading.Tasks.Task<EntityTaskResponse> CreateEntityTaskAsync(string taskName, System.IO.Stream inputFile, string clientIdColumn, string nameColumn, string countryColumn = default(string), string urlColumn = default(string), string stateColumn = default(string), List<string> includeEntityType = default(List<string>), List<string> excludeEntityType = default(List<string>), List<string> includeEntitySubType = default(List<string>), List<string> excludeEntitySubType = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Input a file with names and attributes, creating a taskId.
        /// </summary>
        /// <remarks>
        /// Upload a Comma-Separated List file (.csv / UTF-8 encoding) with a list of names and attributes and receive a &#x60;taskId&#x60;. The taskId is then used for reference in the *_/entity-task-status* and *_/entity-decisions* endpoints to receive results once the task is successful. &lt;p&gt; **Number of ids is limited to 10,000 ids per upload file.** &lt;/p&gt;&lt;p&gt;This is the first step in the overall \&quot;Bulk\&quot; workflow. Use the /entity-task-status endpoint to check the status.&lt;/p&gt; 
        /// </remarks>
        /// <exception cref="FactSet.SDK.FactSetConcordance.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskName">User defined name for the task that will be used to name the output files.</param>
        /// <param name="inputFile">The UTF-8 encoded CSV File containing the entity names to be concorded to a FactSet Entity Identifier. The files first row **MUST** include headers as defined in the *Column parameters. Be mindful of casing and spacing in column headers. Only 10,001 rows are accepted, including the Header row. The input file is posted as a file object in the form. For this reason, the mime type of this post request must be multipart/form-data. </param>
        /// <param name="clientIdColumn">Header Name of the column in the input file that contains a unique identifier supplied by the user referred to as a \\\&quot;clientId\\\&quot;. This clientId can be used to create custom mappings or references. </param>
        /// <param name="nameColumn">Header name of the column in the input file that contains the Entity Name to be matched. </param>
        /// <param name="countryColumn">Header Name of the column in the input file that contains the country&#39;s ISO Code. This is used to filter the candidates before taking a match decision.  (optional)</param>
        /// <param name="urlColumn">Header Name of the column in the input file that contains the Entity&#39;s URL. URL corresponding to the entity name that is used when evaluating candidates for a match.  (optional)</param>
        /// <param name="stateColumn">Header Name of the column in the input file that contains the two letter State Code of the state or province where the Entity is located. Currently, only US state codes are supported.  (optional)</param>
        /// <param name="includeEntityType">Three-character FactSet entity type code used to filter candidates in order to determine the final match result. Only candidates with an entity type specified will be considered for the final match result. Multiple types can be entered separated by commas. **Do not include within &#x60;inputFile&#x60;.**  (optional)</param>
        /// <param name="excludeEntityType">Three-character FactSet entity type code used to filter candidates in order to determine the final match result. Entities with these types will be excluded from the decisions. It is a global option used to filter the candidates before taking a match decision. Candidates with an entity type specified will *not* be considered for the final match result. **Do not include within &#x60;inputFile&#x60;.**  (optional)</param>
        /// <param name="includeEntitySubType">Two-character FactSet entity subtype code used to filter candidates in order to determine the final match result. Only candidates with an entity subtype specified will be considered for the final match result. Multiple types can be entered separated by commas. **Do not include within &#x60;inputFile&#x60;.**  (optional)</param>
        /// <param name="excludeEntitySubType">Two-character FactSet entity subtype code used to filter candidates in order to determine the final match result. Candidates with an entity subtype specified will *not* be considered for the final match result. Multiple types can be entered separated by commas. **Do not include within &#x60;inputFile&#x60;.**  (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EntityTaskResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<EntityTaskResponse>> CreateEntityTaskWithHttpInfoAsync(string taskName, System.IO.Stream inputFile, string clientIdColumn, string nameColumn, string countryColumn = default(string), string urlColumn = default(string), string stateColumn = default(string), List<string> includeEntityType = default(List<string>), List<string> excludeEntityType = default(List<string>), List<string> includeEntitySubType = default(List<string>), List<string> excludeEntitySubType = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get the decisions of matches for the requested taskId.
        /// </summary>
        /// <remarks>
        /// Retrieves the &#x60;Decision&#x60; objects for an Entity Task (taskId). The decisions do not include all candidates, but rather the status of concording the requested list of names included in the input file. Mapped entities will include a FactSet Entity Identifier (-E). 
        /// </remarks>
        /// <exception cref="FactSet.SDK.FactSetConcordance.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">Concordance Task Identifier. The taskId is created in response from the /entity-task endpoint.</param>
        /// <param name="offset">Starting row for records to return or rows to skip. (optional, default to 0)</param>
        /// <param name="limit">Limits the number of records in the response. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EntityDecisionsResponse</returns>
        System.Threading.Tasks.Task<EntityDecisionsResponse> GetEntityDecisionsAsync(int taskId, int? offset = default(int?), int? limit = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get the decisions of matches for the requested taskId.
        /// </summary>
        /// <remarks>
        /// Retrieves the &#x60;Decision&#x60; objects for an Entity Task (taskId). The decisions do not include all candidates, but rather the status of concording the requested list of names included in the input file. Mapped entities will include a FactSet Entity Identifier (-E). 
        /// </remarks>
        /// <exception cref="FactSet.SDK.FactSetConcordance.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">Concordance Task Identifier. The taskId is created in response from the /entity-task endpoint.</param>
        /// <param name="offset">Starting row for records to return or rows to skip. (optional, default to 0)</param>
        /// <param name="limit">Limits the number of records in the response. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EntityDecisionsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<EntityDecisionsResponse>> GetEntityDecisionsWithHttpInfoAsync(int taskId, int? offset = default(int?), int? limit = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Gets the status of the requested taskId or all tasks for a User
        /// </summary>
        /// <remarks>
        /// Pulls the **status** for ALL the Entity Tasks submitted by a client within the last 30 days, and related details such as task duration and decision rates. Specific Tasks can also be retrieved by using the _taskId_ parameter.&lt;p&gt;Status types include -   * PENDING - The task has not yet started.   * IN_PROGRESS - The task is submitted and decisions are in progress.   * SUCCESS - The task was successful! Move to the /entity-decisions endpoint to retrieve decisions.   * FAILURE - The task failed. Reach out to FactSet Support for assistance.   * BAD_REQUEST - The task creation was unsuccesfull. Typically occurs with an incorrect input file format or column headers.   * ABORTED - The task was aborted. 
        /// </remarks>
        /// <exception cref="FactSet.SDK.FactSetConcordance.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">Concordance Task Identifier. The taskId is created in response from the /entity-task endpoint. (optional)</param>
        /// <param name="offset">Starting row for records to return or rows to skip. (optional, default to 0)</param>
        /// <param name="limit">Limits the number of records in the response. (optional)</param>
        /// <param name="status">Filter on the status of the Concordance Tasks. Default is no filter.   * PENDING - The task has not yet started   * IN_PROGRESS - The task is submitted and decisions are in progress.   * SUCCESS - The task was successful! Move to the /entity-decisions endpoint to retrieve decisions.   * FAILURE - The task failed. Reach out to FactSet Support for assistance.   * BAD_REQUEST - The task creation was unsuccesfull. Typically occurs with an incorrect input file format or column headers.   * ABORTED - The task was aborted.  (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EntityTaskStatusResponse</returns>
        System.Threading.Tasks.Task<EntityTaskStatusResponse> GetEntityTaskStatusAsync(int? taskId = default(int?), int? offset = default(int?), int? limit = default(int?), List<string> status = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Gets the status of the requested taskId or all tasks for a User
        /// </summary>
        /// <remarks>
        /// Pulls the **status** for ALL the Entity Tasks submitted by a client within the last 30 days, and related details such as task duration and decision rates. Specific Tasks can also be retrieved by using the _taskId_ parameter.&lt;p&gt;Status types include -   * PENDING - The task has not yet started.   * IN_PROGRESS - The task is submitted and decisions are in progress.   * SUCCESS - The task was successful! Move to the /entity-decisions endpoint to retrieve decisions.   * FAILURE - The task failed. Reach out to FactSet Support for assistance.   * BAD_REQUEST - The task creation was unsuccesfull. Typically occurs with an incorrect input file format or column headers.   * ABORTED - The task was aborted. 
        /// </remarks>
        /// <exception cref="FactSet.SDK.FactSetConcordance.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">Concordance Task Identifier. The taskId is created in response from the /entity-task endpoint. (optional)</param>
        /// <param name="offset">Starting row for records to return or rows to skip. (optional, default to 0)</param>
        /// <param name="limit">Limits the number of records in the response. (optional)</param>
        /// <param name="status">Filter on the status of the Concordance Tasks. Default is no filter.   * PENDING - The task has not yet started   * IN_PROGRESS - The task is submitted and decisions are in progress.   * SUCCESS - The task was successful! Move to the /entity-decisions endpoint to retrieve decisions.   * FAILURE - The task failed. Reach out to FactSet Support for assistance.   * BAD_REQUEST - The task creation was unsuccesfull. Typically occurs with an incorrect input file format or column headers.   * ABORTED - The task was aborted.  (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EntityTaskStatusResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<EntityTaskStatusResponse>> GetEntityTaskStatusWithHttpInfoAsync(int? taskId = default(int?), int? offset = default(int?), int? limit = default(int?), List<string> status = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IEntityMatchBulkApi : IEntityMatchBulkApiSync, IEntityMatchBulkApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class EntityMatchBulkApi : IEntityMatchBulkApi
    {
        private FactSet.SDK.FactSetConcordance.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="EntityMatchBulkApi"/> class.
        /// </summary>
        /// <returns></returns>
        public EntityMatchBulkApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="EntityMatchBulkApi"/> class.
        /// </summary>
        /// <returns></returns>
        public EntityMatchBulkApi(string basePath)
        {
            this.Configuration = FactSet.SDK.FactSetConcordance.Client.Configuration.MergeConfigurations(
                FactSet.SDK.FactSetConcordance.Client.GlobalConfiguration.Instance,
                new FactSet.SDK.FactSetConcordance.Client.Configuration { BasePath = basePath }
            );
            this.Client = new FactSet.SDK.FactSetConcordance.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new FactSet.SDK.FactSetConcordance.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = FactSet.SDK.FactSetConcordance.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="EntityMatchBulkApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public EntityMatchBulkApi(FactSet.SDK.FactSetConcordance.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = FactSet.SDK.FactSetConcordance.Client.Configuration.MergeConfigurations(
                FactSet.SDK.FactSetConcordance.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new FactSet.SDK.FactSetConcordance.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new FactSet.SDK.FactSetConcordance.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = FactSet.SDK.FactSetConcordance.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="EntityMatchBulkApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public EntityMatchBulkApi(FactSet.SDK.FactSetConcordance.Client.ISynchronousClient client, FactSet.SDK.FactSetConcordance.Client.IAsynchronousClient asyncClient, FactSet.SDK.FactSetConcordance.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = FactSet.SDK.FactSetConcordance.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public FactSet.SDK.FactSetConcordance.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public FactSet.SDK.FactSetConcordance.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public FactSet.SDK.FactSetConcordance.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public FactSet.SDK.FactSetConcordance.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Input a file with names and attributes, creating a taskId. Upload a Comma-Separated List file (.csv / UTF-8 encoding) with a list of names and attributes and receive a &#x60;taskId&#x60;. The taskId is then used for reference in the *_/entity-task-status* and *_/entity-decisions* endpoints to receive results once the task is successful. &lt;p&gt; **Number of ids is limited to 10,000 ids per upload file.** &lt;/p&gt;&lt;p&gt;This is the first step in the overall \&quot;Bulk\&quot; workflow. Use the /entity-task-status endpoint to check the status.&lt;/p&gt; 
        /// </summary>
        /// <exception cref="FactSet.SDK.FactSetConcordance.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskName">User defined name for the task that will be used to name the output files.</param>
        /// <param name="inputFile">The UTF-8 encoded CSV File containing the entity names to be concorded to a FactSet Entity Identifier. The files first row **MUST** include headers as defined in the *Column parameters. Be mindful of casing and spacing in column headers. Only 10,001 rows are accepted, including the Header row. The input file is posted as a file object in the form. For this reason, the mime type of this post request must be multipart/form-data. </param>
        /// <param name="clientIdColumn">Header Name of the column in the input file that contains a unique identifier supplied by the user referred to as a \\\&quot;clientId\\\&quot;. This clientId can be used to create custom mappings or references. </param>
        /// <param name="nameColumn">Header name of the column in the input file that contains the Entity Name to be matched. </param>
        /// <param name="countryColumn">Header Name of the column in the input file that contains the country&#39;s ISO Code. This is used to filter the candidates before taking a match decision.  (optional)</param>
        /// <param name="urlColumn">Header Name of the column in the input file that contains the Entity&#39;s URL. URL corresponding to the entity name that is used when evaluating candidates for a match.  (optional)</param>
        /// <param name="stateColumn">Header Name of the column in the input file that contains the two letter State Code of the state or province where the Entity is located. Currently, only US state codes are supported.  (optional)</param>
        /// <param name="includeEntityType">Three-character FactSet entity type code used to filter candidates in order to determine the final match result. Only candidates with an entity type specified will be considered for the final match result. Multiple types can be entered separated by commas. **Do not include within &#x60;inputFile&#x60;.**  (optional)</param>
        /// <param name="excludeEntityType">Three-character FactSet entity type code used to filter candidates in order to determine the final match result. Entities with these types will be excluded from the decisions. It is a global option used to filter the candidates before taking a match decision. Candidates with an entity type specified will *not* be considered for the final match result. **Do not include within &#x60;inputFile&#x60;.**  (optional)</param>
        /// <param name="includeEntitySubType">Two-character FactSet entity subtype code used to filter candidates in order to determine the final match result. Only candidates with an entity subtype specified will be considered for the final match result. Multiple types can be entered separated by commas. **Do not include within &#x60;inputFile&#x60;.**  (optional)</param>
        /// <param name="excludeEntitySubType">Two-character FactSet entity subtype code used to filter candidates in order to determine the final match result. Candidates with an entity subtype specified will *not* be considered for the final match result. Multiple types can be entered separated by commas. **Do not include within &#x60;inputFile&#x60;.**  (optional)</param>
        /// <returns>EntityTaskResponse</returns>
        public EntityTaskResponse CreateEntityTask(string taskName, System.IO.Stream inputFile, string clientIdColumn, string nameColumn, string countryColumn = default(string), string urlColumn = default(string), string stateColumn = default(string), List<string> includeEntityType = default(List<string>), List<string> excludeEntityType = default(List<string>), List<string> includeEntitySubType = default(List<string>), List<string> excludeEntitySubType = default(List<string>))
        {
            FactSet.SDK.FactSetConcordance.Client.ApiResponse<EntityTaskResponse> localVarResponse = CreateEntityTaskWithHttpInfo(taskName, inputFile, clientIdColumn, nameColumn, countryColumn, urlColumn, stateColumn, includeEntityType, excludeEntityType, includeEntitySubType, excludeEntitySubType);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Input a file with names and attributes, creating a taskId. Upload a Comma-Separated List file (.csv / UTF-8 encoding) with a list of names and attributes and receive a &#x60;taskId&#x60;. The taskId is then used for reference in the *_/entity-task-status* and *_/entity-decisions* endpoints to receive results once the task is successful. &lt;p&gt; **Number of ids is limited to 10,000 ids per upload file.** &lt;/p&gt;&lt;p&gt;This is the first step in the overall \&quot;Bulk\&quot; workflow. Use the /entity-task-status endpoint to check the status.&lt;/p&gt; 
        /// </summary>
        /// <exception cref="FactSet.SDK.FactSetConcordance.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskName">User defined name for the task that will be used to name the output files.</param>
        /// <param name="inputFile">The UTF-8 encoded CSV File containing the entity names to be concorded to a FactSet Entity Identifier. The files first row **MUST** include headers as defined in the *Column parameters. Be mindful of casing and spacing in column headers. Only 10,001 rows are accepted, including the Header row. The input file is posted as a file object in the form. For this reason, the mime type of this post request must be multipart/form-data. </param>
        /// <param name="clientIdColumn">Header Name of the column in the input file that contains a unique identifier supplied by the user referred to as a \\\&quot;clientId\\\&quot;. This clientId can be used to create custom mappings or references. </param>
        /// <param name="nameColumn">Header name of the column in the input file that contains the Entity Name to be matched. </param>
        /// <param name="countryColumn">Header Name of the column in the input file that contains the country&#39;s ISO Code. This is used to filter the candidates before taking a match decision.  (optional)</param>
        /// <param name="urlColumn">Header Name of the column in the input file that contains the Entity&#39;s URL. URL corresponding to the entity name that is used when evaluating candidates for a match.  (optional)</param>
        /// <param name="stateColumn">Header Name of the column in the input file that contains the two letter State Code of the state or province where the Entity is located. Currently, only US state codes are supported.  (optional)</param>
        /// <param name="includeEntityType">Three-character FactSet entity type code used to filter candidates in order to determine the final match result. Only candidates with an entity type specified will be considered for the final match result. Multiple types can be entered separated by commas. **Do not include within &#x60;inputFile&#x60;.**  (optional)</param>
        /// <param name="excludeEntityType">Three-character FactSet entity type code used to filter candidates in order to determine the final match result. Entities with these types will be excluded from the decisions. It is a global option used to filter the candidates before taking a match decision. Candidates with an entity type specified will *not* be considered for the final match result. **Do not include within &#x60;inputFile&#x60;.**  (optional)</param>
        /// <param name="includeEntitySubType">Two-character FactSet entity subtype code used to filter candidates in order to determine the final match result. Only candidates with an entity subtype specified will be considered for the final match result. Multiple types can be entered separated by commas. **Do not include within &#x60;inputFile&#x60;.**  (optional)</param>
        /// <param name="excludeEntitySubType">Two-character FactSet entity subtype code used to filter candidates in order to determine the final match result. Candidates with an entity subtype specified will *not* be considered for the final match result. Multiple types can be entered separated by commas. **Do not include within &#x60;inputFile&#x60;.**  (optional)</param>
        /// <returns>ApiResponse of EntityTaskResponse</returns>
        public FactSet.SDK.FactSetConcordance.Client.ApiResponse<EntityTaskResponse> CreateEntityTaskWithHttpInfo(string taskName, System.IO.Stream inputFile, string clientIdColumn, string nameColumn, string countryColumn = default(string), string urlColumn = default(string), string stateColumn = default(string), List<string> includeEntityType = default(List<string>), List<string> excludeEntityType = default(List<string>), List<string> includeEntitySubType = default(List<string>), List<string> excludeEntitySubType = default(List<string>))
        {
            // verify the required parameter 'taskName' is set
            if (taskName == null)
                throw new FactSet.SDK.FactSetConcordance.Client.ApiException(400, "Missing required parameter 'taskName' when calling EntityMatchBulkApi->CreateEntityTask");

            // verify the required parameter 'inputFile' is set
            if (inputFile == null)
                throw new FactSet.SDK.FactSetConcordance.Client.ApiException(400, "Missing required parameter 'inputFile' when calling EntityMatchBulkApi->CreateEntityTask");

            // verify the required parameter 'clientIdColumn' is set
            if (clientIdColumn == null)
                throw new FactSet.SDK.FactSetConcordance.Client.ApiException(400, "Missing required parameter 'clientIdColumn' when calling EntityMatchBulkApi->CreateEntityTask");

            // verify the required parameter 'nameColumn' is set
            if (nameColumn == null)
                throw new FactSet.SDK.FactSetConcordance.Client.ApiException(400, "Missing required parameter 'nameColumn' when calling EntityMatchBulkApi->CreateEntityTask");

            FactSet.SDK.FactSetConcordance.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.FactSetConcordance.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "multipart/form-data"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json;charset=utf-8",
                "application/json"
            };

            var localVarContentType = FactSet.SDK.FactSetConcordance.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = FactSet.SDK.FactSetConcordance.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.FormParameters.Add("taskName", FactSet.SDK.FactSetConcordance.Client.ClientUtils.ParameterToString(taskName)); // form parameter
            localVarRequestOptions.FileParameters.Add("inputFile", inputFile);
            localVarRequestOptions.FormParameters.Add("clientIdColumn", FactSet.SDK.FactSetConcordance.Client.ClientUtils.ParameterToString(clientIdColumn)); // form parameter
            localVarRequestOptions.FormParameters.Add("nameColumn", FactSet.SDK.FactSetConcordance.Client.ClientUtils.ParameterToString(nameColumn)); // form parameter
            if (countryColumn != null)
            {
                localVarRequestOptions.FormParameters.Add("countryColumn", FactSet.SDK.FactSetConcordance.Client.ClientUtils.ParameterToString(countryColumn)); // form parameter
            }
            if (urlColumn != null)
            {
                localVarRequestOptions.FormParameters.Add("urlColumn", FactSet.SDK.FactSetConcordance.Client.ClientUtils.ParameterToString(urlColumn)); // form parameter
            }
            if (stateColumn != null)
            {
                localVarRequestOptions.FormParameters.Add("stateColumn", FactSet.SDK.FactSetConcordance.Client.ClientUtils.ParameterToString(stateColumn)); // form parameter
            }
            if (includeEntityType != null)
            {
                localVarRequestOptions.FormParameters.Add("includeEntityType", FactSet.SDK.FactSetConcordance.Client.ClientUtils.ParameterToString(includeEntityType)); // form parameter
            }
            if (excludeEntityType != null)
            {
                localVarRequestOptions.FormParameters.Add("excludeEntityType", FactSet.SDK.FactSetConcordance.Client.ClientUtils.ParameterToString(excludeEntityType)); // form parameter
            }
            if (includeEntitySubType != null)
            {
                localVarRequestOptions.FormParameters.Add("includeEntitySubType", FactSet.SDK.FactSetConcordance.Client.ClientUtils.ParameterToString(includeEntitySubType)); // form parameter
            }
            if (excludeEntitySubType != null)
            {
                localVarRequestOptions.FormParameters.Add("excludeEntitySubType", FactSet.SDK.FactSetConcordance.Client.ClientUtils.ParameterToString(excludeEntitySubType)); // form parameter
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.FactSetConcordance.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<EntityTaskResponse>("/factset-concordance/v1/entity-task", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateEntityTask", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Input a file with names and attributes, creating a taskId. Upload a Comma-Separated List file (.csv / UTF-8 encoding) with a list of names and attributes and receive a &#x60;taskId&#x60;. The taskId is then used for reference in the *_/entity-task-status* and *_/entity-decisions* endpoints to receive results once the task is successful. &lt;p&gt; **Number of ids is limited to 10,000 ids per upload file.** &lt;/p&gt;&lt;p&gt;This is the first step in the overall \&quot;Bulk\&quot; workflow. Use the /entity-task-status endpoint to check the status.&lt;/p&gt; 
        /// </summary>
        /// <exception cref="FactSet.SDK.FactSetConcordance.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskName">User defined name for the task that will be used to name the output files.</param>
        /// <param name="inputFile">The UTF-8 encoded CSV File containing the entity names to be concorded to a FactSet Entity Identifier. The files first row **MUST** include headers as defined in the *Column parameters. Be mindful of casing and spacing in column headers. Only 10,001 rows are accepted, including the Header row. The input file is posted as a file object in the form. For this reason, the mime type of this post request must be multipart/form-data. </param>
        /// <param name="clientIdColumn">Header Name of the column in the input file that contains a unique identifier supplied by the user referred to as a \\\&quot;clientId\\\&quot;. This clientId can be used to create custom mappings or references. </param>
        /// <param name="nameColumn">Header name of the column in the input file that contains the Entity Name to be matched. </param>
        /// <param name="countryColumn">Header Name of the column in the input file that contains the country&#39;s ISO Code. This is used to filter the candidates before taking a match decision.  (optional)</param>
        /// <param name="urlColumn">Header Name of the column in the input file that contains the Entity&#39;s URL. URL corresponding to the entity name that is used when evaluating candidates for a match.  (optional)</param>
        /// <param name="stateColumn">Header Name of the column in the input file that contains the two letter State Code of the state or province where the Entity is located. Currently, only US state codes are supported.  (optional)</param>
        /// <param name="includeEntityType">Three-character FactSet entity type code used to filter candidates in order to determine the final match result. Only candidates with an entity type specified will be considered for the final match result. Multiple types can be entered separated by commas. **Do not include within &#x60;inputFile&#x60;.**  (optional)</param>
        /// <param name="excludeEntityType">Three-character FactSet entity type code used to filter candidates in order to determine the final match result. Entities with these types will be excluded from the decisions. It is a global option used to filter the candidates before taking a match decision. Candidates with an entity type specified will *not* be considered for the final match result. **Do not include within &#x60;inputFile&#x60;.**  (optional)</param>
        /// <param name="includeEntitySubType">Two-character FactSet entity subtype code used to filter candidates in order to determine the final match result. Only candidates with an entity subtype specified will be considered for the final match result. Multiple types can be entered separated by commas. **Do not include within &#x60;inputFile&#x60;.**  (optional)</param>
        /// <param name="excludeEntitySubType">Two-character FactSet entity subtype code used to filter candidates in order to determine the final match result. Candidates with an entity subtype specified will *not* be considered for the final match result. Multiple types can be entered separated by commas. **Do not include within &#x60;inputFile&#x60;.**  (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EntityTaskResponse</returns>
        public async System.Threading.Tasks.Task<EntityTaskResponse> CreateEntityTaskAsync(string taskName, System.IO.Stream inputFile, string clientIdColumn, string nameColumn, string countryColumn = default(string), string urlColumn = default(string), string stateColumn = default(string), List<string> includeEntityType = default(List<string>), List<string> excludeEntityType = default(List<string>), List<string> includeEntitySubType = default(List<string>), List<string> excludeEntitySubType = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            FactSet.SDK.FactSetConcordance.Client.ApiResponse<EntityTaskResponse> localVarResponse = await CreateEntityTaskWithHttpInfoAsync(taskName, inputFile, clientIdColumn, nameColumn, countryColumn, urlColumn, stateColumn, includeEntityType, excludeEntityType, includeEntitySubType, excludeEntitySubType, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Input a file with names and attributes, creating a taskId. Upload a Comma-Separated List file (.csv / UTF-8 encoding) with a list of names and attributes and receive a &#x60;taskId&#x60;. The taskId is then used for reference in the *_/entity-task-status* and *_/entity-decisions* endpoints to receive results once the task is successful. &lt;p&gt; **Number of ids is limited to 10,000 ids per upload file.** &lt;/p&gt;&lt;p&gt;This is the first step in the overall \&quot;Bulk\&quot; workflow. Use the /entity-task-status endpoint to check the status.&lt;/p&gt; 
        /// </summary>
        /// <exception cref="FactSet.SDK.FactSetConcordance.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskName">User defined name for the task that will be used to name the output files.</param>
        /// <param name="inputFile">The UTF-8 encoded CSV File containing the entity names to be concorded to a FactSet Entity Identifier. The files first row **MUST** include headers as defined in the *Column parameters. Be mindful of casing and spacing in column headers. Only 10,001 rows are accepted, including the Header row. The input file is posted as a file object in the form. For this reason, the mime type of this post request must be multipart/form-data. </param>
        /// <param name="clientIdColumn">Header Name of the column in the input file that contains a unique identifier supplied by the user referred to as a \\\&quot;clientId\\\&quot;. This clientId can be used to create custom mappings or references. </param>
        /// <param name="nameColumn">Header name of the column in the input file that contains the Entity Name to be matched. </param>
        /// <param name="countryColumn">Header Name of the column in the input file that contains the country&#39;s ISO Code. This is used to filter the candidates before taking a match decision.  (optional)</param>
        /// <param name="urlColumn">Header Name of the column in the input file that contains the Entity&#39;s URL. URL corresponding to the entity name that is used when evaluating candidates for a match.  (optional)</param>
        /// <param name="stateColumn">Header Name of the column in the input file that contains the two letter State Code of the state or province where the Entity is located. Currently, only US state codes are supported.  (optional)</param>
        /// <param name="includeEntityType">Three-character FactSet entity type code used to filter candidates in order to determine the final match result. Only candidates with an entity type specified will be considered for the final match result. Multiple types can be entered separated by commas. **Do not include within &#x60;inputFile&#x60;.**  (optional)</param>
        /// <param name="excludeEntityType">Three-character FactSet entity type code used to filter candidates in order to determine the final match result. Entities with these types will be excluded from the decisions. It is a global option used to filter the candidates before taking a match decision. Candidates with an entity type specified will *not* be considered for the final match result. **Do not include within &#x60;inputFile&#x60;.**  (optional)</param>
        /// <param name="includeEntitySubType">Two-character FactSet entity subtype code used to filter candidates in order to determine the final match result. Only candidates with an entity subtype specified will be considered for the final match result. Multiple types can be entered separated by commas. **Do not include within &#x60;inputFile&#x60;.**  (optional)</param>
        /// <param name="excludeEntitySubType">Two-character FactSet entity subtype code used to filter candidates in order to determine the final match result. Candidates with an entity subtype specified will *not* be considered for the final match result. Multiple types can be entered separated by commas. **Do not include within &#x60;inputFile&#x60;.**  (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EntityTaskResponse)</returns>
        public async System.Threading.Tasks.Task<FactSet.SDK.FactSetConcordance.Client.ApiResponse<EntityTaskResponse>> CreateEntityTaskWithHttpInfoAsync(string taskName, System.IO.Stream inputFile, string clientIdColumn, string nameColumn, string countryColumn = default(string), string urlColumn = default(string), string stateColumn = default(string), List<string> includeEntityType = default(List<string>), List<string> excludeEntityType = default(List<string>), List<string> includeEntitySubType = default(List<string>), List<string> excludeEntitySubType = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'taskName' is set
            if (taskName == null)
                throw new FactSet.SDK.FactSetConcordance.Client.ApiException(400, "Missing required parameter 'taskName' when calling EntityMatchBulkApi->CreateEntityTask");

            // verify the required parameter 'inputFile' is set
            if (inputFile == null)
                throw new FactSet.SDK.FactSetConcordance.Client.ApiException(400, "Missing required parameter 'inputFile' when calling EntityMatchBulkApi->CreateEntityTask");

            // verify the required parameter 'clientIdColumn' is set
            if (clientIdColumn == null)
                throw new FactSet.SDK.FactSetConcordance.Client.ApiException(400, "Missing required parameter 'clientIdColumn' when calling EntityMatchBulkApi->CreateEntityTask");

            // verify the required parameter 'nameColumn' is set
            if (nameColumn == null)
                throw new FactSet.SDK.FactSetConcordance.Client.ApiException(400, "Missing required parameter 'nameColumn' when calling EntityMatchBulkApi->CreateEntityTask");


            FactSet.SDK.FactSetConcordance.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.FactSetConcordance.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "multipart/form-data"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json;charset=utf-8",
                "application/json"
            };


            var localVarContentType = FactSet.SDK.FactSetConcordance.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = FactSet.SDK.FactSetConcordance.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.FormParameters.Add("taskName", FactSet.SDK.FactSetConcordance.Client.ClientUtils.ParameterToString(taskName)); // form parameter
            localVarRequestOptions.FileParameters.Add("inputFile", inputFile);
            localVarRequestOptions.FormParameters.Add("clientIdColumn", FactSet.SDK.FactSetConcordance.Client.ClientUtils.ParameterToString(clientIdColumn)); // form parameter
            localVarRequestOptions.FormParameters.Add("nameColumn", FactSet.SDK.FactSetConcordance.Client.ClientUtils.ParameterToString(nameColumn)); // form parameter
            if (countryColumn != null)
            {
                localVarRequestOptions.FormParameters.Add("countryColumn", FactSet.SDK.FactSetConcordance.Client.ClientUtils.ParameterToString(countryColumn)); // form parameter
            }
            if (urlColumn != null)
            {
                localVarRequestOptions.FormParameters.Add("urlColumn", FactSet.SDK.FactSetConcordance.Client.ClientUtils.ParameterToString(urlColumn)); // form parameter
            }
            if (stateColumn != null)
            {
                localVarRequestOptions.FormParameters.Add("stateColumn", FactSet.SDK.FactSetConcordance.Client.ClientUtils.ParameterToString(stateColumn)); // form parameter
            }
            if (includeEntityType != null)
            {
                localVarRequestOptions.FormParameters.Add("includeEntityType", FactSet.SDK.FactSetConcordance.Client.ClientUtils.ParameterToString(includeEntityType)); // form parameter
            }
            if (excludeEntityType != null)
            {
                localVarRequestOptions.FormParameters.Add("excludeEntityType", FactSet.SDK.FactSetConcordance.Client.ClientUtils.ParameterToString(excludeEntityType)); // form parameter
            }
            if (includeEntitySubType != null)
            {
                localVarRequestOptions.FormParameters.Add("includeEntitySubType", FactSet.SDK.FactSetConcordance.Client.ClientUtils.ParameterToString(includeEntitySubType)); // form parameter
            }
            if (excludeEntitySubType != null)
            {
                localVarRequestOptions.FormParameters.Add("excludeEntitySubType", FactSet.SDK.FactSetConcordance.Client.ClientUtils.ParameterToString(excludeEntitySubType)); // form parameter
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.FactSetConcordance.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<EntityTaskResponse>("/factset-concordance/v1/entity-task", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateEntityTask", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get the decisions of matches for the requested taskId. Retrieves the &#x60;Decision&#x60; objects for an Entity Task (taskId). The decisions do not include all candidates, but rather the status of concording the requested list of names included in the input file. Mapped entities will include a FactSet Entity Identifier (-E). 
        /// </summary>
        /// <exception cref="FactSet.SDK.FactSetConcordance.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">Concordance Task Identifier. The taskId is created in response from the /entity-task endpoint.</param>
        /// <param name="offset">Starting row for records to return or rows to skip. (optional, default to 0)</param>
        /// <param name="limit">Limits the number of records in the response. (optional)</param>
        /// <returns>EntityDecisionsResponse</returns>
        public EntityDecisionsResponse GetEntityDecisions(int taskId, int? offset = default(int?), int? limit = default(int?))
        {
            FactSet.SDK.FactSetConcordance.Client.ApiResponse<EntityDecisionsResponse> localVarResponse = GetEntityDecisionsWithHttpInfo(taskId, offset, limit);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get the decisions of matches for the requested taskId. Retrieves the &#x60;Decision&#x60; objects for an Entity Task (taskId). The decisions do not include all candidates, but rather the status of concording the requested list of names included in the input file. Mapped entities will include a FactSet Entity Identifier (-E). 
        /// </summary>
        /// <exception cref="FactSet.SDK.FactSetConcordance.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">Concordance Task Identifier. The taskId is created in response from the /entity-task endpoint.</param>
        /// <param name="offset">Starting row for records to return or rows to skip. (optional, default to 0)</param>
        /// <param name="limit">Limits the number of records in the response. (optional)</param>
        /// <returns>ApiResponse of EntityDecisionsResponse</returns>
        public FactSet.SDK.FactSetConcordance.Client.ApiResponse<EntityDecisionsResponse> GetEntityDecisionsWithHttpInfo(int taskId, int? offset = default(int?), int? limit = default(int?))
        {
            FactSet.SDK.FactSetConcordance.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.FactSetConcordance.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json;charset=utf-8",
                "application/json"
            };

            var localVarContentType = FactSet.SDK.FactSetConcordance.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = FactSet.SDK.FactSetConcordance.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.FactSetConcordance.Client.ClientUtils.ParameterToMultiMap("", "taskId", taskId));
            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.FactSetConcordance.Client.ClientUtils.ParameterToMultiMap("", "offset", offset));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.FactSetConcordance.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.FactSetConcordance.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<EntityDecisionsResponse>("/factset-concordance/v1/entity-decisions", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetEntityDecisions", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get the decisions of matches for the requested taskId. Retrieves the &#x60;Decision&#x60; objects for an Entity Task (taskId). The decisions do not include all candidates, but rather the status of concording the requested list of names included in the input file. Mapped entities will include a FactSet Entity Identifier (-E). 
        /// </summary>
        /// <exception cref="FactSet.SDK.FactSetConcordance.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">Concordance Task Identifier. The taskId is created in response from the /entity-task endpoint.</param>
        /// <param name="offset">Starting row for records to return or rows to skip. (optional, default to 0)</param>
        /// <param name="limit">Limits the number of records in the response. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EntityDecisionsResponse</returns>
        public async System.Threading.Tasks.Task<EntityDecisionsResponse> GetEntityDecisionsAsync(int taskId, int? offset = default(int?), int? limit = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            FactSet.SDK.FactSetConcordance.Client.ApiResponse<EntityDecisionsResponse> localVarResponse = await GetEntityDecisionsWithHttpInfoAsync(taskId, offset, limit, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get the decisions of matches for the requested taskId. Retrieves the &#x60;Decision&#x60; objects for an Entity Task (taskId). The decisions do not include all candidates, but rather the status of concording the requested list of names included in the input file. Mapped entities will include a FactSet Entity Identifier (-E). 
        /// </summary>
        /// <exception cref="FactSet.SDK.FactSetConcordance.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">Concordance Task Identifier. The taskId is created in response from the /entity-task endpoint.</param>
        /// <param name="offset">Starting row for records to return or rows to skip. (optional, default to 0)</param>
        /// <param name="limit">Limits the number of records in the response. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EntityDecisionsResponse)</returns>
        public async System.Threading.Tasks.Task<FactSet.SDK.FactSetConcordance.Client.ApiResponse<EntityDecisionsResponse>> GetEntityDecisionsWithHttpInfoAsync(int taskId, int? offset = default(int?), int? limit = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            FactSet.SDK.FactSetConcordance.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.FactSetConcordance.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json;charset=utf-8",
                "application/json"
            };


            var localVarContentType = FactSet.SDK.FactSetConcordance.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = FactSet.SDK.FactSetConcordance.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.FactSetConcordance.Client.ClientUtils.ParameterToMultiMap("", "taskId", taskId));
            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.FactSetConcordance.Client.ClientUtils.ParameterToMultiMap("", "offset", offset));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.FactSetConcordance.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.FactSetConcordance.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<EntityDecisionsResponse>("/factset-concordance/v1/entity-decisions", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetEntityDecisions", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Gets the status of the requested taskId or all tasks for a User Pulls the **status** for ALL the Entity Tasks submitted by a client within the last 30 days, and related details such as task duration and decision rates. Specific Tasks can also be retrieved by using the _taskId_ parameter.&lt;p&gt;Status types include -   * PENDING - The task has not yet started.   * IN_PROGRESS - The task is submitted and decisions are in progress.   * SUCCESS - The task was successful! Move to the /entity-decisions endpoint to retrieve decisions.   * FAILURE - The task failed. Reach out to FactSet Support for assistance.   * BAD_REQUEST - The task creation was unsuccesfull. Typically occurs with an incorrect input file format or column headers.   * ABORTED - The task was aborted. 
        /// </summary>
        /// <exception cref="FactSet.SDK.FactSetConcordance.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">Concordance Task Identifier. The taskId is created in response from the /entity-task endpoint. (optional)</param>
        /// <param name="offset">Starting row for records to return or rows to skip. (optional, default to 0)</param>
        /// <param name="limit">Limits the number of records in the response. (optional)</param>
        /// <param name="status">Filter on the status of the Concordance Tasks. Default is no filter.   * PENDING - The task has not yet started   * IN_PROGRESS - The task is submitted and decisions are in progress.   * SUCCESS - The task was successful! Move to the /entity-decisions endpoint to retrieve decisions.   * FAILURE - The task failed. Reach out to FactSet Support for assistance.   * BAD_REQUEST - The task creation was unsuccesfull. Typically occurs with an incorrect input file format or column headers.   * ABORTED - The task was aborted.  (optional)</param>
        /// <returns>EntityTaskStatusResponse</returns>
        public EntityTaskStatusResponse GetEntityTaskStatus(int? taskId = default(int?), int? offset = default(int?), int? limit = default(int?), List<string> status = default(List<string>))
        {
            FactSet.SDK.FactSetConcordance.Client.ApiResponse<EntityTaskStatusResponse> localVarResponse = GetEntityTaskStatusWithHttpInfo(taskId, offset, limit, status);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Gets the status of the requested taskId or all tasks for a User Pulls the **status** for ALL the Entity Tasks submitted by a client within the last 30 days, and related details such as task duration and decision rates. Specific Tasks can also be retrieved by using the _taskId_ parameter.&lt;p&gt;Status types include -   * PENDING - The task has not yet started.   * IN_PROGRESS - The task is submitted and decisions are in progress.   * SUCCESS - The task was successful! Move to the /entity-decisions endpoint to retrieve decisions.   * FAILURE - The task failed. Reach out to FactSet Support for assistance.   * BAD_REQUEST - The task creation was unsuccesfull. Typically occurs with an incorrect input file format or column headers.   * ABORTED - The task was aborted. 
        /// </summary>
        /// <exception cref="FactSet.SDK.FactSetConcordance.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">Concordance Task Identifier. The taskId is created in response from the /entity-task endpoint. (optional)</param>
        /// <param name="offset">Starting row for records to return or rows to skip. (optional, default to 0)</param>
        /// <param name="limit">Limits the number of records in the response. (optional)</param>
        /// <param name="status">Filter on the status of the Concordance Tasks. Default is no filter.   * PENDING - The task has not yet started   * IN_PROGRESS - The task is submitted and decisions are in progress.   * SUCCESS - The task was successful! Move to the /entity-decisions endpoint to retrieve decisions.   * FAILURE - The task failed. Reach out to FactSet Support for assistance.   * BAD_REQUEST - The task creation was unsuccesfull. Typically occurs with an incorrect input file format or column headers.   * ABORTED - The task was aborted.  (optional)</param>
        /// <returns>ApiResponse of EntityTaskStatusResponse</returns>
        public FactSet.SDK.FactSetConcordance.Client.ApiResponse<EntityTaskStatusResponse> GetEntityTaskStatusWithHttpInfo(int? taskId = default(int?), int? offset = default(int?), int? limit = default(int?), List<string> status = default(List<string>))
        {
            FactSet.SDK.FactSetConcordance.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.FactSetConcordance.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json;charset=utf-8",
                "application/json"
            };

            var localVarContentType = FactSet.SDK.FactSetConcordance.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = FactSet.SDK.FactSetConcordance.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (taskId != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.FactSetConcordance.Client.ClientUtils.ParameterToMultiMap("", "taskId", taskId));
            }
            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.FactSetConcordance.Client.ClientUtils.ParameterToMultiMap("", "offset", offset));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.FactSetConcordance.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (status != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.FactSetConcordance.Client.ClientUtils.ParameterToMultiMap("csv", "status", status));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.FactSetConcordance.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<EntityTaskStatusResponse>("/factset-concordance/v1/entity-task-status", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetEntityTaskStatus", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Gets the status of the requested taskId or all tasks for a User Pulls the **status** for ALL the Entity Tasks submitted by a client within the last 30 days, and related details such as task duration and decision rates. Specific Tasks can also be retrieved by using the _taskId_ parameter.&lt;p&gt;Status types include -   * PENDING - The task has not yet started.   * IN_PROGRESS - The task is submitted and decisions are in progress.   * SUCCESS - The task was successful! Move to the /entity-decisions endpoint to retrieve decisions.   * FAILURE - The task failed. Reach out to FactSet Support for assistance.   * BAD_REQUEST - The task creation was unsuccesfull. Typically occurs with an incorrect input file format or column headers.   * ABORTED - The task was aborted. 
        /// </summary>
        /// <exception cref="FactSet.SDK.FactSetConcordance.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">Concordance Task Identifier. The taskId is created in response from the /entity-task endpoint. (optional)</param>
        /// <param name="offset">Starting row for records to return or rows to skip. (optional, default to 0)</param>
        /// <param name="limit">Limits the number of records in the response. (optional)</param>
        /// <param name="status">Filter on the status of the Concordance Tasks. Default is no filter.   * PENDING - The task has not yet started   * IN_PROGRESS - The task is submitted and decisions are in progress.   * SUCCESS - The task was successful! Move to the /entity-decisions endpoint to retrieve decisions.   * FAILURE - The task failed. Reach out to FactSet Support for assistance.   * BAD_REQUEST - The task creation was unsuccesfull. Typically occurs with an incorrect input file format or column headers.   * ABORTED - The task was aborted.  (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EntityTaskStatusResponse</returns>
        public async System.Threading.Tasks.Task<EntityTaskStatusResponse> GetEntityTaskStatusAsync(int? taskId = default(int?), int? offset = default(int?), int? limit = default(int?), List<string> status = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            FactSet.SDK.FactSetConcordance.Client.ApiResponse<EntityTaskStatusResponse> localVarResponse = await GetEntityTaskStatusWithHttpInfoAsync(taskId, offset, limit, status, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Gets the status of the requested taskId or all tasks for a User Pulls the **status** for ALL the Entity Tasks submitted by a client within the last 30 days, and related details such as task duration and decision rates. Specific Tasks can also be retrieved by using the _taskId_ parameter.&lt;p&gt;Status types include -   * PENDING - The task has not yet started.   * IN_PROGRESS - The task is submitted and decisions are in progress.   * SUCCESS - The task was successful! Move to the /entity-decisions endpoint to retrieve decisions.   * FAILURE - The task failed. Reach out to FactSet Support for assistance.   * BAD_REQUEST - The task creation was unsuccesfull. Typically occurs with an incorrect input file format or column headers.   * ABORTED - The task was aborted. 
        /// </summary>
        /// <exception cref="FactSet.SDK.FactSetConcordance.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">Concordance Task Identifier. The taskId is created in response from the /entity-task endpoint. (optional)</param>
        /// <param name="offset">Starting row for records to return or rows to skip. (optional, default to 0)</param>
        /// <param name="limit">Limits the number of records in the response. (optional)</param>
        /// <param name="status">Filter on the status of the Concordance Tasks. Default is no filter.   * PENDING - The task has not yet started   * IN_PROGRESS - The task is submitted and decisions are in progress.   * SUCCESS - The task was successful! Move to the /entity-decisions endpoint to retrieve decisions.   * FAILURE - The task failed. Reach out to FactSet Support for assistance.   * BAD_REQUEST - The task creation was unsuccesfull. Typically occurs with an incorrect input file format or column headers.   * ABORTED - The task was aborted.  (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EntityTaskStatusResponse)</returns>
        public async System.Threading.Tasks.Task<FactSet.SDK.FactSetConcordance.Client.ApiResponse<EntityTaskStatusResponse>> GetEntityTaskStatusWithHttpInfoAsync(int? taskId = default(int?), int? offset = default(int?), int? limit = default(int?), List<string> status = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            FactSet.SDK.FactSetConcordance.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.FactSetConcordance.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json;charset=utf-8",
                "application/json"
            };


            var localVarContentType = FactSet.SDK.FactSetConcordance.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = FactSet.SDK.FactSetConcordance.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (taskId != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.FactSetConcordance.Client.ClientUtils.ParameterToMultiMap("", "taskId", taskId));
            }
            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.FactSetConcordance.Client.ClientUtils.ParameterToMultiMap("", "offset", offset));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.FactSetConcordance.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (status != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.FactSetConcordance.Client.ClientUtils.ParameterToMultiMap("csv", "status", status));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.FactSetConcordance.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<EntityTaskStatusResponse>("/factset-concordance/v1/entity-task-status", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetEntityTaskStatus", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
