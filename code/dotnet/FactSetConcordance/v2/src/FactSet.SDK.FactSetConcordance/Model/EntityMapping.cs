/*
 * FactSet Concordance API
 *
 * The FactSet Concordance API provides the ability to programmatically look up several types of entities by their name and other attributes. It attempts to match attributes that you supply for the entity and returns as many match candidates as it can find. The result is a \"concorded\" FactSet Entity Permanent identifier.  The Entity Identifier can then be used as input throughout FactSet's Content soultions, such as Content APIs and Standard DataFeeds.<p> There are two types of workflows supported in the API. The first workflow type follows traditional API conventions in that a request is accepted and a response is returned synchronously. The second workflow type involves a background task. With this workflow, a task is created for uploading a set of queries, and then the client polls for the task to complete. Once the task has completed, the client retrieves the concordance results throught the decisions endpoint.</p> 
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: api@factset.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = FactSet.SDK.FactSetConcordance.Client.OpenAPIDateConverter;

namespace FactSet.SDK.FactSetConcordance.Model
{
    /// <summary>
    /// Concordance Company Entity Mapping object. Shows the mapping detail related to user&#39;s universe. 
    /// </summary>
    [DataContract(Name = "EntityMapping")]
    public partial class EntityMapping : IEquatable<EntityMapping>, IValidatableObject
    {
        /// <summary>
        /// Current status of the entity mapping.
        /// </summary>
        /// <value>Current status of the entity mapping.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum MapStatusEnum
        {
            /// <summary>
            /// Enum MAPPED for value: MAPPED
            /// </summary>
            [EnumMember(Value = "MAPPED")]
            MAPPED = 1,

            /// <summary>
            /// Enum UNMAPPED for value: UNMAPPED
            /// </summary>
            [EnumMember(Value = "UNMAPPED")]
            UNMAPPED = 2,

            /// <summary>
            /// Enum INDETERMINATE for value: INDETERMINATE
            /// </summary>
            [EnumMember(Value = "INDETERMINATE")]
            INDETERMINATE = 3

        }


        /// <summary>
        /// Current status of the entity mapping.
        /// </summary>
        /// <value>Current status of the entity mapping.</value>
        [DataMember(Name = "mapStatus", EmitDefaultValue = true)]
        public MapStatusEnum? MapStatus { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="EntityMapping" /> class.
        /// </summary>
        /// <param name="entityId">FactSet Entity Identifier of the entity matched to the submitted entity.</param>
        /// <param name="entityName">Full name corresponding to the matched entity..</param>
        /// <param name="clientId">User-defined unique identifier provided by the user in the request.</param>
        /// <param name="clientName">Name of the entity to match as specified in the request..</param>
        /// <param name="clientCountry">ISO2 country code specified in the request.</param>
        /// <param name="clientState">State code specified in the request.</param>
        /// <param name="clientUrl">URL specified in the request.</param>
        /// <param name="createdTime">Time when entity was created in UTC..</param>
        /// <param name="updatedTime">Time when the submitted entity was last updated in UTC..</param>
        /// <param name="mapStatus">Current status of the entity mapping..</param>
        /// <param name="universeId">The universe this mapping belongs to. Only set in v2 endpoints .</param>
        public EntityMapping(string entityId = default(string), string entityName = default(string), string clientId = default(string), string clientName = default(string), string clientCountry = default(string), string clientState = default(string), string clientUrl = default(string), DateTime? createdTime = default(DateTime?), DateTime? updatedTime = default(DateTime?), MapStatusEnum? mapStatus = default(MapStatusEnum?), int? universeId = default(int?))
        {
            this.EntityId = entityId;
            this.EntityName = entityName;
            this.ClientId = clientId;
            this.ClientName = clientName;
            this.ClientCountry = clientCountry;
            this.ClientState = clientState;
            this.ClientUrl = clientUrl;
            this.CreatedTime = createdTime;
            this.UpdatedTime = updatedTime;
            this.MapStatus = mapStatus;
            this.UniverseId = universeId;
        }

        /// <summary>
        /// FactSet Entity Identifier of the entity matched to the submitted entity
        /// </summary>
        /// <value>FactSet Entity Identifier of the entity matched to the submitted entity</value>
        [DataMember(Name = "entityId", EmitDefaultValue = true)]
        public string EntityId { get; set; }

        /// <summary>
        /// Full name corresponding to the matched entity.
        /// </summary>
        /// <value>Full name corresponding to the matched entity.</value>
        [DataMember(Name = "entityName", EmitDefaultValue = true)]
        public string EntityName { get; set; }

        /// <summary>
        /// User-defined unique identifier provided by the user in the request
        /// </summary>
        /// <value>User-defined unique identifier provided by the user in the request</value>
        [DataMember(Name = "clientId", EmitDefaultValue = true)]
        public string ClientId { get; set; }

        /// <summary>
        /// Name of the entity to match as specified in the request.
        /// </summary>
        /// <value>Name of the entity to match as specified in the request.</value>
        [DataMember(Name = "clientName", EmitDefaultValue = true)]
        public string ClientName { get; set; }

        /// <summary>
        /// ISO2 country code specified in the request
        /// </summary>
        /// <value>ISO2 country code specified in the request</value>
        [DataMember(Name = "clientCountry", EmitDefaultValue = true)]
        public string ClientCountry { get; set; }

        /// <summary>
        /// State code specified in the request
        /// </summary>
        /// <value>State code specified in the request</value>
        [DataMember(Name = "clientState", EmitDefaultValue = true)]
        public string ClientState { get; set; }

        /// <summary>
        /// URL specified in the request
        /// </summary>
        /// <value>URL specified in the request</value>
        [DataMember(Name = "clientUrl", EmitDefaultValue = true)]
        public string ClientUrl { get; set; }

        /// <summary>
        /// Time when entity was created in UTC.
        /// </summary>
        /// <value>Time when entity was created in UTC.</value>
        [DataMember(Name = "createdTime", EmitDefaultValue = true)]
        public DateTime? CreatedTime { get; set; }

        /// <summary>
        /// Time when the submitted entity was last updated in UTC.
        /// </summary>
        /// <value>Time when the submitted entity was last updated in UTC.</value>
        [DataMember(Name = "updatedTime", EmitDefaultValue = true)]
        public DateTime? UpdatedTime { get; set; }

        /// <summary>
        /// The universe this mapping belongs to. Only set in v2 endpoints 
        /// </summary>
        /// <value>The universe this mapping belongs to. Only set in v2 endpoints </value>
        [DataMember(Name = "universeId", EmitDefaultValue = true)]
        public int? UniverseId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class EntityMapping {\n");
            sb.Append("  EntityId: ").Append(EntityId).Append("\n");
            sb.Append("  EntityName: ").Append(EntityName).Append("\n");
            sb.Append("  ClientId: ").Append(ClientId).Append("\n");
            sb.Append("  ClientName: ").Append(ClientName).Append("\n");
            sb.Append("  ClientCountry: ").Append(ClientCountry).Append("\n");
            sb.Append("  ClientState: ").Append(ClientState).Append("\n");
            sb.Append("  ClientUrl: ").Append(ClientUrl).Append("\n");
            sb.Append("  CreatedTime: ").Append(CreatedTime).Append("\n");
            sb.Append("  UpdatedTime: ").Append(UpdatedTime).Append("\n");
            sb.Append("  MapStatus: ").Append(MapStatus).Append("\n");
            sb.Append("  UniverseId: ").Append(UniverseId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as EntityMapping);
        }

        /// <summary>
        /// Returns true if EntityMapping instances are equal
        /// </summary>
        /// <param name="input">Instance of EntityMapping to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(EntityMapping input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.EntityId == input.EntityId ||
                    (this.EntityId != null &&
                    this.EntityId.Equals(input.EntityId))
                ) && 
                (
                    this.EntityName == input.EntityName ||
                    (this.EntityName != null &&
                    this.EntityName.Equals(input.EntityName))
                ) && 
                (
                    this.ClientId == input.ClientId ||
                    (this.ClientId != null &&
                    this.ClientId.Equals(input.ClientId))
                ) && 
                (
                    this.ClientName == input.ClientName ||
                    (this.ClientName != null &&
                    this.ClientName.Equals(input.ClientName))
                ) && 
                (
                    this.ClientCountry == input.ClientCountry ||
                    (this.ClientCountry != null &&
                    this.ClientCountry.Equals(input.ClientCountry))
                ) && 
                (
                    this.ClientState == input.ClientState ||
                    (this.ClientState != null &&
                    this.ClientState.Equals(input.ClientState))
                ) && 
                (
                    this.ClientUrl == input.ClientUrl ||
                    (this.ClientUrl != null &&
                    this.ClientUrl.Equals(input.ClientUrl))
                ) && 
                (
                    this.CreatedTime == input.CreatedTime ||
                    (this.CreatedTime != null &&
                    this.CreatedTime.Equals(input.CreatedTime))
                ) && 
                (
                    this.UpdatedTime == input.UpdatedTime ||
                    (this.UpdatedTime != null &&
                    this.UpdatedTime.Equals(input.UpdatedTime))
                ) && 
                (
                    this.MapStatus == input.MapStatus ||
                    this.MapStatus.Equals(input.MapStatus)
                ) && 
                (
                    this.UniverseId == input.UniverseId ||
                    (this.UniverseId != null &&
                    this.UniverseId.Equals(input.UniverseId))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.EntityId != null)
                {
                    hashCode = (hashCode * 59) + this.EntityId.GetHashCode();
                }
                if (this.EntityName != null)
                {
                    hashCode = (hashCode * 59) + this.EntityName.GetHashCode();
                }
                if (this.ClientId != null)
                {
                    hashCode = (hashCode * 59) + this.ClientId.GetHashCode();
                }
                if (this.ClientName != null)
                {
                    hashCode = (hashCode * 59) + this.ClientName.GetHashCode();
                }
                if (this.ClientCountry != null)
                {
                    hashCode = (hashCode * 59) + this.ClientCountry.GetHashCode();
                }
                if (this.ClientState != null)
                {
                    hashCode = (hashCode * 59) + this.ClientState.GetHashCode();
                }
                if (this.ClientUrl != null)
                {
                    hashCode = (hashCode * 59) + this.ClientUrl.GetHashCode();
                }
                if (this.CreatedTime != null)
                {
                    hashCode = (hashCode * 59) + this.CreatedTime.GetHashCode();
                }
                if (this.UpdatedTime != null)
                {
                    hashCode = (hashCode * 59) + this.UpdatedTime.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.MapStatus.GetHashCode();
                if (this.UniverseId != null)
                {
                    hashCode = (hashCode * 59) + this.UniverseId.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
