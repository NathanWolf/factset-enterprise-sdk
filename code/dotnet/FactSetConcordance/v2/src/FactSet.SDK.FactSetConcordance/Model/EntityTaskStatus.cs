/*
 * FactSet Concordance API
 *
 * The FactSet Concordance API provides the ability to programmatically look up several types of entities by their name and other attributes. It attempts to match attributes that you supply for the entity and returns as many match candidates as it can find. The result is a \"concorded\" FactSet Entity Permanent identifier.  The Entity Identifier can then be used as input throughout FactSet's Content soultions, such as Content APIs and Standard DataFeeds.<p> There are two types of workflows supported in the API. The first workflow type follows traditional API conventions in that a request is accepted and a response is returned synchronously. The second workflow type involves a background task. With this workflow, a task is created for uploading a set of queries, and then the client polls for the task to complete. Once the task has completed, the client retrieves the concordance results throught the decisions endpoint.</p> 
 *
 * The version of the OpenAPI document: 2.5.0
 * Contact: api@factset.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = FactSet.SDK.FactSetConcordance.Client.OpenAPIDateConverter;

namespace FactSet.SDK.FactSetConcordance.Model
{
    /// <summary>
    /// Concordance Entity Task Status object. Shows the settings and status of a taskId and some statistics on the matches. 
    /// </summary>
    [DataContract(Name = "EntityTaskStatus")]
    public partial class EntityTaskStatus : IEquatable<EntityTaskStatus>, IValidatableObject
    {
        /// <summary>
        /// Status of the Concordance Task. If the value is \&quot;SUCCESS\&quot;, you can move to the subsequent /entity-decisions endpoint to retrieve the results.
        /// </summary>
        /// <value>Status of the Concordance Task. If the value is \&quot;SUCCESS\&quot;, you can move to the subsequent /entity-decisions endpoint to retrieve the results.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum StatusEnum
        {
            /// <summary>
            /// Enum PENDING for value: PENDING
            /// </summary>
            [EnumMember(Value = "PENDING")]
            PENDING = 1,

            /// <summary>
            /// Enum INPROGRESS for value: IN_PROGRESS
            /// </summary>
            [EnumMember(Value = "IN_PROGRESS")]
            INPROGRESS = 2,

            /// <summary>
            /// Enum SUCCESS for value: SUCCESS
            /// </summary>
            [EnumMember(Value = "SUCCESS")]
            SUCCESS = 3,

            /// <summary>
            /// Enum FAILURE for value: FAILURE
            /// </summary>
            [EnumMember(Value = "FAILURE")]
            FAILURE = 4,

            /// <summary>
            /// Enum BADREQUEST for value: BAD_REQUEST
            /// </summary>
            [EnumMember(Value = "BAD_REQUEST")]
            BADREQUEST = 5,

            /// <summary>
            /// Enum ABORTED for value: ABORTED
            /// </summary>
            [EnumMember(Value = "ABORTED")]
            ABORTED = 6

        }


        /// <summary>
        /// Status of the Concordance Task. If the value is \&quot;SUCCESS\&quot;, you can move to the subsequent /entity-decisions endpoint to retrieve the results.
        /// </summary>
        /// <value>Status of the Concordance Task. If the value is \&quot;SUCCESS\&quot;, you can move to the subsequent /entity-decisions endpoint to retrieve the results.</value>
        [DataMember(Name = "status", EmitDefaultValue = true)]
        public StatusEnum? Status { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="EntityTaskStatus" /> class.
        /// </summary>
        /// <param name="taskId">Identifier denoting a specific Concordance task submitted by the user..</param>
        /// <param name="taskName">User-defined name for the task used to name the output file..</param>
        /// <param name="taskAction">Action status for the Concordance Task process..</param>
        /// <param name="status">Status of the Concordance Task. If the value is \&quot;SUCCESS\&quot;, you can move to the subsequent /entity-decisions endpoint to retrieve the results..</param>
        /// <param name="inputFile">The input file is posted as a file object in the form. .</param>
        /// <param name="clientIdColumn">Name of the column in the input file that contains a unique identifier supplied by the user..</param>
        /// <param name="priorityColumn">Header Name of the column in the inputfile that contains the priority for the client id .</param>
        /// <param name="bicColumn">Header Name of the column in the input file for the type BICCode, bank indentification code..</param>
        /// <param name="bbgTickerColumn">Header Name of the column in the input file for the type Bloomberg Listing and Regional Ticker..</param>
        /// <param name="cikColumn">Header Name of the column in the input file for the type CIK, Edgar Central Index Keys..</param>
        /// <param name="crdColumn">Header Name of the column in the input file for the type CRD, Central Registration Depository..</param>
        /// <param name="cusipColumn">Header Name of the column in the input file for the type CUSIP..</param>
        /// <param name="dunsColumn">Header Name of the column in the input file for the type DUNS, Dun&amp;Bradstreet..</param>
        /// <param name="einColumn">Header Name of the column in the input file for the type EmployerIdentificationNumber, EIN..</param>
        /// <param name="rssdColumn">Header Name of the column in the input file for the type FederalReserveRSSDIdentifier, RSSD..</param>
        /// <param name="fitchColumn">Header Name of the column in the input file for the type FitchCreditRating, Fitch Ratings Identifier..</param>
        /// <param name="isinColumn">Header Name of the column in the input file for the type ISIN..</param>
        /// <param name="leiColumn">Header Name of the column in the input file for the type LegalEntityIdentifier, LEI..</param>
        /// <param name="bbgFigiColumn">Header Name of the column in the input file for the type Bloomberg Listing/Regional/Security ID..</param>
        /// <param name="mdColumn">Header Name of the column in the input file for the type MoodysIssuer, Moody&#39;s Ratings Identifier..</param>
        /// <param name="tickerColumn">Header Name of the column in the input file for the type PriceTicker..</param>
        /// <param name="sprColumn">Header Name of the column in the input file for the type S&amp;PRating, S&amp;P Ratings Identifier.</param>
        /// <param name="sedolColumn">Header Name of the column in the input file for the type SEDOL..</param>
        /// <param name="tickerExchangeColumn">Header Name of the column in the input file for the type TickerExch..</param>
        /// <param name="tickerRegionColumn">Header Name of the column in the input file for the type TickerRegion..</param>
        /// <param name="ukchColumn">Header Name of the column in the input file for the type UKCompanyHouse..</param>
        /// <param name="valorenColumn">Header Name of the column in the input file for the type VALOR, Valoren (\&quot;Valor\&quot;) Identification..</param>
        /// <param name="wknColumn">Header Name of the column in the input file for the type WKN, German Securities Identification..</param>
        /// <param name="nameColumn">Name of the column in the input file that contains the entity name to be matched..</param>
        /// <param name="countryColumn">Name of the column in the input file that contains the ISO2 country code corresponding to the entity name.  The country code is used when evaluating candidates for a match. .</param>
        /// <param name="stateColumn">Name of the column in the input file that contains the Two-character state code corresponding to the entity name. The state code is used when evaluating candidates for a match. .</param>
        /// <param name="urlColumn">Name of the column in the input file that contains the URL corresponding to the entity name. The URL is used when evaluating candidates for a match. .</param>
        /// <param name="hasResult">Flag denoting the taskId has a result..</param>
        /// <param name="taskSubmitTime">Time the Task was submitted in UTC..</param>
        /// <param name="message">Textual message for the status..</param>
        /// <param name="inputCount">Number of records in the Input File..</param>
        /// <param name="mappedCount">Number of records with status of MAPPED the Input File..</param>
        /// <param name="unmappedCount">Number of records with status of UNMAPPED the Input File..</param>
        /// <param name="indeterminateCount">Number of records with status of INDETERMINATE the Input File..</param>
        /// <param name="processStartTime">Process start time in UTC..</param>
        /// <param name="processDuration">Process duration in seconds..</param>
        /// <param name="tryCount">Number of tries made so far for the request..</param>
        /// <param name="decisionRate">Percentage of mapped entities in the Input File..</param>
        /// <param name="error">error.</param>
        /// <param name="errorTitle">errorTitle.</param>
        /// <param name="includeEntityType">Requested Entity types to include. .</param>
        /// <param name="excludeEntityType">Requested Entity types to exclude. .</param>
        /// <param name="includeEntitySubType">Requested Entity subtypes to include. .</param>
        /// <param name="excludeEntitySubType">Requested Entity subtypes to exclude. .</param>
        /// <param name="userSerial">user-serial of the person who initiated the entity task..</param>
        /// <param name="userFullName">Full name of the person associated with the &#x60;userSerial&#x60;. .</param>
        /// <param name="universeId">The universe id this task was submitted to. .</param>
        /// <param name="universeName">The name of the universe this task was submitted to. .</param>
        public EntityTaskStatus(int? taskId = default(int?), string taskName = default(string), string taskAction = default(string), StatusEnum? status = default(StatusEnum?), string inputFile = default(string), string clientIdColumn = default(string), string priorityColumn = default(string), string bicColumn = default(string), string bbgTickerColumn = default(string), string cikColumn = default(string), string crdColumn = default(string), string cusipColumn = default(string), string dunsColumn = default(string), string einColumn = default(string), string rssdColumn = default(string), string fitchColumn = default(string), string isinColumn = default(string), string leiColumn = default(string), string bbgFigiColumn = default(string), string mdColumn = default(string), string tickerColumn = default(string), string sprColumn = default(string), string sedolColumn = default(string), string tickerExchangeColumn = default(string), string tickerRegionColumn = default(string), string ukchColumn = default(string), string valorenColumn = default(string), string wknColumn = default(string), string nameColumn = default(string), string countryColumn = default(string), string stateColumn = default(string), string urlColumn = default(string), bool? hasResult = default(bool?), DateTime? taskSubmitTime = default(DateTime?), string message = default(string), int? inputCount = default(int?), int? mappedCount = default(int?), int? unmappedCount = default(int?), int? indeterminateCount = default(int?), DateTime? processStartTime = default(DateTime?), double? processDuration = default(double?), int? tryCount = default(int?), double? decisionRate = default(double?), string error = default(string), string errorTitle = default(string), List<string> includeEntityType = default(List<string>), List<string> excludeEntityType = default(List<string>), List<string> includeEntitySubType = default(List<string>), List<string> excludeEntitySubType = default(List<string>), string userSerial = default(string), string userFullName = default(string), int? universeId = default(int?), string universeName = default(string))
        {
            this.TaskId = taskId;
            this.TaskName = taskName;
            this.TaskAction = taskAction;
            this.Status = status;
            this.InputFile = inputFile;
            this.ClientIdColumn = clientIdColumn;
            this.PriorityColumn = priorityColumn;
            this.BicColumn = bicColumn;
            this.BbgTickerColumn = bbgTickerColumn;
            this.CikColumn = cikColumn;
            this.CrdColumn = crdColumn;
            this.CusipColumn = cusipColumn;
            this.DunsColumn = dunsColumn;
            this.EinColumn = einColumn;
            this.RssdColumn = rssdColumn;
            this.FitchColumn = fitchColumn;
            this.IsinColumn = isinColumn;
            this.LeiColumn = leiColumn;
            this.BbgFigiColumn = bbgFigiColumn;
            this.MdColumn = mdColumn;
            this.TickerColumn = tickerColumn;
            this.SprColumn = sprColumn;
            this.SedolColumn = sedolColumn;
            this.TickerExchangeColumn = tickerExchangeColumn;
            this.TickerRegionColumn = tickerRegionColumn;
            this.UkchColumn = ukchColumn;
            this.ValorenColumn = valorenColumn;
            this.WknColumn = wknColumn;
            this.NameColumn = nameColumn;
            this.CountryColumn = countryColumn;
            this.StateColumn = stateColumn;
            this.UrlColumn = urlColumn;
            this.HasResult = hasResult;
            this.TaskSubmitTime = taskSubmitTime;
            this.Message = message;
            this.InputCount = inputCount;
            this.MappedCount = mappedCount;
            this.UnmappedCount = unmappedCount;
            this.IndeterminateCount = indeterminateCount;
            this.ProcessStartTime = processStartTime;
            this.ProcessDuration = processDuration;
            this.TryCount = tryCount;
            this.DecisionRate = decisionRate;
            this.Error = error;
            this.ErrorTitle = errorTitle;
            this.IncludeEntityType = includeEntityType;
            this.ExcludeEntityType = excludeEntityType;
            this.IncludeEntitySubType = includeEntitySubType;
            this.ExcludeEntitySubType = excludeEntitySubType;
            this.UserSerial = userSerial;
            this.UserFullName = userFullName;
            this.UniverseId = universeId;
            this.UniverseName = universeName;
        }

        /// <summary>
        /// Identifier denoting a specific Concordance task submitted by the user.
        /// </summary>
        /// <value>Identifier denoting a specific Concordance task submitted by the user.</value>
        [DataMember(Name = "taskId", EmitDefaultValue = true)]
        public int? TaskId { get; set; }

        /// <summary>
        /// User-defined name for the task used to name the output file.
        /// </summary>
        /// <value>User-defined name for the task used to name the output file.</value>
        [DataMember(Name = "taskName", EmitDefaultValue = true)]
        public string TaskName { get; set; }

        /// <summary>
        /// Action status for the Concordance Task process.
        /// </summary>
        /// <value>Action status for the Concordance Task process.</value>
        [DataMember(Name = "taskAction", EmitDefaultValue = true)]
        public string TaskAction { get; set; }

        /// <summary>
        /// The input file is posted as a file object in the form. 
        /// </summary>
        /// <value>The input file is posted as a file object in the form. </value>
        [DataMember(Name = "inputFile", EmitDefaultValue = true)]
        public string InputFile { get; set; }

        /// <summary>
        /// Name of the column in the input file that contains a unique identifier supplied by the user.
        /// </summary>
        /// <value>Name of the column in the input file that contains a unique identifier supplied by the user.</value>
        [DataMember(Name = "clientIdColumn", EmitDefaultValue = true)]
        public string ClientIdColumn { get; set; }

        /// <summary>
        /// Header Name of the column in the inputfile that contains the priority for the client id 
        /// </summary>
        /// <value>Header Name of the column in the inputfile that contains the priority for the client id </value>
        [DataMember(Name = "priorityColumn", EmitDefaultValue = true)]
        public string PriorityColumn { get; set; }

        /// <summary>
        /// Header Name of the column in the input file for the type BICCode, bank indentification code.
        /// </summary>
        /// <value>Header Name of the column in the input file for the type BICCode, bank indentification code.</value>
        [DataMember(Name = "bicColumn", EmitDefaultValue = true)]
        public string BicColumn { get; set; }

        /// <summary>
        /// Header Name of the column in the input file for the type Bloomberg Listing and Regional Ticker.
        /// </summary>
        /// <value>Header Name of the column in the input file for the type Bloomberg Listing and Regional Ticker.</value>
        [DataMember(Name = "bbgTickerColumn", EmitDefaultValue = true)]
        public string BbgTickerColumn { get; set; }

        /// <summary>
        /// Header Name of the column in the input file for the type CIK, Edgar Central Index Keys.
        /// </summary>
        /// <value>Header Name of the column in the input file for the type CIK, Edgar Central Index Keys.</value>
        [DataMember(Name = "cikColumn", EmitDefaultValue = true)]
        public string CikColumn { get; set; }

        /// <summary>
        /// Header Name of the column in the input file for the type CRD, Central Registration Depository.
        /// </summary>
        /// <value>Header Name of the column in the input file for the type CRD, Central Registration Depository.</value>
        [DataMember(Name = "crdColumn", EmitDefaultValue = true)]
        public string CrdColumn { get; set; }

        /// <summary>
        /// Header Name of the column in the input file for the type CUSIP.
        /// </summary>
        /// <value>Header Name of the column in the input file for the type CUSIP.</value>
        [DataMember(Name = "cusipColumn", EmitDefaultValue = true)]
        public string CusipColumn { get; set; }

        /// <summary>
        /// Header Name of the column in the input file for the type DUNS, Dun&amp;Bradstreet.
        /// </summary>
        /// <value>Header Name of the column in the input file for the type DUNS, Dun&amp;Bradstreet.</value>
        [DataMember(Name = "dunsColumn", EmitDefaultValue = true)]
        public string DunsColumn { get; set; }

        /// <summary>
        /// Header Name of the column in the input file for the type EmployerIdentificationNumber, EIN.
        /// </summary>
        /// <value>Header Name of the column in the input file for the type EmployerIdentificationNumber, EIN.</value>
        [DataMember(Name = "einColumn", EmitDefaultValue = true)]
        public string EinColumn { get; set; }

        /// <summary>
        /// Header Name of the column in the input file for the type FederalReserveRSSDIdentifier, RSSD.
        /// </summary>
        /// <value>Header Name of the column in the input file for the type FederalReserveRSSDIdentifier, RSSD.</value>
        [DataMember(Name = "rssdColumn", EmitDefaultValue = true)]
        public string RssdColumn { get; set; }

        /// <summary>
        /// Header Name of the column in the input file for the type FitchCreditRating, Fitch Ratings Identifier.
        /// </summary>
        /// <value>Header Name of the column in the input file for the type FitchCreditRating, Fitch Ratings Identifier.</value>
        [DataMember(Name = "fitchColumn", EmitDefaultValue = true)]
        public string FitchColumn { get; set; }

        /// <summary>
        /// Header Name of the column in the input file for the type ISIN.
        /// </summary>
        /// <value>Header Name of the column in the input file for the type ISIN.</value>
        [DataMember(Name = "isinColumn", EmitDefaultValue = true)]
        public string IsinColumn { get; set; }

        /// <summary>
        /// Header Name of the column in the input file for the type LegalEntityIdentifier, LEI.
        /// </summary>
        /// <value>Header Name of the column in the input file for the type LegalEntityIdentifier, LEI.</value>
        [DataMember(Name = "leiColumn", EmitDefaultValue = true)]
        public string LeiColumn { get; set; }

        /// <summary>
        /// Header Name of the column in the input file for the type Bloomberg Listing/Regional/Security ID.
        /// </summary>
        /// <value>Header Name of the column in the input file for the type Bloomberg Listing/Regional/Security ID.</value>
        [DataMember(Name = "bbgFigiColumn", EmitDefaultValue = true)]
        public string BbgFigiColumn { get; set; }

        /// <summary>
        /// Header Name of the column in the input file for the type MoodysIssuer, Moody&#39;s Ratings Identifier.
        /// </summary>
        /// <value>Header Name of the column in the input file for the type MoodysIssuer, Moody&#39;s Ratings Identifier.</value>
        [DataMember(Name = "mdColumn", EmitDefaultValue = true)]
        public string MdColumn { get; set; }

        /// <summary>
        /// Header Name of the column in the input file for the type PriceTicker.
        /// </summary>
        /// <value>Header Name of the column in the input file for the type PriceTicker.</value>
        [DataMember(Name = "tickerColumn", EmitDefaultValue = true)]
        public string TickerColumn { get; set; }

        /// <summary>
        /// Header Name of the column in the input file for the type S&amp;PRating, S&amp;P Ratings Identifier
        /// </summary>
        /// <value>Header Name of the column in the input file for the type S&amp;PRating, S&amp;P Ratings Identifier</value>
        [DataMember(Name = "sprColumn", EmitDefaultValue = true)]
        public string SprColumn { get; set; }

        /// <summary>
        /// Header Name of the column in the input file for the type SEDOL.
        /// </summary>
        /// <value>Header Name of the column in the input file for the type SEDOL.</value>
        [DataMember(Name = "sedolColumn", EmitDefaultValue = true)]
        public string SedolColumn { get; set; }

        /// <summary>
        /// Header Name of the column in the input file for the type TickerExch.
        /// </summary>
        /// <value>Header Name of the column in the input file for the type TickerExch.</value>
        [DataMember(Name = "tickerExchangeColumn", EmitDefaultValue = true)]
        public string TickerExchangeColumn { get; set; }

        /// <summary>
        /// Header Name of the column in the input file for the type TickerRegion.
        /// </summary>
        /// <value>Header Name of the column in the input file for the type TickerRegion.</value>
        [DataMember(Name = "tickerRegionColumn", EmitDefaultValue = true)]
        public string TickerRegionColumn { get; set; }

        /// <summary>
        /// Header Name of the column in the input file for the type UKCompanyHouse.
        /// </summary>
        /// <value>Header Name of the column in the input file for the type UKCompanyHouse.</value>
        [DataMember(Name = "ukchColumn", EmitDefaultValue = true)]
        public string UkchColumn { get; set; }

        /// <summary>
        /// Header Name of the column in the input file for the type VALOR, Valoren (\&quot;Valor\&quot;) Identification.
        /// </summary>
        /// <value>Header Name of the column in the input file for the type VALOR, Valoren (\&quot;Valor\&quot;) Identification.</value>
        [DataMember(Name = "valorenColumn", EmitDefaultValue = true)]
        public string ValorenColumn { get; set; }

        /// <summary>
        /// Header Name of the column in the input file for the type WKN, German Securities Identification.
        /// </summary>
        /// <value>Header Name of the column in the input file for the type WKN, German Securities Identification.</value>
        [DataMember(Name = "wknColumn", EmitDefaultValue = true)]
        public string WknColumn { get; set; }

        /// <summary>
        /// Name of the column in the input file that contains the entity name to be matched.
        /// </summary>
        /// <value>Name of the column in the input file that contains the entity name to be matched.</value>
        [DataMember(Name = "nameColumn", EmitDefaultValue = true)]
        public string NameColumn { get; set; }

        /// <summary>
        /// Name of the column in the input file that contains the ISO2 country code corresponding to the entity name.  The country code is used when evaluating candidates for a match. 
        /// </summary>
        /// <value>Name of the column in the input file that contains the ISO2 country code corresponding to the entity name.  The country code is used when evaluating candidates for a match. </value>
        [DataMember(Name = "countryColumn", EmitDefaultValue = true)]
        public string CountryColumn { get; set; }

        /// <summary>
        /// Name of the column in the input file that contains the Two-character state code corresponding to the entity name. The state code is used when evaluating candidates for a match. 
        /// </summary>
        /// <value>Name of the column in the input file that contains the Two-character state code corresponding to the entity name. The state code is used when evaluating candidates for a match. </value>
        [DataMember(Name = "stateColumn", EmitDefaultValue = true)]
        public string StateColumn { get; set; }

        /// <summary>
        /// Name of the column in the input file that contains the URL corresponding to the entity name. The URL is used when evaluating candidates for a match. 
        /// </summary>
        /// <value>Name of the column in the input file that contains the URL corresponding to the entity name. The URL is used when evaluating candidates for a match. </value>
        [DataMember(Name = "urlColumn", EmitDefaultValue = true)]
        public string UrlColumn { get; set; }

        /// <summary>
        /// Flag denoting the taskId has a result.
        /// </summary>
        /// <value>Flag denoting the taskId has a result.</value>
        [DataMember(Name = "hasResult", EmitDefaultValue = true)]
        public bool? HasResult { get; set; }

        /// <summary>
        /// Time the Task was submitted in UTC.
        /// </summary>
        /// <value>Time the Task was submitted in UTC.</value>
        [DataMember(Name = "taskSubmitTime", EmitDefaultValue = true)]
        public DateTime? TaskSubmitTime { get; set; }

        /// <summary>
        /// Textual message for the status.
        /// </summary>
        /// <value>Textual message for the status.</value>
        [DataMember(Name = "message", EmitDefaultValue = true)]
        public string Message { get; set; }

        /// <summary>
        /// Number of records in the Input File.
        /// </summary>
        /// <value>Number of records in the Input File.</value>
        [DataMember(Name = "inputCount", EmitDefaultValue = true)]
        public int? InputCount { get; set; }

        /// <summary>
        /// Number of records with status of MAPPED the Input File.
        /// </summary>
        /// <value>Number of records with status of MAPPED the Input File.</value>
        [DataMember(Name = "mappedCount", EmitDefaultValue = true)]
        public int? MappedCount { get; set; }

        /// <summary>
        /// Number of records with status of UNMAPPED the Input File.
        /// </summary>
        /// <value>Number of records with status of UNMAPPED the Input File.</value>
        [DataMember(Name = "unmappedCount", EmitDefaultValue = true)]
        public int? UnmappedCount { get; set; }

        /// <summary>
        /// Number of records with status of INDETERMINATE the Input File.
        /// </summary>
        /// <value>Number of records with status of INDETERMINATE the Input File.</value>
        [DataMember(Name = "indeterminateCount", EmitDefaultValue = true)]
        public int? IndeterminateCount { get; set; }

        /// <summary>
        /// Process start time in UTC.
        /// </summary>
        /// <value>Process start time in UTC.</value>
        [DataMember(Name = "processStartTime", EmitDefaultValue = true)]
        public DateTime? ProcessStartTime { get; set; }

        /// <summary>
        /// Process duration in seconds.
        /// </summary>
        /// <value>Process duration in seconds.</value>
        [DataMember(Name = "processDuration", EmitDefaultValue = true)]
        public double? ProcessDuration { get; set; }

        /// <summary>
        /// Number of tries made so far for the request.
        /// </summary>
        /// <value>Number of tries made so far for the request.</value>
        [DataMember(Name = "tryCount", EmitDefaultValue = true)]
        public int? TryCount { get; set; }

        /// <summary>
        /// Percentage of mapped entities in the Input File.
        /// </summary>
        /// <value>Percentage of mapped entities in the Input File.</value>
        [DataMember(Name = "decisionRate", EmitDefaultValue = true)]
        public double? DecisionRate { get; set; }

        /// <summary>
        /// Gets or Sets Error
        /// </summary>
        [DataMember(Name = "error", EmitDefaultValue = true)]
        public string Error { get; set; }

        /// <summary>
        /// Gets or Sets ErrorTitle
        /// </summary>
        [DataMember(Name = "errorTitle", EmitDefaultValue = true)]
        public string ErrorTitle { get; set; }

        /// <summary>
        /// Requested Entity types to include. 
        /// </summary>
        /// <value>Requested Entity types to include. </value>
        [DataMember(Name = "includeEntityType", EmitDefaultValue = false)]
        public List<string> IncludeEntityType { get; set; }

        /// <summary>
        /// Requested Entity types to exclude. 
        /// </summary>
        /// <value>Requested Entity types to exclude. </value>
        [DataMember(Name = "excludeEntityType", EmitDefaultValue = false)]
        public List<string> ExcludeEntityType { get; set; }

        /// <summary>
        /// Requested Entity subtypes to include. 
        /// </summary>
        /// <value>Requested Entity subtypes to include. </value>
        [DataMember(Name = "includeEntitySubType", EmitDefaultValue = false)]
        public List<string> IncludeEntitySubType { get; set; }

        /// <summary>
        /// Requested Entity subtypes to exclude. 
        /// </summary>
        /// <value>Requested Entity subtypes to exclude. </value>
        [DataMember(Name = "excludeEntitySubType", EmitDefaultValue = false)]
        public List<string> ExcludeEntitySubType { get; set; }

        /// <summary>
        /// user-serial of the person who initiated the entity task.
        /// </summary>
        /// <value>user-serial of the person who initiated the entity task.</value>
        [DataMember(Name = "userSerial", EmitDefaultValue = true)]
        public string UserSerial { get; set; }

        /// <summary>
        /// Full name of the person associated with the &#x60;userSerial&#x60;. 
        /// </summary>
        /// <value>Full name of the person associated with the &#x60;userSerial&#x60;. </value>
        [DataMember(Name = "userFullName", EmitDefaultValue = true)]
        public string UserFullName { get; set; }

        /// <summary>
        /// The universe id this task was submitted to. 
        /// </summary>
        /// <value>The universe id this task was submitted to. </value>
        [DataMember(Name = "universeId", EmitDefaultValue = true)]
        public int? UniverseId { get; set; }

        /// <summary>
        /// The name of the universe this task was submitted to. 
        /// </summary>
        /// <value>The name of the universe this task was submitted to. </value>
        [DataMember(Name = "universeName", EmitDefaultValue = true)]
        public string UniverseName { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class EntityTaskStatus {\n");
            sb.Append("  TaskId: ").Append(TaskId).Append("\n");
            sb.Append("  TaskName: ").Append(TaskName).Append("\n");
            sb.Append("  TaskAction: ").Append(TaskAction).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  InputFile: ").Append(InputFile).Append("\n");
            sb.Append("  ClientIdColumn: ").Append(ClientIdColumn).Append("\n");
            sb.Append("  PriorityColumn: ").Append(PriorityColumn).Append("\n");
            sb.Append("  BicColumn: ").Append(BicColumn).Append("\n");
            sb.Append("  BbgTickerColumn: ").Append(BbgTickerColumn).Append("\n");
            sb.Append("  CikColumn: ").Append(CikColumn).Append("\n");
            sb.Append("  CrdColumn: ").Append(CrdColumn).Append("\n");
            sb.Append("  CusipColumn: ").Append(CusipColumn).Append("\n");
            sb.Append("  DunsColumn: ").Append(DunsColumn).Append("\n");
            sb.Append("  EinColumn: ").Append(EinColumn).Append("\n");
            sb.Append("  RssdColumn: ").Append(RssdColumn).Append("\n");
            sb.Append("  FitchColumn: ").Append(FitchColumn).Append("\n");
            sb.Append("  IsinColumn: ").Append(IsinColumn).Append("\n");
            sb.Append("  LeiColumn: ").Append(LeiColumn).Append("\n");
            sb.Append("  BbgFigiColumn: ").Append(BbgFigiColumn).Append("\n");
            sb.Append("  MdColumn: ").Append(MdColumn).Append("\n");
            sb.Append("  TickerColumn: ").Append(TickerColumn).Append("\n");
            sb.Append("  SprColumn: ").Append(SprColumn).Append("\n");
            sb.Append("  SedolColumn: ").Append(SedolColumn).Append("\n");
            sb.Append("  TickerExchangeColumn: ").Append(TickerExchangeColumn).Append("\n");
            sb.Append("  TickerRegionColumn: ").Append(TickerRegionColumn).Append("\n");
            sb.Append("  UkchColumn: ").Append(UkchColumn).Append("\n");
            sb.Append("  ValorenColumn: ").Append(ValorenColumn).Append("\n");
            sb.Append("  WknColumn: ").Append(WknColumn).Append("\n");
            sb.Append("  NameColumn: ").Append(NameColumn).Append("\n");
            sb.Append("  CountryColumn: ").Append(CountryColumn).Append("\n");
            sb.Append("  StateColumn: ").Append(StateColumn).Append("\n");
            sb.Append("  UrlColumn: ").Append(UrlColumn).Append("\n");
            sb.Append("  HasResult: ").Append(HasResult).Append("\n");
            sb.Append("  TaskSubmitTime: ").Append(TaskSubmitTime).Append("\n");
            sb.Append("  Message: ").Append(Message).Append("\n");
            sb.Append("  InputCount: ").Append(InputCount).Append("\n");
            sb.Append("  MappedCount: ").Append(MappedCount).Append("\n");
            sb.Append("  UnmappedCount: ").Append(UnmappedCount).Append("\n");
            sb.Append("  IndeterminateCount: ").Append(IndeterminateCount).Append("\n");
            sb.Append("  ProcessStartTime: ").Append(ProcessStartTime).Append("\n");
            sb.Append("  ProcessDuration: ").Append(ProcessDuration).Append("\n");
            sb.Append("  TryCount: ").Append(TryCount).Append("\n");
            sb.Append("  DecisionRate: ").Append(DecisionRate).Append("\n");
            sb.Append("  Error: ").Append(Error).Append("\n");
            sb.Append("  ErrorTitle: ").Append(ErrorTitle).Append("\n");
            sb.Append("  IncludeEntityType: ").Append(IncludeEntityType).Append("\n");
            sb.Append("  ExcludeEntityType: ").Append(ExcludeEntityType).Append("\n");
            sb.Append("  IncludeEntitySubType: ").Append(IncludeEntitySubType).Append("\n");
            sb.Append("  ExcludeEntitySubType: ").Append(ExcludeEntitySubType).Append("\n");
            sb.Append("  UserSerial: ").Append(UserSerial).Append("\n");
            sb.Append("  UserFullName: ").Append(UserFullName).Append("\n");
            sb.Append("  UniverseId: ").Append(UniverseId).Append("\n");
            sb.Append("  UniverseName: ").Append(UniverseName).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as EntityTaskStatus);
        }

        /// <summary>
        /// Returns true if EntityTaskStatus instances are equal
        /// </summary>
        /// <param name="input">Instance of EntityTaskStatus to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(EntityTaskStatus input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.TaskId == input.TaskId ||
                    (this.TaskId != null &&
                    this.TaskId.Equals(input.TaskId))
                ) && 
                (
                    this.TaskName == input.TaskName ||
                    (this.TaskName != null &&
                    this.TaskName.Equals(input.TaskName))
                ) && 
                (
                    this.TaskAction == input.TaskAction ||
                    (this.TaskAction != null &&
                    this.TaskAction.Equals(input.TaskAction))
                ) && 
                (
                    this.Status == input.Status ||
                    this.Status.Equals(input.Status)
                ) && 
                (
                    this.InputFile == input.InputFile ||
                    (this.InputFile != null &&
                    this.InputFile.Equals(input.InputFile))
                ) && 
                (
                    this.ClientIdColumn == input.ClientIdColumn ||
                    (this.ClientIdColumn != null &&
                    this.ClientIdColumn.Equals(input.ClientIdColumn))
                ) && 
                (
                    this.PriorityColumn == input.PriorityColumn ||
                    (this.PriorityColumn != null &&
                    this.PriorityColumn.Equals(input.PriorityColumn))
                ) && 
                (
                    this.BicColumn == input.BicColumn ||
                    (this.BicColumn != null &&
                    this.BicColumn.Equals(input.BicColumn))
                ) && 
                (
                    this.BbgTickerColumn == input.BbgTickerColumn ||
                    (this.BbgTickerColumn != null &&
                    this.BbgTickerColumn.Equals(input.BbgTickerColumn))
                ) && 
                (
                    this.CikColumn == input.CikColumn ||
                    (this.CikColumn != null &&
                    this.CikColumn.Equals(input.CikColumn))
                ) && 
                (
                    this.CrdColumn == input.CrdColumn ||
                    (this.CrdColumn != null &&
                    this.CrdColumn.Equals(input.CrdColumn))
                ) && 
                (
                    this.CusipColumn == input.CusipColumn ||
                    (this.CusipColumn != null &&
                    this.CusipColumn.Equals(input.CusipColumn))
                ) && 
                (
                    this.DunsColumn == input.DunsColumn ||
                    (this.DunsColumn != null &&
                    this.DunsColumn.Equals(input.DunsColumn))
                ) && 
                (
                    this.EinColumn == input.EinColumn ||
                    (this.EinColumn != null &&
                    this.EinColumn.Equals(input.EinColumn))
                ) && 
                (
                    this.RssdColumn == input.RssdColumn ||
                    (this.RssdColumn != null &&
                    this.RssdColumn.Equals(input.RssdColumn))
                ) && 
                (
                    this.FitchColumn == input.FitchColumn ||
                    (this.FitchColumn != null &&
                    this.FitchColumn.Equals(input.FitchColumn))
                ) && 
                (
                    this.IsinColumn == input.IsinColumn ||
                    (this.IsinColumn != null &&
                    this.IsinColumn.Equals(input.IsinColumn))
                ) && 
                (
                    this.LeiColumn == input.LeiColumn ||
                    (this.LeiColumn != null &&
                    this.LeiColumn.Equals(input.LeiColumn))
                ) && 
                (
                    this.BbgFigiColumn == input.BbgFigiColumn ||
                    (this.BbgFigiColumn != null &&
                    this.BbgFigiColumn.Equals(input.BbgFigiColumn))
                ) && 
                (
                    this.MdColumn == input.MdColumn ||
                    (this.MdColumn != null &&
                    this.MdColumn.Equals(input.MdColumn))
                ) && 
                (
                    this.TickerColumn == input.TickerColumn ||
                    (this.TickerColumn != null &&
                    this.TickerColumn.Equals(input.TickerColumn))
                ) && 
                (
                    this.SprColumn == input.SprColumn ||
                    (this.SprColumn != null &&
                    this.SprColumn.Equals(input.SprColumn))
                ) && 
                (
                    this.SedolColumn == input.SedolColumn ||
                    (this.SedolColumn != null &&
                    this.SedolColumn.Equals(input.SedolColumn))
                ) && 
                (
                    this.TickerExchangeColumn == input.TickerExchangeColumn ||
                    (this.TickerExchangeColumn != null &&
                    this.TickerExchangeColumn.Equals(input.TickerExchangeColumn))
                ) && 
                (
                    this.TickerRegionColumn == input.TickerRegionColumn ||
                    (this.TickerRegionColumn != null &&
                    this.TickerRegionColumn.Equals(input.TickerRegionColumn))
                ) && 
                (
                    this.UkchColumn == input.UkchColumn ||
                    (this.UkchColumn != null &&
                    this.UkchColumn.Equals(input.UkchColumn))
                ) && 
                (
                    this.ValorenColumn == input.ValorenColumn ||
                    (this.ValorenColumn != null &&
                    this.ValorenColumn.Equals(input.ValorenColumn))
                ) && 
                (
                    this.WknColumn == input.WknColumn ||
                    (this.WknColumn != null &&
                    this.WknColumn.Equals(input.WknColumn))
                ) && 
                (
                    this.NameColumn == input.NameColumn ||
                    (this.NameColumn != null &&
                    this.NameColumn.Equals(input.NameColumn))
                ) && 
                (
                    this.CountryColumn == input.CountryColumn ||
                    (this.CountryColumn != null &&
                    this.CountryColumn.Equals(input.CountryColumn))
                ) && 
                (
                    this.StateColumn == input.StateColumn ||
                    (this.StateColumn != null &&
                    this.StateColumn.Equals(input.StateColumn))
                ) && 
                (
                    this.UrlColumn == input.UrlColumn ||
                    (this.UrlColumn != null &&
                    this.UrlColumn.Equals(input.UrlColumn))
                ) && 
                (
                    this.HasResult == input.HasResult ||
                    (this.HasResult != null &&
                    this.HasResult.Equals(input.HasResult))
                ) && 
                (
                    this.TaskSubmitTime == input.TaskSubmitTime ||
                    (this.TaskSubmitTime != null &&
                    this.TaskSubmitTime.Equals(input.TaskSubmitTime))
                ) && 
                (
                    this.Message == input.Message ||
                    (this.Message != null &&
                    this.Message.Equals(input.Message))
                ) && 
                (
                    this.InputCount == input.InputCount ||
                    (this.InputCount != null &&
                    this.InputCount.Equals(input.InputCount))
                ) && 
                (
                    this.MappedCount == input.MappedCount ||
                    (this.MappedCount != null &&
                    this.MappedCount.Equals(input.MappedCount))
                ) && 
                (
                    this.UnmappedCount == input.UnmappedCount ||
                    (this.UnmappedCount != null &&
                    this.UnmappedCount.Equals(input.UnmappedCount))
                ) && 
                (
                    this.IndeterminateCount == input.IndeterminateCount ||
                    (this.IndeterminateCount != null &&
                    this.IndeterminateCount.Equals(input.IndeterminateCount))
                ) && 
                (
                    this.ProcessStartTime == input.ProcessStartTime ||
                    (this.ProcessStartTime != null &&
                    this.ProcessStartTime.Equals(input.ProcessStartTime))
                ) && 
                (
                    this.ProcessDuration == input.ProcessDuration ||
                    (this.ProcessDuration != null &&
                    this.ProcessDuration.Equals(input.ProcessDuration))
                ) && 
                (
                    this.TryCount == input.TryCount ||
                    (this.TryCount != null &&
                    this.TryCount.Equals(input.TryCount))
                ) && 
                (
                    this.DecisionRate == input.DecisionRate ||
                    (this.DecisionRate != null &&
                    this.DecisionRate.Equals(input.DecisionRate))
                ) && 
                (
                    this.Error == input.Error ||
                    (this.Error != null &&
                    this.Error.Equals(input.Error))
                ) && 
                (
                    this.ErrorTitle == input.ErrorTitle ||
                    (this.ErrorTitle != null &&
                    this.ErrorTitle.Equals(input.ErrorTitle))
                ) && 
                (
                    this.IncludeEntityType == input.IncludeEntityType ||
                    this.IncludeEntityType != null &&
                    input.IncludeEntityType != null &&
                    this.IncludeEntityType.SequenceEqual(input.IncludeEntityType)
                ) && 
                (
                    this.ExcludeEntityType == input.ExcludeEntityType ||
                    this.ExcludeEntityType != null &&
                    input.ExcludeEntityType != null &&
                    this.ExcludeEntityType.SequenceEqual(input.ExcludeEntityType)
                ) && 
                (
                    this.IncludeEntitySubType == input.IncludeEntitySubType ||
                    this.IncludeEntitySubType != null &&
                    input.IncludeEntitySubType != null &&
                    this.IncludeEntitySubType.SequenceEqual(input.IncludeEntitySubType)
                ) && 
                (
                    this.ExcludeEntitySubType == input.ExcludeEntitySubType ||
                    this.ExcludeEntitySubType != null &&
                    input.ExcludeEntitySubType != null &&
                    this.ExcludeEntitySubType.SequenceEqual(input.ExcludeEntitySubType)
                ) && 
                (
                    this.UserSerial == input.UserSerial ||
                    (this.UserSerial != null &&
                    this.UserSerial.Equals(input.UserSerial))
                ) && 
                (
                    this.UserFullName == input.UserFullName ||
                    (this.UserFullName != null &&
                    this.UserFullName.Equals(input.UserFullName))
                ) && 
                (
                    this.UniverseId == input.UniverseId ||
                    (this.UniverseId != null &&
                    this.UniverseId.Equals(input.UniverseId))
                ) && 
                (
                    this.UniverseName == input.UniverseName ||
                    (this.UniverseName != null &&
                    this.UniverseName.Equals(input.UniverseName))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.TaskId != null)
                {
                    hashCode = (hashCode * 59) + this.TaskId.GetHashCode();
                }
                if (this.TaskName != null)
                {
                    hashCode = (hashCode * 59) + this.TaskName.GetHashCode();
                }
                if (this.TaskAction != null)
                {
                    hashCode = (hashCode * 59) + this.TaskAction.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Status.GetHashCode();
                if (this.InputFile != null)
                {
                    hashCode = (hashCode * 59) + this.InputFile.GetHashCode();
                }
                if (this.ClientIdColumn != null)
                {
                    hashCode = (hashCode * 59) + this.ClientIdColumn.GetHashCode();
                }
                if (this.PriorityColumn != null)
                {
                    hashCode = (hashCode * 59) + this.PriorityColumn.GetHashCode();
                }
                if (this.BicColumn != null)
                {
                    hashCode = (hashCode * 59) + this.BicColumn.GetHashCode();
                }
                if (this.BbgTickerColumn != null)
                {
                    hashCode = (hashCode * 59) + this.BbgTickerColumn.GetHashCode();
                }
                if (this.CikColumn != null)
                {
                    hashCode = (hashCode * 59) + this.CikColumn.GetHashCode();
                }
                if (this.CrdColumn != null)
                {
                    hashCode = (hashCode * 59) + this.CrdColumn.GetHashCode();
                }
                if (this.CusipColumn != null)
                {
                    hashCode = (hashCode * 59) + this.CusipColumn.GetHashCode();
                }
                if (this.DunsColumn != null)
                {
                    hashCode = (hashCode * 59) + this.DunsColumn.GetHashCode();
                }
                if (this.EinColumn != null)
                {
                    hashCode = (hashCode * 59) + this.EinColumn.GetHashCode();
                }
                if (this.RssdColumn != null)
                {
                    hashCode = (hashCode * 59) + this.RssdColumn.GetHashCode();
                }
                if (this.FitchColumn != null)
                {
                    hashCode = (hashCode * 59) + this.FitchColumn.GetHashCode();
                }
                if (this.IsinColumn != null)
                {
                    hashCode = (hashCode * 59) + this.IsinColumn.GetHashCode();
                }
                if (this.LeiColumn != null)
                {
                    hashCode = (hashCode * 59) + this.LeiColumn.GetHashCode();
                }
                if (this.BbgFigiColumn != null)
                {
                    hashCode = (hashCode * 59) + this.BbgFigiColumn.GetHashCode();
                }
                if (this.MdColumn != null)
                {
                    hashCode = (hashCode * 59) + this.MdColumn.GetHashCode();
                }
                if (this.TickerColumn != null)
                {
                    hashCode = (hashCode * 59) + this.TickerColumn.GetHashCode();
                }
                if (this.SprColumn != null)
                {
                    hashCode = (hashCode * 59) + this.SprColumn.GetHashCode();
                }
                if (this.SedolColumn != null)
                {
                    hashCode = (hashCode * 59) + this.SedolColumn.GetHashCode();
                }
                if (this.TickerExchangeColumn != null)
                {
                    hashCode = (hashCode * 59) + this.TickerExchangeColumn.GetHashCode();
                }
                if (this.TickerRegionColumn != null)
                {
                    hashCode = (hashCode * 59) + this.TickerRegionColumn.GetHashCode();
                }
                if (this.UkchColumn != null)
                {
                    hashCode = (hashCode * 59) + this.UkchColumn.GetHashCode();
                }
                if (this.ValorenColumn != null)
                {
                    hashCode = (hashCode * 59) + this.ValorenColumn.GetHashCode();
                }
                if (this.WknColumn != null)
                {
                    hashCode = (hashCode * 59) + this.WknColumn.GetHashCode();
                }
                if (this.NameColumn != null)
                {
                    hashCode = (hashCode * 59) + this.NameColumn.GetHashCode();
                }
                if (this.CountryColumn != null)
                {
                    hashCode = (hashCode * 59) + this.CountryColumn.GetHashCode();
                }
                if (this.StateColumn != null)
                {
                    hashCode = (hashCode * 59) + this.StateColumn.GetHashCode();
                }
                if (this.UrlColumn != null)
                {
                    hashCode = (hashCode * 59) + this.UrlColumn.GetHashCode();
                }
                if (this.HasResult != null)
                {
                    hashCode = (hashCode * 59) + this.HasResult.GetHashCode();
                }
                if (this.TaskSubmitTime != null)
                {
                    hashCode = (hashCode * 59) + this.TaskSubmitTime.GetHashCode();
                }
                if (this.Message != null)
                {
                    hashCode = (hashCode * 59) + this.Message.GetHashCode();
                }
                if (this.InputCount != null)
                {
                    hashCode = (hashCode * 59) + this.InputCount.GetHashCode();
                }
                if (this.MappedCount != null)
                {
                    hashCode = (hashCode * 59) + this.MappedCount.GetHashCode();
                }
                if (this.UnmappedCount != null)
                {
                    hashCode = (hashCode * 59) + this.UnmappedCount.GetHashCode();
                }
                if (this.IndeterminateCount != null)
                {
                    hashCode = (hashCode * 59) + this.IndeterminateCount.GetHashCode();
                }
                if (this.ProcessStartTime != null)
                {
                    hashCode = (hashCode * 59) + this.ProcessStartTime.GetHashCode();
                }
                if (this.ProcessDuration != null)
                {
                    hashCode = (hashCode * 59) + this.ProcessDuration.GetHashCode();
                }
                if (this.TryCount != null)
                {
                    hashCode = (hashCode * 59) + this.TryCount.GetHashCode();
                }
                if (this.DecisionRate != null)
                {
                    hashCode = (hashCode * 59) + this.DecisionRate.GetHashCode();
                }
                if (this.Error != null)
                {
                    hashCode = (hashCode * 59) + this.Error.GetHashCode();
                }
                if (this.ErrorTitle != null)
                {
                    hashCode = (hashCode * 59) + this.ErrorTitle.GetHashCode();
                }
                if (this.IncludeEntityType != null)
                {
                    hashCode = (hashCode * 59) + this.IncludeEntityType.GetHashCode();
                }
                if (this.ExcludeEntityType != null)
                {
                    hashCode = (hashCode * 59) + this.ExcludeEntityType.GetHashCode();
                }
                if (this.IncludeEntitySubType != null)
                {
                    hashCode = (hashCode * 59) + this.IncludeEntitySubType.GetHashCode();
                }
                if (this.ExcludeEntitySubType != null)
                {
                    hashCode = (hashCode * 59) + this.ExcludeEntitySubType.GetHashCode();
                }
                if (this.UserSerial != null)
                {
                    hashCode = (hashCode * 59) + this.UserSerial.GetHashCode();
                }
                if (this.UserFullName != null)
                {
                    hashCode = (hashCode * 59) + this.UserFullName.GetHashCode();
                }
                if (this.UniverseId != null)
                {
                    hashCode = (hashCode * 59) + this.UniverseId.GetHashCode();
                }
                if (this.UniverseName != null)
                {
                    hashCode = (hashCode * 59) + this.UniverseName.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
