/*
 * FactSet Search Answers API
 *
 * The FactSet Search Answers API provides answers to search queries, reflecting the data shown within FactSet Search Answers, and allowing you to easily add financial data to your widgets, lookups, bots, and assistants. The API understands a fixed amount of search terms and returns structured data from FactSetâ€™s many data sources. Possible answers include Price of a Company, Top 10 Year-to-Date Gainers, Revenue per Passenger Mile, and many more.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: FactSearch.Team@factset.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = FactSet.SDK.FactSetSearchAnswers.Client.OpenAPIDateConverter;
using System.Reflection;

namespace FactSet.SDK.FactSetSearchAnswers.Model
{
    /// <summary>
    /// DataAnswerData
    /// </summary>
    [JsonConverter(typeof(DataAnswerDataJsonConverter))]
    [DataContract(Name = "DataAnswerData")]
    public partial class DataAnswerData : AbstractOpenAPISchema, IEquatable<DataAnswerData>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DataAnswerData" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of Answer.</param>
        public DataAnswerData(Answer actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "oneOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DataAnswerData" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of AnswerWithoutData.</param>
        public DataAnswerData(AnswerWithoutData actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "oneOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DataAnswerData" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of NoAnswersFound.</param>
        public DataAnswerData(NoAnswersFound actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "oneOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }


        private Object _actualInstance;

        /// <summary>
        /// Gets or Sets ActualInstance
        /// </summary>
        public override Object ActualInstance
        {
            get
            {
                return _actualInstance;
            }
            set
            {
                if (value is Answer)
                {
                    this._actualInstance = value;
                }
                else if (value is AnswerWithoutData)
                {
                    this._actualInstance = value;
                }
                else if (value is NoAnswersFound)
                {
                    this._actualInstance = value;
                }
                else
                {
                    throw new ArgumentException("Invalid instance found. Must be the following types: Answer, AnswerWithoutData, NoAnswersFound");
                }
            }
        }

        /// <summary>
        /// Get the actual instance of `Answer`. If the actual instance is not `Answer`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of Answer</returns>
        public Answer GetAnswer()
        {
            return (Answer)this.ActualInstance;
        }

        /// <summary>
        /// Get the actual instance of `AnswerWithoutData`. If the actual instance is not `AnswerWithoutData`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of AnswerWithoutData</returns>
        public AnswerWithoutData GetAnswerWithoutData()
        {
            return (AnswerWithoutData)this.ActualInstance;
        }

        /// <summary>
        /// Get the actual instance of `NoAnswersFound`. If the actual instance is not `NoAnswersFound`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of NoAnswersFound</returns>
        public NoAnswersFound GetNoAnswersFound()
        {
            return (NoAnswersFound)this.ActualInstance;
        }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DataAnswerData {\n");
            sb.Append("  ActualInstance: ").Append(this.ActualInstance).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public override string ToJson()
        {
            return JsonConvert.SerializeObject(this.ActualInstance, DataAnswerData.SerializerSettings);
        }

        /// <summary>
        /// Converts the JSON string into an instance of DataAnswerData
        /// </summary>
        /// <param name="jsonString">JSON string</param>
        /// <returns>An instance of DataAnswerData</returns>
        public static DataAnswerData FromJson(string jsonString)
        {
            DataAnswerData newDataAnswerData = null;

            if (string.IsNullOrEmpty(jsonString))
            {
                return newDataAnswerData;
            }
            int match = 0;
            List<string> matchedTypes = new List<string>();

            try
            {
                var hasAdditionalProperties = !(typeof(Answer).GetProperty("AdditionalProperties") is null);
                var parsedValue = JsonConvert.DeserializeObject<Answer>(
                    jsonString,
                    hasAdditionalProperties ? DataAnswerData.AdditionalPropertiesSerializerSettings : DataAnswerData.SerializerSettings
                );
                newDataAnswerData = new DataAnswerData(parsedValue);
                matchedTypes.Add("Answer");
                match++;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into Answer: {1}", jsonString, exception.ToString()));
            }

            try
            {
                var hasAdditionalProperties = !(typeof(AnswerWithoutData).GetProperty("AdditionalProperties") is null);
                var parsedValue = JsonConvert.DeserializeObject<AnswerWithoutData>(
                    jsonString,
                    hasAdditionalProperties ? DataAnswerData.AdditionalPropertiesSerializerSettings : DataAnswerData.SerializerSettings
                );
                newDataAnswerData = new DataAnswerData(parsedValue);
                matchedTypes.Add("AnswerWithoutData");
                match++;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into AnswerWithoutData: {1}", jsonString, exception.ToString()));
            }

            try
            {
                var hasAdditionalProperties = !(typeof(NoAnswersFound).GetProperty("AdditionalProperties") is null);
                var parsedValue = JsonConvert.DeserializeObject<NoAnswersFound>(
                    jsonString,
                    hasAdditionalProperties ? DataAnswerData.AdditionalPropertiesSerializerSettings : DataAnswerData.SerializerSettings
                );
                newDataAnswerData = new DataAnswerData(parsedValue);
                matchedTypes.Add("NoAnswersFound");
                match++;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into NoAnswersFound: {1}", jsonString, exception.ToString()));
            }

            if (match == 0)
            {
                throw new InvalidDataException("The JSON string `" + jsonString + "` cannot be deserialized into any schema defined.");
            }
            else if (match > 1)
            {
                throw new InvalidDataException("The JSON string `" + jsonString + "` incorrectly matches more than one schema (should be exactly one match): " + matchedTypes);
            }

            // deserialization is considered successful at this point if no exception has been thrown.
            return newDataAnswerData;
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DataAnswerData);
        }

        /// <summary>
        /// Returns true if DataAnswerData instances are equal
        /// </summary>
        /// <param name="input">Instance of DataAnswerData to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DataAnswerData input)
        {
            if (input == null)
                return false;

            return this.ActualInstance.Equals(input.ActualInstance);
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ActualInstance != null)
                    hashCode = hashCode * 59 + this.ActualInstance.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// Custom JSON converter for DataAnswerData
    /// </summary>
    public class DataAnswerDataJsonConverter : JsonConverter
    {
        /// <summary>
        /// To write the JSON string
        /// </summary>
        /// <param name="writer">JSON writer</param>
        /// <param name="value">Object to be converted into a JSON string</param>
        /// <param name="serializer">JSON Serializer</param>
        public override void WriteJson(JsonWriter writer, object value, JsonSerializer serializer)
        {
            writer.WriteRawValue((string)(typeof(DataAnswerData).GetMethod("ToJson").Invoke(value, null)));
        }

        /// <summary>
        /// To convert a JSON string into an object
        /// </summary>
        /// <param name="reader">JSON reader</param>
        /// <param name="objectType">Object type</param>
        /// <param name="existingValue">Existing value</param>
        /// <param name="serializer">JSON Serializer</param>
        /// <returns>The object converted from the JSON string</returns>
        public override object ReadJson(JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer)
        {
            if(reader.TokenType != JsonToken.Null)
            {
                return DataAnswerData.FromJson(JToken.Load(reader).ToString(Formatting.None));
            }
            return null;
        }

        /// <summary>
        /// Check if the object can be converted
        /// </summary>
        /// <param name="objectType">Object type</param>
        /// <returns>True if the object can be converted</returns>
        public override bool CanConvert(Type objectType)
        {
            return false;
        }
    }

}
