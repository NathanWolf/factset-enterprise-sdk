/*
 * ID Lookup API
 *
 * The Factset Identifier Lookup API provides the ability to search for various identifier types based on keyword. The API returns tickers, entity names and other identifiers that Factset supports. In addition, the API offers filters that allows users to refine the results. 
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = FactSet.SDK.IDLookup.Client.OpenAPIDateConverter;

namespace FactSet.SDK.IDLookup.Model
{
    /// <summary>
    /// ResponseDetails
    /// </summary>
    [DataContract(Name = "response_details")]
    public partial class ResponseDetails : IEquatable<ResponseDetails>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ResponseDetails" /> class.
        /// </summary>
        /// <param name="index">Type of Asset Class.</param>
        /// <param name="symbol">Symbol is the only value that should be passed back to any FactSet services to retrieve data .</param>
        /// <param name="name">Name of the related entity.</param>
        /// <param name="entityId">Displays Entity ID&#39;s for public companies and only if the asset class is equities .</param>
        public ResponseDetails(string index = default(string), string symbol = default(string), string name = default(string), string entityId = default(string))
        {
            this.Index = index;
            this.Symbol = symbol;
            this.Name = name;
            this.EntityId = entityId;
        }

        /// <summary>
        /// Type of Asset Class
        /// </summary>
        /// <value>Type of Asset Class</value>
        [DataMember(Name = "index", EmitDefaultValue = false)]
        public string Index { get; set; }

        /// <summary>
        /// Symbol is the only value that should be passed back to any FactSet services to retrieve data 
        /// </summary>
        /// <value>Symbol is the only value that should be passed back to any FactSet services to retrieve data </value>
        [DataMember(Name = "symbol", EmitDefaultValue = false)]
        public string Symbol { get; set; }

        /// <summary>
        /// Name of the related entity
        /// </summary>
        /// <value>Name of the related entity</value>
        [DataMember(Name = "name", EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// Displays Entity ID&#39;s for public companies and only if the asset class is equities 
        /// </summary>
        /// <value>Displays Entity ID&#39;s for public companies and only if the asset class is equities </value>
        [DataMember(Name = "entity_id", EmitDefaultValue = false)]
        public string EntityId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ResponseDetails {\n");
            sb.Append("  Index: ").Append(Index).Append("\n");
            sb.Append("  Symbol: ").Append(Symbol).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  EntityId: ").Append(EntityId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ResponseDetails);
        }

        /// <summary>
        /// Returns true if ResponseDetails instances are equal
        /// </summary>
        /// <param name="input">Instance of ResponseDetails to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ResponseDetails input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Index == input.Index ||
                    (this.Index != null &&
                    this.Index.Equals(input.Index))
                ) && 
                (
                    this.Symbol == input.Symbol ||
                    (this.Symbol != null &&
                    this.Symbol.Equals(input.Symbol))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.EntityId == input.EntityId ||
                    (this.EntityId != null &&
                    this.EntityId.Equals(input.EntityId))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Index != null)
                    hashCode = hashCode * 59 + this.Index.GetHashCode();
                if (this.Symbol != null)
                    hashCode = hashCode * 59 + this.Symbol.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.EntityId != null)
                    hashCode = hashCode * 59 + this.EntityId.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
