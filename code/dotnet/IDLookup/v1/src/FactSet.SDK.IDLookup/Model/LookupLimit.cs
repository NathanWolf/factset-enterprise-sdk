/*
 * ID Lookup API
 *
 * The Factset Identifier Lookup API provides the ability to search for various identifier types based on keyword. The API returns tickers, entity names and other identifiers that Factset supports. In addition, the API offers filters that allows users to refine the results. 
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = FactSet.SDK.IDLookup.Client.OpenAPIDateConverter;

namespace FactSet.SDK.IDLookup.Model
{
    /// <summary>
    /// This parameters takes the value for number of results to be returnedby search. Maximum number of results returned are 25 and default value is 10. 
    /// </summary>
    [DataContract(Name = "lookup_limit")]
    public partial class LookupLimit : IEquatable<LookupLimit>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="LookupLimit" /> class.
        /// </summary>
        /// <param name="resultLimit">resultLimit.</param>
        public LookupLimit(int resultLimit = default(int))
        {
            this.ResultLimit = resultLimit;
        }

        /// <summary>
        /// Gets or Sets ResultLimit
        /// </summary>
        [DataMember(Name = "result_limit", EmitDefaultValue = false)]
        public int ResultLimit { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class LookupLimit {\n");
            sb.Append("  ResultLimit: ").Append(ResultLimit).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as LookupLimit);
        }

        /// <summary>
        /// Returns true if LookupLimit instances are equal
        /// </summary>
        /// <param name="input">Instance of LookupLimit to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(LookupLimit input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ResultLimit == input.ResultLimit ||
                    this.ResultLimit.Equals(input.ResultLimit)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = hashCode * 59 + this.ResultLimit.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
