/*
 * ID Lookup API
 *
 * The Factset Identifier Lookup API provides the ability to search for various identifier types based on keyword. The API returns tickers, entity names and other identifiers that Factset supports. In addition, the API offers filters that allows users to refine the results. 
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = FactSet.SDK.IDLookup.Client.OpenAPIDateConverter;

namespace FactSet.SDK.IDLookup.Model
{
    /// <summary>
    /// Filters securities based on asset classes and other fields depending on the asset classes. 
    /// </summary>
    [DataContract(Name = "include_exclude_object")]
    public partial class IncludeExcludeObject : IEquatable<IncludeExcludeObject>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="IncludeExcludeObject" /> class.
        /// </summary>
        /// <param name="field">String containing the field name to filter on. Each asset class has its own set of field (i.e. “equity_type”, “is_primary”, “region”,etc) .</param>
        /// <param name="entity">String containing the asset class for the filter to be applied on. If not included or left empty, it will apply the filter against all asset classes .</param>
        /// <param name="values">Values you wish to filter on, as a comma-separated list. The values within this list are tied by an OR operation. .</param>
        public IncludeExcludeObject(string field = default(string), string entity = default(string), List<Object> values = default(List<Object>))
        {
            this.Field = field;
            this.Entity = entity;
            this.Values = values;
        }

        /// <summary>
        /// String containing the field name to filter on. Each asset class has its own set of field (i.e. “equity_type”, “is_primary”, “region”,etc) 
        /// </summary>
        /// <value>String containing the field name to filter on. Each asset class has its own set of field (i.e. “equity_type”, “is_primary”, “region”,etc) </value>
        [DataMember(Name = "field", EmitDefaultValue = false)]
        public string Field { get; set; }

        /// <summary>
        /// String containing the asset class for the filter to be applied on. If not included or left empty, it will apply the filter against all asset classes 
        /// </summary>
        /// <value>String containing the asset class for the filter to be applied on. If not included or left empty, it will apply the filter against all asset classes </value>
        [DataMember(Name = "entity", EmitDefaultValue = false)]
        public string Entity { get; set; }

        /// <summary>
        /// Values you wish to filter on, as a comma-separated list. The values within this list are tied by an OR operation. 
        /// </summary>
        /// <value>Values you wish to filter on, as a comma-separated list. The values within this list are tied by an OR operation. </value>
        [DataMember(Name = "values", EmitDefaultValue = false)]
        public List<Object> Values { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class IncludeExcludeObject {\n");
            sb.Append("  Field: ").Append(Field).Append("\n");
            sb.Append("  Entity: ").Append(Entity).Append("\n");
            sb.Append("  Values: ").Append(Values).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as IncludeExcludeObject);
        }

        /// <summary>
        /// Returns true if IncludeExcludeObject instances are equal
        /// </summary>
        /// <param name="input">Instance of IncludeExcludeObject to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(IncludeExcludeObject input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Field == input.Field ||
                    (this.Field != null &&
                    this.Field.Equals(input.Field))
                ) && 
                (
                    this.Entity == input.Entity ||
                    (this.Entity != null &&
                    this.Entity.Equals(input.Entity))
                ) && 
                (
                    this.Values == input.Values ||
                    this.Values != null &&
                    input.Values != null &&
                    this.Values.SequenceEqual(input.Values)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Field != null)
                {
                    hashCode = (hashCode * 59) + this.Field.GetHashCode();
                }
                if (this.Entity != null)
                {
                    hashCode = (hashCode * 59) + this.Entity.GetHashCode();
                }
                if (this.Values != null)
                {
                    hashCode = (hashCode * 59) + this.Values.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
