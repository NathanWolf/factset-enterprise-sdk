/*
 * ID Lookup API
 *
 * The Factset Identifier Lookup API provides the ability to search for various identifier types based on keyword. The API returns tickers, entity names and other identifiers that Factset supports. In addition, the API offers filters that allows users to refine the results. 
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using FactSet.SDK.IDLookup.Client;
using FactSet.SDK.IDLookup.Model;
using FactSet.SDK.Utils.Authentication;

namespace FactSet.SDK.IDLookup.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IFactSetIDLookupApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Search funtionality to return tickers, company names and unique identifiers for FactSet data
        /// </summary>
        /// <remarks>
        /// Service will accept request in JSON formatted request body. The request is sent by passing a query which is an array conitaining search query objects with parameters. The parameters contain search term and filters defined by the end user. This would display a specific set of identifiers based on the request. 
        /// </remarks>
        /// <exception cref="FactSet.SDK.IDLookup.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="lookupRequest">Post body to lookup any FactSet identifiers</param>
        /// <returns>LookupResponse</returns>
        LookupResponse SearchCompanyname(LookupRequest lookupRequest);

        /// <summary>
        /// Search funtionality to return tickers, company names and unique identifiers for FactSet data
        /// </summary>
        /// <remarks>
        /// Service will accept request in JSON formatted request body. The request is sent by passing a query which is an array conitaining search query objects with parameters. The parameters contain search term and filters defined by the end user. This would display a specific set of identifiers based on the request. 
        /// </remarks>
        /// <exception cref="FactSet.SDK.IDLookup.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="lookupRequest">Post body to lookup any FactSet identifiers</param>
        /// <returns>ApiResponse of LookupResponse</returns>
        ApiResponse<LookupResponse> SearchCompanynameWithHttpInfo(LookupRequest lookupRequest);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IFactSetIDLookupApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Search funtionality to return tickers, company names and unique identifiers for FactSet data
        /// </summary>
        /// <remarks>
        /// Service will accept request in JSON formatted request body. The request is sent by passing a query which is an array conitaining search query objects with parameters. The parameters contain search term and filters defined by the end user. This would display a specific set of identifiers based on the request. 
        /// </remarks>
        /// <exception cref="FactSet.SDK.IDLookup.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="lookupRequest">Post body to lookup any FactSet identifiers</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of LookupResponse</returns>
        System.Threading.Tasks.Task<LookupResponse> SearchCompanynameAsync(LookupRequest lookupRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Search funtionality to return tickers, company names and unique identifiers for FactSet data
        /// </summary>
        /// <remarks>
        /// Service will accept request in JSON formatted request body. The request is sent by passing a query which is an array conitaining search query objects with parameters. The parameters contain search term and filters defined by the end user. This would display a specific set of identifiers based on the request. 
        /// </remarks>
        /// <exception cref="FactSet.SDK.IDLookup.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="lookupRequest">Post body to lookup any FactSet identifiers</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (LookupResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<LookupResponse>> SearchCompanynameWithHttpInfoAsync(LookupRequest lookupRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IFactSetIDLookupApi : IFactSetIDLookupApiSync, IFactSetIDLookupApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class FactSetIDLookupApi : IFactSetIDLookupApi
    {
        private FactSet.SDK.IDLookup.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        # region Response Type Disctionaries
        
        private static readonly Dictionary<HttpStatusCode, System.Type> SearchCompanynameResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)200, typeof(LookupResponse) },
            { (HttpStatusCode)400, typeof(ErrorResponse) },
            { (HttpStatusCode)401, typeof(ErrorResponse) },
            { (HttpStatusCode)403, typeof(ErrorResponse) },
            { (HttpStatusCode)500, typeof(ErrorResponse) },
        };

        # endregion Response Type Disctionaries

        # region Api Response Objects
        

        # endregion Api Response Objects

        /// <summary>
        /// Initializes a new instance of the <see cref="FactSetIDLookupApi"/> class.
        /// </summary>
        /// <returns></returns>
        public FactSetIDLookupApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="FactSetIDLookupApi"/> class.
        /// </summary>
        /// <returns></returns>
        public FactSetIDLookupApi(string basePath)
        {
            this.Configuration = FactSet.SDK.IDLookup.Client.Configuration.MergeConfigurations(
                FactSet.SDK.IDLookup.Client.GlobalConfiguration.Instance,
                new FactSet.SDK.IDLookup.Client.Configuration { BasePath = basePath }
            );
            this.Client = new FactSet.SDK.IDLookup.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new FactSet.SDK.IDLookup.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = FactSet.SDK.IDLookup.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="FactSetIDLookupApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public FactSetIDLookupApi(FactSet.SDK.IDLookup.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = FactSet.SDK.IDLookup.Client.Configuration.MergeConfigurations(
                FactSet.SDK.IDLookup.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new FactSet.SDK.IDLookup.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new FactSet.SDK.IDLookup.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = FactSet.SDK.IDLookup.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="FactSetIDLookupApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public FactSetIDLookupApi(FactSet.SDK.IDLookup.Client.ISynchronousClient client, FactSet.SDK.IDLookup.Client.IAsynchronousClient asyncClient, FactSet.SDK.IDLookup.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = FactSet.SDK.IDLookup.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public FactSet.SDK.IDLookup.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public FactSet.SDK.IDLookup.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public FactSet.SDK.IDLookup.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public FactSet.SDK.IDLookup.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Search funtionality to return tickers, company names and unique identifiers for FactSet data Service will accept request in JSON formatted request body. The request is sent by passing a query which is an array conitaining search query objects with parameters. The parameters contain search term and filters defined by the end user. This would display a specific set of identifiers based on the request. 
        /// </summary>
        /// <exception cref="FactSet.SDK.IDLookup.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="lookupRequest">Post body to lookup any FactSet identifiers</param>
        /// <returns>LookupResponse</returns>
        public LookupResponse SearchCompanyname(LookupRequest lookupRequest)
        {
            var localVarResponse = SearchCompanynameWithHttpInfo(lookupRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Search funtionality to return tickers, company names and unique identifiers for FactSet data Service will accept request in JSON formatted request body. The request is sent by passing a query which is an array conitaining search query objects with parameters. The parameters contain search term and filters defined by the end user. This would display a specific set of identifiers based on the request. 
        /// </summary>
        /// <exception cref="FactSet.SDK.IDLookup.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="lookupRequest">Post body to lookup any FactSet identifiers</param>
        /// <returns>ApiResponse of LookupResponse</returns>
        public ApiResponse<LookupResponse> SearchCompanynameWithHttpInfo(LookupRequest lookupRequest)
        {
            // verify the required parameter 'lookupRequest' is set
            if (lookupRequest == null)
            {
                throw new FactSet.SDK.IDLookup.Client.ApiException(400, "Missing required parameter 'lookupRequest' when calling FactSetIDLookupApi->SearchCompanyname");
            }

            FactSet.SDK.IDLookup.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.IDLookup.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.IDLookup.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.IDLookup.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = lookupRequest;

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.IDLookup.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = SearchCompanynameResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Post<
            LookupResponse>("/v1/idsearch", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SearchCompanyname", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// Search funtionality to return tickers, company names and unique identifiers for FactSet data Service will accept request in JSON formatted request body. The request is sent by passing a query which is an array conitaining search query objects with parameters. The parameters contain search term and filters defined by the end user. This would display a specific set of identifiers based on the request. 
        /// </summary>
        /// <exception cref="FactSet.SDK.IDLookup.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="lookupRequest">Post body to lookup any FactSet identifiers</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of LookupResponse</returns>
        public async System.Threading.Tasks.Task<LookupResponse>SearchCompanynameAsync(LookupRequest lookupRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await SearchCompanynameWithHttpInfoAsync(lookupRequest, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Search funtionality to return tickers, company names and unique identifiers for FactSet data Service will accept request in JSON formatted request body. The request is sent by passing a query which is an array conitaining search query objects with parameters. The parameters contain search term and filters defined by the end user. This would display a specific set of identifiers based on the request. 
        /// </summary>
        /// <exception cref="FactSet.SDK.IDLookup.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="lookupRequest">Post body to lookup any FactSet identifiers</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (LookupResponse)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<LookupResponse>> SearchCompanynameWithHttpInfoAsync(LookupRequest lookupRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'lookupRequest' is set
            if (lookupRequest == null)
            {
                throw new FactSet.SDK.IDLookup.Client.ApiException(400, "Missing required parameter 'lookupRequest' when calling FactSetIDLookupApi->SearchCompanyname");
            }


            FactSet.SDK.IDLookup.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.IDLookup.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.IDLookup.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.IDLookup.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = lookupRequest;

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.IDLookup.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = SearchCompanynameResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<LookupResponse>("/v1/idsearch", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SearchCompanyname", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
