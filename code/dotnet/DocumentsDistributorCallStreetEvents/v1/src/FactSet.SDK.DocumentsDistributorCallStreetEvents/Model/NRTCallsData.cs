/*
 * Documents Distributor - CallStreet Events
 *
 * CallStreet Events contains all the Documents Distributor APIs that offer events data such as Events Audio and Near Real-Time Transcripts.  The  Events Audio API provides access to historical as well as latest audio recordings of various company events covered by FactSet. The events include, but are not limited to: earnings calls, conferences, and investor days.   This API also provides relevant metadata such as timestamps and identifiers around each audio file.  The Documents Distributor - Near Real-time Transcripts API enables access to Near Real-time Transcripts provided by CallStreet to time-sensitive clients. This API also provides the relevant speaker metadata along with their confidence scores. This data caters to quant clients interested in building machine learning models.  Clients can leverage this API to perform sentiment analysis through natural language processing or machine learning. It can also be used to complement analysis using FactSet's transcripts service. 
 *
 * The version of the OpenAPI document: 1.7.0
 * Contact: api@factset.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = FactSet.SDK.DocumentsDistributorCallStreetEvents.Client.OpenAPIDateConverter;

namespace FactSet.SDK.DocumentsDistributorCallStreetEvents.Model
{
    /// <summary>
    /// NRTCallsData
    /// </summary>
    [DataContract(Name = "NRT_Calls_data")]
    public partial class NRTCallsData : IEquatable<NRTCallsData>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="NRTCallsData" /> class.
        /// </summary>
        /// <param name="callStatus">Status of the call i.e. ended or inProgress or ewn or issueAtSource.  * inProgress- the call is in progress. * ended- the call has ended. * ewn- the call has technically ended and can be considered as ended but is missing a notification from the upstream systems. * issueAtSource- the call has ended with no snippet data due to a possible issue at the source..</param>
        /// <param name="reportId">The unique ID for an event..</param>
        /// <param name="sourceCode">Identifier for the source of how the event is recorded. P:- Phone Replay W:- Webcast.</param>
        /// <param name="audioSourceId">Unique ID for an Internal recording specific to reportID. For example, ReportID X would have multiple recordings from different source (dial-in - P or webcast - W). One reportId can have multiple audiosourceIDs..</param>
        /// <param name="recordingStartTime">The official UTC timestamp when FactSet starts the recording..</param>
        /// <param name="ticker">Ticker-region identifier for the company hosting the event..</param>
        /// <param name="entityId">Factset entity level identifier for the company hosting the event..</param>
        /// <param name="eventType">Refers to the various event types covered by FactSet CallStreet - * Analyst, Investor &amp; Shareholder Meeting &#x3D;&gt; AS * Earnings Call &#x3D;&gt; E * Earnings Release &#x3D;&gt; ER * Guidance &#x3D;&gt; G * Sales &amp; Revenue Call &#x3D;&gt; SA * Sales &amp; Revenue Release &#x3D;&gt; SR * Special &amp; M&amp;A (Special Situation) &#x3D;&gt; SS.</param>
        /// <param name="eventTitle">Title of the Event..</param>
        /// <param name="eventDatetimeUtc">The official UTC timestamp of the start of the event..</param>
        public NRTCallsData(string callStatus = default(string), int? reportId = default(int?), string sourceCode = default(string), int? audioSourceId = default(int?), string recordingStartTime = default(string), string ticker = default(string), string entityId = default(string), string eventType = default(string), string eventTitle = default(string), string eventDatetimeUtc = default(string))
        {
            this.CallStatus = callStatus;
            this.ReportId = reportId;
            this.SourceCode = sourceCode;
            this.AudioSourceId = audioSourceId;
            this.RecordingStartTime = recordingStartTime;
            this.Ticker = ticker;
            this.EntityId = entityId;
            this.EventType = eventType;
            this.EventTitle = eventTitle;
            this.EventDatetimeUtc = eventDatetimeUtc;
        }

        /// <summary>
        /// Status of the call i.e. ended or inProgress or ewn or issueAtSource.  * inProgress- the call is in progress. * ended- the call has ended. * ewn- the call has technically ended and can be considered as ended but is missing a notification from the upstream systems. * issueAtSource- the call has ended with no snippet data due to a possible issue at the source.
        /// </summary>
        /// <value>Status of the call i.e. ended or inProgress or ewn or issueAtSource.  * inProgress- the call is in progress. * ended- the call has ended. * ewn- the call has technically ended and can be considered as ended but is missing a notification from the upstream systems. * issueAtSource- the call has ended with no snippet data due to a possible issue at the source.</value>
        [DataMember(Name = "callStatus", EmitDefaultValue = true)]
        public string CallStatus { get; set; }

        /// <summary>
        /// The unique ID for an event.
        /// </summary>
        /// <value>The unique ID for an event.</value>
        [DataMember(Name = "reportId", EmitDefaultValue = true)]
        public int? ReportId { get; set; }

        /// <summary>
        /// Identifier for the source of how the event is recorded. P:- Phone Replay W:- Webcast
        /// </summary>
        /// <value>Identifier for the source of how the event is recorded. P:- Phone Replay W:- Webcast</value>
        [DataMember(Name = "sourceCode", EmitDefaultValue = true)]
        public string SourceCode { get; set; }

        /// <summary>
        /// Unique ID for an Internal recording specific to reportID. For example, ReportID X would have multiple recordings from different source (dial-in - P or webcast - W). One reportId can have multiple audiosourceIDs.
        /// </summary>
        /// <value>Unique ID for an Internal recording specific to reportID. For example, ReportID X would have multiple recordings from different source (dial-in - P or webcast - W). One reportId can have multiple audiosourceIDs.</value>
        [DataMember(Name = "audioSourceId", EmitDefaultValue = true)]
        public int? AudioSourceId { get; set; }

        /// <summary>
        /// The official UTC timestamp when FactSet starts the recording.
        /// </summary>
        /// <value>The official UTC timestamp when FactSet starts the recording.</value>
        [DataMember(Name = "recordingStartTime", EmitDefaultValue = true)]
        public string RecordingStartTime { get; set; }

        /// <summary>
        /// Ticker-region identifier for the company hosting the event.
        /// </summary>
        /// <value>Ticker-region identifier for the company hosting the event.</value>
        [DataMember(Name = "ticker", EmitDefaultValue = true)]
        public string Ticker { get; set; }

        /// <summary>
        /// Factset entity level identifier for the company hosting the event.
        /// </summary>
        /// <value>Factset entity level identifier for the company hosting the event.</value>
        [DataMember(Name = "entityId", EmitDefaultValue = true)]
        public string EntityId { get; set; }

        /// <summary>
        /// Refers to the various event types covered by FactSet CallStreet - * Analyst, Investor &amp; Shareholder Meeting &#x3D;&gt; AS * Earnings Call &#x3D;&gt; E * Earnings Release &#x3D;&gt; ER * Guidance &#x3D;&gt; G * Sales &amp; Revenue Call &#x3D;&gt; SA * Sales &amp; Revenue Release &#x3D;&gt; SR * Special &amp; M&amp;A (Special Situation) &#x3D;&gt; SS
        /// </summary>
        /// <value>Refers to the various event types covered by FactSet CallStreet - * Analyst, Investor &amp; Shareholder Meeting &#x3D;&gt; AS * Earnings Call &#x3D;&gt; E * Earnings Release &#x3D;&gt; ER * Guidance &#x3D;&gt; G * Sales &amp; Revenue Call &#x3D;&gt; SA * Sales &amp; Revenue Release &#x3D;&gt; SR * Special &amp; M&amp;A (Special Situation) &#x3D;&gt; SS</value>
        [DataMember(Name = "eventType", EmitDefaultValue = true)]
        public string EventType { get; set; }

        /// <summary>
        /// Title of the Event.
        /// </summary>
        /// <value>Title of the Event.</value>
        [DataMember(Name = "eventTitle", EmitDefaultValue = true)]
        public string EventTitle { get; set; }

        /// <summary>
        /// The official UTC timestamp of the start of the event.
        /// </summary>
        /// <value>The official UTC timestamp of the start of the event.</value>
        [DataMember(Name = "eventDatetimeUtc", EmitDefaultValue = true)]
        public string EventDatetimeUtc { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class NRTCallsData {\n");
            sb.Append("  CallStatus: ").Append(CallStatus).Append("\n");
            sb.Append("  ReportId: ").Append(ReportId).Append("\n");
            sb.Append("  SourceCode: ").Append(SourceCode).Append("\n");
            sb.Append("  AudioSourceId: ").Append(AudioSourceId).Append("\n");
            sb.Append("  RecordingStartTime: ").Append(RecordingStartTime).Append("\n");
            sb.Append("  Ticker: ").Append(Ticker).Append("\n");
            sb.Append("  EntityId: ").Append(EntityId).Append("\n");
            sb.Append("  EventType: ").Append(EventType).Append("\n");
            sb.Append("  EventTitle: ").Append(EventTitle).Append("\n");
            sb.Append("  EventDatetimeUtc: ").Append(EventDatetimeUtc).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as NRTCallsData);
        }

        /// <summary>
        /// Returns true if NRTCallsData instances are equal
        /// </summary>
        /// <param name="input">Instance of NRTCallsData to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(NRTCallsData input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.CallStatus == input.CallStatus ||
                    (this.CallStatus != null &&
                    this.CallStatus.Equals(input.CallStatus))
                ) && 
                (
                    this.ReportId == input.ReportId ||
                    (this.ReportId != null &&
                    this.ReportId.Equals(input.ReportId))
                ) && 
                (
                    this.SourceCode == input.SourceCode ||
                    (this.SourceCode != null &&
                    this.SourceCode.Equals(input.SourceCode))
                ) && 
                (
                    this.AudioSourceId == input.AudioSourceId ||
                    (this.AudioSourceId != null &&
                    this.AudioSourceId.Equals(input.AudioSourceId))
                ) && 
                (
                    this.RecordingStartTime == input.RecordingStartTime ||
                    (this.RecordingStartTime != null &&
                    this.RecordingStartTime.Equals(input.RecordingStartTime))
                ) && 
                (
                    this.Ticker == input.Ticker ||
                    (this.Ticker != null &&
                    this.Ticker.Equals(input.Ticker))
                ) && 
                (
                    this.EntityId == input.EntityId ||
                    (this.EntityId != null &&
                    this.EntityId.Equals(input.EntityId))
                ) && 
                (
                    this.EventType == input.EventType ||
                    (this.EventType != null &&
                    this.EventType.Equals(input.EventType))
                ) && 
                (
                    this.EventTitle == input.EventTitle ||
                    (this.EventTitle != null &&
                    this.EventTitle.Equals(input.EventTitle))
                ) && 
                (
                    this.EventDatetimeUtc == input.EventDatetimeUtc ||
                    (this.EventDatetimeUtc != null &&
                    this.EventDatetimeUtc.Equals(input.EventDatetimeUtc))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.CallStatus != null)
                {
                    hashCode = (hashCode * 59) + this.CallStatus.GetHashCode();
                }
                if (this.ReportId != null)
                {
                    hashCode = (hashCode * 59) + this.ReportId.GetHashCode();
                }
                if (this.SourceCode != null)
                {
                    hashCode = (hashCode * 59) + this.SourceCode.GetHashCode();
                }
                if (this.AudioSourceId != null)
                {
                    hashCode = (hashCode * 59) + this.AudioSourceId.GetHashCode();
                }
                if (this.RecordingStartTime != null)
                {
                    hashCode = (hashCode * 59) + this.RecordingStartTime.GetHashCode();
                }
                if (this.Ticker != null)
                {
                    hashCode = (hashCode * 59) + this.Ticker.GetHashCode();
                }
                if (this.EntityId != null)
                {
                    hashCode = (hashCode * 59) + this.EntityId.GetHashCode();
                }
                if (this.EventType != null)
                {
                    hashCode = (hashCode * 59) + this.EventType.GetHashCode();
                }
                if (this.EventTitle != null)
                {
                    hashCode = (hashCode * 59) + this.EventTitle.GetHashCode();
                }
                if (this.EventDatetimeUtc != null)
                {
                    hashCode = (hashCode * 59) + this.EventDatetimeUtc.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
