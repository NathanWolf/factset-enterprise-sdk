/*
 * Documents Distributor - CallStreet Events
 *
 * CallStreet Events contains all the Documents Distributor APIs that provide events data such as Events Audio and Near Real-Time Transcripts  The  Events Audio API provides access to all audio recordings to various company events covered by FactSet. The events include, but are not limited to: earnings calls, conferences, and investor days.   This API also provides relevant metadata such as timestamps and identifiers around each audio file.  The Documents Distributor - Near Real-time Transcripts API enables access to Near Real-time Transcripts provided by CallStreet to time-sensitive clients. This API also provides the relevant speaker metadata along with their confidence scores. This data caters to quant clients interested in building machine learning models.  Clients can leverage this API to perform sentiment analysis through natural language processing or machine learning. It can also be used to complement analysis using FactSet's transcripts service.
 *
 * The version of the OpenAPI document: 3.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using FactSet.SDK.DocumentsDistributorCallStreetEvents.Client;
using FactSet.SDK.DocumentsDistributorCallStreetEvents.Model;
using FactSet.SDK.Utils.Authentication;

namespace FactSet.SDK.DocumentsDistributorCallStreetEvents.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IEventsAudioApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Retrieve audio recordings and metadata within FactSet coverage
        /// </summary>
        /// <remarks>
        /// Gets the latest 25 audio files. Parameters can be used to filter and narrow down the results
        /// </remarks>
        /// <exception cref="FactSet.SDK.DocumentsDistributorCallStreetEvents.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sort">Sorts results in chronological order, reverse chronological order and by uploadTime(latest uploaded first). Results are in reverse chronological order by default. (optional, default to -startDate)</param>
        /// <param name="paginationLimit">Specifies the number of results to return per page. [ Min&#x3D;0 ; Max&#x3D;500 ] (optional)</param>
        /// <param name="startDate">Used in conjuction with endDate. The earliest date of the audio file the API should fetch for (can be in absolute: YYYY-MM-DD or relative date: -1 for yesterday)&#39; (optional)</param>
        /// <param name="paginationOffset">Specifies the starting point for pagination. This parameter is used to identify the beginning of next set of results (optional)</param>
        /// <param name="endDate">Used in conjuction with startDate. The latest date of the audio file the API should fetch for (can be in absolute: YYYY-MM-DD or relative date: 0 for today) (optional)</param>
        /// <param name="reportId">Unique identifier for fetching the audio file for an event. The same ID is used for the transcript of the same event (optional)</param>
        /// <param name="ids">This parameter filters the results based on ticker-region or Entity ID or the combination of both. A comma is used to separate each identifier (optional)</param>
        /// <param name="sourceCode">This parameter filters the results based on Source of the Audio file. Below are the descriptions for each Source Code - * P &#x3D; Phone * W &#x3D; Webcast * V &#x3D; Vendor * I &#x3D; Webcast Replay * F &#x3D; Flash - identical to webcast; can merge with \&quot;W\&quot; in the future * R &#x3D; Replay (Phone Replay) (optional)</param>
        /// <param name="fileName">This parameter is used to filter the data on based on the file name. (optional)</param>
        /// <param name="trimmed">This parameters helps to search trimmed audio files (optional)</param>
        /// <param name="uploadTime">This parameter filters data based on uploadTime relative to the current time, in hours. For example:- uploadTime &#x3D; -15 (fetches audio files between 15 hours ago and now)  Minimum is 1 hour i.e., uploadTime&#x3D; -1  Maximum is 1 week/168 hours i.e., uploadTime&#x3D;-168  While using uploadTime, the startDate and endDate parameters will be ignored (optional)</param>
        /// <returns>EventsAudio</returns>
        EventsAudio GetDocsDistributorAudioV1ListFiles(string sort = default(string), int? paginationLimit = default(int?), DateTime? startDate = default(DateTime?), int? paginationOffset = default(int?), DateTime? endDate = default(DateTime?), int? reportId = default(int?), string ids = default(string), string sourceCode = default(string), string fileName = default(string), bool? trimmed = default(bool?), int? uploadTime = default(int?));

        /// <summary>
        /// Retrieve audio recordings and metadata within FactSet coverage
        /// </summary>
        /// <remarks>
        /// Gets the latest 25 audio files. Parameters can be used to filter and narrow down the results
        /// </remarks>
        /// <exception cref="FactSet.SDK.DocumentsDistributorCallStreetEvents.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sort">Sorts results in chronological order, reverse chronological order and by uploadTime(latest uploaded first). Results are in reverse chronological order by default. (optional, default to -startDate)</param>
        /// <param name="paginationLimit">Specifies the number of results to return per page. [ Min&#x3D;0 ; Max&#x3D;500 ] (optional)</param>
        /// <param name="startDate">Used in conjuction with endDate. The earliest date of the audio file the API should fetch for (can be in absolute: YYYY-MM-DD or relative date: -1 for yesterday)&#39; (optional)</param>
        /// <param name="paginationOffset">Specifies the starting point for pagination. This parameter is used to identify the beginning of next set of results (optional)</param>
        /// <param name="endDate">Used in conjuction with startDate. The latest date of the audio file the API should fetch for (can be in absolute: YYYY-MM-DD or relative date: 0 for today) (optional)</param>
        /// <param name="reportId">Unique identifier for fetching the audio file for an event. The same ID is used for the transcript of the same event (optional)</param>
        /// <param name="ids">This parameter filters the results based on ticker-region or Entity ID or the combination of both. A comma is used to separate each identifier (optional)</param>
        /// <param name="sourceCode">This parameter filters the results based on Source of the Audio file. Below are the descriptions for each Source Code - * P &#x3D; Phone * W &#x3D; Webcast * V &#x3D; Vendor * I &#x3D; Webcast Replay * F &#x3D; Flash - identical to webcast; can merge with \&quot;W\&quot; in the future * R &#x3D; Replay (Phone Replay) (optional)</param>
        /// <param name="fileName">This parameter is used to filter the data on based on the file name. (optional)</param>
        /// <param name="trimmed">This parameters helps to search trimmed audio files (optional)</param>
        /// <param name="uploadTime">This parameter filters data based on uploadTime relative to the current time, in hours. For example:- uploadTime &#x3D; -15 (fetches audio files between 15 hours ago and now)  Minimum is 1 hour i.e., uploadTime&#x3D; -1  Maximum is 1 week/168 hours i.e., uploadTime&#x3D;-168  While using uploadTime, the startDate and endDate parameters will be ignored (optional)</param>
        /// <returns>ApiResponse of EventsAudio</returns>
        ApiResponse<EventsAudio> GetDocsDistributorAudioV1ListFilesWithHttpInfo(string sort = default(string), int? paginationLimit = default(int?), DateTime? startDate = default(DateTime?), int? paginationOffset = default(int?), DateTime? endDate = default(DateTime?), int? reportId = default(int?), string ids = default(string), string sourceCode = default(string), string fileName = default(string), bool? trimmed = default(bool?), int? uploadTime = default(int?));
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IEventsAudioApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Retrieve audio recordings and metadata within FactSet coverage
        /// </summary>
        /// <remarks>
        /// Gets the latest 25 audio files. Parameters can be used to filter and narrow down the results
        /// </remarks>
        /// <exception cref="FactSet.SDK.DocumentsDistributorCallStreetEvents.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sort">Sorts results in chronological order, reverse chronological order and by uploadTime(latest uploaded first). Results are in reverse chronological order by default. (optional, default to -startDate)</param>
        /// <param name="paginationLimit">Specifies the number of results to return per page. [ Min&#x3D;0 ; Max&#x3D;500 ] (optional)</param>
        /// <param name="startDate">Used in conjuction with endDate. The earliest date of the audio file the API should fetch for (can be in absolute: YYYY-MM-DD or relative date: -1 for yesterday)&#39; (optional)</param>
        /// <param name="paginationOffset">Specifies the starting point for pagination. This parameter is used to identify the beginning of next set of results (optional)</param>
        /// <param name="endDate">Used in conjuction with startDate. The latest date of the audio file the API should fetch for (can be in absolute: YYYY-MM-DD or relative date: 0 for today) (optional)</param>
        /// <param name="reportId">Unique identifier for fetching the audio file for an event. The same ID is used for the transcript of the same event (optional)</param>
        /// <param name="ids">This parameter filters the results based on ticker-region or Entity ID or the combination of both. A comma is used to separate each identifier (optional)</param>
        /// <param name="sourceCode">This parameter filters the results based on Source of the Audio file. Below are the descriptions for each Source Code - * P &#x3D; Phone * W &#x3D; Webcast * V &#x3D; Vendor * I &#x3D; Webcast Replay * F &#x3D; Flash - identical to webcast; can merge with \&quot;W\&quot; in the future * R &#x3D; Replay (Phone Replay) (optional)</param>
        /// <param name="fileName">This parameter is used to filter the data on based on the file name. (optional)</param>
        /// <param name="trimmed">This parameters helps to search trimmed audio files (optional)</param>
        /// <param name="uploadTime">This parameter filters data based on uploadTime relative to the current time, in hours. For example:- uploadTime &#x3D; -15 (fetches audio files between 15 hours ago and now)  Minimum is 1 hour i.e., uploadTime&#x3D; -1  Maximum is 1 week/168 hours i.e., uploadTime&#x3D;-168  While using uploadTime, the startDate and endDate parameters will be ignored (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EventsAudio</returns>
        System.Threading.Tasks.Task<EventsAudio> GetDocsDistributorAudioV1ListFilesAsync(string sort = default(string), int? paginationLimit = default(int?), DateTime? startDate = default(DateTime?), int? paginationOffset = default(int?), DateTime? endDate = default(DateTime?), int? reportId = default(int?), string ids = default(string), string sourceCode = default(string), string fileName = default(string), bool? trimmed = default(bool?), int? uploadTime = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieve audio recordings and metadata within FactSet coverage
        /// </summary>
        /// <remarks>
        /// Gets the latest 25 audio files. Parameters can be used to filter and narrow down the results
        /// </remarks>
        /// <exception cref="FactSet.SDK.DocumentsDistributorCallStreetEvents.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sort">Sorts results in chronological order, reverse chronological order and by uploadTime(latest uploaded first). Results are in reverse chronological order by default. (optional, default to -startDate)</param>
        /// <param name="paginationLimit">Specifies the number of results to return per page. [ Min&#x3D;0 ; Max&#x3D;500 ] (optional)</param>
        /// <param name="startDate">Used in conjuction with endDate. The earliest date of the audio file the API should fetch for (can be in absolute: YYYY-MM-DD or relative date: -1 for yesterday)&#39; (optional)</param>
        /// <param name="paginationOffset">Specifies the starting point for pagination. This parameter is used to identify the beginning of next set of results (optional)</param>
        /// <param name="endDate">Used in conjuction with startDate. The latest date of the audio file the API should fetch for (can be in absolute: YYYY-MM-DD or relative date: 0 for today) (optional)</param>
        /// <param name="reportId">Unique identifier for fetching the audio file for an event. The same ID is used for the transcript of the same event (optional)</param>
        /// <param name="ids">This parameter filters the results based on ticker-region or Entity ID or the combination of both. A comma is used to separate each identifier (optional)</param>
        /// <param name="sourceCode">This parameter filters the results based on Source of the Audio file. Below are the descriptions for each Source Code - * P &#x3D; Phone * W &#x3D; Webcast * V &#x3D; Vendor * I &#x3D; Webcast Replay * F &#x3D; Flash - identical to webcast; can merge with \&quot;W\&quot; in the future * R &#x3D; Replay (Phone Replay) (optional)</param>
        /// <param name="fileName">This parameter is used to filter the data on based on the file name. (optional)</param>
        /// <param name="trimmed">This parameters helps to search trimmed audio files (optional)</param>
        /// <param name="uploadTime">This parameter filters data based on uploadTime relative to the current time, in hours. For example:- uploadTime &#x3D; -15 (fetches audio files between 15 hours ago and now)  Minimum is 1 hour i.e., uploadTime&#x3D; -1  Maximum is 1 week/168 hours i.e., uploadTime&#x3D;-168  While using uploadTime, the startDate and endDate parameters will be ignored (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EventsAudio)</returns>
        System.Threading.Tasks.Task<ApiResponse<EventsAudio>> GetDocsDistributorAudioV1ListFilesWithHttpInfoAsync(string sort = default(string), int? paginationLimit = default(int?), DateTime? startDate = default(DateTime?), int? paginationOffset = default(int?), DateTime? endDate = default(DateTime?), int? reportId = default(int?), string ids = default(string), string sourceCode = default(string), string fileName = default(string), bool? trimmed = default(bool?), int? uploadTime = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IEventsAudioApi : IEventsAudioApiSync, IEventsAudioApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class EventsAudioApi : IEventsAudioApi
    {
        private FactSet.SDK.DocumentsDistributorCallStreetEvents.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="EventsAudioApi"/> class.
        /// </summary>
        /// <returns></returns>
        public EventsAudioApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="EventsAudioApi"/> class.
        /// </summary>
        /// <returns></returns>
        public EventsAudioApi(string basePath)
        {
            this.Configuration = FactSet.SDK.DocumentsDistributorCallStreetEvents.Client.Configuration.MergeConfigurations(
                FactSet.SDK.DocumentsDistributorCallStreetEvents.Client.GlobalConfiguration.Instance,
                new FactSet.SDK.DocumentsDistributorCallStreetEvents.Client.Configuration { BasePath = basePath }
            );
            this.Client = new FactSet.SDK.DocumentsDistributorCallStreetEvents.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new FactSet.SDK.DocumentsDistributorCallStreetEvents.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = FactSet.SDK.DocumentsDistributorCallStreetEvents.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="EventsAudioApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public EventsAudioApi(FactSet.SDK.DocumentsDistributorCallStreetEvents.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = FactSet.SDK.DocumentsDistributorCallStreetEvents.Client.Configuration.MergeConfigurations(
                FactSet.SDK.DocumentsDistributorCallStreetEvents.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new FactSet.SDK.DocumentsDistributorCallStreetEvents.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new FactSet.SDK.DocumentsDistributorCallStreetEvents.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = FactSet.SDK.DocumentsDistributorCallStreetEvents.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="EventsAudioApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public EventsAudioApi(FactSet.SDK.DocumentsDistributorCallStreetEvents.Client.ISynchronousClient client, FactSet.SDK.DocumentsDistributorCallStreetEvents.Client.IAsynchronousClient asyncClient, FactSet.SDK.DocumentsDistributorCallStreetEvents.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = FactSet.SDK.DocumentsDistributorCallStreetEvents.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public FactSet.SDK.DocumentsDistributorCallStreetEvents.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public FactSet.SDK.DocumentsDistributorCallStreetEvents.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public FactSet.SDK.DocumentsDistributorCallStreetEvents.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public FactSet.SDK.DocumentsDistributorCallStreetEvents.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Retrieve audio recordings and metadata within FactSet coverage Gets the latest 25 audio files. Parameters can be used to filter and narrow down the results
        /// </summary>
        /// <exception cref="FactSet.SDK.DocumentsDistributorCallStreetEvents.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sort">Sorts results in chronological order, reverse chronological order and by uploadTime(latest uploaded first). Results are in reverse chronological order by default. (optional, default to -startDate)</param>
        /// <param name="paginationLimit">Specifies the number of results to return per page. [ Min&#x3D;0 ; Max&#x3D;500 ] (optional)</param>
        /// <param name="startDate">Used in conjuction with endDate. The earliest date of the audio file the API should fetch for (can be in absolute: YYYY-MM-DD or relative date: -1 for yesterday)&#39; (optional)</param>
        /// <param name="paginationOffset">Specifies the starting point for pagination. This parameter is used to identify the beginning of next set of results (optional)</param>
        /// <param name="endDate">Used in conjuction with startDate. The latest date of the audio file the API should fetch for (can be in absolute: YYYY-MM-DD or relative date: 0 for today) (optional)</param>
        /// <param name="reportId">Unique identifier for fetching the audio file for an event. The same ID is used for the transcript of the same event (optional)</param>
        /// <param name="ids">This parameter filters the results based on ticker-region or Entity ID or the combination of both. A comma is used to separate each identifier (optional)</param>
        /// <param name="sourceCode">This parameter filters the results based on Source of the Audio file. Below are the descriptions for each Source Code - * P &#x3D; Phone * W &#x3D; Webcast * V &#x3D; Vendor * I &#x3D; Webcast Replay * F &#x3D; Flash - identical to webcast; can merge with \&quot;W\&quot; in the future * R &#x3D; Replay (Phone Replay) (optional)</param>
        /// <param name="fileName">This parameter is used to filter the data on based on the file name. (optional)</param>
        /// <param name="trimmed">This parameters helps to search trimmed audio files (optional)</param>
        /// <param name="uploadTime">This parameter filters data based on uploadTime relative to the current time, in hours. For example:- uploadTime &#x3D; -15 (fetches audio files between 15 hours ago and now)  Minimum is 1 hour i.e., uploadTime&#x3D; -1  Maximum is 1 week/168 hours i.e., uploadTime&#x3D;-168  While using uploadTime, the startDate and endDate parameters will be ignored (optional)</param>
        /// <returns>EventsAudio</returns>
        public EventsAudio GetDocsDistributorAudioV1ListFiles(string sort = default(string), int? paginationLimit = default(int?), DateTime? startDate = default(DateTime?), int? paginationOffset = default(int?), DateTime? endDate = default(DateTime?), int? reportId = default(int?), string ids = default(string), string sourceCode = default(string), string fileName = default(string), bool? trimmed = default(bool?), int? uploadTime = default(int?))
        {
            FactSet.SDK.DocumentsDistributorCallStreetEvents.Client.ApiResponse<EventsAudio> localVarResponse = GetDocsDistributorAudioV1ListFilesWithHttpInfo(sort, paginationLimit, startDate, paginationOffset, endDate, reportId, ids, sourceCode, fileName, trimmed, uploadTime);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve audio recordings and metadata within FactSet coverage Gets the latest 25 audio files. Parameters can be used to filter and narrow down the results
        /// </summary>
        /// <exception cref="FactSet.SDK.DocumentsDistributorCallStreetEvents.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sort">Sorts results in chronological order, reverse chronological order and by uploadTime(latest uploaded first). Results are in reverse chronological order by default. (optional, default to -startDate)</param>
        /// <param name="paginationLimit">Specifies the number of results to return per page. [ Min&#x3D;0 ; Max&#x3D;500 ] (optional)</param>
        /// <param name="startDate">Used in conjuction with endDate. The earliest date of the audio file the API should fetch for (can be in absolute: YYYY-MM-DD or relative date: -1 for yesterday)&#39; (optional)</param>
        /// <param name="paginationOffset">Specifies the starting point for pagination. This parameter is used to identify the beginning of next set of results (optional)</param>
        /// <param name="endDate">Used in conjuction with startDate. The latest date of the audio file the API should fetch for (can be in absolute: YYYY-MM-DD or relative date: 0 for today) (optional)</param>
        /// <param name="reportId">Unique identifier for fetching the audio file for an event. The same ID is used for the transcript of the same event (optional)</param>
        /// <param name="ids">This parameter filters the results based on ticker-region or Entity ID or the combination of both. A comma is used to separate each identifier (optional)</param>
        /// <param name="sourceCode">This parameter filters the results based on Source of the Audio file. Below are the descriptions for each Source Code - * P &#x3D; Phone * W &#x3D; Webcast * V &#x3D; Vendor * I &#x3D; Webcast Replay * F &#x3D; Flash - identical to webcast; can merge with \&quot;W\&quot; in the future * R &#x3D; Replay (Phone Replay) (optional)</param>
        /// <param name="fileName">This parameter is used to filter the data on based on the file name. (optional)</param>
        /// <param name="trimmed">This parameters helps to search trimmed audio files (optional)</param>
        /// <param name="uploadTime">This parameter filters data based on uploadTime relative to the current time, in hours. For example:- uploadTime &#x3D; -15 (fetches audio files between 15 hours ago and now)  Minimum is 1 hour i.e., uploadTime&#x3D; -1  Maximum is 1 week/168 hours i.e., uploadTime&#x3D;-168  While using uploadTime, the startDate and endDate parameters will be ignored (optional)</param>
        /// <returns>ApiResponse of EventsAudio</returns>
        public FactSet.SDK.DocumentsDistributorCallStreetEvents.Client.ApiResponse<EventsAudio> GetDocsDistributorAudioV1ListFilesWithHttpInfo(string sort = default(string), int? paginationLimit = default(int?), DateTime? startDate = default(DateTime?), int? paginationOffset = default(int?), DateTime? endDate = default(DateTime?), int? reportId = default(int?), string ids = default(string), string sourceCode = default(string), string fileName = default(string), bool? trimmed = default(bool?), int? uploadTime = default(int?))
        {
            FactSet.SDK.DocumentsDistributorCallStreetEvents.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.DocumentsDistributorCallStreetEvents.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.DocumentsDistributorCallStreetEvents.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = FactSet.SDK.DocumentsDistributorCallStreetEvents.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.DocumentsDistributorCallStreetEvents.Client.ClientUtils.ParameterToMultiMap("", "_sort", sort));
            }
            if (paginationLimit != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.DocumentsDistributorCallStreetEvents.Client.ClientUtils.ParameterToMultiMap("", "_paginationLimit", paginationLimit));
            }
            if (startDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.DocumentsDistributorCallStreetEvents.Client.ClientUtils.ParameterToMultiMap("", "startDate", startDate));
            }
            if (paginationOffset != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.DocumentsDistributorCallStreetEvents.Client.ClientUtils.ParameterToMultiMap("", "_paginationOffset", paginationOffset));
            }
            if (endDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.DocumentsDistributorCallStreetEvents.Client.ClientUtils.ParameterToMultiMap("", "endDate", endDate));
            }
            if (reportId != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.DocumentsDistributorCallStreetEvents.Client.ClientUtils.ParameterToMultiMap("", "reportId", reportId));
            }
            if (ids != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.DocumentsDistributorCallStreetEvents.Client.ClientUtils.ParameterToMultiMap("", "ids", ids));
            }
            if (sourceCode != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.DocumentsDistributorCallStreetEvents.Client.ClientUtils.ParameterToMultiMap("", "sourceCode", sourceCode));
            }
            if (fileName != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.DocumentsDistributorCallStreetEvents.Client.ClientUtils.ParameterToMultiMap("", "fileName", fileName));
            }
            if (trimmed != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.DocumentsDistributorCallStreetEvents.Client.ClientUtils.ParameterToMultiMap("", "trimmed", trimmed));
            }
            if (uploadTime != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.DocumentsDistributorCallStreetEvents.Client.ClientUtils.ParameterToMultiMap("", "uploadTime", uploadTime));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.DocumentsDistributorCallStreetEvents.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<EventsAudio>("/docs-distributor/audio/v1/list-files", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetDocsDistributorAudioV1ListFiles", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve audio recordings and metadata within FactSet coverage Gets the latest 25 audio files. Parameters can be used to filter and narrow down the results
        /// </summary>
        /// <exception cref="FactSet.SDK.DocumentsDistributorCallStreetEvents.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sort">Sorts results in chronological order, reverse chronological order and by uploadTime(latest uploaded first). Results are in reverse chronological order by default. (optional, default to -startDate)</param>
        /// <param name="paginationLimit">Specifies the number of results to return per page. [ Min&#x3D;0 ; Max&#x3D;500 ] (optional)</param>
        /// <param name="startDate">Used in conjuction with endDate. The earliest date of the audio file the API should fetch for (can be in absolute: YYYY-MM-DD or relative date: -1 for yesterday)&#39; (optional)</param>
        /// <param name="paginationOffset">Specifies the starting point for pagination. This parameter is used to identify the beginning of next set of results (optional)</param>
        /// <param name="endDate">Used in conjuction with startDate. The latest date of the audio file the API should fetch for (can be in absolute: YYYY-MM-DD or relative date: 0 for today) (optional)</param>
        /// <param name="reportId">Unique identifier for fetching the audio file for an event. The same ID is used for the transcript of the same event (optional)</param>
        /// <param name="ids">This parameter filters the results based on ticker-region or Entity ID or the combination of both. A comma is used to separate each identifier (optional)</param>
        /// <param name="sourceCode">This parameter filters the results based on Source of the Audio file. Below are the descriptions for each Source Code - * P &#x3D; Phone * W &#x3D; Webcast * V &#x3D; Vendor * I &#x3D; Webcast Replay * F &#x3D; Flash - identical to webcast; can merge with \&quot;W\&quot; in the future * R &#x3D; Replay (Phone Replay) (optional)</param>
        /// <param name="fileName">This parameter is used to filter the data on based on the file name. (optional)</param>
        /// <param name="trimmed">This parameters helps to search trimmed audio files (optional)</param>
        /// <param name="uploadTime">This parameter filters data based on uploadTime relative to the current time, in hours. For example:- uploadTime &#x3D; -15 (fetches audio files between 15 hours ago and now)  Minimum is 1 hour i.e., uploadTime&#x3D; -1  Maximum is 1 week/168 hours i.e., uploadTime&#x3D;-168  While using uploadTime, the startDate and endDate parameters will be ignored (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EventsAudio</returns>
        public async System.Threading.Tasks.Task<EventsAudio> GetDocsDistributorAudioV1ListFilesAsync(string sort = default(string), int? paginationLimit = default(int?), DateTime? startDate = default(DateTime?), int? paginationOffset = default(int?), DateTime? endDate = default(DateTime?), int? reportId = default(int?), string ids = default(string), string sourceCode = default(string), string fileName = default(string), bool? trimmed = default(bool?), int? uploadTime = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            FactSet.SDK.DocumentsDistributorCallStreetEvents.Client.ApiResponse<EventsAudio> localVarResponse = await GetDocsDistributorAudioV1ListFilesWithHttpInfoAsync(sort, paginationLimit, startDate, paginationOffset, endDate, reportId, ids, sourceCode, fileName, trimmed, uploadTime, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve audio recordings and metadata within FactSet coverage Gets the latest 25 audio files. Parameters can be used to filter and narrow down the results
        /// </summary>
        /// <exception cref="FactSet.SDK.DocumentsDistributorCallStreetEvents.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sort">Sorts results in chronological order, reverse chronological order and by uploadTime(latest uploaded first). Results are in reverse chronological order by default. (optional, default to -startDate)</param>
        /// <param name="paginationLimit">Specifies the number of results to return per page. [ Min&#x3D;0 ; Max&#x3D;500 ] (optional)</param>
        /// <param name="startDate">Used in conjuction with endDate. The earliest date of the audio file the API should fetch for (can be in absolute: YYYY-MM-DD or relative date: -1 for yesterday)&#39; (optional)</param>
        /// <param name="paginationOffset">Specifies the starting point for pagination. This parameter is used to identify the beginning of next set of results (optional)</param>
        /// <param name="endDate">Used in conjuction with startDate. The latest date of the audio file the API should fetch for (can be in absolute: YYYY-MM-DD or relative date: 0 for today) (optional)</param>
        /// <param name="reportId">Unique identifier for fetching the audio file for an event. The same ID is used for the transcript of the same event (optional)</param>
        /// <param name="ids">This parameter filters the results based on ticker-region or Entity ID or the combination of both. A comma is used to separate each identifier (optional)</param>
        /// <param name="sourceCode">This parameter filters the results based on Source of the Audio file. Below are the descriptions for each Source Code - * P &#x3D; Phone * W &#x3D; Webcast * V &#x3D; Vendor * I &#x3D; Webcast Replay * F &#x3D; Flash - identical to webcast; can merge with \&quot;W\&quot; in the future * R &#x3D; Replay (Phone Replay) (optional)</param>
        /// <param name="fileName">This parameter is used to filter the data on based on the file name. (optional)</param>
        /// <param name="trimmed">This parameters helps to search trimmed audio files (optional)</param>
        /// <param name="uploadTime">This parameter filters data based on uploadTime relative to the current time, in hours. For example:- uploadTime &#x3D; -15 (fetches audio files between 15 hours ago and now)  Minimum is 1 hour i.e., uploadTime&#x3D; -1  Maximum is 1 week/168 hours i.e., uploadTime&#x3D;-168  While using uploadTime, the startDate and endDate parameters will be ignored (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EventsAudio)</returns>
        public async System.Threading.Tasks.Task<FactSet.SDK.DocumentsDistributorCallStreetEvents.Client.ApiResponse<EventsAudio>> GetDocsDistributorAudioV1ListFilesWithHttpInfoAsync(string sort = default(string), int? paginationLimit = default(int?), DateTime? startDate = default(DateTime?), int? paginationOffset = default(int?), DateTime? endDate = default(DateTime?), int? reportId = default(int?), string ids = default(string), string sourceCode = default(string), string fileName = default(string), bool? trimmed = default(bool?), int? uploadTime = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            FactSet.SDK.DocumentsDistributorCallStreetEvents.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.DocumentsDistributorCallStreetEvents.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = FactSet.SDK.DocumentsDistributorCallStreetEvents.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = FactSet.SDK.DocumentsDistributorCallStreetEvents.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.DocumentsDistributorCallStreetEvents.Client.ClientUtils.ParameterToMultiMap("", "_sort", sort));
            }
            if (paginationLimit != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.DocumentsDistributorCallStreetEvents.Client.ClientUtils.ParameterToMultiMap("", "_paginationLimit", paginationLimit));
            }
            if (startDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.DocumentsDistributorCallStreetEvents.Client.ClientUtils.ParameterToMultiMap("", "startDate", startDate));
            }
            if (paginationOffset != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.DocumentsDistributorCallStreetEvents.Client.ClientUtils.ParameterToMultiMap("", "_paginationOffset", paginationOffset));
            }
            if (endDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.DocumentsDistributorCallStreetEvents.Client.ClientUtils.ParameterToMultiMap("", "endDate", endDate));
            }
            if (reportId != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.DocumentsDistributorCallStreetEvents.Client.ClientUtils.ParameterToMultiMap("", "reportId", reportId));
            }
            if (ids != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.DocumentsDistributorCallStreetEvents.Client.ClientUtils.ParameterToMultiMap("", "ids", ids));
            }
            if (sourceCode != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.DocumentsDistributorCallStreetEvents.Client.ClientUtils.ParameterToMultiMap("", "sourceCode", sourceCode));
            }
            if (fileName != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.DocumentsDistributorCallStreetEvents.Client.ClientUtils.ParameterToMultiMap("", "fileName", fileName));
            }
            if (trimmed != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.DocumentsDistributorCallStreetEvents.Client.ClientUtils.ParameterToMultiMap("", "trimmed", trimmed));
            }
            if (uploadTime != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.DocumentsDistributorCallStreetEvents.Client.ClientUtils.ParameterToMultiMap("", "uploadTime", uploadTime));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.DocumentsDistributorCallStreetEvents.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<EventsAudio>("/docs-distributor/audio/v1/list-files", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetDocsDistributorAudioV1ListFiles", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
