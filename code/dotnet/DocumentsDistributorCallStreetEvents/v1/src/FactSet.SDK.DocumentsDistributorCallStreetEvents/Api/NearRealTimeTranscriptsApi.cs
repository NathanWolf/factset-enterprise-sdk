/*
 * Documents Distributor - CallStreet Events
 *
 * CallStreet Events contains all the Documents Distributor APIs that provide events data such as Events Audio and Near Real-Time Transcripts  The  Events Audio API provides access to all audio recordings to various company events covered by FactSet. The events include, but are not limited to: earnings calls, conferences, and investor days.   This API also provides relevant metadata such as timestamps and identifiers around each audio file.  The Documents Distributor - Near Real-time Transcripts API enables access to Near Real-time Transcripts provided by CallStreet to time-sensitive clients. This API also provides the relevant speaker metadata along with their confidence scores. This data caters to quant clients interested in building machine learning models.  Clients can leverage this API to perform sentiment analysis through natural language processing or machine learning. It can also be used to complement analysis using FactSet's transcripts service.
 *
 * The version of the OpenAPI document: 3.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using FactSet.SDK.DocumentsDistributorCallStreetEvents.Client;
using FactSet.SDK.DocumentsDistributorCallStreetEvents.Model;
using FactSet.SDK.Utils.Authentication;

namespace FactSet.SDK.DocumentsDistributorCallStreetEvents.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface INearRealTimeTranscriptsApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Returns the active calls happening at the moment
        /// </summary>
        /// <remarks>
        /// Returns the active calls happening at the moment
        /// </remarks>
        /// <exception cref="FactSet.SDK.DocumentsDistributorCallStreetEvents.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sort">Enables to get the data in chronological or reverse chronological order based on startDate. Results are in reverse chronological order if this parameter is not used (optional, default to -startDate)</param>
        /// <param name="reportId">Unique identifier for an event (optional)</param>
        /// <param name="audioSourceId">Unique Id for an internal recording specific to reportId. For example, reportId X would have multiple recordings from different source (dial-in or webcast).One reportId can have multiple audiosource ids. (optional)</param>
        /// <param name="entityId">Factset entity level identifier for the company hosting the event (optional)</param>
        /// <param name="ticker">Ticker-region identifier for the company hosting the event (optional)</param>
        /// <param name="callStatus">Status of the call i.e. ended or inProgress or ewn or issueAtSource (optional)</param>
        /// <param name="paginationLimit">Specifies the number of results to return per page.[ Min&#x3D;0 ; Max&#x3D;500 ] (optional)</param>
        /// <param name="paginationOffset">Specifies the starting point for pagination. This parameter is used to identify the beginning of next set of results (optional)</param>
        /// <returns>NRTCalls</returns>
        NRTCalls GetBulkDocumentsNrtV1Calls(string sort = default(string), int? reportId = default(int?), int? audioSourceId = default(int?), string entityId = default(string), string ticker = default(string), string callStatus = default(string), int? paginationLimit = default(int?), int? paginationOffset = default(int?));

        /// <summary>
        /// Returns the active calls happening at the moment
        /// </summary>
        /// <remarks>
        /// Returns the active calls happening at the moment
        /// </remarks>
        /// <exception cref="FactSet.SDK.DocumentsDistributorCallStreetEvents.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sort">Enables to get the data in chronological or reverse chronological order based on startDate. Results are in reverse chronological order if this parameter is not used (optional, default to -startDate)</param>
        /// <param name="reportId">Unique identifier for an event (optional)</param>
        /// <param name="audioSourceId">Unique Id for an internal recording specific to reportId. For example, reportId X would have multiple recordings from different source (dial-in or webcast).One reportId can have multiple audiosource ids. (optional)</param>
        /// <param name="entityId">Factset entity level identifier for the company hosting the event (optional)</param>
        /// <param name="ticker">Ticker-region identifier for the company hosting the event (optional)</param>
        /// <param name="callStatus">Status of the call i.e. ended or inProgress or ewn or issueAtSource (optional)</param>
        /// <param name="paginationLimit">Specifies the number of results to return per page.[ Min&#x3D;0 ; Max&#x3D;500 ] (optional)</param>
        /// <param name="paginationOffset">Specifies the starting point for pagination. This parameter is used to identify the beginning of next set of results (optional)</param>
        /// <returns>ApiResponse of NRTCalls</returns>
        ApiResponse<NRTCalls> GetBulkDocumentsNrtV1CallsWithHttpInfo(string sort = default(string), int? reportId = default(int?), int? audioSourceId = default(int?), string entityId = default(string), string ticker = default(string), string callStatus = default(string), int? paginationLimit = default(int?), int? paginationOffset = default(int?));
        /// <summary>
        /// Returns the  indexed transcript data  in small increments throughout the duration of an active call.
        /// </summary>
        /// <remarks>
        /// Returns the  indexed transcript data  in small increments throughout the duration of an active call.
        /// </remarks>
        /// <exception cref="FactSet.SDK.DocumentsDistributorCallStreetEvents.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="audioSourceId">Unique ID for an Internal recording specific to reportID. For example, ReportID X would have multiple recordings from different source (dial-in or webcast). One ReportID can have multiple AudioSource ids.</param>
        /// <param name="reportId">Unique identifier for an event (optional)</param>
        /// <param name="paginationLimit">Specifies the  number of results to return per page. [ Min&#x3D;0; Max&#x3D;50 ] (optional)</param>
        /// <param name="paginationOffset">Specifies the starting point for pagination. This parameter is used to identify the beginning of next set of results (optional)</param>
        /// <returns>IndexedNRT</returns>
        IndexedNRT GetBulkDocumentsNrtV1IndexedNrt(int audioSourceId, int? reportId = default(int?), int? paginationLimit = default(int?), int? paginationOffset = default(int?));

        /// <summary>
        /// Returns the  indexed transcript data  in small increments throughout the duration of an active call.
        /// </summary>
        /// <remarks>
        /// Returns the  indexed transcript data  in small increments throughout the duration of an active call.
        /// </remarks>
        /// <exception cref="FactSet.SDK.DocumentsDistributorCallStreetEvents.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="audioSourceId">Unique ID for an Internal recording specific to reportID. For example, ReportID X would have multiple recordings from different source (dial-in or webcast). One ReportID can have multiple AudioSource ids.</param>
        /// <param name="reportId">Unique identifier for an event (optional)</param>
        /// <param name="paginationLimit">Specifies the  number of results to return per page. [ Min&#x3D;0; Max&#x3D;50 ] (optional)</param>
        /// <param name="paginationOffset">Specifies the starting point for pagination. This parameter is used to identify the beginning of next set of results (optional)</param>
        /// <returns>ApiResponse of IndexedNRT</returns>
        ApiResponse<IndexedNRT> GetBulkDocumentsNrtV1IndexedNrtWithHttpInfo(int audioSourceId, int? reportId = default(int?), int? paginationLimit = default(int?), int? paginationOffset = default(int?));
        /// <summary>
        /// Returns the latest transcript snippets from an active call
        /// </summary>
        /// <remarks>
        /// Returns the latest snippets from an active call
        /// </remarks>
        /// <exception cref="FactSet.SDK.DocumentsDistributorCallStreetEvents.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="audioSourceId">Unique ID for an Internal recording specific to reportID. For example, ReportID X would have multiple recordings from different source (dial-in or webcast). One ReportID can have multiple AudioSource ids.</param>
        /// <param name="reportId">Unique identifier for an event (optional)</param>
        /// <param name="paginationLimit">Specifies the  number of results to return per page. [ Min&#x3D;0; Max&#x3D;500 ] (optional)</param>
        /// <param name="paginationOffset">Specifies the starting point for pagination. This parameter is used to identify the beginning of next set of results (optional)</param>
        /// <returns>NRTSnippets</returns>
        NRTSnippets GetBulkDocumentsNrtV1ListSnippets(int audioSourceId, int? reportId = default(int?), int? paginationLimit = default(int?), int? paginationOffset = default(int?));

        /// <summary>
        /// Returns the latest transcript snippets from an active call
        /// </summary>
        /// <remarks>
        /// Returns the latest snippets from an active call
        /// </remarks>
        /// <exception cref="FactSet.SDK.DocumentsDistributorCallStreetEvents.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="audioSourceId">Unique ID for an Internal recording specific to reportID. For example, ReportID X would have multiple recordings from different source (dial-in or webcast). One ReportID can have multiple AudioSource ids.</param>
        /// <param name="reportId">Unique identifier for an event (optional)</param>
        /// <param name="paginationLimit">Specifies the  number of results to return per page. [ Min&#x3D;0; Max&#x3D;500 ] (optional)</param>
        /// <param name="paginationOffset">Specifies the starting point for pagination. This parameter is used to identify the beginning of next set of results (optional)</param>
        /// <returns>ApiResponse of NRTSnippets</returns>
        ApiResponse<NRTSnippets> GetBulkDocumentsNrtV1ListSnippetsWithHttpInfo(int audioSourceId, int? reportId = default(int?), int? paginationLimit = default(int?), int? paginationOffset = default(int?));
        /// <summary>
        /// Returns the latest speakerIds with the confidence scores generated for an active call.
        /// </summary>
        /// <remarks>
        /// Returns the latest speakerIds with the cosine scores(confidence scores) generated for an active call.
        /// </remarks>
        /// <exception cref="FactSet.SDK.DocumentsDistributorCallStreetEvents.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="audioSourceId">The Unique ID for an Internal recording specific to reportID. For example, ReportID X would have multiple recordings from a different source (dial-in or webcast). One ReportID can have multiple audioSource ids. </param>
        /// <param name="sort">Enables to get the data in chronological or reverse chronological order. Results are in chronological order if this parameter is not used (optional, default to startDate)</param>
        /// <param name="paginationLimit">Specifies the number of results to return per page.[ Min&#x3D;0 ; Max&#x3D;500 ] (optional)</param>
        /// <param name="paginationOffset">Specifies the starting point for pagination. This parameter is used to identify the beginning of next set of results (optional)</param>
        /// <returns>NRTSpeakerids</returns>
        NRTSpeakerids GetBulkDocumentsNrtV1Speakerids(int audioSourceId, string sort = default(string), int? paginationLimit = default(int?), int? paginationOffset = default(int?));

        /// <summary>
        /// Returns the latest speakerIds with the confidence scores generated for an active call.
        /// </summary>
        /// <remarks>
        /// Returns the latest speakerIds with the cosine scores(confidence scores) generated for an active call.
        /// </remarks>
        /// <exception cref="FactSet.SDK.DocumentsDistributorCallStreetEvents.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="audioSourceId">The Unique ID for an Internal recording specific to reportID. For example, ReportID X would have multiple recordings from a different source (dial-in or webcast). One ReportID can have multiple audioSource ids. </param>
        /// <param name="sort">Enables to get the data in chronological or reverse chronological order. Results are in chronological order if this parameter is not used (optional, default to startDate)</param>
        /// <param name="paginationLimit">Specifies the number of results to return per page.[ Min&#x3D;0 ; Max&#x3D;500 ] (optional)</param>
        /// <param name="paginationOffset">Specifies the starting point for pagination. This parameter is used to identify the beginning of next set of results (optional)</param>
        /// <returns>ApiResponse of NRTSpeakerids</returns>
        ApiResponse<NRTSpeakerids> GetBulkDocumentsNrtV1SpeakeridsWithHttpInfo(int audioSourceId, string sort = default(string), int? paginationLimit = default(int?), int? paginationOffset = default(int?));
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface INearRealTimeTranscriptsApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Returns the active calls happening at the moment
        /// </summary>
        /// <remarks>
        /// Returns the active calls happening at the moment
        /// </remarks>
        /// <exception cref="FactSet.SDK.DocumentsDistributorCallStreetEvents.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sort">Enables to get the data in chronological or reverse chronological order based on startDate. Results are in reverse chronological order if this parameter is not used (optional, default to -startDate)</param>
        /// <param name="reportId">Unique identifier for an event (optional)</param>
        /// <param name="audioSourceId">Unique Id for an internal recording specific to reportId. For example, reportId X would have multiple recordings from different source (dial-in or webcast).One reportId can have multiple audiosource ids. (optional)</param>
        /// <param name="entityId">Factset entity level identifier for the company hosting the event (optional)</param>
        /// <param name="ticker">Ticker-region identifier for the company hosting the event (optional)</param>
        /// <param name="callStatus">Status of the call i.e. ended or inProgress or ewn or issueAtSource (optional)</param>
        /// <param name="paginationLimit">Specifies the number of results to return per page.[ Min&#x3D;0 ; Max&#x3D;500 ] (optional)</param>
        /// <param name="paginationOffset">Specifies the starting point for pagination. This parameter is used to identify the beginning of next set of results (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of NRTCalls</returns>
        System.Threading.Tasks.Task<NRTCalls> GetBulkDocumentsNrtV1CallsAsync(string sort = default(string), int? reportId = default(int?), int? audioSourceId = default(int?), string entityId = default(string), string ticker = default(string), string callStatus = default(string), int? paginationLimit = default(int?), int? paginationOffset = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Returns the active calls happening at the moment
        /// </summary>
        /// <remarks>
        /// Returns the active calls happening at the moment
        /// </remarks>
        /// <exception cref="FactSet.SDK.DocumentsDistributorCallStreetEvents.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sort">Enables to get the data in chronological or reverse chronological order based on startDate. Results are in reverse chronological order if this parameter is not used (optional, default to -startDate)</param>
        /// <param name="reportId">Unique identifier for an event (optional)</param>
        /// <param name="audioSourceId">Unique Id for an internal recording specific to reportId. For example, reportId X would have multiple recordings from different source (dial-in or webcast).One reportId can have multiple audiosource ids. (optional)</param>
        /// <param name="entityId">Factset entity level identifier for the company hosting the event (optional)</param>
        /// <param name="ticker">Ticker-region identifier for the company hosting the event (optional)</param>
        /// <param name="callStatus">Status of the call i.e. ended or inProgress or ewn or issueAtSource (optional)</param>
        /// <param name="paginationLimit">Specifies the number of results to return per page.[ Min&#x3D;0 ; Max&#x3D;500 ] (optional)</param>
        /// <param name="paginationOffset">Specifies the starting point for pagination. This parameter is used to identify the beginning of next set of results (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (NRTCalls)</returns>
        System.Threading.Tasks.Task<ApiResponse<NRTCalls>> GetBulkDocumentsNrtV1CallsWithHttpInfoAsync(string sort = default(string), int? reportId = default(int?), int? audioSourceId = default(int?), string entityId = default(string), string ticker = default(string), string callStatus = default(string), int? paginationLimit = default(int?), int? paginationOffset = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Returns the  indexed transcript data  in small increments throughout the duration of an active call.
        /// </summary>
        /// <remarks>
        /// Returns the  indexed transcript data  in small increments throughout the duration of an active call.
        /// </remarks>
        /// <exception cref="FactSet.SDK.DocumentsDistributorCallStreetEvents.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="audioSourceId">Unique ID for an Internal recording specific to reportID. For example, ReportID X would have multiple recordings from different source (dial-in or webcast). One ReportID can have multiple AudioSource ids.</param>
        /// <param name="reportId">Unique identifier for an event (optional)</param>
        /// <param name="paginationLimit">Specifies the  number of results to return per page. [ Min&#x3D;0; Max&#x3D;50 ] (optional)</param>
        /// <param name="paginationOffset">Specifies the starting point for pagination. This parameter is used to identify the beginning of next set of results (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of IndexedNRT</returns>
        System.Threading.Tasks.Task<IndexedNRT> GetBulkDocumentsNrtV1IndexedNrtAsync(int audioSourceId, int? reportId = default(int?), int? paginationLimit = default(int?), int? paginationOffset = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Returns the  indexed transcript data  in small increments throughout the duration of an active call.
        /// </summary>
        /// <remarks>
        /// Returns the  indexed transcript data  in small increments throughout the duration of an active call.
        /// </remarks>
        /// <exception cref="FactSet.SDK.DocumentsDistributorCallStreetEvents.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="audioSourceId">Unique ID for an Internal recording specific to reportID. For example, ReportID X would have multiple recordings from different source (dial-in or webcast). One ReportID can have multiple AudioSource ids.</param>
        /// <param name="reportId">Unique identifier for an event (optional)</param>
        /// <param name="paginationLimit">Specifies the  number of results to return per page. [ Min&#x3D;0; Max&#x3D;50 ] (optional)</param>
        /// <param name="paginationOffset">Specifies the starting point for pagination. This parameter is used to identify the beginning of next set of results (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (IndexedNRT)</returns>
        System.Threading.Tasks.Task<ApiResponse<IndexedNRT>> GetBulkDocumentsNrtV1IndexedNrtWithHttpInfoAsync(int audioSourceId, int? reportId = default(int?), int? paginationLimit = default(int?), int? paginationOffset = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Returns the latest transcript snippets from an active call
        /// </summary>
        /// <remarks>
        /// Returns the latest snippets from an active call
        /// </remarks>
        /// <exception cref="FactSet.SDK.DocumentsDistributorCallStreetEvents.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="audioSourceId">Unique ID for an Internal recording specific to reportID. For example, ReportID X would have multiple recordings from different source (dial-in or webcast). One ReportID can have multiple AudioSource ids.</param>
        /// <param name="reportId">Unique identifier for an event (optional)</param>
        /// <param name="paginationLimit">Specifies the  number of results to return per page. [ Min&#x3D;0; Max&#x3D;500 ] (optional)</param>
        /// <param name="paginationOffset">Specifies the starting point for pagination. This parameter is used to identify the beginning of next set of results (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of NRTSnippets</returns>
        System.Threading.Tasks.Task<NRTSnippets> GetBulkDocumentsNrtV1ListSnippetsAsync(int audioSourceId, int? reportId = default(int?), int? paginationLimit = default(int?), int? paginationOffset = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Returns the latest transcript snippets from an active call
        /// </summary>
        /// <remarks>
        /// Returns the latest snippets from an active call
        /// </remarks>
        /// <exception cref="FactSet.SDK.DocumentsDistributorCallStreetEvents.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="audioSourceId">Unique ID for an Internal recording specific to reportID. For example, ReportID X would have multiple recordings from different source (dial-in or webcast). One ReportID can have multiple AudioSource ids.</param>
        /// <param name="reportId">Unique identifier for an event (optional)</param>
        /// <param name="paginationLimit">Specifies the  number of results to return per page. [ Min&#x3D;0; Max&#x3D;500 ] (optional)</param>
        /// <param name="paginationOffset">Specifies the starting point for pagination. This parameter is used to identify the beginning of next set of results (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (NRTSnippets)</returns>
        System.Threading.Tasks.Task<ApiResponse<NRTSnippets>> GetBulkDocumentsNrtV1ListSnippetsWithHttpInfoAsync(int audioSourceId, int? reportId = default(int?), int? paginationLimit = default(int?), int? paginationOffset = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Returns the latest speakerIds with the confidence scores generated for an active call.
        /// </summary>
        /// <remarks>
        /// Returns the latest speakerIds with the cosine scores(confidence scores) generated for an active call.
        /// </remarks>
        /// <exception cref="FactSet.SDK.DocumentsDistributorCallStreetEvents.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="audioSourceId">The Unique ID for an Internal recording specific to reportID. For example, ReportID X would have multiple recordings from a different source (dial-in or webcast). One ReportID can have multiple audioSource ids. </param>
        /// <param name="sort">Enables to get the data in chronological or reverse chronological order. Results are in chronological order if this parameter is not used (optional, default to startDate)</param>
        /// <param name="paginationLimit">Specifies the number of results to return per page.[ Min&#x3D;0 ; Max&#x3D;500 ] (optional)</param>
        /// <param name="paginationOffset">Specifies the starting point for pagination. This parameter is used to identify the beginning of next set of results (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of NRTSpeakerids</returns>
        System.Threading.Tasks.Task<NRTSpeakerids> GetBulkDocumentsNrtV1SpeakeridsAsync(int audioSourceId, string sort = default(string), int? paginationLimit = default(int?), int? paginationOffset = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Returns the latest speakerIds with the confidence scores generated for an active call.
        /// </summary>
        /// <remarks>
        /// Returns the latest speakerIds with the cosine scores(confidence scores) generated for an active call.
        /// </remarks>
        /// <exception cref="FactSet.SDK.DocumentsDistributorCallStreetEvents.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="audioSourceId">The Unique ID for an Internal recording specific to reportID. For example, ReportID X would have multiple recordings from a different source (dial-in or webcast). One ReportID can have multiple audioSource ids. </param>
        /// <param name="sort">Enables to get the data in chronological or reverse chronological order. Results are in chronological order if this parameter is not used (optional, default to startDate)</param>
        /// <param name="paginationLimit">Specifies the number of results to return per page.[ Min&#x3D;0 ; Max&#x3D;500 ] (optional)</param>
        /// <param name="paginationOffset">Specifies the starting point for pagination. This parameter is used to identify the beginning of next set of results (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (NRTSpeakerids)</returns>
        System.Threading.Tasks.Task<ApiResponse<NRTSpeakerids>> GetBulkDocumentsNrtV1SpeakeridsWithHttpInfoAsync(int audioSourceId, string sort = default(string), int? paginationLimit = default(int?), int? paginationOffset = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface INearRealTimeTranscriptsApi : INearRealTimeTranscriptsApiSync, INearRealTimeTranscriptsApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class NearRealTimeTranscriptsApi : INearRealTimeTranscriptsApi
    {
        private FactSet.SDK.DocumentsDistributorCallStreetEvents.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        # region Response Type Disctionaries
                private static readonly Dictionary<HttpStatusCode, System.Type> GetBulkDocumentsNrtV1CallsResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)200, typeof(NRTCalls) },
            { (HttpStatusCode)400, typeof(NRTCalls400Response) },
            { (HttpStatusCode)401, typeof(Error) },
            { (HttpStatusCode)403, typeof(Error) },
            { (HttpStatusCode)500, typeof(Error) },
        };
        private static readonly Dictionary<HttpStatusCode, System.Type> GetBulkDocumentsNrtV1IndexedNrtResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)200, typeof(IndexedNRT) },
            { (HttpStatusCode)400, typeof(NRTSnippets400Response) },
            { (HttpStatusCode)401, typeof(Error) },
            { (HttpStatusCode)403, typeof(Error) },
            { (HttpStatusCode)500, typeof(Error) },
        };
        private static readonly Dictionary<HttpStatusCode, System.Type> GetBulkDocumentsNrtV1ListSnippetsResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)200, typeof(NRTSnippets) },
            { (HttpStatusCode)400, typeof(NRTSnippets400Response) },
            { (HttpStatusCode)401, typeof(Error) },
            { (HttpStatusCode)403, typeof(Error) },
            { (HttpStatusCode)500, typeof(Error) },
        };
        private static readonly Dictionary<HttpStatusCode, System.Type> GetBulkDocumentsNrtV1SpeakeridsResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)200, typeof(NRTSpeakerids) },
            { (HttpStatusCode)400, typeof(NRTSpeakerids400Response) },
            { (HttpStatusCode)401, typeof(Error) },
            { (HttpStatusCode)403, typeof(Error) },
            { (HttpStatusCode)500, typeof(Error) },
        };

        # endregion Response Type Disctionaries

        # region Api Response Objects
         

        # endregion Api Response Objects

        /// <summary>
        /// Initializes a new instance of the <see cref="NearRealTimeTranscriptsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public NearRealTimeTranscriptsApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="NearRealTimeTranscriptsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public NearRealTimeTranscriptsApi(string basePath)
        {
            this.Configuration = FactSet.SDK.DocumentsDistributorCallStreetEvents.Client.Configuration.MergeConfigurations(
                FactSet.SDK.DocumentsDistributorCallStreetEvents.Client.GlobalConfiguration.Instance,
                new FactSet.SDK.DocumentsDistributorCallStreetEvents.Client.Configuration { BasePath = basePath }
            );
            this.Client = new FactSet.SDK.DocumentsDistributorCallStreetEvents.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new FactSet.SDK.DocumentsDistributorCallStreetEvents.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = FactSet.SDK.DocumentsDistributorCallStreetEvents.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="NearRealTimeTranscriptsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public NearRealTimeTranscriptsApi(FactSet.SDK.DocumentsDistributorCallStreetEvents.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = FactSet.SDK.DocumentsDistributorCallStreetEvents.Client.Configuration.MergeConfigurations(
                FactSet.SDK.DocumentsDistributorCallStreetEvents.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new FactSet.SDK.DocumentsDistributorCallStreetEvents.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new FactSet.SDK.DocumentsDistributorCallStreetEvents.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = FactSet.SDK.DocumentsDistributorCallStreetEvents.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="NearRealTimeTranscriptsApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public NearRealTimeTranscriptsApi(FactSet.SDK.DocumentsDistributorCallStreetEvents.Client.ISynchronousClient client, FactSet.SDK.DocumentsDistributorCallStreetEvents.Client.IAsynchronousClient asyncClient, FactSet.SDK.DocumentsDistributorCallStreetEvents.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = FactSet.SDK.DocumentsDistributorCallStreetEvents.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public FactSet.SDK.DocumentsDistributorCallStreetEvents.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public FactSet.SDK.DocumentsDistributorCallStreetEvents.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public FactSet.SDK.DocumentsDistributorCallStreetEvents.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public FactSet.SDK.DocumentsDistributorCallStreetEvents.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Returns the active calls happening at the moment Returns the active calls happening at the moment
        /// </summary>
        /// <exception cref="FactSet.SDK.DocumentsDistributorCallStreetEvents.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sort">Enables to get the data in chronological or reverse chronological order based on startDate. Results are in reverse chronological order if this parameter is not used (optional, default to -startDate)</param>
        /// <param name="reportId">Unique identifier for an event (optional)</param>
        /// <param name="audioSourceId">Unique Id for an internal recording specific to reportId. For example, reportId X would have multiple recordings from different source (dial-in or webcast).One reportId can have multiple audiosource ids. (optional)</param>
        /// <param name="entityId">Factset entity level identifier for the company hosting the event (optional)</param>
        /// <param name="ticker">Ticker-region identifier for the company hosting the event (optional)</param>
        /// <param name="callStatus">Status of the call i.e. ended or inProgress or ewn or issueAtSource (optional)</param>
        /// <param name="paginationLimit">Specifies the number of results to return per page.[ Min&#x3D;0 ; Max&#x3D;500 ] (optional)</param>
        /// <param name="paginationOffset">Specifies the starting point for pagination. This parameter is used to identify the beginning of next set of results (optional)</param>
        /// <returns>NRTCalls</returns>
        public NRTCalls GetBulkDocumentsNrtV1Calls(string sort = default(string), int? reportId = default(int?), int? audioSourceId = default(int?), string entityId = default(string), string ticker = default(string), string callStatus = default(string), int? paginationLimit = default(int?), int? paginationOffset = default(int?))
        {
            var localVarResponse = GetBulkDocumentsNrtV1CallsWithHttpInfo(sort, reportId, audioSourceId, entityId, ticker, callStatus, paginationLimit, paginationOffset);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns the active calls happening at the moment Returns the active calls happening at the moment
        /// </summary>
        /// <exception cref="FactSet.SDK.DocumentsDistributorCallStreetEvents.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sort">Enables to get the data in chronological or reverse chronological order based on startDate. Results are in reverse chronological order if this parameter is not used (optional, default to -startDate)</param>
        /// <param name="reportId">Unique identifier for an event (optional)</param>
        /// <param name="audioSourceId">Unique Id for an internal recording specific to reportId. For example, reportId X would have multiple recordings from different source (dial-in or webcast).One reportId can have multiple audiosource ids. (optional)</param>
        /// <param name="entityId">Factset entity level identifier for the company hosting the event (optional)</param>
        /// <param name="ticker">Ticker-region identifier for the company hosting the event (optional)</param>
        /// <param name="callStatus">Status of the call i.e. ended or inProgress or ewn or issueAtSource (optional)</param>
        /// <param name="paginationLimit">Specifies the number of results to return per page.[ Min&#x3D;0 ; Max&#x3D;500 ] (optional)</param>
        /// <param name="paginationOffset">Specifies the starting point for pagination. This parameter is used to identify the beginning of next set of results (optional)</param>
        /// <returns>ApiResponse of NRTCalls</returns>
        public ApiResponse<NRTCalls> GetBulkDocumentsNrtV1CallsWithHttpInfo(string sort = default(string), int? reportId = default(int?), int? audioSourceId = default(int?), string entityId = default(string), string ticker = default(string), string callStatus = default(string), int? paginationLimit = default(int?), int? paginationOffset = default(int?))
        {
            FactSet.SDK.DocumentsDistributorCallStreetEvents.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.DocumentsDistributorCallStreetEvents.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.DocumentsDistributorCallStreetEvents.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.DocumentsDistributorCallStreetEvents.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.DocumentsDistributorCallStreetEvents.Client.ClientUtils.ParameterToMultiMap("", "_sort", sort));
            }
            if (reportId != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.DocumentsDistributorCallStreetEvents.Client.ClientUtils.ParameterToMultiMap("", "reportId", reportId));
            }
            if (audioSourceId != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.DocumentsDistributorCallStreetEvents.Client.ClientUtils.ParameterToMultiMap("", "audioSourceId", audioSourceId));
            }
            if (entityId != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.DocumentsDistributorCallStreetEvents.Client.ClientUtils.ParameterToMultiMap("", "entityId", entityId));
            }
            if (ticker != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.DocumentsDistributorCallStreetEvents.Client.ClientUtils.ParameterToMultiMap("", "ticker", ticker));
            }
            if (callStatus != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.DocumentsDistributorCallStreetEvents.Client.ClientUtils.ParameterToMultiMap("", "callStatus", callStatus));
            }
            if (paginationLimit != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.DocumentsDistributorCallStreetEvents.Client.ClientUtils.ParameterToMultiMap("", "_paginationLimit", paginationLimit));
            }
            if (paginationOffset != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.DocumentsDistributorCallStreetEvents.Client.ClientUtils.ParameterToMultiMap("", "_paginationOffset", paginationOffset));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.DocumentsDistributorCallStreetEvents.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = GetBulkDocumentsNrtV1CallsResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Get<
            NRTCalls>("/bulk-documents/nrt/v1/calls", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetBulkDocumentsNrtV1Calls", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// Returns the active calls happening at the moment Returns the active calls happening at the moment
        /// </summary>
        /// <exception cref="FactSet.SDK.DocumentsDistributorCallStreetEvents.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sort">Enables to get the data in chronological or reverse chronological order based on startDate. Results are in reverse chronological order if this parameter is not used (optional, default to -startDate)</param>
        /// <param name="reportId">Unique identifier for an event (optional)</param>
        /// <param name="audioSourceId">Unique Id for an internal recording specific to reportId. For example, reportId X would have multiple recordings from different source (dial-in or webcast).One reportId can have multiple audiosource ids. (optional)</param>
        /// <param name="entityId">Factset entity level identifier for the company hosting the event (optional)</param>
        /// <param name="ticker">Ticker-region identifier for the company hosting the event (optional)</param>
        /// <param name="callStatus">Status of the call i.e. ended or inProgress or ewn or issueAtSource (optional)</param>
        /// <param name="paginationLimit">Specifies the number of results to return per page.[ Min&#x3D;0 ; Max&#x3D;500 ] (optional)</param>
        /// <param name="paginationOffset">Specifies the starting point for pagination. This parameter is used to identify the beginning of next set of results (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of NRTCalls</returns>
        public async System.Threading.Tasks.Task<NRTCalls>GetBulkDocumentsNrtV1CallsAsync(string sort = default(string), int? reportId = default(int?), int? audioSourceId = default(int?), string entityId = default(string), string ticker = default(string), string callStatus = default(string), int? paginationLimit = default(int?), int? paginationOffset = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await GetBulkDocumentsNrtV1CallsWithHttpInfoAsync(sort, reportId, audioSourceId, entityId, ticker, callStatus, paginationLimit, paginationOffset, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns the active calls happening at the moment Returns the active calls happening at the moment
        /// </summary>
        /// <exception cref="FactSet.SDK.DocumentsDistributorCallStreetEvents.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sort">Enables to get the data in chronological or reverse chronological order based on startDate. Results are in reverse chronological order if this parameter is not used (optional, default to -startDate)</param>
        /// <param name="reportId">Unique identifier for an event (optional)</param>
        /// <param name="audioSourceId">Unique Id for an internal recording specific to reportId. For example, reportId X would have multiple recordings from different source (dial-in or webcast).One reportId can have multiple audiosource ids. (optional)</param>
        /// <param name="entityId">Factset entity level identifier for the company hosting the event (optional)</param>
        /// <param name="ticker">Ticker-region identifier for the company hosting the event (optional)</param>
        /// <param name="callStatus">Status of the call i.e. ended or inProgress or ewn or issueAtSource (optional)</param>
        /// <param name="paginationLimit">Specifies the number of results to return per page.[ Min&#x3D;0 ; Max&#x3D;500 ] (optional)</param>
        /// <param name="paginationOffset">Specifies the starting point for pagination. This parameter is used to identify the beginning of next set of results (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (NRTCalls)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<NRTCalls>> GetBulkDocumentsNrtV1CallsWithHttpInfoAsync(string sort = default(string), int? reportId = default(int?), int? audioSourceId = default(int?), string entityId = default(string), string ticker = default(string), string callStatus = default(string), int? paginationLimit = default(int?), int? paginationOffset = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            FactSet.SDK.DocumentsDistributorCallStreetEvents.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.DocumentsDistributorCallStreetEvents.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.DocumentsDistributorCallStreetEvents.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.DocumentsDistributorCallStreetEvents.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.DocumentsDistributorCallStreetEvents.Client.ClientUtils.ParameterToMultiMap("", "_sort", sort));
            }
            if (reportId != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.DocumentsDistributorCallStreetEvents.Client.ClientUtils.ParameterToMultiMap("", "reportId", reportId));
            }
            if (audioSourceId != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.DocumentsDistributorCallStreetEvents.Client.ClientUtils.ParameterToMultiMap("", "audioSourceId", audioSourceId));
            }
            if (entityId != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.DocumentsDistributorCallStreetEvents.Client.ClientUtils.ParameterToMultiMap("", "entityId", entityId));
            }
            if (ticker != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.DocumentsDistributorCallStreetEvents.Client.ClientUtils.ParameterToMultiMap("", "ticker", ticker));
            }
            if (callStatus != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.DocumentsDistributorCallStreetEvents.Client.ClientUtils.ParameterToMultiMap("", "callStatus", callStatus));
            }
            if (paginationLimit != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.DocumentsDistributorCallStreetEvents.Client.ClientUtils.ParameterToMultiMap("", "_paginationLimit", paginationLimit));
            }
            if (paginationOffset != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.DocumentsDistributorCallStreetEvents.Client.ClientUtils.ParameterToMultiMap("", "_paginationOffset", paginationOffset));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.DocumentsDistributorCallStreetEvents.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = GetBulkDocumentsNrtV1CallsResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<NRTCalls>("/bulk-documents/nrt/v1/calls", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetBulkDocumentsNrtV1Calls", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Returns the  indexed transcript data  in small increments throughout the duration of an active call. Returns the  indexed transcript data  in small increments throughout the duration of an active call.
        /// </summary>
        /// <exception cref="FactSet.SDK.DocumentsDistributorCallStreetEvents.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="audioSourceId">Unique ID for an Internal recording specific to reportID. For example, ReportID X would have multiple recordings from different source (dial-in or webcast). One ReportID can have multiple AudioSource ids.</param>
        /// <param name="reportId">Unique identifier for an event (optional)</param>
        /// <param name="paginationLimit">Specifies the  number of results to return per page. [ Min&#x3D;0; Max&#x3D;50 ] (optional)</param>
        /// <param name="paginationOffset">Specifies the starting point for pagination. This parameter is used to identify the beginning of next set of results (optional)</param>
        /// <returns>IndexedNRT</returns>
        public IndexedNRT GetBulkDocumentsNrtV1IndexedNrt(int audioSourceId, int? reportId = default(int?), int? paginationLimit = default(int?), int? paginationOffset = default(int?))
        {
            var localVarResponse = GetBulkDocumentsNrtV1IndexedNrtWithHttpInfo(audioSourceId, reportId, paginationLimit, paginationOffset);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns the  indexed transcript data  in small increments throughout the duration of an active call. Returns the  indexed transcript data  in small increments throughout the duration of an active call.
        /// </summary>
        /// <exception cref="FactSet.SDK.DocumentsDistributorCallStreetEvents.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="audioSourceId">Unique ID for an Internal recording specific to reportID. For example, ReportID X would have multiple recordings from different source (dial-in or webcast). One ReportID can have multiple AudioSource ids.</param>
        /// <param name="reportId">Unique identifier for an event (optional)</param>
        /// <param name="paginationLimit">Specifies the  number of results to return per page. [ Min&#x3D;0; Max&#x3D;50 ] (optional)</param>
        /// <param name="paginationOffset">Specifies the starting point for pagination. This parameter is used to identify the beginning of next set of results (optional)</param>
        /// <returns>ApiResponse of IndexedNRT</returns>
        public ApiResponse<IndexedNRT> GetBulkDocumentsNrtV1IndexedNrtWithHttpInfo(int audioSourceId, int? reportId = default(int?), int? paginationLimit = default(int?), int? paginationOffset = default(int?))
        {
            FactSet.SDK.DocumentsDistributorCallStreetEvents.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.DocumentsDistributorCallStreetEvents.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.DocumentsDistributorCallStreetEvents.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.DocumentsDistributorCallStreetEvents.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (reportId != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.DocumentsDistributorCallStreetEvents.Client.ClientUtils.ParameterToMultiMap("", "reportId", reportId));
            }
            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.DocumentsDistributorCallStreetEvents.Client.ClientUtils.ParameterToMultiMap("", "audioSourceId", audioSourceId));
            if (paginationLimit != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.DocumentsDistributorCallStreetEvents.Client.ClientUtils.ParameterToMultiMap("", "_paginationLimit", paginationLimit));
            }
            if (paginationOffset != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.DocumentsDistributorCallStreetEvents.Client.ClientUtils.ParameterToMultiMap("", "_paginationOffset", paginationOffset));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.DocumentsDistributorCallStreetEvents.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = GetBulkDocumentsNrtV1IndexedNrtResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Get<
            IndexedNRT>("/bulk-documents/nrt/v1/indexed-nrt", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetBulkDocumentsNrtV1IndexedNrt", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// Returns the  indexed transcript data  in small increments throughout the duration of an active call. Returns the  indexed transcript data  in small increments throughout the duration of an active call.
        /// </summary>
        /// <exception cref="FactSet.SDK.DocumentsDistributorCallStreetEvents.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="audioSourceId">Unique ID for an Internal recording specific to reportID. For example, ReportID X would have multiple recordings from different source (dial-in or webcast). One ReportID can have multiple AudioSource ids.</param>
        /// <param name="reportId">Unique identifier for an event (optional)</param>
        /// <param name="paginationLimit">Specifies the  number of results to return per page. [ Min&#x3D;0; Max&#x3D;50 ] (optional)</param>
        /// <param name="paginationOffset">Specifies the starting point for pagination. This parameter is used to identify the beginning of next set of results (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of IndexedNRT</returns>
        public async System.Threading.Tasks.Task<IndexedNRT>GetBulkDocumentsNrtV1IndexedNrtAsync(int audioSourceId, int? reportId = default(int?), int? paginationLimit = default(int?), int? paginationOffset = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await GetBulkDocumentsNrtV1IndexedNrtWithHttpInfoAsync(audioSourceId, reportId, paginationLimit, paginationOffset, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns the  indexed transcript data  in small increments throughout the duration of an active call. Returns the  indexed transcript data  in small increments throughout the duration of an active call.
        /// </summary>
        /// <exception cref="FactSet.SDK.DocumentsDistributorCallStreetEvents.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="audioSourceId">Unique ID for an Internal recording specific to reportID. For example, ReportID X would have multiple recordings from different source (dial-in or webcast). One ReportID can have multiple AudioSource ids.</param>
        /// <param name="reportId">Unique identifier for an event (optional)</param>
        /// <param name="paginationLimit">Specifies the  number of results to return per page. [ Min&#x3D;0; Max&#x3D;50 ] (optional)</param>
        /// <param name="paginationOffset">Specifies the starting point for pagination. This parameter is used to identify the beginning of next set of results (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (IndexedNRT)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<IndexedNRT>> GetBulkDocumentsNrtV1IndexedNrtWithHttpInfoAsync(int audioSourceId, int? reportId = default(int?), int? paginationLimit = default(int?), int? paginationOffset = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            FactSet.SDK.DocumentsDistributorCallStreetEvents.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.DocumentsDistributorCallStreetEvents.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.DocumentsDistributorCallStreetEvents.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.DocumentsDistributorCallStreetEvents.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (reportId != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.DocumentsDistributorCallStreetEvents.Client.ClientUtils.ParameterToMultiMap("", "reportId", reportId));
            }
            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.DocumentsDistributorCallStreetEvents.Client.ClientUtils.ParameterToMultiMap("", "audioSourceId", audioSourceId));
            if (paginationLimit != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.DocumentsDistributorCallStreetEvents.Client.ClientUtils.ParameterToMultiMap("", "_paginationLimit", paginationLimit));
            }
            if (paginationOffset != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.DocumentsDistributorCallStreetEvents.Client.ClientUtils.ParameterToMultiMap("", "_paginationOffset", paginationOffset));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.DocumentsDistributorCallStreetEvents.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = GetBulkDocumentsNrtV1IndexedNrtResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<IndexedNRT>("/bulk-documents/nrt/v1/indexed-nrt", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetBulkDocumentsNrtV1IndexedNrt", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Returns the latest transcript snippets from an active call Returns the latest snippets from an active call
        /// </summary>
        /// <exception cref="FactSet.SDK.DocumentsDistributorCallStreetEvents.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="audioSourceId">Unique ID for an Internal recording specific to reportID. For example, ReportID X would have multiple recordings from different source (dial-in or webcast). One ReportID can have multiple AudioSource ids.</param>
        /// <param name="reportId">Unique identifier for an event (optional)</param>
        /// <param name="paginationLimit">Specifies the  number of results to return per page. [ Min&#x3D;0; Max&#x3D;500 ] (optional)</param>
        /// <param name="paginationOffset">Specifies the starting point for pagination. This parameter is used to identify the beginning of next set of results (optional)</param>
        /// <returns>NRTSnippets</returns>
        public NRTSnippets GetBulkDocumentsNrtV1ListSnippets(int audioSourceId, int? reportId = default(int?), int? paginationLimit = default(int?), int? paginationOffset = default(int?))
        {
            var localVarResponse = GetBulkDocumentsNrtV1ListSnippetsWithHttpInfo(audioSourceId, reportId, paginationLimit, paginationOffset);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns the latest transcript snippets from an active call Returns the latest snippets from an active call
        /// </summary>
        /// <exception cref="FactSet.SDK.DocumentsDistributorCallStreetEvents.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="audioSourceId">Unique ID for an Internal recording specific to reportID. For example, ReportID X would have multiple recordings from different source (dial-in or webcast). One ReportID can have multiple AudioSource ids.</param>
        /// <param name="reportId">Unique identifier for an event (optional)</param>
        /// <param name="paginationLimit">Specifies the  number of results to return per page. [ Min&#x3D;0; Max&#x3D;500 ] (optional)</param>
        /// <param name="paginationOffset">Specifies the starting point for pagination. This parameter is used to identify the beginning of next set of results (optional)</param>
        /// <returns>ApiResponse of NRTSnippets</returns>
        public ApiResponse<NRTSnippets> GetBulkDocumentsNrtV1ListSnippetsWithHttpInfo(int audioSourceId, int? reportId = default(int?), int? paginationLimit = default(int?), int? paginationOffset = default(int?))
        {
            FactSet.SDK.DocumentsDistributorCallStreetEvents.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.DocumentsDistributorCallStreetEvents.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.DocumentsDistributorCallStreetEvents.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.DocumentsDistributorCallStreetEvents.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (reportId != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.DocumentsDistributorCallStreetEvents.Client.ClientUtils.ParameterToMultiMap("", "reportId", reportId));
            }
            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.DocumentsDistributorCallStreetEvents.Client.ClientUtils.ParameterToMultiMap("", "audioSourceId", audioSourceId));
            if (paginationLimit != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.DocumentsDistributorCallStreetEvents.Client.ClientUtils.ParameterToMultiMap("", "_paginationLimit", paginationLimit));
            }
            if (paginationOffset != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.DocumentsDistributorCallStreetEvents.Client.ClientUtils.ParameterToMultiMap("", "_paginationOffset", paginationOffset));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.DocumentsDistributorCallStreetEvents.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = GetBulkDocumentsNrtV1ListSnippetsResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Get<
            NRTSnippets>("/bulk-documents/nrt/v1/list-snippets", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetBulkDocumentsNrtV1ListSnippets", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// Returns the latest transcript snippets from an active call Returns the latest snippets from an active call
        /// </summary>
        /// <exception cref="FactSet.SDK.DocumentsDistributorCallStreetEvents.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="audioSourceId">Unique ID for an Internal recording specific to reportID. For example, ReportID X would have multiple recordings from different source (dial-in or webcast). One ReportID can have multiple AudioSource ids.</param>
        /// <param name="reportId">Unique identifier for an event (optional)</param>
        /// <param name="paginationLimit">Specifies the  number of results to return per page. [ Min&#x3D;0; Max&#x3D;500 ] (optional)</param>
        /// <param name="paginationOffset">Specifies the starting point for pagination. This parameter is used to identify the beginning of next set of results (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of NRTSnippets</returns>
        public async System.Threading.Tasks.Task<NRTSnippets>GetBulkDocumentsNrtV1ListSnippetsAsync(int audioSourceId, int? reportId = default(int?), int? paginationLimit = default(int?), int? paginationOffset = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await GetBulkDocumentsNrtV1ListSnippetsWithHttpInfoAsync(audioSourceId, reportId, paginationLimit, paginationOffset, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns the latest transcript snippets from an active call Returns the latest snippets from an active call
        /// </summary>
        /// <exception cref="FactSet.SDK.DocumentsDistributorCallStreetEvents.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="audioSourceId">Unique ID for an Internal recording specific to reportID. For example, ReportID X would have multiple recordings from different source (dial-in or webcast). One ReportID can have multiple AudioSource ids.</param>
        /// <param name="reportId">Unique identifier for an event (optional)</param>
        /// <param name="paginationLimit">Specifies the  number of results to return per page. [ Min&#x3D;0; Max&#x3D;500 ] (optional)</param>
        /// <param name="paginationOffset">Specifies the starting point for pagination. This parameter is used to identify the beginning of next set of results (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (NRTSnippets)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<NRTSnippets>> GetBulkDocumentsNrtV1ListSnippetsWithHttpInfoAsync(int audioSourceId, int? reportId = default(int?), int? paginationLimit = default(int?), int? paginationOffset = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            FactSet.SDK.DocumentsDistributorCallStreetEvents.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.DocumentsDistributorCallStreetEvents.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.DocumentsDistributorCallStreetEvents.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.DocumentsDistributorCallStreetEvents.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (reportId != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.DocumentsDistributorCallStreetEvents.Client.ClientUtils.ParameterToMultiMap("", "reportId", reportId));
            }
            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.DocumentsDistributorCallStreetEvents.Client.ClientUtils.ParameterToMultiMap("", "audioSourceId", audioSourceId));
            if (paginationLimit != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.DocumentsDistributorCallStreetEvents.Client.ClientUtils.ParameterToMultiMap("", "_paginationLimit", paginationLimit));
            }
            if (paginationOffset != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.DocumentsDistributorCallStreetEvents.Client.ClientUtils.ParameterToMultiMap("", "_paginationOffset", paginationOffset));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.DocumentsDistributorCallStreetEvents.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = GetBulkDocumentsNrtV1ListSnippetsResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<NRTSnippets>("/bulk-documents/nrt/v1/list-snippets", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetBulkDocumentsNrtV1ListSnippets", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Returns the latest speakerIds with the confidence scores generated for an active call. Returns the latest speakerIds with the cosine scores(confidence scores) generated for an active call.
        /// </summary>
        /// <exception cref="FactSet.SDK.DocumentsDistributorCallStreetEvents.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="audioSourceId">The Unique ID for an Internal recording specific to reportID. For example, ReportID X would have multiple recordings from a different source (dial-in or webcast). One ReportID can have multiple audioSource ids. </param>
        /// <param name="sort">Enables to get the data in chronological or reverse chronological order. Results are in chronological order if this parameter is not used (optional, default to startDate)</param>
        /// <param name="paginationLimit">Specifies the number of results to return per page.[ Min&#x3D;0 ; Max&#x3D;500 ] (optional)</param>
        /// <param name="paginationOffset">Specifies the starting point for pagination. This parameter is used to identify the beginning of next set of results (optional)</param>
        /// <returns>NRTSpeakerids</returns>
        public NRTSpeakerids GetBulkDocumentsNrtV1Speakerids(int audioSourceId, string sort = default(string), int? paginationLimit = default(int?), int? paginationOffset = default(int?))
        {
            var localVarResponse = GetBulkDocumentsNrtV1SpeakeridsWithHttpInfo(audioSourceId, sort, paginationLimit, paginationOffset);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns the latest speakerIds with the confidence scores generated for an active call. Returns the latest speakerIds with the cosine scores(confidence scores) generated for an active call.
        /// </summary>
        /// <exception cref="FactSet.SDK.DocumentsDistributorCallStreetEvents.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="audioSourceId">The Unique ID for an Internal recording specific to reportID. For example, ReportID X would have multiple recordings from a different source (dial-in or webcast). One ReportID can have multiple audioSource ids. </param>
        /// <param name="sort">Enables to get the data in chronological or reverse chronological order. Results are in chronological order if this parameter is not used (optional, default to startDate)</param>
        /// <param name="paginationLimit">Specifies the number of results to return per page.[ Min&#x3D;0 ; Max&#x3D;500 ] (optional)</param>
        /// <param name="paginationOffset">Specifies the starting point for pagination. This parameter is used to identify the beginning of next set of results (optional)</param>
        /// <returns>ApiResponse of NRTSpeakerids</returns>
        public ApiResponse<NRTSpeakerids> GetBulkDocumentsNrtV1SpeakeridsWithHttpInfo(int audioSourceId, string sort = default(string), int? paginationLimit = default(int?), int? paginationOffset = default(int?))
        {
            FactSet.SDK.DocumentsDistributorCallStreetEvents.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.DocumentsDistributorCallStreetEvents.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.DocumentsDistributorCallStreetEvents.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.DocumentsDistributorCallStreetEvents.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.DocumentsDistributorCallStreetEvents.Client.ClientUtils.ParameterToMultiMap("", "_sort", sort));
            }
            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.DocumentsDistributorCallStreetEvents.Client.ClientUtils.ParameterToMultiMap("", "audioSourceId", audioSourceId));
            if (paginationLimit != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.DocumentsDistributorCallStreetEvents.Client.ClientUtils.ParameterToMultiMap("", "_paginationLimit", paginationLimit));
            }
            if (paginationOffset != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.DocumentsDistributorCallStreetEvents.Client.ClientUtils.ParameterToMultiMap("", "_paginationOffset", paginationOffset));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.DocumentsDistributorCallStreetEvents.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = GetBulkDocumentsNrtV1SpeakeridsResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Get<
            NRTSpeakerids>("/bulk-documents/nrt/v1/speakerids", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetBulkDocumentsNrtV1Speakerids", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// Returns the latest speakerIds with the confidence scores generated for an active call. Returns the latest speakerIds with the cosine scores(confidence scores) generated for an active call.
        /// </summary>
        /// <exception cref="FactSet.SDK.DocumentsDistributorCallStreetEvents.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="audioSourceId">The Unique ID for an Internal recording specific to reportID. For example, ReportID X would have multiple recordings from a different source (dial-in or webcast). One ReportID can have multiple audioSource ids. </param>
        /// <param name="sort">Enables to get the data in chronological or reverse chronological order. Results are in chronological order if this parameter is not used (optional, default to startDate)</param>
        /// <param name="paginationLimit">Specifies the number of results to return per page.[ Min&#x3D;0 ; Max&#x3D;500 ] (optional)</param>
        /// <param name="paginationOffset">Specifies the starting point for pagination. This parameter is used to identify the beginning of next set of results (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of NRTSpeakerids</returns>
        public async System.Threading.Tasks.Task<NRTSpeakerids>GetBulkDocumentsNrtV1SpeakeridsAsync(int audioSourceId, string sort = default(string), int? paginationLimit = default(int?), int? paginationOffset = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await GetBulkDocumentsNrtV1SpeakeridsWithHttpInfoAsync(audioSourceId, sort, paginationLimit, paginationOffset, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns the latest speakerIds with the confidence scores generated for an active call. Returns the latest speakerIds with the cosine scores(confidence scores) generated for an active call.
        /// </summary>
        /// <exception cref="FactSet.SDK.DocumentsDistributorCallStreetEvents.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="audioSourceId">The Unique ID for an Internal recording specific to reportID. For example, ReportID X would have multiple recordings from a different source (dial-in or webcast). One ReportID can have multiple audioSource ids. </param>
        /// <param name="sort">Enables to get the data in chronological or reverse chronological order. Results are in chronological order if this parameter is not used (optional, default to startDate)</param>
        /// <param name="paginationLimit">Specifies the number of results to return per page.[ Min&#x3D;0 ; Max&#x3D;500 ] (optional)</param>
        /// <param name="paginationOffset">Specifies the starting point for pagination. This parameter is used to identify the beginning of next set of results (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (NRTSpeakerids)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<NRTSpeakerids>> GetBulkDocumentsNrtV1SpeakeridsWithHttpInfoAsync(int audioSourceId, string sort = default(string), int? paginationLimit = default(int?), int? paginationOffset = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            FactSet.SDK.DocumentsDistributorCallStreetEvents.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.DocumentsDistributorCallStreetEvents.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.DocumentsDistributorCallStreetEvents.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.DocumentsDistributorCallStreetEvents.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.DocumentsDistributorCallStreetEvents.Client.ClientUtils.ParameterToMultiMap("", "_sort", sort));
            }
            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.DocumentsDistributorCallStreetEvents.Client.ClientUtils.ParameterToMultiMap("", "audioSourceId", audioSourceId));
            if (paginationLimit != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.DocumentsDistributorCallStreetEvents.Client.ClientUtils.ParameterToMultiMap("", "_paginationLimit", paginationLimit));
            }
            if (paginationOffset != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.DocumentsDistributorCallStreetEvents.Client.ClientUtils.ParameterToMultiMap("", "_paginationOffset", paginationOffset));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.DocumentsDistributorCallStreetEvents.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = GetBulkDocumentsNrtV1SpeakeridsResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<NRTSpeakerids>("/bulk-documents/nrt/v1/speakerids", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetBulkDocumentsNrtV1Speakerids", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
