/*
 * Virtual Portfolio API For Digital Portals
 *
 * The virtual portfolio enables the analysis of the current allocation, broken down by asset classes, currencies,  regions, sectors, style, capitalization, style, maturity, risk, and more.  Relative performance and monthly returns can be measured against benchmarks, using portfolio position transaction (buy/sell) data. Both the realized profit/loss (resulting from closed transactions) and the potential profit/loss (resulting from positions that have not been sold yet) can be queried.  Portfolio endpoints allow creation and managing a transaction-based portfolio. A transaction-based portfolio contains a gapless history of all transactions to be able to accurately reproduce the investment record of the portfolio.  An instrument added to a portfolio is called a position. Each position consists of multiple buy and sell events called transactions. Portfolios are limited to 100 positions and 1000 transactions; adding more will result in an error.  A transaction-based portfolio can consist of the following transactions:  * A buy transaction opens or adds to a position in the portfolio, decreasing the cash value by the purchase price at the same time. If there is not enough cash in the portfolio to cover the transaction, the cash value becomes negative. * A sell transaction decreases or closes a position in the portfolio, increasing the cash value by the sale price at the same time. A sell transaction can only be created if the number of shares of a given position exceeds the number being sold. * A cash transaction increases or decreases the cash position of the portfolio. A portfolio can have only one cash position. The cash position is tracked automatically as each buy or sell transaction implicitly affects it. The cash position can be negative as a buy transaction does not check whether enough cash is available. The cash position does not generate interest; its performance is always 0%.  The chosen prices and key figures in the endpoints are using the same quality, which is configurable per application. Possible values are delayed (DLY), best (BST), end-of-day (EOD) or realtime (RLT). The default value for the price quality is BST.  The portfolio endpoints use different methods to calculate key figures. All key figures except the risk in /portfolio/detail/list, /portfolio/get, and /portfolio/position/list are calculated on-the-fly with current prices. The risk key figures are calculated on-the-fly with current prices, but the result is cached for 24 hours. The key figures in /portfolio/evaluation/list are calculated on end-of-day basis.  The Virtual Portfolio API for Digital Portals is fully integrated with the corresponding Quotes API, allowing access to detailed price and performance information of instruments in a watchlist. This also supports basic security identifier cross-reference. To complement the Watchlist API and Virtual Portfolio API with direct access to price histories, please refer to the Time Series API for Digital Portals.
 *
 * The version of the OpenAPI document: 2
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client;
using FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Model;
using FactSet.SDK.Utils.Authentication;

namespace FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IPortfolioApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Details of a portfolio.
        /// </summary>
        /// <remarks>
        /// Details of a portfolio.
        /// </remarks>
        /// <exception cref="FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <returns>InlineResponse2001</returns>
        InlineResponse2001 GetPortfolioGet(string id, List<string> attributes = default(List<string>));

        /// <summary>
        /// Details of a portfolio.
        /// </summary>
        /// <remarks>
        /// Details of a portfolio.
        /// </remarks>
        /// <exception cref="FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <returns>ApiResponse of InlineResponse2001</returns>
        ApiResponse<InlineResponse2001> GetPortfolioGetWithHttpInfo(string id, List<string> attributes = default(List<string>));
        /// <summary>
        /// List of portfolios with keyfigures.
        /// </summary>
        /// <remarks>
        /// List of portfolios with keyfigures.
        /// </remarks>
        /// <exception cref="FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="sort">Sortable attributes. The sort order is ascending unless it is prefixed with a minus sign, in which case it is descending. A list of at most 2 (possibly prefixed) attribute name(s) is allowed. (optional)</param>
        /// <returns>InlineResponse2002</returns>
        InlineResponse2002 GetPortfolioList(List<string> attributes = default(List<string>), List<string> sort = default(List<string>));

        /// <summary>
        /// List of portfolios with keyfigures.
        /// </summary>
        /// <remarks>
        /// List of portfolios with keyfigures.
        /// </remarks>
        /// <exception cref="FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="sort">Sortable attributes. The sort order is ascending unless it is prefixed with a minus sign, in which case it is descending. A list of at most 2 (possibly prefixed) attribute name(s) is allowed. (optional)</param>
        /// <returns>ApiResponse of InlineResponse2002</returns>
        ApiResponse<InlineResponse2002> GetPortfolioListWithHttpInfo(List<string> attributes = default(List<string>), List<string> sort = default(List<string>));
        /// <summary>
        /// List of portfolios.
        /// </summary>
        /// <remarks>
        /// List of portfolios.
        /// </remarks>
        /// <exception cref="FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="sort">Sortable attributes. The sort order is ascending unless it is prefixed with a minus sign, in which case it is descending. A list of at most 2 (possibly prefixed) attribute name(s) is allowed. (optional)</param>
        /// <returns>InlineResponse2005</returns>
        InlineResponse2005 GetPortfolioNameList(List<string> attributes = default(List<string>), List<string> sort = default(List<string>));

        /// <summary>
        /// List of portfolios.
        /// </summary>
        /// <remarks>
        /// List of portfolios.
        /// </remarks>
        /// <exception cref="FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="sort">Sortable attributes. The sort order is ascending unless it is prefixed with a minus sign, in which case it is descending. A list of at most 2 (possibly prefixed) attribute name(s) is allowed. (optional)</param>
        /// <returns>ApiResponse of InlineResponse2005</returns>
        ApiResponse<InlineResponse2005> GetPortfolioNameListWithHttpInfo(List<string> attributes = default(List<string>), List<string> sort = default(List<string>));
        /// <summary>
        /// List all open positions of a portfolio.
        /// </summary>
        /// <remarks>
        /// List all open positions of a portfolio.
        /// </remarks>
        /// <exception cref="FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="language"> (optional)</param>
        /// <param name="sort">Sortable attributes. The sort order is ascending unless it is prefixed with a minus sign, in which case it is descending. A list of at most 10 (possibly prefixed) attribute name(s) is allowed. (optional)</param>
        /// <param name="paginationOffset">Non-negative number of entries to skip, or 0 (default). (optional, default to 0M)</param>
        /// <param name="paginationLimit">Non-negative maximum number of entries to return. (optional, default to 20M)</param>
        /// <returns>InlineResponse2009</returns>
        InlineResponse2009 GetPortfolioPositionList(string id, List<string> attributes = default(List<string>), string language = default(string), List<string> sort = default(List<string>), decimal? paginationOffset = default(decimal?), decimal? paginationLimit = default(decimal?));

        /// <summary>
        /// List all open positions of a portfolio.
        /// </summary>
        /// <remarks>
        /// List all open positions of a portfolio.
        /// </remarks>
        /// <exception cref="FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="language"> (optional)</param>
        /// <param name="sort">Sortable attributes. The sort order is ascending unless it is prefixed with a minus sign, in which case it is descending. A list of at most 10 (possibly prefixed) attribute name(s) is allowed. (optional)</param>
        /// <param name="paginationOffset">Non-negative number of entries to skip, or 0 (default). (optional, default to 0M)</param>
        /// <param name="paginationLimit">Non-negative maximum number of entries to return. (optional, default to 20M)</param>
        /// <returns>ApiResponse of InlineResponse2009</returns>
        ApiResponse<InlineResponse2009> GetPortfolioPositionListWithHttpInfo(string id, List<string> attributes = default(List<string>), string language = default(string), List<string> sort = default(List<string>), decimal? paginationOffset = default(decimal?), decimal? paginationLimit = default(decimal?));
        /// <summary>
        /// List of transactions in a portfolio.
        /// </summary>
        /// <remarks>
        /// List of transactions in a portfolio.
        /// </remarks>
        /// <exception cref="FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="language"> (optional)</param>
        /// <param name="sort">Sortable attributes. The sort order is ascending unless it is prefixed with a minus sign, in which case it is descending. A list of at most 7 (possibly prefixed) attribute name(s) is allowed. (optional)</param>
        /// <param name="paginationOffset">Non-negative number of entries to skip, or 0 (default). (optional, default to 0M)</param>
        /// <param name="paginationLimit">Non-negative maximum number of entries to return. (optional, default to 20M)</param>
        /// <returns>InlineResponse20011</returns>
        InlineResponse20011 GetPortfolioTransactionList(string id, List<string> attributes = default(List<string>), string language = default(string), List<string> sort = default(List<string>), decimal? paginationOffset = default(decimal?), decimal? paginationLimit = default(decimal?));

        /// <summary>
        /// List of transactions in a portfolio.
        /// </summary>
        /// <remarks>
        /// List of transactions in a portfolio.
        /// </remarks>
        /// <exception cref="FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="language"> (optional)</param>
        /// <param name="sort">Sortable attributes. The sort order is ascending unless it is prefixed with a minus sign, in which case it is descending. A list of at most 7 (possibly prefixed) attribute name(s) is allowed. (optional)</param>
        /// <param name="paginationOffset">Non-negative number of entries to skip, or 0 (default). (optional, default to 0M)</param>
        /// <param name="paginationLimit">Non-negative maximum number of entries to return. (optional, default to 20M)</param>
        /// <returns>ApiResponse of InlineResponse20011</returns>
        ApiResponse<InlineResponse20011> GetPortfolioTransactionListWithHttpInfo(string id, List<string> attributes = default(List<string>), string language = default(string), List<string> sort = default(List<string>), decimal? paginationOffset = default(decimal?), decimal? paginationLimit = default(decimal?));
        /// <summary>
        /// Create a portfolio.
        /// </summary>
        /// <remarks>
        /// Create a portfolio.  Certain error conditions yield errors as follows:   |Error Condition|HTTP Error| |- -- -- --|- -- -- -- -| |The number of portfolios would exceed 100.|400 Bad Request|
        /// </remarks>
        /// <exception cref="FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inlineObject"></param>
        /// <returns>InlineResponse201</returns>
        InlineResponse201 PostPortfolioCreate(InlineObject inlineObject);

        /// <summary>
        /// Create a portfolio.
        /// </summary>
        /// <remarks>
        /// Create a portfolio.  Certain error conditions yield errors as follows:   |Error Condition|HTTP Error| |- -- -- --|- -- -- -- -| |The number of portfolios would exceed 100.|400 Bad Request|
        /// </remarks>
        /// <exception cref="FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inlineObject"></param>
        /// <returns>ApiResponse of InlineResponse201</returns>
        ApiResponse<InlineResponse201> PostPortfolioCreateWithHttpInfo(InlineObject inlineObject);
        /// <summary>
        /// Delete a portfolio.
        /// </summary>
        /// <remarks>
        /// Delete a portfolio.
        /// </remarks>
        /// <exception cref="FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inlineObject1"> (optional)</param>
        /// <returns>InlineResponse200</returns>
        InlineResponse200 PostPortfolioDelete(InlineObject1 inlineObject1 = default(InlineObject1));

        /// <summary>
        /// Delete a portfolio.
        /// </summary>
        /// <remarks>
        /// Delete a portfolio.
        /// </remarks>
        /// <exception cref="FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inlineObject1"> (optional)</param>
        /// <returns>ApiResponse of InlineResponse200</returns>
        ApiResponse<InlineResponse200> PostPortfolioDeleteWithHttpInfo(InlineObject1 inlineObject1 = default(InlineObject1));
        /// <summary>
        /// Evaluate a portfolio.
        /// </summary>
        /// <remarks>
        /// Performs an evaluation over a period of time and returns portfolio key figures for each day, week, or month.
        /// </remarks>
        /// <exception cref="FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inlineObject3"> (optional)</param>
        /// <returns>InlineResponse2004</returns>
        InlineResponse2004 PostPortfolioEvaluationList(InlineObject3 inlineObject3 = default(InlineObject3));

        /// <summary>
        /// Evaluate a portfolio.
        /// </summary>
        /// <remarks>
        /// Performs an evaluation over a period of time and returns portfolio key figures for each day, week, or month.
        /// </remarks>
        /// <exception cref="FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inlineObject3"> (optional)</param>
        /// <returns>ApiResponse of InlineResponse2004</returns>
        ApiResponse<InlineResponse2004> PostPortfolioEvaluationListWithHttpInfo(InlineObject3 inlineObject3 = default(InlineObject3));
        /// <summary>
        /// Modify a portfolio.
        /// </summary>
        /// <remarks>
        /// Modify a portfolio.
        /// </remarks>
        /// <exception cref="FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inlineObject2"> (optional)</param>
        /// <returns>InlineResponse2003</returns>
        InlineResponse2003 PostPortfolioModify(InlineObject2 inlineObject2 = default(InlineObject2));

        /// <summary>
        /// Modify a portfolio.
        /// </summary>
        /// <remarks>
        /// Modify a portfolio.
        /// </remarks>
        /// <exception cref="FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inlineObject2"> (optional)</param>
        /// <returns>ApiResponse of InlineResponse2003</returns>
        ApiResponse<InlineResponse2003> PostPortfolioModifyWithHttpInfo(InlineObject2 inlineObject2 = default(InlineObject2));
        /// <summary>
        /// Add a payout to a portfolio.
        /// </summary>
        /// <remarks>
        /// Add a payout to a portfolio.
        /// </remarks>
        /// <exception cref="FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inlineObject4"> (optional)</param>
        /// <returns>InlineResponse2011</returns>
        InlineResponse2011 PostPortfolioPayoutCreate(InlineObject4 inlineObject4 = default(InlineObject4));

        /// <summary>
        /// Add a payout to a portfolio.
        /// </summary>
        /// <remarks>
        /// Add a payout to a portfolio.
        /// </remarks>
        /// <exception cref="FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inlineObject4"> (optional)</param>
        /// <returns>ApiResponse of InlineResponse2011</returns>
        ApiResponse<InlineResponse2011> PostPortfolioPayoutCreateWithHttpInfo(InlineObject4 inlineObject4 = default(InlineObject4));
        /// <summary>
        /// Delete a payout of a portfolio.
        /// </summary>
        /// <remarks>
        /// Delete a payout of a portfolio.  Certain error conditions yield errors as follows:   |Error Condition|HTTP Error| |- -- -- --|- -- -- -- -| |Invalid payout identifier.|400 Bad Request|
        /// </remarks>
        /// <exception cref="FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inlineObject5"> (optional)</param>
        /// <returns>InlineResponse2006</returns>
        InlineResponse2006 PostPortfolioPayoutDelete(InlineObject5 inlineObject5 = default(InlineObject5));

        /// <summary>
        /// Delete a payout of a portfolio.
        /// </summary>
        /// <remarks>
        /// Delete a payout of a portfolio.  Certain error conditions yield errors as follows:   |Error Condition|HTTP Error| |- -- -- --|- -- -- -- -| |Invalid payout identifier.|400 Bad Request|
        /// </remarks>
        /// <exception cref="FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inlineObject5"> (optional)</param>
        /// <returns>ApiResponse of InlineResponse2006</returns>
        ApiResponse<InlineResponse2006> PostPortfolioPayoutDeleteWithHttpInfo(InlineObject5 inlineObject5 = default(InlineObject5));
        /// <summary>
        /// List of payouts in a portfolio.
        /// </summary>
        /// <remarks>
        /// List of payouts in a portfolio.
        /// </remarks>
        /// <exception cref="FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inlineObject6"></param>
        /// <returns>InlineResponse2007</returns>
        InlineResponse2007 PostPortfolioPayoutList(InlineObject6 inlineObject6);

        /// <summary>
        /// List of payouts in a portfolio.
        /// </summary>
        /// <remarks>
        /// List of payouts in a portfolio.
        /// </remarks>
        /// <exception cref="FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inlineObject6"></param>
        /// <returns>ApiResponse of InlineResponse2007</returns>
        ApiResponse<InlineResponse2007> PostPortfolioPayoutListWithHttpInfo(InlineObject6 inlineObject6);
        /// <summary>
        /// Modify a payout in a portfolio.
        /// </summary>
        /// <remarks>
        /// Modify a payout in a portfolio.  Certain error conditions yield errors as follows:   |Error Condition|HTTP Error| |- -- -- --|- -- -- -- -| |At least one of the parameters &#x60;notation&#x60;, &#x60;type&#x60;, &#x60;amount&#x60;, &#x60;transaction&#x60; or &#x60;time&#x60; must be set.|400 Bad Request| |Invalid payout identifier.|400 Bad Request|
        /// </remarks>
        /// <exception cref="FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inlineObject7"> (optional)</param>
        /// <returns>InlineResponse2008</returns>
        InlineResponse2008 PostPortfolioPayoutModify(InlineObject7 inlineObject7 = default(InlineObject7));

        /// <summary>
        /// Modify a payout in a portfolio.
        /// </summary>
        /// <remarks>
        /// Modify a payout in a portfolio.  Certain error conditions yield errors as follows:   |Error Condition|HTTP Error| |- -- -- --|- -- -- -- -| |At least one of the parameters &#x60;notation&#x60;, &#x60;type&#x60;, &#x60;amount&#x60;, &#x60;transaction&#x60; or &#x60;time&#x60; must be set.|400 Bad Request| |Invalid payout identifier.|400 Bad Request|
        /// </remarks>
        /// <exception cref="FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inlineObject7"> (optional)</param>
        /// <returns>ApiResponse of InlineResponse2008</returns>
        ApiResponse<InlineResponse2008> PostPortfolioPayoutModifyWithHttpInfo(InlineObject7 inlineObject7 = default(InlineObject7));
        /// <summary>
        /// List all closed positions of a portfolio.
        /// </summary>
        /// <remarks>
        /// List all closed positions of a portfolio.
        /// </remarks>
        /// <exception cref="FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inlineObject8"> (optional)</param>
        /// <returns>InlineResponse20010</returns>
        InlineResponse20010 PostPortfolioPositionClosedList(InlineObject8 inlineObject8 = default(InlineObject8));

        /// <summary>
        /// List all closed positions of a portfolio.
        /// </summary>
        /// <remarks>
        /// List all closed positions of a portfolio.
        /// </remarks>
        /// <exception cref="FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inlineObject8"> (optional)</param>
        /// <returns>ApiResponse of InlineResponse20010</returns>
        ApiResponse<InlineResponse20010> PostPortfolioPositionClosedListWithHttpInfo(InlineObject8 inlineObject8 = default(InlineObject8));
        /// <summary>
        /// Add a cash transaction to a portfolio.
        /// </summary>
        /// <remarks>
        /// Add a cash transaction to a portfolio.  Certain error conditions yield errors as follows:   |Error Condition|HTTP Error| |- -- -- --|- -- -- -- -| |The number of transactions would exceed 1000.|400 Bad Request|
        /// </remarks>
        /// <exception cref="FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inlineObject12"> (optional)</param>
        /// <returns>InlineResponse2012</returns>
        InlineResponse2012 PostPortfolioTransactionCashCreate(InlineObject12 inlineObject12 = default(InlineObject12));

        /// <summary>
        /// Add a cash transaction to a portfolio.
        /// </summary>
        /// <remarks>
        /// Add a cash transaction to a portfolio.  Certain error conditions yield errors as follows:   |Error Condition|HTTP Error| |- -- -- --|- -- -- -- -| |The number of transactions would exceed 1000.|400 Bad Request|
        /// </remarks>
        /// <exception cref="FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inlineObject12"> (optional)</param>
        /// <returns>ApiResponse of InlineResponse2012</returns>
        ApiResponse<InlineResponse2012> PostPortfolioTransactionCashCreateWithHttpInfo(InlineObject12 inlineObject12 = default(InlineObject12));
        /// <summary>
        /// Delete a cash transaction.
        /// </summary>
        /// <remarks>
        /// Delete a cash transaction.
        /// </remarks>
        /// <exception cref="FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inlineObject13"> (optional)</param>
        /// <returns>InlineResponse2006</returns>
        InlineResponse2006 PostPortfolioTransactionCashDelete(InlineObject13 inlineObject13 = default(InlineObject13));

        /// <summary>
        /// Delete a cash transaction.
        /// </summary>
        /// <remarks>
        /// Delete a cash transaction.
        /// </remarks>
        /// <exception cref="FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inlineObject13"> (optional)</param>
        /// <returns>ApiResponse of InlineResponse2006</returns>
        ApiResponse<InlineResponse2006> PostPortfolioTransactionCashDeleteWithHttpInfo(InlineObject13 inlineObject13 = default(InlineObject13));
        /// <summary>
        /// Add a transaction to a portfolio.
        /// </summary>
        /// <remarks>
        /// Add a transaction to a portfolio.  Certain error conditions yield errors as follows:   |Error Condition|HTTP Error| |- -- -- --|- -- -- -- -| |The number of transactions would exceed 1000.|400 Bad Request|
        /// </remarks>
        /// <exception cref="FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inlineObject9"> (optional)</param>
        /// <returns>InlineResponse2012</returns>
        InlineResponse2012 PostPortfolioTransactionCreate(InlineObject9 inlineObject9 = default(InlineObject9));

        /// <summary>
        /// Add a transaction to a portfolio.
        /// </summary>
        /// <remarks>
        /// Add a transaction to a portfolio.  Certain error conditions yield errors as follows:   |Error Condition|HTTP Error| |- -- -- --|- -- -- -- -| |The number of transactions would exceed 1000.|400 Bad Request|
        /// </remarks>
        /// <exception cref="FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inlineObject9"> (optional)</param>
        /// <returns>ApiResponse of InlineResponse2012</returns>
        ApiResponse<InlineResponse2012> PostPortfolioTransactionCreateWithHttpInfo(InlineObject9 inlineObject9 = default(InlineObject9));
        /// <summary>
        /// Delete a transaction of a portfolio.
        /// </summary>
        /// <remarks>
        /// Delete a transaction of a portfolio.
        /// </remarks>
        /// <exception cref="FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inlineObject10"> (optional)</param>
        /// <returns>InlineResponse2006</returns>
        InlineResponse2006 PostPortfolioTransactionDelete(InlineObject10 inlineObject10 = default(InlineObject10));

        /// <summary>
        /// Delete a transaction of a portfolio.
        /// </summary>
        /// <remarks>
        /// Delete a transaction of a portfolio.
        /// </remarks>
        /// <exception cref="FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inlineObject10"> (optional)</param>
        /// <returns>ApiResponse of InlineResponse2006</returns>
        ApiResponse<InlineResponse2006> PostPortfolioTransactionDeleteWithHttpInfo(InlineObject10 inlineObject10 = default(InlineObject10));
        /// <summary>
        /// Modify a transaction in a portfolio.
        /// </summary>
        /// <remarks>
        /// Modify a transaction in a portfolio.  Certain error conditions yield errors as follows:   |Error Condition|HTTP Error| |- -- -- --|- -- -- -- -| |At least one of the parameters &#x60;numberShares&#x60;, &#x60;price&#x60;, &#x60;charges&#x60;, &#x60;exchangeRate&#x60; or &#x60;time&#x60; must be set.|400 Bad Request|
        /// </remarks>
        /// <exception cref="FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inlineObject11"> (optional)</param>
        /// <returns>InlineResponse2008</returns>
        InlineResponse2008 PostPortfolioTransactionModify(InlineObject11 inlineObject11 = default(InlineObject11));

        /// <summary>
        /// Modify a transaction in a portfolio.
        /// </summary>
        /// <remarks>
        /// Modify a transaction in a portfolio.  Certain error conditions yield errors as follows:   |Error Condition|HTTP Error| |- -- -- --|- -- -- -- -| |At least one of the parameters &#x60;numberShares&#x60;, &#x60;price&#x60;, &#x60;charges&#x60;, &#x60;exchangeRate&#x60; or &#x60;time&#x60; must be set.|400 Bad Request|
        /// </remarks>
        /// <exception cref="FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inlineObject11"> (optional)</param>
        /// <returns>ApiResponse of InlineResponse2008</returns>
        ApiResponse<InlineResponse2008> PostPortfolioTransactionModifyWithHttpInfo(InlineObject11 inlineObject11 = default(InlineObject11));
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IPortfolioApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Details of a portfolio.
        /// </summary>
        /// <remarks>
        /// Details of a portfolio.
        /// </remarks>
        /// <exception cref="FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse2001</returns>
        System.Threading.Tasks.Task<InlineResponse2001> GetPortfolioGetAsync(string id, List<string> attributes = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Details of a portfolio.
        /// </summary>
        /// <remarks>
        /// Details of a portfolio.
        /// </remarks>
        /// <exception cref="FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse2001)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse2001>> GetPortfolioGetWithHttpInfoAsync(string id, List<string> attributes = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// List of portfolios with keyfigures.
        /// </summary>
        /// <remarks>
        /// List of portfolios with keyfigures.
        /// </remarks>
        /// <exception cref="FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="sort">Sortable attributes. The sort order is ascending unless it is prefixed with a minus sign, in which case it is descending. A list of at most 2 (possibly prefixed) attribute name(s) is allowed. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse2002</returns>
        System.Threading.Tasks.Task<InlineResponse2002> GetPortfolioListAsync(List<string> attributes = default(List<string>), List<string> sort = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// List of portfolios with keyfigures.
        /// </summary>
        /// <remarks>
        /// List of portfolios with keyfigures.
        /// </remarks>
        /// <exception cref="FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="sort">Sortable attributes. The sort order is ascending unless it is prefixed with a minus sign, in which case it is descending. A list of at most 2 (possibly prefixed) attribute name(s) is allowed. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse2002)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse2002>> GetPortfolioListWithHttpInfoAsync(List<string> attributes = default(List<string>), List<string> sort = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// List of portfolios.
        /// </summary>
        /// <remarks>
        /// List of portfolios.
        /// </remarks>
        /// <exception cref="FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="sort">Sortable attributes. The sort order is ascending unless it is prefixed with a minus sign, in which case it is descending. A list of at most 2 (possibly prefixed) attribute name(s) is allowed. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse2005</returns>
        System.Threading.Tasks.Task<InlineResponse2005> GetPortfolioNameListAsync(List<string> attributes = default(List<string>), List<string> sort = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// List of portfolios.
        /// </summary>
        /// <remarks>
        /// List of portfolios.
        /// </remarks>
        /// <exception cref="FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="sort">Sortable attributes. The sort order is ascending unless it is prefixed with a minus sign, in which case it is descending. A list of at most 2 (possibly prefixed) attribute name(s) is allowed. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse2005)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse2005>> GetPortfolioNameListWithHttpInfoAsync(List<string> attributes = default(List<string>), List<string> sort = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// List all open positions of a portfolio.
        /// </summary>
        /// <remarks>
        /// List all open positions of a portfolio.
        /// </remarks>
        /// <exception cref="FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="language"> (optional)</param>
        /// <param name="sort">Sortable attributes. The sort order is ascending unless it is prefixed with a minus sign, in which case it is descending. A list of at most 10 (possibly prefixed) attribute name(s) is allowed. (optional)</param>
        /// <param name="paginationOffset">Non-negative number of entries to skip, or 0 (default). (optional, default to 0M)</param>
        /// <param name="paginationLimit">Non-negative maximum number of entries to return. (optional, default to 20M)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse2009</returns>
        System.Threading.Tasks.Task<InlineResponse2009> GetPortfolioPositionListAsync(string id, List<string> attributes = default(List<string>), string language = default(string), List<string> sort = default(List<string>), decimal? paginationOffset = default(decimal?), decimal? paginationLimit = default(decimal?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// List all open positions of a portfolio.
        /// </summary>
        /// <remarks>
        /// List all open positions of a portfolio.
        /// </remarks>
        /// <exception cref="FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="language"> (optional)</param>
        /// <param name="sort">Sortable attributes. The sort order is ascending unless it is prefixed with a minus sign, in which case it is descending. A list of at most 10 (possibly prefixed) attribute name(s) is allowed. (optional)</param>
        /// <param name="paginationOffset">Non-negative number of entries to skip, or 0 (default). (optional, default to 0M)</param>
        /// <param name="paginationLimit">Non-negative maximum number of entries to return. (optional, default to 20M)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse2009)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse2009>> GetPortfolioPositionListWithHttpInfoAsync(string id, List<string> attributes = default(List<string>), string language = default(string), List<string> sort = default(List<string>), decimal? paginationOffset = default(decimal?), decimal? paginationLimit = default(decimal?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// List of transactions in a portfolio.
        /// </summary>
        /// <remarks>
        /// List of transactions in a portfolio.
        /// </remarks>
        /// <exception cref="FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="language"> (optional)</param>
        /// <param name="sort">Sortable attributes. The sort order is ascending unless it is prefixed with a minus sign, in which case it is descending. A list of at most 7 (possibly prefixed) attribute name(s) is allowed. (optional)</param>
        /// <param name="paginationOffset">Non-negative number of entries to skip, or 0 (default). (optional, default to 0M)</param>
        /// <param name="paginationLimit">Non-negative maximum number of entries to return. (optional, default to 20M)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse20011</returns>
        System.Threading.Tasks.Task<InlineResponse20011> GetPortfolioTransactionListAsync(string id, List<string> attributes = default(List<string>), string language = default(string), List<string> sort = default(List<string>), decimal? paginationOffset = default(decimal?), decimal? paginationLimit = default(decimal?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// List of transactions in a portfolio.
        /// </summary>
        /// <remarks>
        /// List of transactions in a portfolio.
        /// </remarks>
        /// <exception cref="FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="language"> (optional)</param>
        /// <param name="sort">Sortable attributes. The sort order is ascending unless it is prefixed with a minus sign, in which case it is descending. A list of at most 7 (possibly prefixed) attribute name(s) is allowed. (optional)</param>
        /// <param name="paginationOffset">Non-negative number of entries to skip, or 0 (default). (optional, default to 0M)</param>
        /// <param name="paginationLimit">Non-negative maximum number of entries to return. (optional, default to 20M)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse20011)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20011>> GetPortfolioTransactionListWithHttpInfoAsync(string id, List<string> attributes = default(List<string>), string language = default(string), List<string> sort = default(List<string>), decimal? paginationOffset = default(decimal?), decimal? paginationLimit = default(decimal?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Create a portfolio.
        /// </summary>
        /// <remarks>
        /// Create a portfolio.  Certain error conditions yield errors as follows:   |Error Condition|HTTP Error| |- -- -- --|- -- -- -- -| |The number of portfolios would exceed 100.|400 Bad Request|
        /// </remarks>
        /// <exception cref="FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inlineObject"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse201</returns>
        System.Threading.Tasks.Task<InlineResponse201> PostPortfolioCreateAsync(InlineObject inlineObject, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create a portfolio.
        /// </summary>
        /// <remarks>
        /// Create a portfolio.  Certain error conditions yield errors as follows:   |Error Condition|HTTP Error| |- -- -- --|- -- -- -- -| |The number of portfolios would exceed 100.|400 Bad Request|
        /// </remarks>
        /// <exception cref="FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inlineObject"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse201)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse201>> PostPortfolioCreateWithHttpInfoAsync(InlineObject inlineObject, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Delete a portfolio.
        /// </summary>
        /// <remarks>
        /// Delete a portfolio.
        /// </remarks>
        /// <exception cref="FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inlineObject1"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse200</returns>
        System.Threading.Tasks.Task<InlineResponse200> PostPortfolioDeleteAsync(InlineObject1 inlineObject1 = default(InlineObject1), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Delete a portfolio.
        /// </summary>
        /// <remarks>
        /// Delete a portfolio.
        /// </remarks>
        /// <exception cref="FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inlineObject1"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse200)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse200>> PostPortfolioDeleteWithHttpInfoAsync(InlineObject1 inlineObject1 = default(InlineObject1), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Evaluate a portfolio.
        /// </summary>
        /// <remarks>
        /// Performs an evaluation over a period of time and returns portfolio key figures for each day, week, or month.
        /// </remarks>
        /// <exception cref="FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inlineObject3"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse2004</returns>
        System.Threading.Tasks.Task<InlineResponse2004> PostPortfolioEvaluationListAsync(InlineObject3 inlineObject3 = default(InlineObject3), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Evaluate a portfolio.
        /// </summary>
        /// <remarks>
        /// Performs an evaluation over a period of time and returns portfolio key figures for each day, week, or month.
        /// </remarks>
        /// <exception cref="FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inlineObject3"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse2004)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse2004>> PostPortfolioEvaluationListWithHttpInfoAsync(InlineObject3 inlineObject3 = default(InlineObject3), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Modify a portfolio.
        /// </summary>
        /// <remarks>
        /// Modify a portfolio.
        /// </remarks>
        /// <exception cref="FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inlineObject2"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse2003</returns>
        System.Threading.Tasks.Task<InlineResponse2003> PostPortfolioModifyAsync(InlineObject2 inlineObject2 = default(InlineObject2), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Modify a portfolio.
        /// </summary>
        /// <remarks>
        /// Modify a portfolio.
        /// </remarks>
        /// <exception cref="FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inlineObject2"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse2003)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse2003>> PostPortfolioModifyWithHttpInfoAsync(InlineObject2 inlineObject2 = default(InlineObject2), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Add a payout to a portfolio.
        /// </summary>
        /// <remarks>
        /// Add a payout to a portfolio.
        /// </remarks>
        /// <exception cref="FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inlineObject4"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse2011</returns>
        System.Threading.Tasks.Task<InlineResponse2011> PostPortfolioPayoutCreateAsync(InlineObject4 inlineObject4 = default(InlineObject4), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Add a payout to a portfolio.
        /// </summary>
        /// <remarks>
        /// Add a payout to a portfolio.
        /// </remarks>
        /// <exception cref="FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inlineObject4"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse2011)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse2011>> PostPortfolioPayoutCreateWithHttpInfoAsync(InlineObject4 inlineObject4 = default(InlineObject4), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Delete a payout of a portfolio.
        /// </summary>
        /// <remarks>
        /// Delete a payout of a portfolio.  Certain error conditions yield errors as follows:   |Error Condition|HTTP Error| |- -- -- --|- -- -- -- -| |Invalid payout identifier.|400 Bad Request|
        /// </remarks>
        /// <exception cref="FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inlineObject5"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse2006</returns>
        System.Threading.Tasks.Task<InlineResponse2006> PostPortfolioPayoutDeleteAsync(InlineObject5 inlineObject5 = default(InlineObject5), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Delete a payout of a portfolio.
        /// </summary>
        /// <remarks>
        /// Delete a payout of a portfolio.  Certain error conditions yield errors as follows:   |Error Condition|HTTP Error| |- -- -- --|- -- -- -- -| |Invalid payout identifier.|400 Bad Request|
        /// </remarks>
        /// <exception cref="FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inlineObject5"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse2006)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse2006>> PostPortfolioPayoutDeleteWithHttpInfoAsync(InlineObject5 inlineObject5 = default(InlineObject5), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// List of payouts in a portfolio.
        /// </summary>
        /// <remarks>
        /// List of payouts in a portfolio.
        /// </remarks>
        /// <exception cref="FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inlineObject6"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse2007</returns>
        System.Threading.Tasks.Task<InlineResponse2007> PostPortfolioPayoutListAsync(InlineObject6 inlineObject6, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// List of payouts in a portfolio.
        /// </summary>
        /// <remarks>
        /// List of payouts in a portfolio.
        /// </remarks>
        /// <exception cref="FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inlineObject6"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse2007)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse2007>> PostPortfolioPayoutListWithHttpInfoAsync(InlineObject6 inlineObject6, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Modify a payout in a portfolio.
        /// </summary>
        /// <remarks>
        /// Modify a payout in a portfolio.  Certain error conditions yield errors as follows:   |Error Condition|HTTP Error| |- -- -- --|- -- -- -- -| |At least one of the parameters &#x60;notation&#x60;, &#x60;type&#x60;, &#x60;amount&#x60;, &#x60;transaction&#x60; or &#x60;time&#x60; must be set.|400 Bad Request| |Invalid payout identifier.|400 Bad Request|
        /// </remarks>
        /// <exception cref="FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inlineObject7"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse2008</returns>
        System.Threading.Tasks.Task<InlineResponse2008> PostPortfolioPayoutModifyAsync(InlineObject7 inlineObject7 = default(InlineObject7), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Modify a payout in a portfolio.
        /// </summary>
        /// <remarks>
        /// Modify a payout in a portfolio.  Certain error conditions yield errors as follows:   |Error Condition|HTTP Error| |- -- -- --|- -- -- -- -| |At least one of the parameters &#x60;notation&#x60;, &#x60;type&#x60;, &#x60;amount&#x60;, &#x60;transaction&#x60; or &#x60;time&#x60; must be set.|400 Bad Request| |Invalid payout identifier.|400 Bad Request|
        /// </remarks>
        /// <exception cref="FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inlineObject7"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse2008)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse2008>> PostPortfolioPayoutModifyWithHttpInfoAsync(InlineObject7 inlineObject7 = default(InlineObject7), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// List all closed positions of a portfolio.
        /// </summary>
        /// <remarks>
        /// List all closed positions of a portfolio.
        /// </remarks>
        /// <exception cref="FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inlineObject8"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse20010</returns>
        System.Threading.Tasks.Task<InlineResponse20010> PostPortfolioPositionClosedListAsync(InlineObject8 inlineObject8 = default(InlineObject8), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// List all closed positions of a portfolio.
        /// </summary>
        /// <remarks>
        /// List all closed positions of a portfolio.
        /// </remarks>
        /// <exception cref="FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inlineObject8"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse20010)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20010>> PostPortfolioPositionClosedListWithHttpInfoAsync(InlineObject8 inlineObject8 = default(InlineObject8), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Add a cash transaction to a portfolio.
        /// </summary>
        /// <remarks>
        /// Add a cash transaction to a portfolio.  Certain error conditions yield errors as follows:   |Error Condition|HTTP Error| |- -- -- --|- -- -- -- -| |The number of transactions would exceed 1000.|400 Bad Request|
        /// </remarks>
        /// <exception cref="FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inlineObject12"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse2012</returns>
        System.Threading.Tasks.Task<InlineResponse2012> PostPortfolioTransactionCashCreateAsync(InlineObject12 inlineObject12 = default(InlineObject12), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Add a cash transaction to a portfolio.
        /// </summary>
        /// <remarks>
        /// Add a cash transaction to a portfolio.  Certain error conditions yield errors as follows:   |Error Condition|HTTP Error| |- -- -- --|- -- -- -- -| |The number of transactions would exceed 1000.|400 Bad Request|
        /// </remarks>
        /// <exception cref="FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inlineObject12"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse2012)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse2012>> PostPortfolioTransactionCashCreateWithHttpInfoAsync(InlineObject12 inlineObject12 = default(InlineObject12), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Delete a cash transaction.
        /// </summary>
        /// <remarks>
        /// Delete a cash transaction.
        /// </remarks>
        /// <exception cref="FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inlineObject13"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse2006</returns>
        System.Threading.Tasks.Task<InlineResponse2006> PostPortfolioTransactionCashDeleteAsync(InlineObject13 inlineObject13 = default(InlineObject13), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Delete a cash transaction.
        /// </summary>
        /// <remarks>
        /// Delete a cash transaction.
        /// </remarks>
        /// <exception cref="FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inlineObject13"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse2006)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse2006>> PostPortfolioTransactionCashDeleteWithHttpInfoAsync(InlineObject13 inlineObject13 = default(InlineObject13), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Add a transaction to a portfolio.
        /// </summary>
        /// <remarks>
        /// Add a transaction to a portfolio.  Certain error conditions yield errors as follows:   |Error Condition|HTTP Error| |- -- -- --|- -- -- -- -| |The number of transactions would exceed 1000.|400 Bad Request|
        /// </remarks>
        /// <exception cref="FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inlineObject9"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse2012</returns>
        System.Threading.Tasks.Task<InlineResponse2012> PostPortfolioTransactionCreateAsync(InlineObject9 inlineObject9 = default(InlineObject9), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Add a transaction to a portfolio.
        /// </summary>
        /// <remarks>
        /// Add a transaction to a portfolio.  Certain error conditions yield errors as follows:   |Error Condition|HTTP Error| |- -- -- --|- -- -- -- -| |The number of transactions would exceed 1000.|400 Bad Request|
        /// </remarks>
        /// <exception cref="FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inlineObject9"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse2012)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse2012>> PostPortfolioTransactionCreateWithHttpInfoAsync(InlineObject9 inlineObject9 = default(InlineObject9), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Delete a transaction of a portfolio.
        /// </summary>
        /// <remarks>
        /// Delete a transaction of a portfolio.
        /// </remarks>
        /// <exception cref="FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inlineObject10"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse2006</returns>
        System.Threading.Tasks.Task<InlineResponse2006> PostPortfolioTransactionDeleteAsync(InlineObject10 inlineObject10 = default(InlineObject10), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Delete a transaction of a portfolio.
        /// </summary>
        /// <remarks>
        /// Delete a transaction of a portfolio.
        /// </remarks>
        /// <exception cref="FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inlineObject10"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse2006)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse2006>> PostPortfolioTransactionDeleteWithHttpInfoAsync(InlineObject10 inlineObject10 = default(InlineObject10), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Modify a transaction in a portfolio.
        /// </summary>
        /// <remarks>
        /// Modify a transaction in a portfolio.  Certain error conditions yield errors as follows:   |Error Condition|HTTP Error| |- -- -- --|- -- -- -- -| |At least one of the parameters &#x60;numberShares&#x60;, &#x60;price&#x60;, &#x60;charges&#x60;, &#x60;exchangeRate&#x60; or &#x60;time&#x60; must be set.|400 Bad Request|
        /// </remarks>
        /// <exception cref="FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inlineObject11"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse2008</returns>
        System.Threading.Tasks.Task<InlineResponse2008> PostPortfolioTransactionModifyAsync(InlineObject11 inlineObject11 = default(InlineObject11), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Modify a transaction in a portfolio.
        /// </summary>
        /// <remarks>
        /// Modify a transaction in a portfolio.  Certain error conditions yield errors as follows:   |Error Condition|HTTP Error| |- -- -- --|- -- -- -- -| |At least one of the parameters &#x60;numberShares&#x60;, &#x60;price&#x60;, &#x60;charges&#x60;, &#x60;exchangeRate&#x60; or &#x60;time&#x60; must be set.|400 Bad Request|
        /// </remarks>
        /// <exception cref="FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inlineObject11"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse2008)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse2008>> PostPortfolioTransactionModifyWithHttpInfoAsync(InlineObject11 inlineObject11 = default(InlineObject11), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IPortfolioApi : IPortfolioApiSync, IPortfolioApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class PortfolioApi : IPortfolioApi
    {
        private FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        # region Response Type Disctionaries
                private static readonly Dictionary<HttpStatusCode, System.Type> GetPortfolioGetResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)200, typeof(InlineResponse2001) },
        };
        private static readonly Dictionary<HttpStatusCode, System.Type> GetPortfolioListResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)200, typeof(InlineResponse2002) },
        };
        private static readonly Dictionary<HttpStatusCode, System.Type> GetPortfolioNameListResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)200, typeof(InlineResponse2005) },
        };
        private static readonly Dictionary<HttpStatusCode, System.Type> GetPortfolioPositionListResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)200, typeof(InlineResponse2009) },
        };
        private static readonly Dictionary<HttpStatusCode, System.Type> GetPortfolioTransactionListResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)200, typeof(InlineResponse20011) },
        };
        private static readonly Dictionary<HttpStatusCode, System.Type> PostPortfolioCreateResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)201, typeof(InlineResponse201) },
        };
        private static readonly Dictionary<HttpStatusCode, System.Type> PostPortfolioDeleteResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)200, typeof(InlineResponse200) },
        };
        private static readonly Dictionary<HttpStatusCode, System.Type> PostPortfolioEvaluationListResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)200, typeof(InlineResponse2004) },
        };
        private static readonly Dictionary<HttpStatusCode, System.Type> PostPortfolioModifyResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)200, typeof(InlineResponse2003) },
        };
        private static readonly Dictionary<HttpStatusCode, System.Type> PostPortfolioPayoutCreateResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)201, typeof(InlineResponse2011) },
        };
        private static readonly Dictionary<HttpStatusCode, System.Type> PostPortfolioPayoutDeleteResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)200, typeof(InlineResponse2006) },
        };
        private static readonly Dictionary<HttpStatusCode, System.Type> PostPortfolioPayoutListResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)200, typeof(InlineResponse2007) },
        };
        private static readonly Dictionary<HttpStatusCode, System.Type> PostPortfolioPayoutModifyResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)200, typeof(InlineResponse2008) },
        };
        private static readonly Dictionary<HttpStatusCode, System.Type> PostPortfolioPositionClosedListResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)200, typeof(InlineResponse20010) },
        };
        private static readonly Dictionary<HttpStatusCode, System.Type> PostPortfolioTransactionCashCreateResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)200, typeof(InlineResponse2012) },
        };
        private static readonly Dictionary<HttpStatusCode, System.Type> PostPortfolioTransactionCashDeleteResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)200, typeof(InlineResponse2006) },
        };
        private static readonly Dictionary<HttpStatusCode, System.Type> PostPortfolioTransactionCreateResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)201, typeof(InlineResponse2012) },
        };
        private static readonly Dictionary<HttpStatusCode, System.Type> PostPortfolioTransactionDeleteResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)200, typeof(InlineResponse2006) },
        };
        private static readonly Dictionary<HttpStatusCode, System.Type> PostPortfolioTransactionModifyResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)200, typeof(InlineResponse2008) },
        };

        # endregion Response Type Disctionaries

        # region Api Response Objects
         

        # endregion Api Response Objects

        /// <summary>
        /// Initializes a new instance of the <see cref="PortfolioApi"/> class.
        /// </summary>
        /// <returns></returns>
        public PortfolioApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PortfolioApi"/> class.
        /// </summary>
        /// <returns></returns>
        public PortfolioApi(string basePath)
        {
            this.Configuration = FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.Configuration.MergeConfigurations(
                FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.GlobalConfiguration.Instance,
                new FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.Configuration { BasePath = basePath }
            );
            this.Client = new FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PortfolioApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public PortfolioApi(FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.Configuration.MergeConfigurations(
                FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PortfolioApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public PortfolioApi(FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ISynchronousClient client, FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.IAsynchronousClient asyncClient, FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Details of a portfolio. Details of a portfolio.
        /// </summary>
        /// <exception cref="FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <returns>InlineResponse2001</returns>
        public InlineResponse2001 GetPortfolioGet(string id, List<string> attributes = default(List<string>))
        {
            var localVarResponse = GetPortfolioGetWithHttpInfo(id, attributes);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Details of a portfolio. Details of a portfolio.
        /// </summary>
        /// <exception cref="FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <returns>ApiResponse of InlineResponse2001</returns>
        public ApiResponse<InlineResponse2001> GetPortfolioGetWithHttpInfo(string id, List<string> attributes = default(List<string>))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ApiException(400, "Missing required parameter 'id' when calling PortfolioApi->GetPortfolioGet");
            }

            FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ClientUtils.ParameterToMultiMap("", "id", id));
            if (attributes != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ClientUtils.ParameterToMultiMap("csv", "_attributes", attributes));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = GetPortfolioGetResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Get<
            InlineResponse2001>("/portfolio/get", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetPortfolioGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// Details of a portfolio. Details of a portfolio.
        /// </summary>
        /// <exception cref="FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse2001</returns>
        public async System.Threading.Tasks.Task<InlineResponse2001>GetPortfolioGetAsync(string id, List<string> attributes = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await GetPortfolioGetWithHttpInfoAsync(id, attributes, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Details of a portfolio. Details of a portfolio.
        /// </summary>
        /// <exception cref="FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse2001)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse2001>> GetPortfolioGetWithHttpInfoAsync(string id, List<string> attributes = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ApiException(400, "Missing required parameter 'id' when calling PortfolioApi->GetPortfolioGet");
            }


            FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ClientUtils.ParameterToMultiMap("", "id", id));
            if (attributes != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ClientUtils.ParameterToMultiMap("csv", "_attributes", attributes));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = GetPortfolioGetResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<InlineResponse2001>("/portfolio/get", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetPortfolioGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List of portfolios with keyfigures. List of portfolios with keyfigures.
        /// </summary>
        /// <exception cref="FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="sort">Sortable attributes. The sort order is ascending unless it is prefixed with a minus sign, in which case it is descending. A list of at most 2 (possibly prefixed) attribute name(s) is allowed. (optional)</param>
        /// <returns>InlineResponse2002</returns>
        public InlineResponse2002 GetPortfolioList(List<string> attributes = default(List<string>), List<string> sort = default(List<string>))
        {
            var localVarResponse = GetPortfolioListWithHttpInfo(attributes, sort);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List of portfolios with keyfigures. List of portfolios with keyfigures.
        /// </summary>
        /// <exception cref="FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="sort">Sortable attributes. The sort order is ascending unless it is prefixed with a minus sign, in which case it is descending. A list of at most 2 (possibly prefixed) attribute name(s) is allowed. (optional)</param>
        /// <returns>ApiResponse of InlineResponse2002</returns>
        public ApiResponse<InlineResponse2002> GetPortfolioListWithHttpInfo(List<string> attributes = default(List<string>), List<string> sort = default(List<string>))
        {
            FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (attributes != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ClientUtils.ParameterToMultiMap("csv", "_attributes", attributes));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ClientUtils.ParameterToMultiMap("csv", "_sort", sort));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = GetPortfolioListResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Get<
            InlineResponse2002>("/portfolio/list", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetPortfolioList", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// List of portfolios with keyfigures. List of portfolios with keyfigures.
        /// </summary>
        /// <exception cref="FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="sort">Sortable attributes. The sort order is ascending unless it is prefixed with a minus sign, in which case it is descending. A list of at most 2 (possibly prefixed) attribute name(s) is allowed. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse2002</returns>
        public async System.Threading.Tasks.Task<InlineResponse2002>GetPortfolioListAsync(List<string> attributes = default(List<string>), List<string> sort = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await GetPortfolioListWithHttpInfoAsync(attributes, sort, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List of portfolios with keyfigures. List of portfolios with keyfigures.
        /// </summary>
        /// <exception cref="FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="sort">Sortable attributes. The sort order is ascending unless it is prefixed with a minus sign, in which case it is descending. A list of at most 2 (possibly prefixed) attribute name(s) is allowed. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse2002)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse2002>> GetPortfolioListWithHttpInfoAsync(List<string> attributes = default(List<string>), List<string> sort = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (attributes != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ClientUtils.ParameterToMultiMap("csv", "_attributes", attributes));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ClientUtils.ParameterToMultiMap("csv", "_sort", sort));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = GetPortfolioListResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<InlineResponse2002>("/portfolio/list", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetPortfolioList", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List of portfolios. List of portfolios.
        /// </summary>
        /// <exception cref="FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="sort">Sortable attributes. The sort order is ascending unless it is prefixed with a minus sign, in which case it is descending. A list of at most 2 (possibly prefixed) attribute name(s) is allowed. (optional)</param>
        /// <returns>InlineResponse2005</returns>
        public InlineResponse2005 GetPortfolioNameList(List<string> attributes = default(List<string>), List<string> sort = default(List<string>))
        {
            var localVarResponse = GetPortfolioNameListWithHttpInfo(attributes, sort);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List of portfolios. List of portfolios.
        /// </summary>
        /// <exception cref="FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="sort">Sortable attributes. The sort order is ascending unless it is prefixed with a minus sign, in which case it is descending. A list of at most 2 (possibly prefixed) attribute name(s) is allowed. (optional)</param>
        /// <returns>ApiResponse of InlineResponse2005</returns>
        public ApiResponse<InlineResponse2005> GetPortfolioNameListWithHttpInfo(List<string> attributes = default(List<string>), List<string> sort = default(List<string>))
        {
            FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (attributes != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ClientUtils.ParameterToMultiMap("csv", "_attributes", attributes));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ClientUtils.ParameterToMultiMap("csv", "_sort", sort));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = GetPortfolioNameListResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Get<
            InlineResponse2005>("/portfolio/name/list", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetPortfolioNameList", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// List of portfolios. List of portfolios.
        /// </summary>
        /// <exception cref="FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="sort">Sortable attributes. The sort order is ascending unless it is prefixed with a minus sign, in which case it is descending. A list of at most 2 (possibly prefixed) attribute name(s) is allowed. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse2005</returns>
        public async System.Threading.Tasks.Task<InlineResponse2005>GetPortfolioNameListAsync(List<string> attributes = default(List<string>), List<string> sort = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await GetPortfolioNameListWithHttpInfoAsync(attributes, sort, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List of portfolios. List of portfolios.
        /// </summary>
        /// <exception cref="FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="sort">Sortable attributes. The sort order is ascending unless it is prefixed with a minus sign, in which case it is descending. A list of at most 2 (possibly prefixed) attribute name(s) is allowed. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse2005)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse2005>> GetPortfolioNameListWithHttpInfoAsync(List<string> attributes = default(List<string>), List<string> sort = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (attributes != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ClientUtils.ParameterToMultiMap("csv", "_attributes", attributes));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ClientUtils.ParameterToMultiMap("csv", "_sort", sort));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = GetPortfolioNameListResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<InlineResponse2005>("/portfolio/name/list", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetPortfolioNameList", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List all open positions of a portfolio. List all open positions of a portfolio.
        /// </summary>
        /// <exception cref="FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="language"> (optional)</param>
        /// <param name="sort">Sortable attributes. The sort order is ascending unless it is prefixed with a minus sign, in which case it is descending. A list of at most 10 (possibly prefixed) attribute name(s) is allowed. (optional)</param>
        /// <param name="paginationOffset">Non-negative number of entries to skip, or 0 (default). (optional, default to 0M)</param>
        /// <param name="paginationLimit">Non-negative maximum number of entries to return. (optional, default to 20M)</param>
        /// <returns>InlineResponse2009</returns>
        public InlineResponse2009 GetPortfolioPositionList(string id, List<string> attributes = default(List<string>), string language = default(string), List<string> sort = default(List<string>), decimal? paginationOffset = default(decimal?), decimal? paginationLimit = default(decimal?))
        {
            var localVarResponse = GetPortfolioPositionListWithHttpInfo(id, attributes, language, sort, paginationOffset, paginationLimit);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List all open positions of a portfolio. List all open positions of a portfolio.
        /// </summary>
        /// <exception cref="FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="language"> (optional)</param>
        /// <param name="sort">Sortable attributes. The sort order is ascending unless it is prefixed with a minus sign, in which case it is descending. A list of at most 10 (possibly prefixed) attribute name(s) is allowed. (optional)</param>
        /// <param name="paginationOffset">Non-negative number of entries to skip, or 0 (default). (optional, default to 0M)</param>
        /// <param name="paginationLimit">Non-negative maximum number of entries to return. (optional, default to 20M)</param>
        /// <returns>ApiResponse of InlineResponse2009</returns>
        public ApiResponse<InlineResponse2009> GetPortfolioPositionListWithHttpInfo(string id, List<string> attributes = default(List<string>), string language = default(string), List<string> sort = default(List<string>), decimal? paginationOffset = default(decimal?), decimal? paginationLimit = default(decimal?))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ApiException(400, "Missing required parameter 'id' when calling PortfolioApi->GetPortfolioPositionList");
            }

            FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ClientUtils.ParameterToMultiMap("", "id", id));
            if (attributes != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ClientUtils.ParameterToMultiMap("csv", "_attributes", attributes));
            }
            if (language != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ClientUtils.ParameterToMultiMap("", "_language", language));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ClientUtils.ParameterToMultiMap("csv", "_sort", sort));
            }
            if (paginationOffset != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ClientUtils.ParameterToMultiMap("", "_paginationOffset", paginationOffset));
            }
            if (paginationLimit != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ClientUtils.ParameterToMultiMap("", "_paginationLimit", paginationLimit));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = GetPortfolioPositionListResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Get<
            InlineResponse2009>("/portfolio/position/list", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetPortfolioPositionList", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// List all open positions of a portfolio. List all open positions of a portfolio.
        /// </summary>
        /// <exception cref="FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="language"> (optional)</param>
        /// <param name="sort">Sortable attributes. The sort order is ascending unless it is prefixed with a minus sign, in which case it is descending. A list of at most 10 (possibly prefixed) attribute name(s) is allowed. (optional)</param>
        /// <param name="paginationOffset">Non-negative number of entries to skip, or 0 (default). (optional, default to 0M)</param>
        /// <param name="paginationLimit">Non-negative maximum number of entries to return. (optional, default to 20M)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse2009</returns>
        public async System.Threading.Tasks.Task<InlineResponse2009>GetPortfolioPositionListAsync(string id, List<string> attributes = default(List<string>), string language = default(string), List<string> sort = default(List<string>), decimal? paginationOffset = default(decimal?), decimal? paginationLimit = default(decimal?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await GetPortfolioPositionListWithHttpInfoAsync(id, attributes, language, sort, paginationOffset, paginationLimit, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List all open positions of a portfolio. List all open positions of a portfolio.
        /// </summary>
        /// <exception cref="FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="language"> (optional)</param>
        /// <param name="sort">Sortable attributes. The sort order is ascending unless it is prefixed with a minus sign, in which case it is descending. A list of at most 10 (possibly prefixed) attribute name(s) is allowed. (optional)</param>
        /// <param name="paginationOffset">Non-negative number of entries to skip, or 0 (default). (optional, default to 0M)</param>
        /// <param name="paginationLimit">Non-negative maximum number of entries to return. (optional, default to 20M)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse2009)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse2009>> GetPortfolioPositionListWithHttpInfoAsync(string id, List<string> attributes = default(List<string>), string language = default(string), List<string> sort = default(List<string>), decimal? paginationOffset = default(decimal?), decimal? paginationLimit = default(decimal?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ApiException(400, "Missing required parameter 'id' when calling PortfolioApi->GetPortfolioPositionList");
            }


            FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ClientUtils.ParameterToMultiMap("", "id", id));
            if (attributes != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ClientUtils.ParameterToMultiMap("csv", "_attributes", attributes));
            }
            if (language != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ClientUtils.ParameterToMultiMap("", "_language", language));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ClientUtils.ParameterToMultiMap("csv", "_sort", sort));
            }
            if (paginationOffset != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ClientUtils.ParameterToMultiMap("", "_paginationOffset", paginationOffset));
            }
            if (paginationLimit != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ClientUtils.ParameterToMultiMap("", "_paginationLimit", paginationLimit));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = GetPortfolioPositionListResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<InlineResponse2009>("/portfolio/position/list", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetPortfolioPositionList", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List of transactions in a portfolio. List of transactions in a portfolio.
        /// </summary>
        /// <exception cref="FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="language"> (optional)</param>
        /// <param name="sort">Sortable attributes. The sort order is ascending unless it is prefixed with a minus sign, in which case it is descending. A list of at most 7 (possibly prefixed) attribute name(s) is allowed. (optional)</param>
        /// <param name="paginationOffset">Non-negative number of entries to skip, or 0 (default). (optional, default to 0M)</param>
        /// <param name="paginationLimit">Non-negative maximum number of entries to return. (optional, default to 20M)</param>
        /// <returns>InlineResponse20011</returns>
        public InlineResponse20011 GetPortfolioTransactionList(string id, List<string> attributes = default(List<string>), string language = default(string), List<string> sort = default(List<string>), decimal? paginationOffset = default(decimal?), decimal? paginationLimit = default(decimal?))
        {
            var localVarResponse = GetPortfolioTransactionListWithHttpInfo(id, attributes, language, sort, paginationOffset, paginationLimit);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List of transactions in a portfolio. List of transactions in a portfolio.
        /// </summary>
        /// <exception cref="FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="language"> (optional)</param>
        /// <param name="sort">Sortable attributes. The sort order is ascending unless it is prefixed with a minus sign, in which case it is descending. A list of at most 7 (possibly prefixed) attribute name(s) is allowed. (optional)</param>
        /// <param name="paginationOffset">Non-negative number of entries to skip, or 0 (default). (optional, default to 0M)</param>
        /// <param name="paginationLimit">Non-negative maximum number of entries to return. (optional, default to 20M)</param>
        /// <returns>ApiResponse of InlineResponse20011</returns>
        public ApiResponse<InlineResponse20011> GetPortfolioTransactionListWithHttpInfo(string id, List<string> attributes = default(List<string>), string language = default(string), List<string> sort = default(List<string>), decimal? paginationOffset = default(decimal?), decimal? paginationLimit = default(decimal?))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ApiException(400, "Missing required parameter 'id' when calling PortfolioApi->GetPortfolioTransactionList");
            }

            FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ClientUtils.ParameterToMultiMap("", "id", id));
            if (attributes != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ClientUtils.ParameterToMultiMap("csv", "_attributes", attributes));
            }
            if (language != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ClientUtils.ParameterToMultiMap("", "_language", language));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ClientUtils.ParameterToMultiMap("csv", "_sort", sort));
            }
            if (paginationOffset != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ClientUtils.ParameterToMultiMap("", "_paginationOffset", paginationOffset));
            }
            if (paginationLimit != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ClientUtils.ParameterToMultiMap("", "_paginationLimit", paginationLimit));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = GetPortfolioTransactionListResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Get<
            InlineResponse20011>("/portfolio/transaction/list", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetPortfolioTransactionList", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// List of transactions in a portfolio. List of transactions in a portfolio.
        /// </summary>
        /// <exception cref="FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="language"> (optional)</param>
        /// <param name="sort">Sortable attributes. The sort order is ascending unless it is prefixed with a minus sign, in which case it is descending. A list of at most 7 (possibly prefixed) attribute name(s) is allowed. (optional)</param>
        /// <param name="paginationOffset">Non-negative number of entries to skip, or 0 (default). (optional, default to 0M)</param>
        /// <param name="paginationLimit">Non-negative maximum number of entries to return. (optional, default to 20M)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse20011</returns>
        public async System.Threading.Tasks.Task<InlineResponse20011>GetPortfolioTransactionListAsync(string id, List<string> attributes = default(List<string>), string language = default(string), List<string> sort = default(List<string>), decimal? paginationOffset = default(decimal?), decimal? paginationLimit = default(decimal?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await GetPortfolioTransactionListWithHttpInfoAsync(id, attributes, language, sort, paginationOffset, paginationLimit, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List of transactions in a portfolio. List of transactions in a portfolio.
        /// </summary>
        /// <exception cref="FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="language"> (optional)</param>
        /// <param name="sort">Sortable attributes. The sort order is ascending unless it is prefixed with a minus sign, in which case it is descending. A list of at most 7 (possibly prefixed) attribute name(s) is allowed. (optional)</param>
        /// <param name="paginationOffset">Non-negative number of entries to skip, or 0 (default). (optional, default to 0M)</param>
        /// <param name="paginationLimit">Non-negative maximum number of entries to return. (optional, default to 20M)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse20011)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20011>> GetPortfolioTransactionListWithHttpInfoAsync(string id, List<string> attributes = default(List<string>), string language = default(string), List<string> sort = default(List<string>), decimal? paginationOffset = default(decimal?), decimal? paginationLimit = default(decimal?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ApiException(400, "Missing required parameter 'id' when calling PortfolioApi->GetPortfolioTransactionList");
            }


            FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ClientUtils.ParameterToMultiMap("", "id", id));
            if (attributes != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ClientUtils.ParameterToMultiMap("csv", "_attributes", attributes));
            }
            if (language != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ClientUtils.ParameterToMultiMap("", "_language", language));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ClientUtils.ParameterToMultiMap("csv", "_sort", sort));
            }
            if (paginationOffset != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ClientUtils.ParameterToMultiMap("", "_paginationOffset", paginationOffset));
            }
            if (paginationLimit != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ClientUtils.ParameterToMultiMap("", "_paginationLimit", paginationLimit));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = GetPortfolioTransactionListResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<InlineResponse20011>("/portfolio/transaction/list", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetPortfolioTransactionList", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a portfolio. Create a portfolio.  Certain error conditions yield errors as follows:   |Error Condition|HTTP Error| |- -- -- --|- -- -- -- -| |The number of portfolios would exceed 100.|400 Bad Request|
        /// </summary>
        /// <exception cref="FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inlineObject"></param>
        /// <returns>InlineResponse201</returns>
        public InlineResponse201 PostPortfolioCreate(InlineObject inlineObject)
        {
            var localVarResponse = PostPortfolioCreateWithHttpInfo(inlineObject);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a portfolio. Create a portfolio.  Certain error conditions yield errors as follows:   |Error Condition|HTTP Error| |- -- -- --|- -- -- -- -| |The number of portfolios would exceed 100.|400 Bad Request|
        /// </summary>
        /// <exception cref="FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inlineObject"></param>
        /// <returns>ApiResponse of InlineResponse201</returns>
        public ApiResponse<InlineResponse201> PostPortfolioCreateWithHttpInfo(InlineObject inlineObject)
        {
            // verify the required parameter 'inlineObject' is set
            if (inlineObject == null)
            {
                throw new FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ApiException(400, "Missing required parameter 'inlineObject' when calling PortfolioApi->PostPortfolioCreate");
            }

            FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = inlineObject;

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = PostPortfolioCreateResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Post<
            InlineResponse201>("/portfolio/create", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostPortfolioCreate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// Create a portfolio. Create a portfolio.  Certain error conditions yield errors as follows:   |Error Condition|HTTP Error| |- -- -- --|- -- -- -- -| |The number of portfolios would exceed 100.|400 Bad Request|
        /// </summary>
        /// <exception cref="FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inlineObject"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse201</returns>
        public async System.Threading.Tasks.Task<InlineResponse201>PostPortfolioCreateAsync(InlineObject inlineObject, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await PostPortfolioCreateWithHttpInfoAsync(inlineObject, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a portfolio. Create a portfolio.  Certain error conditions yield errors as follows:   |Error Condition|HTTP Error| |- -- -- --|- -- -- -- -| |The number of portfolios would exceed 100.|400 Bad Request|
        /// </summary>
        /// <exception cref="FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inlineObject"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse201)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse201>> PostPortfolioCreateWithHttpInfoAsync(InlineObject inlineObject, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'inlineObject' is set
            if (inlineObject == null)
            {
                throw new FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ApiException(400, "Missing required parameter 'inlineObject' when calling PortfolioApi->PostPortfolioCreate");
            }


            FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = inlineObject;

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = PostPortfolioCreateResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<InlineResponse201>("/portfolio/create", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostPortfolioCreate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete a portfolio. Delete a portfolio.
        /// </summary>
        /// <exception cref="FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inlineObject1"> (optional)</param>
        /// <returns>InlineResponse200</returns>
        public InlineResponse200 PostPortfolioDelete(InlineObject1 inlineObject1 = default(InlineObject1))
        {
            var localVarResponse = PostPortfolioDeleteWithHttpInfo(inlineObject1);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Delete a portfolio. Delete a portfolio.
        /// </summary>
        /// <exception cref="FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inlineObject1"> (optional)</param>
        /// <returns>ApiResponse of InlineResponse200</returns>
        public ApiResponse<InlineResponse200> PostPortfolioDeleteWithHttpInfo(InlineObject1 inlineObject1 = default(InlineObject1))
        {
            FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = inlineObject1;

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = PostPortfolioDeleteResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Post<
            InlineResponse200>("/portfolio/delete", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostPortfolioDelete", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// Delete a portfolio. Delete a portfolio.
        /// </summary>
        /// <exception cref="FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inlineObject1"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse200</returns>
        public async System.Threading.Tasks.Task<InlineResponse200>PostPortfolioDeleteAsync(InlineObject1 inlineObject1 = default(InlineObject1), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await PostPortfolioDeleteWithHttpInfoAsync(inlineObject1, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Delete a portfolio. Delete a portfolio.
        /// </summary>
        /// <exception cref="FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inlineObject1"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse200)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse200>> PostPortfolioDeleteWithHttpInfoAsync(InlineObject1 inlineObject1 = default(InlineObject1), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = inlineObject1;

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = PostPortfolioDeleteResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<InlineResponse200>("/portfolio/delete", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostPortfolioDelete", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Evaluate a portfolio. Performs an evaluation over a period of time and returns portfolio key figures for each day, week, or month.
        /// </summary>
        /// <exception cref="FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inlineObject3"> (optional)</param>
        /// <returns>InlineResponse2004</returns>
        public InlineResponse2004 PostPortfolioEvaluationList(InlineObject3 inlineObject3 = default(InlineObject3))
        {
            var localVarResponse = PostPortfolioEvaluationListWithHttpInfo(inlineObject3);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Evaluate a portfolio. Performs an evaluation over a period of time and returns portfolio key figures for each day, week, or month.
        /// </summary>
        /// <exception cref="FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inlineObject3"> (optional)</param>
        /// <returns>ApiResponse of InlineResponse2004</returns>
        public ApiResponse<InlineResponse2004> PostPortfolioEvaluationListWithHttpInfo(InlineObject3 inlineObject3 = default(InlineObject3))
        {
            FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = inlineObject3;

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = PostPortfolioEvaluationListResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Post<
            InlineResponse2004>("/portfolio/evaluation/list", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostPortfolioEvaluationList", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// Evaluate a portfolio. Performs an evaluation over a period of time and returns portfolio key figures for each day, week, or month.
        /// </summary>
        /// <exception cref="FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inlineObject3"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse2004</returns>
        public async System.Threading.Tasks.Task<InlineResponse2004>PostPortfolioEvaluationListAsync(InlineObject3 inlineObject3 = default(InlineObject3), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await PostPortfolioEvaluationListWithHttpInfoAsync(inlineObject3, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Evaluate a portfolio. Performs an evaluation over a period of time and returns portfolio key figures for each day, week, or month.
        /// </summary>
        /// <exception cref="FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inlineObject3"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse2004)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse2004>> PostPortfolioEvaluationListWithHttpInfoAsync(InlineObject3 inlineObject3 = default(InlineObject3), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = inlineObject3;

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = PostPortfolioEvaluationListResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<InlineResponse2004>("/portfolio/evaluation/list", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostPortfolioEvaluationList", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Modify a portfolio. Modify a portfolio.
        /// </summary>
        /// <exception cref="FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inlineObject2"> (optional)</param>
        /// <returns>InlineResponse2003</returns>
        public InlineResponse2003 PostPortfolioModify(InlineObject2 inlineObject2 = default(InlineObject2))
        {
            var localVarResponse = PostPortfolioModifyWithHttpInfo(inlineObject2);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Modify a portfolio. Modify a portfolio.
        /// </summary>
        /// <exception cref="FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inlineObject2"> (optional)</param>
        /// <returns>ApiResponse of InlineResponse2003</returns>
        public ApiResponse<InlineResponse2003> PostPortfolioModifyWithHttpInfo(InlineObject2 inlineObject2 = default(InlineObject2))
        {
            FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = inlineObject2;

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = PostPortfolioModifyResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Post<
            InlineResponse2003>("/portfolio/modify", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostPortfolioModify", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// Modify a portfolio. Modify a portfolio.
        /// </summary>
        /// <exception cref="FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inlineObject2"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse2003</returns>
        public async System.Threading.Tasks.Task<InlineResponse2003>PostPortfolioModifyAsync(InlineObject2 inlineObject2 = default(InlineObject2), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await PostPortfolioModifyWithHttpInfoAsync(inlineObject2, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Modify a portfolio. Modify a portfolio.
        /// </summary>
        /// <exception cref="FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inlineObject2"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse2003)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse2003>> PostPortfolioModifyWithHttpInfoAsync(InlineObject2 inlineObject2 = default(InlineObject2), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = inlineObject2;

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = PostPortfolioModifyResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<InlineResponse2003>("/portfolio/modify", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostPortfolioModify", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Add a payout to a portfolio. Add a payout to a portfolio.
        /// </summary>
        /// <exception cref="FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inlineObject4"> (optional)</param>
        /// <returns>InlineResponse2011</returns>
        public InlineResponse2011 PostPortfolioPayoutCreate(InlineObject4 inlineObject4 = default(InlineObject4))
        {
            var localVarResponse = PostPortfolioPayoutCreateWithHttpInfo(inlineObject4);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Add a payout to a portfolio. Add a payout to a portfolio.
        /// </summary>
        /// <exception cref="FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inlineObject4"> (optional)</param>
        /// <returns>ApiResponse of InlineResponse2011</returns>
        public ApiResponse<InlineResponse2011> PostPortfolioPayoutCreateWithHttpInfo(InlineObject4 inlineObject4 = default(InlineObject4))
        {
            FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = inlineObject4;

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = PostPortfolioPayoutCreateResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Post<
            InlineResponse2011>("/portfolio/payout/create", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostPortfolioPayoutCreate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// Add a payout to a portfolio. Add a payout to a portfolio.
        /// </summary>
        /// <exception cref="FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inlineObject4"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse2011</returns>
        public async System.Threading.Tasks.Task<InlineResponse2011>PostPortfolioPayoutCreateAsync(InlineObject4 inlineObject4 = default(InlineObject4), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await PostPortfolioPayoutCreateWithHttpInfoAsync(inlineObject4, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Add a payout to a portfolio. Add a payout to a portfolio.
        /// </summary>
        /// <exception cref="FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inlineObject4"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse2011)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse2011>> PostPortfolioPayoutCreateWithHttpInfoAsync(InlineObject4 inlineObject4 = default(InlineObject4), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = inlineObject4;

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = PostPortfolioPayoutCreateResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<InlineResponse2011>("/portfolio/payout/create", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostPortfolioPayoutCreate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete a payout of a portfolio. Delete a payout of a portfolio.  Certain error conditions yield errors as follows:   |Error Condition|HTTP Error| |- -- -- --|- -- -- -- -| |Invalid payout identifier.|400 Bad Request|
        /// </summary>
        /// <exception cref="FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inlineObject5"> (optional)</param>
        /// <returns>InlineResponse2006</returns>
        public InlineResponse2006 PostPortfolioPayoutDelete(InlineObject5 inlineObject5 = default(InlineObject5))
        {
            var localVarResponse = PostPortfolioPayoutDeleteWithHttpInfo(inlineObject5);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Delete a payout of a portfolio. Delete a payout of a portfolio.  Certain error conditions yield errors as follows:   |Error Condition|HTTP Error| |- -- -- --|- -- -- -- -| |Invalid payout identifier.|400 Bad Request|
        /// </summary>
        /// <exception cref="FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inlineObject5"> (optional)</param>
        /// <returns>ApiResponse of InlineResponse2006</returns>
        public ApiResponse<InlineResponse2006> PostPortfolioPayoutDeleteWithHttpInfo(InlineObject5 inlineObject5 = default(InlineObject5))
        {
            FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = inlineObject5;

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = PostPortfolioPayoutDeleteResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Post<
            InlineResponse2006>("/portfolio/payout/delete", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostPortfolioPayoutDelete", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// Delete a payout of a portfolio. Delete a payout of a portfolio.  Certain error conditions yield errors as follows:   |Error Condition|HTTP Error| |- -- -- --|- -- -- -- -| |Invalid payout identifier.|400 Bad Request|
        /// </summary>
        /// <exception cref="FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inlineObject5"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse2006</returns>
        public async System.Threading.Tasks.Task<InlineResponse2006>PostPortfolioPayoutDeleteAsync(InlineObject5 inlineObject5 = default(InlineObject5), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await PostPortfolioPayoutDeleteWithHttpInfoAsync(inlineObject5, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Delete a payout of a portfolio. Delete a payout of a portfolio.  Certain error conditions yield errors as follows:   |Error Condition|HTTP Error| |- -- -- --|- -- -- -- -| |Invalid payout identifier.|400 Bad Request|
        /// </summary>
        /// <exception cref="FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inlineObject5"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse2006)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse2006>> PostPortfolioPayoutDeleteWithHttpInfoAsync(InlineObject5 inlineObject5 = default(InlineObject5), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = inlineObject5;

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = PostPortfolioPayoutDeleteResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<InlineResponse2006>("/portfolio/payout/delete", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostPortfolioPayoutDelete", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List of payouts in a portfolio. List of payouts in a portfolio.
        /// </summary>
        /// <exception cref="FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inlineObject6"></param>
        /// <returns>InlineResponse2007</returns>
        public InlineResponse2007 PostPortfolioPayoutList(InlineObject6 inlineObject6)
        {
            var localVarResponse = PostPortfolioPayoutListWithHttpInfo(inlineObject6);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List of payouts in a portfolio. List of payouts in a portfolio.
        /// </summary>
        /// <exception cref="FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inlineObject6"></param>
        /// <returns>ApiResponse of InlineResponse2007</returns>
        public ApiResponse<InlineResponse2007> PostPortfolioPayoutListWithHttpInfo(InlineObject6 inlineObject6)
        {
            // verify the required parameter 'inlineObject6' is set
            if (inlineObject6 == null)
            {
                throw new FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ApiException(400, "Missing required parameter 'inlineObject6' when calling PortfolioApi->PostPortfolioPayoutList");
            }

            FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = inlineObject6;

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = PostPortfolioPayoutListResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Post<
            InlineResponse2007>("/portfolio/payout/list", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostPortfolioPayoutList", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// List of payouts in a portfolio. List of payouts in a portfolio.
        /// </summary>
        /// <exception cref="FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inlineObject6"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse2007</returns>
        public async System.Threading.Tasks.Task<InlineResponse2007>PostPortfolioPayoutListAsync(InlineObject6 inlineObject6, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await PostPortfolioPayoutListWithHttpInfoAsync(inlineObject6, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List of payouts in a portfolio. List of payouts in a portfolio.
        /// </summary>
        /// <exception cref="FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inlineObject6"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse2007)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse2007>> PostPortfolioPayoutListWithHttpInfoAsync(InlineObject6 inlineObject6, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'inlineObject6' is set
            if (inlineObject6 == null)
            {
                throw new FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ApiException(400, "Missing required parameter 'inlineObject6' when calling PortfolioApi->PostPortfolioPayoutList");
            }


            FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = inlineObject6;

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = PostPortfolioPayoutListResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<InlineResponse2007>("/portfolio/payout/list", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostPortfolioPayoutList", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Modify a payout in a portfolio. Modify a payout in a portfolio.  Certain error conditions yield errors as follows:   |Error Condition|HTTP Error| |- -- -- --|- -- -- -- -| |At least one of the parameters &#x60;notation&#x60;, &#x60;type&#x60;, &#x60;amount&#x60;, &#x60;transaction&#x60; or &#x60;time&#x60; must be set.|400 Bad Request| |Invalid payout identifier.|400 Bad Request|
        /// </summary>
        /// <exception cref="FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inlineObject7"> (optional)</param>
        /// <returns>InlineResponse2008</returns>
        public InlineResponse2008 PostPortfolioPayoutModify(InlineObject7 inlineObject7 = default(InlineObject7))
        {
            var localVarResponse = PostPortfolioPayoutModifyWithHttpInfo(inlineObject7);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Modify a payout in a portfolio. Modify a payout in a portfolio.  Certain error conditions yield errors as follows:   |Error Condition|HTTP Error| |- -- -- --|- -- -- -- -| |At least one of the parameters &#x60;notation&#x60;, &#x60;type&#x60;, &#x60;amount&#x60;, &#x60;transaction&#x60; or &#x60;time&#x60; must be set.|400 Bad Request| |Invalid payout identifier.|400 Bad Request|
        /// </summary>
        /// <exception cref="FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inlineObject7"> (optional)</param>
        /// <returns>ApiResponse of InlineResponse2008</returns>
        public ApiResponse<InlineResponse2008> PostPortfolioPayoutModifyWithHttpInfo(InlineObject7 inlineObject7 = default(InlineObject7))
        {
            FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = inlineObject7;

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = PostPortfolioPayoutModifyResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Post<
            InlineResponse2008>("/portfolio/payout/modify", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostPortfolioPayoutModify", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// Modify a payout in a portfolio. Modify a payout in a portfolio.  Certain error conditions yield errors as follows:   |Error Condition|HTTP Error| |- -- -- --|- -- -- -- -| |At least one of the parameters &#x60;notation&#x60;, &#x60;type&#x60;, &#x60;amount&#x60;, &#x60;transaction&#x60; or &#x60;time&#x60; must be set.|400 Bad Request| |Invalid payout identifier.|400 Bad Request|
        /// </summary>
        /// <exception cref="FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inlineObject7"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse2008</returns>
        public async System.Threading.Tasks.Task<InlineResponse2008>PostPortfolioPayoutModifyAsync(InlineObject7 inlineObject7 = default(InlineObject7), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await PostPortfolioPayoutModifyWithHttpInfoAsync(inlineObject7, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Modify a payout in a portfolio. Modify a payout in a portfolio.  Certain error conditions yield errors as follows:   |Error Condition|HTTP Error| |- -- -- --|- -- -- -- -| |At least one of the parameters &#x60;notation&#x60;, &#x60;type&#x60;, &#x60;amount&#x60;, &#x60;transaction&#x60; or &#x60;time&#x60; must be set.|400 Bad Request| |Invalid payout identifier.|400 Bad Request|
        /// </summary>
        /// <exception cref="FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inlineObject7"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse2008)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse2008>> PostPortfolioPayoutModifyWithHttpInfoAsync(InlineObject7 inlineObject7 = default(InlineObject7), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = inlineObject7;

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = PostPortfolioPayoutModifyResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<InlineResponse2008>("/portfolio/payout/modify", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostPortfolioPayoutModify", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List all closed positions of a portfolio. List all closed positions of a portfolio.
        /// </summary>
        /// <exception cref="FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inlineObject8"> (optional)</param>
        /// <returns>InlineResponse20010</returns>
        public InlineResponse20010 PostPortfolioPositionClosedList(InlineObject8 inlineObject8 = default(InlineObject8))
        {
            var localVarResponse = PostPortfolioPositionClosedListWithHttpInfo(inlineObject8);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List all closed positions of a portfolio. List all closed positions of a portfolio.
        /// </summary>
        /// <exception cref="FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inlineObject8"> (optional)</param>
        /// <returns>ApiResponse of InlineResponse20010</returns>
        public ApiResponse<InlineResponse20010> PostPortfolioPositionClosedListWithHttpInfo(InlineObject8 inlineObject8 = default(InlineObject8))
        {
            FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = inlineObject8;

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = PostPortfolioPositionClosedListResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Post<
            InlineResponse20010>("/portfolio/position/closed/list", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostPortfolioPositionClosedList", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// List all closed positions of a portfolio. List all closed positions of a portfolio.
        /// </summary>
        /// <exception cref="FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inlineObject8"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse20010</returns>
        public async System.Threading.Tasks.Task<InlineResponse20010>PostPortfolioPositionClosedListAsync(InlineObject8 inlineObject8 = default(InlineObject8), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await PostPortfolioPositionClosedListWithHttpInfoAsync(inlineObject8, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List all closed positions of a portfolio. List all closed positions of a portfolio.
        /// </summary>
        /// <exception cref="FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inlineObject8"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse20010)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20010>> PostPortfolioPositionClosedListWithHttpInfoAsync(InlineObject8 inlineObject8 = default(InlineObject8), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = inlineObject8;

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = PostPortfolioPositionClosedListResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<InlineResponse20010>("/portfolio/position/closed/list", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostPortfolioPositionClosedList", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Add a cash transaction to a portfolio. Add a cash transaction to a portfolio.  Certain error conditions yield errors as follows:   |Error Condition|HTTP Error| |- -- -- --|- -- -- -- -| |The number of transactions would exceed 1000.|400 Bad Request|
        /// </summary>
        /// <exception cref="FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inlineObject12"> (optional)</param>
        /// <returns>InlineResponse2012</returns>
        public InlineResponse2012 PostPortfolioTransactionCashCreate(InlineObject12 inlineObject12 = default(InlineObject12))
        {
            var localVarResponse = PostPortfolioTransactionCashCreateWithHttpInfo(inlineObject12);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Add a cash transaction to a portfolio. Add a cash transaction to a portfolio.  Certain error conditions yield errors as follows:   |Error Condition|HTTP Error| |- -- -- --|- -- -- -- -| |The number of transactions would exceed 1000.|400 Bad Request|
        /// </summary>
        /// <exception cref="FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inlineObject12"> (optional)</param>
        /// <returns>ApiResponse of InlineResponse2012</returns>
        public ApiResponse<InlineResponse2012> PostPortfolioTransactionCashCreateWithHttpInfo(InlineObject12 inlineObject12 = default(InlineObject12))
        {
            FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = inlineObject12;

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = PostPortfolioTransactionCashCreateResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Post<
            InlineResponse2012>("/portfolio/transaction/cash/create", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostPortfolioTransactionCashCreate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// Add a cash transaction to a portfolio. Add a cash transaction to a portfolio.  Certain error conditions yield errors as follows:   |Error Condition|HTTP Error| |- -- -- --|- -- -- -- -| |The number of transactions would exceed 1000.|400 Bad Request|
        /// </summary>
        /// <exception cref="FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inlineObject12"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse2012</returns>
        public async System.Threading.Tasks.Task<InlineResponse2012>PostPortfolioTransactionCashCreateAsync(InlineObject12 inlineObject12 = default(InlineObject12), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await PostPortfolioTransactionCashCreateWithHttpInfoAsync(inlineObject12, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Add a cash transaction to a portfolio. Add a cash transaction to a portfolio.  Certain error conditions yield errors as follows:   |Error Condition|HTTP Error| |- -- -- --|- -- -- -- -| |The number of transactions would exceed 1000.|400 Bad Request|
        /// </summary>
        /// <exception cref="FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inlineObject12"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse2012)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse2012>> PostPortfolioTransactionCashCreateWithHttpInfoAsync(InlineObject12 inlineObject12 = default(InlineObject12), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = inlineObject12;

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = PostPortfolioTransactionCashCreateResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<InlineResponse2012>("/portfolio/transaction/cash/create", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostPortfolioTransactionCashCreate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete a cash transaction. Delete a cash transaction.
        /// </summary>
        /// <exception cref="FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inlineObject13"> (optional)</param>
        /// <returns>InlineResponse2006</returns>
        public InlineResponse2006 PostPortfolioTransactionCashDelete(InlineObject13 inlineObject13 = default(InlineObject13))
        {
            var localVarResponse = PostPortfolioTransactionCashDeleteWithHttpInfo(inlineObject13);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Delete a cash transaction. Delete a cash transaction.
        /// </summary>
        /// <exception cref="FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inlineObject13"> (optional)</param>
        /// <returns>ApiResponse of InlineResponse2006</returns>
        public ApiResponse<InlineResponse2006> PostPortfolioTransactionCashDeleteWithHttpInfo(InlineObject13 inlineObject13 = default(InlineObject13))
        {
            FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = inlineObject13;

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = PostPortfolioTransactionCashDeleteResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Post<
            InlineResponse2006>("/portfolio/transaction/cash/delete", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostPortfolioTransactionCashDelete", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// Delete a cash transaction. Delete a cash transaction.
        /// </summary>
        /// <exception cref="FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inlineObject13"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse2006</returns>
        public async System.Threading.Tasks.Task<InlineResponse2006>PostPortfolioTransactionCashDeleteAsync(InlineObject13 inlineObject13 = default(InlineObject13), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await PostPortfolioTransactionCashDeleteWithHttpInfoAsync(inlineObject13, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Delete a cash transaction. Delete a cash transaction.
        /// </summary>
        /// <exception cref="FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inlineObject13"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse2006)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse2006>> PostPortfolioTransactionCashDeleteWithHttpInfoAsync(InlineObject13 inlineObject13 = default(InlineObject13), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = inlineObject13;

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = PostPortfolioTransactionCashDeleteResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<InlineResponse2006>("/portfolio/transaction/cash/delete", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostPortfolioTransactionCashDelete", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Add a transaction to a portfolio. Add a transaction to a portfolio.  Certain error conditions yield errors as follows:   |Error Condition|HTTP Error| |- -- -- --|- -- -- -- -| |The number of transactions would exceed 1000.|400 Bad Request|
        /// </summary>
        /// <exception cref="FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inlineObject9"> (optional)</param>
        /// <returns>InlineResponse2012</returns>
        public InlineResponse2012 PostPortfolioTransactionCreate(InlineObject9 inlineObject9 = default(InlineObject9))
        {
            var localVarResponse = PostPortfolioTransactionCreateWithHttpInfo(inlineObject9);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Add a transaction to a portfolio. Add a transaction to a portfolio.  Certain error conditions yield errors as follows:   |Error Condition|HTTP Error| |- -- -- --|- -- -- -- -| |The number of transactions would exceed 1000.|400 Bad Request|
        /// </summary>
        /// <exception cref="FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inlineObject9"> (optional)</param>
        /// <returns>ApiResponse of InlineResponse2012</returns>
        public ApiResponse<InlineResponse2012> PostPortfolioTransactionCreateWithHttpInfo(InlineObject9 inlineObject9 = default(InlineObject9))
        {
            FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = inlineObject9;

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = PostPortfolioTransactionCreateResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Post<
            InlineResponse2012>("/portfolio/transaction/create", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostPortfolioTransactionCreate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// Add a transaction to a portfolio. Add a transaction to a portfolio.  Certain error conditions yield errors as follows:   |Error Condition|HTTP Error| |- -- -- --|- -- -- -- -| |The number of transactions would exceed 1000.|400 Bad Request|
        /// </summary>
        /// <exception cref="FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inlineObject9"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse2012</returns>
        public async System.Threading.Tasks.Task<InlineResponse2012>PostPortfolioTransactionCreateAsync(InlineObject9 inlineObject9 = default(InlineObject9), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await PostPortfolioTransactionCreateWithHttpInfoAsync(inlineObject9, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Add a transaction to a portfolio. Add a transaction to a portfolio.  Certain error conditions yield errors as follows:   |Error Condition|HTTP Error| |- -- -- --|- -- -- -- -| |The number of transactions would exceed 1000.|400 Bad Request|
        /// </summary>
        /// <exception cref="FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inlineObject9"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse2012)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse2012>> PostPortfolioTransactionCreateWithHttpInfoAsync(InlineObject9 inlineObject9 = default(InlineObject9), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = inlineObject9;

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = PostPortfolioTransactionCreateResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<InlineResponse2012>("/portfolio/transaction/create", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostPortfolioTransactionCreate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete a transaction of a portfolio. Delete a transaction of a portfolio.
        /// </summary>
        /// <exception cref="FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inlineObject10"> (optional)</param>
        /// <returns>InlineResponse2006</returns>
        public InlineResponse2006 PostPortfolioTransactionDelete(InlineObject10 inlineObject10 = default(InlineObject10))
        {
            var localVarResponse = PostPortfolioTransactionDeleteWithHttpInfo(inlineObject10);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Delete a transaction of a portfolio. Delete a transaction of a portfolio.
        /// </summary>
        /// <exception cref="FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inlineObject10"> (optional)</param>
        /// <returns>ApiResponse of InlineResponse2006</returns>
        public ApiResponse<InlineResponse2006> PostPortfolioTransactionDeleteWithHttpInfo(InlineObject10 inlineObject10 = default(InlineObject10))
        {
            FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = inlineObject10;

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = PostPortfolioTransactionDeleteResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Post<
            InlineResponse2006>("/portfolio/transaction/delete", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostPortfolioTransactionDelete", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// Delete a transaction of a portfolio. Delete a transaction of a portfolio.
        /// </summary>
        /// <exception cref="FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inlineObject10"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse2006</returns>
        public async System.Threading.Tasks.Task<InlineResponse2006>PostPortfolioTransactionDeleteAsync(InlineObject10 inlineObject10 = default(InlineObject10), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await PostPortfolioTransactionDeleteWithHttpInfoAsync(inlineObject10, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Delete a transaction of a portfolio. Delete a transaction of a portfolio.
        /// </summary>
        /// <exception cref="FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inlineObject10"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse2006)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse2006>> PostPortfolioTransactionDeleteWithHttpInfoAsync(InlineObject10 inlineObject10 = default(InlineObject10), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = inlineObject10;

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = PostPortfolioTransactionDeleteResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<InlineResponse2006>("/portfolio/transaction/delete", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostPortfolioTransactionDelete", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Modify a transaction in a portfolio. Modify a transaction in a portfolio.  Certain error conditions yield errors as follows:   |Error Condition|HTTP Error| |- -- -- --|- -- -- -- -| |At least one of the parameters &#x60;numberShares&#x60;, &#x60;price&#x60;, &#x60;charges&#x60;, &#x60;exchangeRate&#x60; or &#x60;time&#x60; must be set.|400 Bad Request|
        /// </summary>
        /// <exception cref="FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inlineObject11"> (optional)</param>
        /// <returns>InlineResponse2008</returns>
        public InlineResponse2008 PostPortfolioTransactionModify(InlineObject11 inlineObject11 = default(InlineObject11))
        {
            var localVarResponse = PostPortfolioTransactionModifyWithHttpInfo(inlineObject11);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Modify a transaction in a portfolio. Modify a transaction in a portfolio.  Certain error conditions yield errors as follows:   |Error Condition|HTTP Error| |- -- -- --|- -- -- -- -| |At least one of the parameters &#x60;numberShares&#x60;, &#x60;price&#x60;, &#x60;charges&#x60;, &#x60;exchangeRate&#x60; or &#x60;time&#x60; must be set.|400 Bad Request|
        /// </summary>
        /// <exception cref="FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inlineObject11"> (optional)</param>
        /// <returns>ApiResponse of InlineResponse2008</returns>
        public ApiResponse<InlineResponse2008> PostPortfolioTransactionModifyWithHttpInfo(InlineObject11 inlineObject11 = default(InlineObject11))
        {
            FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = inlineObject11;

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = PostPortfolioTransactionModifyResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Post<
            InlineResponse2008>("/portfolio/transaction/modify", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostPortfolioTransactionModify", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// Modify a transaction in a portfolio. Modify a transaction in a portfolio.  Certain error conditions yield errors as follows:   |Error Condition|HTTP Error| |- -- -- --|- -- -- -- -| |At least one of the parameters &#x60;numberShares&#x60;, &#x60;price&#x60;, &#x60;charges&#x60;, &#x60;exchangeRate&#x60; or &#x60;time&#x60; must be set.|400 Bad Request|
        /// </summary>
        /// <exception cref="FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inlineObject11"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse2008</returns>
        public async System.Threading.Tasks.Task<InlineResponse2008>PostPortfolioTransactionModifyAsync(InlineObject11 inlineObject11 = default(InlineObject11), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await PostPortfolioTransactionModifyWithHttpInfoAsync(inlineObject11, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Modify a transaction in a portfolio. Modify a transaction in a portfolio.  Certain error conditions yield errors as follows:   |Error Condition|HTTP Error| |- -- -- --|- -- -- -- -| |At least one of the parameters &#x60;numberShares&#x60;, &#x60;price&#x60;, &#x60;charges&#x60;, &#x60;exchangeRate&#x60; or &#x60;time&#x60; must be set.|400 Bad Request|
        /// </summary>
        /// <exception cref="FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inlineObject11"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse2008)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse2008>> PostPortfolioTransactionModifyWithHttpInfoAsync(InlineObject11 inlineObject11 = default(InlineObject11), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = inlineObject11;

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = PostPortfolioTransactionModifyResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<InlineResponse2008>("/portfolio/transaction/modify", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostPortfolioTransactionModify", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
