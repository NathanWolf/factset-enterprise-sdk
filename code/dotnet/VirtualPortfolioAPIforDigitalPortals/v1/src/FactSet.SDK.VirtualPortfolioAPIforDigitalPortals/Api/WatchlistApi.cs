/*
 * Prime Developer Trial
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client;
using FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Model;
using FactSet.SDK.Utils.Authentication;

namespace FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IWatchlistApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Create a watchlist.
        /// </summary>
        /// <remarks>
        /// Create a watchlist.  Certain error conditions yield errors as follows:   |Error Condition|HTTP Error| |- -- -- --|- -- -- -- -| |The number of watchlists would exceed 100.|400 Bad Request|
        /// </remarks>
        /// <exception cref="FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>InlineResponse2012</returns>
        InlineResponse2012 WatchlistCreatePost(InlineObject9 body = default(InlineObject9));

        /// <summary>
        /// Create a watchlist.
        /// </summary>
        /// <remarks>
        /// Create a watchlist.  Certain error conditions yield errors as follows:   |Error Condition|HTTP Error| |- -- -- --|- -- -- -- -| |The number of watchlists would exceed 100.|400 Bad Request|
        /// </remarks>
        /// <exception cref="FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of InlineResponse2012</returns>
        ApiResponse<InlineResponse2012> WatchlistCreatePostWithHttpInfo(InlineObject9 body = default(InlineObject9));
        /// <summary>
        /// Delete a watchlist.
        /// </summary>
        /// <remarks>
        /// Delete a watchlist.
        /// </remarks>
        /// <exception cref="FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>InlineResponse200</returns>
        InlineResponse200 WatchlistDeletePost(InlineObject10 body = default(InlineObject10));

        /// <summary>
        /// Delete a watchlist.
        /// </summary>
        /// <remarks>
        /// Delete a watchlist.
        /// </remarks>
        /// <exception cref="FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of InlineResponse200</returns>
        ApiResponse<InlineResponse200> WatchlistDeletePostWithHttpInfo(InlineObject10 body = default(InlineObject10));
        /// <summary>
        /// List of watchlists.
        /// </summary>
        /// <remarks>
        /// List of watchlists.
        /// </remarks>
        /// <exception cref="FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="sort">Sortable attributes. The sort order is ascending unless it is prefixed with a minus sign, in which case it is descending. A list of at most 4 (possibly prefixed) attribute name(s) is allowed. (optional)</param>
        /// <returns>InlineResponse20010</returns>
        InlineResponse20010 WatchlistListGet(List<string> attributes = default(List<string>), List<string> sort = default(List<string>));

        /// <summary>
        /// List of watchlists.
        /// </summary>
        /// <remarks>
        /// List of watchlists.
        /// </remarks>
        /// <exception cref="FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="sort">Sortable attributes. The sort order is ascending unless it is prefixed with a minus sign, in which case it is descending. A list of at most 4 (possibly prefixed) attribute name(s) is allowed. (optional)</param>
        /// <returns>ApiResponse of InlineResponse20010</returns>
        ApiResponse<InlineResponse20010> WatchlistListGetWithHttpInfo(List<string> attributes = default(List<string>), List<string> sort = default(List<string>));
        /// <summary>
        /// Modify a watchlist.
        /// </summary>
        /// <remarks>
        /// Modify a watchlist.
        /// </remarks>
        /// <exception cref="FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>InlineResponse2003</returns>
        InlineResponse2003 WatchlistModifyPost(InlineObject11 body = default(InlineObject11));

        /// <summary>
        /// Modify a watchlist.
        /// </summary>
        /// <remarks>
        /// Modify a watchlist.
        /// </remarks>
        /// <exception cref="FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of InlineResponse2003</returns>
        ApiResponse<InlineResponse2003> WatchlistModifyPostWithHttpInfo(InlineObject11 body = default(InlineObject11));
        /// <summary>
        /// Add a position to a watchlist.
        /// </summary>
        /// <remarks>
        /// Add a position to a watchlist.  Certain error conditions yield errors as follows:   |Error Condition|HTTP Error| |- -- -- --|- -- -- -- -| |Maximum number of watchlist positions would exceed 100.|400 Bad Request| |The watchlist does not exist.|400 Bad Request| |The notation already exists in the watchlist.|400 Bad Request|
        /// </remarks>
        /// <exception cref="FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>InlineResponse2013</returns>
        InlineResponse2013 WatchlistPositionCreatePost(InlineObject12 body = default(InlineObject12));

        /// <summary>
        /// Add a position to a watchlist.
        /// </summary>
        /// <remarks>
        /// Add a position to a watchlist.  Certain error conditions yield errors as follows:   |Error Condition|HTTP Error| |- -- -- --|- -- -- -- -| |Maximum number of watchlist positions would exceed 100.|400 Bad Request| |The watchlist does not exist.|400 Bad Request| |The notation already exists in the watchlist.|400 Bad Request|
        /// </remarks>
        /// <exception cref="FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of InlineResponse2013</returns>
        ApiResponse<InlineResponse2013> WatchlistPositionCreatePostWithHttpInfo(InlineObject12 body = default(InlineObject12));
        /// <summary>
        /// Delete a position of a watchlist.
        /// </summary>
        /// <remarks>
        /// Delete a position of a watchlist.
        /// </remarks>
        /// <exception cref="FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>InlineResponse2003</returns>
        InlineResponse2003 WatchlistPositionDeletePost(InlineObject13 body = default(InlineObject13));

        /// <summary>
        /// Delete a position of a watchlist.
        /// </summary>
        /// <remarks>
        /// Delete a position of a watchlist.
        /// </remarks>
        /// <exception cref="FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of InlineResponse2003</returns>
        ApiResponse<InlineResponse2003> WatchlistPositionDeletePostWithHttpInfo(InlineObject13 body = default(InlineObject13));
        /// <summary>
        /// List of positions of a watchlist.
        /// </summary>
        /// <remarks>
        /// List of positions of a watchlist.
        /// </remarks>
        /// <exception cref="FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of the watchlist.</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="sort">Sortable attributes. The sort order is ascending unless it is prefixed with a minus sign, in which case it is descending. A list of at most 2 (possibly prefixed) attribute name(s) is allowed. (optional)</param>
        /// <returns>InlineResponse20011</returns>
        InlineResponse20011 WatchlistPositionListGet(string id, List<string> attributes = default(List<string>), List<string> sort = default(List<string>));

        /// <summary>
        /// List of positions of a watchlist.
        /// </summary>
        /// <remarks>
        /// List of positions of a watchlist.
        /// </remarks>
        /// <exception cref="FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of the watchlist.</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="sort">Sortable attributes. The sort order is ascending unless it is prefixed with a minus sign, in which case it is descending. A list of at most 2 (possibly prefixed) attribute name(s) is allowed. (optional)</param>
        /// <returns>ApiResponse of InlineResponse20011</returns>
        ApiResponse<InlineResponse20011> WatchlistPositionListGetWithHttpInfo(string id, List<string> attributes = default(List<string>), List<string> sort = default(List<string>));
        /// <summary>
        /// Modify a position in a watchlist.
        /// </summary>
        /// <remarks>
        /// Modify a position in a watchlist.  Certain error conditions yield errors as follows:   |Error Condition|HTTP Error| |- -- -- --|- -- -- -- -| |At least one of the parameters &#x60;notation&#x60; or &#x60;comment&#x60; must be set.|400 Bad Request| |The notation already exists in the watchlist.|400 Bad Request|
        /// </remarks>
        /// <exception cref="FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>InlineResponse2003</returns>
        InlineResponse2003 WatchlistPositionModifyPost(InlineObject14 body = default(InlineObject14));

        /// <summary>
        /// Modify a position in a watchlist.
        /// </summary>
        /// <remarks>
        /// Modify a position in a watchlist.  Certain error conditions yield errors as follows:   |Error Condition|HTTP Error| |- -- -- --|- -- -- -- -| |At least one of the parameters &#x60;notation&#x60; or &#x60;comment&#x60; must be set.|400 Bad Request| |The notation already exists in the watchlist.|400 Bad Request|
        /// </remarks>
        /// <exception cref="FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of InlineResponse2003</returns>
        ApiResponse<InlineResponse2003> WatchlistPositionModifyPostWithHttpInfo(InlineObject14 body = default(InlineObject14));
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IWatchlistApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Create a watchlist.
        /// </summary>
        /// <remarks>
        /// Create a watchlist.  Certain error conditions yield errors as follows:   |Error Condition|HTTP Error| |- -- -- --|- -- -- -- -| |The number of watchlists would exceed 100.|400 Bad Request|
        /// </remarks>
        /// <exception cref="FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse2012</returns>
        System.Threading.Tasks.Task<InlineResponse2012> WatchlistCreatePostAsync(InlineObject9 body = default(InlineObject9), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create a watchlist.
        /// </summary>
        /// <remarks>
        /// Create a watchlist.  Certain error conditions yield errors as follows:   |Error Condition|HTTP Error| |- -- -- --|- -- -- -- -| |The number of watchlists would exceed 100.|400 Bad Request|
        /// </remarks>
        /// <exception cref="FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse2012)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse2012>> WatchlistCreatePostWithHttpInfoAsync(InlineObject9 body = default(InlineObject9), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Delete a watchlist.
        /// </summary>
        /// <remarks>
        /// Delete a watchlist.
        /// </remarks>
        /// <exception cref="FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse200</returns>
        System.Threading.Tasks.Task<InlineResponse200> WatchlistDeletePostAsync(InlineObject10 body = default(InlineObject10), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Delete a watchlist.
        /// </summary>
        /// <remarks>
        /// Delete a watchlist.
        /// </remarks>
        /// <exception cref="FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse200)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse200>> WatchlistDeletePostWithHttpInfoAsync(InlineObject10 body = default(InlineObject10), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// List of watchlists.
        /// </summary>
        /// <remarks>
        /// List of watchlists.
        /// </remarks>
        /// <exception cref="FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="sort">Sortable attributes. The sort order is ascending unless it is prefixed with a minus sign, in which case it is descending. A list of at most 4 (possibly prefixed) attribute name(s) is allowed. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse20010</returns>
        System.Threading.Tasks.Task<InlineResponse20010> WatchlistListGetAsync(List<string> attributes = default(List<string>), List<string> sort = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// List of watchlists.
        /// </summary>
        /// <remarks>
        /// List of watchlists.
        /// </remarks>
        /// <exception cref="FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="sort">Sortable attributes. The sort order is ascending unless it is prefixed with a minus sign, in which case it is descending. A list of at most 4 (possibly prefixed) attribute name(s) is allowed. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse20010)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20010>> WatchlistListGetWithHttpInfoAsync(List<string> attributes = default(List<string>), List<string> sort = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Modify a watchlist.
        /// </summary>
        /// <remarks>
        /// Modify a watchlist.
        /// </remarks>
        /// <exception cref="FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse2003</returns>
        System.Threading.Tasks.Task<InlineResponse2003> WatchlistModifyPostAsync(InlineObject11 body = default(InlineObject11), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Modify a watchlist.
        /// </summary>
        /// <remarks>
        /// Modify a watchlist.
        /// </remarks>
        /// <exception cref="FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse2003)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse2003>> WatchlistModifyPostWithHttpInfoAsync(InlineObject11 body = default(InlineObject11), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Add a position to a watchlist.
        /// </summary>
        /// <remarks>
        /// Add a position to a watchlist.  Certain error conditions yield errors as follows:   |Error Condition|HTTP Error| |- -- -- --|- -- -- -- -| |Maximum number of watchlist positions would exceed 100.|400 Bad Request| |The watchlist does not exist.|400 Bad Request| |The notation already exists in the watchlist.|400 Bad Request|
        /// </remarks>
        /// <exception cref="FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse2013</returns>
        System.Threading.Tasks.Task<InlineResponse2013> WatchlistPositionCreatePostAsync(InlineObject12 body = default(InlineObject12), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Add a position to a watchlist.
        /// </summary>
        /// <remarks>
        /// Add a position to a watchlist.  Certain error conditions yield errors as follows:   |Error Condition|HTTP Error| |- -- -- --|- -- -- -- -| |Maximum number of watchlist positions would exceed 100.|400 Bad Request| |The watchlist does not exist.|400 Bad Request| |The notation already exists in the watchlist.|400 Bad Request|
        /// </remarks>
        /// <exception cref="FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse2013)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse2013>> WatchlistPositionCreatePostWithHttpInfoAsync(InlineObject12 body = default(InlineObject12), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Delete a position of a watchlist.
        /// </summary>
        /// <remarks>
        /// Delete a position of a watchlist.
        /// </remarks>
        /// <exception cref="FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse2003</returns>
        System.Threading.Tasks.Task<InlineResponse2003> WatchlistPositionDeletePostAsync(InlineObject13 body = default(InlineObject13), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Delete a position of a watchlist.
        /// </summary>
        /// <remarks>
        /// Delete a position of a watchlist.
        /// </remarks>
        /// <exception cref="FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse2003)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse2003>> WatchlistPositionDeletePostWithHttpInfoAsync(InlineObject13 body = default(InlineObject13), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// List of positions of a watchlist.
        /// </summary>
        /// <remarks>
        /// List of positions of a watchlist.
        /// </remarks>
        /// <exception cref="FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of the watchlist.</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="sort">Sortable attributes. The sort order is ascending unless it is prefixed with a minus sign, in which case it is descending. A list of at most 2 (possibly prefixed) attribute name(s) is allowed. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse20011</returns>
        System.Threading.Tasks.Task<InlineResponse20011> WatchlistPositionListGetAsync(string id, List<string> attributes = default(List<string>), List<string> sort = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// List of positions of a watchlist.
        /// </summary>
        /// <remarks>
        /// List of positions of a watchlist.
        /// </remarks>
        /// <exception cref="FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of the watchlist.</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="sort">Sortable attributes. The sort order is ascending unless it is prefixed with a minus sign, in which case it is descending. A list of at most 2 (possibly prefixed) attribute name(s) is allowed. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse20011)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20011>> WatchlistPositionListGetWithHttpInfoAsync(string id, List<string> attributes = default(List<string>), List<string> sort = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Modify a position in a watchlist.
        /// </summary>
        /// <remarks>
        /// Modify a position in a watchlist.  Certain error conditions yield errors as follows:   |Error Condition|HTTP Error| |- -- -- --|- -- -- -- -| |At least one of the parameters &#x60;notation&#x60; or &#x60;comment&#x60; must be set.|400 Bad Request| |The notation already exists in the watchlist.|400 Bad Request|
        /// </remarks>
        /// <exception cref="FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse2003</returns>
        System.Threading.Tasks.Task<InlineResponse2003> WatchlistPositionModifyPostAsync(InlineObject14 body = default(InlineObject14), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Modify a position in a watchlist.
        /// </summary>
        /// <remarks>
        /// Modify a position in a watchlist.  Certain error conditions yield errors as follows:   |Error Condition|HTTP Error| |- -- -- --|- -- -- -- -| |At least one of the parameters &#x60;notation&#x60; or &#x60;comment&#x60; must be set.|400 Bad Request| |The notation already exists in the watchlist.|400 Bad Request|
        /// </remarks>
        /// <exception cref="FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse2003)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse2003>> WatchlistPositionModifyPostWithHttpInfoAsync(InlineObject14 body = default(InlineObject14), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IWatchlistApi : IWatchlistApiSync, IWatchlistApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class WatchlistApi : IWatchlistApi
    {
        private FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="WatchlistApi"/> class.
        /// </summary>
        /// <returns></returns>
        public WatchlistApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="WatchlistApi"/> class.
        /// </summary>
        /// <returns></returns>
        public WatchlistApi(string basePath)
        {
            this.Configuration = FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.Configuration.MergeConfigurations(
                FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.GlobalConfiguration.Instance,
                new FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.Configuration { BasePath = basePath }
            );
            this.Client = new FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="WatchlistApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public WatchlistApi(FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.Configuration.MergeConfigurations(
                FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="WatchlistApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public WatchlistApi(FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ISynchronousClient client, FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.IAsynchronousClient asyncClient, FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Create a watchlist. Create a watchlist.  Certain error conditions yield errors as follows:   |Error Condition|HTTP Error| |- -- -- --|- -- -- -- -| |The number of watchlists would exceed 100.|400 Bad Request|
        /// </summary>
        /// <exception cref="FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>InlineResponse2012</returns>
        public InlineResponse2012 WatchlistCreatePost(InlineObject9 body = default(InlineObject9))
        {
            FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ApiResponse<InlineResponse2012> localVarResponse = WatchlistCreatePostWithHttpInfo(body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a watchlist. Create a watchlist.  Certain error conditions yield errors as follows:   |Error Condition|HTTP Error| |- -- -- --|- -- -- -- -| |The number of watchlists would exceed 100.|400 Bad Request|
        /// </summary>
        /// <exception cref="FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of InlineResponse2012</returns>
        public FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ApiResponse<InlineResponse2012> WatchlistCreatePostWithHttpInfo(InlineObject9 body = default(InlineObject9))
        {
            FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<InlineResponse2012>("/watchlist/create", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("WatchlistCreatePost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a watchlist. Create a watchlist.  Certain error conditions yield errors as follows:   |Error Condition|HTTP Error| |- -- -- --|- -- -- -- -| |The number of watchlists would exceed 100.|400 Bad Request|
        /// </summary>
        /// <exception cref="FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse2012</returns>
        public async System.Threading.Tasks.Task<InlineResponse2012> WatchlistCreatePostAsync(InlineObject9 body = default(InlineObject9), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ApiResponse<InlineResponse2012> localVarResponse = await WatchlistCreatePostWithHttpInfoAsync(body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a watchlist. Create a watchlist.  Certain error conditions yield errors as follows:   |Error Condition|HTTP Error| |- -- -- --|- -- -- -- -| |The number of watchlists would exceed 100.|400 Bad Request|
        /// </summary>
        /// <exception cref="FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse2012)</returns>
        public async System.Threading.Tasks.Task<FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ApiResponse<InlineResponse2012>> WatchlistCreatePostWithHttpInfoAsync(InlineObject9 body = default(InlineObject9), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<InlineResponse2012>("/watchlist/create", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("WatchlistCreatePost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete a watchlist. Delete a watchlist.
        /// </summary>
        /// <exception cref="FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>InlineResponse200</returns>
        public InlineResponse200 WatchlistDeletePost(InlineObject10 body = default(InlineObject10))
        {
            FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ApiResponse<InlineResponse200> localVarResponse = WatchlistDeletePostWithHttpInfo(body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Delete a watchlist. Delete a watchlist.
        /// </summary>
        /// <exception cref="FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of InlineResponse200</returns>
        public FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ApiResponse<InlineResponse200> WatchlistDeletePostWithHttpInfo(InlineObject10 body = default(InlineObject10))
        {
            FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<InlineResponse200>("/watchlist/delete", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("WatchlistDeletePost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete a watchlist. Delete a watchlist.
        /// </summary>
        /// <exception cref="FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse200</returns>
        public async System.Threading.Tasks.Task<InlineResponse200> WatchlistDeletePostAsync(InlineObject10 body = default(InlineObject10), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ApiResponse<InlineResponse200> localVarResponse = await WatchlistDeletePostWithHttpInfoAsync(body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Delete a watchlist. Delete a watchlist.
        /// </summary>
        /// <exception cref="FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse200)</returns>
        public async System.Threading.Tasks.Task<FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ApiResponse<InlineResponse200>> WatchlistDeletePostWithHttpInfoAsync(InlineObject10 body = default(InlineObject10), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<InlineResponse200>("/watchlist/delete", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("WatchlistDeletePost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List of watchlists. List of watchlists.
        /// </summary>
        /// <exception cref="FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="sort">Sortable attributes. The sort order is ascending unless it is prefixed with a minus sign, in which case it is descending. A list of at most 4 (possibly prefixed) attribute name(s) is allowed. (optional)</param>
        /// <returns>InlineResponse20010</returns>
        public InlineResponse20010 WatchlistListGet(List<string> attributes = default(List<string>), List<string> sort = default(List<string>))
        {
            FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ApiResponse<InlineResponse20010> localVarResponse = WatchlistListGetWithHttpInfo(attributes, sort);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List of watchlists. List of watchlists.
        /// </summary>
        /// <exception cref="FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="sort">Sortable attributes. The sort order is ascending unless it is prefixed with a minus sign, in which case it is descending. A list of at most 4 (possibly prefixed) attribute name(s) is allowed. (optional)</param>
        /// <returns>ApiResponse of InlineResponse20010</returns>
        public FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ApiResponse<InlineResponse20010> WatchlistListGetWithHttpInfo(List<string> attributes = default(List<string>), List<string> sort = default(List<string>))
        {
            FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (attributes != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ClientUtils.ParameterToMultiMap("csv", "_attributes", attributes));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ClientUtils.ParameterToMultiMap("csv", "_sort", sort));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<InlineResponse20010>("/watchlist/list", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("WatchlistListGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List of watchlists. List of watchlists.
        /// </summary>
        /// <exception cref="FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="sort">Sortable attributes. The sort order is ascending unless it is prefixed with a minus sign, in which case it is descending. A list of at most 4 (possibly prefixed) attribute name(s) is allowed. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse20010</returns>
        public async System.Threading.Tasks.Task<InlineResponse20010> WatchlistListGetAsync(List<string> attributes = default(List<string>), List<string> sort = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ApiResponse<InlineResponse20010> localVarResponse = await WatchlistListGetWithHttpInfoAsync(attributes, sort, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List of watchlists. List of watchlists.
        /// </summary>
        /// <exception cref="FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="sort">Sortable attributes. The sort order is ascending unless it is prefixed with a minus sign, in which case it is descending. A list of at most 4 (possibly prefixed) attribute name(s) is allowed. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse20010)</returns>
        public async System.Threading.Tasks.Task<FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ApiResponse<InlineResponse20010>> WatchlistListGetWithHttpInfoAsync(List<string> attributes = default(List<string>), List<string> sort = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (attributes != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ClientUtils.ParameterToMultiMap("csv", "_attributes", attributes));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ClientUtils.ParameterToMultiMap("csv", "_sort", sort));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<InlineResponse20010>("/watchlist/list", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("WatchlistListGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Modify a watchlist. Modify a watchlist.
        /// </summary>
        /// <exception cref="FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>InlineResponse2003</returns>
        public InlineResponse2003 WatchlistModifyPost(InlineObject11 body = default(InlineObject11))
        {
            FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ApiResponse<InlineResponse2003> localVarResponse = WatchlistModifyPostWithHttpInfo(body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Modify a watchlist. Modify a watchlist.
        /// </summary>
        /// <exception cref="FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of InlineResponse2003</returns>
        public FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ApiResponse<InlineResponse2003> WatchlistModifyPostWithHttpInfo(InlineObject11 body = default(InlineObject11))
        {
            FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<InlineResponse2003>("/watchlist/modify", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("WatchlistModifyPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Modify a watchlist. Modify a watchlist.
        /// </summary>
        /// <exception cref="FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse2003</returns>
        public async System.Threading.Tasks.Task<InlineResponse2003> WatchlistModifyPostAsync(InlineObject11 body = default(InlineObject11), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ApiResponse<InlineResponse2003> localVarResponse = await WatchlistModifyPostWithHttpInfoAsync(body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Modify a watchlist. Modify a watchlist.
        /// </summary>
        /// <exception cref="FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse2003)</returns>
        public async System.Threading.Tasks.Task<FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ApiResponse<InlineResponse2003>> WatchlistModifyPostWithHttpInfoAsync(InlineObject11 body = default(InlineObject11), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<InlineResponse2003>("/watchlist/modify", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("WatchlistModifyPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Add a position to a watchlist. Add a position to a watchlist.  Certain error conditions yield errors as follows:   |Error Condition|HTTP Error| |- -- -- --|- -- -- -- -| |Maximum number of watchlist positions would exceed 100.|400 Bad Request| |The watchlist does not exist.|400 Bad Request| |The notation already exists in the watchlist.|400 Bad Request|
        /// </summary>
        /// <exception cref="FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>InlineResponse2013</returns>
        public InlineResponse2013 WatchlistPositionCreatePost(InlineObject12 body = default(InlineObject12))
        {
            FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ApiResponse<InlineResponse2013> localVarResponse = WatchlistPositionCreatePostWithHttpInfo(body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Add a position to a watchlist. Add a position to a watchlist.  Certain error conditions yield errors as follows:   |Error Condition|HTTP Error| |- -- -- --|- -- -- -- -| |Maximum number of watchlist positions would exceed 100.|400 Bad Request| |The watchlist does not exist.|400 Bad Request| |The notation already exists in the watchlist.|400 Bad Request|
        /// </summary>
        /// <exception cref="FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of InlineResponse2013</returns>
        public FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ApiResponse<InlineResponse2013> WatchlistPositionCreatePostWithHttpInfo(InlineObject12 body = default(InlineObject12))
        {
            FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<InlineResponse2013>("/watchlist/position/create", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("WatchlistPositionCreatePost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Add a position to a watchlist. Add a position to a watchlist.  Certain error conditions yield errors as follows:   |Error Condition|HTTP Error| |- -- -- --|- -- -- -- -| |Maximum number of watchlist positions would exceed 100.|400 Bad Request| |The watchlist does not exist.|400 Bad Request| |The notation already exists in the watchlist.|400 Bad Request|
        /// </summary>
        /// <exception cref="FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse2013</returns>
        public async System.Threading.Tasks.Task<InlineResponse2013> WatchlistPositionCreatePostAsync(InlineObject12 body = default(InlineObject12), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ApiResponse<InlineResponse2013> localVarResponse = await WatchlistPositionCreatePostWithHttpInfoAsync(body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Add a position to a watchlist. Add a position to a watchlist.  Certain error conditions yield errors as follows:   |Error Condition|HTTP Error| |- -- -- --|- -- -- -- -| |Maximum number of watchlist positions would exceed 100.|400 Bad Request| |The watchlist does not exist.|400 Bad Request| |The notation already exists in the watchlist.|400 Bad Request|
        /// </summary>
        /// <exception cref="FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse2013)</returns>
        public async System.Threading.Tasks.Task<FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ApiResponse<InlineResponse2013>> WatchlistPositionCreatePostWithHttpInfoAsync(InlineObject12 body = default(InlineObject12), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<InlineResponse2013>("/watchlist/position/create", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("WatchlistPositionCreatePost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete a position of a watchlist. Delete a position of a watchlist.
        /// </summary>
        /// <exception cref="FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>InlineResponse2003</returns>
        public InlineResponse2003 WatchlistPositionDeletePost(InlineObject13 body = default(InlineObject13))
        {
            FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ApiResponse<InlineResponse2003> localVarResponse = WatchlistPositionDeletePostWithHttpInfo(body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Delete a position of a watchlist. Delete a position of a watchlist.
        /// </summary>
        /// <exception cref="FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of InlineResponse2003</returns>
        public FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ApiResponse<InlineResponse2003> WatchlistPositionDeletePostWithHttpInfo(InlineObject13 body = default(InlineObject13))
        {
            FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<InlineResponse2003>("/watchlist/position/delete", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("WatchlistPositionDeletePost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete a position of a watchlist. Delete a position of a watchlist.
        /// </summary>
        /// <exception cref="FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse2003</returns>
        public async System.Threading.Tasks.Task<InlineResponse2003> WatchlistPositionDeletePostAsync(InlineObject13 body = default(InlineObject13), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ApiResponse<InlineResponse2003> localVarResponse = await WatchlistPositionDeletePostWithHttpInfoAsync(body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Delete a position of a watchlist. Delete a position of a watchlist.
        /// </summary>
        /// <exception cref="FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse2003)</returns>
        public async System.Threading.Tasks.Task<FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ApiResponse<InlineResponse2003>> WatchlistPositionDeletePostWithHttpInfoAsync(InlineObject13 body = default(InlineObject13), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<InlineResponse2003>("/watchlist/position/delete", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("WatchlistPositionDeletePost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List of positions of a watchlist. List of positions of a watchlist.
        /// </summary>
        /// <exception cref="FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of the watchlist.</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="sort">Sortable attributes. The sort order is ascending unless it is prefixed with a minus sign, in which case it is descending. A list of at most 2 (possibly prefixed) attribute name(s) is allowed. (optional)</param>
        /// <returns>InlineResponse20011</returns>
        public InlineResponse20011 WatchlistPositionListGet(string id, List<string> attributes = default(List<string>), List<string> sort = default(List<string>))
        {
            FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ApiResponse<InlineResponse20011> localVarResponse = WatchlistPositionListGetWithHttpInfo(id, attributes, sort);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List of positions of a watchlist. List of positions of a watchlist.
        /// </summary>
        /// <exception cref="FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of the watchlist.</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="sort">Sortable attributes. The sort order is ascending unless it is prefixed with a minus sign, in which case it is descending. A list of at most 2 (possibly prefixed) attribute name(s) is allowed. (optional)</param>
        /// <returns>ApiResponse of InlineResponse20011</returns>
        public FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ApiResponse<InlineResponse20011> WatchlistPositionListGetWithHttpInfo(string id, List<string> attributes = default(List<string>), List<string> sort = default(List<string>))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ApiException(400, "Missing required parameter 'id' when calling WatchlistApi->WatchlistPositionListGet");

            FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ClientUtils.ParameterToMultiMap("", "id", id));
            if (attributes != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ClientUtils.ParameterToMultiMap("csv", "_attributes", attributes));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ClientUtils.ParameterToMultiMap("csv", "_sort", sort));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<InlineResponse20011>("/watchlist/position/list", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("WatchlistPositionListGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List of positions of a watchlist. List of positions of a watchlist.
        /// </summary>
        /// <exception cref="FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of the watchlist.</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="sort">Sortable attributes. The sort order is ascending unless it is prefixed with a minus sign, in which case it is descending. A list of at most 2 (possibly prefixed) attribute name(s) is allowed. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse20011</returns>
        public async System.Threading.Tasks.Task<InlineResponse20011> WatchlistPositionListGetAsync(string id, List<string> attributes = default(List<string>), List<string> sort = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ApiResponse<InlineResponse20011> localVarResponse = await WatchlistPositionListGetWithHttpInfoAsync(id, attributes, sort, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List of positions of a watchlist. List of positions of a watchlist.
        /// </summary>
        /// <exception cref="FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of the watchlist.</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="sort">Sortable attributes. The sort order is ascending unless it is prefixed with a minus sign, in which case it is descending. A list of at most 2 (possibly prefixed) attribute name(s) is allowed. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse20011)</returns>
        public async System.Threading.Tasks.Task<FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ApiResponse<InlineResponse20011>> WatchlistPositionListGetWithHttpInfoAsync(string id, List<string> attributes = default(List<string>), List<string> sort = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ApiException(400, "Missing required parameter 'id' when calling WatchlistApi->WatchlistPositionListGet");


            FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ClientUtils.ParameterToMultiMap("", "id", id));
            if (attributes != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ClientUtils.ParameterToMultiMap("csv", "_attributes", attributes));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ClientUtils.ParameterToMultiMap("csv", "_sort", sort));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<InlineResponse20011>("/watchlist/position/list", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("WatchlistPositionListGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Modify a position in a watchlist. Modify a position in a watchlist.  Certain error conditions yield errors as follows:   |Error Condition|HTTP Error| |- -- -- --|- -- -- -- -| |At least one of the parameters &#x60;notation&#x60; or &#x60;comment&#x60; must be set.|400 Bad Request| |The notation already exists in the watchlist.|400 Bad Request|
        /// </summary>
        /// <exception cref="FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>InlineResponse2003</returns>
        public InlineResponse2003 WatchlistPositionModifyPost(InlineObject14 body = default(InlineObject14))
        {
            FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ApiResponse<InlineResponse2003> localVarResponse = WatchlistPositionModifyPostWithHttpInfo(body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Modify a position in a watchlist. Modify a position in a watchlist.  Certain error conditions yield errors as follows:   |Error Condition|HTTP Error| |- -- -- --|- -- -- -- -| |At least one of the parameters &#x60;notation&#x60; or &#x60;comment&#x60; must be set.|400 Bad Request| |The notation already exists in the watchlist.|400 Bad Request|
        /// </summary>
        /// <exception cref="FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of InlineResponse2003</returns>
        public FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ApiResponse<InlineResponse2003> WatchlistPositionModifyPostWithHttpInfo(InlineObject14 body = default(InlineObject14))
        {
            FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<InlineResponse2003>("/watchlist/position/modify", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("WatchlistPositionModifyPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Modify a position in a watchlist. Modify a position in a watchlist.  Certain error conditions yield errors as follows:   |Error Condition|HTTP Error| |- -- -- --|- -- -- -- -| |At least one of the parameters &#x60;notation&#x60; or &#x60;comment&#x60; must be set.|400 Bad Request| |The notation already exists in the watchlist.|400 Bad Request|
        /// </summary>
        /// <exception cref="FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse2003</returns>
        public async System.Threading.Tasks.Task<InlineResponse2003> WatchlistPositionModifyPostAsync(InlineObject14 body = default(InlineObject14), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ApiResponse<InlineResponse2003> localVarResponse = await WatchlistPositionModifyPostWithHttpInfoAsync(body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Modify a position in a watchlist. Modify a position in a watchlist.  Certain error conditions yield errors as follows:   |Error Condition|HTTP Error| |- -- -- --|- -- -- -- -| |At least one of the parameters &#x60;notation&#x60; or &#x60;comment&#x60; must be set.|400 Bad Request| |The notation already exists in the watchlist.|400 Bad Request|
        /// </summary>
        /// <exception cref="FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse2003)</returns>
        public async System.Threading.Tasks.Task<FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ApiResponse<InlineResponse2003>> WatchlistPositionModifyPostWithHttpInfoAsync(InlineObject14 body = default(InlineObject14), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<InlineResponse2003>("/watchlist/position/modify", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("WatchlistPositionModifyPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
