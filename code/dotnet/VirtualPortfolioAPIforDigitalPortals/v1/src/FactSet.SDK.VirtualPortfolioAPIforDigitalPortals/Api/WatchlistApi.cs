/*
 * Virtual Portfolio API For Digital Portals
 *
 * The virtual portfolio enables the analysis of the current allocation, broken down by asset classes, currencies,  regions, sectors, style, capitalization, style, maturity, risk, and more.  Relative performance and monthly returns can be measured against benchmarks, using portfolio position transaction (buy/sell) data. Both the realized profit/loss (resulting from closed transactions) and the potential profit/loss (resulting from positions that have not been sold yet) can be queried.  Portfolio endpoints allow creation and managing a transaction-based portfolio. A transaction-based portfolio contains a gapless history of all transactions to be able to accurately reproduce the investment record of the portfolio.  An instrument added to a portfolio is called a position. Each position consists of multiple buy and sell events called transactions. Portfolios are limited to 100 positions and 1000 transactions; adding more will result in an error.  A transaction-based portfolio can consist of the following transactions:  * A buy transaction opens or adds to a position in the portfolio, decreasing the cash value by the purchase price at the same time. If there is not enough cash in the portfolio to cover the transaction, the cash value becomes negative. * A sell transaction decreases or closes a position in the portfolio, increasing the cash value by the sale price at the same time. A sell transaction can only be created if the number of shares of a given position exceeds the number being sold. * A cash transaction increases or decreases the cash position of the portfolio. A portfolio can have only one cash position. The cash position is tracked automatically as each buy or sell transaction implicitly affects it. The cash position can be negative as a buy transaction does not check whether enough cash is available. The cash position does not generate interest; its performance is always 0%.  The chosen prices and key figures in the endpoints are using the same quality, which is configurable per application. Possible values are delayed (DLY), best (BST), end-of-day (EOD) or realtime (RLT). The default value for the price quality is BST.  The portfolio endpoints use different methods to calculate key figures. All key figures except the risk in /portfolio/detail/list, /portfolio/get, and /portfolio/position/list are calculated on-the-fly with current prices. The risk key figures are calculated on-the-fly with current prices, but the result is cached for 24 hours. The key figures in /portfolio/evaluation/list are calculated on end-of-day basis.  The Virtual Portfolio API for Digital Portals is fully integrated with the corresponding Quotes API, allowing access to detailed price and performance information of instruments in a watchlist. This also supports basic security identifier cross-reference. To complement the Watchlist API and Virtual Portfolio API with direct access to price histories, please refer to the Time Series API for Digital Portals.
 *
 * The version of the OpenAPI document: 2
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client;
using FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Model;
using FactSet.SDK.Utils.Authentication;

namespace FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IWatchlistApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Details of a watchlist.
        /// </summary>
        /// <remarks>
        /// Details of a watchlist.
        /// </remarks>
        /// <exception cref="FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <returns>InlineResponse20012</returns>
        InlineResponse20012 GetWatchlistGet(string id, List<string> attributes = default(List<string>));

        /// <summary>
        /// Details of a watchlist.
        /// </summary>
        /// <remarks>
        /// Details of a watchlist.
        /// </remarks>
        /// <exception cref="FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <returns>ApiResponse of InlineResponse20012</returns>
        ApiResponse<InlineResponse20012> GetWatchlistGetWithHttpInfo(string id, List<string> attributes = default(List<string>));
        /// <summary>
        /// List of watchlists.
        /// </summary>
        /// <remarks>
        /// List of watchlists.
        /// </remarks>
        /// <exception cref="FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="sort">Sortable attributes. The sort order is ascending unless it is prefixed with a minus sign, in which case it is descending. A list of at most 4 (possibly prefixed) attribute name(s) is allowed. (optional)</param>
        /// <returns>InlineResponse20013</returns>
        InlineResponse20013 GetWatchlistList(List<string> attributes = default(List<string>), List<string> sort = default(List<string>));

        /// <summary>
        /// List of watchlists.
        /// </summary>
        /// <remarks>
        /// List of watchlists.
        /// </remarks>
        /// <exception cref="FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="sort">Sortable attributes. The sort order is ascending unless it is prefixed with a minus sign, in which case it is descending. A list of at most 4 (possibly prefixed) attribute name(s) is allowed. (optional)</param>
        /// <returns>ApiResponse of InlineResponse20013</returns>
        ApiResponse<InlineResponse20013> GetWatchlistListWithHttpInfo(List<string> attributes = default(List<string>), List<string> sort = default(List<string>));
        /// <summary>
        /// List of positions of a watchlist.
        /// </summary>
        /// <remarks>
        /// List of positions of a watchlist.
        /// </remarks>
        /// <exception cref="FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="sort">Sortable attributes. The sort order is ascending unless it is prefixed with a minus sign, in which case it is descending. A list of at most 2 (possibly prefixed) attribute name(s) is allowed. (optional)</param>
        /// <returns>InlineResponse20015</returns>
        InlineResponse20015 GetWatchlistPositionList(string id, List<string> attributes = default(List<string>), List<string> sort = default(List<string>));

        /// <summary>
        /// List of positions of a watchlist.
        /// </summary>
        /// <remarks>
        /// List of positions of a watchlist.
        /// </remarks>
        /// <exception cref="FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="sort">Sortable attributes. The sort order is ascending unless it is prefixed with a minus sign, in which case it is descending. A list of at most 2 (possibly prefixed) attribute name(s) is allowed. (optional)</param>
        /// <returns>ApiResponse of InlineResponse20015</returns>
        ApiResponse<InlineResponse20015> GetWatchlistPositionListWithHttpInfo(string id, List<string> attributes = default(List<string>), List<string> sort = default(List<string>));
        /// <summary>
        /// Create a watchlist.
        /// </summary>
        /// <remarks>
        /// Create a watchlist.  Certain error conditions yield errors as follows:   |Error Condition|HTTP Error| |- -- -- --|- -- -- -- -| |The number of watchlists would exceed 100.|400 Bad Request|
        /// </remarks>
        /// <exception cref="FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inlineObject14"> (optional)</param>
        /// <returns>InlineResponse2013</returns>
        InlineResponse2013 PostWatchlistCreate(InlineObject14 inlineObject14 = default(InlineObject14));

        /// <summary>
        /// Create a watchlist.
        /// </summary>
        /// <remarks>
        /// Create a watchlist.  Certain error conditions yield errors as follows:   |Error Condition|HTTP Error| |- -- -- --|- -- -- -- -| |The number of watchlists would exceed 100.|400 Bad Request|
        /// </remarks>
        /// <exception cref="FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inlineObject14"> (optional)</param>
        /// <returns>ApiResponse of InlineResponse2013</returns>
        ApiResponse<InlineResponse2013> PostWatchlistCreateWithHttpInfo(InlineObject14 inlineObject14 = default(InlineObject14));
        /// <summary>
        /// Delete a watchlist.
        /// </summary>
        /// <remarks>
        /// Delete a watchlist.
        /// </remarks>
        /// <exception cref="FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inlineObject15"> (optional)</param>
        /// <returns>InlineResponse200</returns>
        InlineResponse200 PostWatchlistDelete(InlineObject15 inlineObject15 = default(InlineObject15));

        /// <summary>
        /// Delete a watchlist.
        /// </summary>
        /// <remarks>
        /// Delete a watchlist.
        /// </remarks>
        /// <exception cref="FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inlineObject15"> (optional)</param>
        /// <returns>ApiResponse of InlineResponse200</returns>
        ApiResponse<InlineResponse200> PostWatchlistDeleteWithHttpInfo(InlineObject15 inlineObject15 = default(InlineObject15));
        /// <summary>
        /// Modify a watchlist.
        /// </summary>
        /// <remarks>
        /// Modify a watchlist.
        /// </remarks>
        /// <exception cref="FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inlineObject16"> (optional)</param>
        /// <returns>InlineResponse2003</returns>
        InlineResponse2003 PostWatchlistModify(InlineObject16 inlineObject16 = default(InlineObject16));

        /// <summary>
        /// Modify a watchlist.
        /// </summary>
        /// <remarks>
        /// Modify a watchlist.
        /// </remarks>
        /// <exception cref="FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inlineObject16"> (optional)</param>
        /// <returns>ApiResponse of InlineResponse2003</returns>
        ApiResponse<InlineResponse2003> PostWatchlistModifyWithHttpInfo(InlineObject16 inlineObject16 = default(InlineObject16));
        /// <summary>
        /// Add a position to a watchlist.
        /// </summary>
        /// <remarks>
        /// Add a position to a watchlist.  Certain error conditions yield errors as follows:   |Error Condition|HTTP Error| |- -- -- --|- -- -- -- -| |Maximum number of watchlist positions would exceed 100.|400 Bad Request| |The watchlist does not exist.|400 Bad Request| |The notation already exists in the watchlist.|400 Bad Request|
        /// </remarks>
        /// <exception cref="FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inlineObject17"> (optional)</param>
        /// <returns>InlineResponse2014</returns>
        InlineResponse2014 PostWatchlistPositionCreate(InlineObject17 inlineObject17 = default(InlineObject17));

        /// <summary>
        /// Add a position to a watchlist.
        /// </summary>
        /// <remarks>
        /// Add a position to a watchlist.  Certain error conditions yield errors as follows:   |Error Condition|HTTP Error| |- -- -- --|- -- -- -- -| |Maximum number of watchlist positions would exceed 100.|400 Bad Request| |The watchlist does not exist.|400 Bad Request| |The notation already exists in the watchlist.|400 Bad Request|
        /// </remarks>
        /// <exception cref="FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inlineObject17"> (optional)</param>
        /// <returns>ApiResponse of InlineResponse2014</returns>
        ApiResponse<InlineResponse2014> PostWatchlistPositionCreateWithHttpInfo(InlineObject17 inlineObject17 = default(InlineObject17));
        /// <summary>
        /// Delete a position of a watchlist.
        /// </summary>
        /// <remarks>
        /// Delete a position of a watchlist.
        /// </remarks>
        /// <exception cref="FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inlineObject18"> (optional)</param>
        /// <returns>InlineResponse2003</returns>
        InlineResponse2003 PostWatchlistPositionDelete(InlineObject18 inlineObject18 = default(InlineObject18));

        /// <summary>
        /// Delete a position of a watchlist.
        /// </summary>
        /// <remarks>
        /// Delete a position of a watchlist.
        /// </remarks>
        /// <exception cref="FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inlineObject18"> (optional)</param>
        /// <returns>ApiResponse of InlineResponse2003</returns>
        ApiResponse<InlineResponse2003> PostWatchlistPositionDeleteWithHttpInfo(InlineObject18 inlineObject18 = default(InlineObject18));
        /// <summary>
        /// Details of the position of a watchlist.
        /// </summary>
        /// <remarks>
        /// Details of the position of a watchlist.
        /// </remarks>
        /// <exception cref="FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inlineObject19"> (optional)</param>
        /// <returns>InlineResponse20014</returns>
        InlineResponse20014 PostWatchlistPositionGet(InlineObject19 inlineObject19 = default(InlineObject19));

        /// <summary>
        /// Details of the position of a watchlist.
        /// </summary>
        /// <remarks>
        /// Details of the position of a watchlist.
        /// </remarks>
        /// <exception cref="FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inlineObject19"> (optional)</param>
        /// <returns>ApiResponse of InlineResponse20014</returns>
        ApiResponse<InlineResponse20014> PostWatchlistPositionGetWithHttpInfo(InlineObject19 inlineObject19 = default(InlineObject19));
        /// <summary>
        /// Modify a position in a watchlist.
        /// </summary>
        /// <remarks>
        /// Modify a position in a watchlist.  Certain error conditions yield errors as follows:   |Error Condition|HTTP Error| |- -- -- --|- -- -- -- -| |At least one of the parameters &#x60;notation&#x60; or &#x60;comment&#x60; must be set.|400 Bad Request| |The notation already exists in the watchlist.|400 Bad Request|
        /// </remarks>
        /// <exception cref="FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inlineObject20"> (optional)</param>
        /// <returns>InlineResponse2003</returns>
        InlineResponse2003 PostWatchlistPositionModify(InlineObject20 inlineObject20 = default(InlineObject20));

        /// <summary>
        /// Modify a position in a watchlist.
        /// </summary>
        /// <remarks>
        /// Modify a position in a watchlist.  Certain error conditions yield errors as follows:   |Error Condition|HTTP Error| |- -- -- --|- -- -- -- -| |At least one of the parameters &#x60;notation&#x60; or &#x60;comment&#x60; must be set.|400 Bad Request| |The notation already exists in the watchlist.|400 Bad Request|
        /// </remarks>
        /// <exception cref="FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inlineObject20"> (optional)</param>
        /// <returns>ApiResponse of InlineResponse2003</returns>
        ApiResponse<InlineResponse2003> PostWatchlistPositionModifyWithHttpInfo(InlineObject20 inlineObject20 = default(InlineObject20));
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IWatchlistApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Details of a watchlist.
        /// </summary>
        /// <remarks>
        /// Details of a watchlist.
        /// </remarks>
        /// <exception cref="FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse20012</returns>
        System.Threading.Tasks.Task<InlineResponse20012> GetWatchlistGetAsync(string id, List<string> attributes = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Details of a watchlist.
        /// </summary>
        /// <remarks>
        /// Details of a watchlist.
        /// </remarks>
        /// <exception cref="FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse20012)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20012>> GetWatchlistGetWithHttpInfoAsync(string id, List<string> attributes = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// List of watchlists.
        /// </summary>
        /// <remarks>
        /// List of watchlists.
        /// </remarks>
        /// <exception cref="FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="sort">Sortable attributes. The sort order is ascending unless it is prefixed with a minus sign, in which case it is descending. A list of at most 4 (possibly prefixed) attribute name(s) is allowed. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse20013</returns>
        System.Threading.Tasks.Task<InlineResponse20013> GetWatchlistListAsync(List<string> attributes = default(List<string>), List<string> sort = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// List of watchlists.
        /// </summary>
        /// <remarks>
        /// List of watchlists.
        /// </remarks>
        /// <exception cref="FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="sort">Sortable attributes. The sort order is ascending unless it is prefixed with a minus sign, in which case it is descending. A list of at most 4 (possibly prefixed) attribute name(s) is allowed. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse20013)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20013>> GetWatchlistListWithHttpInfoAsync(List<string> attributes = default(List<string>), List<string> sort = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// List of positions of a watchlist.
        /// </summary>
        /// <remarks>
        /// List of positions of a watchlist.
        /// </remarks>
        /// <exception cref="FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="sort">Sortable attributes. The sort order is ascending unless it is prefixed with a minus sign, in which case it is descending. A list of at most 2 (possibly prefixed) attribute name(s) is allowed. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse20015</returns>
        System.Threading.Tasks.Task<InlineResponse20015> GetWatchlistPositionListAsync(string id, List<string> attributes = default(List<string>), List<string> sort = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// List of positions of a watchlist.
        /// </summary>
        /// <remarks>
        /// List of positions of a watchlist.
        /// </remarks>
        /// <exception cref="FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="sort">Sortable attributes. The sort order is ascending unless it is prefixed with a minus sign, in which case it is descending. A list of at most 2 (possibly prefixed) attribute name(s) is allowed. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse20015)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20015>> GetWatchlistPositionListWithHttpInfoAsync(string id, List<string> attributes = default(List<string>), List<string> sort = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Create a watchlist.
        /// </summary>
        /// <remarks>
        /// Create a watchlist.  Certain error conditions yield errors as follows:   |Error Condition|HTTP Error| |- -- -- --|- -- -- -- -| |The number of watchlists would exceed 100.|400 Bad Request|
        /// </remarks>
        /// <exception cref="FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inlineObject14"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse2013</returns>
        System.Threading.Tasks.Task<InlineResponse2013> PostWatchlistCreateAsync(InlineObject14 inlineObject14 = default(InlineObject14), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create a watchlist.
        /// </summary>
        /// <remarks>
        /// Create a watchlist.  Certain error conditions yield errors as follows:   |Error Condition|HTTP Error| |- -- -- --|- -- -- -- -| |The number of watchlists would exceed 100.|400 Bad Request|
        /// </remarks>
        /// <exception cref="FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inlineObject14"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse2013)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse2013>> PostWatchlistCreateWithHttpInfoAsync(InlineObject14 inlineObject14 = default(InlineObject14), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Delete a watchlist.
        /// </summary>
        /// <remarks>
        /// Delete a watchlist.
        /// </remarks>
        /// <exception cref="FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inlineObject15"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse200</returns>
        System.Threading.Tasks.Task<InlineResponse200> PostWatchlistDeleteAsync(InlineObject15 inlineObject15 = default(InlineObject15), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Delete a watchlist.
        /// </summary>
        /// <remarks>
        /// Delete a watchlist.
        /// </remarks>
        /// <exception cref="FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inlineObject15"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse200)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse200>> PostWatchlistDeleteWithHttpInfoAsync(InlineObject15 inlineObject15 = default(InlineObject15), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Modify a watchlist.
        /// </summary>
        /// <remarks>
        /// Modify a watchlist.
        /// </remarks>
        /// <exception cref="FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inlineObject16"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse2003</returns>
        System.Threading.Tasks.Task<InlineResponse2003> PostWatchlistModifyAsync(InlineObject16 inlineObject16 = default(InlineObject16), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Modify a watchlist.
        /// </summary>
        /// <remarks>
        /// Modify a watchlist.
        /// </remarks>
        /// <exception cref="FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inlineObject16"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse2003)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse2003>> PostWatchlistModifyWithHttpInfoAsync(InlineObject16 inlineObject16 = default(InlineObject16), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Add a position to a watchlist.
        /// </summary>
        /// <remarks>
        /// Add a position to a watchlist.  Certain error conditions yield errors as follows:   |Error Condition|HTTP Error| |- -- -- --|- -- -- -- -| |Maximum number of watchlist positions would exceed 100.|400 Bad Request| |The watchlist does not exist.|400 Bad Request| |The notation already exists in the watchlist.|400 Bad Request|
        /// </remarks>
        /// <exception cref="FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inlineObject17"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse2014</returns>
        System.Threading.Tasks.Task<InlineResponse2014> PostWatchlistPositionCreateAsync(InlineObject17 inlineObject17 = default(InlineObject17), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Add a position to a watchlist.
        /// </summary>
        /// <remarks>
        /// Add a position to a watchlist.  Certain error conditions yield errors as follows:   |Error Condition|HTTP Error| |- -- -- --|- -- -- -- -| |Maximum number of watchlist positions would exceed 100.|400 Bad Request| |The watchlist does not exist.|400 Bad Request| |The notation already exists in the watchlist.|400 Bad Request|
        /// </remarks>
        /// <exception cref="FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inlineObject17"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse2014)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse2014>> PostWatchlistPositionCreateWithHttpInfoAsync(InlineObject17 inlineObject17 = default(InlineObject17), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Delete a position of a watchlist.
        /// </summary>
        /// <remarks>
        /// Delete a position of a watchlist.
        /// </remarks>
        /// <exception cref="FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inlineObject18"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse2003</returns>
        System.Threading.Tasks.Task<InlineResponse2003> PostWatchlistPositionDeleteAsync(InlineObject18 inlineObject18 = default(InlineObject18), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Delete a position of a watchlist.
        /// </summary>
        /// <remarks>
        /// Delete a position of a watchlist.
        /// </remarks>
        /// <exception cref="FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inlineObject18"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse2003)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse2003>> PostWatchlistPositionDeleteWithHttpInfoAsync(InlineObject18 inlineObject18 = default(InlineObject18), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Details of the position of a watchlist.
        /// </summary>
        /// <remarks>
        /// Details of the position of a watchlist.
        /// </remarks>
        /// <exception cref="FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inlineObject19"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse20014</returns>
        System.Threading.Tasks.Task<InlineResponse20014> PostWatchlistPositionGetAsync(InlineObject19 inlineObject19 = default(InlineObject19), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Details of the position of a watchlist.
        /// </summary>
        /// <remarks>
        /// Details of the position of a watchlist.
        /// </remarks>
        /// <exception cref="FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inlineObject19"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse20014)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20014>> PostWatchlistPositionGetWithHttpInfoAsync(InlineObject19 inlineObject19 = default(InlineObject19), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Modify a position in a watchlist.
        /// </summary>
        /// <remarks>
        /// Modify a position in a watchlist.  Certain error conditions yield errors as follows:   |Error Condition|HTTP Error| |- -- -- --|- -- -- -- -| |At least one of the parameters &#x60;notation&#x60; or &#x60;comment&#x60; must be set.|400 Bad Request| |The notation already exists in the watchlist.|400 Bad Request|
        /// </remarks>
        /// <exception cref="FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inlineObject20"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse2003</returns>
        System.Threading.Tasks.Task<InlineResponse2003> PostWatchlistPositionModifyAsync(InlineObject20 inlineObject20 = default(InlineObject20), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Modify a position in a watchlist.
        /// </summary>
        /// <remarks>
        /// Modify a position in a watchlist.  Certain error conditions yield errors as follows:   |Error Condition|HTTP Error| |- -- -- --|- -- -- -- -| |At least one of the parameters &#x60;notation&#x60; or &#x60;comment&#x60; must be set.|400 Bad Request| |The notation already exists in the watchlist.|400 Bad Request|
        /// </remarks>
        /// <exception cref="FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inlineObject20"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse2003)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse2003>> PostWatchlistPositionModifyWithHttpInfoAsync(InlineObject20 inlineObject20 = default(InlineObject20), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IWatchlistApi : IWatchlistApiSync, IWatchlistApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class WatchlistApi : IWatchlistApi
    {
        private FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        # region Response Type Disctionaries
                private static readonly Dictionary<HttpStatusCode, System.Type> GetWatchlistGetResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)200, typeof(InlineResponse20012) },
        };
        private static readonly Dictionary<HttpStatusCode, System.Type> GetWatchlistListResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)200, typeof(InlineResponse20013) },
        };
        private static readonly Dictionary<HttpStatusCode, System.Type> GetWatchlistPositionListResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)200, typeof(InlineResponse20015) },
        };
        private static readonly Dictionary<HttpStatusCode, System.Type> PostWatchlistCreateResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)201, typeof(InlineResponse2013) },
        };
        private static readonly Dictionary<HttpStatusCode, System.Type> PostWatchlistDeleteResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)200, typeof(InlineResponse200) },
        };
        private static readonly Dictionary<HttpStatusCode, System.Type> PostWatchlistModifyResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)200, typeof(InlineResponse2003) },
        };
        private static readonly Dictionary<HttpStatusCode, System.Type> PostWatchlistPositionCreateResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)201, typeof(InlineResponse2014) },
        };
        private static readonly Dictionary<HttpStatusCode, System.Type> PostWatchlistPositionDeleteResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)200, typeof(InlineResponse2003) },
        };
        private static readonly Dictionary<HttpStatusCode, System.Type> PostWatchlistPositionGetResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)200, typeof(InlineResponse20014) },
        };
        private static readonly Dictionary<HttpStatusCode, System.Type> PostWatchlistPositionModifyResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)200, typeof(InlineResponse2003) },
        };

        # endregion Response Type Disctionaries

        # region Api Response Objects
         

        # endregion Api Response Objects

        /// <summary>
        /// Initializes a new instance of the <see cref="WatchlistApi"/> class.
        /// </summary>
        /// <returns></returns>
        public WatchlistApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="WatchlistApi"/> class.
        /// </summary>
        /// <returns></returns>
        public WatchlistApi(string basePath)
        {
            this.Configuration = FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.Configuration.MergeConfigurations(
                FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.GlobalConfiguration.Instance,
                new FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.Configuration { BasePath = basePath }
            );
            this.Client = new FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="WatchlistApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public WatchlistApi(FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.Configuration.MergeConfigurations(
                FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="WatchlistApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public WatchlistApi(FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ISynchronousClient client, FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.IAsynchronousClient asyncClient, FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Details of a watchlist. Details of a watchlist.
        /// </summary>
        /// <exception cref="FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <returns>InlineResponse20012</returns>
        public InlineResponse20012 GetWatchlistGet(string id, List<string> attributes = default(List<string>))
        {
            var localVarResponse = GetWatchlistGetWithHttpInfo(id, attributes);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Details of a watchlist. Details of a watchlist.
        /// </summary>
        /// <exception cref="FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <returns>ApiResponse of InlineResponse20012</returns>
        public ApiResponse<InlineResponse20012> GetWatchlistGetWithHttpInfo(string id, List<string> attributes = default(List<string>))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ApiException(400, "Missing required parameter 'id' when calling WatchlistApi->GetWatchlistGet");
            }

            FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ClientUtils.ParameterToMultiMap("", "id", id));
            if (attributes != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ClientUtils.ParameterToMultiMap("csv", "_attributes", attributes));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = GetWatchlistGetResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Get<
            InlineResponse20012>("/watchlist/get", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetWatchlistGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// Details of a watchlist. Details of a watchlist.
        /// </summary>
        /// <exception cref="FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse20012</returns>
        public async System.Threading.Tasks.Task<InlineResponse20012>GetWatchlistGetAsync(string id, List<string> attributes = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await GetWatchlistGetWithHttpInfoAsync(id, attributes, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Details of a watchlist. Details of a watchlist.
        /// </summary>
        /// <exception cref="FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse20012)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20012>> GetWatchlistGetWithHttpInfoAsync(string id, List<string> attributes = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ApiException(400, "Missing required parameter 'id' when calling WatchlistApi->GetWatchlistGet");
            }


            FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ClientUtils.ParameterToMultiMap("", "id", id));
            if (attributes != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ClientUtils.ParameterToMultiMap("csv", "_attributes", attributes));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = GetWatchlistGetResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<InlineResponse20012>("/watchlist/get", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetWatchlistGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List of watchlists. List of watchlists.
        /// </summary>
        /// <exception cref="FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="sort">Sortable attributes. The sort order is ascending unless it is prefixed with a minus sign, in which case it is descending. A list of at most 4 (possibly prefixed) attribute name(s) is allowed. (optional)</param>
        /// <returns>InlineResponse20013</returns>
        public InlineResponse20013 GetWatchlistList(List<string> attributes = default(List<string>), List<string> sort = default(List<string>))
        {
            var localVarResponse = GetWatchlistListWithHttpInfo(attributes, sort);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List of watchlists. List of watchlists.
        /// </summary>
        /// <exception cref="FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="sort">Sortable attributes. The sort order is ascending unless it is prefixed with a minus sign, in which case it is descending. A list of at most 4 (possibly prefixed) attribute name(s) is allowed. (optional)</param>
        /// <returns>ApiResponse of InlineResponse20013</returns>
        public ApiResponse<InlineResponse20013> GetWatchlistListWithHttpInfo(List<string> attributes = default(List<string>), List<string> sort = default(List<string>))
        {
            FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (attributes != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ClientUtils.ParameterToMultiMap("csv", "_attributes", attributes));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ClientUtils.ParameterToMultiMap("csv", "_sort", sort));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = GetWatchlistListResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Get<
            InlineResponse20013>("/watchlist/list", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetWatchlistList", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// List of watchlists. List of watchlists.
        /// </summary>
        /// <exception cref="FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="sort">Sortable attributes. The sort order is ascending unless it is prefixed with a minus sign, in which case it is descending. A list of at most 4 (possibly prefixed) attribute name(s) is allowed. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse20013</returns>
        public async System.Threading.Tasks.Task<InlineResponse20013>GetWatchlistListAsync(List<string> attributes = default(List<string>), List<string> sort = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await GetWatchlistListWithHttpInfoAsync(attributes, sort, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List of watchlists. List of watchlists.
        /// </summary>
        /// <exception cref="FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="sort">Sortable attributes. The sort order is ascending unless it is prefixed with a minus sign, in which case it is descending. A list of at most 4 (possibly prefixed) attribute name(s) is allowed. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse20013)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20013>> GetWatchlistListWithHttpInfoAsync(List<string> attributes = default(List<string>), List<string> sort = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (attributes != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ClientUtils.ParameterToMultiMap("csv", "_attributes", attributes));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ClientUtils.ParameterToMultiMap("csv", "_sort", sort));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = GetWatchlistListResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<InlineResponse20013>("/watchlist/list", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetWatchlistList", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List of positions of a watchlist. List of positions of a watchlist.
        /// </summary>
        /// <exception cref="FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="sort">Sortable attributes. The sort order is ascending unless it is prefixed with a minus sign, in which case it is descending. A list of at most 2 (possibly prefixed) attribute name(s) is allowed. (optional)</param>
        /// <returns>InlineResponse20015</returns>
        public InlineResponse20015 GetWatchlistPositionList(string id, List<string> attributes = default(List<string>), List<string> sort = default(List<string>))
        {
            var localVarResponse = GetWatchlistPositionListWithHttpInfo(id, attributes, sort);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List of positions of a watchlist. List of positions of a watchlist.
        /// </summary>
        /// <exception cref="FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="sort">Sortable attributes. The sort order is ascending unless it is prefixed with a minus sign, in which case it is descending. A list of at most 2 (possibly prefixed) attribute name(s) is allowed. (optional)</param>
        /// <returns>ApiResponse of InlineResponse20015</returns>
        public ApiResponse<InlineResponse20015> GetWatchlistPositionListWithHttpInfo(string id, List<string> attributes = default(List<string>), List<string> sort = default(List<string>))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ApiException(400, "Missing required parameter 'id' when calling WatchlistApi->GetWatchlistPositionList");
            }

            FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ClientUtils.ParameterToMultiMap("", "id", id));
            if (attributes != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ClientUtils.ParameterToMultiMap("csv", "_attributes", attributes));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ClientUtils.ParameterToMultiMap("csv", "_sort", sort));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = GetWatchlistPositionListResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Get<
            InlineResponse20015>("/watchlist/position/list", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetWatchlistPositionList", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// List of positions of a watchlist. List of positions of a watchlist.
        /// </summary>
        /// <exception cref="FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="sort">Sortable attributes. The sort order is ascending unless it is prefixed with a minus sign, in which case it is descending. A list of at most 2 (possibly prefixed) attribute name(s) is allowed. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse20015</returns>
        public async System.Threading.Tasks.Task<InlineResponse20015>GetWatchlistPositionListAsync(string id, List<string> attributes = default(List<string>), List<string> sort = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await GetWatchlistPositionListWithHttpInfoAsync(id, attributes, sort, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List of positions of a watchlist. List of positions of a watchlist.
        /// </summary>
        /// <exception cref="FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="sort">Sortable attributes. The sort order is ascending unless it is prefixed with a minus sign, in which case it is descending. A list of at most 2 (possibly prefixed) attribute name(s) is allowed. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse20015)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20015>> GetWatchlistPositionListWithHttpInfoAsync(string id, List<string> attributes = default(List<string>), List<string> sort = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ApiException(400, "Missing required parameter 'id' when calling WatchlistApi->GetWatchlistPositionList");
            }


            FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ClientUtils.ParameterToMultiMap("", "id", id));
            if (attributes != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ClientUtils.ParameterToMultiMap("csv", "_attributes", attributes));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ClientUtils.ParameterToMultiMap("csv", "_sort", sort));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = GetWatchlistPositionListResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<InlineResponse20015>("/watchlist/position/list", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetWatchlistPositionList", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a watchlist. Create a watchlist.  Certain error conditions yield errors as follows:   |Error Condition|HTTP Error| |- -- -- --|- -- -- -- -| |The number of watchlists would exceed 100.|400 Bad Request|
        /// </summary>
        /// <exception cref="FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inlineObject14"> (optional)</param>
        /// <returns>InlineResponse2013</returns>
        public InlineResponse2013 PostWatchlistCreate(InlineObject14 inlineObject14 = default(InlineObject14))
        {
            var localVarResponse = PostWatchlistCreateWithHttpInfo(inlineObject14);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a watchlist. Create a watchlist.  Certain error conditions yield errors as follows:   |Error Condition|HTTP Error| |- -- -- --|- -- -- -- -| |The number of watchlists would exceed 100.|400 Bad Request|
        /// </summary>
        /// <exception cref="FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inlineObject14"> (optional)</param>
        /// <returns>ApiResponse of InlineResponse2013</returns>
        public ApiResponse<InlineResponse2013> PostWatchlistCreateWithHttpInfo(InlineObject14 inlineObject14 = default(InlineObject14))
        {
            FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = inlineObject14;

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = PostWatchlistCreateResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Post<
            InlineResponse2013>("/watchlist/create", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostWatchlistCreate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// Create a watchlist. Create a watchlist.  Certain error conditions yield errors as follows:   |Error Condition|HTTP Error| |- -- -- --|- -- -- -- -| |The number of watchlists would exceed 100.|400 Bad Request|
        /// </summary>
        /// <exception cref="FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inlineObject14"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse2013</returns>
        public async System.Threading.Tasks.Task<InlineResponse2013>PostWatchlistCreateAsync(InlineObject14 inlineObject14 = default(InlineObject14), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await PostWatchlistCreateWithHttpInfoAsync(inlineObject14, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a watchlist. Create a watchlist.  Certain error conditions yield errors as follows:   |Error Condition|HTTP Error| |- -- -- --|- -- -- -- -| |The number of watchlists would exceed 100.|400 Bad Request|
        /// </summary>
        /// <exception cref="FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inlineObject14"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse2013)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse2013>> PostWatchlistCreateWithHttpInfoAsync(InlineObject14 inlineObject14 = default(InlineObject14), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = inlineObject14;

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = PostWatchlistCreateResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<InlineResponse2013>("/watchlist/create", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostWatchlistCreate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete a watchlist. Delete a watchlist.
        /// </summary>
        /// <exception cref="FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inlineObject15"> (optional)</param>
        /// <returns>InlineResponse200</returns>
        public InlineResponse200 PostWatchlistDelete(InlineObject15 inlineObject15 = default(InlineObject15))
        {
            var localVarResponse = PostWatchlistDeleteWithHttpInfo(inlineObject15);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Delete a watchlist. Delete a watchlist.
        /// </summary>
        /// <exception cref="FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inlineObject15"> (optional)</param>
        /// <returns>ApiResponse of InlineResponse200</returns>
        public ApiResponse<InlineResponse200> PostWatchlistDeleteWithHttpInfo(InlineObject15 inlineObject15 = default(InlineObject15))
        {
            FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = inlineObject15;

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = PostWatchlistDeleteResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Post<
            InlineResponse200>("/watchlist/delete", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostWatchlistDelete", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// Delete a watchlist. Delete a watchlist.
        /// </summary>
        /// <exception cref="FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inlineObject15"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse200</returns>
        public async System.Threading.Tasks.Task<InlineResponse200>PostWatchlistDeleteAsync(InlineObject15 inlineObject15 = default(InlineObject15), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await PostWatchlistDeleteWithHttpInfoAsync(inlineObject15, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Delete a watchlist. Delete a watchlist.
        /// </summary>
        /// <exception cref="FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inlineObject15"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse200)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse200>> PostWatchlistDeleteWithHttpInfoAsync(InlineObject15 inlineObject15 = default(InlineObject15), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = inlineObject15;

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = PostWatchlistDeleteResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<InlineResponse200>("/watchlist/delete", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostWatchlistDelete", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Modify a watchlist. Modify a watchlist.
        /// </summary>
        /// <exception cref="FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inlineObject16"> (optional)</param>
        /// <returns>InlineResponse2003</returns>
        public InlineResponse2003 PostWatchlistModify(InlineObject16 inlineObject16 = default(InlineObject16))
        {
            var localVarResponse = PostWatchlistModifyWithHttpInfo(inlineObject16);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Modify a watchlist. Modify a watchlist.
        /// </summary>
        /// <exception cref="FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inlineObject16"> (optional)</param>
        /// <returns>ApiResponse of InlineResponse2003</returns>
        public ApiResponse<InlineResponse2003> PostWatchlistModifyWithHttpInfo(InlineObject16 inlineObject16 = default(InlineObject16))
        {
            FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = inlineObject16;

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = PostWatchlistModifyResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Post<
            InlineResponse2003>("/watchlist/modify", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostWatchlistModify", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// Modify a watchlist. Modify a watchlist.
        /// </summary>
        /// <exception cref="FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inlineObject16"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse2003</returns>
        public async System.Threading.Tasks.Task<InlineResponse2003>PostWatchlistModifyAsync(InlineObject16 inlineObject16 = default(InlineObject16), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await PostWatchlistModifyWithHttpInfoAsync(inlineObject16, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Modify a watchlist. Modify a watchlist.
        /// </summary>
        /// <exception cref="FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inlineObject16"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse2003)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse2003>> PostWatchlistModifyWithHttpInfoAsync(InlineObject16 inlineObject16 = default(InlineObject16), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = inlineObject16;

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = PostWatchlistModifyResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<InlineResponse2003>("/watchlist/modify", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostWatchlistModify", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Add a position to a watchlist. Add a position to a watchlist.  Certain error conditions yield errors as follows:   |Error Condition|HTTP Error| |- -- -- --|- -- -- -- -| |Maximum number of watchlist positions would exceed 100.|400 Bad Request| |The watchlist does not exist.|400 Bad Request| |The notation already exists in the watchlist.|400 Bad Request|
        /// </summary>
        /// <exception cref="FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inlineObject17"> (optional)</param>
        /// <returns>InlineResponse2014</returns>
        public InlineResponse2014 PostWatchlistPositionCreate(InlineObject17 inlineObject17 = default(InlineObject17))
        {
            var localVarResponse = PostWatchlistPositionCreateWithHttpInfo(inlineObject17);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Add a position to a watchlist. Add a position to a watchlist.  Certain error conditions yield errors as follows:   |Error Condition|HTTP Error| |- -- -- --|- -- -- -- -| |Maximum number of watchlist positions would exceed 100.|400 Bad Request| |The watchlist does not exist.|400 Bad Request| |The notation already exists in the watchlist.|400 Bad Request|
        /// </summary>
        /// <exception cref="FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inlineObject17"> (optional)</param>
        /// <returns>ApiResponse of InlineResponse2014</returns>
        public ApiResponse<InlineResponse2014> PostWatchlistPositionCreateWithHttpInfo(InlineObject17 inlineObject17 = default(InlineObject17))
        {
            FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = inlineObject17;

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = PostWatchlistPositionCreateResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Post<
            InlineResponse2014>("/watchlist/position/create", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostWatchlistPositionCreate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// Add a position to a watchlist. Add a position to a watchlist.  Certain error conditions yield errors as follows:   |Error Condition|HTTP Error| |- -- -- --|- -- -- -- -| |Maximum number of watchlist positions would exceed 100.|400 Bad Request| |The watchlist does not exist.|400 Bad Request| |The notation already exists in the watchlist.|400 Bad Request|
        /// </summary>
        /// <exception cref="FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inlineObject17"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse2014</returns>
        public async System.Threading.Tasks.Task<InlineResponse2014>PostWatchlistPositionCreateAsync(InlineObject17 inlineObject17 = default(InlineObject17), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await PostWatchlistPositionCreateWithHttpInfoAsync(inlineObject17, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Add a position to a watchlist. Add a position to a watchlist.  Certain error conditions yield errors as follows:   |Error Condition|HTTP Error| |- -- -- --|- -- -- -- -| |Maximum number of watchlist positions would exceed 100.|400 Bad Request| |The watchlist does not exist.|400 Bad Request| |The notation already exists in the watchlist.|400 Bad Request|
        /// </summary>
        /// <exception cref="FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inlineObject17"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse2014)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse2014>> PostWatchlistPositionCreateWithHttpInfoAsync(InlineObject17 inlineObject17 = default(InlineObject17), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = inlineObject17;

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = PostWatchlistPositionCreateResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<InlineResponse2014>("/watchlist/position/create", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostWatchlistPositionCreate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete a position of a watchlist. Delete a position of a watchlist.
        /// </summary>
        /// <exception cref="FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inlineObject18"> (optional)</param>
        /// <returns>InlineResponse2003</returns>
        public InlineResponse2003 PostWatchlistPositionDelete(InlineObject18 inlineObject18 = default(InlineObject18))
        {
            var localVarResponse = PostWatchlistPositionDeleteWithHttpInfo(inlineObject18);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Delete a position of a watchlist. Delete a position of a watchlist.
        /// </summary>
        /// <exception cref="FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inlineObject18"> (optional)</param>
        /// <returns>ApiResponse of InlineResponse2003</returns>
        public ApiResponse<InlineResponse2003> PostWatchlistPositionDeleteWithHttpInfo(InlineObject18 inlineObject18 = default(InlineObject18))
        {
            FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = inlineObject18;

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = PostWatchlistPositionDeleteResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Post<
            InlineResponse2003>("/watchlist/position/delete", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostWatchlistPositionDelete", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// Delete a position of a watchlist. Delete a position of a watchlist.
        /// </summary>
        /// <exception cref="FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inlineObject18"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse2003</returns>
        public async System.Threading.Tasks.Task<InlineResponse2003>PostWatchlistPositionDeleteAsync(InlineObject18 inlineObject18 = default(InlineObject18), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await PostWatchlistPositionDeleteWithHttpInfoAsync(inlineObject18, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Delete a position of a watchlist. Delete a position of a watchlist.
        /// </summary>
        /// <exception cref="FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inlineObject18"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse2003)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse2003>> PostWatchlistPositionDeleteWithHttpInfoAsync(InlineObject18 inlineObject18 = default(InlineObject18), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = inlineObject18;

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = PostWatchlistPositionDeleteResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<InlineResponse2003>("/watchlist/position/delete", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostWatchlistPositionDelete", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Details of the position of a watchlist. Details of the position of a watchlist.
        /// </summary>
        /// <exception cref="FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inlineObject19"> (optional)</param>
        /// <returns>InlineResponse20014</returns>
        public InlineResponse20014 PostWatchlistPositionGet(InlineObject19 inlineObject19 = default(InlineObject19))
        {
            var localVarResponse = PostWatchlistPositionGetWithHttpInfo(inlineObject19);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Details of the position of a watchlist. Details of the position of a watchlist.
        /// </summary>
        /// <exception cref="FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inlineObject19"> (optional)</param>
        /// <returns>ApiResponse of InlineResponse20014</returns>
        public ApiResponse<InlineResponse20014> PostWatchlistPositionGetWithHttpInfo(InlineObject19 inlineObject19 = default(InlineObject19))
        {
            FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = inlineObject19;

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = PostWatchlistPositionGetResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Post<
            InlineResponse20014>("/watchlist/position/get", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostWatchlistPositionGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// Details of the position of a watchlist. Details of the position of a watchlist.
        /// </summary>
        /// <exception cref="FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inlineObject19"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse20014</returns>
        public async System.Threading.Tasks.Task<InlineResponse20014>PostWatchlistPositionGetAsync(InlineObject19 inlineObject19 = default(InlineObject19), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await PostWatchlistPositionGetWithHttpInfoAsync(inlineObject19, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Details of the position of a watchlist. Details of the position of a watchlist.
        /// </summary>
        /// <exception cref="FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inlineObject19"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse20014)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20014>> PostWatchlistPositionGetWithHttpInfoAsync(InlineObject19 inlineObject19 = default(InlineObject19), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = inlineObject19;

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = PostWatchlistPositionGetResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<InlineResponse20014>("/watchlist/position/get", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostWatchlistPositionGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Modify a position in a watchlist. Modify a position in a watchlist.  Certain error conditions yield errors as follows:   |Error Condition|HTTP Error| |- -- -- --|- -- -- -- -| |At least one of the parameters &#x60;notation&#x60; or &#x60;comment&#x60; must be set.|400 Bad Request| |The notation already exists in the watchlist.|400 Bad Request|
        /// </summary>
        /// <exception cref="FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inlineObject20"> (optional)</param>
        /// <returns>InlineResponse2003</returns>
        public InlineResponse2003 PostWatchlistPositionModify(InlineObject20 inlineObject20 = default(InlineObject20))
        {
            var localVarResponse = PostWatchlistPositionModifyWithHttpInfo(inlineObject20);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Modify a position in a watchlist. Modify a position in a watchlist.  Certain error conditions yield errors as follows:   |Error Condition|HTTP Error| |- -- -- --|- -- -- -- -| |At least one of the parameters &#x60;notation&#x60; or &#x60;comment&#x60; must be set.|400 Bad Request| |The notation already exists in the watchlist.|400 Bad Request|
        /// </summary>
        /// <exception cref="FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inlineObject20"> (optional)</param>
        /// <returns>ApiResponse of InlineResponse2003</returns>
        public ApiResponse<InlineResponse2003> PostWatchlistPositionModifyWithHttpInfo(InlineObject20 inlineObject20 = default(InlineObject20))
        {
            FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = inlineObject20;

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = PostWatchlistPositionModifyResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Post<
            InlineResponse2003>("/watchlist/position/modify", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostWatchlistPositionModify", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// Modify a position in a watchlist. Modify a position in a watchlist.  Certain error conditions yield errors as follows:   |Error Condition|HTTP Error| |- -- -- --|- -- -- -- -| |At least one of the parameters &#x60;notation&#x60; or &#x60;comment&#x60; must be set.|400 Bad Request| |The notation already exists in the watchlist.|400 Bad Request|
        /// </summary>
        /// <exception cref="FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inlineObject20"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse2003</returns>
        public async System.Threading.Tasks.Task<InlineResponse2003>PostWatchlistPositionModifyAsync(InlineObject20 inlineObject20 = default(InlineObject20), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await PostWatchlistPositionModifyWithHttpInfoAsync(inlineObject20, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Modify a position in a watchlist. Modify a position in a watchlist.  Certain error conditions yield errors as follows:   |Error Condition|HTTP Error| |- -- -- --|- -- -- -- -| |At least one of the parameters &#x60;notation&#x60; or &#x60;comment&#x60; must be set.|400 Bad Request| |The notation already exists in the watchlist.|400 Bad Request|
        /// </summary>
        /// <exception cref="FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inlineObject20"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse2003)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse2003>> PostWatchlistPositionModifyWithHttpInfoAsync(InlineObject20 inlineObject20 = default(InlineObject20), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = inlineObject20;

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = PostWatchlistPositionModifyResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<InlineResponse2003>("/watchlist/position/modify", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostWatchlistPositionModify", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
