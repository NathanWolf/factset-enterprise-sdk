/*
 * Virtual Portfolio API For Digital Portals
 *
 * The virtual portfolio enables the analysis of the current allocation, broken down by asset classes, currencies,  regions, sectors, style, capitalization, style, maturity, risk, and more.  Relative performance and monthly returns can be measured against benchmarks, using portfolio position transaction (buy/sell) data. Both the realized profit/loss (resulting from closed transactions) and the potential profit/loss (resulting from positions that have not been sold yet) can be queried.  Portfolio endpoints allow creation and managing a transaction-based portfolio. A transaction-based portfolio contains a gapless history of all transactions to be able to accurately reproduce the investment record of the portfolio.  An instrument added to a portfolio is called a position. Each position consists of multiple buy and sell events called transactions. Portfolios are limited to 100 positions and 1000 transactions; adding more will result in an error.  A transaction-based portfolio can consist of the following transactions:  * A buy transaction opens or adds to a position in the portfolio, decreasing the cash value by the purchase price at the same time. If there is not enough cash in the portfolio to cover the transaction, the cash value becomes negative. * A sell transaction decreases or closes a position in the portfolio, increasing the cash value by the sale price at the same time. A sell transaction can only be created if the number of shares of a given position exceeds the number being sold. * A cash transaction increases or decreases the cash position of the portfolio. A portfolio can have only one cash position. The cash position is tracked automatically as each buy or sell transaction implicitly affects it. The cash position can be negative as a buy transaction does not check whether enough cash is available. The cash position does not generate interest; its performance is always 0%.  The chosen prices and key figures in the endpoints are using the same quality, which is configurable per application. Possible values are delayed (DLY), best (BST), end-of-day (EOD) or realtime (RLT). The default value for the price quality is BST.  The portfolio endpoints use different methods to calculate key figures. All key figures except the risk in /portfolio/detail/list, /portfolio/get, and /portfolio/position/list are calculated on-the-fly with current prices. The risk key figures are calculated on-the-fly with current prices, but the result is cached for 24 hours. The key figures in /portfolio/evaluation/list are calculated on end-of-day basis.  The Virtual Portfolio API for Digital Portals is fully integrated with the corresponding Quotes API, allowing access to detailed price and performance information of instruments in a watchlist. This also supports basic security identifier cross-reference. To complement the Watchlist API and Virtual Portfolio API with direct access to price histories, please refer to the Time Series API for Digital Portals.
 *
 * The version of the OpenAPI document: 2
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.OpenAPIDateConverter;

namespace FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Model
{
    /// <summary>
    /// InlineResponse2004DataKeyfigures
    /// </summary>
    [DataContract(Name = "inline_response_200_4_data_keyfigures")]
    public partial class InlineResponse2004DataKeyfigures : IEquatable<InlineResponse2004DataKeyfigures>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="InlineResponse2004DataKeyfigures" /> class.
        /// </summary>
        /// <param name="date">Date the evaluation is performed for (end of week or end of month for weekly and monthly resolution respectively)..</param>
        /// <param name="cash">The amount of cash since range start..</param>
        /// <param name="totalValue">The total portfolio value, i.e. the current market value of the portfolio plus cash..</param>
        /// <param name="marketValue">The current market value of the securities in the portfolio..</param>
        /// <param name="profitLoss">profitLoss.</param>
        /// <param name="period">period.</param>
        public InlineResponse2004DataKeyfigures(DateTime date = default(DateTime), decimal cash = default(decimal), decimal totalValue = default(decimal), decimal marketValue = default(decimal), InlineResponse2004DataProfitLoss profitLoss = default(InlineResponse2004DataProfitLoss), InlineResponse2004DataPeriod period = default(InlineResponse2004DataPeriod))
        {
            this.Date = date;
            this.Cash = cash;
            this.TotalValue = totalValue;
            this.MarketValue = marketValue;
            this.ProfitLoss = profitLoss;
            this.Period = period;
        }

        /// <summary>
        /// Date the evaluation is performed for (end of week or end of month for weekly and monthly resolution respectively).
        /// </summary>
        /// <value>Date the evaluation is performed for (end of week or end of month for weekly and monthly resolution respectively).</value>
        [DataMember(Name = "date", EmitDefaultValue = false)]
        [JsonConverter(typeof(OpenAPIDateConverter))]
        public DateTime Date { get; set; }

        /// <summary>
        /// The amount of cash since range start.
        /// </summary>
        /// <value>The amount of cash since range start.</value>
        [DataMember(Name = "cash", EmitDefaultValue = false)]
        public decimal Cash { get; set; }

        /// <summary>
        /// The total portfolio value, i.e. the current market value of the portfolio plus cash.
        /// </summary>
        /// <value>The total portfolio value, i.e. the current market value of the portfolio plus cash.</value>
        [DataMember(Name = "totalValue", EmitDefaultValue = false)]
        public decimal TotalValue { get; set; }

        /// <summary>
        /// The current market value of the securities in the portfolio.
        /// </summary>
        /// <value>The current market value of the securities in the portfolio.</value>
        [DataMember(Name = "marketValue", EmitDefaultValue = false)]
        public decimal MarketValue { get; set; }

        /// <summary>
        /// Gets or Sets ProfitLoss
        /// </summary>
        [DataMember(Name = "profitLoss", EmitDefaultValue = false)]
        public InlineResponse2004DataProfitLoss ProfitLoss { get; set; }

        /// <summary>
        /// Gets or Sets Period
        /// </summary>
        [DataMember(Name = "period", EmitDefaultValue = false)]
        public InlineResponse2004DataPeriod Period { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class InlineResponse2004DataKeyfigures {\n");
            sb.Append("  Date: ").Append(Date).Append("\n");
            sb.Append("  Cash: ").Append(Cash).Append("\n");
            sb.Append("  TotalValue: ").Append(TotalValue).Append("\n");
            sb.Append("  MarketValue: ").Append(MarketValue).Append("\n");
            sb.Append("  ProfitLoss: ").Append(ProfitLoss).Append("\n");
            sb.Append("  Period: ").Append(Period).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as InlineResponse2004DataKeyfigures);
        }

        /// <summary>
        /// Returns true if InlineResponse2004DataKeyfigures instances are equal
        /// </summary>
        /// <param name="input">Instance of InlineResponse2004DataKeyfigures to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(InlineResponse2004DataKeyfigures input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Date == input.Date ||
                    (this.Date != null &&
                    this.Date.Equals(input.Date))
                ) && 
                (
                    this.Cash == input.Cash ||
                    this.Cash.Equals(input.Cash)
                ) && 
                (
                    this.TotalValue == input.TotalValue ||
                    this.TotalValue.Equals(input.TotalValue)
                ) && 
                (
                    this.MarketValue == input.MarketValue ||
                    this.MarketValue.Equals(input.MarketValue)
                ) && 
                (
                    this.ProfitLoss == input.ProfitLoss ||
                    (this.ProfitLoss != null &&
                    this.ProfitLoss.Equals(input.ProfitLoss))
                ) && 
                (
                    this.Period == input.Period ||
                    (this.Period != null &&
                    this.Period.Equals(input.Period))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Date != null)
                {
                    hashCode = (hashCode * 59) + this.Date.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Cash.GetHashCode();
                hashCode = (hashCode * 59) + this.TotalValue.GetHashCode();
                hashCode = (hashCode * 59) + this.MarketValue.GetHashCode();
                if (this.ProfitLoss != null)
                {
                    hashCode = (hashCode * 59) + this.ProfitLoss.GetHashCode();
                }
                if (this.Period != null)
                {
                    hashCode = (hashCode * 59) + this.Period.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
