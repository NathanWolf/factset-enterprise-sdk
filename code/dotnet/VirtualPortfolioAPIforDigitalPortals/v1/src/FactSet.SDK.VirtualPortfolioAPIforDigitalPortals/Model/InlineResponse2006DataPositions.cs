/*
 * Prime Developer Trial
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.OpenAPIDateConverter;

namespace FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Model
{
    /// <summary>
    /// InlineResponse2006DataPositions
    /// </summary>
    [DataContract(Name = "inline_response_200_6_data_positions")]
    public partial class InlineResponse2006DataPositions : IEquatable<InlineResponse2006DataPositions>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="InlineResponse2006DataPositions" /> class.
        /// </summary>
        /// <param name="instrument">instrument.</param>
        /// <param name="currency">currency.</param>
        /// <param name="notation">notation.</param>
        /// <param name="shares">shares.</param>
        /// <param name="purchase">purchase.</param>
        /// <param name="value">Current value of the position..</param>
        /// <param name="profitLoss">profitLoss.</param>
        public InlineResponse2006DataPositions(InlineResponse2006DataInstrument instrument = default(InlineResponse2006DataInstrument), InlineResponse2006DataCurrency currency = default(InlineResponse2006DataCurrency), InlineResponse2006DataNotation notation = default(InlineResponse2006DataNotation), InlineResponse2006DataShares shares = default(InlineResponse2006DataShares), InlineResponse2006DataPurchase purchase = default(InlineResponse2006DataPurchase), decimal value = default(decimal), InlineResponse2006DataProfitLoss profitLoss = default(InlineResponse2006DataProfitLoss))
        {
            this.Instrument = instrument;
            this.Currency = currency;
            this.Notation = notation;
            this.Shares = shares;
            this.Purchase = purchase;
            this.Value = value;
            this.ProfitLoss = profitLoss;
        }

        /// <summary>
        /// Gets or Sets Instrument
        /// </summary>
        [DataMember(Name = "instrument", EmitDefaultValue = false)]
        public InlineResponse2006DataInstrument Instrument { get; set; }

        /// <summary>
        /// Gets or Sets Currency
        /// </summary>
        [DataMember(Name = "currency", EmitDefaultValue = false)]
        public InlineResponse2006DataCurrency Currency { get; set; }

        /// <summary>
        /// Gets or Sets Notation
        /// </summary>
        [DataMember(Name = "notation", EmitDefaultValue = false)]
        public InlineResponse2006DataNotation Notation { get; set; }

        /// <summary>
        /// Gets or Sets Shares
        /// </summary>
        [DataMember(Name = "shares", EmitDefaultValue = false)]
        public InlineResponse2006DataShares Shares { get; set; }

        /// <summary>
        /// Gets or Sets Purchase
        /// </summary>
        [DataMember(Name = "purchase", EmitDefaultValue = false)]
        public InlineResponse2006DataPurchase Purchase { get; set; }

        /// <summary>
        /// Current value of the position.
        /// </summary>
        /// <value>Current value of the position.</value>
        [DataMember(Name = "value", EmitDefaultValue = false)]
        public decimal Value { get; set; }

        /// <summary>
        /// Gets or Sets ProfitLoss
        /// </summary>
        [DataMember(Name = "profitLoss", EmitDefaultValue = false)]
        public InlineResponse2006DataProfitLoss ProfitLoss { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class InlineResponse2006DataPositions {\n");
            sb.Append("  Instrument: ").Append(Instrument).Append("\n");
            sb.Append("  Currency: ").Append(Currency).Append("\n");
            sb.Append("  Notation: ").Append(Notation).Append("\n");
            sb.Append("  Shares: ").Append(Shares).Append("\n");
            sb.Append("  Purchase: ").Append(Purchase).Append("\n");
            sb.Append("  Value: ").Append(Value).Append("\n");
            sb.Append("  ProfitLoss: ").Append(ProfitLoss).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as InlineResponse2006DataPositions);
        }

        /// <summary>
        /// Returns true if InlineResponse2006DataPositions instances are equal
        /// </summary>
        /// <param name="input">Instance of InlineResponse2006DataPositions to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(InlineResponse2006DataPositions input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Instrument == input.Instrument ||
                    (this.Instrument != null &&
                    this.Instrument.Equals(input.Instrument))
                ) && 
                (
                    this.Currency == input.Currency ||
                    (this.Currency != null &&
                    this.Currency.Equals(input.Currency))
                ) && 
                (
                    this.Notation == input.Notation ||
                    (this.Notation != null &&
                    this.Notation.Equals(input.Notation))
                ) && 
                (
                    this.Shares == input.Shares ||
                    (this.Shares != null &&
                    this.Shares.Equals(input.Shares))
                ) && 
                (
                    this.Purchase == input.Purchase ||
                    (this.Purchase != null &&
                    this.Purchase.Equals(input.Purchase))
                ) && 
                (
                    this.Value == input.Value ||
                    this.Value.Equals(input.Value)
                ) && 
                (
                    this.ProfitLoss == input.ProfitLoss ||
                    (this.ProfitLoss != null &&
                    this.ProfitLoss.Equals(input.ProfitLoss))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Instrument != null)
                {
                    hashCode = (hashCode * 59) + this.Instrument.GetHashCode();
                }
                if (this.Currency != null)
                {
                    hashCode = (hashCode * 59) + this.Currency.GetHashCode();
                }
                if (this.Notation != null)
                {
                    hashCode = (hashCode * 59) + this.Notation.GetHashCode();
                }
                if (this.Shares != null)
                {
                    hashCode = (hashCode * 59) + this.Shares.GetHashCode();
                }
                if (this.Purchase != null)
                {
                    hashCode = (hashCode * 59) + this.Purchase.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Value.GetHashCode();
                if (this.ProfitLoss != null)
                {
                    hashCode = (hashCode * 59) + this.ProfitLoss.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
