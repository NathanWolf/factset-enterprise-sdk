/*
 * Prime Developer Trial
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.OpenAPIDateConverter;

namespace FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Model
{
    /// <summary>
    /// InlineResponse2008Data
    /// </summary>
    [DataContract(Name = "inline_response_200_8_data")]
    public partial class InlineResponse2008Data : IEquatable<InlineResponse2008Data>, IValidatableObject
    {
        /// <summary>
        /// Type of transaction
        /// </summary>
        /// <value>Type of transaction</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TypeEnum
        {
            /// <summary>
            /// Enum Buy for value: buy
            /// </summary>
            [EnumMember(Value = "buy")]
            Buy = 1,

            /// <summary>
            /// Enum Sell for value: sell
            /// </summary>
            [EnumMember(Value = "sell")]
            Sell = 2,

            /// <summary>
            /// Enum Cash for value: cash
            /// </summary>
            [EnumMember(Value = "cash")]
            Cash = 3,

            /// <summary>
            /// Enum Payout for value: payout
            /// </summary>
            [EnumMember(Value = "payout")]
            Payout = 4,

            /// <summary>
            /// Enum Short for value: short
            /// </summary>
            [EnumMember(Value = "short")]
            Short = 5,

            /// <summary>
            /// Enum Cover for value: cover
            /// </summary>
            [EnumMember(Value = "cover")]
            Cover = 6

        }


        /// <summary>
        /// Type of transaction
        /// </summary>
        /// <value>Type of transaction</value>
        [DataMember(Name = "type", EmitDefaultValue = false)]
        public TypeEnum? Type { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="InlineResponse2008Data" /> class.
        /// </summary>
        /// <param name="id">Identifier of transaction..</param>
        /// <param name="notation">notation.</param>
        /// <param name="type">Type of transaction.</param>
        /// <param name="time">Date and time of the trade..</param>
        /// <param name="numberShares">Number of shares bought or sold..</param>
        /// <param name="price">Price the securities were purchased / sold for..</param>
        /// <param name="charges">Charges accrued in portfolio&#39;s base currency..</param>
        /// <param name="exchangeRate">The exchange rate between the notation&#39;s currency and the portfolio currency..</param>
        public InlineResponse2008Data(string id = default(string), InlineResponse2008Notation notation = default(InlineResponse2008Notation), TypeEnum? type = default(TypeEnum?), string time = default(string), decimal numberShares = default(decimal), decimal price = default(decimal), decimal charges = default(decimal), decimal exchangeRate = default(decimal))
        {
            this.Id = id;
            this.Notation = notation;
            this.Type = type;
            this.Time = time;
            this.NumberShares = numberShares;
            this.Price = price;
            this.Charges = charges;
            this.ExchangeRate = exchangeRate;
        }

        /// <summary>
        /// Identifier of transaction.
        /// </summary>
        /// <value>Identifier of transaction.</value>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets Notation
        /// </summary>
        [DataMember(Name = "notation", EmitDefaultValue = false)]
        public InlineResponse2008Notation Notation { get; set; }

        /// <summary>
        /// Date and time of the trade.
        /// </summary>
        /// <value>Date and time of the trade.</value>
        [DataMember(Name = "time", EmitDefaultValue = false)]
        public string Time { get; set; }

        /// <summary>
        /// Number of shares bought or sold.
        /// </summary>
        /// <value>Number of shares bought or sold.</value>
        [DataMember(Name = "numberShares", EmitDefaultValue = false)]
        public decimal NumberShares { get; set; }

        /// <summary>
        /// Price the securities were purchased / sold for.
        /// </summary>
        /// <value>Price the securities were purchased / sold for.</value>
        [DataMember(Name = "price", EmitDefaultValue = false)]
        public decimal Price { get; set; }

        /// <summary>
        /// Charges accrued in portfolio&#39;s base currency.
        /// </summary>
        /// <value>Charges accrued in portfolio&#39;s base currency.</value>
        [DataMember(Name = "charges", EmitDefaultValue = false)]
        public decimal Charges { get; set; }

        /// <summary>
        /// The exchange rate between the notation&#39;s currency and the portfolio currency.
        /// </summary>
        /// <value>The exchange rate between the notation&#39;s currency and the portfolio currency.</value>
        [DataMember(Name = "exchangeRate", EmitDefaultValue = false)]
        public decimal ExchangeRate { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class InlineResponse2008Data {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Notation: ").Append(Notation).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Time: ").Append(Time).Append("\n");
            sb.Append("  NumberShares: ").Append(NumberShares).Append("\n");
            sb.Append("  Price: ").Append(Price).Append("\n");
            sb.Append("  Charges: ").Append(Charges).Append("\n");
            sb.Append("  ExchangeRate: ").Append(ExchangeRate).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as InlineResponse2008Data);
        }

        /// <summary>
        /// Returns true if InlineResponse2008Data instances are equal
        /// </summary>
        /// <param name="input">Instance of InlineResponse2008Data to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(InlineResponse2008Data input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Notation == input.Notation ||
                    (this.Notation != null &&
                    this.Notation.Equals(input.Notation))
                ) && 
                (
                    this.Type == input.Type ||
                    this.Type.Equals(input.Type)
                ) && 
                (
                    this.Time == input.Time ||
                    (this.Time != null &&
                    this.Time.Equals(input.Time))
                ) && 
                (
                    this.NumberShares == input.NumberShares ||
                    this.NumberShares.Equals(input.NumberShares)
                ) && 
                (
                    this.Price == input.Price ||
                    this.Price.Equals(input.Price)
                ) && 
                (
                    this.Charges == input.Charges ||
                    this.Charges.Equals(input.Charges)
                ) && 
                (
                    this.ExchangeRate == input.ExchangeRate ||
                    this.ExchangeRate.Equals(input.ExchangeRate)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Notation != null)
                    hashCode = hashCode * 59 + this.Notation.GetHashCode();
                hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.Time != null)
                    hashCode = hashCode * 59 + this.Time.GetHashCode();
                hashCode = hashCode * 59 + this.NumberShares.GetHashCode();
                hashCode = hashCode * 59 + this.Price.GetHashCode();
                hashCode = hashCode * 59 + this.Charges.GetHashCode();
                hashCode = hashCode * 59 + this.ExchangeRate.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
