/*
 * Prime Developer Trial
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.OpenAPIDateConverter;

namespace FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Model
{
    /// <summary>
    /// Object defining the subscription attributes.
    /// </summary>
    [DataContract(Name = "SubscriptionMember")]
    public partial class SubscriptionMember : IEquatable<SubscriptionMember>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SubscriptionMember" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected SubscriptionMember() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="SubscriptionMember" /> class.
        /// </summary>
        /// <param name="minimumInterval">Non-negative number of milliseconds to throttle the update rate from 0ms to 5000ms. Set to 0 for sending updates immediately. (required).</param>
        public SubscriptionMember(decimal minimumInterval = default(decimal))
        {
            this.MinimumInterval = minimumInterval;
        }

        /// <summary>
        /// Non-negative number of milliseconds to throttle the update rate from 0ms to 5000ms. Set to 0 for sending updates immediately.
        /// </summary>
        /// <value>Non-negative number of milliseconds to throttle the update rate from 0ms to 5000ms. Set to 0 for sending updates immediately.</value>
        [DataMember(Name = "minimumInterval", IsRequired = true, EmitDefaultValue = false)]
        public decimal MinimumInterval { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SubscriptionMember {\n");
            sb.Append("  MinimumInterval: ").Append(MinimumInterval).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SubscriptionMember);
        }

        /// <summary>
        /// Returns true if SubscriptionMember instances are equal
        /// </summary>
        /// <param name="input">Instance of SubscriptionMember to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SubscriptionMember input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.MinimumInterval == input.MinimumInterval ||
                    this.MinimumInterval.Equals(input.MinimumInterval)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.MinimumInterval.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            // MinimumInterval (decimal) maximum
            if (this.MinimumInterval > (decimal)5E+3)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for MinimumInterval, must be a value less than or equal to 5E+3.", new [] { "MinimumInterval" });
            }

            // MinimumInterval (decimal) minimum
            if (this.MinimumInterval < (decimal)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for MinimumInterval, must be a value greater than or equal to 0.", new [] { "MinimumInterval" });
            }

            yield break;
        }
    }

}
