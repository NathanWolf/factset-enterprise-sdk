/*
 * Prime Developer Trial
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.OpenAPIDateConverter;

namespace FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Model
{
    /// <summary>
    /// Main currency used as the portfolio&#39;s currency. See endpoint /basic/valueUnit/currency/main/list for valid values.
    /// </summary>
    [DataContract(Name = "_portfolio_create_data_currency")]
    public partial class PortfolioCreateDataCurrency : IEquatable<PortfolioCreateDataCurrency>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PortfolioCreateDataCurrency" /> class.
        /// </summary>
        /// <param name="isoCode">ISO 4217 code of the currency. (default to &quot;EUR&quot;).</param>
        public PortfolioCreateDataCurrency(string isoCode = "EUR")
        {
            // use default value if no "isoCode" provided
            this.IsoCode = isoCode ?? "EUR";
        }

        /// <summary>
        /// ISO 4217 code of the currency.
        /// </summary>
        /// <value>ISO 4217 code of the currency.</value>
        [DataMember(Name = "isoCode", EmitDefaultValue = false)]
        public string IsoCode { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PortfolioCreateDataCurrency {\n");
            sb.Append("  IsoCode: ").Append(IsoCode).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PortfolioCreateDataCurrency);
        }

        /// <summary>
        /// Returns true if PortfolioCreateDataCurrency instances are equal
        /// </summary>
        /// <param name="input">Instance of PortfolioCreateDataCurrency to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PortfolioCreateDataCurrency input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.IsoCode == input.IsoCode ||
                    (this.IsoCode != null &&
                    this.IsoCode.Equals(input.IsoCode))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.IsoCode != null)
                    hashCode = hashCode * 59 + this.IsoCode.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            // IsoCode (string) maxLength
            if(this.IsoCode != null && this.IsoCode.Length > 3)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for IsoCode, length must be less than 3.", new [] { "IsoCode" });
            }

            yield break;
        }
    }

}
