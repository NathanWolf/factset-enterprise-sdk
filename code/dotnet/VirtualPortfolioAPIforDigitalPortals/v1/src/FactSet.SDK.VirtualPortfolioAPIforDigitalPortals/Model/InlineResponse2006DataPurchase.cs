/*
 * Prime Developer Trial
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Client.OpenAPIDateConverter;

namespace FactSet.SDK.VirtualPortfolioAPIforDigitalPortals.Model
{
    /// <summary>
    /// Purchase details of the position.
    /// </summary>
    [DataContract(Name = "inline_response_200_6_data_purchase")]
    public partial class InlineResponse2006DataPurchase : IEquatable<InlineResponse2006DataPurchase>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="InlineResponse2006DataPurchase" /> class.
        /// </summary>
        /// <param name="price">Weighted average purchase price of the position..</param>
        /// <param name="exchangeRate">Weighted average exchange rate of the position between the position and portfolio currency..</param>
        /// <param name="charges">Sum of additional purchase fees for the position in portfolio&#39;s base currency..</param>
        /// <param name="value">Aggregated purchase value of all buy transactions of the position..</param>
        public InlineResponse2006DataPurchase(decimal price = default(decimal), decimal exchangeRate = default(decimal), decimal charges = default(decimal), decimal value = default(decimal))
        {
            this.Price = price;
            this.ExchangeRate = exchangeRate;
            this.Charges = charges;
            this.Value = value;
        }

        /// <summary>
        /// Weighted average purchase price of the position.
        /// </summary>
        /// <value>Weighted average purchase price of the position.</value>
        [DataMember(Name = "price", EmitDefaultValue = false)]
        public decimal Price { get; set; }

        /// <summary>
        /// Weighted average exchange rate of the position between the position and portfolio currency.
        /// </summary>
        /// <value>Weighted average exchange rate of the position between the position and portfolio currency.</value>
        [DataMember(Name = "exchangeRate", EmitDefaultValue = false)]
        public decimal ExchangeRate { get; set; }

        /// <summary>
        /// Sum of additional purchase fees for the position in portfolio&#39;s base currency.
        /// </summary>
        /// <value>Sum of additional purchase fees for the position in portfolio&#39;s base currency.</value>
        [DataMember(Name = "charges", EmitDefaultValue = false)]
        public decimal Charges { get; set; }

        /// <summary>
        /// Aggregated purchase value of all buy transactions of the position.
        /// </summary>
        /// <value>Aggregated purchase value of all buy transactions of the position.</value>
        [DataMember(Name = "value", EmitDefaultValue = false)]
        public decimal Value { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class InlineResponse2006DataPurchase {\n");
            sb.Append("  Price: ").Append(Price).Append("\n");
            sb.Append("  ExchangeRate: ").Append(ExchangeRate).Append("\n");
            sb.Append("  Charges: ").Append(Charges).Append("\n");
            sb.Append("  Value: ").Append(Value).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as InlineResponse2006DataPurchase);
        }

        /// <summary>
        /// Returns true if InlineResponse2006DataPurchase instances are equal
        /// </summary>
        /// <param name="input">Instance of InlineResponse2006DataPurchase to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(InlineResponse2006DataPurchase input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Price == input.Price ||
                    this.Price.Equals(input.Price)
                ) && 
                (
                    this.ExchangeRate == input.ExchangeRate ||
                    this.ExchangeRate.Equals(input.ExchangeRate)
                ) && 
                (
                    this.Charges == input.Charges ||
                    this.Charges.Equals(input.Charges)
                ) && 
                (
                    this.Value == input.Value ||
                    this.Value.Equals(input.Value)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.Price.GetHashCode();
                hashCode = (hashCode * 59) + this.ExchangeRate.GetHashCode();
                hashCode = (hashCode * 59) + this.Charges.GetHashCode();
                hashCode = (hashCode * 59) + this.Value.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
