/*
 * S&P Global Fixed Income Evaluated Prices & Analytics API
 *
 * Gain access to evaluated pricing and analytics data for Corporate Bonds, Municipal Bonds and Asset Backed Securities provided by S&P Global (formerly IHS Markit) .  Data returned through multiple endpoints like prices, spread, yield, yield curve, sensitivity, coupon information, securities metadata and details specific to the Asset Backed Securities. 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: api@factset.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using FactSet.SDK.SPGlobalFixedIncomeEvaluatedPricesandAnalytics.Client;
using FactSet.SDK.SPGlobalFixedIncomeEvaluatedPricesandAnalytics.Model;
using FactSet.SDK.Utils.Authentication;

namespace FactSet.SDK.SPGlobalFixedIncomeEvaluatedPricesandAnalytics.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IIssuerYieldCurveApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Get yield curve data for given date range and list of securities
        /// </summary>
        /// <remarks>
        /// Get yield curve data points and dates for 3M, 6M, 1Y, 2Y, 3Y, 4Y, 5Y, 6Y, 7Y, 8Y, 9Y, 10Y, 15Y, 20Y, 25Y, 30Y and 40Y provided by Markit for the specified date range and frequency. 
        /// </remarks>
        /// <exception cref="FactSet.SDK.SPGlobalFixedIncomeEvaluatedPricesandAnalytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">Security or Entity identifiers. FactSet Identifiers, tickers, CUSIP, ISIN and SEDOL are accepted as input. &lt;p&gt;***ids limit** &#x3D; 2000  per request*&lt;/p&gt; *&lt;p&gt;Make note, GET Method URL request lines are also limited to a total length of 8192 bytes (8KB). In cases where the service allows for thousands of ids, which may lead to exceeding this request line limit of 8KB, its advised for any requests with large request lines to be requested through the respective \&quot;POST\&quot; method.&lt;/p&gt;* </param>
        /// <param name="startDate">The start date requested for a given date range in **YYYY-MM-DD** format. If left blank, the API will default to previous close. Future dates (T+1) are not accepted in this endpoint.  (optional)</param>
        /// <param name="endDate">The end date requested for a given date range in **YYYY-MM-DD** format. If left blank, the API will default to previous close. Future dates (T+1) are not accepted in this endpoint.  (optional)</param>
        /// <param name="frequency">Controls the display frequency of the data returned.   * **D** &#x3D; Daily   * **W** &#x3D; Weekly, based on the last day of the week of the start date.   * **M** &#x3D; Monthly, based on the last trading day of the month.   * **AM** &#x3D; Monthly, based on the start date (e.g., if the start date is June 16, data is displayed for June 16, May 16, April 16 etc.).   * **CQ** &#x3D; Quarterly based on the last trading day of the calendar quarter (March, June, September, or December).   * **FQ** &#x3D; Fiscal Quarter of the company.   * **AY** &#x3D; Actual Annual, based on the start date.   * **CY** &#x3D; Calendar Annual, based on the last trading day of the calendar year.   * **FY** &#x3D; Fiscal Annual, based on the last trading day of the company&#39;s fiscal year.  (optional, default to D)</param>
        /// <param name="calendar">Calendar of data returned. SEVENDAY includes weekends. LOCAL calendar will default to the securities&#39; trading calendar which excludes date records for respective holiday periods. (optional, default to FIVEDAY)</param>
        /// <returns>BondIssuerYieldCurveResponse</returns>
        BondIssuerYieldCurveResponse GetBondIssuerYieldCurve(List<string> ids, string startDate = default(string), string endDate = default(string), string frequency = default(string), string calendar = default(string));

        /// <summary>
        /// Get yield curve data for given date range and list of securities
        /// </summary>
        /// <remarks>
        /// Get yield curve data points and dates for 3M, 6M, 1Y, 2Y, 3Y, 4Y, 5Y, 6Y, 7Y, 8Y, 9Y, 10Y, 15Y, 20Y, 25Y, 30Y and 40Y provided by Markit for the specified date range and frequency. 
        /// </remarks>
        /// <exception cref="FactSet.SDK.SPGlobalFixedIncomeEvaluatedPricesandAnalytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">Security or Entity identifiers. FactSet Identifiers, tickers, CUSIP, ISIN and SEDOL are accepted as input. &lt;p&gt;***ids limit** &#x3D; 2000  per request*&lt;/p&gt; *&lt;p&gt;Make note, GET Method URL request lines are also limited to a total length of 8192 bytes (8KB). In cases where the service allows for thousands of ids, which may lead to exceeding this request line limit of 8KB, its advised for any requests with large request lines to be requested through the respective \&quot;POST\&quot; method.&lt;/p&gt;* </param>
        /// <param name="startDate">The start date requested for a given date range in **YYYY-MM-DD** format. If left blank, the API will default to previous close. Future dates (T+1) are not accepted in this endpoint.  (optional)</param>
        /// <param name="endDate">The end date requested for a given date range in **YYYY-MM-DD** format. If left blank, the API will default to previous close. Future dates (T+1) are not accepted in this endpoint.  (optional)</param>
        /// <param name="frequency">Controls the display frequency of the data returned.   * **D** &#x3D; Daily   * **W** &#x3D; Weekly, based on the last day of the week of the start date.   * **M** &#x3D; Monthly, based on the last trading day of the month.   * **AM** &#x3D; Monthly, based on the start date (e.g., if the start date is June 16, data is displayed for June 16, May 16, April 16 etc.).   * **CQ** &#x3D; Quarterly based on the last trading day of the calendar quarter (March, June, September, or December).   * **FQ** &#x3D; Fiscal Quarter of the company.   * **AY** &#x3D; Actual Annual, based on the start date.   * **CY** &#x3D; Calendar Annual, based on the last trading day of the calendar year.   * **FY** &#x3D; Fiscal Annual, based on the last trading day of the company&#39;s fiscal year.  (optional, default to D)</param>
        /// <param name="calendar">Calendar of data returned. SEVENDAY includes weekends. LOCAL calendar will default to the securities&#39; trading calendar which excludes date records for respective holiday periods. (optional, default to FIVEDAY)</param>
        /// <returns>ApiResponse of BondIssuerYieldCurveResponse</returns>
        ApiResponse<BondIssuerYieldCurveResponse> GetBondIssuerYieldCurveWithHttpInfo(List<string> ids, string startDate = default(string), string endDate = default(string), string frequency = default(string), string calendar = default(string));
        /// <summary>
        /// Request yield curve data for given date range and list of securities
        /// </summary>
        /// <remarks>
        /// Get yield curve data points and dates for 3M, 6M, 1Y, 2Y, 3Y, 4Y, 5Y, 6Y, 7Y, 8Y, 9Y, 10Y, 15Y, 20Y, 25Y, 30Y and 40Y provided by Markit for the specified date range and frequency. 
        /// </remarks>
        /// <exception cref="FactSet.SDK.SPGlobalFixedIncomeEvaluatedPricesandAnalytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bondIssuerYieldCurveRequest">Request object for requesting issuer yield curve data.</param>
        /// <returns>BondIssuerYieldCurveResponse</returns>
        BondIssuerYieldCurveResponse GetBondIssuerYieldCurveForList(BondIssuerYieldCurveRequest bondIssuerYieldCurveRequest);

        /// <summary>
        /// Request yield curve data for given date range and list of securities
        /// </summary>
        /// <remarks>
        /// Get yield curve data points and dates for 3M, 6M, 1Y, 2Y, 3Y, 4Y, 5Y, 6Y, 7Y, 8Y, 9Y, 10Y, 15Y, 20Y, 25Y, 30Y and 40Y provided by Markit for the specified date range and frequency. 
        /// </remarks>
        /// <exception cref="FactSet.SDK.SPGlobalFixedIncomeEvaluatedPricesandAnalytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bondIssuerYieldCurveRequest">Request object for requesting issuer yield curve data.</param>
        /// <returns>ApiResponse of BondIssuerYieldCurveResponse</returns>
        ApiResponse<BondIssuerYieldCurveResponse> GetBondIssuerYieldCurveForListWithHttpInfo(BondIssuerYieldCurveRequest bondIssuerYieldCurveRequest);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IIssuerYieldCurveApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Get yield curve data for given date range and list of securities
        /// </summary>
        /// <remarks>
        /// Get yield curve data points and dates for 3M, 6M, 1Y, 2Y, 3Y, 4Y, 5Y, 6Y, 7Y, 8Y, 9Y, 10Y, 15Y, 20Y, 25Y, 30Y and 40Y provided by Markit for the specified date range and frequency. 
        /// </remarks>
        /// <exception cref="FactSet.SDK.SPGlobalFixedIncomeEvaluatedPricesandAnalytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">Security or Entity identifiers. FactSet Identifiers, tickers, CUSIP, ISIN and SEDOL are accepted as input. &lt;p&gt;***ids limit** &#x3D; 2000  per request*&lt;/p&gt; *&lt;p&gt;Make note, GET Method URL request lines are also limited to a total length of 8192 bytes (8KB). In cases where the service allows for thousands of ids, which may lead to exceeding this request line limit of 8KB, its advised for any requests with large request lines to be requested through the respective \&quot;POST\&quot; method.&lt;/p&gt;* </param>
        /// <param name="startDate">The start date requested for a given date range in **YYYY-MM-DD** format. If left blank, the API will default to previous close. Future dates (T+1) are not accepted in this endpoint.  (optional)</param>
        /// <param name="endDate">The end date requested for a given date range in **YYYY-MM-DD** format. If left blank, the API will default to previous close. Future dates (T+1) are not accepted in this endpoint.  (optional)</param>
        /// <param name="frequency">Controls the display frequency of the data returned.   * **D** &#x3D; Daily   * **W** &#x3D; Weekly, based on the last day of the week of the start date.   * **M** &#x3D; Monthly, based on the last trading day of the month.   * **AM** &#x3D; Monthly, based on the start date (e.g., if the start date is June 16, data is displayed for June 16, May 16, April 16 etc.).   * **CQ** &#x3D; Quarterly based on the last trading day of the calendar quarter (March, June, September, or December).   * **FQ** &#x3D; Fiscal Quarter of the company.   * **AY** &#x3D; Actual Annual, based on the start date.   * **CY** &#x3D; Calendar Annual, based on the last trading day of the calendar year.   * **FY** &#x3D; Fiscal Annual, based on the last trading day of the company&#39;s fiscal year.  (optional, default to D)</param>
        /// <param name="calendar">Calendar of data returned. SEVENDAY includes weekends. LOCAL calendar will default to the securities&#39; trading calendar which excludes date records for respective holiday periods. (optional, default to FIVEDAY)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BondIssuerYieldCurveResponse</returns>
        System.Threading.Tasks.Task<BondIssuerYieldCurveResponse> GetBondIssuerYieldCurveAsync(List<string> ids, string startDate = default(string), string endDate = default(string), string frequency = default(string), string calendar = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get yield curve data for given date range and list of securities
        /// </summary>
        /// <remarks>
        /// Get yield curve data points and dates for 3M, 6M, 1Y, 2Y, 3Y, 4Y, 5Y, 6Y, 7Y, 8Y, 9Y, 10Y, 15Y, 20Y, 25Y, 30Y and 40Y provided by Markit for the specified date range and frequency. 
        /// </remarks>
        /// <exception cref="FactSet.SDK.SPGlobalFixedIncomeEvaluatedPricesandAnalytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">Security or Entity identifiers. FactSet Identifiers, tickers, CUSIP, ISIN and SEDOL are accepted as input. &lt;p&gt;***ids limit** &#x3D; 2000  per request*&lt;/p&gt; *&lt;p&gt;Make note, GET Method URL request lines are also limited to a total length of 8192 bytes (8KB). In cases where the service allows for thousands of ids, which may lead to exceeding this request line limit of 8KB, its advised for any requests with large request lines to be requested through the respective \&quot;POST\&quot; method.&lt;/p&gt;* </param>
        /// <param name="startDate">The start date requested for a given date range in **YYYY-MM-DD** format. If left blank, the API will default to previous close. Future dates (T+1) are not accepted in this endpoint.  (optional)</param>
        /// <param name="endDate">The end date requested for a given date range in **YYYY-MM-DD** format. If left blank, the API will default to previous close. Future dates (T+1) are not accepted in this endpoint.  (optional)</param>
        /// <param name="frequency">Controls the display frequency of the data returned.   * **D** &#x3D; Daily   * **W** &#x3D; Weekly, based on the last day of the week of the start date.   * **M** &#x3D; Monthly, based on the last trading day of the month.   * **AM** &#x3D; Monthly, based on the start date (e.g., if the start date is June 16, data is displayed for June 16, May 16, April 16 etc.).   * **CQ** &#x3D; Quarterly based on the last trading day of the calendar quarter (March, June, September, or December).   * **FQ** &#x3D; Fiscal Quarter of the company.   * **AY** &#x3D; Actual Annual, based on the start date.   * **CY** &#x3D; Calendar Annual, based on the last trading day of the calendar year.   * **FY** &#x3D; Fiscal Annual, based on the last trading day of the company&#39;s fiscal year.  (optional, default to D)</param>
        /// <param name="calendar">Calendar of data returned. SEVENDAY includes weekends. LOCAL calendar will default to the securities&#39; trading calendar which excludes date records for respective holiday periods. (optional, default to FIVEDAY)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BondIssuerYieldCurveResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<BondIssuerYieldCurveResponse>> GetBondIssuerYieldCurveWithHttpInfoAsync(List<string> ids, string startDate = default(string), string endDate = default(string), string frequency = default(string), string calendar = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Request yield curve data for given date range and list of securities
        /// </summary>
        /// <remarks>
        /// Get yield curve data points and dates for 3M, 6M, 1Y, 2Y, 3Y, 4Y, 5Y, 6Y, 7Y, 8Y, 9Y, 10Y, 15Y, 20Y, 25Y, 30Y and 40Y provided by Markit for the specified date range and frequency. 
        /// </remarks>
        /// <exception cref="FactSet.SDK.SPGlobalFixedIncomeEvaluatedPricesandAnalytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bondIssuerYieldCurveRequest">Request object for requesting issuer yield curve data.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BondIssuerYieldCurveResponse</returns>
        System.Threading.Tasks.Task<BondIssuerYieldCurveResponse> GetBondIssuerYieldCurveForListAsync(BondIssuerYieldCurveRequest bondIssuerYieldCurveRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Request yield curve data for given date range and list of securities
        /// </summary>
        /// <remarks>
        /// Get yield curve data points and dates for 3M, 6M, 1Y, 2Y, 3Y, 4Y, 5Y, 6Y, 7Y, 8Y, 9Y, 10Y, 15Y, 20Y, 25Y, 30Y and 40Y provided by Markit for the specified date range and frequency. 
        /// </remarks>
        /// <exception cref="FactSet.SDK.SPGlobalFixedIncomeEvaluatedPricesandAnalytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bondIssuerYieldCurveRequest">Request object for requesting issuer yield curve data.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BondIssuerYieldCurveResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<BondIssuerYieldCurveResponse>> GetBondIssuerYieldCurveForListWithHttpInfoAsync(BondIssuerYieldCurveRequest bondIssuerYieldCurveRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IIssuerYieldCurveApi : IIssuerYieldCurveApiSync, IIssuerYieldCurveApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class IssuerYieldCurveApi : IIssuerYieldCurveApi
    {
        private FactSet.SDK.SPGlobalFixedIncomeEvaluatedPricesandAnalytics.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        # region Response Type Disctionaries
        
        private static readonly Dictionary<HttpStatusCode, System.Type> GetBondIssuerYieldCurveResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)200, typeof(BondIssuerYieldCurveResponse) },
            { (HttpStatusCode)400, typeof(ErrorResponse) },
            { (HttpStatusCode)401, typeof(ErrorResponse) },
            { (HttpStatusCode)403, typeof(ErrorResponse) },
            { (HttpStatusCode)415, typeof(ErrorResponse) },
            { (HttpStatusCode)500, typeof(ErrorResponse) },
        };

        private static readonly Dictionary<HttpStatusCode, System.Type> GetBondIssuerYieldCurveForListResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)200, typeof(BondIssuerYieldCurveResponse) },
            { (HttpStatusCode)400, typeof(ErrorResponse) },
            { (HttpStatusCode)401, typeof(ErrorResponse) },
            { (HttpStatusCode)403, typeof(ErrorResponse) },
            { (HttpStatusCode)415, typeof(ErrorResponse) },
            { (HttpStatusCode)500, typeof(ErrorResponse) },
        };

        # endregion Response Type Disctionaries

        # region Api Response Objects
        

        # endregion Api Response Objects

        /// <summary>
        /// Initializes a new instance of the <see cref="IssuerYieldCurveApi"/> class.
        /// </summary>
        /// <returns></returns>
        public IssuerYieldCurveApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="IssuerYieldCurveApi"/> class.
        /// </summary>
        /// <returns></returns>
        public IssuerYieldCurveApi(string basePath)
        {
            this.Configuration = FactSet.SDK.SPGlobalFixedIncomeEvaluatedPricesandAnalytics.Client.Configuration.MergeConfigurations(
                FactSet.SDK.SPGlobalFixedIncomeEvaluatedPricesandAnalytics.Client.GlobalConfiguration.Instance,
                new FactSet.SDK.SPGlobalFixedIncomeEvaluatedPricesandAnalytics.Client.Configuration { BasePath = basePath }
            );
            this.Client = new FactSet.SDK.SPGlobalFixedIncomeEvaluatedPricesandAnalytics.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new FactSet.SDK.SPGlobalFixedIncomeEvaluatedPricesandAnalytics.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = FactSet.SDK.SPGlobalFixedIncomeEvaluatedPricesandAnalytics.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="IssuerYieldCurveApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public IssuerYieldCurveApi(FactSet.SDK.SPGlobalFixedIncomeEvaluatedPricesandAnalytics.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = FactSet.SDK.SPGlobalFixedIncomeEvaluatedPricesandAnalytics.Client.Configuration.MergeConfigurations(
                FactSet.SDK.SPGlobalFixedIncomeEvaluatedPricesandAnalytics.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new FactSet.SDK.SPGlobalFixedIncomeEvaluatedPricesandAnalytics.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new FactSet.SDK.SPGlobalFixedIncomeEvaluatedPricesandAnalytics.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = FactSet.SDK.SPGlobalFixedIncomeEvaluatedPricesandAnalytics.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="IssuerYieldCurveApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public IssuerYieldCurveApi(FactSet.SDK.SPGlobalFixedIncomeEvaluatedPricesandAnalytics.Client.ISynchronousClient client, FactSet.SDK.SPGlobalFixedIncomeEvaluatedPricesandAnalytics.Client.IAsynchronousClient asyncClient, FactSet.SDK.SPGlobalFixedIncomeEvaluatedPricesandAnalytics.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = FactSet.SDK.SPGlobalFixedIncomeEvaluatedPricesandAnalytics.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public FactSet.SDK.SPGlobalFixedIncomeEvaluatedPricesandAnalytics.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public FactSet.SDK.SPGlobalFixedIncomeEvaluatedPricesandAnalytics.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public FactSet.SDK.SPGlobalFixedIncomeEvaluatedPricesandAnalytics.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public FactSet.SDK.SPGlobalFixedIncomeEvaluatedPricesandAnalytics.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Get yield curve data for given date range and list of securities Get yield curve data points and dates for 3M, 6M, 1Y, 2Y, 3Y, 4Y, 5Y, 6Y, 7Y, 8Y, 9Y, 10Y, 15Y, 20Y, 25Y, 30Y and 40Y provided by Markit for the specified date range and frequency. 
        /// </summary>
        /// <exception cref="FactSet.SDK.SPGlobalFixedIncomeEvaluatedPricesandAnalytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">Security or Entity identifiers. FactSet Identifiers, tickers, CUSIP, ISIN and SEDOL are accepted as input. &lt;p&gt;***ids limit** &#x3D; 2000  per request*&lt;/p&gt; *&lt;p&gt;Make note, GET Method URL request lines are also limited to a total length of 8192 bytes (8KB). In cases where the service allows for thousands of ids, which may lead to exceeding this request line limit of 8KB, its advised for any requests with large request lines to be requested through the respective \&quot;POST\&quot; method.&lt;/p&gt;* </param>
        /// <param name="startDate">The start date requested for a given date range in **YYYY-MM-DD** format. If left blank, the API will default to previous close. Future dates (T+1) are not accepted in this endpoint.  (optional)</param>
        /// <param name="endDate">The end date requested for a given date range in **YYYY-MM-DD** format. If left blank, the API will default to previous close. Future dates (T+1) are not accepted in this endpoint.  (optional)</param>
        /// <param name="frequency">Controls the display frequency of the data returned.   * **D** &#x3D; Daily   * **W** &#x3D; Weekly, based on the last day of the week of the start date.   * **M** &#x3D; Monthly, based on the last trading day of the month.   * **AM** &#x3D; Monthly, based on the start date (e.g., if the start date is June 16, data is displayed for June 16, May 16, April 16 etc.).   * **CQ** &#x3D; Quarterly based on the last trading day of the calendar quarter (March, June, September, or December).   * **FQ** &#x3D; Fiscal Quarter of the company.   * **AY** &#x3D; Actual Annual, based on the start date.   * **CY** &#x3D; Calendar Annual, based on the last trading day of the calendar year.   * **FY** &#x3D; Fiscal Annual, based on the last trading day of the company&#39;s fiscal year.  (optional, default to D)</param>
        /// <param name="calendar">Calendar of data returned. SEVENDAY includes weekends. LOCAL calendar will default to the securities&#39; trading calendar which excludes date records for respective holiday periods. (optional, default to FIVEDAY)</param>
        /// <returns>BondIssuerYieldCurveResponse</returns>
        public BondIssuerYieldCurveResponse GetBondIssuerYieldCurve(List<string> ids, string startDate = default(string), string endDate = default(string), string frequency = default(string), string calendar = default(string))
        {
            var localVarResponse = GetBondIssuerYieldCurveWithHttpInfo(ids, startDate, endDate, frequency, calendar);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get yield curve data for given date range and list of securities Get yield curve data points and dates for 3M, 6M, 1Y, 2Y, 3Y, 4Y, 5Y, 6Y, 7Y, 8Y, 9Y, 10Y, 15Y, 20Y, 25Y, 30Y and 40Y provided by Markit for the specified date range and frequency. 
        /// </summary>
        /// <exception cref="FactSet.SDK.SPGlobalFixedIncomeEvaluatedPricesandAnalytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">Security or Entity identifiers. FactSet Identifiers, tickers, CUSIP, ISIN and SEDOL are accepted as input. &lt;p&gt;***ids limit** &#x3D; 2000  per request*&lt;/p&gt; *&lt;p&gt;Make note, GET Method URL request lines are also limited to a total length of 8192 bytes (8KB). In cases where the service allows for thousands of ids, which may lead to exceeding this request line limit of 8KB, its advised for any requests with large request lines to be requested through the respective \&quot;POST\&quot; method.&lt;/p&gt;* </param>
        /// <param name="startDate">The start date requested for a given date range in **YYYY-MM-DD** format. If left blank, the API will default to previous close. Future dates (T+1) are not accepted in this endpoint.  (optional)</param>
        /// <param name="endDate">The end date requested for a given date range in **YYYY-MM-DD** format. If left blank, the API will default to previous close. Future dates (T+1) are not accepted in this endpoint.  (optional)</param>
        /// <param name="frequency">Controls the display frequency of the data returned.   * **D** &#x3D; Daily   * **W** &#x3D; Weekly, based on the last day of the week of the start date.   * **M** &#x3D; Monthly, based on the last trading day of the month.   * **AM** &#x3D; Monthly, based on the start date (e.g., if the start date is June 16, data is displayed for June 16, May 16, April 16 etc.).   * **CQ** &#x3D; Quarterly based on the last trading day of the calendar quarter (March, June, September, or December).   * **FQ** &#x3D; Fiscal Quarter of the company.   * **AY** &#x3D; Actual Annual, based on the start date.   * **CY** &#x3D; Calendar Annual, based on the last trading day of the calendar year.   * **FY** &#x3D; Fiscal Annual, based on the last trading day of the company&#39;s fiscal year.  (optional, default to D)</param>
        /// <param name="calendar">Calendar of data returned. SEVENDAY includes weekends. LOCAL calendar will default to the securities&#39; trading calendar which excludes date records for respective holiday periods. (optional, default to FIVEDAY)</param>
        /// <returns>ApiResponse of BondIssuerYieldCurveResponse</returns>
        public ApiResponse<BondIssuerYieldCurveResponse> GetBondIssuerYieldCurveWithHttpInfo(List<string> ids, string startDate = default(string), string endDate = default(string), string frequency = default(string), string calendar = default(string))
        {
            // verify the required parameter 'ids' is set
            if (ids == null)
            {
                throw new FactSet.SDK.SPGlobalFixedIncomeEvaluatedPricesandAnalytics.Client.ApiException(400, "Missing required parameter 'ids' when calling IssuerYieldCurveApi->GetBondIssuerYieldCurve");
            }

            FactSet.SDK.SPGlobalFixedIncomeEvaluatedPricesandAnalytics.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.SPGlobalFixedIncomeEvaluatedPricesandAnalytics.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.SPGlobalFixedIncomeEvaluatedPricesandAnalytics.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.SPGlobalFixedIncomeEvaluatedPricesandAnalytics.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.SPGlobalFixedIncomeEvaluatedPricesandAnalytics.Client.ClientUtils.ParameterToMultiMap("csv", "ids", ids));
            if (startDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.SPGlobalFixedIncomeEvaluatedPricesandAnalytics.Client.ClientUtils.ParameterToMultiMap("", "startDate", startDate));
            }
            if (endDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.SPGlobalFixedIncomeEvaluatedPricesandAnalytics.Client.ClientUtils.ParameterToMultiMap("", "endDate", endDate));
            }
            if (frequency != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.SPGlobalFixedIncomeEvaluatedPricesandAnalytics.Client.ClientUtils.ParameterToMultiMap("", "frequency", frequency));
            }
            if (calendar != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.SPGlobalFixedIncomeEvaluatedPricesandAnalytics.Client.ClientUtils.ParameterToMultiMap("", "calendar", calendar));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.SPGlobalFixedIncomeEvaluatedPricesandAnalytics.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = GetBondIssuerYieldCurveResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Get<
            BondIssuerYieldCurveResponse>("/markit-bond-prices-and-analytics/v1/issuer-yield-curve", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetBondIssuerYieldCurve", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// Get yield curve data for given date range and list of securities Get yield curve data points and dates for 3M, 6M, 1Y, 2Y, 3Y, 4Y, 5Y, 6Y, 7Y, 8Y, 9Y, 10Y, 15Y, 20Y, 25Y, 30Y and 40Y provided by Markit for the specified date range and frequency. 
        /// </summary>
        /// <exception cref="FactSet.SDK.SPGlobalFixedIncomeEvaluatedPricesandAnalytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">Security or Entity identifiers. FactSet Identifiers, tickers, CUSIP, ISIN and SEDOL are accepted as input. &lt;p&gt;***ids limit** &#x3D; 2000  per request*&lt;/p&gt; *&lt;p&gt;Make note, GET Method URL request lines are also limited to a total length of 8192 bytes (8KB). In cases where the service allows for thousands of ids, which may lead to exceeding this request line limit of 8KB, its advised for any requests with large request lines to be requested through the respective \&quot;POST\&quot; method.&lt;/p&gt;* </param>
        /// <param name="startDate">The start date requested for a given date range in **YYYY-MM-DD** format. If left blank, the API will default to previous close. Future dates (T+1) are not accepted in this endpoint.  (optional)</param>
        /// <param name="endDate">The end date requested for a given date range in **YYYY-MM-DD** format. If left blank, the API will default to previous close. Future dates (T+1) are not accepted in this endpoint.  (optional)</param>
        /// <param name="frequency">Controls the display frequency of the data returned.   * **D** &#x3D; Daily   * **W** &#x3D; Weekly, based on the last day of the week of the start date.   * **M** &#x3D; Monthly, based on the last trading day of the month.   * **AM** &#x3D; Monthly, based on the start date (e.g., if the start date is June 16, data is displayed for June 16, May 16, April 16 etc.).   * **CQ** &#x3D; Quarterly based on the last trading day of the calendar quarter (March, June, September, or December).   * **FQ** &#x3D; Fiscal Quarter of the company.   * **AY** &#x3D; Actual Annual, based on the start date.   * **CY** &#x3D; Calendar Annual, based on the last trading day of the calendar year.   * **FY** &#x3D; Fiscal Annual, based on the last trading day of the company&#39;s fiscal year.  (optional, default to D)</param>
        /// <param name="calendar">Calendar of data returned. SEVENDAY includes weekends. LOCAL calendar will default to the securities&#39; trading calendar which excludes date records for respective holiday periods. (optional, default to FIVEDAY)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BondIssuerYieldCurveResponse</returns>
        public async System.Threading.Tasks.Task<BondIssuerYieldCurveResponse>GetBondIssuerYieldCurveAsync(List<string> ids, string startDate = default(string), string endDate = default(string), string frequency = default(string), string calendar = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await GetBondIssuerYieldCurveWithHttpInfoAsync(ids, startDate, endDate, frequency, calendar, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get yield curve data for given date range and list of securities Get yield curve data points and dates for 3M, 6M, 1Y, 2Y, 3Y, 4Y, 5Y, 6Y, 7Y, 8Y, 9Y, 10Y, 15Y, 20Y, 25Y, 30Y and 40Y provided by Markit for the specified date range and frequency. 
        /// </summary>
        /// <exception cref="FactSet.SDK.SPGlobalFixedIncomeEvaluatedPricesandAnalytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">Security or Entity identifiers. FactSet Identifiers, tickers, CUSIP, ISIN and SEDOL are accepted as input. &lt;p&gt;***ids limit** &#x3D; 2000  per request*&lt;/p&gt; *&lt;p&gt;Make note, GET Method URL request lines are also limited to a total length of 8192 bytes (8KB). In cases where the service allows for thousands of ids, which may lead to exceeding this request line limit of 8KB, its advised for any requests with large request lines to be requested through the respective \&quot;POST\&quot; method.&lt;/p&gt;* </param>
        /// <param name="startDate">The start date requested for a given date range in **YYYY-MM-DD** format. If left blank, the API will default to previous close. Future dates (T+1) are not accepted in this endpoint.  (optional)</param>
        /// <param name="endDate">The end date requested for a given date range in **YYYY-MM-DD** format. If left blank, the API will default to previous close. Future dates (T+1) are not accepted in this endpoint.  (optional)</param>
        /// <param name="frequency">Controls the display frequency of the data returned.   * **D** &#x3D; Daily   * **W** &#x3D; Weekly, based on the last day of the week of the start date.   * **M** &#x3D; Monthly, based on the last trading day of the month.   * **AM** &#x3D; Monthly, based on the start date (e.g., if the start date is June 16, data is displayed for June 16, May 16, April 16 etc.).   * **CQ** &#x3D; Quarterly based on the last trading day of the calendar quarter (March, June, September, or December).   * **FQ** &#x3D; Fiscal Quarter of the company.   * **AY** &#x3D; Actual Annual, based on the start date.   * **CY** &#x3D; Calendar Annual, based on the last trading day of the calendar year.   * **FY** &#x3D; Fiscal Annual, based on the last trading day of the company&#39;s fiscal year.  (optional, default to D)</param>
        /// <param name="calendar">Calendar of data returned. SEVENDAY includes weekends. LOCAL calendar will default to the securities&#39; trading calendar which excludes date records for respective holiday periods. (optional, default to FIVEDAY)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BondIssuerYieldCurveResponse)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<BondIssuerYieldCurveResponse>> GetBondIssuerYieldCurveWithHttpInfoAsync(List<string> ids, string startDate = default(string), string endDate = default(string), string frequency = default(string), string calendar = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'ids' is set
            if (ids == null)
            {
                throw new FactSet.SDK.SPGlobalFixedIncomeEvaluatedPricesandAnalytics.Client.ApiException(400, "Missing required parameter 'ids' when calling IssuerYieldCurveApi->GetBondIssuerYieldCurve");
            }


            FactSet.SDK.SPGlobalFixedIncomeEvaluatedPricesandAnalytics.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.SPGlobalFixedIncomeEvaluatedPricesandAnalytics.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.SPGlobalFixedIncomeEvaluatedPricesandAnalytics.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.SPGlobalFixedIncomeEvaluatedPricesandAnalytics.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.SPGlobalFixedIncomeEvaluatedPricesandAnalytics.Client.ClientUtils.ParameterToMultiMap("csv", "ids", ids));
            if (startDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.SPGlobalFixedIncomeEvaluatedPricesandAnalytics.Client.ClientUtils.ParameterToMultiMap("", "startDate", startDate));
            }
            if (endDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.SPGlobalFixedIncomeEvaluatedPricesandAnalytics.Client.ClientUtils.ParameterToMultiMap("", "endDate", endDate));
            }
            if (frequency != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.SPGlobalFixedIncomeEvaluatedPricesandAnalytics.Client.ClientUtils.ParameterToMultiMap("", "frequency", frequency));
            }
            if (calendar != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.SPGlobalFixedIncomeEvaluatedPricesandAnalytics.Client.ClientUtils.ParameterToMultiMap("", "calendar", calendar));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.SPGlobalFixedIncomeEvaluatedPricesandAnalytics.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = GetBondIssuerYieldCurveResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<BondIssuerYieldCurveResponse>("/markit-bond-prices-and-analytics/v1/issuer-yield-curve", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetBondIssuerYieldCurve", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Request yield curve data for given date range and list of securities Get yield curve data points and dates for 3M, 6M, 1Y, 2Y, 3Y, 4Y, 5Y, 6Y, 7Y, 8Y, 9Y, 10Y, 15Y, 20Y, 25Y, 30Y and 40Y provided by Markit for the specified date range and frequency. 
        /// </summary>
        /// <exception cref="FactSet.SDK.SPGlobalFixedIncomeEvaluatedPricesandAnalytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bondIssuerYieldCurveRequest">Request object for requesting issuer yield curve data.</param>
        /// <returns>BondIssuerYieldCurveResponse</returns>
        public BondIssuerYieldCurveResponse GetBondIssuerYieldCurveForList(BondIssuerYieldCurveRequest bondIssuerYieldCurveRequest)
        {
            var localVarResponse = GetBondIssuerYieldCurveForListWithHttpInfo(bondIssuerYieldCurveRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Request yield curve data for given date range and list of securities Get yield curve data points and dates for 3M, 6M, 1Y, 2Y, 3Y, 4Y, 5Y, 6Y, 7Y, 8Y, 9Y, 10Y, 15Y, 20Y, 25Y, 30Y and 40Y provided by Markit for the specified date range and frequency. 
        /// </summary>
        /// <exception cref="FactSet.SDK.SPGlobalFixedIncomeEvaluatedPricesandAnalytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bondIssuerYieldCurveRequest">Request object for requesting issuer yield curve data.</param>
        /// <returns>ApiResponse of BondIssuerYieldCurveResponse</returns>
        public ApiResponse<BondIssuerYieldCurveResponse> GetBondIssuerYieldCurveForListWithHttpInfo(BondIssuerYieldCurveRequest bondIssuerYieldCurveRequest)
        {
            // verify the required parameter 'bondIssuerYieldCurveRequest' is set
            if (bondIssuerYieldCurveRequest == null)
            {
                throw new FactSet.SDK.SPGlobalFixedIncomeEvaluatedPricesandAnalytics.Client.ApiException(400, "Missing required parameter 'bondIssuerYieldCurveRequest' when calling IssuerYieldCurveApi->GetBondIssuerYieldCurveForList");
            }

            FactSet.SDK.SPGlobalFixedIncomeEvaluatedPricesandAnalytics.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.SPGlobalFixedIncomeEvaluatedPricesandAnalytics.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.SPGlobalFixedIncomeEvaluatedPricesandAnalytics.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.SPGlobalFixedIncomeEvaluatedPricesandAnalytics.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = bondIssuerYieldCurveRequest;

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.SPGlobalFixedIncomeEvaluatedPricesandAnalytics.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = GetBondIssuerYieldCurveForListResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Post<
            BondIssuerYieldCurveResponse>("/markit-bond-prices-and-analytics/v1/issuer-yield-curve", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetBondIssuerYieldCurveForList", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// Request yield curve data for given date range and list of securities Get yield curve data points and dates for 3M, 6M, 1Y, 2Y, 3Y, 4Y, 5Y, 6Y, 7Y, 8Y, 9Y, 10Y, 15Y, 20Y, 25Y, 30Y and 40Y provided by Markit for the specified date range and frequency. 
        /// </summary>
        /// <exception cref="FactSet.SDK.SPGlobalFixedIncomeEvaluatedPricesandAnalytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bondIssuerYieldCurveRequest">Request object for requesting issuer yield curve data.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BondIssuerYieldCurveResponse</returns>
        public async System.Threading.Tasks.Task<BondIssuerYieldCurveResponse>GetBondIssuerYieldCurveForListAsync(BondIssuerYieldCurveRequest bondIssuerYieldCurveRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await GetBondIssuerYieldCurveForListWithHttpInfoAsync(bondIssuerYieldCurveRequest, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Request yield curve data for given date range and list of securities Get yield curve data points and dates for 3M, 6M, 1Y, 2Y, 3Y, 4Y, 5Y, 6Y, 7Y, 8Y, 9Y, 10Y, 15Y, 20Y, 25Y, 30Y and 40Y provided by Markit for the specified date range and frequency. 
        /// </summary>
        /// <exception cref="FactSet.SDK.SPGlobalFixedIncomeEvaluatedPricesandAnalytics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bondIssuerYieldCurveRequest">Request object for requesting issuer yield curve data.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BondIssuerYieldCurveResponse)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<BondIssuerYieldCurveResponse>> GetBondIssuerYieldCurveForListWithHttpInfoAsync(BondIssuerYieldCurveRequest bondIssuerYieldCurveRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'bondIssuerYieldCurveRequest' is set
            if (bondIssuerYieldCurveRequest == null)
            {
                throw new FactSet.SDK.SPGlobalFixedIncomeEvaluatedPricesandAnalytics.Client.ApiException(400, "Missing required parameter 'bondIssuerYieldCurveRequest' when calling IssuerYieldCurveApi->GetBondIssuerYieldCurveForList");
            }


            FactSet.SDK.SPGlobalFixedIncomeEvaluatedPricesandAnalytics.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.SPGlobalFixedIncomeEvaluatedPricesandAnalytics.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.SPGlobalFixedIncomeEvaluatedPricesandAnalytics.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.SPGlobalFixedIncomeEvaluatedPricesandAnalytics.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = bondIssuerYieldCurveRequest;

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.SPGlobalFixedIncomeEvaluatedPricesandAnalytics.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = GetBondIssuerYieldCurveForListResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<BondIssuerYieldCurveResponse>("/markit-bond-prices-and-analytics/v1/issuer-yield-curve", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetBondIssuerYieldCurveForList", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
