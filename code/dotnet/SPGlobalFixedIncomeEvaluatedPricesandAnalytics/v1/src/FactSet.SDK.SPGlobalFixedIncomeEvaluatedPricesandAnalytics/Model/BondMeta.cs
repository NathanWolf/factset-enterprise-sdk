/*
 * S&P Global Fixed Income Evaluated Prices & Analytics API
 *
 * Gain access to evaluated pricing and analytics data for Corporate Bonds, Municipal Bonds and Asset Backed Securities provided by S&P Global (formerly IHS Markit) .  Data returned through multiple endpoints like prices, spread, yield, yield curve, sensitivity, coupon information, securities metadata and details specific to the Asset Backed Securities. 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: api@factset.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = FactSet.SDK.SPGlobalFixedIncomeEvaluatedPricesandAnalytics.Client.OpenAPIDateConverter;

namespace FactSet.SDK.SPGlobalFixedIncomeEvaluatedPricesandAnalytics.Model
{
    /// <summary>
    /// BondMeta
    /// </summary>
    [DataContract(Name = "bondMeta")]
    public partial class BondMeta : IEquatable<BondMeta>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="BondMeta" /> class.
        /// </summary>
        /// <param name="requestId">Identifier that was used for the request..</param>
        /// <param name="fsymId">FactSet Regional Security Identifier. Six alpha-numeric characters, excluding vowels, with an -R suffix (XXXXXX-R). Identifies the security&#39;s best regional security data series per currency. For equities, all primary listings per region and currency are allocated a regional-level permanent identifier. The regional-level permanent identifier will be available once a SEDOL representing the region/currency has been allocated and the identifiers are on FactSet..</param>
        /// <param name="date">The date on which the price is calculated..</param>
        /// <param name="classification">Returns the top level sector classification of the instrument..</param>
        /// <param name="maturityDate">The date on which the principal amount of the security becomes due and payable, as stated in the terms of the security. Available only for &#x60;corporate bonds&#x60; and &#x60;municipal bonds&#x60;..</param>
        /// <param name="assumedMaturityDate">The assumed maturity date on which the principal amount of the security becomes due and payable. This is controlled by the evaluator and represents the maturity date being used in the market. Available only for &#x60;corporate bonds&#x60;..</param>
        /// <param name="defaulted">Indicates if an instrument is default or not. Available only for &#x60;corporate bonds&#x60;..</param>
        /// <param name="isin">The ISIN (International Securities Identification Number) to which the price data applies..</param>
        /// <param name="cusip">Unique CUSIP identifier for the instrument to which the price data applies..</param>
        /// <param name="vendorId">Returns the Vendor ID..</param>
        /// <param name="ticker">The IHS Markit ticker for the organization. Available only for &#x60;corporate bonds&#x60; and &#x60;asset-backed security bonds&#x60;..</param>
        /// <param name="setId">EVB internal identifier of instrumentSet. Available only for &#x60;corporate bonds&#x60;..</param>
        /// <param name="benchmarkISIN">The ISIN of the benchmark instrument. Available only for &#x60;corporate bonds&#x60;..</param>
        /// <param name="benchmarkCUSIP">The CUSIP of the benchmark instrument. Available only for &#x60;corporate bonds&#x60;..</param>
        /// <param name="name">Returns full bond name (issuer name-coupon rate-maturity year).</param>
        /// <param name="issuerName">Returns the short name of the issuer. Available only for &#x60;corporate bonds&#x60; and &#39;municipal bonds&#39;..</param>
        /// <param name="benchmarkName">The name of the benchmark instrument. Available only for &#x60;corporate bonds&#x60;..</param>
        /// <param name="perpetual">Shows that a maturity date is not specified for the instrument. Available only for &#x60;corporate bonds&#x60;..</param>
        /// <param name="region">Region of the coupon currency. Available only for &#x60;corporate bonds&#x60;..</param>
        /// <param name="tier">The code representing the bond seniority type. Available only for &#x60;corporate bonds&#x60;..</param>
        /// <param name="issueName">Name of the instrument. Available only for &#x60;municipal bonds&#x60;..</param>
        /// <param name="bondTicker">Returns the bond specific ticker. Available only for &#x60;asset-backed security bonds&#x60;..</param>
        /// <param name="indexTrancheName">The field shows Index Tranche Name. Available only for &#x60;asset-backed security bonds&#x60;..</param>
        /// <param name="redemption">Returns the indication of whether the bond is run to maturity or to the optional redemption/call. Available only for &#x60;asset-backed security bonds&#x60;..</param>
        public BondMeta(string requestId = default(string), string fsymId = default(string), DateTime? date = default(DateTime?), string classification = default(string), DateTime? maturityDate = default(DateTime?), DateTime? assumedMaturityDate = default(DateTime?), string defaulted = default(string), string isin = default(string), string cusip = default(string), string vendorId = default(string), string ticker = default(string), decimal? setId = default(decimal?), string benchmarkISIN = default(string), string benchmarkCUSIP = default(string), string name = default(string), string issuerName = default(string), string benchmarkName = default(string), string perpetual = default(string), string region = default(string), string tier = default(string), string issueName = default(string), string bondTicker = default(string), string indexTrancheName = default(string), string redemption = default(string))
        {
            this.RequestId = requestId;
            this.FsymId = fsymId;
            this.Date = date;
            this.Classification = classification;
            this.MaturityDate = maturityDate;
            this.AssumedMaturityDate = assumedMaturityDate;
            this.Defaulted = defaulted;
            this.Isin = isin;
            this.Cusip = cusip;
            this.VendorId = vendorId;
            this.Ticker = ticker;
            this.SetId = setId;
            this.BenchmarkISIN = benchmarkISIN;
            this.BenchmarkCUSIP = benchmarkCUSIP;
            this.Name = name;
            this.IssuerName = issuerName;
            this.BenchmarkName = benchmarkName;
            this.Perpetual = perpetual;
            this.Region = region;
            this.Tier = tier;
            this.IssueName = issueName;
            this.BondTicker = bondTicker;
            this.IndexTrancheName = indexTrancheName;
            this.Redemption = redemption;
        }

        /// <summary>
        /// Identifier that was used for the request.
        /// </summary>
        /// <value>Identifier that was used for the request.</value>
        [DataMember(Name = "requestId", EmitDefaultValue = false)]
        public string RequestId { get; set; }

        /// <summary>
        /// FactSet Regional Security Identifier. Six alpha-numeric characters, excluding vowels, with an -R suffix (XXXXXX-R). Identifies the security&#39;s best regional security data series per currency. For equities, all primary listings per region and currency are allocated a regional-level permanent identifier. The regional-level permanent identifier will be available once a SEDOL representing the region/currency has been allocated and the identifiers are on FactSet.
        /// </summary>
        /// <value>FactSet Regional Security Identifier. Six alpha-numeric characters, excluding vowels, with an -R suffix (XXXXXX-R). Identifies the security&#39;s best regional security data series per currency. For equities, all primary listings per region and currency are allocated a regional-level permanent identifier. The regional-level permanent identifier will be available once a SEDOL representing the region/currency has been allocated and the identifiers are on FactSet.</value>
        [DataMember(Name = "fsymId", EmitDefaultValue = true)]
        public string FsymId { get; set; }

        /// <summary>
        /// The date on which the price is calculated.
        /// </summary>
        /// <value>The date on which the price is calculated.</value>
        [DataMember(Name = "date", EmitDefaultValue = true)]
        [JsonConverter(typeof(OpenAPIDateConverter))]
        public DateTime? Date { get; set; }

        /// <summary>
        /// Returns the top level sector classification of the instrument.
        /// </summary>
        /// <value>Returns the top level sector classification of the instrument.</value>
        [DataMember(Name = "classification", EmitDefaultValue = true)]
        public string Classification { get; set; }

        /// <summary>
        /// The date on which the principal amount of the security becomes due and payable, as stated in the terms of the security. Available only for &#x60;corporate bonds&#x60; and &#x60;municipal bonds&#x60;.
        /// </summary>
        /// <value>The date on which the principal amount of the security becomes due and payable, as stated in the terms of the security. Available only for &#x60;corporate bonds&#x60; and &#x60;municipal bonds&#x60;.</value>
        [DataMember(Name = "maturityDate", EmitDefaultValue = true)]
        [JsonConverter(typeof(OpenAPIDateConverter))]
        public DateTime? MaturityDate { get; set; }

        /// <summary>
        /// The assumed maturity date on which the principal amount of the security becomes due and payable. This is controlled by the evaluator and represents the maturity date being used in the market. Available only for &#x60;corporate bonds&#x60;.
        /// </summary>
        /// <value>The assumed maturity date on which the principal amount of the security becomes due and payable. This is controlled by the evaluator and represents the maturity date being used in the market. Available only for &#x60;corporate bonds&#x60;.</value>
        [DataMember(Name = "assumedMaturityDate", EmitDefaultValue = true)]
        [JsonConverter(typeof(OpenAPIDateConverter))]
        public DateTime? AssumedMaturityDate { get; set; }

        /// <summary>
        /// Indicates if an instrument is default or not. Available only for &#x60;corporate bonds&#x60;.
        /// </summary>
        /// <value>Indicates if an instrument is default or not. Available only for &#x60;corporate bonds&#x60;.</value>
        [DataMember(Name = "defaulted", EmitDefaultValue = true)]
        public string Defaulted { get; set; }

        /// <summary>
        /// The ISIN (International Securities Identification Number) to which the price data applies.
        /// </summary>
        /// <value>The ISIN (International Securities Identification Number) to which the price data applies.</value>
        [DataMember(Name = "isin", EmitDefaultValue = true)]
        public string Isin { get; set; }

        /// <summary>
        /// Unique CUSIP identifier for the instrument to which the price data applies.
        /// </summary>
        /// <value>Unique CUSIP identifier for the instrument to which the price data applies.</value>
        [DataMember(Name = "cusip", EmitDefaultValue = true)]
        public string Cusip { get; set; }

        /// <summary>
        /// Returns the Vendor ID.
        /// </summary>
        /// <value>Returns the Vendor ID.</value>
        [DataMember(Name = "vendorId", EmitDefaultValue = true)]
        public string VendorId { get; set; }

        /// <summary>
        /// The IHS Markit ticker for the organization. Available only for &#x60;corporate bonds&#x60; and &#x60;asset-backed security bonds&#x60;.
        /// </summary>
        /// <value>The IHS Markit ticker for the organization. Available only for &#x60;corporate bonds&#x60; and &#x60;asset-backed security bonds&#x60;.</value>
        [DataMember(Name = "ticker", EmitDefaultValue = true)]
        public string Ticker { get; set; }

        /// <summary>
        /// EVB internal identifier of instrumentSet. Available only for &#x60;corporate bonds&#x60;.
        /// </summary>
        /// <value>EVB internal identifier of instrumentSet. Available only for &#x60;corporate bonds&#x60;.</value>
        [DataMember(Name = "setId", EmitDefaultValue = true)]
        public decimal? SetId { get; set; }

        /// <summary>
        /// The ISIN of the benchmark instrument. Available only for &#x60;corporate bonds&#x60;.
        /// </summary>
        /// <value>The ISIN of the benchmark instrument. Available only for &#x60;corporate bonds&#x60;.</value>
        [DataMember(Name = "benchmarkISIN", EmitDefaultValue = true)]
        public string BenchmarkISIN { get; set; }

        /// <summary>
        /// The CUSIP of the benchmark instrument. Available only for &#x60;corporate bonds&#x60;.
        /// </summary>
        /// <value>The CUSIP of the benchmark instrument. Available only for &#x60;corporate bonds&#x60;.</value>
        [DataMember(Name = "benchmarkCUSIP", EmitDefaultValue = true)]
        public string BenchmarkCUSIP { get; set; }

        /// <summary>
        /// Returns full bond name (issuer name-coupon rate-maturity year)
        /// </summary>
        /// <value>Returns full bond name (issuer name-coupon rate-maturity year)</value>
        [DataMember(Name = "name", EmitDefaultValue = true)]
        public string Name { get; set; }

        /// <summary>
        /// Returns the short name of the issuer. Available only for &#x60;corporate bonds&#x60; and &#39;municipal bonds&#39;.
        /// </summary>
        /// <value>Returns the short name of the issuer. Available only for &#x60;corporate bonds&#x60; and &#39;municipal bonds&#39;.</value>
        [DataMember(Name = "issuerName", EmitDefaultValue = true)]
        public string IssuerName { get; set; }

        /// <summary>
        /// The name of the benchmark instrument. Available only for &#x60;corporate bonds&#x60;.
        /// </summary>
        /// <value>The name of the benchmark instrument. Available only for &#x60;corporate bonds&#x60;.</value>
        [DataMember(Name = "benchmarkName", EmitDefaultValue = true)]
        public string BenchmarkName { get; set; }

        /// <summary>
        /// Shows that a maturity date is not specified for the instrument. Available only for &#x60;corporate bonds&#x60;.
        /// </summary>
        /// <value>Shows that a maturity date is not specified for the instrument. Available only for &#x60;corporate bonds&#x60;.</value>
        [DataMember(Name = "perpetual", EmitDefaultValue = true)]
        public string Perpetual { get; set; }

        /// <summary>
        /// Region of the coupon currency. Available only for &#x60;corporate bonds&#x60;.
        /// </summary>
        /// <value>Region of the coupon currency. Available only for &#x60;corporate bonds&#x60;.</value>
        [DataMember(Name = "region", EmitDefaultValue = true)]
        public string Region { get; set; }

        /// <summary>
        /// The code representing the bond seniority type. Available only for &#x60;corporate bonds&#x60;.
        /// </summary>
        /// <value>The code representing the bond seniority type. Available only for &#x60;corporate bonds&#x60;.</value>
        [DataMember(Name = "tier", EmitDefaultValue = true)]
        public string Tier { get; set; }

        /// <summary>
        /// Name of the instrument. Available only for &#x60;municipal bonds&#x60;.
        /// </summary>
        /// <value>Name of the instrument. Available only for &#x60;municipal bonds&#x60;.</value>
        [DataMember(Name = "issueName", EmitDefaultValue = true)]
        public string IssueName { get; set; }

        /// <summary>
        /// Returns the bond specific ticker. Available only for &#x60;asset-backed security bonds&#x60;.
        /// </summary>
        /// <value>Returns the bond specific ticker. Available only for &#x60;asset-backed security bonds&#x60;.</value>
        [DataMember(Name = "bondTicker", EmitDefaultValue = true)]
        public string BondTicker { get; set; }

        /// <summary>
        /// The field shows Index Tranche Name. Available only for &#x60;asset-backed security bonds&#x60;.
        /// </summary>
        /// <value>The field shows Index Tranche Name. Available only for &#x60;asset-backed security bonds&#x60;.</value>
        [DataMember(Name = "indexTrancheName", EmitDefaultValue = true)]
        public string IndexTrancheName { get; set; }

        /// <summary>
        /// Returns the indication of whether the bond is run to maturity or to the optional redemption/call. Available only for &#x60;asset-backed security bonds&#x60;.
        /// </summary>
        /// <value>Returns the indication of whether the bond is run to maturity or to the optional redemption/call. Available only for &#x60;asset-backed security bonds&#x60;.</value>
        [DataMember(Name = "redemption", EmitDefaultValue = true)]
        public string Redemption { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class BondMeta {\n");
            sb.Append("  RequestId: ").Append(RequestId).Append("\n");
            sb.Append("  FsymId: ").Append(FsymId).Append("\n");
            sb.Append("  Date: ").Append(Date).Append("\n");
            sb.Append("  Classification: ").Append(Classification).Append("\n");
            sb.Append("  MaturityDate: ").Append(MaturityDate).Append("\n");
            sb.Append("  AssumedMaturityDate: ").Append(AssumedMaturityDate).Append("\n");
            sb.Append("  Defaulted: ").Append(Defaulted).Append("\n");
            sb.Append("  Isin: ").Append(Isin).Append("\n");
            sb.Append("  Cusip: ").Append(Cusip).Append("\n");
            sb.Append("  VendorId: ").Append(VendorId).Append("\n");
            sb.Append("  Ticker: ").Append(Ticker).Append("\n");
            sb.Append("  SetId: ").Append(SetId).Append("\n");
            sb.Append("  BenchmarkISIN: ").Append(BenchmarkISIN).Append("\n");
            sb.Append("  BenchmarkCUSIP: ").Append(BenchmarkCUSIP).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  IssuerName: ").Append(IssuerName).Append("\n");
            sb.Append("  BenchmarkName: ").Append(BenchmarkName).Append("\n");
            sb.Append("  Perpetual: ").Append(Perpetual).Append("\n");
            sb.Append("  Region: ").Append(Region).Append("\n");
            sb.Append("  Tier: ").Append(Tier).Append("\n");
            sb.Append("  IssueName: ").Append(IssueName).Append("\n");
            sb.Append("  BondTicker: ").Append(BondTicker).Append("\n");
            sb.Append("  IndexTrancheName: ").Append(IndexTrancheName).Append("\n");
            sb.Append("  Redemption: ").Append(Redemption).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as BondMeta);
        }

        /// <summary>
        /// Returns true if BondMeta instances are equal
        /// </summary>
        /// <param name="input">Instance of BondMeta to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(BondMeta input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.RequestId == input.RequestId ||
                    (this.RequestId != null &&
                    this.RequestId.Equals(input.RequestId))
                ) && 
                (
                    this.FsymId == input.FsymId ||
                    (this.FsymId != null &&
                    this.FsymId.Equals(input.FsymId))
                ) && 
                (
                    this.Date == input.Date ||
                    (this.Date != null &&
                    this.Date.Equals(input.Date))
                ) && 
                (
                    this.Classification == input.Classification ||
                    (this.Classification != null &&
                    this.Classification.Equals(input.Classification))
                ) && 
                (
                    this.MaturityDate == input.MaturityDate ||
                    (this.MaturityDate != null &&
                    this.MaturityDate.Equals(input.MaturityDate))
                ) && 
                (
                    this.AssumedMaturityDate == input.AssumedMaturityDate ||
                    (this.AssumedMaturityDate != null &&
                    this.AssumedMaturityDate.Equals(input.AssumedMaturityDate))
                ) && 
                (
                    this.Defaulted == input.Defaulted ||
                    (this.Defaulted != null &&
                    this.Defaulted.Equals(input.Defaulted))
                ) && 
                (
                    this.Isin == input.Isin ||
                    (this.Isin != null &&
                    this.Isin.Equals(input.Isin))
                ) && 
                (
                    this.Cusip == input.Cusip ||
                    (this.Cusip != null &&
                    this.Cusip.Equals(input.Cusip))
                ) && 
                (
                    this.VendorId == input.VendorId ||
                    (this.VendorId != null &&
                    this.VendorId.Equals(input.VendorId))
                ) && 
                (
                    this.Ticker == input.Ticker ||
                    (this.Ticker != null &&
                    this.Ticker.Equals(input.Ticker))
                ) && 
                (
                    this.SetId == input.SetId ||
                    (this.SetId != null &&
                    this.SetId.Equals(input.SetId))
                ) && 
                (
                    this.BenchmarkISIN == input.BenchmarkISIN ||
                    (this.BenchmarkISIN != null &&
                    this.BenchmarkISIN.Equals(input.BenchmarkISIN))
                ) && 
                (
                    this.BenchmarkCUSIP == input.BenchmarkCUSIP ||
                    (this.BenchmarkCUSIP != null &&
                    this.BenchmarkCUSIP.Equals(input.BenchmarkCUSIP))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.IssuerName == input.IssuerName ||
                    (this.IssuerName != null &&
                    this.IssuerName.Equals(input.IssuerName))
                ) && 
                (
                    this.BenchmarkName == input.BenchmarkName ||
                    (this.BenchmarkName != null &&
                    this.BenchmarkName.Equals(input.BenchmarkName))
                ) && 
                (
                    this.Perpetual == input.Perpetual ||
                    (this.Perpetual != null &&
                    this.Perpetual.Equals(input.Perpetual))
                ) && 
                (
                    this.Region == input.Region ||
                    (this.Region != null &&
                    this.Region.Equals(input.Region))
                ) && 
                (
                    this.Tier == input.Tier ||
                    (this.Tier != null &&
                    this.Tier.Equals(input.Tier))
                ) && 
                (
                    this.IssueName == input.IssueName ||
                    (this.IssueName != null &&
                    this.IssueName.Equals(input.IssueName))
                ) && 
                (
                    this.BondTicker == input.BondTicker ||
                    (this.BondTicker != null &&
                    this.BondTicker.Equals(input.BondTicker))
                ) && 
                (
                    this.IndexTrancheName == input.IndexTrancheName ||
                    (this.IndexTrancheName != null &&
                    this.IndexTrancheName.Equals(input.IndexTrancheName))
                ) && 
                (
                    this.Redemption == input.Redemption ||
                    (this.Redemption != null &&
                    this.Redemption.Equals(input.Redemption))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.RequestId != null)
                {
                    hashCode = (hashCode * 59) + this.RequestId.GetHashCode();
                }
                if (this.FsymId != null)
                {
                    hashCode = (hashCode * 59) + this.FsymId.GetHashCode();
                }
                if (this.Date != null)
                {
                    hashCode = (hashCode * 59) + this.Date.GetHashCode();
                }
                if (this.Classification != null)
                {
                    hashCode = (hashCode * 59) + this.Classification.GetHashCode();
                }
                if (this.MaturityDate != null)
                {
                    hashCode = (hashCode * 59) + this.MaturityDate.GetHashCode();
                }
                if (this.AssumedMaturityDate != null)
                {
                    hashCode = (hashCode * 59) + this.AssumedMaturityDate.GetHashCode();
                }
                if (this.Defaulted != null)
                {
                    hashCode = (hashCode * 59) + this.Defaulted.GetHashCode();
                }
                if (this.Isin != null)
                {
                    hashCode = (hashCode * 59) + this.Isin.GetHashCode();
                }
                if (this.Cusip != null)
                {
                    hashCode = (hashCode * 59) + this.Cusip.GetHashCode();
                }
                if (this.VendorId != null)
                {
                    hashCode = (hashCode * 59) + this.VendorId.GetHashCode();
                }
                if (this.Ticker != null)
                {
                    hashCode = (hashCode * 59) + this.Ticker.GetHashCode();
                }
                if (this.SetId != null)
                {
                    hashCode = (hashCode * 59) + this.SetId.GetHashCode();
                }
                if (this.BenchmarkISIN != null)
                {
                    hashCode = (hashCode * 59) + this.BenchmarkISIN.GetHashCode();
                }
                if (this.BenchmarkCUSIP != null)
                {
                    hashCode = (hashCode * 59) + this.BenchmarkCUSIP.GetHashCode();
                }
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                if (this.IssuerName != null)
                {
                    hashCode = (hashCode * 59) + this.IssuerName.GetHashCode();
                }
                if (this.BenchmarkName != null)
                {
                    hashCode = (hashCode * 59) + this.BenchmarkName.GetHashCode();
                }
                if (this.Perpetual != null)
                {
                    hashCode = (hashCode * 59) + this.Perpetual.GetHashCode();
                }
                if (this.Region != null)
                {
                    hashCode = (hashCode * 59) + this.Region.GetHashCode();
                }
                if (this.Tier != null)
                {
                    hashCode = (hashCode * 59) + this.Tier.GetHashCode();
                }
                if (this.IssueName != null)
                {
                    hashCode = (hashCode * 59) + this.IssueName.GetHashCode();
                }
                if (this.BondTicker != null)
                {
                    hashCode = (hashCode * 59) + this.BondTicker.GetHashCode();
                }
                if (this.IndexTrancheName != null)
                {
                    hashCode = (hashCode * 59) + this.IndexTrancheName.GetHashCode();
                }
                if (this.Redemption != null)
                {
                    hashCode = (hashCode * 59) + this.Redemption.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
