/*
 * S&P Global Fixed Income Evaluated Prices & Analytics API
 *
 * Gain access to evaluated pricing and analytics data for Corporate Bonds, Municipal Bonds and Asset Backed Securities provided by S&P Global (formerly IHS Markit) .  Data returned through multiple endpoints like prices, spread, yield, yield curve, sensitivity, coupon information, securities metadata and details specific to the Asset Backed Securities. 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: api@factset.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = FactSet.SDK.SPGlobalFixedIncomeEvaluatedPricesandAnalytics.Client.OpenAPIDateConverter;

namespace FactSet.SDK.SPGlobalFixedIncomeEvaluatedPricesandAnalytics.Model
{
    /// <summary>
    /// BondSensitivity
    /// </summary>
    [DataContract(Name = "bondSensitivity")]
    public partial class BondSensitivity : IEquatable<BondSensitivity>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="BondSensitivity" /> class.
        /// </summary>
        /// <param name="requestId">Identifier that was used for the request..</param>
        /// <param name="fsymId">FactSet Regional Security Identifier. Six alpha-numeric characters, excluding vowels, with an -R suffix (XXXXXX-R). Identifies the security&#39;s best regional security data series per currency. For equities, all primary listings per region and currency are allocated a regional-level permanent identifier. The regional-level permanent identifier will be available once a SEDOL representing the region/currency has been allocated and the identifiers are on FactSet..</param>
        /// <param name="date">The date on which the price is calculated..</param>
        /// <param name="bidConvexity">Measures the change of Duration with the change in yield,based on the bid price .Available only  for &#x60;corporate bonds&#x60; and &#x60;municipal bonds&#x60;..</param>
        /// <param name="midConvexity">Measures the change of duration with the change in yield,based on the mid price .Available only  for &#x60;corporate bonds&#x60;.</param>
        /// <param name="askConvexity">Measures the change of duration with the change in yield,based on the ask price .Available only  for &#x60;corporate bonds&#x60;.</param>
        /// <param name="bidEffectiveConvexity">The effective convexity based on the bid price .Available only  for &#x60;corporate bonds&#x60;..</param>
        /// <param name="midEffectiveConvexity">The effective convexity based on the mid price .Available only  for &#x60;corporate bonds&#x60;..</param>
        /// <param name="askEffectiveConvexity"> The effective convexity based on the ask price. Available only  for &#x60;corporate bonds&#x60;..</param>
        /// <param name="bidEffectiveDuration">A duration calculation for bonds with embedded options,based on the bid price. Effective duration takes into account that expected cash flows fluctuate as interest rates change. Available only  for &#x60;corporate bonds&#x60;.</param>
        /// <param name="midEffectiveDuration">A duration calculation for bonds with embedded options,based on the mid price. Effective duration takes into account that expected cash flows fluctuate as interest rates change .Available only  for &#x60;corporate bonds&#x60;..</param>
        /// <param name="askEffectiveDuration">A duration calculation for bonds with embedded options,based on the ask price. Effective duration takes into account that expected cash flows fluctuate as interest rates change. Available only  for &#x60;corporate bonds&#x60;.</param>
        /// <param name="bidMacaulayDuration">The weighted average maturity of bond, where the weights are relative discounted cash flows in each period,based on the bid price .Available only  for &#x60;corporate bonds&#x60;..</param>
        /// <param name="midMacaulayDuration">The weighted average maturity of bond, where the weights are relative discounted cash flows in each period,based on the mid price .Available only  for &#x60;corporate bonds&#x60;..</param>
        /// <param name="askMacaulayDuration">The weighted average maturity of bond, where the weights are relative discounted cash flows in each period,based on the ask price .Available only  for &#x60;corporate bonds&#x60;..</param>
        /// <param name="bidModifiedDuration">The first derivative of the bond price, with respect to yield,based on the bid price..</param>
        /// <param name="midModifiedDuration">The first derivative of the bond price, with respect to yield,based on the mid price. Available only  for &#x60;corporate bonds&#x60;..</param>
        /// <param name="askModifiedDuration">The first derivative of the bond price, with respect to yield,based on the ask price. Available only  for &#x60;corporate bonds&#x60;..</param>
        public BondSensitivity(string requestId = default(string), string fsymId = default(string), DateTime? date = default(DateTime?), double? bidConvexity = default(double?), double? midConvexity = default(double?), double? askConvexity = default(double?), double? bidEffectiveConvexity = default(double?), double? midEffectiveConvexity = default(double?), double? askEffectiveConvexity = default(double?), double? bidEffectiveDuration = default(double?), double? midEffectiveDuration = default(double?), double? askEffectiveDuration = default(double?), double? bidMacaulayDuration = default(double?), double? midMacaulayDuration = default(double?), double? askMacaulayDuration = default(double?), double? bidModifiedDuration = default(double?), double? midModifiedDuration = default(double?), double? askModifiedDuration = default(double?))
        {
            this.RequestId = requestId;
            this.FsymId = fsymId;
            this.Date = date;
            this.BidConvexity = bidConvexity;
            this.MidConvexity = midConvexity;
            this.AskConvexity = askConvexity;
            this.BidEffectiveConvexity = bidEffectiveConvexity;
            this.MidEffectiveConvexity = midEffectiveConvexity;
            this.AskEffectiveConvexity = askEffectiveConvexity;
            this.BidEffectiveDuration = bidEffectiveDuration;
            this.MidEffectiveDuration = midEffectiveDuration;
            this.AskEffectiveDuration = askEffectiveDuration;
            this.BidMacaulayDuration = bidMacaulayDuration;
            this.MidMacaulayDuration = midMacaulayDuration;
            this.AskMacaulayDuration = askMacaulayDuration;
            this.BidModifiedDuration = bidModifiedDuration;
            this.MidModifiedDuration = midModifiedDuration;
            this.AskModifiedDuration = askModifiedDuration;
        }

        /// <summary>
        /// Identifier that was used for the request.
        /// </summary>
        /// <value>Identifier that was used for the request.</value>
        [DataMember(Name = "requestId", EmitDefaultValue = false)]
        public string RequestId { get; set; }

        /// <summary>
        /// FactSet Regional Security Identifier. Six alpha-numeric characters, excluding vowels, with an -R suffix (XXXXXX-R). Identifies the security&#39;s best regional security data series per currency. For equities, all primary listings per region and currency are allocated a regional-level permanent identifier. The regional-level permanent identifier will be available once a SEDOL representing the region/currency has been allocated and the identifiers are on FactSet.
        /// </summary>
        /// <value>FactSet Regional Security Identifier. Six alpha-numeric characters, excluding vowels, with an -R suffix (XXXXXX-R). Identifies the security&#39;s best regional security data series per currency. For equities, all primary listings per region and currency are allocated a regional-level permanent identifier. The regional-level permanent identifier will be available once a SEDOL representing the region/currency has been allocated and the identifiers are on FactSet.</value>
        [DataMember(Name = "fsymId", EmitDefaultValue = true)]
        public string FsymId { get; set; }

        /// <summary>
        /// The date on which the price is calculated.
        /// </summary>
        /// <value>The date on which the price is calculated.</value>
        [DataMember(Name = "date", EmitDefaultValue = true)]
        [JsonConverter(typeof(OpenAPIDateConverter))]
        public DateTime? Date { get; set; }

        /// <summary>
        /// Measures the change of Duration with the change in yield,based on the bid price .Available only  for &#x60;corporate bonds&#x60; and &#x60;municipal bonds&#x60;.
        /// </summary>
        /// <value>Measures the change of Duration with the change in yield,based on the bid price .Available only  for &#x60;corporate bonds&#x60; and &#x60;municipal bonds&#x60;.</value>
        [DataMember(Name = "bidConvexity", EmitDefaultValue = true)]
        public double? BidConvexity { get; set; }

        /// <summary>
        /// Measures the change of duration with the change in yield,based on the mid price .Available only  for &#x60;corporate bonds&#x60;
        /// </summary>
        /// <value>Measures the change of duration with the change in yield,based on the mid price .Available only  for &#x60;corporate bonds&#x60;</value>
        [DataMember(Name = "midConvexity", EmitDefaultValue = true)]
        public double? MidConvexity { get; set; }

        /// <summary>
        /// Measures the change of duration with the change in yield,based on the ask price .Available only  for &#x60;corporate bonds&#x60;
        /// </summary>
        /// <value>Measures the change of duration with the change in yield,based on the ask price .Available only  for &#x60;corporate bonds&#x60;</value>
        [DataMember(Name = "askConvexity", EmitDefaultValue = true)]
        public double? AskConvexity { get; set; }

        /// <summary>
        /// The effective convexity based on the bid price .Available only  for &#x60;corporate bonds&#x60;.
        /// </summary>
        /// <value>The effective convexity based on the bid price .Available only  for &#x60;corporate bonds&#x60;.</value>
        [DataMember(Name = "bidEffectiveConvexity", EmitDefaultValue = true)]
        public double? BidEffectiveConvexity { get; set; }

        /// <summary>
        /// The effective convexity based on the mid price .Available only  for &#x60;corporate bonds&#x60;.
        /// </summary>
        /// <value>The effective convexity based on the mid price .Available only  for &#x60;corporate bonds&#x60;.</value>
        [DataMember(Name = "midEffectiveConvexity", EmitDefaultValue = true)]
        public double? MidEffectiveConvexity { get; set; }

        /// <summary>
        ///  The effective convexity based on the ask price. Available only  for &#x60;corporate bonds&#x60;.
        /// </summary>
        /// <value> The effective convexity based on the ask price. Available only  for &#x60;corporate bonds&#x60;.</value>
        [DataMember(Name = "askEffectiveConvexity", EmitDefaultValue = true)]
        public double? AskEffectiveConvexity { get; set; }

        /// <summary>
        /// A duration calculation for bonds with embedded options,based on the bid price. Effective duration takes into account that expected cash flows fluctuate as interest rates change. Available only  for &#x60;corporate bonds&#x60;
        /// </summary>
        /// <value>A duration calculation for bonds with embedded options,based on the bid price. Effective duration takes into account that expected cash flows fluctuate as interest rates change. Available only  for &#x60;corporate bonds&#x60;</value>
        [DataMember(Name = "bidEffectiveDuration", EmitDefaultValue = true)]
        public double? BidEffectiveDuration { get; set; }

        /// <summary>
        /// A duration calculation for bonds with embedded options,based on the mid price. Effective duration takes into account that expected cash flows fluctuate as interest rates change .Available only  for &#x60;corporate bonds&#x60;.
        /// </summary>
        /// <value>A duration calculation for bonds with embedded options,based on the mid price. Effective duration takes into account that expected cash flows fluctuate as interest rates change .Available only  for &#x60;corporate bonds&#x60;.</value>
        [DataMember(Name = "midEffectiveDuration", EmitDefaultValue = true)]
        public double? MidEffectiveDuration { get; set; }

        /// <summary>
        /// A duration calculation for bonds with embedded options,based on the ask price. Effective duration takes into account that expected cash flows fluctuate as interest rates change. Available only  for &#x60;corporate bonds&#x60;
        /// </summary>
        /// <value>A duration calculation for bonds with embedded options,based on the ask price. Effective duration takes into account that expected cash flows fluctuate as interest rates change. Available only  for &#x60;corporate bonds&#x60;</value>
        [DataMember(Name = "askEffectiveDuration", EmitDefaultValue = true)]
        public double? AskEffectiveDuration { get; set; }

        /// <summary>
        /// The weighted average maturity of bond, where the weights are relative discounted cash flows in each period,based on the bid price .Available only  for &#x60;corporate bonds&#x60;.
        /// </summary>
        /// <value>The weighted average maturity of bond, where the weights are relative discounted cash flows in each period,based on the bid price .Available only  for &#x60;corporate bonds&#x60;.</value>
        [DataMember(Name = "bidMacaulayDuration", EmitDefaultValue = true)]
        public double? BidMacaulayDuration { get; set; }

        /// <summary>
        /// The weighted average maturity of bond, where the weights are relative discounted cash flows in each period,based on the mid price .Available only  for &#x60;corporate bonds&#x60;.
        /// </summary>
        /// <value>The weighted average maturity of bond, where the weights are relative discounted cash flows in each period,based on the mid price .Available only  for &#x60;corporate bonds&#x60;.</value>
        [DataMember(Name = "midMacaulayDuration", EmitDefaultValue = true)]
        public double? MidMacaulayDuration { get; set; }

        /// <summary>
        /// The weighted average maturity of bond, where the weights are relative discounted cash flows in each period,based on the ask price .Available only  for &#x60;corporate bonds&#x60;.
        /// </summary>
        /// <value>The weighted average maturity of bond, where the weights are relative discounted cash flows in each period,based on the ask price .Available only  for &#x60;corporate bonds&#x60;.</value>
        [DataMember(Name = "askMacaulayDuration", EmitDefaultValue = true)]
        public double? AskMacaulayDuration { get; set; }

        /// <summary>
        /// The first derivative of the bond price, with respect to yield,based on the bid price.
        /// </summary>
        /// <value>The first derivative of the bond price, with respect to yield,based on the bid price.</value>
        [DataMember(Name = "bidModifiedDuration", EmitDefaultValue = true)]
        public double? BidModifiedDuration { get; set; }

        /// <summary>
        /// The first derivative of the bond price, with respect to yield,based on the mid price. Available only  for &#x60;corporate bonds&#x60;.
        /// </summary>
        /// <value>The first derivative of the bond price, with respect to yield,based on the mid price. Available only  for &#x60;corporate bonds&#x60;.</value>
        [DataMember(Name = "midModifiedDuration", EmitDefaultValue = true)]
        public double? MidModifiedDuration { get; set; }

        /// <summary>
        /// The first derivative of the bond price, with respect to yield,based on the ask price. Available only  for &#x60;corporate bonds&#x60;.
        /// </summary>
        /// <value>The first derivative of the bond price, with respect to yield,based on the ask price. Available only  for &#x60;corporate bonds&#x60;.</value>
        [DataMember(Name = "askModifiedDuration", EmitDefaultValue = true)]
        public double? AskModifiedDuration { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class BondSensitivity {\n");
            sb.Append("  RequestId: ").Append(RequestId).Append("\n");
            sb.Append("  FsymId: ").Append(FsymId).Append("\n");
            sb.Append("  Date: ").Append(Date).Append("\n");
            sb.Append("  BidConvexity: ").Append(BidConvexity).Append("\n");
            sb.Append("  MidConvexity: ").Append(MidConvexity).Append("\n");
            sb.Append("  AskConvexity: ").Append(AskConvexity).Append("\n");
            sb.Append("  BidEffectiveConvexity: ").Append(BidEffectiveConvexity).Append("\n");
            sb.Append("  MidEffectiveConvexity: ").Append(MidEffectiveConvexity).Append("\n");
            sb.Append("  AskEffectiveConvexity: ").Append(AskEffectiveConvexity).Append("\n");
            sb.Append("  BidEffectiveDuration: ").Append(BidEffectiveDuration).Append("\n");
            sb.Append("  MidEffectiveDuration: ").Append(MidEffectiveDuration).Append("\n");
            sb.Append("  AskEffectiveDuration: ").Append(AskEffectiveDuration).Append("\n");
            sb.Append("  BidMacaulayDuration: ").Append(BidMacaulayDuration).Append("\n");
            sb.Append("  MidMacaulayDuration: ").Append(MidMacaulayDuration).Append("\n");
            sb.Append("  AskMacaulayDuration: ").Append(AskMacaulayDuration).Append("\n");
            sb.Append("  BidModifiedDuration: ").Append(BidModifiedDuration).Append("\n");
            sb.Append("  MidModifiedDuration: ").Append(MidModifiedDuration).Append("\n");
            sb.Append("  AskModifiedDuration: ").Append(AskModifiedDuration).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as BondSensitivity);
        }

        /// <summary>
        /// Returns true if BondSensitivity instances are equal
        /// </summary>
        /// <param name="input">Instance of BondSensitivity to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(BondSensitivity input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.RequestId == input.RequestId ||
                    (this.RequestId != null &&
                    this.RequestId.Equals(input.RequestId))
                ) && 
                (
                    this.FsymId == input.FsymId ||
                    (this.FsymId != null &&
                    this.FsymId.Equals(input.FsymId))
                ) && 
                (
                    this.Date == input.Date ||
                    (this.Date != null &&
                    this.Date.Equals(input.Date))
                ) && 
                (
                    this.BidConvexity == input.BidConvexity ||
                    (this.BidConvexity != null &&
                    this.BidConvexity.Equals(input.BidConvexity))
                ) && 
                (
                    this.MidConvexity == input.MidConvexity ||
                    (this.MidConvexity != null &&
                    this.MidConvexity.Equals(input.MidConvexity))
                ) && 
                (
                    this.AskConvexity == input.AskConvexity ||
                    (this.AskConvexity != null &&
                    this.AskConvexity.Equals(input.AskConvexity))
                ) && 
                (
                    this.BidEffectiveConvexity == input.BidEffectiveConvexity ||
                    (this.BidEffectiveConvexity != null &&
                    this.BidEffectiveConvexity.Equals(input.BidEffectiveConvexity))
                ) && 
                (
                    this.MidEffectiveConvexity == input.MidEffectiveConvexity ||
                    (this.MidEffectiveConvexity != null &&
                    this.MidEffectiveConvexity.Equals(input.MidEffectiveConvexity))
                ) && 
                (
                    this.AskEffectiveConvexity == input.AskEffectiveConvexity ||
                    (this.AskEffectiveConvexity != null &&
                    this.AskEffectiveConvexity.Equals(input.AskEffectiveConvexity))
                ) && 
                (
                    this.BidEffectiveDuration == input.BidEffectiveDuration ||
                    (this.BidEffectiveDuration != null &&
                    this.BidEffectiveDuration.Equals(input.BidEffectiveDuration))
                ) && 
                (
                    this.MidEffectiveDuration == input.MidEffectiveDuration ||
                    (this.MidEffectiveDuration != null &&
                    this.MidEffectiveDuration.Equals(input.MidEffectiveDuration))
                ) && 
                (
                    this.AskEffectiveDuration == input.AskEffectiveDuration ||
                    (this.AskEffectiveDuration != null &&
                    this.AskEffectiveDuration.Equals(input.AskEffectiveDuration))
                ) && 
                (
                    this.BidMacaulayDuration == input.BidMacaulayDuration ||
                    (this.BidMacaulayDuration != null &&
                    this.BidMacaulayDuration.Equals(input.BidMacaulayDuration))
                ) && 
                (
                    this.MidMacaulayDuration == input.MidMacaulayDuration ||
                    (this.MidMacaulayDuration != null &&
                    this.MidMacaulayDuration.Equals(input.MidMacaulayDuration))
                ) && 
                (
                    this.AskMacaulayDuration == input.AskMacaulayDuration ||
                    (this.AskMacaulayDuration != null &&
                    this.AskMacaulayDuration.Equals(input.AskMacaulayDuration))
                ) && 
                (
                    this.BidModifiedDuration == input.BidModifiedDuration ||
                    (this.BidModifiedDuration != null &&
                    this.BidModifiedDuration.Equals(input.BidModifiedDuration))
                ) && 
                (
                    this.MidModifiedDuration == input.MidModifiedDuration ||
                    (this.MidModifiedDuration != null &&
                    this.MidModifiedDuration.Equals(input.MidModifiedDuration))
                ) && 
                (
                    this.AskModifiedDuration == input.AskModifiedDuration ||
                    (this.AskModifiedDuration != null &&
                    this.AskModifiedDuration.Equals(input.AskModifiedDuration))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.RequestId != null)
                {
                    hashCode = (hashCode * 59) + this.RequestId.GetHashCode();
                }
                if (this.FsymId != null)
                {
                    hashCode = (hashCode * 59) + this.FsymId.GetHashCode();
                }
                if (this.Date != null)
                {
                    hashCode = (hashCode * 59) + this.Date.GetHashCode();
                }
                if (this.BidConvexity != null)
                {
                    hashCode = (hashCode * 59) + this.BidConvexity.GetHashCode();
                }
                if (this.MidConvexity != null)
                {
                    hashCode = (hashCode * 59) + this.MidConvexity.GetHashCode();
                }
                if (this.AskConvexity != null)
                {
                    hashCode = (hashCode * 59) + this.AskConvexity.GetHashCode();
                }
                if (this.BidEffectiveConvexity != null)
                {
                    hashCode = (hashCode * 59) + this.BidEffectiveConvexity.GetHashCode();
                }
                if (this.MidEffectiveConvexity != null)
                {
                    hashCode = (hashCode * 59) + this.MidEffectiveConvexity.GetHashCode();
                }
                if (this.AskEffectiveConvexity != null)
                {
                    hashCode = (hashCode * 59) + this.AskEffectiveConvexity.GetHashCode();
                }
                if (this.BidEffectiveDuration != null)
                {
                    hashCode = (hashCode * 59) + this.BidEffectiveDuration.GetHashCode();
                }
                if (this.MidEffectiveDuration != null)
                {
                    hashCode = (hashCode * 59) + this.MidEffectiveDuration.GetHashCode();
                }
                if (this.AskEffectiveDuration != null)
                {
                    hashCode = (hashCode * 59) + this.AskEffectiveDuration.GetHashCode();
                }
                if (this.BidMacaulayDuration != null)
                {
                    hashCode = (hashCode * 59) + this.BidMacaulayDuration.GetHashCode();
                }
                if (this.MidMacaulayDuration != null)
                {
                    hashCode = (hashCode * 59) + this.MidMacaulayDuration.GetHashCode();
                }
                if (this.AskMacaulayDuration != null)
                {
                    hashCode = (hashCode * 59) + this.AskMacaulayDuration.GetHashCode();
                }
                if (this.BidModifiedDuration != null)
                {
                    hashCode = (hashCode * 59) + this.BidModifiedDuration.GetHashCode();
                }
                if (this.MidModifiedDuration != null)
                {
                    hashCode = (hashCode * 59) + this.MidModifiedDuration.GetHashCode();
                }
                if (this.AskModifiedDuration != null)
                {
                    hashCode = (hashCode * 59) + this.AskModifiedDuration.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
