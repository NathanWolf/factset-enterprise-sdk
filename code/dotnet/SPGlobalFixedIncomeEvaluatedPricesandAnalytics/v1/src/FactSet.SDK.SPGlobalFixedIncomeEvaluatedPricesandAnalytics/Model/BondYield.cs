/*
 * S&P Global Fixed Income Evaluated Prices & Analytics API
 *
 * Gain access to evaluated pricing and analytics data for Corporate Bonds, Municipal Bonds and Asset Backed Securities provided by S&P Global (formerly IHS Markit) .  Data returned through multiple endpoints like prices, spread, yield, yield curve, sensitivity, coupon information, securities metadata and details specific to the Asset Backed Securities. 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: api@factset.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = FactSet.SDK.SPGlobalFixedIncomeEvaluatedPricesandAnalytics.Client.OpenAPIDateConverter;

namespace FactSet.SDK.SPGlobalFixedIncomeEvaluatedPricesandAnalytics.Model
{
    /// <summary>
    /// BondYield
    /// </summary>
    [DataContract(Name = "bondYield")]
    public partial class BondYield : IEquatable<BondYield>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="BondYield" /> class.
        /// </summary>
        /// <param name="requestId">Identifier that was used for the request..</param>
        /// <param name="fsymId">FactSet Regional Security Identifier. Six alpha-numeric characters, excluding vowels, with an -R suffix (XXXXXX-R). Identifies the security&#39;s best regional security data series per currency. For equities, all primary listings per region and currency are allocated a regional-level permanent identifier. The regional-level permanent identifier will be available once a SEDOL representing the region/currency has been allocated and the identifiers are on FactSet..</param>
        /// <param name="date">The date on which the price is calculated..</param>
        /// <param name="bidYieldToMaturity">The yield to maturity of the bid price of the instrument. Available only for &#x60;corporate bonds&#x60; and &#x60;asset-backed security bonds&#x60;..</param>
        /// <param name="midYieldToMaturity">The yield to maturity of the mid price of the instrument. Available only for &#x60;corporate bonds&#x60; and &#x60;asset-backed security bonds&#x60;..</param>
        /// <param name="askYieldToMaturity">The yield to maturity of the ask price of the instrument. Available only for &#x60;corporate bonds&#x60;..</param>
        /// <param name="bidYieldToWorst">The lowest yield, under all possible scenarios, of the bid price of the instrument. Available only for &#x60;corporate bonds&#x60; and &#x60;municipal bonds&#x60;..</param>
        /// <param name="midYieldToWorst">The lowest yield, under all possible scenarios, of the mid price of the instrument. Available only for &#x60;corporate bonds&#x60; and &#x60;municipal bonds&#x60;..</param>
        /// <param name="askYieldToWorst">The lowest yield, under all possible scenarios, of the ask price of the instrument. Available only for &#x60;corporate bonds&#x60; and &#x60;municipal bonds&#x60;..</param>
        /// <param name="benchmarkBidYieldToMaturity">The bid yield to maturity of the benchmark instrument. Available only for &#x60;corporate bonds&#x60;..</param>
        /// <param name="benchmarkMidYieldToMaturity">The mid yield to maturity of the benchmark instrument. Available only for &#x60;corporate bonds&#x60;..</param>
        /// <param name="benchmarkAskYieldToMaturity">The ask yield to maturity of the benchmark instrument. Available only for &#x60;corporate bonds&#x60;..</param>
        /// <param name="bidYieldToCall">The yield to call of the bid price of the instrument. Available only for &#x60;asset-backed security bonds&#x60;..</param>
        /// <param name="midYieldToCall">The yield to call of the mid price of the instrument. Available only for &#x60;asset-backed security bonds&#x60;..</param>
        /// <param name="yieldTWDate">The date used in the yield to worst calculation. Available only for &#39;corporate bonds&#39;..</param>
        public BondYield(string requestId = default(string), string fsymId = default(string), DateTime? date = default(DateTime?), double? bidYieldToMaturity = default(double?), double? midYieldToMaturity = default(double?), double? askYieldToMaturity = default(double?), double? bidYieldToWorst = default(double?), double? midYieldToWorst = default(double?), double? askYieldToWorst = default(double?), double? benchmarkBidYieldToMaturity = default(double?), double? benchmarkMidYieldToMaturity = default(double?), double? benchmarkAskYieldToMaturity = default(double?), double? bidYieldToCall = default(double?), double? midYieldToCall = default(double?), DateTime? yieldTWDate = default(DateTime?))
        {
            this.RequestId = requestId;
            this.FsymId = fsymId;
            this.Date = date;
            this.BidYieldToMaturity = bidYieldToMaturity;
            this.MidYieldToMaturity = midYieldToMaturity;
            this.AskYieldToMaturity = askYieldToMaturity;
            this.BidYieldToWorst = bidYieldToWorst;
            this.MidYieldToWorst = midYieldToWorst;
            this.AskYieldToWorst = askYieldToWorst;
            this.BenchmarkBidYieldToMaturity = benchmarkBidYieldToMaturity;
            this.BenchmarkMidYieldToMaturity = benchmarkMidYieldToMaturity;
            this.BenchmarkAskYieldToMaturity = benchmarkAskYieldToMaturity;
            this.BidYieldToCall = bidYieldToCall;
            this.MidYieldToCall = midYieldToCall;
            this.YieldTWDate = yieldTWDate;
        }

        /// <summary>
        /// Identifier that was used for the request.
        /// </summary>
        /// <value>Identifier that was used for the request.</value>
        [DataMember(Name = "requestId", EmitDefaultValue = false)]
        public string RequestId { get; set; }

        /// <summary>
        /// FactSet Regional Security Identifier. Six alpha-numeric characters, excluding vowels, with an -R suffix (XXXXXX-R). Identifies the security&#39;s best regional security data series per currency. For equities, all primary listings per region and currency are allocated a regional-level permanent identifier. The regional-level permanent identifier will be available once a SEDOL representing the region/currency has been allocated and the identifiers are on FactSet.
        /// </summary>
        /// <value>FactSet Regional Security Identifier. Six alpha-numeric characters, excluding vowels, with an -R suffix (XXXXXX-R). Identifies the security&#39;s best regional security data series per currency. For equities, all primary listings per region and currency are allocated a regional-level permanent identifier. The regional-level permanent identifier will be available once a SEDOL representing the region/currency has been allocated and the identifiers are on FactSet.</value>
        [DataMember(Name = "fsymId", EmitDefaultValue = true)]
        public string FsymId { get; set; }

        /// <summary>
        /// The date on which the price is calculated.
        /// </summary>
        /// <value>The date on which the price is calculated.</value>
        [DataMember(Name = "date", EmitDefaultValue = true)]
        [JsonConverter(typeof(OpenAPIDateConverter))]
        public DateTime? Date { get; set; }

        /// <summary>
        /// The yield to maturity of the bid price of the instrument. Available only for &#x60;corporate bonds&#x60; and &#x60;asset-backed security bonds&#x60;.
        /// </summary>
        /// <value>The yield to maturity of the bid price of the instrument. Available only for &#x60;corporate bonds&#x60; and &#x60;asset-backed security bonds&#x60;.</value>
        [DataMember(Name = "bidYieldToMaturity", EmitDefaultValue = true)]
        public double? BidYieldToMaturity { get; set; }

        /// <summary>
        /// The yield to maturity of the mid price of the instrument. Available only for &#x60;corporate bonds&#x60; and &#x60;asset-backed security bonds&#x60;.
        /// </summary>
        /// <value>The yield to maturity of the mid price of the instrument. Available only for &#x60;corporate bonds&#x60; and &#x60;asset-backed security bonds&#x60;.</value>
        [DataMember(Name = "midYieldToMaturity", EmitDefaultValue = true)]
        public double? MidYieldToMaturity { get; set; }

        /// <summary>
        /// The yield to maturity of the ask price of the instrument. Available only for &#x60;corporate bonds&#x60;.
        /// </summary>
        /// <value>The yield to maturity of the ask price of the instrument. Available only for &#x60;corporate bonds&#x60;.</value>
        [DataMember(Name = "askYieldToMaturity", EmitDefaultValue = true)]
        public double? AskYieldToMaturity { get; set; }

        /// <summary>
        /// The lowest yield, under all possible scenarios, of the bid price of the instrument. Available only for &#x60;corporate bonds&#x60; and &#x60;municipal bonds&#x60;.
        /// </summary>
        /// <value>The lowest yield, under all possible scenarios, of the bid price of the instrument. Available only for &#x60;corporate bonds&#x60; and &#x60;municipal bonds&#x60;.</value>
        [DataMember(Name = "bidYieldToWorst", EmitDefaultValue = true)]
        public double? BidYieldToWorst { get; set; }

        /// <summary>
        /// The lowest yield, under all possible scenarios, of the mid price of the instrument. Available only for &#x60;corporate bonds&#x60; and &#x60;municipal bonds&#x60;.
        /// </summary>
        /// <value>The lowest yield, under all possible scenarios, of the mid price of the instrument. Available only for &#x60;corporate bonds&#x60; and &#x60;municipal bonds&#x60;.</value>
        [DataMember(Name = "midYieldToWorst", EmitDefaultValue = true)]
        public double? MidYieldToWorst { get; set; }

        /// <summary>
        /// The lowest yield, under all possible scenarios, of the ask price of the instrument. Available only for &#x60;corporate bonds&#x60; and &#x60;municipal bonds&#x60;.
        /// </summary>
        /// <value>The lowest yield, under all possible scenarios, of the ask price of the instrument. Available only for &#x60;corporate bonds&#x60; and &#x60;municipal bonds&#x60;.</value>
        [DataMember(Name = "askYieldToWorst", EmitDefaultValue = true)]
        public double? AskYieldToWorst { get; set; }

        /// <summary>
        /// The bid yield to maturity of the benchmark instrument. Available only for &#x60;corporate bonds&#x60;.
        /// </summary>
        /// <value>The bid yield to maturity of the benchmark instrument. Available only for &#x60;corporate bonds&#x60;.</value>
        [DataMember(Name = "benchmarkBidYieldToMaturity", EmitDefaultValue = true)]
        public double? BenchmarkBidYieldToMaturity { get; set; }

        /// <summary>
        /// The mid yield to maturity of the benchmark instrument. Available only for &#x60;corporate bonds&#x60;.
        /// </summary>
        /// <value>The mid yield to maturity of the benchmark instrument. Available only for &#x60;corporate bonds&#x60;.</value>
        [DataMember(Name = "benchmarkMidYieldToMaturity", EmitDefaultValue = true)]
        public double? BenchmarkMidYieldToMaturity { get; set; }

        /// <summary>
        /// The ask yield to maturity of the benchmark instrument. Available only for &#x60;corporate bonds&#x60;.
        /// </summary>
        /// <value>The ask yield to maturity of the benchmark instrument. Available only for &#x60;corporate bonds&#x60;.</value>
        [DataMember(Name = "benchmarkAskYieldToMaturity", EmitDefaultValue = true)]
        public double? BenchmarkAskYieldToMaturity { get; set; }

        /// <summary>
        /// The yield to call of the bid price of the instrument. Available only for &#x60;asset-backed security bonds&#x60;.
        /// </summary>
        /// <value>The yield to call of the bid price of the instrument. Available only for &#x60;asset-backed security bonds&#x60;.</value>
        [DataMember(Name = "bidYieldToCall", EmitDefaultValue = true)]
        public double? BidYieldToCall { get; set; }

        /// <summary>
        /// The yield to call of the mid price of the instrument. Available only for &#x60;asset-backed security bonds&#x60;.
        /// </summary>
        /// <value>The yield to call of the mid price of the instrument. Available only for &#x60;asset-backed security bonds&#x60;.</value>
        [DataMember(Name = "midYieldToCall", EmitDefaultValue = true)]
        public double? MidYieldToCall { get; set; }

        /// <summary>
        /// The date used in the yield to worst calculation. Available only for &#39;corporate bonds&#39;.
        /// </summary>
        /// <value>The date used in the yield to worst calculation. Available only for &#39;corporate bonds&#39;.</value>
        [DataMember(Name = "yieldTWDate", EmitDefaultValue = true)]
        [JsonConverter(typeof(OpenAPIDateConverter))]
        public DateTime? YieldTWDate { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class BondYield {\n");
            sb.Append("  RequestId: ").Append(RequestId).Append("\n");
            sb.Append("  FsymId: ").Append(FsymId).Append("\n");
            sb.Append("  Date: ").Append(Date).Append("\n");
            sb.Append("  BidYieldToMaturity: ").Append(BidYieldToMaturity).Append("\n");
            sb.Append("  MidYieldToMaturity: ").Append(MidYieldToMaturity).Append("\n");
            sb.Append("  AskYieldToMaturity: ").Append(AskYieldToMaturity).Append("\n");
            sb.Append("  BidYieldToWorst: ").Append(BidYieldToWorst).Append("\n");
            sb.Append("  MidYieldToWorst: ").Append(MidYieldToWorst).Append("\n");
            sb.Append("  AskYieldToWorst: ").Append(AskYieldToWorst).Append("\n");
            sb.Append("  BenchmarkBidYieldToMaturity: ").Append(BenchmarkBidYieldToMaturity).Append("\n");
            sb.Append("  BenchmarkMidYieldToMaturity: ").Append(BenchmarkMidYieldToMaturity).Append("\n");
            sb.Append("  BenchmarkAskYieldToMaturity: ").Append(BenchmarkAskYieldToMaturity).Append("\n");
            sb.Append("  BidYieldToCall: ").Append(BidYieldToCall).Append("\n");
            sb.Append("  MidYieldToCall: ").Append(MidYieldToCall).Append("\n");
            sb.Append("  YieldTWDate: ").Append(YieldTWDate).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as BondYield);
        }

        /// <summary>
        /// Returns true if BondYield instances are equal
        /// </summary>
        /// <param name="input">Instance of BondYield to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(BondYield input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.RequestId == input.RequestId ||
                    (this.RequestId != null &&
                    this.RequestId.Equals(input.RequestId))
                ) && 
                (
                    this.FsymId == input.FsymId ||
                    (this.FsymId != null &&
                    this.FsymId.Equals(input.FsymId))
                ) && 
                (
                    this.Date == input.Date ||
                    (this.Date != null &&
                    this.Date.Equals(input.Date))
                ) && 
                (
                    this.BidYieldToMaturity == input.BidYieldToMaturity ||
                    (this.BidYieldToMaturity != null &&
                    this.BidYieldToMaturity.Equals(input.BidYieldToMaturity))
                ) && 
                (
                    this.MidYieldToMaturity == input.MidYieldToMaturity ||
                    (this.MidYieldToMaturity != null &&
                    this.MidYieldToMaturity.Equals(input.MidYieldToMaturity))
                ) && 
                (
                    this.AskYieldToMaturity == input.AskYieldToMaturity ||
                    (this.AskYieldToMaturity != null &&
                    this.AskYieldToMaturity.Equals(input.AskYieldToMaturity))
                ) && 
                (
                    this.BidYieldToWorst == input.BidYieldToWorst ||
                    (this.BidYieldToWorst != null &&
                    this.BidYieldToWorst.Equals(input.BidYieldToWorst))
                ) && 
                (
                    this.MidYieldToWorst == input.MidYieldToWorst ||
                    (this.MidYieldToWorst != null &&
                    this.MidYieldToWorst.Equals(input.MidYieldToWorst))
                ) && 
                (
                    this.AskYieldToWorst == input.AskYieldToWorst ||
                    (this.AskYieldToWorst != null &&
                    this.AskYieldToWorst.Equals(input.AskYieldToWorst))
                ) && 
                (
                    this.BenchmarkBidYieldToMaturity == input.BenchmarkBidYieldToMaturity ||
                    (this.BenchmarkBidYieldToMaturity != null &&
                    this.BenchmarkBidYieldToMaturity.Equals(input.BenchmarkBidYieldToMaturity))
                ) && 
                (
                    this.BenchmarkMidYieldToMaturity == input.BenchmarkMidYieldToMaturity ||
                    (this.BenchmarkMidYieldToMaturity != null &&
                    this.BenchmarkMidYieldToMaturity.Equals(input.BenchmarkMidYieldToMaturity))
                ) && 
                (
                    this.BenchmarkAskYieldToMaturity == input.BenchmarkAskYieldToMaturity ||
                    (this.BenchmarkAskYieldToMaturity != null &&
                    this.BenchmarkAskYieldToMaturity.Equals(input.BenchmarkAskYieldToMaturity))
                ) && 
                (
                    this.BidYieldToCall == input.BidYieldToCall ||
                    (this.BidYieldToCall != null &&
                    this.BidYieldToCall.Equals(input.BidYieldToCall))
                ) && 
                (
                    this.MidYieldToCall == input.MidYieldToCall ||
                    (this.MidYieldToCall != null &&
                    this.MidYieldToCall.Equals(input.MidYieldToCall))
                ) && 
                (
                    this.YieldTWDate == input.YieldTWDate ||
                    (this.YieldTWDate != null &&
                    this.YieldTWDate.Equals(input.YieldTWDate))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.RequestId != null)
                {
                    hashCode = (hashCode * 59) + this.RequestId.GetHashCode();
                }
                if (this.FsymId != null)
                {
                    hashCode = (hashCode * 59) + this.FsymId.GetHashCode();
                }
                if (this.Date != null)
                {
                    hashCode = (hashCode * 59) + this.Date.GetHashCode();
                }
                if (this.BidYieldToMaturity != null)
                {
                    hashCode = (hashCode * 59) + this.BidYieldToMaturity.GetHashCode();
                }
                if (this.MidYieldToMaturity != null)
                {
                    hashCode = (hashCode * 59) + this.MidYieldToMaturity.GetHashCode();
                }
                if (this.AskYieldToMaturity != null)
                {
                    hashCode = (hashCode * 59) + this.AskYieldToMaturity.GetHashCode();
                }
                if (this.BidYieldToWorst != null)
                {
                    hashCode = (hashCode * 59) + this.BidYieldToWorst.GetHashCode();
                }
                if (this.MidYieldToWorst != null)
                {
                    hashCode = (hashCode * 59) + this.MidYieldToWorst.GetHashCode();
                }
                if (this.AskYieldToWorst != null)
                {
                    hashCode = (hashCode * 59) + this.AskYieldToWorst.GetHashCode();
                }
                if (this.BenchmarkBidYieldToMaturity != null)
                {
                    hashCode = (hashCode * 59) + this.BenchmarkBidYieldToMaturity.GetHashCode();
                }
                if (this.BenchmarkMidYieldToMaturity != null)
                {
                    hashCode = (hashCode * 59) + this.BenchmarkMidYieldToMaturity.GetHashCode();
                }
                if (this.BenchmarkAskYieldToMaturity != null)
                {
                    hashCode = (hashCode * 59) + this.BenchmarkAskYieldToMaturity.GetHashCode();
                }
                if (this.BidYieldToCall != null)
                {
                    hashCode = (hashCode * 59) + this.BidYieldToCall.GetHashCode();
                }
                if (this.MidYieldToCall != null)
                {
                    hashCode = (hashCode * 59) + this.MidYieldToCall.GetHashCode();
                }
                if (this.YieldTWDate != null)
                {
                    hashCode = (hashCode * 59) + this.YieldTWDate.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
