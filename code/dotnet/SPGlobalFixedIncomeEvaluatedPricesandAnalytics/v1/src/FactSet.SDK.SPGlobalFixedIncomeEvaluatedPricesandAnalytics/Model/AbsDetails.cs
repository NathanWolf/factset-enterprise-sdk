/*
 * S&P Global Fixed Income Evaluated Prices & Analytics API
 *
 * Gain access to evaluated pricing and analytics data for Corporate Bonds, Municipal Bonds and Asset Backed Securities provided by S&P Global (formerly IHS Markit) .  Data returned through multiple endpoints like prices, spread, yield, yield curve, sensitivity, coupon information, securities metadata and details specific to the Asset Backed Securities. 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: api@factset.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = FactSet.SDK.SPGlobalFixedIncomeEvaluatedPricesandAnalytics.Client.OpenAPIDateConverter;

namespace FactSet.SDK.SPGlobalFixedIncomeEvaluatedPricesandAnalytics.Model
{
    /// <summary>
    /// AbsDetails
    /// </summary>
    [DataContract(Name = "absDetails")]
    public partial class AbsDetails : IEquatable<AbsDetails>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AbsDetails" /> class.
        /// </summary>
        /// <param name="requestId">Identifier that was used for the request..</param>
        /// <param name="fsymId">FactSet Regional Security Identifier. Six alpha-numeric characters, excluding vowels, with an -R suffix (XXXXXX-R). Identifies the security&#39;s best regional security data series per currency. For equities, all primary listings per region and currency are allocated a regional-level permanent identifier. The regional-level permanent identifier will be available once a SEDOL representing the region/currency has been allocated and the identifiers are on FactSet..</param>
        /// <param name="date">The date on which the price is calculated..</param>
        /// <param name="cdr">A vector of conditional default rate assumption used in the evaluated price of the instrument. CDR represents the percentage of outstanding principal balances in the pool that are in default..</param>
        /// <param name="cpr">Returns the flat CPR that would equate to the same weighted average life (WAL) projection for Agency CMOs as the base case CPR vector.</param>
        /// <param name="factor">The representation of the amount of the principal of an amortizing bond that has been paid out or written down since issuance, expressed as a percentage of the original total principal.</param>
        /// <param name="estimatedFactor">The projected agency pool factor between factor date and the day the actual factor is reported to investors (only applicable for agency passthrough securities)..</param>
        /// <param name="bidPricePreFactor">Returns the agency pool bid price that is adjusted to account for prepayment expectations during the first five business days of the month before the factors are reported..</param>
        /// <param name="midPricePreFactor">Returns the agency pool mid price that is adjusted to account for prepayment expectations during the first five business days of the month before the factors are reported..</param>
        /// <param name="askPricePreFactor">Returns the agency pool ask price that is adjusted to account for prepayment expectations during the first five business days of the month before the factors are reported..</param>
        /// <param name="cPREstimatePreFactor">Returns the agency pool CPR estimate that is adjusted to account for prepayment expectations during the first five business days of the month before the factors are reported..</param>
        /// <param name="liquidity">Returns the market liquidity score..</param>
        /// <param name="payUp">Returns the number of ticks, in 32nds format, above the TBA price..</param>
        /// <param name="payUpDescription">Returns the specified pool characteristics being used to drive the pay-up..</param>
        /// <param name="prePayRate">&#39;Returns a vector of values of speed used in the evaluated price of the instrument. It is the estimated rate at which borrowers pays off the obligations that underlies an instrument..</param>
        /// <param name="prePayType">Returns the type of prepayment speed used in the evaluated price of the instrument..</param>
        /// <param name="severity">Returns a vector of Loss Severity assumption used in evaluated price of the instrument. It is the percentage of the principal applied to the defaulted loan balance..</param>
        /// <param name="wal">Returns the Weighted Average Life of the instrument..</param>
        /// <param name="wALPrincipal">Returns the Weighted Average Life of the instrument..</param>
        public AbsDetails(string requestId = default(string), string fsymId = default(string), DateTime? date = default(DateTime?), string cdr = default(string), double? cpr = default(double?), double? factor = default(double?), double? estimatedFactor = default(double?), double? bidPricePreFactor = default(double?), double? midPricePreFactor = default(double?), double? askPricePreFactor = default(double?), double? cPREstimatePreFactor = default(double?), double? liquidity = default(double?), double? payUp = default(double?), string payUpDescription = default(string), double? prePayRate = default(double?), string prePayType = default(string), double? severity = default(double?), double? wal = default(double?), double? wALPrincipal = default(double?))
        {
            this.RequestId = requestId;
            this.FsymId = fsymId;
            this.Date = date;
            this.Cdr = cdr;
            this.Cpr = cpr;
            this.Factor = factor;
            this.EstimatedFactor = estimatedFactor;
            this.BidPricePreFactor = bidPricePreFactor;
            this.MidPricePreFactor = midPricePreFactor;
            this.AskPricePreFactor = askPricePreFactor;
            this.CPREstimatePreFactor = cPREstimatePreFactor;
            this.Liquidity = liquidity;
            this.PayUp = payUp;
            this.PayUpDescription = payUpDescription;
            this.PrePayRate = prePayRate;
            this.PrePayType = prePayType;
            this.Severity = severity;
            this.Wal = wal;
            this.WALPrincipal = wALPrincipal;
        }

        /// <summary>
        /// Identifier that was used for the request.
        /// </summary>
        /// <value>Identifier that was used for the request.</value>
        [DataMember(Name = "requestId", EmitDefaultValue = false)]
        public string RequestId { get; set; }

        /// <summary>
        /// FactSet Regional Security Identifier. Six alpha-numeric characters, excluding vowels, with an -R suffix (XXXXXX-R). Identifies the security&#39;s best regional security data series per currency. For equities, all primary listings per region and currency are allocated a regional-level permanent identifier. The regional-level permanent identifier will be available once a SEDOL representing the region/currency has been allocated and the identifiers are on FactSet.
        /// </summary>
        /// <value>FactSet Regional Security Identifier. Six alpha-numeric characters, excluding vowels, with an -R suffix (XXXXXX-R). Identifies the security&#39;s best regional security data series per currency. For equities, all primary listings per region and currency are allocated a regional-level permanent identifier. The regional-level permanent identifier will be available once a SEDOL representing the region/currency has been allocated and the identifiers are on FactSet.</value>
        [DataMember(Name = "fsymId", EmitDefaultValue = true)]
        public string FsymId { get; set; }

        /// <summary>
        /// The date on which the price is calculated.
        /// </summary>
        /// <value>The date on which the price is calculated.</value>
        [DataMember(Name = "date", EmitDefaultValue = true)]
        [JsonConverter(typeof(OpenAPIDateConverter))]
        public DateTime? Date { get; set; }

        /// <summary>
        /// A vector of conditional default rate assumption used in the evaluated price of the instrument. CDR represents the percentage of outstanding principal balances in the pool that are in default.
        /// </summary>
        /// <value>A vector of conditional default rate assumption used in the evaluated price of the instrument. CDR represents the percentage of outstanding principal balances in the pool that are in default.</value>
        [DataMember(Name = "cdr", EmitDefaultValue = true)]
        public string Cdr { get; set; }

        /// <summary>
        /// Returns the flat CPR that would equate to the same weighted average life (WAL) projection for Agency CMOs as the base case CPR vector
        /// </summary>
        /// <value>Returns the flat CPR that would equate to the same weighted average life (WAL) projection for Agency CMOs as the base case CPR vector</value>
        [DataMember(Name = "cpr", EmitDefaultValue = true)]
        public double? Cpr { get; set; }

        /// <summary>
        /// The representation of the amount of the principal of an amortizing bond that has been paid out or written down since issuance, expressed as a percentage of the original total principal
        /// </summary>
        /// <value>The representation of the amount of the principal of an amortizing bond that has been paid out or written down since issuance, expressed as a percentage of the original total principal</value>
        [DataMember(Name = "factor", EmitDefaultValue = true)]
        public double? Factor { get; set; }

        /// <summary>
        /// The projected agency pool factor between factor date and the day the actual factor is reported to investors (only applicable for agency passthrough securities).
        /// </summary>
        /// <value>The projected agency pool factor between factor date and the day the actual factor is reported to investors (only applicable for agency passthrough securities).</value>
        [DataMember(Name = "estimatedFactor", EmitDefaultValue = true)]
        public double? EstimatedFactor { get; set; }

        /// <summary>
        /// Returns the agency pool bid price that is adjusted to account for prepayment expectations during the first five business days of the month before the factors are reported.
        /// </summary>
        /// <value>Returns the agency pool bid price that is adjusted to account for prepayment expectations during the first five business days of the month before the factors are reported.</value>
        [DataMember(Name = "bidPricePreFactor", EmitDefaultValue = true)]
        public double? BidPricePreFactor { get; set; }

        /// <summary>
        /// Returns the agency pool mid price that is adjusted to account for prepayment expectations during the first five business days of the month before the factors are reported.
        /// </summary>
        /// <value>Returns the agency pool mid price that is adjusted to account for prepayment expectations during the first five business days of the month before the factors are reported.</value>
        [DataMember(Name = "midPricePreFactor", EmitDefaultValue = true)]
        public double? MidPricePreFactor { get; set; }

        /// <summary>
        /// Returns the agency pool ask price that is adjusted to account for prepayment expectations during the first five business days of the month before the factors are reported.
        /// </summary>
        /// <value>Returns the agency pool ask price that is adjusted to account for prepayment expectations during the first five business days of the month before the factors are reported.</value>
        [DataMember(Name = "askPricePreFactor", EmitDefaultValue = true)]
        public double? AskPricePreFactor { get; set; }

        /// <summary>
        /// Returns the agency pool CPR estimate that is adjusted to account for prepayment expectations during the first five business days of the month before the factors are reported.
        /// </summary>
        /// <value>Returns the agency pool CPR estimate that is adjusted to account for prepayment expectations during the first five business days of the month before the factors are reported.</value>
        [DataMember(Name = "CPREstimatePreFactor", EmitDefaultValue = true)]
        public double? CPREstimatePreFactor { get; set; }

        /// <summary>
        /// Returns the market liquidity score.
        /// </summary>
        /// <value>Returns the market liquidity score.</value>
        [DataMember(Name = "liquidity", EmitDefaultValue = true)]
        public double? Liquidity { get; set; }

        /// <summary>
        /// Returns the number of ticks, in 32nds format, above the TBA price.
        /// </summary>
        /// <value>Returns the number of ticks, in 32nds format, above the TBA price.</value>
        [DataMember(Name = "payUp", EmitDefaultValue = true)]
        public double? PayUp { get; set; }

        /// <summary>
        /// Returns the specified pool characteristics being used to drive the pay-up.
        /// </summary>
        /// <value>Returns the specified pool characteristics being used to drive the pay-up.</value>
        [DataMember(Name = "payUpDescription", EmitDefaultValue = true)]
        public string PayUpDescription { get; set; }

        /// <summary>
        /// &#39;Returns a vector of values of speed used in the evaluated price of the instrument. It is the estimated rate at which borrowers pays off the obligations that underlies an instrument.
        /// </summary>
        /// <value>&#39;Returns a vector of values of speed used in the evaluated price of the instrument. It is the estimated rate at which borrowers pays off the obligations that underlies an instrument.</value>
        [DataMember(Name = "prePayRate", EmitDefaultValue = true)]
        public double? PrePayRate { get; set; }

        /// <summary>
        /// Returns the type of prepayment speed used in the evaluated price of the instrument.
        /// </summary>
        /// <value>Returns the type of prepayment speed used in the evaluated price of the instrument.</value>
        [DataMember(Name = "prePayType", EmitDefaultValue = true)]
        public string PrePayType { get; set; }

        /// <summary>
        /// Returns a vector of Loss Severity assumption used in evaluated price of the instrument. It is the percentage of the principal applied to the defaulted loan balance.
        /// </summary>
        /// <value>Returns a vector of Loss Severity assumption used in evaluated price of the instrument. It is the percentage of the principal applied to the defaulted loan balance.</value>
        [DataMember(Name = "severity", EmitDefaultValue = true)]
        public double? Severity { get; set; }

        /// <summary>
        /// Returns the Weighted Average Life of the instrument.
        /// </summary>
        /// <value>Returns the Weighted Average Life of the instrument.</value>
        [DataMember(Name = "wal", EmitDefaultValue = true)]
        public double? Wal { get; set; }

        /// <summary>
        /// Returns the Weighted Average Life of the instrument.
        /// </summary>
        /// <value>Returns the Weighted Average Life of the instrument.</value>
        [DataMember(Name = "WALPrincipal", EmitDefaultValue = true)]
        public double? WALPrincipal { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class AbsDetails {\n");
            sb.Append("  RequestId: ").Append(RequestId).Append("\n");
            sb.Append("  FsymId: ").Append(FsymId).Append("\n");
            sb.Append("  Date: ").Append(Date).Append("\n");
            sb.Append("  Cdr: ").Append(Cdr).Append("\n");
            sb.Append("  Cpr: ").Append(Cpr).Append("\n");
            sb.Append("  Factor: ").Append(Factor).Append("\n");
            sb.Append("  EstimatedFactor: ").Append(EstimatedFactor).Append("\n");
            sb.Append("  BidPricePreFactor: ").Append(BidPricePreFactor).Append("\n");
            sb.Append("  MidPricePreFactor: ").Append(MidPricePreFactor).Append("\n");
            sb.Append("  AskPricePreFactor: ").Append(AskPricePreFactor).Append("\n");
            sb.Append("  CPREstimatePreFactor: ").Append(CPREstimatePreFactor).Append("\n");
            sb.Append("  Liquidity: ").Append(Liquidity).Append("\n");
            sb.Append("  PayUp: ").Append(PayUp).Append("\n");
            sb.Append("  PayUpDescription: ").Append(PayUpDescription).Append("\n");
            sb.Append("  PrePayRate: ").Append(PrePayRate).Append("\n");
            sb.Append("  PrePayType: ").Append(PrePayType).Append("\n");
            sb.Append("  Severity: ").Append(Severity).Append("\n");
            sb.Append("  Wal: ").Append(Wal).Append("\n");
            sb.Append("  WALPrincipal: ").Append(WALPrincipal).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AbsDetails);
        }

        /// <summary>
        /// Returns true if AbsDetails instances are equal
        /// </summary>
        /// <param name="input">Instance of AbsDetails to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AbsDetails input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.RequestId == input.RequestId ||
                    (this.RequestId != null &&
                    this.RequestId.Equals(input.RequestId))
                ) && 
                (
                    this.FsymId == input.FsymId ||
                    (this.FsymId != null &&
                    this.FsymId.Equals(input.FsymId))
                ) && 
                (
                    this.Date == input.Date ||
                    (this.Date != null &&
                    this.Date.Equals(input.Date))
                ) && 
                (
                    this.Cdr == input.Cdr ||
                    (this.Cdr != null &&
                    this.Cdr.Equals(input.Cdr))
                ) && 
                (
                    this.Cpr == input.Cpr ||
                    (this.Cpr != null &&
                    this.Cpr.Equals(input.Cpr))
                ) && 
                (
                    this.Factor == input.Factor ||
                    (this.Factor != null &&
                    this.Factor.Equals(input.Factor))
                ) && 
                (
                    this.EstimatedFactor == input.EstimatedFactor ||
                    (this.EstimatedFactor != null &&
                    this.EstimatedFactor.Equals(input.EstimatedFactor))
                ) && 
                (
                    this.BidPricePreFactor == input.BidPricePreFactor ||
                    (this.BidPricePreFactor != null &&
                    this.BidPricePreFactor.Equals(input.BidPricePreFactor))
                ) && 
                (
                    this.MidPricePreFactor == input.MidPricePreFactor ||
                    (this.MidPricePreFactor != null &&
                    this.MidPricePreFactor.Equals(input.MidPricePreFactor))
                ) && 
                (
                    this.AskPricePreFactor == input.AskPricePreFactor ||
                    (this.AskPricePreFactor != null &&
                    this.AskPricePreFactor.Equals(input.AskPricePreFactor))
                ) && 
                (
                    this.CPREstimatePreFactor == input.CPREstimatePreFactor ||
                    (this.CPREstimatePreFactor != null &&
                    this.CPREstimatePreFactor.Equals(input.CPREstimatePreFactor))
                ) && 
                (
                    this.Liquidity == input.Liquidity ||
                    (this.Liquidity != null &&
                    this.Liquidity.Equals(input.Liquidity))
                ) && 
                (
                    this.PayUp == input.PayUp ||
                    (this.PayUp != null &&
                    this.PayUp.Equals(input.PayUp))
                ) && 
                (
                    this.PayUpDescription == input.PayUpDescription ||
                    (this.PayUpDescription != null &&
                    this.PayUpDescription.Equals(input.PayUpDescription))
                ) && 
                (
                    this.PrePayRate == input.PrePayRate ||
                    (this.PrePayRate != null &&
                    this.PrePayRate.Equals(input.PrePayRate))
                ) && 
                (
                    this.PrePayType == input.PrePayType ||
                    (this.PrePayType != null &&
                    this.PrePayType.Equals(input.PrePayType))
                ) && 
                (
                    this.Severity == input.Severity ||
                    (this.Severity != null &&
                    this.Severity.Equals(input.Severity))
                ) && 
                (
                    this.Wal == input.Wal ||
                    (this.Wal != null &&
                    this.Wal.Equals(input.Wal))
                ) && 
                (
                    this.WALPrincipal == input.WALPrincipal ||
                    (this.WALPrincipal != null &&
                    this.WALPrincipal.Equals(input.WALPrincipal))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.RequestId != null)
                {
                    hashCode = (hashCode * 59) + this.RequestId.GetHashCode();
                }
                if (this.FsymId != null)
                {
                    hashCode = (hashCode * 59) + this.FsymId.GetHashCode();
                }
                if (this.Date != null)
                {
                    hashCode = (hashCode * 59) + this.Date.GetHashCode();
                }
                if (this.Cdr != null)
                {
                    hashCode = (hashCode * 59) + this.Cdr.GetHashCode();
                }
                if (this.Cpr != null)
                {
                    hashCode = (hashCode * 59) + this.Cpr.GetHashCode();
                }
                if (this.Factor != null)
                {
                    hashCode = (hashCode * 59) + this.Factor.GetHashCode();
                }
                if (this.EstimatedFactor != null)
                {
                    hashCode = (hashCode * 59) + this.EstimatedFactor.GetHashCode();
                }
                if (this.BidPricePreFactor != null)
                {
                    hashCode = (hashCode * 59) + this.BidPricePreFactor.GetHashCode();
                }
                if (this.MidPricePreFactor != null)
                {
                    hashCode = (hashCode * 59) + this.MidPricePreFactor.GetHashCode();
                }
                if (this.AskPricePreFactor != null)
                {
                    hashCode = (hashCode * 59) + this.AskPricePreFactor.GetHashCode();
                }
                if (this.CPREstimatePreFactor != null)
                {
                    hashCode = (hashCode * 59) + this.CPREstimatePreFactor.GetHashCode();
                }
                if (this.Liquidity != null)
                {
                    hashCode = (hashCode * 59) + this.Liquidity.GetHashCode();
                }
                if (this.PayUp != null)
                {
                    hashCode = (hashCode * 59) + this.PayUp.GetHashCode();
                }
                if (this.PayUpDescription != null)
                {
                    hashCode = (hashCode * 59) + this.PayUpDescription.GetHashCode();
                }
                if (this.PrePayRate != null)
                {
                    hashCode = (hashCode * 59) + this.PrePayRate.GetHashCode();
                }
                if (this.PrePayType != null)
                {
                    hashCode = (hashCode * 59) + this.PrePayType.GetHashCode();
                }
                if (this.Severity != null)
                {
                    hashCode = (hashCode * 59) + this.Severity.GetHashCode();
                }
                if (this.Wal != null)
                {
                    hashCode = (hashCode * 59) + this.Wal.GetHashCode();
                }
                if (this.WALPrincipal != null)
                {
                    hashCode = (hashCode * 59) + this.WALPrincipal.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
