/*
 * S&P Global Fixed Income Evaluated Prices & Analytics API
 *
 * Gain access to evaluated pricing and analytics data for Corporate Bonds, Municipal Bonds and Asset Backed Securities provided by S&P Global (formerly IHS Markit) .  Data returned through multiple endpoints like prices, spread, yield, yield curve, sensitivity, coupon information, securities metadata and details specific to the Asset Backed Securities. 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: api@factset.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = FactSet.SDK.SPGlobalFixedIncomeEvaluatedPricesandAnalytics.Client.OpenAPIDateConverter;

namespace FactSet.SDK.SPGlobalFixedIncomeEvaluatedPricesandAnalytics.Model
{
    /// <summary>
    /// BondCoupon
    /// </summary>
    [DataContract(Name = "bondCoupon")]
    public partial class BondCoupon : IEquatable<BondCoupon>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="BondCoupon" /> class.
        /// </summary>
        /// <param name="requestId">Identifier that was used for the request..</param>
        /// <param name="fsymId">FactSet Regional Security Identifier. Six alpha-numeric characters, excluding vowels, with an -R suffix (XXXXXX-R). Identifies the security&#39;s best regional security data series per currency. For equities, all primary listings per region and currency are allocated a regional-level permanent identifier. The regional-level permanent identifier will be available once a SEDOL representing the region/currency has been allocated and the identifiers are on FactSet..</param>
        /// <param name="date">The date on which the price is calculated..</param>
        /// <param name="accruedInterest">The interest that is owed, but not yet paid, added to the price of the bond. Available only for &#x60;corporate and municipal bonds&#x60;..</param>
        /// <param name="coupon">The current coupon rate of the instrument. Available only for &#x60;corporate and municipal bonds&#x60;..</param>
        /// <param name="couponType">The coupon type of the instrument. Available only for &#x60;corporate and municipal bonds&#x60;..</param>
        /// <param name="couponFrequency">The coupon frequency of the bond. Available only for &#x60;corporate bonds&#x60;. .</param>
        public BondCoupon(string requestId = default(string), string fsymId = default(string), DateTime? date = default(DateTime?), double? accruedInterest = default(double?), double? coupon = default(double?), string couponType = default(string), string couponFrequency = default(string))
        {
            this.RequestId = requestId;
            this.FsymId = fsymId;
            this.Date = date;
            this.AccruedInterest = accruedInterest;
            this.Coupon = coupon;
            this.CouponType = couponType;
            this.CouponFrequency = couponFrequency;
        }

        /// <summary>
        /// Identifier that was used for the request.
        /// </summary>
        /// <value>Identifier that was used for the request.</value>
        [DataMember(Name = "requestId", EmitDefaultValue = false)]
        public string RequestId { get; set; }

        /// <summary>
        /// FactSet Regional Security Identifier. Six alpha-numeric characters, excluding vowels, with an -R suffix (XXXXXX-R). Identifies the security&#39;s best regional security data series per currency. For equities, all primary listings per region and currency are allocated a regional-level permanent identifier. The regional-level permanent identifier will be available once a SEDOL representing the region/currency has been allocated and the identifiers are on FactSet.
        /// </summary>
        /// <value>FactSet Regional Security Identifier. Six alpha-numeric characters, excluding vowels, with an -R suffix (XXXXXX-R). Identifies the security&#39;s best regional security data series per currency. For equities, all primary listings per region and currency are allocated a regional-level permanent identifier. The regional-level permanent identifier will be available once a SEDOL representing the region/currency has been allocated and the identifiers are on FactSet.</value>
        [DataMember(Name = "fsymId", EmitDefaultValue = true)]
        public string FsymId { get; set; }

        /// <summary>
        /// The date on which the price is calculated.
        /// </summary>
        /// <value>The date on which the price is calculated.</value>
        [DataMember(Name = "date", EmitDefaultValue = true)]
        [JsonConverter(typeof(OpenAPIDateConverter))]
        public DateTime? Date { get; set; }

        /// <summary>
        /// The interest that is owed, but not yet paid, added to the price of the bond. Available only for &#x60;corporate and municipal bonds&#x60;.
        /// </summary>
        /// <value>The interest that is owed, but not yet paid, added to the price of the bond. Available only for &#x60;corporate and municipal bonds&#x60;.</value>
        [DataMember(Name = "accruedInterest", EmitDefaultValue = true)]
        public double? AccruedInterest { get; set; }

        /// <summary>
        /// The current coupon rate of the instrument. Available only for &#x60;corporate and municipal bonds&#x60;.
        /// </summary>
        /// <value>The current coupon rate of the instrument. Available only for &#x60;corporate and municipal bonds&#x60;.</value>
        [DataMember(Name = "coupon", EmitDefaultValue = true)]
        public double? Coupon { get; set; }

        /// <summary>
        /// The coupon type of the instrument. Available only for &#x60;corporate and municipal bonds&#x60;.
        /// </summary>
        /// <value>The coupon type of the instrument. Available only for &#x60;corporate and municipal bonds&#x60;.</value>
        [DataMember(Name = "couponType", EmitDefaultValue = true)]
        public string CouponType { get; set; }

        /// <summary>
        /// The coupon frequency of the bond. Available only for &#x60;corporate bonds&#x60;. 
        /// </summary>
        /// <value>The coupon frequency of the bond. Available only for &#x60;corporate bonds&#x60;. </value>
        [DataMember(Name = "couponFrequency", EmitDefaultValue = true)]
        public string CouponFrequency { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class BondCoupon {\n");
            sb.Append("  RequestId: ").Append(RequestId).Append("\n");
            sb.Append("  FsymId: ").Append(FsymId).Append("\n");
            sb.Append("  Date: ").Append(Date).Append("\n");
            sb.Append("  AccruedInterest: ").Append(AccruedInterest).Append("\n");
            sb.Append("  Coupon: ").Append(Coupon).Append("\n");
            sb.Append("  CouponType: ").Append(CouponType).Append("\n");
            sb.Append("  CouponFrequency: ").Append(CouponFrequency).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as BondCoupon);
        }

        /// <summary>
        /// Returns true if BondCoupon instances are equal
        /// </summary>
        /// <param name="input">Instance of BondCoupon to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(BondCoupon input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.RequestId == input.RequestId ||
                    (this.RequestId != null &&
                    this.RequestId.Equals(input.RequestId))
                ) && 
                (
                    this.FsymId == input.FsymId ||
                    (this.FsymId != null &&
                    this.FsymId.Equals(input.FsymId))
                ) && 
                (
                    this.Date == input.Date ||
                    (this.Date != null &&
                    this.Date.Equals(input.Date))
                ) && 
                (
                    this.AccruedInterest == input.AccruedInterest ||
                    (this.AccruedInterest != null &&
                    this.AccruedInterest.Equals(input.AccruedInterest))
                ) && 
                (
                    this.Coupon == input.Coupon ||
                    (this.Coupon != null &&
                    this.Coupon.Equals(input.Coupon))
                ) && 
                (
                    this.CouponType == input.CouponType ||
                    (this.CouponType != null &&
                    this.CouponType.Equals(input.CouponType))
                ) && 
                (
                    this.CouponFrequency == input.CouponFrequency ||
                    (this.CouponFrequency != null &&
                    this.CouponFrequency.Equals(input.CouponFrequency))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.RequestId != null)
                {
                    hashCode = (hashCode * 59) + this.RequestId.GetHashCode();
                }
                if (this.FsymId != null)
                {
                    hashCode = (hashCode * 59) + this.FsymId.GetHashCode();
                }
                if (this.Date != null)
                {
                    hashCode = (hashCode * 59) + this.Date.GetHashCode();
                }
                if (this.AccruedInterest != null)
                {
                    hashCode = (hashCode * 59) + this.AccruedInterest.GetHashCode();
                }
                if (this.Coupon != null)
                {
                    hashCode = (hashCode * 59) + this.Coupon.GetHashCode();
                }
                if (this.CouponType != null)
                {
                    hashCode = (hashCode * 59) + this.CouponType.GetHashCode();
                }
                if (this.CouponFrequency != null)
                {
                    hashCode = (hashCode * 59) + this.CouponFrequency.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
