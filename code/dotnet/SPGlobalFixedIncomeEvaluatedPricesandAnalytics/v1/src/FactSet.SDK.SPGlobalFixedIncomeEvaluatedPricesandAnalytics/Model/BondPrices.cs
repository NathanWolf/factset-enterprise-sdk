/*
 * S&P Global Fixed Income Evaluated Prices & Analytics API
 *
 * Gain access to evaluated pricing and analytics data for Corporate Bonds, Municipal Bonds and Asset Backed Securities provided by S&P Global (formerly IHS Markit) .  Data returned through multiple endpoints like prices, spread, yield, yield curve, sensitivity, coupon information, securities metadata and details specific to the Asset Backed Securities. 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: api@factset.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = FactSet.SDK.SPGlobalFixedIncomeEvaluatedPricesandAnalytics.Client.OpenAPIDateConverter;

namespace FactSet.SDK.SPGlobalFixedIncomeEvaluatedPricesandAnalytics.Model
{
    /// <summary>
    /// BondPrices
    /// </summary>
    [DataContract(Name = "bondPrices")]
    public partial class BondPrices : IEquatable<BondPrices>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="BondPrices" /> class.
        /// </summary>
        /// <param name="requestId">Identifier that was used for the request..</param>
        /// <param name="fsymId">FactSet Regional Security Identifier. Six alpha-numeric characters, excluding vowels, with an -R suffix (XXXXXX-R). Identifies the security&#39;s best regional security data series per currency. For equities, all primary listings per region and currency are allocated a regional-level permanent identifier. The regional-level permanent identifier will be available once a SEDOL representing the region/currency has been allocated and the identifiers are on FactSet..</param>
        /// <param name="currency">Returns the coupon currency .Available only  available for &#x60;corporate and asset-backed security bonds&#x60;..</param>
        /// <param name="date">The date on which the price is calculated..</param>
        /// <param name="cleanBidPrice">The bid price of the instrument..</param>
        /// <param name="cleanMidPrice">The bid price of the instrument..</param>
        /// <param name="cleanAskPrice">The bid price of the instrument..</param>
        /// <param name="dirtyBidPrice">The price of the bond plus the interest that is accrued between coupon payments, based on the bid price. Available only  for &#x60;corporate bonds&#x60;..</param>
        /// <param name="dirtyMidPrice">The price of the bond plus the interest that is accrued between coupon payments, based on the mid price. Available only  for &#x60;corporate bonds&#x60;..</param>
        /// <param name="dirtyAskPrice">The price of the bond plus the interest that is accrued between coupon payments, based on the bid price. Available only  for &#x60;corporate bonds&#x60;..</param>
        /// <param name="pv">The present variation per one basis point change in yield, based on the mid price .Available only  for &#x60;corporate bonds&#x60;..</param>
        /// <param name="bidPriceDate">The date the bid price is valued to. Available only  for &#x60;municipal bonds&#x60;..</param>
        /// <param name="midPriceDate">The date the mid price is valued to. Available only  for &#x60;municipal bonds&#x60;..</param>
        /// <param name="askPriceDate">The date the ask price is valued to. Available only  for &#x60;municipal bonds&#x60;..</param>
        /// <param name="bidPriceType">Bid price type for the given identifier. Available only  for &#x60;municipal bonds&#x60;..</param>
        /// <param name="midPriceType">Mid price type for the given identifier .Available only  for &#x60;municipal bonds&#x60;..</param>
        /// <param name="askPriceType">Ask price type for the given identifier .Available only  for &#x60;municipal bonds&#x60;..</param>
        public BondPrices(string requestId = default(string), string fsymId = default(string), string currency = default(string), DateTime? date = default(DateTime?), double? cleanBidPrice = default(double?), double? cleanMidPrice = default(double?), double? cleanAskPrice = default(double?), double? dirtyBidPrice = default(double?), double? dirtyMidPrice = default(double?), double? dirtyAskPrice = default(double?), double? pv = default(double?), DateTime? bidPriceDate = default(DateTime?), DateTime? midPriceDate = default(DateTime?), DateTime? askPriceDate = default(DateTime?), string bidPriceType = default(string), string midPriceType = default(string), string askPriceType = default(string))
        {
            this.RequestId = requestId;
            this.FsymId = fsymId;
            this.Currency = currency;
            this.Date = date;
            this.CleanBidPrice = cleanBidPrice;
            this.CleanMidPrice = cleanMidPrice;
            this.CleanAskPrice = cleanAskPrice;
            this.DirtyBidPrice = dirtyBidPrice;
            this.DirtyMidPrice = dirtyMidPrice;
            this.DirtyAskPrice = dirtyAskPrice;
            this.Pv = pv;
            this.BidPriceDate = bidPriceDate;
            this.MidPriceDate = midPriceDate;
            this.AskPriceDate = askPriceDate;
            this.BidPriceType = bidPriceType;
            this.MidPriceType = midPriceType;
            this.AskPriceType = askPriceType;
        }

        /// <summary>
        /// Identifier that was used for the request.
        /// </summary>
        /// <value>Identifier that was used for the request.</value>
        [DataMember(Name = "requestId", EmitDefaultValue = false)]
        public string RequestId { get; set; }

        /// <summary>
        /// FactSet Regional Security Identifier. Six alpha-numeric characters, excluding vowels, with an -R suffix (XXXXXX-R). Identifies the security&#39;s best regional security data series per currency. For equities, all primary listings per region and currency are allocated a regional-level permanent identifier. The regional-level permanent identifier will be available once a SEDOL representing the region/currency has been allocated and the identifiers are on FactSet.
        /// </summary>
        /// <value>FactSet Regional Security Identifier. Six alpha-numeric characters, excluding vowels, with an -R suffix (XXXXXX-R). Identifies the security&#39;s best regional security data series per currency. For equities, all primary listings per region and currency are allocated a regional-level permanent identifier. The regional-level permanent identifier will be available once a SEDOL representing the region/currency has been allocated and the identifiers are on FactSet.</value>
        [DataMember(Name = "fsymId", EmitDefaultValue = true)]
        public string FsymId { get; set; }

        /// <summary>
        /// Returns the coupon currency .Available only  available for &#x60;corporate and asset-backed security bonds&#x60;.
        /// </summary>
        /// <value>Returns the coupon currency .Available only  available for &#x60;corporate and asset-backed security bonds&#x60;.</value>
        [DataMember(Name = "currency", EmitDefaultValue = true)]
        public string Currency { get; set; }

        /// <summary>
        /// The date on which the price is calculated.
        /// </summary>
        /// <value>The date on which the price is calculated.</value>
        [DataMember(Name = "date", EmitDefaultValue = true)]
        [JsonConverter(typeof(OpenAPIDateConverter))]
        public DateTime? Date { get; set; }

        /// <summary>
        /// The bid price of the instrument.
        /// </summary>
        /// <value>The bid price of the instrument.</value>
        [DataMember(Name = "cleanBidPrice", EmitDefaultValue = true)]
        public double? CleanBidPrice { get; set; }

        /// <summary>
        /// The bid price of the instrument.
        /// </summary>
        /// <value>The bid price of the instrument.</value>
        [DataMember(Name = "cleanMidPrice", EmitDefaultValue = true)]
        public double? CleanMidPrice { get; set; }

        /// <summary>
        /// The bid price of the instrument.
        /// </summary>
        /// <value>The bid price of the instrument.</value>
        [DataMember(Name = "cleanAskPrice", EmitDefaultValue = true)]
        public double? CleanAskPrice { get; set; }

        /// <summary>
        /// The price of the bond plus the interest that is accrued between coupon payments, based on the bid price. Available only  for &#x60;corporate bonds&#x60;.
        /// </summary>
        /// <value>The price of the bond plus the interest that is accrued between coupon payments, based on the bid price. Available only  for &#x60;corporate bonds&#x60;.</value>
        [DataMember(Name = "dirtyBidPrice", EmitDefaultValue = true)]
        public double? DirtyBidPrice { get; set; }

        /// <summary>
        /// The price of the bond plus the interest that is accrued between coupon payments, based on the mid price. Available only  for &#x60;corporate bonds&#x60;.
        /// </summary>
        /// <value>The price of the bond plus the interest that is accrued between coupon payments, based on the mid price. Available only  for &#x60;corporate bonds&#x60;.</value>
        [DataMember(Name = "dirtyMidPrice", EmitDefaultValue = true)]
        public double? DirtyMidPrice { get; set; }

        /// <summary>
        /// The price of the bond plus the interest that is accrued between coupon payments, based on the bid price. Available only  for &#x60;corporate bonds&#x60;.
        /// </summary>
        /// <value>The price of the bond plus the interest that is accrued between coupon payments, based on the bid price. Available only  for &#x60;corporate bonds&#x60;.</value>
        [DataMember(Name = "dirtyAskPrice", EmitDefaultValue = true)]
        public double? DirtyAskPrice { get; set; }

        /// <summary>
        /// The present variation per one basis point change in yield, based on the mid price .Available only  for &#x60;corporate bonds&#x60;.
        /// </summary>
        /// <value>The present variation per one basis point change in yield, based on the mid price .Available only  for &#x60;corporate bonds&#x60;.</value>
        [DataMember(Name = "pv", EmitDefaultValue = true)]
        public double? Pv { get; set; }

        /// <summary>
        /// The date the bid price is valued to. Available only  for &#x60;municipal bonds&#x60;.
        /// </summary>
        /// <value>The date the bid price is valued to. Available only  for &#x60;municipal bonds&#x60;.</value>
        [DataMember(Name = "bidPriceDate", EmitDefaultValue = true)]
        [JsonConverter(typeof(OpenAPIDateConverter))]
        public DateTime? BidPriceDate { get; set; }

        /// <summary>
        /// The date the mid price is valued to. Available only  for &#x60;municipal bonds&#x60;.
        /// </summary>
        /// <value>The date the mid price is valued to. Available only  for &#x60;municipal bonds&#x60;.</value>
        [DataMember(Name = "midPriceDate", EmitDefaultValue = true)]
        [JsonConverter(typeof(OpenAPIDateConverter))]
        public DateTime? MidPriceDate { get; set; }

        /// <summary>
        /// The date the ask price is valued to. Available only  for &#x60;municipal bonds&#x60;.
        /// </summary>
        /// <value>The date the ask price is valued to. Available only  for &#x60;municipal bonds&#x60;.</value>
        [DataMember(Name = "askPriceDate", EmitDefaultValue = true)]
        [JsonConverter(typeof(OpenAPIDateConverter))]
        public DateTime? AskPriceDate { get; set; }

        /// <summary>
        /// Bid price type for the given identifier. Available only  for &#x60;municipal bonds&#x60;.
        /// </summary>
        /// <value>Bid price type for the given identifier. Available only  for &#x60;municipal bonds&#x60;.</value>
        [DataMember(Name = "bidPriceType", EmitDefaultValue = true)]
        public string BidPriceType { get; set; }

        /// <summary>
        /// Mid price type for the given identifier .Available only  for &#x60;municipal bonds&#x60;.
        /// </summary>
        /// <value>Mid price type for the given identifier .Available only  for &#x60;municipal bonds&#x60;.</value>
        [DataMember(Name = "midPriceType", EmitDefaultValue = false)]
        public string MidPriceType { get; set; }

        /// <summary>
        /// Ask price type for the given identifier .Available only  for &#x60;municipal bonds&#x60;.
        /// </summary>
        /// <value>Ask price type for the given identifier .Available only  for &#x60;municipal bonds&#x60;.</value>
        [DataMember(Name = "askPriceType", EmitDefaultValue = true)]
        public string AskPriceType { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class BondPrices {\n");
            sb.Append("  RequestId: ").Append(RequestId).Append("\n");
            sb.Append("  FsymId: ").Append(FsymId).Append("\n");
            sb.Append("  Currency: ").Append(Currency).Append("\n");
            sb.Append("  Date: ").Append(Date).Append("\n");
            sb.Append("  CleanBidPrice: ").Append(CleanBidPrice).Append("\n");
            sb.Append("  CleanMidPrice: ").Append(CleanMidPrice).Append("\n");
            sb.Append("  CleanAskPrice: ").Append(CleanAskPrice).Append("\n");
            sb.Append("  DirtyBidPrice: ").Append(DirtyBidPrice).Append("\n");
            sb.Append("  DirtyMidPrice: ").Append(DirtyMidPrice).Append("\n");
            sb.Append("  DirtyAskPrice: ").Append(DirtyAskPrice).Append("\n");
            sb.Append("  Pv: ").Append(Pv).Append("\n");
            sb.Append("  BidPriceDate: ").Append(BidPriceDate).Append("\n");
            sb.Append("  MidPriceDate: ").Append(MidPriceDate).Append("\n");
            sb.Append("  AskPriceDate: ").Append(AskPriceDate).Append("\n");
            sb.Append("  BidPriceType: ").Append(BidPriceType).Append("\n");
            sb.Append("  MidPriceType: ").Append(MidPriceType).Append("\n");
            sb.Append("  AskPriceType: ").Append(AskPriceType).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as BondPrices);
        }

        /// <summary>
        /// Returns true if BondPrices instances are equal
        /// </summary>
        /// <param name="input">Instance of BondPrices to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(BondPrices input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.RequestId == input.RequestId ||
                    (this.RequestId != null &&
                    this.RequestId.Equals(input.RequestId))
                ) && 
                (
                    this.FsymId == input.FsymId ||
                    (this.FsymId != null &&
                    this.FsymId.Equals(input.FsymId))
                ) && 
                (
                    this.Currency == input.Currency ||
                    (this.Currency != null &&
                    this.Currency.Equals(input.Currency))
                ) && 
                (
                    this.Date == input.Date ||
                    (this.Date != null &&
                    this.Date.Equals(input.Date))
                ) && 
                (
                    this.CleanBidPrice == input.CleanBidPrice ||
                    (this.CleanBidPrice != null &&
                    this.CleanBidPrice.Equals(input.CleanBidPrice))
                ) && 
                (
                    this.CleanMidPrice == input.CleanMidPrice ||
                    (this.CleanMidPrice != null &&
                    this.CleanMidPrice.Equals(input.CleanMidPrice))
                ) && 
                (
                    this.CleanAskPrice == input.CleanAskPrice ||
                    (this.CleanAskPrice != null &&
                    this.CleanAskPrice.Equals(input.CleanAskPrice))
                ) && 
                (
                    this.DirtyBidPrice == input.DirtyBidPrice ||
                    (this.DirtyBidPrice != null &&
                    this.DirtyBidPrice.Equals(input.DirtyBidPrice))
                ) && 
                (
                    this.DirtyMidPrice == input.DirtyMidPrice ||
                    (this.DirtyMidPrice != null &&
                    this.DirtyMidPrice.Equals(input.DirtyMidPrice))
                ) && 
                (
                    this.DirtyAskPrice == input.DirtyAskPrice ||
                    (this.DirtyAskPrice != null &&
                    this.DirtyAskPrice.Equals(input.DirtyAskPrice))
                ) && 
                (
                    this.Pv == input.Pv ||
                    (this.Pv != null &&
                    this.Pv.Equals(input.Pv))
                ) && 
                (
                    this.BidPriceDate == input.BidPriceDate ||
                    (this.BidPriceDate != null &&
                    this.BidPriceDate.Equals(input.BidPriceDate))
                ) && 
                (
                    this.MidPriceDate == input.MidPriceDate ||
                    (this.MidPriceDate != null &&
                    this.MidPriceDate.Equals(input.MidPriceDate))
                ) && 
                (
                    this.AskPriceDate == input.AskPriceDate ||
                    (this.AskPriceDate != null &&
                    this.AskPriceDate.Equals(input.AskPriceDate))
                ) && 
                (
                    this.BidPriceType == input.BidPriceType ||
                    (this.BidPriceType != null &&
                    this.BidPriceType.Equals(input.BidPriceType))
                ) && 
                (
                    this.MidPriceType == input.MidPriceType ||
                    (this.MidPriceType != null &&
                    this.MidPriceType.Equals(input.MidPriceType))
                ) && 
                (
                    this.AskPriceType == input.AskPriceType ||
                    (this.AskPriceType != null &&
                    this.AskPriceType.Equals(input.AskPriceType))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.RequestId != null)
                {
                    hashCode = (hashCode * 59) + this.RequestId.GetHashCode();
                }
                if (this.FsymId != null)
                {
                    hashCode = (hashCode * 59) + this.FsymId.GetHashCode();
                }
                if (this.Currency != null)
                {
                    hashCode = (hashCode * 59) + this.Currency.GetHashCode();
                }
                if (this.Date != null)
                {
                    hashCode = (hashCode * 59) + this.Date.GetHashCode();
                }
                if (this.CleanBidPrice != null)
                {
                    hashCode = (hashCode * 59) + this.CleanBidPrice.GetHashCode();
                }
                if (this.CleanMidPrice != null)
                {
                    hashCode = (hashCode * 59) + this.CleanMidPrice.GetHashCode();
                }
                if (this.CleanAskPrice != null)
                {
                    hashCode = (hashCode * 59) + this.CleanAskPrice.GetHashCode();
                }
                if (this.DirtyBidPrice != null)
                {
                    hashCode = (hashCode * 59) + this.DirtyBidPrice.GetHashCode();
                }
                if (this.DirtyMidPrice != null)
                {
                    hashCode = (hashCode * 59) + this.DirtyMidPrice.GetHashCode();
                }
                if (this.DirtyAskPrice != null)
                {
                    hashCode = (hashCode * 59) + this.DirtyAskPrice.GetHashCode();
                }
                if (this.Pv != null)
                {
                    hashCode = (hashCode * 59) + this.Pv.GetHashCode();
                }
                if (this.BidPriceDate != null)
                {
                    hashCode = (hashCode * 59) + this.BidPriceDate.GetHashCode();
                }
                if (this.MidPriceDate != null)
                {
                    hashCode = (hashCode * 59) + this.MidPriceDate.GetHashCode();
                }
                if (this.AskPriceDate != null)
                {
                    hashCode = (hashCode * 59) + this.AskPriceDate.GetHashCode();
                }
                if (this.BidPriceType != null)
                {
                    hashCode = (hashCode * 59) + this.BidPriceType.GetHashCode();
                }
                if (this.MidPriceType != null)
                {
                    hashCode = (hashCode * 59) + this.MidPriceType.GetHashCode();
                }
                if (this.AskPriceType != null)
                {
                    hashCode = (hashCode * 59) + this.AskPriceType.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
