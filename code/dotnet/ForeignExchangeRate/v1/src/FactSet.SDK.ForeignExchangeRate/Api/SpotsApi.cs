/*
 * Foreign Exchange Rates API
 *
 * Foreign Exchange Rates API in which retrieves Spots and Forwards for a given currency pair and date range. <p>*Spots and Forwards rates are sourced from W/M Reuters.The WM Company calculates daily standardized spot rates for global foreign exchange transactions, using rates provided by Reuters. These rates are recognized globally as the standard by banks, fund managers, and index compilers; increasingly these rates are also being used for benchmark currency trading. In 1994, WM Company began calculating closing spot rates. Closing spot rates provide a standard set of currency rates so that portfolio valuations can be compared to each other and their performances measured against benchmarks, without having discrepancies caused by exchange rates. Closing spot rates are recorded at 16:00 GMT.*</p> 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: api@factset.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using FactSet.SDK.ForeignExchangeRate.Client;
using FactSet.SDK.ForeignExchangeRate.Model;
using FactSet.SDK.Utils.Authentication;

namespace FactSet.SDK.ForeignExchangeRate.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ISpotsApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Gets spots for a list of currency pairs
        /// </summary>
        /// <remarks>
        /// Gets FX Spot rates for a requested currency pair, date range, and frequency. The WM Company calculates daily standardized spot rates for global foreign exchange transactions, using rates provided by Reuters. These rates are recognized globally as the standard by banks, fund managers, and index compilers; increasingly these rates are also being used for benchmark currency trading. 
        /// </remarks>
        /// <exception cref="FactSet.SDK.ForeignExchangeRate.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">The currency pair requested in the format of a ISO {source}{target}. For a complete list of ISO currencies, please visit [OA 1470](https://my.apps.factset.com/oa/pages/1470)</param>
        /// <param name="startDate">The start date requested for a given date range in **YYYY-MM-DD** format. If left blank, the API will default to latest available.  (optional)</param>
        /// <param name="endDate">The end date requested for a given date range in **YYYY-MM-DD** format. If left blank, the API will default to latest available.  (optional)</param>
        /// <param name="frequency">Controls the display frequency of the data returned.   * **D** &#x3D; Daily   * **W** &#x3D; Weekly, based on the last day of the week of the start date.   * **M** &#x3D; Monthly, based on the last trading day of the month.   * **AM** &#x3D; Monthly, based on the start date (e.g., if the start date is June 16, data is displayed for June 16, May 16, April 16 etc.).    * **CQ** &#x3D; Quarterly based on the last trading day of the calendar quarter (March, June, September, or December).   * **AY** &#x3D; Actual Annual, based on the start date.   * **CY** &#x3D; Calendar Annual, based on the last trading day of the calendar year.  (optional, default to D)</param>
        /// <returns>SpotsResponse</returns>
        SpotsResponse GetSpots(List<string> ids, string startDate = default(string), string endDate = default(string), string frequency = default(string));

        /// <summary>
        /// Gets spots for a list of currency pairs
        /// </summary>
        /// <remarks>
        /// Gets FX Spot rates for a requested currency pair, date range, and frequency. The WM Company calculates daily standardized spot rates for global foreign exchange transactions, using rates provided by Reuters. These rates are recognized globally as the standard by banks, fund managers, and index compilers; increasingly these rates are also being used for benchmark currency trading. 
        /// </remarks>
        /// <exception cref="FactSet.SDK.ForeignExchangeRate.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">The currency pair requested in the format of a ISO {source}{target}. For a complete list of ISO currencies, please visit [OA 1470](https://my.apps.factset.com/oa/pages/1470)</param>
        /// <param name="startDate">The start date requested for a given date range in **YYYY-MM-DD** format. If left blank, the API will default to latest available.  (optional)</param>
        /// <param name="endDate">The end date requested for a given date range in **YYYY-MM-DD** format. If left blank, the API will default to latest available.  (optional)</param>
        /// <param name="frequency">Controls the display frequency of the data returned.   * **D** &#x3D; Daily   * **W** &#x3D; Weekly, based on the last day of the week of the start date.   * **M** &#x3D; Monthly, based on the last trading day of the month.   * **AM** &#x3D; Monthly, based on the start date (e.g., if the start date is June 16, data is displayed for June 16, May 16, April 16 etc.).    * **CQ** &#x3D; Quarterly based on the last trading day of the calendar quarter (March, June, September, or December).   * **AY** &#x3D; Actual Annual, based on the start date.   * **CY** &#x3D; Calendar Annual, based on the last trading day of the calendar year.  (optional, default to D)</param>
        /// <returns>ApiResponse of SpotsResponse</returns>
        ApiResponse<SpotsResponse> GetSpotsWithHttpInfo(List<string> ids, string startDate = default(string), string endDate = default(string), string frequency = default(string));
        /// <summary>
        /// Gets spots for a list of currency pairs
        /// </summary>
        /// <remarks>
        /// Gets FX Spot rates for a requested currency pair, date range, and frequency. The WM Company calculates daily standardized spot rates for global foreign exchange transactions, using rates provided by Reuters. These rates are recognized globally as the standard by banks, fund managers, and index compilers; increasingly these rates are also being used for benchmark currency trading. 
        /// </remarks>
        /// <exception cref="FactSet.SDK.ForeignExchangeRate.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="spotsRequest">Request object for Spots.</param>
        /// <returns>SpotsResponse</returns>
        SpotsResponse GetSpotsForList(SpotsRequest spotsRequest);

        /// <summary>
        /// Gets spots for a list of currency pairs
        /// </summary>
        /// <remarks>
        /// Gets FX Spot rates for a requested currency pair, date range, and frequency. The WM Company calculates daily standardized spot rates for global foreign exchange transactions, using rates provided by Reuters. These rates are recognized globally as the standard by banks, fund managers, and index compilers; increasingly these rates are also being used for benchmark currency trading. 
        /// </remarks>
        /// <exception cref="FactSet.SDK.ForeignExchangeRate.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="spotsRequest">Request object for Spots.</param>
        /// <returns>ApiResponse of SpotsResponse</returns>
        ApiResponse<SpotsResponse> GetSpotsForListWithHttpInfo(SpotsRequest spotsRequest);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ISpotsApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Gets spots for a list of currency pairs
        /// </summary>
        /// <remarks>
        /// Gets FX Spot rates for a requested currency pair, date range, and frequency. The WM Company calculates daily standardized spot rates for global foreign exchange transactions, using rates provided by Reuters. These rates are recognized globally as the standard by banks, fund managers, and index compilers; increasingly these rates are also being used for benchmark currency trading. 
        /// </remarks>
        /// <exception cref="FactSet.SDK.ForeignExchangeRate.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">The currency pair requested in the format of a ISO {source}{target}. For a complete list of ISO currencies, please visit [OA 1470](https://my.apps.factset.com/oa/pages/1470)</param>
        /// <param name="startDate">The start date requested for a given date range in **YYYY-MM-DD** format. If left blank, the API will default to latest available.  (optional)</param>
        /// <param name="endDate">The end date requested for a given date range in **YYYY-MM-DD** format. If left blank, the API will default to latest available.  (optional)</param>
        /// <param name="frequency">Controls the display frequency of the data returned.   * **D** &#x3D; Daily   * **W** &#x3D; Weekly, based on the last day of the week of the start date.   * **M** &#x3D; Monthly, based on the last trading day of the month.   * **AM** &#x3D; Monthly, based on the start date (e.g., if the start date is June 16, data is displayed for June 16, May 16, April 16 etc.).    * **CQ** &#x3D; Quarterly based on the last trading day of the calendar quarter (March, June, September, or December).   * **AY** &#x3D; Actual Annual, based on the start date.   * **CY** &#x3D; Calendar Annual, based on the last trading day of the calendar year.  (optional, default to D)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SpotsResponse</returns>
        System.Threading.Tasks.Task<SpotsResponse> GetSpotsAsync(List<string> ids, string startDate = default(string), string endDate = default(string), string frequency = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Gets spots for a list of currency pairs
        /// </summary>
        /// <remarks>
        /// Gets FX Spot rates for a requested currency pair, date range, and frequency. The WM Company calculates daily standardized spot rates for global foreign exchange transactions, using rates provided by Reuters. These rates are recognized globally as the standard by banks, fund managers, and index compilers; increasingly these rates are also being used for benchmark currency trading. 
        /// </remarks>
        /// <exception cref="FactSet.SDK.ForeignExchangeRate.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">The currency pair requested in the format of a ISO {source}{target}. For a complete list of ISO currencies, please visit [OA 1470](https://my.apps.factset.com/oa/pages/1470)</param>
        /// <param name="startDate">The start date requested for a given date range in **YYYY-MM-DD** format. If left blank, the API will default to latest available.  (optional)</param>
        /// <param name="endDate">The end date requested for a given date range in **YYYY-MM-DD** format. If left blank, the API will default to latest available.  (optional)</param>
        /// <param name="frequency">Controls the display frequency of the data returned.   * **D** &#x3D; Daily   * **W** &#x3D; Weekly, based on the last day of the week of the start date.   * **M** &#x3D; Monthly, based on the last trading day of the month.   * **AM** &#x3D; Monthly, based on the start date (e.g., if the start date is June 16, data is displayed for June 16, May 16, April 16 etc.).    * **CQ** &#x3D; Quarterly based on the last trading day of the calendar quarter (March, June, September, or December).   * **AY** &#x3D; Actual Annual, based on the start date.   * **CY** &#x3D; Calendar Annual, based on the last trading day of the calendar year.  (optional, default to D)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SpotsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SpotsResponse>> GetSpotsWithHttpInfoAsync(List<string> ids, string startDate = default(string), string endDate = default(string), string frequency = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Gets spots for a list of currency pairs
        /// </summary>
        /// <remarks>
        /// Gets FX Spot rates for a requested currency pair, date range, and frequency. The WM Company calculates daily standardized spot rates for global foreign exchange transactions, using rates provided by Reuters. These rates are recognized globally as the standard by banks, fund managers, and index compilers; increasingly these rates are also being used for benchmark currency trading. 
        /// </remarks>
        /// <exception cref="FactSet.SDK.ForeignExchangeRate.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="spotsRequest">Request object for Spots.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SpotsResponse</returns>
        System.Threading.Tasks.Task<SpotsResponse> GetSpotsForListAsync(SpotsRequest spotsRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Gets spots for a list of currency pairs
        /// </summary>
        /// <remarks>
        /// Gets FX Spot rates for a requested currency pair, date range, and frequency. The WM Company calculates daily standardized spot rates for global foreign exchange transactions, using rates provided by Reuters. These rates are recognized globally as the standard by banks, fund managers, and index compilers; increasingly these rates are also being used for benchmark currency trading. 
        /// </remarks>
        /// <exception cref="FactSet.SDK.ForeignExchangeRate.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="spotsRequest">Request object for Spots.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SpotsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SpotsResponse>> GetSpotsForListWithHttpInfoAsync(SpotsRequest spotsRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ISpotsApi : ISpotsApiSync, ISpotsApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class SpotsApi : ISpotsApi
    {
        private FactSet.SDK.ForeignExchangeRate.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="SpotsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public SpotsApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SpotsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public SpotsApi(string basePath)
        {
            this.Configuration = FactSet.SDK.ForeignExchangeRate.Client.Configuration.MergeConfigurations(
                FactSet.SDK.ForeignExchangeRate.Client.GlobalConfiguration.Instance,
                new FactSet.SDK.ForeignExchangeRate.Client.Configuration { BasePath = basePath }
            );
            this.Client = new FactSet.SDK.ForeignExchangeRate.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new FactSet.SDK.ForeignExchangeRate.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = FactSet.SDK.ForeignExchangeRate.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SpotsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public SpotsApi(FactSet.SDK.ForeignExchangeRate.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = FactSet.SDK.ForeignExchangeRate.Client.Configuration.MergeConfigurations(
                FactSet.SDK.ForeignExchangeRate.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new FactSet.SDK.ForeignExchangeRate.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new FactSet.SDK.ForeignExchangeRate.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = FactSet.SDK.ForeignExchangeRate.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SpotsApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public SpotsApi(FactSet.SDK.ForeignExchangeRate.Client.ISynchronousClient client, FactSet.SDK.ForeignExchangeRate.Client.IAsynchronousClient asyncClient, FactSet.SDK.ForeignExchangeRate.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = FactSet.SDK.ForeignExchangeRate.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public FactSet.SDK.ForeignExchangeRate.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public FactSet.SDK.ForeignExchangeRate.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public FactSet.SDK.ForeignExchangeRate.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public FactSet.SDK.ForeignExchangeRate.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets spots for a list of currency pairs Gets FX Spot rates for a requested currency pair, date range, and frequency. The WM Company calculates daily standardized spot rates for global foreign exchange transactions, using rates provided by Reuters. These rates are recognized globally as the standard by banks, fund managers, and index compilers; increasingly these rates are also being used for benchmark currency trading. 
        /// </summary>
        /// <exception cref="FactSet.SDK.ForeignExchangeRate.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">The currency pair requested in the format of a ISO {source}{target}. For a complete list of ISO currencies, please visit [OA 1470](https://my.apps.factset.com/oa/pages/1470)</param>
        /// <param name="startDate">The start date requested for a given date range in **YYYY-MM-DD** format. If left blank, the API will default to latest available.  (optional)</param>
        /// <param name="endDate">The end date requested for a given date range in **YYYY-MM-DD** format. If left blank, the API will default to latest available.  (optional)</param>
        /// <param name="frequency">Controls the display frequency of the data returned.   * **D** &#x3D; Daily   * **W** &#x3D; Weekly, based on the last day of the week of the start date.   * **M** &#x3D; Monthly, based on the last trading day of the month.   * **AM** &#x3D; Monthly, based on the start date (e.g., if the start date is June 16, data is displayed for June 16, May 16, April 16 etc.).    * **CQ** &#x3D; Quarterly based on the last trading day of the calendar quarter (March, June, September, or December).   * **AY** &#x3D; Actual Annual, based on the start date.   * **CY** &#x3D; Calendar Annual, based on the last trading day of the calendar year.  (optional, default to D)</param>
        /// <returns>SpotsResponse</returns>
        public SpotsResponse GetSpots(List<string> ids, string startDate = default(string), string endDate = default(string), string frequency = default(string))
        {
            FactSet.SDK.ForeignExchangeRate.Client.ApiResponse<SpotsResponse> localVarResponse = GetSpotsWithHttpInfo(ids, startDate, endDate, frequency);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Gets spots for a list of currency pairs Gets FX Spot rates for a requested currency pair, date range, and frequency. The WM Company calculates daily standardized spot rates for global foreign exchange transactions, using rates provided by Reuters. These rates are recognized globally as the standard by banks, fund managers, and index compilers; increasingly these rates are also being used for benchmark currency trading. 
        /// </summary>
        /// <exception cref="FactSet.SDK.ForeignExchangeRate.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">The currency pair requested in the format of a ISO {source}{target}. For a complete list of ISO currencies, please visit [OA 1470](https://my.apps.factset.com/oa/pages/1470)</param>
        /// <param name="startDate">The start date requested for a given date range in **YYYY-MM-DD** format. If left blank, the API will default to latest available.  (optional)</param>
        /// <param name="endDate">The end date requested for a given date range in **YYYY-MM-DD** format. If left blank, the API will default to latest available.  (optional)</param>
        /// <param name="frequency">Controls the display frequency of the data returned.   * **D** &#x3D; Daily   * **W** &#x3D; Weekly, based on the last day of the week of the start date.   * **M** &#x3D; Monthly, based on the last trading day of the month.   * **AM** &#x3D; Monthly, based on the start date (e.g., if the start date is June 16, data is displayed for June 16, May 16, April 16 etc.).    * **CQ** &#x3D; Quarterly based on the last trading day of the calendar quarter (March, June, September, or December).   * **AY** &#x3D; Actual Annual, based on the start date.   * **CY** &#x3D; Calendar Annual, based on the last trading day of the calendar year.  (optional, default to D)</param>
        /// <returns>ApiResponse of SpotsResponse</returns>
        public FactSet.SDK.ForeignExchangeRate.Client.ApiResponse<SpotsResponse> GetSpotsWithHttpInfo(List<string> ids, string startDate = default(string), string endDate = default(string), string frequency = default(string))
        {
            // verify the required parameter 'ids' is set
            if (ids == null)
                throw new FactSet.SDK.ForeignExchangeRate.Client.ApiException(400, "Missing required parameter 'ids' when calling SpotsApi->GetSpots");

            FactSet.SDK.ForeignExchangeRate.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.ForeignExchangeRate.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.ForeignExchangeRate.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = FactSet.SDK.ForeignExchangeRate.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.ForeignExchangeRate.Client.ClientUtils.ParameterToMultiMap("csv", "ids", ids));
            if (startDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.ForeignExchangeRate.Client.ClientUtils.ParameterToMultiMap("", "startDate", startDate));
            }
            if (endDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.ForeignExchangeRate.Client.ClientUtils.ParameterToMultiMap("", "endDate", endDate));
            }
            if (frequency != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.ForeignExchangeRate.Client.ClientUtils.ParameterToMultiMap("", "frequency", frequency));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.ForeignExchangeRate.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<SpotsResponse>("/foreign-exchange/v1/spots", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetSpots", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Gets spots for a list of currency pairs Gets FX Spot rates for a requested currency pair, date range, and frequency. The WM Company calculates daily standardized spot rates for global foreign exchange transactions, using rates provided by Reuters. These rates are recognized globally as the standard by banks, fund managers, and index compilers; increasingly these rates are also being used for benchmark currency trading. 
        /// </summary>
        /// <exception cref="FactSet.SDK.ForeignExchangeRate.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">The currency pair requested in the format of a ISO {source}{target}. For a complete list of ISO currencies, please visit [OA 1470](https://my.apps.factset.com/oa/pages/1470)</param>
        /// <param name="startDate">The start date requested for a given date range in **YYYY-MM-DD** format. If left blank, the API will default to latest available.  (optional)</param>
        /// <param name="endDate">The end date requested for a given date range in **YYYY-MM-DD** format. If left blank, the API will default to latest available.  (optional)</param>
        /// <param name="frequency">Controls the display frequency of the data returned.   * **D** &#x3D; Daily   * **W** &#x3D; Weekly, based on the last day of the week of the start date.   * **M** &#x3D; Monthly, based on the last trading day of the month.   * **AM** &#x3D; Monthly, based on the start date (e.g., if the start date is June 16, data is displayed for June 16, May 16, April 16 etc.).    * **CQ** &#x3D; Quarterly based on the last trading day of the calendar quarter (March, June, September, or December).   * **AY** &#x3D; Actual Annual, based on the start date.   * **CY** &#x3D; Calendar Annual, based on the last trading day of the calendar year.  (optional, default to D)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SpotsResponse</returns>
        public async System.Threading.Tasks.Task<SpotsResponse> GetSpotsAsync(List<string> ids, string startDate = default(string), string endDate = default(string), string frequency = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            FactSet.SDK.ForeignExchangeRate.Client.ApiResponse<SpotsResponse> localVarResponse = await GetSpotsWithHttpInfoAsync(ids, startDate, endDate, frequency, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Gets spots for a list of currency pairs Gets FX Spot rates for a requested currency pair, date range, and frequency. The WM Company calculates daily standardized spot rates for global foreign exchange transactions, using rates provided by Reuters. These rates are recognized globally as the standard by banks, fund managers, and index compilers; increasingly these rates are also being used for benchmark currency trading. 
        /// </summary>
        /// <exception cref="FactSet.SDK.ForeignExchangeRate.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">The currency pair requested in the format of a ISO {source}{target}. For a complete list of ISO currencies, please visit [OA 1470](https://my.apps.factset.com/oa/pages/1470)</param>
        /// <param name="startDate">The start date requested for a given date range in **YYYY-MM-DD** format. If left blank, the API will default to latest available.  (optional)</param>
        /// <param name="endDate">The end date requested for a given date range in **YYYY-MM-DD** format. If left blank, the API will default to latest available.  (optional)</param>
        /// <param name="frequency">Controls the display frequency of the data returned.   * **D** &#x3D; Daily   * **W** &#x3D; Weekly, based on the last day of the week of the start date.   * **M** &#x3D; Monthly, based on the last trading day of the month.   * **AM** &#x3D; Monthly, based on the start date (e.g., if the start date is June 16, data is displayed for June 16, May 16, April 16 etc.).    * **CQ** &#x3D; Quarterly based on the last trading day of the calendar quarter (March, June, September, or December).   * **AY** &#x3D; Actual Annual, based on the start date.   * **CY** &#x3D; Calendar Annual, based on the last trading day of the calendar year.  (optional, default to D)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SpotsResponse)</returns>
        public async System.Threading.Tasks.Task<FactSet.SDK.ForeignExchangeRate.Client.ApiResponse<SpotsResponse>> GetSpotsWithHttpInfoAsync(List<string> ids, string startDate = default(string), string endDate = default(string), string frequency = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'ids' is set
            if (ids == null)
                throw new FactSet.SDK.ForeignExchangeRate.Client.ApiException(400, "Missing required parameter 'ids' when calling SpotsApi->GetSpots");


            FactSet.SDK.ForeignExchangeRate.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.ForeignExchangeRate.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = FactSet.SDK.ForeignExchangeRate.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = FactSet.SDK.ForeignExchangeRate.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.ForeignExchangeRate.Client.ClientUtils.ParameterToMultiMap("csv", "ids", ids));
            if (startDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.ForeignExchangeRate.Client.ClientUtils.ParameterToMultiMap("", "startDate", startDate));
            }
            if (endDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.ForeignExchangeRate.Client.ClientUtils.ParameterToMultiMap("", "endDate", endDate));
            }
            if (frequency != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.ForeignExchangeRate.Client.ClientUtils.ParameterToMultiMap("", "frequency", frequency));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.ForeignExchangeRate.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<SpotsResponse>("/foreign-exchange/v1/spots", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetSpots", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Gets spots for a list of currency pairs Gets FX Spot rates for a requested currency pair, date range, and frequency. The WM Company calculates daily standardized spot rates for global foreign exchange transactions, using rates provided by Reuters. These rates are recognized globally as the standard by banks, fund managers, and index compilers; increasingly these rates are also being used for benchmark currency trading. 
        /// </summary>
        /// <exception cref="FactSet.SDK.ForeignExchangeRate.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="spotsRequest">Request object for Spots.</param>
        /// <returns>SpotsResponse</returns>
        public SpotsResponse GetSpotsForList(SpotsRequest spotsRequest)
        {
            FactSet.SDK.ForeignExchangeRate.Client.ApiResponse<SpotsResponse> localVarResponse = GetSpotsForListWithHttpInfo(spotsRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Gets spots for a list of currency pairs Gets FX Spot rates for a requested currency pair, date range, and frequency. The WM Company calculates daily standardized spot rates for global foreign exchange transactions, using rates provided by Reuters. These rates are recognized globally as the standard by banks, fund managers, and index compilers; increasingly these rates are also being used for benchmark currency trading. 
        /// </summary>
        /// <exception cref="FactSet.SDK.ForeignExchangeRate.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="spotsRequest">Request object for Spots.</param>
        /// <returns>ApiResponse of SpotsResponse</returns>
        public FactSet.SDK.ForeignExchangeRate.Client.ApiResponse<SpotsResponse> GetSpotsForListWithHttpInfo(SpotsRequest spotsRequest)
        {
            // verify the required parameter 'spotsRequest' is set
            if (spotsRequest == null)
                throw new FactSet.SDK.ForeignExchangeRate.Client.ApiException(400, "Missing required parameter 'spotsRequest' when calling SpotsApi->GetSpotsForList");

            FactSet.SDK.ForeignExchangeRate.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.ForeignExchangeRate.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.ForeignExchangeRate.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = FactSet.SDK.ForeignExchangeRate.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = spotsRequest;

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.ForeignExchangeRate.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<SpotsResponse>("/foreign-exchange/v1/spots", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetSpotsForList", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Gets spots for a list of currency pairs Gets FX Spot rates for a requested currency pair, date range, and frequency. The WM Company calculates daily standardized spot rates for global foreign exchange transactions, using rates provided by Reuters. These rates are recognized globally as the standard by banks, fund managers, and index compilers; increasingly these rates are also being used for benchmark currency trading. 
        /// </summary>
        /// <exception cref="FactSet.SDK.ForeignExchangeRate.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="spotsRequest">Request object for Spots.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SpotsResponse</returns>
        public async System.Threading.Tasks.Task<SpotsResponse> GetSpotsForListAsync(SpotsRequest spotsRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            FactSet.SDK.ForeignExchangeRate.Client.ApiResponse<SpotsResponse> localVarResponse = await GetSpotsForListWithHttpInfoAsync(spotsRequest, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Gets spots for a list of currency pairs Gets FX Spot rates for a requested currency pair, date range, and frequency. The WM Company calculates daily standardized spot rates for global foreign exchange transactions, using rates provided by Reuters. These rates are recognized globally as the standard by banks, fund managers, and index compilers; increasingly these rates are also being used for benchmark currency trading. 
        /// </summary>
        /// <exception cref="FactSet.SDK.ForeignExchangeRate.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="spotsRequest">Request object for Spots.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SpotsResponse)</returns>
        public async System.Threading.Tasks.Task<FactSet.SDK.ForeignExchangeRate.Client.ApiResponse<SpotsResponse>> GetSpotsForListWithHttpInfoAsync(SpotsRequest spotsRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'spotsRequest' is set
            if (spotsRequest == null)
                throw new FactSet.SDK.ForeignExchangeRate.Client.ApiException(400, "Missing required parameter 'spotsRequest' when calling SpotsApi->GetSpotsForList");


            FactSet.SDK.ForeignExchangeRate.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.ForeignExchangeRate.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = FactSet.SDK.ForeignExchangeRate.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = FactSet.SDK.ForeignExchangeRate.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = spotsRequest;

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.ForeignExchangeRate.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<SpotsResponse>("/foreign-exchange/v1/spots", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetSpotsForList", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
