/*
 * Foreign Exchange Rates API
 *
 * Foreign Exchange Rates API in which retrieves Spots and Forwards for a given currency pair and date range. <p>*Spots and Forwards rates are sourced from W/M Reuters.The WM Company calculates daily standardized spot rates for global foreign exchange transactions, using rates provided by Reuters. These rates are recognized globally as the standard by banks, fund managers, and index compilers; increasingly these rates are also being used for benchmark currency trading. In 1994, WM Company began calculating closing spot rates. Closing spot rates provide a standard set of currency rates so that portfolio valuations can be compared to each other and their performances measured against benchmarks, without having discrepancies caused by exchange rates. Closing spot rates are recorded at 16:00 GMT.*</p> 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: api@factset.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = FactSet.SDK.ForeignExchangeRate.Client.OpenAPIDateConverter;

namespace FactSet.SDK.ForeignExchangeRate.Model
{
    /// <summary>
    /// Spot
    /// </summary>
    [DataContract(Name = "spot")]
    public partial class Spot : IEquatable<Spot>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Spot" /> class.
        /// </summary>
        /// <param name="requestId">The FX Spot Rate currency pair requested in the &#39;ids&#39; parameter. This represents the base and quote currency..</param>
        /// <param name="currencyName">The full text currency pair name expressed in Proper Case..</param>
        /// <param name="spotBid">The currency pair&#39;s spot rate Bid..</param>
        /// <param name="spotMid">The currency pair&#39;s spot rate Mid..</param>
        /// <param name="spotAsk">The currency pair&#39;s spot rate Ask..</param>
        /// <param name="date">Ending date for the period expressed in YYYY-MM-DD format..</param>
        public Spot(string requestId = default(string), string currencyName = default(string), decimal spotBid = default(decimal), decimal spotMid = default(decimal), decimal spotAsk = default(decimal), DateTime date = default(DateTime))
        {
            this.RequestId = requestId;
            this.CurrencyName = currencyName;
            this.SpotBid = spotBid;
            this.SpotMid = spotMid;
            this.SpotAsk = spotAsk;
            this.Date = date;
        }

        /// <summary>
        /// The FX Spot Rate currency pair requested in the &#39;ids&#39; parameter. This represents the base and quote currency.
        /// </summary>
        /// <value>The FX Spot Rate currency pair requested in the &#39;ids&#39; parameter. This represents the base and quote currency.</value>
        [DataMember(Name = "requestId", EmitDefaultValue = false)]
        public string RequestId { get; set; }

        /// <summary>
        /// The full text currency pair name expressed in Proper Case.
        /// </summary>
        /// <value>The full text currency pair name expressed in Proper Case.</value>
        [DataMember(Name = "currencyName", EmitDefaultValue = false)]
        public string CurrencyName { get; set; }

        /// <summary>
        /// The currency pair&#39;s spot rate Bid.
        /// </summary>
        /// <value>The currency pair&#39;s spot rate Bid.</value>
        [DataMember(Name = "spotBid", EmitDefaultValue = false)]
        public decimal SpotBid { get; set; }

        /// <summary>
        /// The currency pair&#39;s spot rate Mid.
        /// </summary>
        /// <value>The currency pair&#39;s spot rate Mid.</value>
        [DataMember(Name = "spotMid", EmitDefaultValue = false)]
        public decimal SpotMid { get; set; }

        /// <summary>
        /// The currency pair&#39;s spot rate Ask.
        /// </summary>
        /// <value>The currency pair&#39;s spot rate Ask.</value>
        [DataMember(Name = "spotAsk", EmitDefaultValue = false)]
        public decimal SpotAsk { get; set; }

        /// <summary>
        /// Ending date for the period expressed in YYYY-MM-DD format.
        /// </summary>
        /// <value>Ending date for the period expressed in YYYY-MM-DD format.</value>
        [DataMember(Name = "date", EmitDefaultValue = false)]
        [JsonConverter(typeof(OpenAPIDateConverter))]
        public DateTime Date { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Spot {\n");
            sb.Append("  RequestId: ").Append(RequestId).Append("\n");
            sb.Append("  CurrencyName: ").Append(CurrencyName).Append("\n");
            sb.Append("  SpotBid: ").Append(SpotBid).Append("\n");
            sb.Append("  SpotMid: ").Append(SpotMid).Append("\n");
            sb.Append("  SpotAsk: ").Append(SpotAsk).Append("\n");
            sb.Append("  Date: ").Append(Date).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Spot);
        }

        /// <summary>
        /// Returns true if Spot instances are equal
        /// </summary>
        /// <param name="input">Instance of Spot to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Spot input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.RequestId == input.RequestId ||
                    (this.RequestId != null &&
                    this.RequestId.Equals(input.RequestId))
                ) && 
                (
                    this.CurrencyName == input.CurrencyName ||
                    (this.CurrencyName != null &&
                    this.CurrencyName.Equals(input.CurrencyName))
                ) && 
                (
                    this.SpotBid == input.SpotBid ||
                    this.SpotBid.Equals(input.SpotBid)
                ) && 
                (
                    this.SpotMid == input.SpotMid ||
                    this.SpotMid.Equals(input.SpotMid)
                ) && 
                (
                    this.SpotAsk == input.SpotAsk ||
                    this.SpotAsk.Equals(input.SpotAsk)
                ) && 
                (
                    this.Date == input.Date ||
                    (this.Date != null &&
                    this.Date.Equals(input.Date))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.RequestId != null)
                    hashCode = hashCode * 59 + this.RequestId.GetHashCode();
                if (this.CurrencyName != null)
                    hashCode = hashCode * 59 + this.CurrencyName.GetHashCode();
                hashCode = hashCode * 59 + this.SpotBid.GetHashCode();
                hashCode = hashCode * 59 + this.SpotMid.GetHashCode();
                hashCode = hashCode * 59 + this.SpotAsk.GetHashCode();
                if (this.Date != null)
                    hashCode = hashCode * 59 + this.Date.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
