/*
 * Event Calendar API
 *
 * Retrieves events for companies
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: api@factset.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = FactSet.SDK.EventCalendar.Client.OpenAPIDateConverter;

namespace FactSet.SDK.EventCalendar.Model
{
    /// <summary>
    /// CompanyEventRequestData
    /// </summary>
    [DataContract(Name = "companyEventRequest_data")]
    public partial class CompanyEventRequestData : IEquatable<CompanyEventRequestData>, IValidatableObject
    {
        /// <summary>
        /// Defines Types
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TypesEnum
        {
            /// <summary>
            /// Enum E for value: E
            /// </summary>
            [EnumMember(Value = "E")]
            E = 1,

            /// <summary>
            /// Enum SA for value: SA
            /// </summary>
            [EnumMember(Value = "SA")]
            SA = 2,

            /// <summary>
            /// Enum G for value: G
            /// </summary>
            [EnumMember(Value = "G")]
            G = 3,

            /// <summary>
            /// Enum AM for value: AM
            /// </summary>
            [EnumMember(Value = "AM")]
            AM = 4,

            /// <summary>
            /// Enum SM for value: SM
            /// </summary>
            [EnumMember(Value = "SM")]
            SM = 5,

            /// <summary>
            /// Enum SS for value: SS
            /// </summary>
            [EnumMember(Value = "SS")]
            SS = 6,

            /// <summary>
            /// Enum CP for value: CP
            /// </summary>
            [EnumMember(Value = "CP")]
            CP = 7,

            /// <summary>
            /// Enum ConfirmedER for value: confirmedER
            /// </summary>
            [EnumMember(Value = "confirmedER")]
            ConfirmedER = 8,

            /// <summary>
            /// Enum SR for value: SR
            /// </summary>
            [EnumMember(Value = "SR")]
            SR = 9,

            /// <summary>
            /// Enum ProjectedER for value: projectedER
            /// </summary>
            [EnumMember(Value = "projectedER")]
            ProjectedER = 10,

            /// <summary>
            /// Enum S for value: S
            /// </summary>
            [EnumMember(Value = "S")]
            S = 11,

            /// <summary>
            /// Enum D for value: D
            /// </summary>
            [EnumMember(Value = "D")]
            D = 12

        }



        /// <summary>
        /// The type of events returned in the response
        /// </summary>
        /// <value>The type of events returned in the response</value>
        [DataMember(Name = "types", EmitDefaultValue = false)]
        public List<TypesEnum> Types { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="CompanyEventRequestData" /> class.
        /// </summary>
        /// <param name="date">date.</param>
        /// <param name="universe">universe.</param>
        /// <param name="types">The type of events returned in the response.</param>
        public CompanyEventRequestData(CompanyEventRequestDataDate date = default(CompanyEventRequestDataDate), CompanyEventRequestDataUniverse universe = default(CompanyEventRequestDataUniverse), List<TypesEnum> types = default(List<TypesEnum>))
        {
            this.Date = date;
            this.Universe = universe;
            this.Types = types;
        }

        /// <summary>
        /// Gets or Sets Date
        /// </summary>
        [DataMember(Name = "date", EmitDefaultValue = false)]
        public CompanyEventRequestDataDate Date { get; set; }

        /// <summary>
        /// Gets or Sets Universe
        /// </summary>
        [DataMember(Name = "universe", EmitDefaultValue = false)]
        public CompanyEventRequestDataUniverse Universe { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CompanyEventRequestData {\n");
            sb.Append("  Date: ").Append(Date).Append("\n");
            sb.Append("  Universe: ").Append(Universe).Append("\n");
            sb.Append("  Types: ").Append(Types).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CompanyEventRequestData);
        }

        /// <summary>
        /// Returns true if CompanyEventRequestData instances are equal
        /// </summary>
        /// <param name="input">Instance of CompanyEventRequestData to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CompanyEventRequestData input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Date == input.Date ||
                    (this.Date != null &&
                    this.Date.Equals(input.Date))
                ) && 
                (
                    this.Universe == input.Universe ||
                    (this.Universe != null &&
                    this.Universe.Equals(input.Universe))
                ) && 
                (
                    this.Types == input.Types ||
                    this.Types.SequenceEqual(input.Types)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Date != null)
                {
                    hashCode = (hashCode * 59) + this.Date.GetHashCode();
                }
                if (this.Universe != null)
                {
                    hashCode = (hashCode * 59) + this.Universe.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Types.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
