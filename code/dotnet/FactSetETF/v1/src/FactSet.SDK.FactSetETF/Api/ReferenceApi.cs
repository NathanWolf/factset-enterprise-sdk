/*
 * FactSet Exchange Traded Funds API
 *
 * FactSet ETF data feeds provide complete and accurate security, fund and reference data across the universe of exchange-traded products. Data is sourced from ETF providers across the globe and includes more than 100 unique data points, resulting in comprehensive coverage to help you evaluate and construct ETFs, analyze potential trades, and perform fund research.<p> FactSet Reference and Analytics data uses FactSet's FCS, which categorizes exchange-traded products using a rules-based system that is derived from seven core classifications. This system evaluates the asset class, economic development level, and geographical region as described in each fund's prospectus and marketing materials. ETF exposure details are presented on successively granular levels-  category, then focus, and then niche.</p> <p>Moreover, FactSet ETF Reference data captures over 100 unique data points and provides market-specific data if you wish to solely focus on U.S., Canadian, Australian, New Zealand, Singapore, Hong Kong or European exchanges. All data points are grouped in one of two levels, either as a Fund or as a Listing. However, FactSet ETF Analytics data is primarily available for U.S.-domiciled ETFs. A subset of reference data items are provided for European-domiciled funds. For a full breakout of regional availability and history, see Formula Definitions and Calculations.</p> 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: api@factset.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using FactSet.SDK.FactSetETF.Client;
using FactSet.SDK.FactSetETF.Model;
using FactSet.SDK.Utils.Authentication;

namespace FactSet.SDK.FactSetETF.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IReferenceApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Return reference data for an ETF.
        /// </summary>
        /// <remarks>
        /// Returns reference data items for Exchange Traded Funds. 
        /// </remarks>
        /// <exception cref="FactSet.SDK.FactSetETF.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">The list of ETF identifiers. Accepted identifer types include FactSet Permanent Ids, Tickers, CUSIP, SEDOL, ISIN. &lt;p&gt;***ids limit** &#x3D;  3000 per request*&lt;/p&gt; *&lt;p&gt;Make note, GET Method URL request lines are also limited to a total length of 8192 bytes (8KB). In cases where the service allows for thousands of ids, which may lead to exceeding this request line limit of 8KB, its advised for any requests with large request lines to be requested through the respective \&quot;POST\&quot; method.&lt;/p&gt;* </param>
        /// <param name="metrics">List of individdual data items for Exchange Traded Funds. By default only the fsymId and requestId are returned. To fetch a list of all available data items, use the **_/metrics** endpoint.  (optional)</param>
        /// <param name="categories">Groupings of &#x60;metrics&#x60; data items. Supply a list of categories below to return collections of data items in response. |category|description| |- --|- --| |BENCHMARK_DETAILS|Details surrounding the underlying Benchmark Id and Segment Banchmark| |CLASSIFICATION|FactSet Fund Classification Codes and Names, across Asset Class, Broad  Geography, Fund Categories, Focus, Niche, and more.| |COSTS_FEES|Expenses and Fees such as capital gains, expense ratio, management fees, and more.| |COUNTERPARTY|Credit and Swap Counterparty details| |CREATE_REDEEM|Creation and Redemption Sizes| |DESCRIPTIVE|General Descriptive information such as name, objectives, issuer details, launch dates, website, and more.| |DISTRIBUTIONS|Dividend Dates, Dividend Treatmetns, Min/Max Cap Gains| |DOCUMENTATION|Details surrounding reporting information.| |GEARING|Leverage factors, inverse flags, and more.| |HEDGE|Hedging Information| |RISK|CIFSC Risk Ratings| |SERVICE_PROVIDERS|Distributors, issuers, and Advisor details| |STATUS|Actively Managed Flags| |STRATEGY|Segment Codes, selection criteria, strategy codes, weighting schemes, and lending details.| |STRUCTURE|ETF Type, backing codes, synthetic types, ucits compliance, legal structures, and more.| |TAX|Tax Types, distribution takes, K1 Flags, and more.|  (optional)</param>
        /// <returns>EtfReferenceDataResponse</returns>
        EtfReferenceDataResponse GetEtfReferenceData(List<string> ids, List<string> metrics = default(List<string>), List<Category> categories = default(List<Category>));

        /// <summary>
        /// Return reference data for an ETF.
        /// </summary>
        /// <remarks>
        /// Returns reference data items for Exchange Traded Funds. 
        /// </remarks>
        /// <exception cref="FactSet.SDK.FactSetETF.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">The list of ETF identifiers. Accepted identifer types include FactSet Permanent Ids, Tickers, CUSIP, SEDOL, ISIN. &lt;p&gt;***ids limit** &#x3D;  3000 per request*&lt;/p&gt; *&lt;p&gt;Make note, GET Method URL request lines are also limited to a total length of 8192 bytes (8KB). In cases where the service allows for thousands of ids, which may lead to exceeding this request line limit of 8KB, its advised for any requests with large request lines to be requested through the respective \&quot;POST\&quot; method.&lt;/p&gt;* </param>
        /// <param name="metrics">List of individdual data items for Exchange Traded Funds. By default only the fsymId and requestId are returned. To fetch a list of all available data items, use the **_/metrics** endpoint.  (optional)</param>
        /// <param name="categories">Groupings of &#x60;metrics&#x60; data items. Supply a list of categories below to return collections of data items in response. |category|description| |- --|- --| |BENCHMARK_DETAILS|Details surrounding the underlying Benchmark Id and Segment Banchmark| |CLASSIFICATION|FactSet Fund Classification Codes and Names, across Asset Class, Broad  Geography, Fund Categories, Focus, Niche, and more.| |COSTS_FEES|Expenses and Fees such as capital gains, expense ratio, management fees, and more.| |COUNTERPARTY|Credit and Swap Counterparty details| |CREATE_REDEEM|Creation and Redemption Sizes| |DESCRIPTIVE|General Descriptive information such as name, objectives, issuer details, launch dates, website, and more.| |DISTRIBUTIONS|Dividend Dates, Dividend Treatmetns, Min/Max Cap Gains| |DOCUMENTATION|Details surrounding reporting information.| |GEARING|Leverage factors, inverse flags, and more.| |HEDGE|Hedging Information| |RISK|CIFSC Risk Ratings| |SERVICE_PROVIDERS|Distributors, issuers, and Advisor details| |STATUS|Actively Managed Flags| |STRATEGY|Segment Codes, selection criteria, strategy codes, weighting schemes, and lending details.| |STRUCTURE|ETF Type, backing codes, synthetic types, ucits compliance, legal structures, and more.| |TAX|Tax Types, distribution takes, K1 Flags, and more.|  (optional)</param>
        /// <returns>ApiResponse of EtfReferenceDataResponse</returns>
        ApiResponse<EtfReferenceDataResponse> GetEtfReferenceDataWithHttpInfo(List<string> ids, List<string> metrics = default(List<string>), List<Category> categories = default(List<Category>));
        /// <summary>
        /// Fetch Reference Data for a large list of ETF securities.
        /// </summary>
        /// <remarks>
        /// Returns reference data items for a list of Exchange Traded Funds. 
        /// </remarks>
        /// <exception cref="FactSet.SDK.FactSetETF.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="etfReferenceDataRequest">Request object for Exchange Traded Funds</param>
        /// <returns>EtfReferenceDataResponse</returns>
        EtfReferenceDataResponse GetEtfReferenceDataForList(EtfReferenceDataRequest etfReferenceDataRequest);

        /// <summary>
        /// Fetch Reference Data for a large list of ETF securities.
        /// </summary>
        /// <remarks>
        /// Returns reference data items for a list of Exchange Traded Funds. 
        /// </remarks>
        /// <exception cref="FactSet.SDK.FactSetETF.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="etfReferenceDataRequest">Request object for Exchange Traded Funds</param>
        /// <returns>ApiResponse of EtfReferenceDataResponse</returns>
        ApiResponse<EtfReferenceDataResponse> GetEtfReferenceDataForListWithHttpInfo(EtfReferenceDataRequest etfReferenceDataRequest);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IReferenceApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Return reference data for an ETF.
        /// </summary>
        /// <remarks>
        /// Returns reference data items for Exchange Traded Funds. 
        /// </remarks>
        /// <exception cref="FactSet.SDK.FactSetETF.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">The list of ETF identifiers. Accepted identifer types include FactSet Permanent Ids, Tickers, CUSIP, SEDOL, ISIN. &lt;p&gt;***ids limit** &#x3D;  3000 per request*&lt;/p&gt; *&lt;p&gt;Make note, GET Method URL request lines are also limited to a total length of 8192 bytes (8KB). In cases where the service allows for thousands of ids, which may lead to exceeding this request line limit of 8KB, its advised for any requests with large request lines to be requested through the respective \&quot;POST\&quot; method.&lt;/p&gt;* </param>
        /// <param name="metrics">List of individdual data items for Exchange Traded Funds. By default only the fsymId and requestId are returned. To fetch a list of all available data items, use the **_/metrics** endpoint.  (optional)</param>
        /// <param name="categories">Groupings of &#x60;metrics&#x60; data items. Supply a list of categories below to return collections of data items in response. |category|description| |- --|- --| |BENCHMARK_DETAILS|Details surrounding the underlying Benchmark Id and Segment Banchmark| |CLASSIFICATION|FactSet Fund Classification Codes and Names, across Asset Class, Broad  Geography, Fund Categories, Focus, Niche, and more.| |COSTS_FEES|Expenses and Fees such as capital gains, expense ratio, management fees, and more.| |COUNTERPARTY|Credit and Swap Counterparty details| |CREATE_REDEEM|Creation and Redemption Sizes| |DESCRIPTIVE|General Descriptive information such as name, objectives, issuer details, launch dates, website, and more.| |DISTRIBUTIONS|Dividend Dates, Dividend Treatmetns, Min/Max Cap Gains| |DOCUMENTATION|Details surrounding reporting information.| |GEARING|Leverage factors, inverse flags, and more.| |HEDGE|Hedging Information| |RISK|CIFSC Risk Ratings| |SERVICE_PROVIDERS|Distributors, issuers, and Advisor details| |STATUS|Actively Managed Flags| |STRATEGY|Segment Codes, selection criteria, strategy codes, weighting schemes, and lending details.| |STRUCTURE|ETF Type, backing codes, synthetic types, ucits compliance, legal structures, and more.| |TAX|Tax Types, distribution takes, K1 Flags, and more.|  (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EtfReferenceDataResponse</returns>
        System.Threading.Tasks.Task<EtfReferenceDataResponse> GetEtfReferenceDataAsync(List<string> ids, List<string> metrics = default(List<string>), List<Category> categories = default(List<Category>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Return reference data for an ETF.
        /// </summary>
        /// <remarks>
        /// Returns reference data items for Exchange Traded Funds. 
        /// </remarks>
        /// <exception cref="FactSet.SDK.FactSetETF.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">The list of ETF identifiers. Accepted identifer types include FactSet Permanent Ids, Tickers, CUSIP, SEDOL, ISIN. &lt;p&gt;***ids limit** &#x3D;  3000 per request*&lt;/p&gt; *&lt;p&gt;Make note, GET Method URL request lines are also limited to a total length of 8192 bytes (8KB). In cases where the service allows for thousands of ids, which may lead to exceeding this request line limit of 8KB, its advised for any requests with large request lines to be requested through the respective \&quot;POST\&quot; method.&lt;/p&gt;* </param>
        /// <param name="metrics">List of individdual data items for Exchange Traded Funds. By default only the fsymId and requestId are returned. To fetch a list of all available data items, use the **_/metrics** endpoint.  (optional)</param>
        /// <param name="categories">Groupings of &#x60;metrics&#x60; data items. Supply a list of categories below to return collections of data items in response. |category|description| |- --|- --| |BENCHMARK_DETAILS|Details surrounding the underlying Benchmark Id and Segment Banchmark| |CLASSIFICATION|FactSet Fund Classification Codes and Names, across Asset Class, Broad  Geography, Fund Categories, Focus, Niche, and more.| |COSTS_FEES|Expenses and Fees such as capital gains, expense ratio, management fees, and more.| |COUNTERPARTY|Credit and Swap Counterparty details| |CREATE_REDEEM|Creation and Redemption Sizes| |DESCRIPTIVE|General Descriptive information such as name, objectives, issuer details, launch dates, website, and more.| |DISTRIBUTIONS|Dividend Dates, Dividend Treatmetns, Min/Max Cap Gains| |DOCUMENTATION|Details surrounding reporting information.| |GEARING|Leverage factors, inverse flags, and more.| |HEDGE|Hedging Information| |RISK|CIFSC Risk Ratings| |SERVICE_PROVIDERS|Distributors, issuers, and Advisor details| |STATUS|Actively Managed Flags| |STRATEGY|Segment Codes, selection criteria, strategy codes, weighting schemes, and lending details.| |STRUCTURE|ETF Type, backing codes, synthetic types, ucits compliance, legal structures, and more.| |TAX|Tax Types, distribution takes, K1 Flags, and more.|  (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EtfReferenceDataResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<EtfReferenceDataResponse>> GetEtfReferenceDataWithHttpInfoAsync(List<string> ids, List<string> metrics = default(List<string>), List<Category> categories = default(List<Category>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Fetch Reference Data for a large list of ETF securities.
        /// </summary>
        /// <remarks>
        /// Returns reference data items for a list of Exchange Traded Funds. 
        /// </remarks>
        /// <exception cref="FactSet.SDK.FactSetETF.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="etfReferenceDataRequest">Request object for Exchange Traded Funds</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EtfReferenceDataResponse</returns>
        System.Threading.Tasks.Task<EtfReferenceDataResponse> GetEtfReferenceDataForListAsync(EtfReferenceDataRequest etfReferenceDataRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Fetch Reference Data for a large list of ETF securities.
        /// </summary>
        /// <remarks>
        /// Returns reference data items for a list of Exchange Traded Funds. 
        /// </remarks>
        /// <exception cref="FactSet.SDK.FactSetETF.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="etfReferenceDataRequest">Request object for Exchange Traded Funds</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EtfReferenceDataResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<EtfReferenceDataResponse>> GetEtfReferenceDataForListWithHttpInfoAsync(EtfReferenceDataRequest etfReferenceDataRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IReferenceApi : IReferenceApiSync, IReferenceApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ReferenceApi : IReferenceApi
    {
        private FactSet.SDK.FactSetETF.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ReferenceApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ReferenceApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ReferenceApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ReferenceApi(string basePath)
        {
            this.Configuration = FactSet.SDK.FactSetETF.Client.Configuration.MergeConfigurations(
                FactSet.SDK.FactSetETF.Client.GlobalConfiguration.Instance,
                new FactSet.SDK.FactSetETF.Client.Configuration { BasePath = basePath }
            );
            this.Client = new FactSet.SDK.FactSetETF.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new FactSet.SDK.FactSetETF.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = FactSet.SDK.FactSetETF.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ReferenceApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ReferenceApi(FactSet.SDK.FactSetETF.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = FactSet.SDK.FactSetETF.Client.Configuration.MergeConfigurations(
                FactSet.SDK.FactSetETF.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new FactSet.SDK.FactSetETF.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new FactSet.SDK.FactSetETF.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = FactSet.SDK.FactSetETF.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ReferenceApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public ReferenceApi(FactSet.SDK.FactSetETF.Client.ISynchronousClient client, FactSet.SDK.FactSetETF.Client.IAsynchronousClient asyncClient, FactSet.SDK.FactSetETF.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = FactSet.SDK.FactSetETF.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public FactSet.SDK.FactSetETF.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public FactSet.SDK.FactSetETF.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public FactSet.SDK.FactSetETF.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public FactSet.SDK.FactSetETF.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Return reference data for an ETF. Returns reference data items for Exchange Traded Funds. 
        /// </summary>
        /// <exception cref="FactSet.SDK.FactSetETF.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">The list of ETF identifiers. Accepted identifer types include FactSet Permanent Ids, Tickers, CUSIP, SEDOL, ISIN. &lt;p&gt;***ids limit** &#x3D;  3000 per request*&lt;/p&gt; *&lt;p&gt;Make note, GET Method URL request lines are also limited to a total length of 8192 bytes (8KB). In cases where the service allows for thousands of ids, which may lead to exceeding this request line limit of 8KB, its advised for any requests with large request lines to be requested through the respective \&quot;POST\&quot; method.&lt;/p&gt;* </param>
        /// <param name="metrics">List of individdual data items for Exchange Traded Funds. By default only the fsymId and requestId are returned. To fetch a list of all available data items, use the **_/metrics** endpoint.  (optional)</param>
        /// <param name="categories">Groupings of &#x60;metrics&#x60; data items. Supply a list of categories below to return collections of data items in response. |category|description| |- --|- --| |BENCHMARK_DETAILS|Details surrounding the underlying Benchmark Id and Segment Banchmark| |CLASSIFICATION|FactSet Fund Classification Codes and Names, across Asset Class, Broad  Geography, Fund Categories, Focus, Niche, and more.| |COSTS_FEES|Expenses and Fees such as capital gains, expense ratio, management fees, and more.| |COUNTERPARTY|Credit and Swap Counterparty details| |CREATE_REDEEM|Creation and Redemption Sizes| |DESCRIPTIVE|General Descriptive information such as name, objectives, issuer details, launch dates, website, and more.| |DISTRIBUTIONS|Dividend Dates, Dividend Treatmetns, Min/Max Cap Gains| |DOCUMENTATION|Details surrounding reporting information.| |GEARING|Leverage factors, inverse flags, and more.| |HEDGE|Hedging Information| |RISK|CIFSC Risk Ratings| |SERVICE_PROVIDERS|Distributors, issuers, and Advisor details| |STATUS|Actively Managed Flags| |STRATEGY|Segment Codes, selection criteria, strategy codes, weighting schemes, and lending details.| |STRUCTURE|ETF Type, backing codes, synthetic types, ucits compliance, legal structures, and more.| |TAX|Tax Types, distribution takes, K1 Flags, and more.|  (optional)</param>
        /// <returns>EtfReferenceDataResponse</returns>
        public EtfReferenceDataResponse GetEtfReferenceData(List<string> ids, List<string> metrics = default(List<string>), List<Category> categories = default(List<Category>))
        {
            FactSet.SDK.FactSetETF.Client.ApiResponse<EtfReferenceDataResponse> localVarResponse = GetEtfReferenceDataWithHttpInfo(ids, metrics, categories);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Return reference data for an ETF. Returns reference data items for Exchange Traded Funds. 
        /// </summary>
        /// <exception cref="FactSet.SDK.FactSetETF.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">The list of ETF identifiers. Accepted identifer types include FactSet Permanent Ids, Tickers, CUSIP, SEDOL, ISIN. &lt;p&gt;***ids limit** &#x3D;  3000 per request*&lt;/p&gt; *&lt;p&gt;Make note, GET Method URL request lines are also limited to a total length of 8192 bytes (8KB). In cases where the service allows for thousands of ids, which may lead to exceeding this request line limit of 8KB, its advised for any requests with large request lines to be requested through the respective \&quot;POST\&quot; method.&lt;/p&gt;* </param>
        /// <param name="metrics">List of individdual data items for Exchange Traded Funds. By default only the fsymId and requestId are returned. To fetch a list of all available data items, use the **_/metrics** endpoint.  (optional)</param>
        /// <param name="categories">Groupings of &#x60;metrics&#x60; data items. Supply a list of categories below to return collections of data items in response. |category|description| |- --|- --| |BENCHMARK_DETAILS|Details surrounding the underlying Benchmark Id and Segment Banchmark| |CLASSIFICATION|FactSet Fund Classification Codes and Names, across Asset Class, Broad  Geography, Fund Categories, Focus, Niche, and more.| |COSTS_FEES|Expenses and Fees such as capital gains, expense ratio, management fees, and more.| |COUNTERPARTY|Credit and Swap Counterparty details| |CREATE_REDEEM|Creation and Redemption Sizes| |DESCRIPTIVE|General Descriptive information such as name, objectives, issuer details, launch dates, website, and more.| |DISTRIBUTIONS|Dividend Dates, Dividend Treatmetns, Min/Max Cap Gains| |DOCUMENTATION|Details surrounding reporting information.| |GEARING|Leverage factors, inverse flags, and more.| |HEDGE|Hedging Information| |RISK|CIFSC Risk Ratings| |SERVICE_PROVIDERS|Distributors, issuers, and Advisor details| |STATUS|Actively Managed Flags| |STRATEGY|Segment Codes, selection criteria, strategy codes, weighting schemes, and lending details.| |STRUCTURE|ETF Type, backing codes, synthetic types, ucits compliance, legal structures, and more.| |TAX|Tax Types, distribution takes, K1 Flags, and more.|  (optional)</param>
        /// <returns>ApiResponse of EtfReferenceDataResponse</returns>
        public FactSet.SDK.FactSetETF.Client.ApiResponse<EtfReferenceDataResponse> GetEtfReferenceDataWithHttpInfo(List<string> ids, List<string> metrics = default(List<string>), List<Category> categories = default(List<Category>))
        {
            // verify the required parameter 'ids' is set
            if (ids == null)
                throw new FactSet.SDK.FactSetETF.Client.ApiException(400, "Missing required parameter 'ids' when calling ReferenceApi->GetEtfReferenceData");

            FactSet.SDK.FactSetETF.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.FactSetETF.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.FactSetETF.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = FactSet.SDK.FactSetETF.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.FactSetETF.Client.ClientUtils.ParameterToMultiMap("csv", "ids", ids));
            if (metrics != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.FactSetETF.Client.ClientUtils.ParameterToMultiMap("csv", "metrics", metrics));
            }
            if (categories != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.FactSetETF.Client.ClientUtils.ParameterToMultiMap("csv", "categories", categories));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.FactSetETF.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<EtfReferenceDataResponse>("/factset-etf/v1/reference", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetEtfReferenceData", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Return reference data for an ETF. Returns reference data items for Exchange Traded Funds. 
        /// </summary>
        /// <exception cref="FactSet.SDK.FactSetETF.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">The list of ETF identifiers. Accepted identifer types include FactSet Permanent Ids, Tickers, CUSIP, SEDOL, ISIN. &lt;p&gt;***ids limit** &#x3D;  3000 per request*&lt;/p&gt; *&lt;p&gt;Make note, GET Method URL request lines are also limited to a total length of 8192 bytes (8KB). In cases where the service allows for thousands of ids, which may lead to exceeding this request line limit of 8KB, its advised for any requests with large request lines to be requested through the respective \&quot;POST\&quot; method.&lt;/p&gt;* </param>
        /// <param name="metrics">List of individdual data items for Exchange Traded Funds. By default only the fsymId and requestId are returned. To fetch a list of all available data items, use the **_/metrics** endpoint.  (optional)</param>
        /// <param name="categories">Groupings of &#x60;metrics&#x60; data items. Supply a list of categories below to return collections of data items in response. |category|description| |- --|- --| |BENCHMARK_DETAILS|Details surrounding the underlying Benchmark Id and Segment Banchmark| |CLASSIFICATION|FactSet Fund Classification Codes and Names, across Asset Class, Broad  Geography, Fund Categories, Focus, Niche, and more.| |COSTS_FEES|Expenses and Fees such as capital gains, expense ratio, management fees, and more.| |COUNTERPARTY|Credit and Swap Counterparty details| |CREATE_REDEEM|Creation and Redemption Sizes| |DESCRIPTIVE|General Descriptive information such as name, objectives, issuer details, launch dates, website, and more.| |DISTRIBUTIONS|Dividend Dates, Dividend Treatmetns, Min/Max Cap Gains| |DOCUMENTATION|Details surrounding reporting information.| |GEARING|Leverage factors, inverse flags, and more.| |HEDGE|Hedging Information| |RISK|CIFSC Risk Ratings| |SERVICE_PROVIDERS|Distributors, issuers, and Advisor details| |STATUS|Actively Managed Flags| |STRATEGY|Segment Codes, selection criteria, strategy codes, weighting schemes, and lending details.| |STRUCTURE|ETF Type, backing codes, synthetic types, ucits compliance, legal structures, and more.| |TAX|Tax Types, distribution takes, K1 Flags, and more.|  (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EtfReferenceDataResponse</returns>
        public async System.Threading.Tasks.Task<EtfReferenceDataResponse> GetEtfReferenceDataAsync(List<string> ids, List<string> metrics = default(List<string>), List<Category> categories = default(List<Category>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            FactSet.SDK.FactSetETF.Client.ApiResponse<EtfReferenceDataResponse> localVarResponse = await GetEtfReferenceDataWithHttpInfoAsync(ids, metrics, categories, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Return reference data for an ETF. Returns reference data items for Exchange Traded Funds. 
        /// </summary>
        /// <exception cref="FactSet.SDK.FactSetETF.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">The list of ETF identifiers. Accepted identifer types include FactSet Permanent Ids, Tickers, CUSIP, SEDOL, ISIN. &lt;p&gt;***ids limit** &#x3D;  3000 per request*&lt;/p&gt; *&lt;p&gt;Make note, GET Method URL request lines are also limited to a total length of 8192 bytes (8KB). In cases where the service allows for thousands of ids, which may lead to exceeding this request line limit of 8KB, its advised for any requests with large request lines to be requested through the respective \&quot;POST\&quot; method.&lt;/p&gt;* </param>
        /// <param name="metrics">List of individdual data items for Exchange Traded Funds. By default only the fsymId and requestId are returned. To fetch a list of all available data items, use the **_/metrics** endpoint.  (optional)</param>
        /// <param name="categories">Groupings of &#x60;metrics&#x60; data items. Supply a list of categories below to return collections of data items in response. |category|description| |- --|- --| |BENCHMARK_DETAILS|Details surrounding the underlying Benchmark Id and Segment Banchmark| |CLASSIFICATION|FactSet Fund Classification Codes and Names, across Asset Class, Broad  Geography, Fund Categories, Focus, Niche, and more.| |COSTS_FEES|Expenses and Fees such as capital gains, expense ratio, management fees, and more.| |COUNTERPARTY|Credit and Swap Counterparty details| |CREATE_REDEEM|Creation and Redemption Sizes| |DESCRIPTIVE|General Descriptive information such as name, objectives, issuer details, launch dates, website, and more.| |DISTRIBUTIONS|Dividend Dates, Dividend Treatmetns, Min/Max Cap Gains| |DOCUMENTATION|Details surrounding reporting information.| |GEARING|Leverage factors, inverse flags, and more.| |HEDGE|Hedging Information| |RISK|CIFSC Risk Ratings| |SERVICE_PROVIDERS|Distributors, issuers, and Advisor details| |STATUS|Actively Managed Flags| |STRATEGY|Segment Codes, selection criteria, strategy codes, weighting schemes, and lending details.| |STRUCTURE|ETF Type, backing codes, synthetic types, ucits compliance, legal structures, and more.| |TAX|Tax Types, distribution takes, K1 Flags, and more.|  (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EtfReferenceDataResponse)</returns>
        public async System.Threading.Tasks.Task<FactSet.SDK.FactSetETF.Client.ApiResponse<EtfReferenceDataResponse>> GetEtfReferenceDataWithHttpInfoAsync(List<string> ids, List<string> metrics = default(List<string>), List<Category> categories = default(List<Category>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'ids' is set
            if (ids == null)
                throw new FactSet.SDK.FactSetETF.Client.ApiException(400, "Missing required parameter 'ids' when calling ReferenceApi->GetEtfReferenceData");


            FactSet.SDK.FactSetETF.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.FactSetETF.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = FactSet.SDK.FactSetETF.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = FactSet.SDK.FactSetETF.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.FactSetETF.Client.ClientUtils.ParameterToMultiMap("csv", "ids", ids));
            if (metrics != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.FactSetETF.Client.ClientUtils.ParameterToMultiMap("csv", "metrics", metrics));
            }
            if (categories != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.FactSetETF.Client.ClientUtils.ParameterToMultiMap("csv", "categories", categories));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.FactSetETF.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<EtfReferenceDataResponse>("/factset-etf/v1/reference", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetEtfReferenceData", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Fetch Reference Data for a large list of ETF securities. Returns reference data items for a list of Exchange Traded Funds. 
        /// </summary>
        /// <exception cref="FactSet.SDK.FactSetETF.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="etfReferenceDataRequest">Request object for Exchange Traded Funds</param>
        /// <returns>EtfReferenceDataResponse</returns>
        public EtfReferenceDataResponse GetEtfReferenceDataForList(EtfReferenceDataRequest etfReferenceDataRequest)
        {
            FactSet.SDK.FactSetETF.Client.ApiResponse<EtfReferenceDataResponse> localVarResponse = GetEtfReferenceDataForListWithHttpInfo(etfReferenceDataRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Fetch Reference Data for a large list of ETF securities. Returns reference data items for a list of Exchange Traded Funds. 
        /// </summary>
        /// <exception cref="FactSet.SDK.FactSetETF.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="etfReferenceDataRequest">Request object for Exchange Traded Funds</param>
        /// <returns>ApiResponse of EtfReferenceDataResponse</returns>
        public FactSet.SDK.FactSetETF.Client.ApiResponse<EtfReferenceDataResponse> GetEtfReferenceDataForListWithHttpInfo(EtfReferenceDataRequest etfReferenceDataRequest)
        {
            // verify the required parameter 'etfReferenceDataRequest' is set
            if (etfReferenceDataRequest == null)
                throw new FactSet.SDK.FactSetETF.Client.ApiException(400, "Missing required parameter 'etfReferenceDataRequest' when calling ReferenceApi->GetEtfReferenceDataForList");

            FactSet.SDK.FactSetETF.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.FactSetETF.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.FactSetETF.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = FactSet.SDK.FactSetETF.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = etfReferenceDataRequest;

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.FactSetETF.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<EtfReferenceDataResponse>("/factset-etf/v1/reference", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetEtfReferenceDataForList", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Fetch Reference Data for a large list of ETF securities. Returns reference data items for a list of Exchange Traded Funds. 
        /// </summary>
        /// <exception cref="FactSet.SDK.FactSetETF.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="etfReferenceDataRequest">Request object for Exchange Traded Funds</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EtfReferenceDataResponse</returns>
        public async System.Threading.Tasks.Task<EtfReferenceDataResponse> GetEtfReferenceDataForListAsync(EtfReferenceDataRequest etfReferenceDataRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            FactSet.SDK.FactSetETF.Client.ApiResponse<EtfReferenceDataResponse> localVarResponse = await GetEtfReferenceDataForListWithHttpInfoAsync(etfReferenceDataRequest, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Fetch Reference Data for a large list of ETF securities. Returns reference data items for a list of Exchange Traded Funds. 
        /// </summary>
        /// <exception cref="FactSet.SDK.FactSetETF.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="etfReferenceDataRequest">Request object for Exchange Traded Funds</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EtfReferenceDataResponse)</returns>
        public async System.Threading.Tasks.Task<FactSet.SDK.FactSetETF.Client.ApiResponse<EtfReferenceDataResponse>> GetEtfReferenceDataForListWithHttpInfoAsync(EtfReferenceDataRequest etfReferenceDataRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'etfReferenceDataRequest' is set
            if (etfReferenceDataRequest == null)
                throw new FactSet.SDK.FactSetETF.Client.ApiException(400, "Missing required parameter 'etfReferenceDataRequest' when calling ReferenceApi->GetEtfReferenceDataForList");


            FactSet.SDK.FactSetETF.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.FactSetETF.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = FactSet.SDK.FactSetETF.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = FactSet.SDK.FactSetETF.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = etfReferenceDataRequest;

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.FactSetETF.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<EtfReferenceDataResponse>("/factset-etf/v1/reference", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetEtfReferenceDataForList", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
