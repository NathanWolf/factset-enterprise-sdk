/*
 * Quotes API For Digital Portals
 *
 * The Quotes API combines endpoints for retrieving security end-of-day, delayed, and realtime prices with performance key figures and basic reference data on the security and market level.  The API supports over 20 different price types for each quote and comes with basic search endpoints based on security identifiers and instrument names. Market coverage is included in the *Sample Use Cases* section below.  The Digital Portal use case is focused on high-performance applications that are  * serving millions of end-users, * accessible by client browsers via the internet, * supporting subscriptions for streamed updates out-of-the-box, * typically combining a wide variety of *for Digital Portals*-APIs into a highly use-case specific solution for customers, * integrated into complex infrastructures such as existing frontend frameworks, authentication services.  All APIs labelled *for Digital Portals* have been designed for direct use by client web applications and feature extreme low latency: The average response time across all endpoints is 30 ms whereas 99% of all requests are answered in close to under 300ms.  See the [Time Series API for Digital Portals](https://developer.factset.com/api-catalog/time-series-api-digital-portals) for direct access to price histories, and the [News API for Digital Portals](https://developer.factset.com/api-catalog/news-api-digital-portals) for searching and fetching related news. 
 *
 * The version of the OpenAPI document: 2
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = FactSet.SDK.QuotesAPIforDigitalPortals.Client.OpenAPIDateConverter;

namespace FactSet.SDK.QuotesAPIforDigitalPortals.Model
{
    /// <summary>
    /// MiFID cost is the disclosure of information on costs and charges related to an investment product and on the investment or ancillary service provided to a client. MiFID distinguishes between ex-ante and ex-post disclosure of costs.
    /// </summary>
    [DataContract(Name = "inline_response_200_62_data_costsAndCharges")]
    public partial class InlineResponse20062DataCostsAndCharges : IEquatable<InlineResponse20062DataCostsAndCharges>, IValidatableObject
    {
        /// <summary>
        /// Quotation type originally used for providing most of the cost items of the investment product.
        /// </summary>
        /// <value>Quotation type originally used for providing most of the cost items of the investment product.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum QuotationEnum
        {
            /// <summary>
            /// Enum Currency for value: currency
            /// </summary>
            [EnumMember(Value = "currency")]
            Currency = 1,

            /// <summary>
            /// Enum Percent for value: percent
            /// </summary>
            [EnumMember(Value = "percent")]
            Percent = 2

        }


        /// <summary>
        /// Quotation type originally used for providing most of the cost items of the investment product.
        /// </summary>
        /// <value>Quotation type originally used for providing most of the cost items of the investment product.</value>
        [DataMember(Name = "quotation", EmitDefaultValue = true)]
        public QuotationEnum? Quotation { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="InlineResponse20062DataCostsAndCharges" /> class.
        /// </summary>
        /// <param name="quotation">Quotation type originally used for providing most of the cost items of the investment product..</param>
        /// <param name="exAnte">exAnte.</param>
        /// <param name="exPost">exPost.</param>
        public InlineResponse20062DataCostsAndCharges(QuotationEnum? quotation = default(QuotationEnum?), InlineResponse20062DataCostsAndChargesExAnte exAnte = default(InlineResponse20062DataCostsAndChargesExAnte), InlineResponse20062DataCostsAndChargesExPost exPost = default(InlineResponse20062DataCostsAndChargesExPost))
        {
            this.Quotation = quotation;
            this.ExAnte = exAnte;
            this.ExPost = exPost;
        }

        /// <summary>
        /// Gets or Sets ExAnte
        /// </summary>
        [DataMember(Name = "exAnte", EmitDefaultValue = false)]
        public InlineResponse20062DataCostsAndChargesExAnte ExAnte { get; set; }

        /// <summary>
        /// Gets or Sets ExPost
        /// </summary>
        [DataMember(Name = "exPost", EmitDefaultValue = false)]
        public InlineResponse20062DataCostsAndChargesExPost ExPost { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class InlineResponse20062DataCostsAndCharges {\n");
            sb.Append("  Quotation: ").Append(Quotation).Append("\n");
            sb.Append("  ExAnte: ").Append(ExAnte).Append("\n");
            sb.Append("  ExPost: ").Append(ExPost).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as InlineResponse20062DataCostsAndCharges);
        }

        /// <summary>
        /// Returns true if InlineResponse20062DataCostsAndCharges instances are equal
        /// </summary>
        /// <param name="input">Instance of InlineResponse20062DataCostsAndCharges to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(InlineResponse20062DataCostsAndCharges input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Quotation == input.Quotation ||
                    this.Quotation.Equals(input.Quotation)
                ) && 
                (
                    this.ExAnte == input.ExAnte ||
                    (this.ExAnte != null &&
                    this.ExAnte.Equals(input.ExAnte))
                ) && 
                (
                    this.ExPost == input.ExPost ||
                    (this.ExPost != null &&
                    this.ExPost.Equals(input.ExPost))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.Quotation.GetHashCode();
                if (this.ExAnte != null)
                {
                    hashCode = (hashCode * 59) + this.ExAnte.GetHashCode();
                }
                if (this.ExPost != null)
                {
                    hashCode = (hashCode * 59) + this.ExPost.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
