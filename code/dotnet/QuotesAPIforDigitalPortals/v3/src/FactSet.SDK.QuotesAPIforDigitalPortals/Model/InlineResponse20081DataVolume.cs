/*
 * Quotes API For Digital Portals
 *
 * The Quotes API combines endpoints for retrieving security end-of-day, delayed, and realtime prices with performance key figures and basic reference data on the security and market level.  The API supports over 20 different price types for each quote and comes with basic search endpoints based on security identifiers and instrument names. Market coverage is included in the *Sample Use Cases* section below.  The Digital Portal use case is focused on high-performance applications that are  * serving millions of end-users, * accessible by client browsers via the internet, * supporting subscriptions for streamed updates out-of-the-box, * typically combining a wide variety of *for Digital Portals*-APIs into a highly use-case specific solution for customers, * integrated into complex infrastructures such as existing frontend frameworks, authentication services.  All APIs labelled *for Digital Portals* have been designed for direct use by client web applications and feature extreme low latency: The average response time across all endpoints is 30 ms whereas 99% of all requests are answered in close to under 300ms.  See the [Time Series API for Digital Portals](https://developer.factset.com/api-catalog/time-series-api-digital-portals) for direct access to price histories, and the [News API for Digital Portals](https://developer.factset.com/api-catalog/news-api-digital-portals) for searching and fetching related news. 
 *
 * The version of the OpenAPI document: 2
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = FactSet.SDK.QuotesAPIforDigitalPortals.Client.OpenAPIDateConverter;

namespace FactSet.SDK.QuotesAPIforDigitalPortals.Model
{
    /// <summary>
    /// Average trading volume.
    /// </summary>
    [DataContract(Name = "inline_response_200_81_data_volume")]
    public partial class InlineResponse20081DataVolume : IEquatable<InlineResponse20081DataVolume>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="InlineResponse20081DataVolume" /> class.
        /// </summary>
        /// <param name="days5">Five trading days..</param>
        /// <param name="days30">30 trading days..</param>
        /// <param name="days50">50 trading days..</param>
        /// <param name="days100">100 trading days..</param>
        /// <param name="days200">200 trading days..</param>
        /// <param name="days250">250 trading days..</param>
        public InlineResponse20081DataVolume(decimal? days5 = default(decimal?), decimal? days30 = default(decimal?), decimal? days50 = default(decimal?), decimal? days100 = default(decimal?), decimal? days200 = default(decimal?), decimal? days250 = default(decimal?))
        {
            this.Days5 = days5;
            this.Days30 = days30;
            this.Days50 = days50;
            this.Days100 = days100;
            this.Days200 = days200;
            this.Days250 = days250;
        }

        /// <summary>
        /// Five trading days.
        /// </summary>
        /// <value>Five trading days.</value>
        [DataMember(Name = "days5", EmitDefaultValue = true)]
        public decimal? Days5 { get; set; }

        /// <summary>
        /// 30 trading days.
        /// </summary>
        /// <value>30 trading days.</value>
        [DataMember(Name = "days30", EmitDefaultValue = true)]
        public decimal? Days30 { get; set; }

        /// <summary>
        /// 50 trading days.
        /// </summary>
        /// <value>50 trading days.</value>
        [DataMember(Name = "days50", EmitDefaultValue = true)]
        public decimal? Days50 { get; set; }

        /// <summary>
        /// 100 trading days.
        /// </summary>
        /// <value>100 trading days.</value>
        [DataMember(Name = "days100", EmitDefaultValue = true)]
        public decimal? Days100 { get; set; }

        /// <summary>
        /// 200 trading days.
        /// </summary>
        /// <value>200 trading days.</value>
        [DataMember(Name = "days200", EmitDefaultValue = true)]
        public decimal? Days200 { get; set; }

        /// <summary>
        /// 250 trading days.
        /// </summary>
        /// <value>250 trading days.</value>
        [DataMember(Name = "days250", EmitDefaultValue = true)]
        public decimal? Days250 { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class InlineResponse20081DataVolume {\n");
            sb.Append("  Days5: ").Append(Days5).Append("\n");
            sb.Append("  Days30: ").Append(Days30).Append("\n");
            sb.Append("  Days50: ").Append(Days50).Append("\n");
            sb.Append("  Days100: ").Append(Days100).Append("\n");
            sb.Append("  Days200: ").Append(Days200).Append("\n");
            sb.Append("  Days250: ").Append(Days250).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as InlineResponse20081DataVolume);
        }

        /// <summary>
        /// Returns true if InlineResponse20081DataVolume instances are equal
        /// </summary>
        /// <param name="input">Instance of InlineResponse20081DataVolume to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(InlineResponse20081DataVolume input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Days5 == input.Days5 ||
                    (this.Days5 != null &&
                    this.Days5.Equals(input.Days5))
                ) && 
                (
                    this.Days30 == input.Days30 ||
                    (this.Days30 != null &&
                    this.Days30.Equals(input.Days30))
                ) && 
                (
                    this.Days50 == input.Days50 ||
                    (this.Days50 != null &&
                    this.Days50.Equals(input.Days50))
                ) && 
                (
                    this.Days100 == input.Days100 ||
                    (this.Days100 != null &&
                    this.Days100.Equals(input.Days100))
                ) && 
                (
                    this.Days200 == input.Days200 ||
                    (this.Days200 != null &&
                    this.Days200.Equals(input.Days200))
                ) && 
                (
                    this.Days250 == input.Days250 ||
                    (this.Days250 != null &&
                    this.Days250.Equals(input.Days250))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Days5 != null)
                {
                    hashCode = (hashCode * 59) + this.Days5.GetHashCode();
                }
                if (this.Days30 != null)
                {
                    hashCode = (hashCode * 59) + this.Days30.GetHashCode();
                }
                if (this.Days50 != null)
                {
                    hashCode = (hashCode * 59) + this.Days50.GetHashCode();
                }
                if (this.Days100 != null)
                {
                    hashCode = (hashCode * 59) + this.Days100.GetHashCode();
                }
                if (this.Days200 != null)
                {
                    hashCode = (hashCode * 59) + this.Days200.GetHashCode();
                }
                if (this.Days250 != null)
                {
                    hashCode = (hashCode * 59) + this.Days250.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
