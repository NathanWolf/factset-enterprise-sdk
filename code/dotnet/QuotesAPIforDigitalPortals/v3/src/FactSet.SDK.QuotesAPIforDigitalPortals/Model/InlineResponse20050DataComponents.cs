/*
 * Quotes API For Digital Portals
 *
 * The quotes API combines endpoints for retrieving security end-of-day, delayed, and realtime prices with performance key figures and basic reference data on the security and market level.  The API supports over 20 different price types for each quote and comes with basic search endpoints based on security identifiers and instrument names. Market coverage is included in the *Sample Use Cases* section below.  The Digital Portal use case is focused on high-performance applications that are  * serving millions of end-users, * accessible by client browsers via the internet, * supporting subscriptions for streamed updates out-of-the-box, * typically combining a wide variety of *for Digital Portals*-APIs into a highly use-case specific solution for customers, * integrated into complex infrastructures such as existing frontend frameworks, authentication services.  All APIs labelled *for Digital Portals* have been designed for direct use by client web applications and feature extreme low latency: The average response time across all endpoints is 30 ms whereas 99% of all requests are answered in close to under 300ms.  See the Time Series API for Digital Portals for direct access to price histories, and the News API for Digital Portals for searching and fetching related news.
 *
 * The version of the OpenAPI document: 2
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = FactSet.SDK.QuotesAPIforDigitalPortals.Client.OpenAPIDateConverter;

namespace FactSet.SDK.QuotesAPIforDigitalPortals.Model
{
    /// <summary>
    /// InlineResponse20050DataComponents
    /// </summary>
    [DataContract(Name = "inline_response_200_50_data_components")]
    public partial class InlineResponse20050DataComponents : IEquatable<InlineResponse20050DataComponents>, IValidatableObject
    {
        /// <summary>
        /// Indicates whether the level of the composite instrument rises or falls with a rising level of the component. The level of a basket always rises with rising level of its components and vice versa; therefore, for those the attribute is not set. The level of an alpha structure or a futures spread is calculated by subtracting the performance (price) of the short component from that of the long one. The level of a factor index rises with rising level of its component if the latter is long, and falls if it is short. For the type of composite instrument, see attribute  &#x60;typeComposite&#x60;.
        /// </summary>
        /// <value>Indicates whether the level of the composite instrument rises or falls with a rising level of the component. The level of a basket always rises with rising level of its components and vice versa; therefore, for those the attribute is not set. The level of an alpha structure or a futures spread is calculated by subtracting the performance (price) of the short component from that of the long one. The level of a factor index rises with rising level of its component if the latter is long, and falls if it is short. For the type of composite instrument, see attribute  &#x60;typeComposite&#x60;.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ParticipationEnum
        {
            /// <summary>
            /// Enum Long for value: long
            /// </summary>
            [EnumMember(Value = "long")]
            Long = 1,

            /// <summary>
            /// Enum Short for value: short
            /// </summary>
            [EnumMember(Value = "short")]
            Short = 2

        }


        /// <summary>
        /// Indicates whether the level of the composite instrument rises or falls with a rising level of the component. The level of a basket always rises with rising level of its components and vice versa; therefore, for those the attribute is not set. The level of an alpha structure or a futures spread is calculated by subtracting the performance (price) of the short component from that of the long one. The level of a factor index rises with rising level of its component if the latter is long, and falls if it is short. For the type of composite instrument, see attribute  &#x60;typeComposite&#x60;.
        /// </summary>
        /// <value>Indicates whether the level of the composite instrument rises or falls with a rising level of the component. The level of a basket always rises with rising level of its components and vice versa; therefore, for those the attribute is not set. The level of an alpha structure or a futures spread is calculated by subtracting the performance (price) of the short component from that of the long one. The level of a factor index rises with rising level of its component if the latter is long, and falls if it is short. For the type of composite instrument, see attribute  &#x60;typeComposite&#x60;.</value>
        [DataMember(Name = "participation", EmitDefaultValue = false)]
        public ParticipationEnum? Participation { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="InlineResponse20050DataComponents" /> class.
        /// </summary>
        /// <param name="name">Name of the component, provided also if there is no notation for the component..</param>
        /// <param name="valueUnit">valueUnit.</param>
        /// <param name="notation">notation.</param>
        /// <param name="participation">Indicates whether the level of the composite instrument rises or falls with a rising level of the component. The level of a basket always rises with rising level of its components and vice versa; therefore, for those the attribute is not set. The level of an alpha structure or a futures spread is calculated by subtracting the performance (price) of the short component from that of the long one. The level of a factor index rises with rising level of its component if the latter is long, and falls if it is short. For the type of composite instrument, see attribute  &#x60;typeComposite&#x60;..</param>
        /// <param name="numberShares">Absolute number of shares of the component contained in the composite instrument.  The absolute number of shares can be subject to change due to corporate actions or active management of the composite instrument (see attribute &#x60;activeManagement&#x60;). If the component is an index, the number of shares is a factor which applies to the level of the index..</param>
        /// <param name="initialWeight">Weighting of the component, valid only at initial fixing   (see attribute &#x60;initialFixing&#x60; in endpoint &#x60;/securitizedDerivative/get&#x60;). .</param>
        /// <param name="referenceLevel">Level of the component on the issue date of the derivative product.  For the value unit, see attribute &#x60;valueUnit&#x60;..</param>
        /// <param name="constantLeverage">For a leveraged component, e.g. a component of a factor index, day-to-day leverage factor of the component&#39;s performance..</param>
        public InlineResponse20050DataComponents(string name = default(string), InlineResponse20050DataValueUnit valueUnit = default(InlineResponse20050DataValueUnit), InlineResponse20050DataNotation notation = default(InlineResponse20050DataNotation), ParticipationEnum? participation = default(ParticipationEnum?), decimal numberShares = default(decimal), decimal initialWeight = default(decimal), decimal referenceLevel = default(decimal), decimal constantLeverage = default(decimal))
        {
            this.Name = name;
            this.ValueUnit = valueUnit;
            this.Notation = notation;
            this.Participation = participation;
            this.NumberShares = numberShares;
            this.InitialWeight = initialWeight;
            this.ReferenceLevel = referenceLevel;
            this.ConstantLeverage = constantLeverage;
        }

        /// <summary>
        /// Name of the component, provided also if there is no notation for the component.
        /// </summary>
        /// <value>Name of the component, provided also if there is no notation for the component.</value>
        [DataMember(Name = "name", EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets ValueUnit
        /// </summary>
        [DataMember(Name = "valueUnit", EmitDefaultValue = false)]
        public InlineResponse20050DataValueUnit ValueUnit { get; set; }

        /// <summary>
        /// Gets or Sets Notation
        /// </summary>
        [DataMember(Name = "notation", EmitDefaultValue = false)]
        public InlineResponse20050DataNotation Notation { get; set; }

        /// <summary>
        /// Absolute number of shares of the component contained in the composite instrument.  The absolute number of shares can be subject to change due to corporate actions or active management of the composite instrument (see attribute &#x60;activeManagement&#x60;). If the component is an index, the number of shares is a factor which applies to the level of the index.
        /// </summary>
        /// <value>Absolute number of shares of the component contained in the composite instrument.  The absolute number of shares can be subject to change due to corporate actions or active management of the composite instrument (see attribute &#x60;activeManagement&#x60;). If the component is an index, the number of shares is a factor which applies to the level of the index.</value>
        [DataMember(Name = "numberShares", EmitDefaultValue = false)]
        public decimal NumberShares { get; set; }

        /// <summary>
        /// Weighting of the component, valid only at initial fixing   (see attribute &#x60;initialFixing&#x60; in endpoint &#x60;/securitizedDerivative/get&#x60;). 
        /// </summary>
        /// <value>Weighting of the component, valid only at initial fixing   (see attribute &#x60;initialFixing&#x60; in endpoint &#x60;/securitizedDerivative/get&#x60;). </value>
        [DataMember(Name = "initialWeight", EmitDefaultValue = false)]
        public decimal InitialWeight { get; set; }

        /// <summary>
        /// Level of the component on the issue date of the derivative product.  For the value unit, see attribute &#x60;valueUnit&#x60;.
        /// </summary>
        /// <value>Level of the component on the issue date of the derivative product.  For the value unit, see attribute &#x60;valueUnit&#x60;.</value>
        [DataMember(Name = "referenceLevel", EmitDefaultValue = false)]
        public decimal ReferenceLevel { get; set; }

        /// <summary>
        /// For a leveraged component, e.g. a component of a factor index, day-to-day leverage factor of the component&#39;s performance.
        /// </summary>
        /// <value>For a leveraged component, e.g. a component of a factor index, day-to-day leverage factor of the component&#39;s performance.</value>
        [DataMember(Name = "constantLeverage", EmitDefaultValue = false)]
        public decimal ConstantLeverage { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class InlineResponse20050DataComponents {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  ValueUnit: ").Append(ValueUnit).Append("\n");
            sb.Append("  Notation: ").Append(Notation).Append("\n");
            sb.Append("  Participation: ").Append(Participation).Append("\n");
            sb.Append("  NumberShares: ").Append(NumberShares).Append("\n");
            sb.Append("  InitialWeight: ").Append(InitialWeight).Append("\n");
            sb.Append("  ReferenceLevel: ").Append(ReferenceLevel).Append("\n");
            sb.Append("  ConstantLeverage: ").Append(ConstantLeverage).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as InlineResponse20050DataComponents);
        }

        /// <summary>
        /// Returns true if InlineResponse20050DataComponents instances are equal
        /// </summary>
        /// <param name="input">Instance of InlineResponse20050DataComponents to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(InlineResponse20050DataComponents input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.ValueUnit == input.ValueUnit ||
                    (this.ValueUnit != null &&
                    this.ValueUnit.Equals(input.ValueUnit))
                ) && 
                (
                    this.Notation == input.Notation ||
                    (this.Notation != null &&
                    this.Notation.Equals(input.Notation))
                ) && 
                (
                    this.Participation == input.Participation ||
                    this.Participation.Equals(input.Participation)
                ) && 
                (
                    this.NumberShares == input.NumberShares ||
                    this.NumberShares.Equals(input.NumberShares)
                ) && 
                (
                    this.InitialWeight == input.InitialWeight ||
                    this.InitialWeight.Equals(input.InitialWeight)
                ) && 
                (
                    this.ReferenceLevel == input.ReferenceLevel ||
                    this.ReferenceLevel.Equals(input.ReferenceLevel)
                ) && 
                (
                    this.ConstantLeverage == input.ConstantLeverage ||
                    this.ConstantLeverage.Equals(input.ConstantLeverage)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                if (this.ValueUnit != null)
                {
                    hashCode = (hashCode * 59) + this.ValueUnit.GetHashCode();
                }
                if (this.Notation != null)
                {
                    hashCode = (hashCode * 59) + this.Notation.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Participation.GetHashCode();
                hashCode = (hashCode * 59) + this.NumberShares.GetHashCode();
                hashCode = (hashCode * 59) + this.InitialWeight.GetHashCode();
                hashCode = (hashCode * 59) + this.ReferenceLevel.GetHashCode();
                hashCode = (hashCode * 59) + this.ConstantLeverage.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
