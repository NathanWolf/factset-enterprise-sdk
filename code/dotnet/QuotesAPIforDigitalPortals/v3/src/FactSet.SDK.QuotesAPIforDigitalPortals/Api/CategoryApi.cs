/*
 * Quotes API For Digital Portals
 *
 * The Quotes API combines endpoints for retrieving security end-of-day, delayed, and realtime prices with performance key figures and basic reference data on the security and market level.  The API supports over 20 different price types for each quote and comes with basic search endpoints based on security identifiers and instrument names. Market coverage is included in the *Sample Use Cases* section below.  The Digital Portal use case is focused on high-performance applications that are  * serving millions of end-users, * accessible by client browsers via the internet, * supporting subscriptions for streamed updates out-of-the-box, * typically combining a wide variety of *for Digital Portals*-APIs into a highly use-case specific solution for customers, * integrated into complex infrastructures such as existing frontend frameworks, authentication services.  All APIs labelled *for Digital Portals* have been designed for direct use by client web applications and feature extreme low latency: The average response time across all endpoints is 30 ms whereas 99% of all requests are answered in close to under 300ms.  See the [Time Series API for Digital Portals](https://developer.factset.com/api-catalog/time-series-api-digital-portals) for direct access to price histories, and the [News API for Digital Portals](https://developer.factset.com/api-catalog/news-api-digital-portals) for searching and fetching related news. 
 *
 * The version of the OpenAPI document: 2
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using FactSet.SDK.QuotesAPIforDigitalPortals.Client;
using FactSet.SDK.QuotesAPIforDigitalPortals.Model;
using FactSet.SDK.Utils.Authentication;

namespace FactSet.SDK.QuotesAPIforDigitalPortals.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ICategoryApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// List of entitled category datasets.
        /// </summary>
        /// <remarks>
        /// List of entitled category datasets.
        /// </remarks>
        /// <exception cref="FactSet.SDK.QuotesAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="language"> (optional)</param>
        /// <returns>InlineResponse20035</returns>
        InlineResponse20035 GetCategoryDatasetList(List<string> attributes = default(List<string>), string language = default(string));

        /// <summary>
        /// List of entitled category datasets.
        /// </summary>
        /// <remarks>
        /// List of entitled category datasets.
        /// </remarks>
        /// <exception cref="FactSet.SDK.QuotesAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="language"> (optional)</param>
        /// <returns>ApiResponse of InlineResponse20035</returns>
        ApiResponse<InlineResponse20035> GetCategoryDatasetListWithHttpInfo(List<string> attributes = default(List<string>), string language = default(string));
        /// <summary>
        /// Details of a category.
        /// </summary>
        /// <remarks>
        /// Details of a category.
        /// </remarks>
        /// <exception cref="FactSet.SDK.QuotesAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="language"> (optional)</param>
        /// <returns>InlineResponse20031</returns>
        InlineResponse20031 GetCategoryGet(decimal id, List<string> attributes = default(List<string>), string language = default(string));

        /// <summary>
        /// Details of a category.
        /// </summary>
        /// <remarks>
        /// Details of a category.
        /// </remarks>
        /// <exception cref="FactSet.SDK.QuotesAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="language"> (optional)</param>
        /// <returns>ApiResponse of InlineResponse20031</returns>
        ApiResponse<InlineResponse20031> GetCategoryGetWithHttpInfo(decimal id, List<string> attributes = default(List<string>), string language = default(string));
        /// <summary>
        /// List of instruments where a specific dataset has assigned a given category.
        /// </summary>
        /// <remarks>
        /// List of instruments where a specific dataset has assigned a given category.
        /// </remarks>
        /// <exception cref="FactSet.SDK.QuotesAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idCategory"></param>
        /// <param name="idCategoryDataset"></param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="paginationOffset">Non-negative number of entries to skip, or 0 (default). (optional, default to 0M)</param>
        /// <param name="paginationLimit">Non-negative maximum number of entries to return. (optional, default to 20M)</param>
        /// <returns>InlineResponse20036</returns>
        InlineResponse20036 GetCategoryInstrumentList(decimal idCategory, decimal idCategoryDataset, List<string> attributes = default(List<string>), decimal? paginationOffset = default(decimal?), decimal? paginationLimit = default(decimal?));

        /// <summary>
        /// List of instruments where a specific dataset has assigned a given category.
        /// </summary>
        /// <remarks>
        /// List of instruments where a specific dataset has assigned a given category.
        /// </remarks>
        /// <exception cref="FactSet.SDK.QuotesAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idCategory"></param>
        /// <param name="idCategoryDataset"></param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="paginationOffset">Non-negative number of entries to skip, or 0 (default). (optional, default to 0M)</param>
        /// <param name="paginationLimit">Non-negative maximum number of entries to return. (optional, default to 20M)</param>
        /// <returns>ApiResponse of InlineResponse20036</returns>
        ApiResponse<InlineResponse20036> GetCategoryInstrumentListWithHttpInfo(decimal idCategory, decimal idCategoryDataset, List<string> attributes = default(List<string>), decimal? paginationOffset = default(decimal?), decimal? paginationLimit = default(decimal?));
        /// <summary>
        /// Details of a category level.
        /// </summary>
        /// <remarks>
        /// Details of a category level.
        /// </remarks>
        /// <exception cref="FactSet.SDK.QuotesAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="language"> (optional)</param>
        /// <returns>InlineResponse20037</returns>
        InlineResponse20037 GetCategoryLevelGet(decimal id, List<string> attributes = default(List<string>), string language = default(string));

        /// <summary>
        /// Details of a category level.
        /// </summary>
        /// <remarks>
        /// Details of a category level.
        /// </remarks>
        /// <exception cref="FactSet.SDK.QuotesAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="language"> (optional)</param>
        /// <returns>ApiResponse of InlineResponse20037</returns>
        ApiResponse<InlineResponse20037> GetCategoryLevelGetWithHttpInfo(decimal id, List<string> attributes = default(List<string>), string language = default(string));
        /// <summary>
        /// List of categories.
        /// </summary>
        /// <remarks>
        /// List of categories.
        /// </remarks>
        /// <exception cref="FactSet.SDK.QuotesAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids"></param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="language"> (optional)</param>
        /// <returns>InlineResponse20032</returns>
        InlineResponse20032 GetCategoryList(List<decimal> ids, List<string> attributes = default(List<string>), string language = default(string));

        /// <summary>
        /// List of categories.
        /// </summary>
        /// <remarks>
        /// List of categories.
        /// </remarks>
        /// <exception cref="FactSet.SDK.QuotesAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids"></param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="language"> (optional)</param>
        /// <returns>ApiResponse of InlineResponse20032</returns>
        ApiResponse<InlineResponse20032> GetCategoryListWithHttpInfo(List<decimal> ids, List<string> attributes = default(List<string>), string language = default(string));
        /// <summary>
        /// List of categories assigned to a category level.
        /// </summary>
        /// <remarks>
        /// List of categories assigned to a category level.
        /// </remarks>
        /// <exception cref="FactSet.SDK.QuotesAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="language"> (optional)</param>
        /// <param name="paginationOffset">Non-negative number of entries to skip, or 0 (default). (optional, default to 0M)</param>
        /// <param name="paginationLimit">Non-negative maximum number of entries to return. (optional, default to 20M)</param>
        /// <returns>InlineResponse20033</returns>
        InlineResponse20033 GetCategoryListByLevel(decimal id, List<string> attributes = default(List<string>), string language = default(string), decimal? paginationOffset = default(decimal?), decimal? paginationLimit = default(decimal?));

        /// <summary>
        /// List of categories assigned to a category level.
        /// </summary>
        /// <remarks>
        /// List of categories assigned to a category level.
        /// </remarks>
        /// <exception cref="FactSet.SDK.QuotesAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="language"> (optional)</param>
        /// <param name="paginationOffset">Non-negative number of entries to skip, or 0 (default). (optional, default to 0M)</param>
        /// <param name="paginationLimit">Non-negative maximum number of entries to return. (optional, default to 20M)</param>
        /// <returns>ApiResponse of InlineResponse20033</returns>
        ApiResponse<InlineResponse20033> GetCategoryListByLevelWithHttpInfo(decimal id, List<string> attributes = default(List<string>), string language = default(string), decimal? paginationOffset = default(decimal?), decimal? paginationLimit = default(decimal?));
        /// <summary>
        /// List of categories assigned to a category system.
        /// </summary>
        /// <remarks>
        /// List of categories assigned to a category system.
        /// </remarks>
        /// <exception cref="FactSet.SDK.QuotesAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="language"> (optional)</param>
        /// <param name="paginationOffset">Non-negative number of entries to skip, or 0 (default). (optional, default to 0M)</param>
        /// <param name="paginationLimit">Non-negative maximum number of entries to return. (optional, default to 20M)</param>
        /// <returns>InlineResponse20034</returns>
        InlineResponse20034 GetCategoryListBySystem(decimal id, List<string> attributes = default(List<string>), string language = default(string), decimal? paginationOffset = default(decimal?), decimal? paginationLimit = default(decimal?));

        /// <summary>
        /// List of categories assigned to a category system.
        /// </summary>
        /// <remarks>
        /// List of categories assigned to a category system.
        /// </remarks>
        /// <exception cref="FactSet.SDK.QuotesAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="language"> (optional)</param>
        /// <param name="paginationOffset">Non-negative number of entries to skip, or 0 (default). (optional, default to 0M)</param>
        /// <param name="paginationLimit">Non-negative maximum number of entries to return. (optional, default to 20M)</param>
        /// <returns>ApiResponse of InlineResponse20034</returns>
        ApiResponse<InlineResponse20034> GetCategoryListBySystemWithHttpInfo(decimal id, List<string> attributes = default(List<string>), string language = default(string), decimal? paginationOffset = default(decimal?), decimal? paginationLimit = default(decimal?));
        /// <summary>
        /// Path from the first level to the level of a specific category.
        /// </summary>
        /// <remarks>
        /// Path from the first level to the level of a specific category.
        /// </remarks>
        /// <exception cref="FactSet.SDK.QuotesAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="language"> (optional)</param>
        /// <returns>InlineResponse20038</returns>
        InlineResponse20038 GetCategoryPathGet(decimal id, List<string> attributes = default(List<string>), string language = default(string));

        /// <summary>
        /// Path from the first level to the level of a specific category.
        /// </summary>
        /// <remarks>
        /// Path from the first level to the level of a specific category.
        /// </remarks>
        /// <exception cref="FactSet.SDK.QuotesAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="language"> (optional)</param>
        /// <returns>ApiResponse of InlineResponse20038</returns>
        ApiResponse<InlineResponse20038> GetCategoryPathGetWithHttpInfo(decimal id, List<string> attributes = default(List<string>), string language = default(string));
        /// <summary>
        /// Details of an entitled category system.
        /// </summary>
        /// <remarks>
        /// Details of an entitled category system.
        /// </remarks>
        /// <exception cref="FactSet.SDK.QuotesAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="language"> (optional)</param>
        /// <returns>InlineResponse20039</returns>
        InlineResponse20039 GetCategorySystemGet(decimal id, List<string> attributes = default(List<string>), string language = default(string));

        /// <summary>
        /// Details of an entitled category system.
        /// </summary>
        /// <remarks>
        /// Details of an entitled category system.
        /// </remarks>
        /// <exception cref="FactSet.SDK.QuotesAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="language"> (optional)</param>
        /// <returns>ApiResponse of InlineResponse20039</returns>
        ApiResponse<InlineResponse20039> GetCategorySystemGetWithHttpInfo(decimal id, List<string> attributes = default(List<string>), string language = default(string));
        /// <summary>
        /// List of entitled category systems.
        /// </summary>
        /// <remarks>
        /// List of entitled category systems.
        /// </remarks>
        /// <exception cref="FactSet.SDK.QuotesAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idType"> (optional)</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="language"> (optional)</param>
        /// <returns>InlineResponse20040</returns>
        InlineResponse20040 GetCategorySystemList(decimal? idType = default(decimal?), List<string> attributes = default(List<string>), string language = default(string));

        /// <summary>
        /// List of entitled category systems.
        /// </summary>
        /// <remarks>
        /// List of entitled category systems.
        /// </remarks>
        /// <exception cref="FactSet.SDK.QuotesAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idType"> (optional)</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="language"> (optional)</param>
        /// <returns>ApiResponse of InlineResponse20040</returns>
        ApiResponse<InlineResponse20040> GetCategorySystemListWithHttpInfo(decimal? idType = default(decimal?), List<string> attributes = default(List<string>), string language = default(string));
        /// <summary>
        /// List of category system types.
        /// </summary>
        /// <remarks>
        /// List of category system types.
        /// </remarks>
        /// <exception cref="FactSet.SDK.QuotesAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="language"> (optional)</param>
        /// <returns>InlineResponse20041</returns>
        InlineResponse20041 GetCategorySystemTypeList(List<string> attributes = default(List<string>), string language = default(string));

        /// <summary>
        /// List of category system types.
        /// </summary>
        /// <remarks>
        /// List of category system types.
        /// </remarks>
        /// <exception cref="FactSet.SDK.QuotesAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="language"> (optional)</param>
        /// <returns>ApiResponse of InlineResponse20041</returns>
        ApiResponse<InlineResponse20041> GetCategorySystemTypeListWithHttpInfo(List<string> attributes = default(List<string>), string language = default(string));
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ICategoryApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// List of entitled category datasets.
        /// </summary>
        /// <remarks>
        /// List of entitled category datasets.
        /// </remarks>
        /// <exception cref="FactSet.SDK.QuotesAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="language"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse20035</returns>
        System.Threading.Tasks.Task<InlineResponse20035> GetCategoryDatasetListAsync(List<string> attributes = default(List<string>), string language = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// List of entitled category datasets.
        /// </summary>
        /// <remarks>
        /// List of entitled category datasets.
        /// </remarks>
        /// <exception cref="FactSet.SDK.QuotesAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="language"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse20035)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20035>> GetCategoryDatasetListWithHttpInfoAsync(List<string> attributes = default(List<string>), string language = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Details of a category.
        /// </summary>
        /// <remarks>
        /// Details of a category.
        /// </remarks>
        /// <exception cref="FactSet.SDK.QuotesAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="language"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse20031</returns>
        System.Threading.Tasks.Task<InlineResponse20031> GetCategoryGetAsync(decimal id, List<string> attributes = default(List<string>), string language = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Details of a category.
        /// </summary>
        /// <remarks>
        /// Details of a category.
        /// </remarks>
        /// <exception cref="FactSet.SDK.QuotesAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="language"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse20031)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20031>> GetCategoryGetWithHttpInfoAsync(decimal id, List<string> attributes = default(List<string>), string language = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// List of instruments where a specific dataset has assigned a given category.
        /// </summary>
        /// <remarks>
        /// List of instruments where a specific dataset has assigned a given category.
        /// </remarks>
        /// <exception cref="FactSet.SDK.QuotesAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idCategory"></param>
        /// <param name="idCategoryDataset"></param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="paginationOffset">Non-negative number of entries to skip, or 0 (default). (optional, default to 0M)</param>
        /// <param name="paginationLimit">Non-negative maximum number of entries to return. (optional, default to 20M)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse20036</returns>
        System.Threading.Tasks.Task<InlineResponse20036> GetCategoryInstrumentListAsync(decimal idCategory, decimal idCategoryDataset, List<string> attributes = default(List<string>), decimal? paginationOffset = default(decimal?), decimal? paginationLimit = default(decimal?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// List of instruments where a specific dataset has assigned a given category.
        /// </summary>
        /// <remarks>
        /// List of instruments where a specific dataset has assigned a given category.
        /// </remarks>
        /// <exception cref="FactSet.SDK.QuotesAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idCategory"></param>
        /// <param name="idCategoryDataset"></param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="paginationOffset">Non-negative number of entries to skip, or 0 (default). (optional, default to 0M)</param>
        /// <param name="paginationLimit">Non-negative maximum number of entries to return. (optional, default to 20M)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse20036)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20036>> GetCategoryInstrumentListWithHttpInfoAsync(decimal idCategory, decimal idCategoryDataset, List<string> attributes = default(List<string>), decimal? paginationOffset = default(decimal?), decimal? paginationLimit = default(decimal?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Details of a category level.
        /// </summary>
        /// <remarks>
        /// Details of a category level.
        /// </remarks>
        /// <exception cref="FactSet.SDK.QuotesAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="language"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse20037</returns>
        System.Threading.Tasks.Task<InlineResponse20037> GetCategoryLevelGetAsync(decimal id, List<string> attributes = default(List<string>), string language = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Details of a category level.
        /// </summary>
        /// <remarks>
        /// Details of a category level.
        /// </remarks>
        /// <exception cref="FactSet.SDK.QuotesAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="language"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse20037)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20037>> GetCategoryLevelGetWithHttpInfoAsync(decimal id, List<string> attributes = default(List<string>), string language = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// List of categories.
        /// </summary>
        /// <remarks>
        /// List of categories.
        /// </remarks>
        /// <exception cref="FactSet.SDK.QuotesAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids"></param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="language"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse20032</returns>
        System.Threading.Tasks.Task<InlineResponse20032> GetCategoryListAsync(List<decimal> ids, List<string> attributes = default(List<string>), string language = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// List of categories.
        /// </summary>
        /// <remarks>
        /// List of categories.
        /// </remarks>
        /// <exception cref="FactSet.SDK.QuotesAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids"></param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="language"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse20032)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20032>> GetCategoryListWithHttpInfoAsync(List<decimal> ids, List<string> attributes = default(List<string>), string language = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// List of categories assigned to a category level.
        /// </summary>
        /// <remarks>
        /// List of categories assigned to a category level.
        /// </remarks>
        /// <exception cref="FactSet.SDK.QuotesAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="language"> (optional)</param>
        /// <param name="paginationOffset">Non-negative number of entries to skip, or 0 (default). (optional, default to 0M)</param>
        /// <param name="paginationLimit">Non-negative maximum number of entries to return. (optional, default to 20M)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse20033</returns>
        System.Threading.Tasks.Task<InlineResponse20033> GetCategoryListByLevelAsync(decimal id, List<string> attributes = default(List<string>), string language = default(string), decimal? paginationOffset = default(decimal?), decimal? paginationLimit = default(decimal?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// List of categories assigned to a category level.
        /// </summary>
        /// <remarks>
        /// List of categories assigned to a category level.
        /// </remarks>
        /// <exception cref="FactSet.SDK.QuotesAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="language"> (optional)</param>
        /// <param name="paginationOffset">Non-negative number of entries to skip, or 0 (default). (optional, default to 0M)</param>
        /// <param name="paginationLimit">Non-negative maximum number of entries to return. (optional, default to 20M)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse20033)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20033>> GetCategoryListByLevelWithHttpInfoAsync(decimal id, List<string> attributes = default(List<string>), string language = default(string), decimal? paginationOffset = default(decimal?), decimal? paginationLimit = default(decimal?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// List of categories assigned to a category system.
        /// </summary>
        /// <remarks>
        /// List of categories assigned to a category system.
        /// </remarks>
        /// <exception cref="FactSet.SDK.QuotesAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="language"> (optional)</param>
        /// <param name="paginationOffset">Non-negative number of entries to skip, or 0 (default). (optional, default to 0M)</param>
        /// <param name="paginationLimit">Non-negative maximum number of entries to return. (optional, default to 20M)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse20034</returns>
        System.Threading.Tasks.Task<InlineResponse20034> GetCategoryListBySystemAsync(decimal id, List<string> attributes = default(List<string>), string language = default(string), decimal? paginationOffset = default(decimal?), decimal? paginationLimit = default(decimal?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// List of categories assigned to a category system.
        /// </summary>
        /// <remarks>
        /// List of categories assigned to a category system.
        /// </remarks>
        /// <exception cref="FactSet.SDK.QuotesAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="language"> (optional)</param>
        /// <param name="paginationOffset">Non-negative number of entries to skip, or 0 (default). (optional, default to 0M)</param>
        /// <param name="paginationLimit">Non-negative maximum number of entries to return. (optional, default to 20M)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse20034)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20034>> GetCategoryListBySystemWithHttpInfoAsync(decimal id, List<string> attributes = default(List<string>), string language = default(string), decimal? paginationOffset = default(decimal?), decimal? paginationLimit = default(decimal?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Path from the first level to the level of a specific category.
        /// </summary>
        /// <remarks>
        /// Path from the first level to the level of a specific category.
        /// </remarks>
        /// <exception cref="FactSet.SDK.QuotesAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="language"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse20038</returns>
        System.Threading.Tasks.Task<InlineResponse20038> GetCategoryPathGetAsync(decimal id, List<string> attributes = default(List<string>), string language = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Path from the first level to the level of a specific category.
        /// </summary>
        /// <remarks>
        /// Path from the first level to the level of a specific category.
        /// </remarks>
        /// <exception cref="FactSet.SDK.QuotesAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="language"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse20038)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20038>> GetCategoryPathGetWithHttpInfoAsync(decimal id, List<string> attributes = default(List<string>), string language = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Details of an entitled category system.
        /// </summary>
        /// <remarks>
        /// Details of an entitled category system.
        /// </remarks>
        /// <exception cref="FactSet.SDK.QuotesAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="language"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse20039</returns>
        System.Threading.Tasks.Task<InlineResponse20039> GetCategorySystemGetAsync(decimal id, List<string> attributes = default(List<string>), string language = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Details of an entitled category system.
        /// </summary>
        /// <remarks>
        /// Details of an entitled category system.
        /// </remarks>
        /// <exception cref="FactSet.SDK.QuotesAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="language"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse20039)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20039>> GetCategorySystemGetWithHttpInfoAsync(decimal id, List<string> attributes = default(List<string>), string language = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// List of entitled category systems.
        /// </summary>
        /// <remarks>
        /// List of entitled category systems.
        /// </remarks>
        /// <exception cref="FactSet.SDK.QuotesAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idType"> (optional)</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="language"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse20040</returns>
        System.Threading.Tasks.Task<InlineResponse20040> GetCategorySystemListAsync(decimal? idType = default(decimal?), List<string> attributes = default(List<string>), string language = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// List of entitled category systems.
        /// </summary>
        /// <remarks>
        /// List of entitled category systems.
        /// </remarks>
        /// <exception cref="FactSet.SDK.QuotesAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idType"> (optional)</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="language"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse20040)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20040>> GetCategorySystemListWithHttpInfoAsync(decimal? idType = default(decimal?), List<string> attributes = default(List<string>), string language = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// List of category system types.
        /// </summary>
        /// <remarks>
        /// List of category system types.
        /// </remarks>
        /// <exception cref="FactSet.SDK.QuotesAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="language"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse20041</returns>
        System.Threading.Tasks.Task<InlineResponse20041> GetCategorySystemTypeListAsync(List<string> attributes = default(List<string>), string language = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// List of category system types.
        /// </summary>
        /// <remarks>
        /// List of category system types.
        /// </remarks>
        /// <exception cref="FactSet.SDK.QuotesAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="language"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse20041)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20041>> GetCategorySystemTypeListWithHttpInfoAsync(List<string> attributes = default(List<string>), string language = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ICategoryApi : ICategoryApiSync, ICategoryApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class CategoryApi : ICategoryApi
    {
        private FactSet.SDK.QuotesAPIforDigitalPortals.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        # region Response Type Disctionaries
        
        private static readonly Dictionary<HttpStatusCode, System.Type> GetCategoryDatasetListResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)200, typeof(InlineResponse20035) },
        };

        private static readonly Dictionary<HttpStatusCode, System.Type> GetCategoryGetResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)200, typeof(InlineResponse20031) },
        };

        private static readonly Dictionary<HttpStatusCode, System.Type> GetCategoryInstrumentListResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)200, typeof(InlineResponse20036) },
        };

        private static readonly Dictionary<HttpStatusCode, System.Type> GetCategoryLevelGetResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)200, typeof(InlineResponse20037) },
        };

        private static readonly Dictionary<HttpStatusCode, System.Type> GetCategoryListResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)200, typeof(InlineResponse20032) },
        };

        private static readonly Dictionary<HttpStatusCode, System.Type> GetCategoryListByLevelResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)200, typeof(InlineResponse20033) },
        };

        private static readonly Dictionary<HttpStatusCode, System.Type> GetCategoryListBySystemResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)200, typeof(InlineResponse20034) },
        };

        private static readonly Dictionary<HttpStatusCode, System.Type> GetCategoryPathGetResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)200, typeof(InlineResponse20038) },
        };

        private static readonly Dictionary<HttpStatusCode, System.Type> GetCategorySystemGetResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)200, typeof(InlineResponse20039) },
        };

        private static readonly Dictionary<HttpStatusCode, System.Type> GetCategorySystemListResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)200, typeof(InlineResponse20040) },
        };

        private static readonly Dictionary<HttpStatusCode, System.Type> GetCategorySystemTypeListResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)200, typeof(InlineResponse20041) },
        };

        # endregion Response Type Disctionaries

        # region Api Response Objects
        

        # endregion Api Response Objects

        /// <summary>
        /// Initializes a new instance of the <see cref="CategoryApi"/> class.
        /// </summary>
        /// <returns></returns>
        public CategoryApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CategoryApi"/> class.
        /// </summary>
        /// <returns></returns>
        public CategoryApi(string basePath)
        {
            this.Configuration = FactSet.SDK.QuotesAPIforDigitalPortals.Client.Configuration.MergeConfigurations(
                FactSet.SDK.QuotesAPIforDigitalPortals.Client.GlobalConfiguration.Instance,
                new FactSet.SDK.QuotesAPIforDigitalPortals.Client.Configuration { BasePath = basePath }
            );
            this.Client = new FactSet.SDK.QuotesAPIforDigitalPortals.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new FactSet.SDK.QuotesAPIforDigitalPortals.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = FactSet.SDK.QuotesAPIforDigitalPortals.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CategoryApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public CategoryApi(FactSet.SDK.QuotesAPIforDigitalPortals.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = FactSet.SDK.QuotesAPIforDigitalPortals.Client.Configuration.MergeConfigurations(
                FactSet.SDK.QuotesAPIforDigitalPortals.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new FactSet.SDK.QuotesAPIforDigitalPortals.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new FactSet.SDK.QuotesAPIforDigitalPortals.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = FactSet.SDK.QuotesAPIforDigitalPortals.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CategoryApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public CategoryApi(FactSet.SDK.QuotesAPIforDigitalPortals.Client.ISynchronousClient client, FactSet.SDK.QuotesAPIforDigitalPortals.Client.IAsynchronousClient asyncClient, FactSet.SDK.QuotesAPIforDigitalPortals.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = FactSet.SDK.QuotesAPIforDigitalPortals.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public FactSet.SDK.QuotesAPIforDigitalPortals.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public FactSet.SDK.QuotesAPIforDigitalPortals.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public FactSet.SDK.QuotesAPIforDigitalPortals.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public FactSet.SDK.QuotesAPIforDigitalPortals.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// List of entitled category datasets. List of entitled category datasets.
        /// </summary>
        /// <exception cref="FactSet.SDK.QuotesAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="language"> (optional)</param>
        /// <returns>InlineResponse20035</returns>
        public InlineResponse20035 GetCategoryDatasetList(List<string> attributes = default(List<string>), string language = default(string))
        {
            var localVarResponse = GetCategoryDatasetListWithHttpInfo(attributes, language);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List of entitled category datasets. List of entitled category datasets.
        /// </summary>
        /// <exception cref="FactSet.SDK.QuotesAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="language"> (optional)</param>
        /// <returns>ApiResponse of InlineResponse20035</returns>
        public ApiResponse<InlineResponse20035> GetCategoryDatasetListWithHttpInfo(List<string> attributes = default(List<string>), string language = default(string))
        {
            FactSet.SDK.QuotesAPIforDigitalPortals.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.QuotesAPIforDigitalPortals.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.QuotesAPIforDigitalPortals.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.QuotesAPIforDigitalPortals.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (attributes != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.QuotesAPIforDigitalPortals.Client.ClientUtils.ParameterToMultiMap("csv", "_attributes", attributes));
            }
            if (language != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.QuotesAPIforDigitalPortals.Client.ClientUtils.ParameterToMultiMap("", "_language", language));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.QuotesAPIforDigitalPortals.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = GetCategoryDatasetListResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Get<
            InlineResponse20035>("/category/dataset/list", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCategoryDatasetList", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// List of entitled category datasets. List of entitled category datasets.
        /// </summary>
        /// <exception cref="FactSet.SDK.QuotesAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="language"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse20035</returns>
        public async System.Threading.Tasks.Task<InlineResponse20035>GetCategoryDatasetListAsync(List<string> attributes = default(List<string>), string language = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await GetCategoryDatasetListWithHttpInfoAsync(attributes, language, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List of entitled category datasets. List of entitled category datasets.
        /// </summary>
        /// <exception cref="FactSet.SDK.QuotesAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="language"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse20035)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20035>> GetCategoryDatasetListWithHttpInfoAsync(List<string> attributes = default(List<string>), string language = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            FactSet.SDK.QuotesAPIforDigitalPortals.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.QuotesAPIforDigitalPortals.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.QuotesAPIforDigitalPortals.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.QuotesAPIforDigitalPortals.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (attributes != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.QuotesAPIforDigitalPortals.Client.ClientUtils.ParameterToMultiMap("csv", "_attributes", attributes));
            }
            if (language != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.QuotesAPIforDigitalPortals.Client.ClientUtils.ParameterToMultiMap("", "_language", language));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.QuotesAPIforDigitalPortals.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = GetCategoryDatasetListResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<InlineResponse20035>("/category/dataset/list", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCategoryDatasetList", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Details of a category. Details of a category.
        /// </summary>
        /// <exception cref="FactSet.SDK.QuotesAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="language"> (optional)</param>
        /// <returns>InlineResponse20031</returns>
        public InlineResponse20031 GetCategoryGet(decimal id, List<string> attributes = default(List<string>), string language = default(string))
        {
            var localVarResponse = GetCategoryGetWithHttpInfo(id, attributes, language);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Details of a category. Details of a category.
        /// </summary>
        /// <exception cref="FactSet.SDK.QuotesAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="language"> (optional)</param>
        /// <returns>ApiResponse of InlineResponse20031</returns>
        public ApiResponse<InlineResponse20031> GetCategoryGetWithHttpInfo(decimal id, List<string> attributes = default(List<string>), string language = default(string))
        {
            FactSet.SDK.QuotesAPIforDigitalPortals.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.QuotesAPIforDigitalPortals.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.QuotesAPIforDigitalPortals.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.QuotesAPIforDigitalPortals.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.QuotesAPIforDigitalPortals.Client.ClientUtils.ParameterToMultiMap("", "id", id));
            if (attributes != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.QuotesAPIforDigitalPortals.Client.ClientUtils.ParameterToMultiMap("csv", "_attributes", attributes));
            }
            if (language != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.QuotesAPIforDigitalPortals.Client.ClientUtils.ParameterToMultiMap("", "_language", language));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.QuotesAPIforDigitalPortals.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = GetCategoryGetResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Get<
            InlineResponse20031>("/category/get", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCategoryGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// Details of a category. Details of a category.
        /// </summary>
        /// <exception cref="FactSet.SDK.QuotesAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="language"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse20031</returns>
        public async System.Threading.Tasks.Task<InlineResponse20031>GetCategoryGetAsync(decimal id, List<string> attributes = default(List<string>), string language = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await GetCategoryGetWithHttpInfoAsync(id, attributes, language, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Details of a category. Details of a category.
        /// </summary>
        /// <exception cref="FactSet.SDK.QuotesAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="language"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse20031)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20031>> GetCategoryGetWithHttpInfoAsync(decimal id, List<string> attributes = default(List<string>), string language = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            FactSet.SDK.QuotesAPIforDigitalPortals.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.QuotesAPIforDigitalPortals.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.QuotesAPIforDigitalPortals.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.QuotesAPIforDigitalPortals.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.QuotesAPIforDigitalPortals.Client.ClientUtils.ParameterToMultiMap("", "id", id));
            if (attributes != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.QuotesAPIforDigitalPortals.Client.ClientUtils.ParameterToMultiMap("csv", "_attributes", attributes));
            }
            if (language != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.QuotesAPIforDigitalPortals.Client.ClientUtils.ParameterToMultiMap("", "_language", language));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.QuotesAPIforDigitalPortals.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = GetCategoryGetResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<InlineResponse20031>("/category/get", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCategoryGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List of instruments where a specific dataset has assigned a given category. List of instruments where a specific dataset has assigned a given category.
        /// </summary>
        /// <exception cref="FactSet.SDK.QuotesAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idCategory"></param>
        /// <param name="idCategoryDataset"></param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="paginationOffset">Non-negative number of entries to skip, or 0 (default). (optional, default to 0M)</param>
        /// <param name="paginationLimit">Non-negative maximum number of entries to return. (optional, default to 20M)</param>
        /// <returns>InlineResponse20036</returns>
        public InlineResponse20036 GetCategoryInstrumentList(decimal idCategory, decimal idCategoryDataset, List<string> attributes = default(List<string>), decimal? paginationOffset = default(decimal?), decimal? paginationLimit = default(decimal?))
        {
            var localVarResponse = GetCategoryInstrumentListWithHttpInfo(idCategory, idCategoryDataset, attributes, paginationOffset, paginationLimit);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List of instruments where a specific dataset has assigned a given category. List of instruments where a specific dataset has assigned a given category.
        /// </summary>
        /// <exception cref="FactSet.SDK.QuotesAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idCategory"></param>
        /// <param name="idCategoryDataset"></param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="paginationOffset">Non-negative number of entries to skip, or 0 (default). (optional, default to 0M)</param>
        /// <param name="paginationLimit">Non-negative maximum number of entries to return. (optional, default to 20M)</param>
        /// <returns>ApiResponse of InlineResponse20036</returns>
        public ApiResponse<InlineResponse20036> GetCategoryInstrumentListWithHttpInfo(decimal idCategory, decimal idCategoryDataset, List<string> attributes = default(List<string>), decimal? paginationOffset = default(decimal?), decimal? paginationLimit = default(decimal?))
        {
            FactSet.SDK.QuotesAPIforDigitalPortals.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.QuotesAPIforDigitalPortals.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.QuotesAPIforDigitalPortals.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.QuotesAPIforDigitalPortals.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.QuotesAPIforDigitalPortals.Client.ClientUtils.ParameterToMultiMap("", "idCategory", idCategory));
            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.QuotesAPIforDigitalPortals.Client.ClientUtils.ParameterToMultiMap("", "idCategoryDataset", idCategoryDataset));
            if (attributes != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.QuotesAPIforDigitalPortals.Client.ClientUtils.ParameterToMultiMap("csv", "_attributes", attributes));
            }
            if (paginationOffset != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.QuotesAPIforDigitalPortals.Client.ClientUtils.ParameterToMultiMap("", "_paginationOffset", paginationOffset));
            }
            if (paginationLimit != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.QuotesAPIforDigitalPortals.Client.ClientUtils.ParameterToMultiMap("", "_paginationLimit", paginationLimit));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.QuotesAPIforDigitalPortals.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = GetCategoryInstrumentListResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Get<
            InlineResponse20036>("/category/instrument/list", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCategoryInstrumentList", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// List of instruments where a specific dataset has assigned a given category. List of instruments where a specific dataset has assigned a given category.
        /// </summary>
        /// <exception cref="FactSet.SDK.QuotesAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idCategory"></param>
        /// <param name="idCategoryDataset"></param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="paginationOffset">Non-negative number of entries to skip, or 0 (default). (optional, default to 0M)</param>
        /// <param name="paginationLimit">Non-negative maximum number of entries to return. (optional, default to 20M)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse20036</returns>
        public async System.Threading.Tasks.Task<InlineResponse20036>GetCategoryInstrumentListAsync(decimal idCategory, decimal idCategoryDataset, List<string> attributes = default(List<string>), decimal? paginationOffset = default(decimal?), decimal? paginationLimit = default(decimal?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await GetCategoryInstrumentListWithHttpInfoAsync(idCategory, idCategoryDataset, attributes, paginationOffset, paginationLimit, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List of instruments where a specific dataset has assigned a given category. List of instruments where a specific dataset has assigned a given category.
        /// </summary>
        /// <exception cref="FactSet.SDK.QuotesAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idCategory"></param>
        /// <param name="idCategoryDataset"></param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="paginationOffset">Non-negative number of entries to skip, or 0 (default). (optional, default to 0M)</param>
        /// <param name="paginationLimit">Non-negative maximum number of entries to return. (optional, default to 20M)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse20036)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20036>> GetCategoryInstrumentListWithHttpInfoAsync(decimal idCategory, decimal idCategoryDataset, List<string> attributes = default(List<string>), decimal? paginationOffset = default(decimal?), decimal? paginationLimit = default(decimal?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            FactSet.SDK.QuotesAPIforDigitalPortals.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.QuotesAPIforDigitalPortals.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.QuotesAPIforDigitalPortals.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.QuotesAPIforDigitalPortals.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.QuotesAPIforDigitalPortals.Client.ClientUtils.ParameterToMultiMap("", "idCategory", idCategory));
            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.QuotesAPIforDigitalPortals.Client.ClientUtils.ParameterToMultiMap("", "idCategoryDataset", idCategoryDataset));
            if (attributes != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.QuotesAPIforDigitalPortals.Client.ClientUtils.ParameterToMultiMap("csv", "_attributes", attributes));
            }
            if (paginationOffset != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.QuotesAPIforDigitalPortals.Client.ClientUtils.ParameterToMultiMap("", "_paginationOffset", paginationOffset));
            }
            if (paginationLimit != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.QuotesAPIforDigitalPortals.Client.ClientUtils.ParameterToMultiMap("", "_paginationLimit", paginationLimit));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.QuotesAPIforDigitalPortals.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = GetCategoryInstrumentListResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<InlineResponse20036>("/category/instrument/list", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCategoryInstrumentList", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Details of a category level. Details of a category level.
        /// </summary>
        /// <exception cref="FactSet.SDK.QuotesAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="language"> (optional)</param>
        /// <returns>InlineResponse20037</returns>
        public InlineResponse20037 GetCategoryLevelGet(decimal id, List<string> attributes = default(List<string>), string language = default(string))
        {
            var localVarResponse = GetCategoryLevelGetWithHttpInfo(id, attributes, language);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Details of a category level. Details of a category level.
        /// </summary>
        /// <exception cref="FactSet.SDK.QuotesAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="language"> (optional)</param>
        /// <returns>ApiResponse of InlineResponse20037</returns>
        public ApiResponse<InlineResponse20037> GetCategoryLevelGetWithHttpInfo(decimal id, List<string> attributes = default(List<string>), string language = default(string))
        {
            FactSet.SDK.QuotesAPIforDigitalPortals.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.QuotesAPIforDigitalPortals.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.QuotesAPIforDigitalPortals.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.QuotesAPIforDigitalPortals.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.QuotesAPIforDigitalPortals.Client.ClientUtils.ParameterToMultiMap("", "id", id));
            if (attributes != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.QuotesAPIforDigitalPortals.Client.ClientUtils.ParameterToMultiMap("csv", "_attributes", attributes));
            }
            if (language != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.QuotesAPIforDigitalPortals.Client.ClientUtils.ParameterToMultiMap("", "_language", language));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.QuotesAPIforDigitalPortals.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = GetCategoryLevelGetResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Get<
            InlineResponse20037>("/category/level/get", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCategoryLevelGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// Details of a category level. Details of a category level.
        /// </summary>
        /// <exception cref="FactSet.SDK.QuotesAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="language"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse20037</returns>
        public async System.Threading.Tasks.Task<InlineResponse20037>GetCategoryLevelGetAsync(decimal id, List<string> attributes = default(List<string>), string language = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await GetCategoryLevelGetWithHttpInfoAsync(id, attributes, language, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Details of a category level. Details of a category level.
        /// </summary>
        /// <exception cref="FactSet.SDK.QuotesAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="language"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse20037)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20037>> GetCategoryLevelGetWithHttpInfoAsync(decimal id, List<string> attributes = default(List<string>), string language = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            FactSet.SDK.QuotesAPIforDigitalPortals.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.QuotesAPIforDigitalPortals.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.QuotesAPIforDigitalPortals.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.QuotesAPIforDigitalPortals.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.QuotesAPIforDigitalPortals.Client.ClientUtils.ParameterToMultiMap("", "id", id));
            if (attributes != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.QuotesAPIforDigitalPortals.Client.ClientUtils.ParameterToMultiMap("csv", "_attributes", attributes));
            }
            if (language != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.QuotesAPIforDigitalPortals.Client.ClientUtils.ParameterToMultiMap("", "_language", language));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.QuotesAPIforDigitalPortals.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = GetCategoryLevelGetResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<InlineResponse20037>("/category/level/get", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCategoryLevelGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List of categories. List of categories.
        /// </summary>
        /// <exception cref="FactSet.SDK.QuotesAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids"></param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="language"> (optional)</param>
        /// <returns>InlineResponse20032</returns>
        public InlineResponse20032 GetCategoryList(List<decimal> ids, List<string> attributes = default(List<string>), string language = default(string))
        {
            var localVarResponse = GetCategoryListWithHttpInfo(ids, attributes, language);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List of categories. List of categories.
        /// </summary>
        /// <exception cref="FactSet.SDK.QuotesAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids"></param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="language"> (optional)</param>
        /// <returns>ApiResponse of InlineResponse20032</returns>
        public ApiResponse<InlineResponse20032> GetCategoryListWithHttpInfo(List<decimal> ids, List<string> attributes = default(List<string>), string language = default(string))
        {
            // verify the required parameter 'ids' is set
            if (ids == null)
            {
                throw new FactSet.SDK.QuotesAPIforDigitalPortals.Client.ApiException(400, "Missing required parameter 'ids' when calling CategoryApi->GetCategoryList");
            }

            FactSet.SDK.QuotesAPIforDigitalPortals.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.QuotesAPIforDigitalPortals.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.QuotesAPIforDigitalPortals.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.QuotesAPIforDigitalPortals.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.QuotesAPIforDigitalPortals.Client.ClientUtils.ParameterToMultiMap("csv", "ids", ids));
            if (attributes != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.QuotesAPIforDigitalPortals.Client.ClientUtils.ParameterToMultiMap("csv", "_attributes", attributes));
            }
            if (language != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.QuotesAPIforDigitalPortals.Client.ClientUtils.ParameterToMultiMap("", "_language", language));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.QuotesAPIforDigitalPortals.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = GetCategoryListResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Get<
            InlineResponse20032>("/category/list", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCategoryList", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// List of categories. List of categories.
        /// </summary>
        /// <exception cref="FactSet.SDK.QuotesAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids"></param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="language"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse20032</returns>
        public async System.Threading.Tasks.Task<InlineResponse20032>GetCategoryListAsync(List<decimal> ids, List<string> attributes = default(List<string>), string language = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await GetCategoryListWithHttpInfoAsync(ids, attributes, language, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List of categories. List of categories.
        /// </summary>
        /// <exception cref="FactSet.SDK.QuotesAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids"></param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="language"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse20032)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20032>> GetCategoryListWithHttpInfoAsync(List<decimal> ids, List<string> attributes = default(List<string>), string language = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'ids' is set
            if (ids == null)
            {
                throw new FactSet.SDK.QuotesAPIforDigitalPortals.Client.ApiException(400, "Missing required parameter 'ids' when calling CategoryApi->GetCategoryList");
            }


            FactSet.SDK.QuotesAPIforDigitalPortals.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.QuotesAPIforDigitalPortals.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.QuotesAPIforDigitalPortals.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.QuotesAPIforDigitalPortals.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.QuotesAPIforDigitalPortals.Client.ClientUtils.ParameterToMultiMap("csv", "ids", ids));
            if (attributes != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.QuotesAPIforDigitalPortals.Client.ClientUtils.ParameterToMultiMap("csv", "_attributes", attributes));
            }
            if (language != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.QuotesAPIforDigitalPortals.Client.ClientUtils.ParameterToMultiMap("", "_language", language));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.QuotesAPIforDigitalPortals.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = GetCategoryListResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<InlineResponse20032>("/category/list", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCategoryList", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List of categories assigned to a category level. List of categories assigned to a category level.
        /// </summary>
        /// <exception cref="FactSet.SDK.QuotesAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="language"> (optional)</param>
        /// <param name="paginationOffset">Non-negative number of entries to skip, or 0 (default). (optional, default to 0M)</param>
        /// <param name="paginationLimit">Non-negative maximum number of entries to return. (optional, default to 20M)</param>
        /// <returns>InlineResponse20033</returns>
        public InlineResponse20033 GetCategoryListByLevel(decimal id, List<string> attributes = default(List<string>), string language = default(string), decimal? paginationOffset = default(decimal?), decimal? paginationLimit = default(decimal?))
        {
            var localVarResponse = GetCategoryListByLevelWithHttpInfo(id, attributes, language, paginationOffset, paginationLimit);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List of categories assigned to a category level. List of categories assigned to a category level.
        /// </summary>
        /// <exception cref="FactSet.SDK.QuotesAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="language"> (optional)</param>
        /// <param name="paginationOffset">Non-negative number of entries to skip, or 0 (default). (optional, default to 0M)</param>
        /// <param name="paginationLimit">Non-negative maximum number of entries to return. (optional, default to 20M)</param>
        /// <returns>ApiResponse of InlineResponse20033</returns>
        public ApiResponse<InlineResponse20033> GetCategoryListByLevelWithHttpInfo(decimal id, List<string> attributes = default(List<string>), string language = default(string), decimal? paginationOffset = default(decimal?), decimal? paginationLimit = default(decimal?))
        {
            FactSet.SDK.QuotesAPIforDigitalPortals.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.QuotesAPIforDigitalPortals.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.QuotesAPIforDigitalPortals.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.QuotesAPIforDigitalPortals.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.QuotesAPIforDigitalPortals.Client.ClientUtils.ParameterToMultiMap("", "id", id));
            if (attributes != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.QuotesAPIforDigitalPortals.Client.ClientUtils.ParameterToMultiMap("csv", "_attributes", attributes));
            }
            if (language != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.QuotesAPIforDigitalPortals.Client.ClientUtils.ParameterToMultiMap("", "_language", language));
            }
            if (paginationOffset != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.QuotesAPIforDigitalPortals.Client.ClientUtils.ParameterToMultiMap("", "_paginationOffset", paginationOffset));
            }
            if (paginationLimit != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.QuotesAPIforDigitalPortals.Client.ClientUtils.ParameterToMultiMap("", "_paginationLimit", paginationLimit));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.QuotesAPIforDigitalPortals.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = GetCategoryListByLevelResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Get<
            InlineResponse20033>("/category/listByLevel", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCategoryListByLevel", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// List of categories assigned to a category level. List of categories assigned to a category level.
        /// </summary>
        /// <exception cref="FactSet.SDK.QuotesAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="language"> (optional)</param>
        /// <param name="paginationOffset">Non-negative number of entries to skip, or 0 (default). (optional, default to 0M)</param>
        /// <param name="paginationLimit">Non-negative maximum number of entries to return. (optional, default to 20M)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse20033</returns>
        public async System.Threading.Tasks.Task<InlineResponse20033>GetCategoryListByLevelAsync(decimal id, List<string> attributes = default(List<string>), string language = default(string), decimal? paginationOffset = default(decimal?), decimal? paginationLimit = default(decimal?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await GetCategoryListByLevelWithHttpInfoAsync(id, attributes, language, paginationOffset, paginationLimit, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List of categories assigned to a category level. List of categories assigned to a category level.
        /// </summary>
        /// <exception cref="FactSet.SDK.QuotesAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="language"> (optional)</param>
        /// <param name="paginationOffset">Non-negative number of entries to skip, or 0 (default). (optional, default to 0M)</param>
        /// <param name="paginationLimit">Non-negative maximum number of entries to return. (optional, default to 20M)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse20033)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20033>> GetCategoryListByLevelWithHttpInfoAsync(decimal id, List<string> attributes = default(List<string>), string language = default(string), decimal? paginationOffset = default(decimal?), decimal? paginationLimit = default(decimal?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            FactSet.SDK.QuotesAPIforDigitalPortals.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.QuotesAPIforDigitalPortals.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.QuotesAPIforDigitalPortals.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.QuotesAPIforDigitalPortals.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.QuotesAPIforDigitalPortals.Client.ClientUtils.ParameterToMultiMap("", "id", id));
            if (attributes != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.QuotesAPIforDigitalPortals.Client.ClientUtils.ParameterToMultiMap("csv", "_attributes", attributes));
            }
            if (language != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.QuotesAPIforDigitalPortals.Client.ClientUtils.ParameterToMultiMap("", "_language", language));
            }
            if (paginationOffset != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.QuotesAPIforDigitalPortals.Client.ClientUtils.ParameterToMultiMap("", "_paginationOffset", paginationOffset));
            }
            if (paginationLimit != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.QuotesAPIforDigitalPortals.Client.ClientUtils.ParameterToMultiMap("", "_paginationLimit", paginationLimit));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.QuotesAPIforDigitalPortals.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = GetCategoryListByLevelResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<InlineResponse20033>("/category/listByLevel", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCategoryListByLevel", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List of categories assigned to a category system. List of categories assigned to a category system.
        /// </summary>
        /// <exception cref="FactSet.SDK.QuotesAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="language"> (optional)</param>
        /// <param name="paginationOffset">Non-negative number of entries to skip, or 0 (default). (optional, default to 0M)</param>
        /// <param name="paginationLimit">Non-negative maximum number of entries to return. (optional, default to 20M)</param>
        /// <returns>InlineResponse20034</returns>
        public InlineResponse20034 GetCategoryListBySystem(decimal id, List<string> attributes = default(List<string>), string language = default(string), decimal? paginationOffset = default(decimal?), decimal? paginationLimit = default(decimal?))
        {
            var localVarResponse = GetCategoryListBySystemWithHttpInfo(id, attributes, language, paginationOffset, paginationLimit);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List of categories assigned to a category system. List of categories assigned to a category system.
        /// </summary>
        /// <exception cref="FactSet.SDK.QuotesAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="language"> (optional)</param>
        /// <param name="paginationOffset">Non-negative number of entries to skip, or 0 (default). (optional, default to 0M)</param>
        /// <param name="paginationLimit">Non-negative maximum number of entries to return. (optional, default to 20M)</param>
        /// <returns>ApiResponse of InlineResponse20034</returns>
        public ApiResponse<InlineResponse20034> GetCategoryListBySystemWithHttpInfo(decimal id, List<string> attributes = default(List<string>), string language = default(string), decimal? paginationOffset = default(decimal?), decimal? paginationLimit = default(decimal?))
        {
            FactSet.SDK.QuotesAPIforDigitalPortals.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.QuotesAPIforDigitalPortals.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.QuotesAPIforDigitalPortals.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.QuotesAPIforDigitalPortals.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.QuotesAPIforDigitalPortals.Client.ClientUtils.ParameterToMultiMap("", "id", id));
            if (attributes != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.QuotesAPIforDigitalPortals.Client.ClientUtils.ParameterToMultiMap("csv", "_attributes", attributes));
            }
            if (language != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.QuotesAPIforDigitalPortals.Client.ClientUtils.ParameterToMultiMap("", "_language", language));
            }
            if (paginationOffset != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.QuotesAPIforDigitalPortals.Client.ClientUtils.ParameterToMultiMap("", "_paginationOffset", paginationOffset));
            }
            if (paginationLimit != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.QuotesAPIforDigitalPortals.Client.ClientUtils.ParameterToMultiMap("", "_paginationLimit", paginationLimit));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.QuotesAPIforDigitalPortals.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = GetCategoryListBySystemResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Get<
            InlineResponse20034>("/category/listBySystem", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCategoryListBySystem", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// List of categories assigned to a category system. List of categories assigned to a category system.
        /// </summary>
        /// <exception cref="FactSet.SDK.QuotesAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="language"> (optional)</param>
        /// <param name="paginationOffset">Non-negative number of entries to skip, or 0 (default). (optional, default to 0M)</param>
        /// <param name="paginationLimit">Non-negative maximum number of entries to return. (optional, default to 20M)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse20034</returns>
        public async System.Threading.Tasks.Task<InlineResponse20034>GetCategoryListBySystemAsync(decimal id, List<string> attributes = default(List<string>), string language = default(string), decimal? paginationOffset = default(decimal?), decimal? paginationLimit = default(decimal?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await GetCategoryListBySystemWithHttpInfoAsync(id, attributes, language, paginationOffset, paginationLimit, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List of categories assigned to a category system. List of categories assigned to a category system.
        /// </summary>
        /// <exception cref="FactSet.SDK.QuotesAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="language"> (optional)</param>
        /// <param name="paginationOffset">Non-negative number of entries to skip, or 0 (default). (optional, default to 0M)</param>
        /// <param name="paginationLimit">Non-negative maximum number of entries to return. (optional, default to 20M)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse20034)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20034>> GetCategoryListBySystemWithHttpInfoAsync(decimal id, List<string> attributes = default(List<string>), string language = default(string), decimal? paginationOffset = default(decimal?), decimal? paginationLimit = default(decimal?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            FactSet.SDK.QuotesAPIforDigitalPortals.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.QuotesAPIforDigitalPortals.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.QuotesAPIforDigitalPortals.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.QuotesAPIforDigitalPortals.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.QuotesAPIforDigitalPortals.Client.ClientUtils.ParameterToMultiMap("", "id", id));
            if (attributes != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.QuotesAPIforDigitalPortals.Client.ClientUtils.ParameterToMultiMap("csv", "_attributes", attributes));
            }
            if (language != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.QuotesAPIforDigitalPortals.Client.ClientUtils.ParameterToMultiMap("", "_language", language));
            }
            if (paginationOffset != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.QuotesAPIforDigitalPortals.Client.ClientUtils.ParameterToMultiMap("", "_paginationOffset", paginationOffset));
            }
            if (paginationLimit != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.QuotesAPIforDigitalPortals.Client.ClientUtils.ParameterToMultiMap("", "_paginationLimit", paginationLimit));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.QuotesAPIforDigitalPortals.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = GetCategoryListBySystemResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<InlineResponse20034>("/category/listBySystem", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCategoryListBySystem", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Path from the first level to the level of a specific category. Path from the first level to the level of a specific category.
        /// </summary>
        /// <exception cref="FactSet.SDK.QuotesAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="language"> (optional)</param>
        /// <returns>InlineResponse20038</returns>
        public InlineResponse20038 GetCategoryPathGet(decimal id, List<string> attributes = default(List<string>), string language = default(string))
        {
            var localVarResponse = GetCategoryPathGetWithHttpInfo(id, attributes, language);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Path from the first level to the level of a specific category. Path from the first level to the level of a specific category.
        /// </summary>
        /// <exception cref="FactSet.SDK.QuotesAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="language"> (optional)</param>
        /// <returns>ApiResponse of InlineResponse20038</returns>
        public ApiResponse<InlineResponse20038> GetCategoryPathGetWithHttpInfo(decimal id, List<string> attributes = default(List<string>), string language = default(string))
        {
            FactSet.SDK.QuotesAPIforDigitalPortals.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.QuotesAPIforDigitalPortals.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.QuotesAPIforDigitalPortals.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.QuotesAPIforDigitalPortals.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.QuotesAPIforDigitalPortals.Client.ClientUtils.ParameterToMultiMap("", "id", id));
            if (attributes != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.QuotesAPIforDigitalPortals.Client.ClientUtils.ParameterToMultiMap("csv", "_attributes", attributes));
            }
            if (language != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.QuotesAPIforDigitalPortals.Client.ClientUtils.ParameterToMultiMap("", "_language", language));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.QuotesAPIforDigitalPortals.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = GetCategoryPathGetResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Get<
            InlineResponse20038>("/category/path/get", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCategoryPathGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// Path from the first level to the level of a specific category. Path from the first level to the level of a specific category.
        /// </summary>
        /// <exception cref="FactSet.SDK.QuotesAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="language"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse20038</returns>
        public async System.Threading.Tasks.Task<InlineResponse20038>GetCategoryPathGetAsync(decimal id, List<string> attributes = default(List<string>), string language = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await GetCategoryPathGetWithHttpInfoAsync(id, attributes, language, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Path from the first level to the level of a specific category. Path from the first level to the level of a specific category.
        /// </summary>
        /// <exception cref="FactSet.SDK.QuotesAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="language"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse20038)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20038>> GetCategoryPathGetWithHttpInfoAsync(decimal id, List<string> attributes = default(List<string>), string language = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            FactSet.SDK.QuotesAPIforDigitalPortals.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.QuotesAPIforDigitalPortals.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.QuotesAPIforDigitalPortals.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.QuotesAPIforDigitalPortals.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.QuotesAPIforDigitalPortals.Client.ClientUtils.ParameterToMultiMap("", "id", id));
            if (attributes != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.QuotesAPIforDigitalPortals.Client.ClientUtils.ParameterToMultiMap("csv", "_attributes", attributes));
            }
            if (language != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.QuotesAPIforDigitalPortals.Client.ClientUtils.ParameterToMultiMap("", "_language", language));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.QuotesAPIforDigitalPortals.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = GetCategoryPathGetResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<InlineResponse20038>("/category/path/get", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCategoryPathGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Details of an entitled category system. Details of an entitled category system.
        /// </summary>
        /// <exception cref="FactSet.SDK.QuotesAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="language"> (optional)</param>
        /// <returns>InlineResponse20039</returns>
        public InlineResponse20039 GetCategorySystemGet(decimal id, List<string> attributes = default(List<string>), string language = default(string))
        {
            var localVarResponse = GetCategorySystemGetWithHttpInfo(id, attributes, language);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Details of an entitled category system. Details of an entitled category system.
        /// </summary>
        /// <exception cref="FactSet.SDK.QuotesAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="language"> (optional)</param>
        /// <returns>ApiResponse of InlineResponse20039</returns>
        public ApiResponse<InlineResponse20039> GetCategorySystemGetWithHttpInfo(decimal id, List<string> attributes = default(List<string>), string language = default(string))
        {
            FactSet.SDK.QuotesAPIforDigitalPortals.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.QuotesAPIforDigitalPortals.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.QuotesAPIforDigitalPortals.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.QuotesAPIforDigitalPortals.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.QuotesAPIforDigitalPortals.Client.ClientUtils.ParameterToMultiMap("", "id", id));
            if (attributes != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.QuotesAPIforDigitalPortals.Client.ClientUtils.ParameterToMultiMap("csv", "_attributes", attributes));
            }
            if (language != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.QuotesAPIforDigitalPortals.Client.ClientUtils.ParameterToMultiMap("", "_language", language));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.QuotesAPIforDigitalPortals.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = GetCategorySystemGetResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Get<
            InlineResponse20039>("/category/system/get", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCategorySystemGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// Details of an entitled category system. Details of an entitled category system.
        /// </summary>
        /// <exception cref="FactSet.SDK.QuotesAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="language"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse20039</returns>
        public async System.Threading.Tasks.Task<InlineResponse20039>GetCategorySystemGetAsync(decimal id, List<string> attributes = default(List<string>), string language = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await GetCategorySystemGetWithHttpInfoAsync(id, attributes, language, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Details of an entitled category system. Details of an entitled category system.
        /// </summary>
        /// <exception cref="FactSet.SDK.QuotesAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="language"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse20039)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20039>> GetCategorySystemGetWithHttpInfoAsync(decimal id, List<string> attributes = default(List<string>), string language = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            FactSet.SDK.QuotesAPIforDigitalPortals.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.QuotesAPIforDigitalPortals.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.QuotesAPIforDigitalPortals.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.QuotesAPIforDigitalPortals.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.QuotesAPIforDigitalPortals.Client.ClientUtils.ParameterToMultiMap("", "id", id));
            if (attributes != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.QuotesAPIforDigitalPortals.Client.ClientUtils.ParameterToMultiMap("csv", "_attributes", attributes));
            }
            if (language != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.QuotesAPIforDigitalPortals.Client.ClientUtils.ParameterToMultiMap("", "_language", language));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.QuotesAPIforDigitalPortals.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = GetCategorySystemGetResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<InlineResponse20039>("/category/system/get", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCategorySystemGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List of entitled category systems. List of entitled category systems.
        /// </summary>
        /// <exception cref="FactSet.SDK.QuotesAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idType"> (optional)</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="language"> (optional)</param>
        /// <returns>InlineResponse20040</returns>
        public InlineResponse20040 GetCategorySystemList(decimal? idType = default(decimal?), List<string> attributes = default(List<string>), string language = default(string))
        {
            var localVarResponse = GetCategorySystemListWithHttpInfo(idType, attributes, language);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List of entitled category systems. List of entitled category systems.
        /// </summary>
        /// <exception cref="FactSet.SDK.QuotesAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idType"> (optional)</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="language"> (optional)</param>
        /// <returns>ApiResponse of InlineResponse20040</returns>
        public ApiResponse<InlineResponse20040> GetCategorySystemListWithHttpInfo(decimal? idType = default(decimal?), List<string> attributes = default(List<string>), string language = default(string))
        {
            FactSet.SDK.QuotesAPIforDigitalPortals.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.QuotesAPIforDigitalPortals.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.QuotesAPIforDigitalPortals.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.QuotesAPIforDigitalPortals.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (idType != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.QuotesAPIforDigitalPortals.Client.ClientUtils.ParameterToMultiMap("", "idType", idType));
            }
            if (attributes != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.QuotesAPIforDigitalPortals.Client.ClientUtils.ParameterToMultiMap("csv", "_attributes", attributes));
            }
            if (language != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.QuotesAPIforDigitalPortals.Client.ClientUtils.ParameterToMultiMap("", "_language", language));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.QuotesAPIforDigitalPortals.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = GetCategorySystemListResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Get<
            InlineResponse20040>("/category/system/list", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCategorySystemList", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// List of entitled category systems. List of entitled category systems.
        /// </summary>
        /// <exception cref="FactSet.SDK.QuotesAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idType"> (optional)</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="language"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse20040</returns>
        public async System.Threading.Tasks.Task<InlineResponse20040>GetCategorySystemListAsync(decimal? idType = default(decimal?), List<string> attributes = default(List<string>), string language = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await GetCategorySystemListWithHttpInfoAsync(idType, attributes, language, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List of entitled category systems. List of entitled category systems.
        /// </summary>
        /// <exception cref="FactSet.SDK.QuotesAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idType"> (optional)</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="language"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse20040)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20040>> GetCategorySystemListWithHttpInfoAsync(decimal? idType = default(decimal?), List<string> attributes = default(List<string>), string language = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            FactSet.SDK.QuotesAPIforDigitalPortals.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.QuotesAPIforDigitalPortals.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.QuotesAPIforDigitalPortals.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.QuotesAPIforDigitalPortals.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (idType != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.QuotesAPIforDigitalPortals.Client.ClientUtils.ParameterToMultiMap("", "idType", idType));
            }
            if (attributes != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.QuotesAPIforDigitalPortals.Client.ClientUtils.ParameterToMultiMap("csv", "_attributes", attributes));
            }
            if (language != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.QuotesAPIforDigitalPortals.Client.ClientUtils.ParameterToMultiMap("", "_language", language));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.QuotesAPIforDigitalPortals.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = GetCategorySystemListResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<InlineResponse20040>("/category/system/list", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCategorySystemList", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List of category system types. List of category system types.
        /// </summary>
        /// <exception cref="FactSet.SDK.QuotesAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="language"> (optional)</param>
        /// <returns>InlineResponse20041</returns>
        public InlineResponse20041 GetCategorySystemTypeList(List<string> attributes = default(List<string>), string language = default(string))
        {
            var localVarResponse = GetCategorySystemTypeListWithHttpInfo(attributes, language);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List of category system types. List of category system types.
        /// </summary>
        /// <exception cref="FactSet.SDK.QuotesAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="language"> (optional)</param>
        /// <returns>ApiResponse of InlineResponse20041</returns>
        public ApiResponse<InlineResponse20041> GetCategorySystemTypeListWithHttpInfo(List<string> attributes = default(List<string>), string language = default(string))
        {
            FactSet.SDK.QuotesAPIforDigitalPortals.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.QuotesAPIforDigitalPortals.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.QuotesAPIforDigitalPortals.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.QuotesAPIforDigitalPortals.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (attributes != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.QuotesAPIforDigitalPortals.Client.ClientUtils.ParameterToMultiMap("csv", "_attributes", attributes));
            }
            if (language != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.QuotesAPIforDigitalPortals.Client.ClientUtils.ParameterToMultiMap("", "_language", language));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.QuotesAPIforDigitalPortals.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = GetCategorySystemTypeListResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Get<
            InlineResponse20041>("/category/system/type/list", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCategorySystemTypeList", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// List of category system types. List of category system types.
        /// </summary>
        /// <exception cref="FactSet.SDK.QuotesAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="language"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse20041</returns>
        public async System.Threading.Tasks.Task<InlineResponse20041>GetCategorySystemTypeListAsync(List<string> attributes = default(List<string>), string language = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await GetCategorySystemTypeListWithHttpInfoAsync(attributes, language, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List of category system types. List of category system types.
        /// </summary>
        /// <exception cref="FactSet.SDK.QuotesAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="language"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse20041)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20041>> GetCategorySystemTypeListWithHttpInfoAsync(List<string> attributes = default(List<string>), string language = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            FactSet.SDK.QuotesAPIforDigitalPortals.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.QuotesAPIforDigitalPortals.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.QuotesAPIforDigitalPortals.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.QuotesAPIforDigitalPortals.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (attributes != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.QuotesAPIforDigitalPortals.Client.ClientUtils.ParameterToMultiMap("csv", "_attributes", attributes));
            }
            if (language != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.QuotesAPIforDigitalPortals.Client.ClientUtils.ParameterToMultiMap("", "_language", language));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.QuotesAPIforDigitalPortals.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = GetCategorySystemTypeListResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<InlineResponse20041>("/category/system/type/list", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCategorySystemTypeList", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
