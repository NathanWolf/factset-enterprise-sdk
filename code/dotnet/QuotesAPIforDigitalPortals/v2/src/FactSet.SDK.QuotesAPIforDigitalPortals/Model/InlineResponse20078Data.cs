/*
 * Prime Developer Trial
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = FactSet.SDK.QuotesAPIforDigitalPortals.Client.OpenAPIDateConverter;

namespace FactSet.SDK.QuotesAPIforDigitalPortals.Model
{
    /// <summary>
    /// InlineResponse20078Data
    /// </summary>
    [DataContract(Name = "inline_response_200_78_data")]
    public partial class InlineResponse20078Data : IEquatable<InlineResponse20078Data>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="InlineResponse20078Data" /> class.
        /// </summary>
        /// <param name="suspended">Indicates whether the notation is currently suspended from trading. The notation is tradable if it is not suspended and the market is open, see attribute &#x60;market.isOpen&#x60;..</param>
        /// <param name="tradingStatus">Market-specific code of the trading status and/or the suspension of the notation..</param>
        /// <param name="market">market.</param>
        public InlineResponse20078Data(bool suspended = default(bool), string tradingStatus = default(string), InlineResponse20078DataMarket market = default(InlineResponse20078DataMarket))
        {
            this.Suspended = suspended;
            this.TradingStatus = tradingStatus;
            this.Market = market;
        }

        /// <summary>
        /// Indicates whether the notation is currently suspended from trading. The notation is tradable if it is not suspended and the market is open, see attribute &#x60;market.isOpen&#x60;.
        /// </summary>
        /// <value>Indicates whether the notation is currently suspended from trading. The notation is tradable if it is not suspended and the market is open, see attribute &#x60;market.isOpen&#x60;.</value>
        [DataMember(Name = "suspended", EmitDefaultValue = true)]
        public bool Suspended { get; set; }

        /// <summary>
        /// Market-specific code of the trading status and/or the suspension of the notation.
        /// </summary>
        /// <value>Market-specific code of the trading status and/or the suspension of the notation.</value>
        [DataMember(Name = "tradingStatus", EmitDefaultValue = false)]
        public string TradingStatus { get; set; }

        /// <summary>
        /// Gets or Sets Market
        /// </summary>
        [DataMember(Name = "market", EmitDefaultValue = false)]
        public InlineResponse20078DataMarket Market { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class InlineResponse20078Data {\n");
            sb.Append("  Suspended: ").Append(Suspended).Append("\n");
            sb.Append("  TradingStatus: ").Append(TradingStatus).Append("\n");
            sb.Append("  Market: ").Append(Market).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as InlineResponse20078Data);
        }

        /// <summary>
        /// Returns true if InlineResponse20078Data instances are equal
        /// </summary>
        /// <param name="input">Instance of InlineResponse20078Data to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(InlineResponse20078Data input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Suspended == input.Suspended ||
                    this.Suspended.Equals(input.Suspended)
                ) && 
                (
                    this.TradingStatus == input.TradingStatus ||
                    (this.TradingStatus != null &&
                    this.TradingStatus.Equals(input.TradingStatus))
                ) && 
                (
                    this.Market == input.Market ||
                    (this.Market != null &&
                    this.Market.Equals(input.Market))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = hashCode * 59 + this.Suspended.GetHashCode();
                if (this.TradingStatus != null)
                    hashCode = hashCode * 59 + this.TradingStatus.GetHashCode();
                if (this.Market != null)
                    hashCode = hashCode * 59 + this.Market.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
