/*
 * Prime Developer Trial
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = FactSet.SDK.QuotesAPIforDigitalPortals.Client.OpenAPIDateConverter;

namespace FactSet.SDK.QuotesAPIforDigitalPortals.Model
{
    /// <summary>
    /// Default instrument names.
    /// </summary>
    [DataContract(Name = "inline_response_200_89_instrument_name_default")]
    public partial class InlineResponse20089InstrumentNameDefault : IEquatable<InlineResponse20089InstrumentNameDefault>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="InlineResponse20089InstrumentNameDefault" /> class.
        /// </summary>
        /// <param name="_long">Long name..</param>
        /// <param name="_short">Short name..</param>
        public InlineResponse20089InstrumentNameDefault(string _long = default(string), string _short = default(string))
        {
            this.Long = _long;
            this.Short = _short;
        }

        /// <summary>
        /// Long name.
        /// </summary>
        /// <value>Long name.</value>
        [DataMember(Name = "long", EmitDefaultValue = false)]
        public string Long { get; set; }

        /// <summary>
        /// Short name.
        /// </summary>
        /// <value>Short name.</value>
        [DataMember(Name = "short", EmitDefaultValue = false)]
        public string Short { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class InlineResponse20089InstrumentNameDefault {\n");
            sb.Append("  Long: ").Append(Long).Append("\n");
            sb.Append("  Short: ").Append(Short).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as InlineResponse20089InstrumentNameDefault);
        }

        /// <summary>
        /// Returns true if InlineResponse20089InstrumentNameDefault instances are equal
        /// </summary>
        /// <param name="input">Instance of InlineResponse20089InstrumentNameDefault to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(InlineResponse20089InstrumentNameDefault input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Long == input.Long ||
                    (this.Long != null &&
                    this.Long.Equals(input.Long))
                ) && 
                (
                    this.Short == input.Short ||
                    (this.Short != null &&
                    this.Short.Equals(input.Short))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Long != null)
                    hashCode = hashCode * 59 + this.Long.GetHashCode();
                if (this.Short != null)
                    hashCode = hashCode * 59 + this.Short.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
