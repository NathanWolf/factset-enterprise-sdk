/*
 * Prime Developer Trial
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = FactSet.SDK.QuotesAPIforDigitalPortals.Client.OpenAPIDateConverter;

namespace FactSet.SDK.QuotesAPIforDigitalPortals.Model
{
    /// <summary>
    /// EOD key figures.
    /// </summary>
    [DataContract(Name = "inline_response_200_72_data")]
    public partial class InlineResponse20072Data : IEquatable<InlineResponse20072Data>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="InlineResponse20072Data" /> class.
        /// </summary>
        /// <param name="referenceDate">Reference date of the time range..</param>
        /// <param name="performance">performance.</param>
        /// <param name="high">high.</param>
        /// <param name="low">low.</param>
        /// <param name="averagePrice">Arithmetic mean of the notation&#39;s EOD closing prices for the given time range..</param>
        /// <param name="tradingVolume">tradingVolume.</param>
        /// <param name="tradingValue">Sum of the cash flow for all transactions of one notation over a certain time range. The cash flow of a transaction is its volume multiplied by its trade price..</param>
        /// <param name="volatility">Volatility of the daily logarithmic returns, annualized assuming 256 trading days per year..</param>
        public InlineResponse20072Data(DateTime referenceDate = default(DateTime), InlineResponse20072DataPerformance performance = default(InlineResponse20072DataPerformance), InlineResponse20072DataHigh high = default(InlineResponse20072DataHigh), InlineResponse20072DataLow low = default(InlineResponse20072DataLow), decimal averagePrice = default(decimal), InlineResponse20072DataTradingVolume tradingVolume = default(InlineResponse20072DataTradingVolume), decimal tradingValue = default(decimal), decimal volatility = default(decimal))
        {
            this.ReferenceDate = referenceDate;
            this.Performance = performance;
            this.High = high;
            this.Low = low;
            this.AveragePrice = averagePrice;
            this.TradingVolume = tradingVolume;
            this.TradingValue = tradingValue;
            this.Volatility = volatility;
        }

        /// <summary>
        /// Reference date of the time range.
        /// </summary>
        /// <value>Reference date of the time range.</value>
        [DataMember(Name = "referenceDate", EmitDefaultValue = false)]
        [JsonConverter(typeof(OpenAPIDateConverter))]
        public DateTime ReferenceDate { get; set; }

        /// <summary>
        /// Gets or Sets Performance
        /// </summary>
        [DataMember(Name = "performance", EmitDefaultValue = false)]
        public InlineResponse20072DataPerformance Performance { get; set; }

        /// <summary>
        /// Gets or Sets High
        /// </summary>
        [DataMember(Name = "high", EmitDefaultValue = false)]
        public InlineResponse20072DataHigh High { get; set; }

        /// <summary>
        /// Gets or Sets Low
        /// </summary>
        [DataMember(Name = "low", EmitDefaultValue = false)]
        public InlineResponse20072DataLow Low { get; set; }

        /// <summary>
        /// Arithmetic mean of the notation&#39;s EOD closing prices for the given time range.
        /// </summary>
        /// <value>Arithmetic mean of the notation&#39;s EOD closing prices for the given time range.</value>
        [DataMember(Name = "averagePrice", EmitDefaultValue = false)]
        public decimal AveragePrice { get; set; }

        /// <summary>
        /// Gets or Sets TradingVolume
        /// </summary>
        [DataMember(Name = "tradingVolume", EmitDefaultValue = false)]
        public InlineResponse20072DataTradingVolume TradingVolume { get; set; }

        /// <summary>
        /// Sum of the cash flow for all transactions of one notation over a certain time range. The cash flow of a transaction is its volume multiplied by its trade price.
        /// </summary>
        /// <value>Sum of the cash flow for all transactions of one notation over a certain time range. The cash flow of a transaction is its volume multiplied by its trade price.</value>
        [DataMember(Name = "tradingValue", EmitDefaultValue = false)]
        public decimal TradingValue { get; set; }

        /// <summary>
        /// Volatility of the daily logarithmic returns, annualized assuming 256 trading days per year.
        /// </summary>
        /// <value>Volatility of the daily logarithmic returns, annualized assuming 256 trading days per year.</value>
        [DataMember(Name = "volatility", EmitDefaultValue = false)]
        public decimal Volatility { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class InlineResponse20072Data {\n");
            sb.Append("  ReferenceDate: ").Append(ReferenceDate).Append("\n");
            sb.Append("  Performance: ").Append(Performance).Append("\n");
            sb.Append("  High: ").Append(High).Append("\n");
            sb.Append("  Low: ").Append(Low).Append("\n");
            sb.Append("  AveragePrice: ").Append(AveragePrice).Append("\n");
            sb.Append("  TradingVolume: ").Append(TradingVolume).Append("\n");
            sb.Append("  TradingValue: ").Append(TradingValue).Append("\n");
            sb.Append("  Volatility: ").Append(Volatility).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as InlineResponse20072Data);
        }

        /// <summary>
        /// Returns true if InlineResponse20072Data instances are equal
        /// </summary>
        /// <param name="input">Instance of InlineResponse20072Data to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(InlineResponse20072Data input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.ReferenceDate == input.ReferenceDate ||
                    (this.ReferenceDate != null &&
                    this.ReferenceDate.Equals(input.ReferenceDate))
                ) && 
                (
                    this.Performance == input.Performance ||
                    (this.Performance != null &&
                    this.Performance.Equals(input.Performance))
                ) && 
                (
                    this.High == input.High ||
                    (this.High != null &&
                    this.High.Equals(input.High))
                ) && 
                (
                    this.Low == input.Low ||
                    (this.Low != null &&
                    this.Low.Equals(input.Low))
                ) && 
                (
                    this.AveragePrice == input.AveragePrice ||
                    this.AveragePrice.Equals(input.AveragePrice)
                ) && 
                (
                    this.TradingVolume == input.TradingVolume ||
                    (this.TradingVolume != null &&
                    this.TradingVolume.Equals(input.TradingVolume))
                ) && 
                (
                    this.TradingValue == input.TradingValue ||
                    this.TradingValue.Equals(input.TradingValue)
                ) && 
                (
                    this.Volatility == input.Volatility ||
                    this.Volatility.Equals(input.Volatility)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ReferenceDate != null)
                {
                    hashCode = (hashCode * 59) + this.ReferenceDate.GetHashCode();
                }
                if (this.Performance != null)
                {
                    hashCode = (hashCode * 59) + this.Performance.GetHashCode();
                }
                if (this.High != null)
                {
                    hashCode = (hashCode * 59) + this.High.GetHashCode();
                }
                if (this.Low != null)
                {
                    hashCode = (hashCode * 59) + this.Low.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.AveragePrice.GetHashCode();
                if (this.TradingVolume != null)
                {
                    hashCode = (hashCode * 59) + this.TradingVolume.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.TradingValue.GetHashCode();
                hashCode = (hashCode * 59) + this.Volatility.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
