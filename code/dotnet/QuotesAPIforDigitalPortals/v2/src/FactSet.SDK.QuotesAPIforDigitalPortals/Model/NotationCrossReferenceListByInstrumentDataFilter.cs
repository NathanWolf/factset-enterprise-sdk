/*
 * Prime Developer Trial
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = FactSet.SDK.QuotesAPIforDigitalPortals.Client.OpenAPIDateConverter;

namespace FactSet.SDK.QuotesAPIforDigitalPortals.Model
{
    /// <summary>
    /// Criteria that filter the items in the response list; only items that match all of the criteria are returned.
    /// </summary>
    [DataContract(Name = "_notation_crossReference_listByInstrument_data_filter")]
    public partial class NotationCrossReferenceListByInstrumentDataFilter : IEquatable<NotationCrossReferenceListByInstrumentDataFilter>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="NotationCrossReferenceListByInstrumentDataFilter" /> class.
        /// </summary>
        /// <param name="markets">markets.</param>
        /// <param name="valueUnits">valueUnits.</param>
        /// <param name="onlyActive">If true, only active notations will be returned. The term \&quot;active\&quot; reflects the fact that notations and related data is not being deleted immediately after becoming irrelevant (e.g. because the source does not provide a price anymore), but remains in general retrievable for up to 6 months. (default to false).</param>
        public NotationCrossReferenceListByInstrumentDataFilter(NotationCrossReferenceListByInstrumentDataFilterMarkets markets = default(NotationCrossReferenceListByInstrumentDataFilterMarkets), NotationCrossReferenceListByInstrumentDataFilterValueUnits valueUnits = default(NotationCrossReferenceListByInstrumentDataFilterValueUnits), bool onlyActive = false)
        {
            this.Markets = markets;
            this.ValueUnits = valueUnits;
            this.OnlyActive = onlyActive;
        }

        /// <summary>
        /// Gets or Sets Markets
        /// </summary>
        [DataMember(Name = "markets", EmitDefaultValue = false)]
        public NotationCrossReferenceListByInstrumentDataFilterMarkets Markets { get; set; }

        /// <summary>
        /// Gets or Sets ValueUnits
        /// </summary>
        [DataMember(Name = "valueUnits", EmitDefaultValue = false)]
        public NotationCrossReferenceListByInstrumentDataFilterValueUnits ValueUnits { get; set; }

        /// <summary>
        /// If true, only active notations will be returned. The term \&quot;active\&quot; reflects the fact that notations and related data is not being deleted immediately after becoming irrelevant (e.g. because the source does not provide a price anymore), but remains in general retrievable for up to 6 months.
        /// </summary>
        /// <value>If true, only active notations will be returned. The term \&quot;active\&quot; reflects the fact that notations and related data is not being deleted immediately after becoming irrelevant (e.g. because the source does not provide a price anymore), but remains in general retrievable for up to 6 months.</value>
        [DataMember(Name = "onlyActive", EmitDefaultValue = true)]
        public bool OnlyActive { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class NotationCrossReferenceListByInstrumentDataFilter {\n");
            sb.Append("  Markets: ").Append(Markets).Append("\n");
            sb.Append("  ValueUnits: ").Append(ValueUnits).Append("\n");
            sb.Append("  OnlyActive: ").Append(OnlyActive).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as NotationCrossReferenceListByInstrumentDataFilter);
        }

        /// <summary>
        /// Returns true if NotationCrossReferenceListByInstrumentDataFilter instances are equal
        /// </summary>
        /// <param name="input">Instance of NotationCrossReferenceListByInstrumentDataFilter to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(NotationCrossReferenceListByInstrumentDataFilter input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Markets == input.Markets ||
                    (this.Markets != null &&
                    this.Markets.Equals(input.Markets))
                ) && 
                (
                    this.ValueUnits == input.ValueUnits ||
                    (this.ValueUnits != null &&
                    this.ValueUnits.Equals(input.ValueUnits))
                ) && 
                (
                    this.OnlyActive == input.OnlyActive ||
                    this.OnlyActive.Equals(input.OnlyActive)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Markets != null)
                    hashCode = hashCode * 59 + this.Markets.GetHashCode();
                if (this.ValueUnits != null)
                    hashCode = hashCode * 59 + this.ValueUnits.GetHashCode();
                hashCode = hashCode * 59 + this.OnlyActive.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
