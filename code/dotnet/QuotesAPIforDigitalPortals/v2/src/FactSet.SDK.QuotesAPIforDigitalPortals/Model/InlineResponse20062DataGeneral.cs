/*
 * Prime Developer Trial
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = FactSet.SDK.QuotesAPIforDigitalPortals.Client.OpenAPIDateConverter;

namespace FactSet.SDK.QuotesAPIforDigitalPortals.Model
{
    /// <summary>
    /// General information.
    /// </summary>
    [DataContract(Name = "inline_response_200_62_data_general")]
    public partial class InlineResponse20062DataGeneral : IEquatable<InlineResponse20062DataGeneral>, IValidatableObject
    {
        /// <summary>
        /// Information on the approval procedure undergone by the investment product.
        /// </summary>
        /// <value>Information on the approval procedure undergone by the investment product.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ApprovalProcedureEnum
        {
            /// <summary>
            /// Enum Pursuant for value: pursuant
            /// </summary>
            [EnumMember(Value = "pursuant")]
            Pursuant = 1,

            /// <summary>
            /// Enum Comparable for value: comparable
            /// </summary>
            [EnumMember(Value = "comparable")]
            Comparable = 2,

            /// <summary>
            /// Enum NotInAccordance for value: notInAccordance
            /// </summary>
            [EnumMember(Value = "notInAccordance")]
            NotInAccordance = 3,

            /// <summary>
            /// Enum NotRequired for value: notRequired
            /// </summary>
            [EnumMember(Value = "notRequired")]
            NotRequired = 4,

            /// <summary>
            /// Enum NotRelevant for value: notRelevant
            /// </summary>
            [EnumMember(Value = "notRelevant")]
            NotRelevant = 5

        }


        /// <summary>
        /// Information on the approval procedure undergone by the investment product.
        /// </summary>
        /// <value>Information on the approval procedure undergone by the investment product.</value>
        [DataMember(Name = "approvalProcedure", EmitDefaultValue = false)]
        public ApprovalProcedureEnum? ApprovalProcedure { get; set; }
        /// <summary>
        /// Indicates whether the investment product is considered a complex one.
        /// </summary>
        /// <value>Indicates whether the investment product is considered a complex one.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ComplexProductEnum
        {
            /// <summary>
            /// Enum Yes for value: yes
            /// </summary>
            [EnumMember(Value = "yes")]
            Yes = 1,

            /// <summary>
            /// Enum No for value: no
            /// </summary>
            [EnumMember(Value = "no")]
            No = 2,

            /// <summary>
            /// Enum Situational for value: situational
            /// </summary>
            [EnumMember(Value = "situational")]
            Situational = 3,

            /// <summary>
            /// Enum NotRelevant for value: notRelevant
            /// </summary>
            [EnumMember(Value = "notRelevant")]
            NotRelevant = 4

        }


        /// <summary>
        /// Indicates whether the investment product is considered a complex one.
        /// </summary>
        /// <value>Indicates whether the investment product is considered a complex one.</value>
        [DataMember(Name = "complexProduct", EmitDefaultValue = false)]
        public ComplexProductEnum? ComplexProduct { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="InlineResponse20062DataGeneral" /> class.
        /// </summary>
        /// <param name="isin">International Securities Identification Number (ISIN)..</param>
        /// <param name="name">Name of the investment product..</param>
        /// <param name="currency">currency.</param>
        /// <param name="reportingDate">The date to which the MiFID II data refers..</param>
        /// <param name="legalStructure">legalStructure.</param>
        /// <param name="fund">fund.</param>
        /// <param name="issuer">issuer.</param>
        /// <param name="guarantor">guarantor.</param>
        /// <param name="type">type.</param>
        /// <param name="leveragedOrContingent">Indicates whether the investment product has leverage or implies a contingent liability..</param>
        /// <param name="manufacturer">manufacturer.</param>
        /// <param name="approvalProcedure">Information on the approval procedure undergone by the investment product..</param>
        /// <param name="complexProduct">Indicates whether the investment product is considered a complex one..</param>
        public InlineResponse20062DataGeneral(string isin = default(string), string name = default(string), InlineResponse20062DataGeneralCurrency currency = default(InlineResponse20062DataGeneralCurrency), DateTime reportingDate = default(DateTime), InlineResponse20062DataGeneralLegalStructure legalStructure = default(InlineResponse20062DataGeneralLegalStructure), InlineResponse20062DataGeneralFund fund = default(InlineResponse20062DataGeneralFund), InlineResponse20062DataGeneralIssuer issuer = default(InlineResponse20062DataGeneralIssuer), InlineResponse20062DataGeneralGuarantor guarantor = default(InlineResponse20062DataGeneralGuarantor), InlineResponse20062DataGeneralType type = default(InlineResponse20062DataGeneralType), bool leveragedOrContingent = default(bool), InlineResponse20062DataGeneralManufacturer manufacturer = default(InlineResponse20062DataGeneralManufacturer), ApprovalProcedureEnum? approvalProcedure = default(ApprovalProcedureEnum?), ComplexProductEnum? complexProduct = default(ComplexProductEnum?))
        {
            this.Isin = isin;
            this.Name = name;
            this.Currency = currency;
            this.ReportingDate = reportingDate;
            this.LegalStructure = legalStructure;
            this.Fund = fund;
            this.Issuer = issuer;
            this.Guarantor = guarantor;
            this.Type = type;
            this.LeveragedOrContingent = leveragedOrContingent;
            this.Manufacturer = manufacturer;
            this.ApprovalProcedure = approvalProcedure;
            this.ComplexProduct = complexProduct;
        }

        /// <summary>
        /// International Securities Identification Number (ISIN).
        /// </summary>
        /// <value>International Securities Identification Number (ISIN).</value>
        [DataMember(Name = "isin", EmitDefaultValue = false)]
        public string Isin { get; set; }

        /// <summary>
        /// Name of the investment product.
        /// </summary>
        /// <value>Name of the investment product.</value>
        [DataMember(Name = "name", EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets Currency
        /// </summary>
        [DataMember(Name = "currency", EmitDefaultValue = false)]
        public InlineResponse20062DataGeneralCurrency Currency { get; set; }

        /// <summary>
        /// The date to which the MiFID II data refers.
        /// </summary>
        /// <value>The date to which the MiFID II data refers.</value>
        [DataMember(Name = "reportingDate", EmitDefaultValue = false)]
        [JsonConverter(typeof(OpenAPIDateConverter))]
        public DateTime ReportingDate { get; set; }

        /// <summary>
        /// Gets or Sets LegalStructure
        /// </summary>
        [DataMember(Name = "legalStructure", EmitDefaultValue = false)]
        public InlineResponse20062DataGeneralLegalStructure LegalStructure { get; set; }

        /// <summary>
        /// Gets or Sets Fund
        /// </summary>
        [DataMember(Name = "fund", EmitDefaultValue = false)]
        public InlineResponse20062DataGeneralFund Fund { get; set; }

        /// <summary>
        /// Gets or Sets Issuer
        /// </summary>
        [DataMember(Name = "issuer", EmitDefaultValue = false)]
        public InlineResponse20062DataGeneralIssuer Issuer { get; set; }

        /// <summary>
        /// Gets or Sets Guarantor
        /// </summary>
        [DataMember(Name = "guarantor", EmitDefaultValue = false)]
        public InlineResponse20062DataGeneralGuarantor Guarantor { get; set; }

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name = "type", EmitDefaultValue = false)]
        public InlineResponse20062DataGeneralType Type { get; set; }

        /// <summary>
        /// Indicates whether the investment product has leverage or implies a contingent liability.
        /// </summary>
        /// <value>Indicates whether the investment product has leverage or implies a contingent liability.</value>
        [DataMember(Name = "leveragedOrContingent", EmitDefaultValue = true)]
        public bool LeveragedOrContingent { get; set; }

        /// <summary>
        /// Gets or Sets Manufacturer
        /// </summary>
        [DataMember(Name = "manufacturer", EmitDefaultValue = false)]
        public InlineResponse20062DataGeneralManufacturer Manufacturer { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class InlineResponse20062DataGeneral {\n");
            sb.Append("  Isin: ").Append(Isin).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Currency: ").Append(Currency).Append("\n");
            sb.Append("  ReportingDate: ").Append(ReportingDate).Append("\n");
            sb.Append("  LegalStructure: ").Append(LegalStructure).Append("\n");
            sb.Append("  Fund: ").Append(Fund).Append("\n");
            sb.Append("  Issuer: ").Append(Issuer).Append("\n");
            sb.Append("  Guarantor: ").Append(Guarantor).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  LeveragedOrContingent: ").Append(LeveragedOrContingent).Append("\n");
            sb.Append("  Manufacturer: ").Append(Manufacturer).Append("\n");
            sb.Append("  ApprovalProcedure: ").Append(ApprovalProcedure).Append("\n");
            sb.Append("  ComplexProduct: ").Append(ComplexProduct).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as InlineResponse20062DataGeneral);
        }

        /// <summary>
        /// Returns true if InlineResponse20062DataGeneral instances are equal
        /// </summary>
        /// <param name="input">Instance of InlineResponse20062DataGeneral to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(InlineResponse20062DataGeneral input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Isin == input.Isin ||
                    (this.Isin != null &&
                    this.Isin.Equals(input.Isin))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Currency == input.Currency ||
                    (this.Currency != null &&
                    this.Currency.Equals(input.Currency))
                ) && 
                (
                    this.ReportingDate == input.ReportingDate ||
                    (this.ReportingDate != null &&
                    this.ReportingDate.Equals(input.ReportingDate))
                ) && 
                (
                    this.LegalStructure == input.LegalStructure ||
                    (this.LegalStructure != null &&
                    this.LegalStructure.Equals(input.LegalStructure))
                ) && 
                (
                    this.Fund == input.Fund ||
                    (this.Fund != null &&
                    this.Fund.Equals(input.Fund))
                ) && 
                (
                    this.Issuer == input.Issuer ||
                    (this.Issuer != null &&
                    this.Issuer.Equals(input.Issuer))
                ) && 
                (
                    this.Guarantor == input.Guarantor ||
                    (this.Guarantor != null &&
                    this.Guarantor.Equals(input.Guarantor))
                ) && 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.LeveragedOrContingent == input.LeveragedOrContingent ||
                    this.LeveragedOrContingent.Equals(input.LeveragedOrContingent)
                ) && 
                (
                    this.Manufacturer == input.Manufacturer ||
                    (this.Manufacturer != null &&
                    this.Manufacturer.Equals(input.Manufacturer))
                ) && 
                (
                    this.ApprovalProcedure == input.ApprovalProcedure ||
                    this.ApprovalProcedure.Equals(input.ApprovalProcedure)
                ) && 
                (
                    this.ComplexProduct == input.ComplexProduct ||
                    this.ComplexProduct.Equals(input.ComplexProduct)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Isin != null)
                    hashCode = hashCode * 59 + this.Isin.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.Currency != null)
                    hashCode = hashCode * 59 + this.Currency.GetHashCode();
                if (this.ReportingDate != null)
                    hashCode = hashCode * 59 + this.ReportingDate.GetHashCode();
                if (this.LegalStructure != null)
                    hashCode = hashCode * 59 + this.LegalStructure.GetHashCode();
                if (this.Fund != null)
                    hashCode = hashCode * 59 + this.Fund.GetHashCode();
                if (this.Issuer != null)
                    hashCode = hashCode * 59 + this.Issuer.GetHashCode();
                if (this.Guarantor != null)
                    hashCode = hashCode * 59 + this.Guarantor.GetHashCode();
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                hashCode = hashCode * 59 + this.LeveragedOrContingent.GetHashCode();
                if (this.Manufacturer != null)
                    hashCode = hashCode * 59 + this.Manufacturer.GetHashCode();
                hashCode = hashCode * 59 + this.ApprovalProcedure.GetHashCode();
                hashCode = hashCode * 59 + this.ComplexProduct.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
