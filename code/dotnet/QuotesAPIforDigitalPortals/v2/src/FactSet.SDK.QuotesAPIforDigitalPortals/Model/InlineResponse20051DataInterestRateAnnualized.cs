/*
 * Prime Developer Trial
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = FactSet.SDK.QuotesAPIforDigitalPortals.Client.OpenAPIDateConverter;

namespace FactSet.SDK.QuotesAPIforDigitalPortals.Model
{
    /// <summary>
    /// Interest rate on an annual basis. Minimum/maximum interest rates and a fixed interest rate are, in general, mutually exclusive. However, for an instrument with a variable interest rate (i.e. the attribute &#x60;coupons.interestRate.type&#x60; has the value 4 or 6), a fixed interest rate might be provided if already determined for the respective period (current or past).
    /// </summary>
    [DataContract(Name = "inline_response_200_51_data_interestRate_annualized")]
    public partial class InlineResponse20051DataInterestRateAnnualized : IEquatable<InlineResponse20051DataInterestRateAnnualized>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="InlineResponse20051DataInterestRateAnnualized" /> class.
        /// </summary>
        /// <param name="_fixed">Fixed interest rate..</param>
        /// <param name="minimum">Minimum interest rate..</param>
        /// <param name="maximum">Maximum interest rate..</param>
        public InlineResponse20051DataInterestRateAnnualized(decimal _fixed = default(decimal), decimal minimum = default(decimal), decimal maximum = default(decimal))
        {
            this.Fixed = _fixed;
            this.Minimum = minimum;
            this.Maximum = maximum;
        }

        /// <summary>
        /// Fixed interest rate.
        /// </summary>
        /// <value>Fixed interest rate.</value>
        [DataMember(Name = "fixed", EmitDefaultValue = false)]
        public decimal Fixed { get; set; }

        /// <summary>
        /// Minimum interest rate.
        /// </summary>
        /// <value>Minimum interest rate.</value>
        [DataMember(Name = "minimum", EmitDefaultValue = false)]
        public decimal Minimum { get; set; }

        /// <summary>
        /// Maximum interest rate.
        /// </summary>
        /// <value>Maximum interest rate.</value>
        [DataMember(Name = "maximum", EmitDefaultValue = false)]
        public decimal Maximum { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class InlineResponse20051DataInterestRateAnnualized {\n");
            sb.Append("  Fixed: ").Append(Fixed).Append("\n");
            sb.Append("  Minimum: ").Append(Minimum).Append("\n");
            sb.Append("  Maximum: ").Append(Maximum).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as InlineResponse20051DataInterestRateAnnualized);
        }

        /// <summary>
        /// Returns true if InlineResponse20051DataInterestRateAnnualized instances are equal
        /// </summary>
        /// <param name="input">Instance of InlineResponse20051DataInterestRateAnnualized to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(InlineResponse20051DataInterestRateAnnualized input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Fixed == input.Fixed ||
                    this.Fixed.Equals(input.Fixed)
                ) && 
                (
                    this.Minimum == input.Minimum ||
                    this.Minimum.Equals(input.Minimum)
                ) && 
                (
                    this.Maximum == input.Maximum ||
                    this.Maximum.Equals(input.Maximum)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.Fixed.GetHashCode();
                hashCode = (hashCode * 59) + this.Minimum.GetHashCode();
                hashCode = (hashCode * 59) + this.Maximum.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
