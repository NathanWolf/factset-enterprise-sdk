/*
 * Prime Developer Trial
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = FactSet.SDK.QuotesAPIforDigitalPortals.Client.OpenAPIDateConverter;

namespace FactSet.SDK.QuotesAPIforDigitalPortals.Model
{
    /// <summary>
    /// InlineResponse20080Data
    /// </summary>
    [DataContract(Name = "inline_response_200_80_data")]
    public partial class InlineResponse20080Data : IEquatable<InlineResponse20080Data>, IValidatableObject
    {
        /// <summary>
        /// Quality of the price.
        /// </summary>
        /// <value>Quality of the price.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum QualityEnum
        {
            /// <summary>
            /// Enum RLT for value: RLT
            /// </summary>
            [EnumMember(Value = "RLT")]
            RLT = 1,

            /// <summary>
            /// Enum DLY for value: DLY
            /// </summary>
            [EnumMember(Value = "DLY")]
            DLY = 2,

            /// <summary>
            /// Enum EOD for value: EOD
            /// </summary>
            [EnumMember(Value = "EOD")]
            EOD = 3

        }


        /// <summary>
        /// Quality of the price.
        /// </summary>
        /// <value>Quality of the price.</value>
        [DataMember(Name = "quality", EmitDefaultValue = false)]
        public QualityEnum? Quality { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="InlineResponse20080Data" /> class.
        /// </summary>
        /// <param name="id">Identifier of the notation..</param>
        /// <param name="valueUnit">valueUnit.</param>
        /// <param name="currency">currency.</param>
        /// <param name="market">market.</param>
        /// <param name="quality">Quality of the price..</param>
        /// <param name="latest">latest.</param>
        /// <param name="first">first.</param>
        /// <param name="low">low.</param>
        /// <param name="high">high.</param>
        /// <param name="previousClose">previousClose.</param>
        /// <param name="accumulated">accumulated.</param>
        /// <param name="status">status.</param>
        public InlineResponse20080Data(string id = default(string), InlineResponse20079DataValueUnit valueUnit = default(InlineResponse20079DataValueUnit), InlineResponse20079DataCurrency currency = default(InlineResponse20079DataCurrency), InlineResponse20079DataMarket market = default(InlineResponse20079DataMarket), QualityEnum? quality = default(QualityEnum?), InlineResponse20080Latest latest = default(InlineResponse20080Latest), InlineResponse20080First first = default(InlineResponse20080First), InlineResponse20080Low low = default(InlineResponse20080Low), InlineResponse20080High high = default(InlineResponse20080High), InlineResponse20080PreviousClose previousClose = default(InlineResponse20080PreviousClose), InlineResponse20080Accumulated accumulated = default(InlineResponse20080Accumulated), InlineResponse20065Status status = default(InlineResponse20065Status))
        {
            this.Id = id;
            this.ValueUnit = valueUnit;
            this.Currency = currency;
            this.Market = market;
            this.Quality = quality;
            this.Latest = latest;
            this.First = first;
            this.Low = low;
            this.High = high;
            this.PreviousClose = previousClose;
            this.Accumulated = accumulated;
            this.Status = status;
        }

        /// <summary>
        /// Identifier of the notation.
        /// </summary>
        /// <value>Identifier of the notation.</value>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets ValueUnit
        /// </summary>
        [DataMember(Name = "valueUnit", EmitDefaultValue = false)]
        public InlineResponse20079DataValueUnit ValueUnit { get; set; }

        /// <summary>
        /// Gets or Sets Currency
        /// </summary>
        [DataMember(Name = "currency", EmitDefaultValue = false)]
        public InlineResponse20079DataCurrency Currency { get; set; }

        /// <summary>
        /// Gets or Sets Market
        /// </summary>
        [DataMember(Name = "market", EmitDefaultValue = false)]
        public InlineResponse20079DataMarket Market { get; set; }

        /// <summary>
        /// Gets or Sets Latest
        /// </summary>
        [DataMember(Name = "latest", EmitDefaultValue = false)]
        public InlineResponse20080Latest Latest { get; set; }

        /// <summary>
        /// Gets or Sets First
        /// </summary>
        [DataMember(Name = "first", EmitDefaultValue = false)]
        public InlineResponse20080First First { get; set; }

        /// <summary>
        /// Gets or Sets Low
        /// </summary>
        [DataMember(Name = "low", EmitDefaultValue = false)]
        public InlineResponse20080Low Low { get; set; }

        /// <summary>
        /// Gets or Sets High
        /// </summary>
        [DataMember(Name = "high", EmitDefaultValue = false)]
        public InlineResponse20080High High { get; set; }

        /// <summary>
        /// Gets or Sets PreviousClose
        /// </summary>
        [DataMember(Name = "previousClose", EmitDefaultValue = false)]
        public InlineResponse20080PreviousClose PreviousClose { get; set; }

        /// <summary>
        /// Gets or Sets Accumulated
        /// </summary>
        [DataMember(Name = "accumulated", EmitDefaultValue = false)]
        public InlineResponse20080Accumulated Accumulated { get; set; }

        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [DataMember(Name = "status", EmitDefaultValue = false)]
        public InlineResponse20065Status Status { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class InlineResponse20080Data {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  ValueUnit: ").Append(ValueUnit).Append("\n");
            sb.Append("  Currency: ").Append(Currency).Append("\n");
            sb.Append("  Market: ").Append(Market).Append("\n");
            sb.Append("  Quality: ").Append(Quality).Append("\n");
            sb.Append("  Latest: ").Append(Latest).Append("\n");
            sb.Append("  First: ").Append(First).Append("\n");
            sb.Append("  Low: ").Append(Low).Append("\n");
            sb.Append("  High: ").Append(High).Append("\n");
            sb.Append("  PreviousClose: ").Append(PreviousClose).Append("\n");
            sb.Append("  Accumulated: ").Append(Accumulated).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as InlineResponse20080Data);
        }

        /// <summary>
        /// Returns true if InlineResponse20080Data instances are equal
        /// </summary>
        /// <param name="input">Instance of InlineResponse20080Data to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(InlineResponse20080Data input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.ValueUnit == input.ValueUnit ||
                    (this.ValueUnit != null &&
                    this.ValueUnit.Equals(input.ValueUnit))
                ) && 
                (
                    this.Currency == input.Currency ||
                    (this.Currency != null &&
                    this.Currency.Equals(input.Currency))
                ) && 
                (
                    this.Market == input.Market ||
                    (this.Market != null &&
                    this.Market.Equals(input.Market))
                ) && 
                (
                    this.Quality == input.Quality ||
                    this.Quality.Equals(input.Quality)
                ) && 
                (
                    this.Latest == input.Latest ||
                    (this.Latest != null &&
                    this.Latest.Equals(input.Latest))
                ) && 
                (
                    this.First == input.First ||
                    (this.First != null &&
                    this.First.Equals(input.First))
                ) && 
                (
                    this.Low == input.Low ||
                    (this.Low != null &&
                    this.Low.Equals(input.Low))
                ) && 
                (
                    this.High == input.High ||
                    (this.High != null &&
                    this.High.Equals(input.High))
                ) && 
                (
                    this.PreviousClose == input.PreviousClose ||
                    (this.PreviousClose != null &&
                    this.PreviousClose.Equals(input.PreviousClose))
                ) && 
                (
                    this.Accumulated == input.Accumulated ||
                    (this.Accumulated != null &&
                    this.Accumulated.Equals(input.Accumulated))
                ) && 
                (
                    this.Status == input.Status ||
                    (this.Status != null &&
                    this.Status.Equals(input.Status))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.ValueUnit != null)
                    hashCode = hashCode * 59 + this.ValueUnit.GetHashCode();
                if (this.Currency != null)
                    hashCode = hashCode * 59 + this.Currency.GetHashCode();
                if (this.Market != null)
                    hashCode = hashCode * 59 + this.Market.GetHashCode();
                hashCode = hashCode * 59 + this.Quality.GetHashCode();
                if (this.Latest != null)
                    hashCode = hashCode * 59 + this.Latest.GetHashCode();
                if (this.First != null)
                    hashCode = hashCode * 59 + this.First.GetHashCode();
                if (this.Low != null)
                    hashCode = hashCode * 59 + this.Low.GetHashCode();
                if (this.High != null)
                    hashCode = hashCode * 59 + this.High.GetHashCode();
                if (this.PreviousClose != null)
                    hashCode = hashCode * 59 + this.PreviousClose.GetHashCode();
                if (this.Accumulated != null)
                    hashCode = hashCode * 59 + this.Accumulated.GetHashCode();
                if (this.Status != null)
                    hashCode = hashCode * 59 + this.Status.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
