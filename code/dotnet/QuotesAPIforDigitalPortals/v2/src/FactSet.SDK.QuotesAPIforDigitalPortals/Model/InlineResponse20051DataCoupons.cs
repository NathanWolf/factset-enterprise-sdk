/*
 * Prime Developer Trial
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = FactSet.SDK.QuotesAPIforDigitalPortals.Client.OpenAPIDateConverter;

namespace FactSet.SDK.QuotesAPIforDigitalPortals.Model
{
    /// <summary>
    /// InlineResponse20051DataCoupons
    /// </summary>
    [DataContract(Name = "inline_response_200_51_data_coupons")]
    public partial class InlineResponse20051DataCoupons : IEquatable<InlineResponse20051DataCoupons>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="InlineResponse20051DataCoupons" /> class.
        /// </summary>
        /// <param name="period">period.</param>
        /// <param name="paymentDate">Payment date of the coupon, usually 2 days after the ending date of the coupon period. For the latter, see attribute &#x60;coupons.period.end&#x60;..</param>
        /// <param name="interestRate">interestRate.</param>
        public InlineResponse20051DataCoupons(InlineResponse20051DataPeriod period = default(InlineResponse20051DataPeriod), DateTime paymentDate = default(DateTime), InlineResponse20051DataInterestRate interestRate = default(InlineResponse20051DataInterestRate))
        {
            this.Period = period;
            this.PaymentDate = paymentDate;
            this.InterestRate = interestRate;
        }

        /// <summary>
        /// Gets or Sets Period
        /// </summary>
        [DataMember(Name = "period", EmitDefaultValue = false)]
        public InlineResponse20051DataPeriod Period { get; set; }

        /// <summary>
        /// Payment date of the coupon, usually 2 days after the ending date of the coupon period. For the latter, see attribute &#x60;coupons.period.end&#x60;.
        /// </summary>
        /// <value>Payment date of the coupon, usually 2 days after the ending date of the coupon period. For the latter, see attribute &#x60;coupons.period.end&#x60;.</value>
        [DataMember(Name = "paymentDate", EmitDefaultValue = false)]
        [JsonConverter(typeof(OpenAPIDateConverter))]
        public DateTime PaymentDate { get; set; }

        /// <summary>
        /// Gets or Sets InterestRate
        /// </summary>
        [DataMember(Name = "interestRate", EmitDefaultValue = false)]
        public InlineResponse20051DataInterestRate InterestRate { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class InlineResponse20051DataCoupons {\n");
            sb.Append("  Period: ").Append(Period).Append("\n");
            sb.Append("  PaymentDate: ").Append(PaymentDate).Append("\n");
            sb.Append("  InterestRate: ").Append(InterestRate).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as InlineResponse20051DataCoupons);
        }

        /// <summary>
        /// Returns true if InlineResponse20051DataCoupons instances are equal
        /// </summary>
        /// <param name="input">Instance of InlineResponse20051DataCoupons to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(InlineResponse20051DataCoupons input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Period == input.Period ||
                    (this.Period != null &&
                    this.Period.Equals(input.Period))
                ) && 
                (
                    this.PaymentDate == input.PaymentDate ||
                    (this.PaymentDate != null &&
                    this.PaymentDate.Equals(input.PaymentDate))
                ) && 
                (
                    this.InterestRate == input.InterestRate ||
                    (this.InterestRate != null &&
                    this.InterestRate.Equals(input.InterestRate))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Period != null)
                    hashCode = hashCode * 59 + this.Period.GetHashCode();
                if (this.PaymentDate != null)
                    hashCode = hashCode * 59 + this.PaymentDate.GetHashCode();
                if (this.InterestRate != null)
                    hashCode = hashCode * 59 + this.InterestRate.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
