/*
 * Prime Developer Trial
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = FactSet.SDK.QuotesAPIforDigitalPortals.Client.OpenAPIDateConverter;

namespace FactSet.SDK.QuotesAPIforDigitalPortals.Model
{
    /// <summary>
    /// Disclosure on costs and charges in the latest available post sale period, providing the latest available figures.
    /// </summary>
    [DataContract(Name = "inline_response_200_62_data_costsAndCharges_exPost")]
    public partial class InlineResponse20062DataCostsAndChargesExPost : IEquatable<InlineResponse20062DataCostsAndChargesExPost>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="InlineResponse20062DataCostsAndChargesExPost" /> class.
        /// </summary>
        /// <param name="oneOffEntryCost">oneOffEntryCost.</param>
        /// <param name="oneOffExitCost">oneOffExitCost.</param>
        /// <param name="ongoingCosts">ongoingCosts.</param>
        /// <param name="ongoingCostAccumulated">ongoingCostAccumulated.</param>
        /// <param name="managementFee">managementFee.</param>
        /// <param name="distributionFee">distributionFee.</param>
        /// <param name="transactionCosts">transactionCosts.</param>
        /// <param name="incidentalCosts">incidentalCosts.</param>
        public InlineResponse20062DataCostsAndChargesExPost(InlineResponse20062DataCostsAndChargesExPostOneOffEntryCost oneOffEntryCost = default(InlineResponse20062DataCostsAndChargesExPostOneOffEntryCost), InlineResponse20062DataCostsAndChargesExPostOneOffExitCost oneOffExitCost = default(InlineResponse20062DataCostsAndChargesExPostOneOffExitCost), InlineResponse20062DataCostsAndChargesExPostOngoingCosts ongoingCosts = default(InlineResponse20062DataCostsAndChargesExPostOngoingCosts), InlineResponse20062DataCostsAndChargesExPostOngoingCostAccumulated ongoingCostAccumulated = default(InlineResponse20062DataCostsAndChargesExPostOngoingCostAccumulated), InlineResponse20062DataCostsAndChargesExPostManagementFee managementFee = default(InlineResponse20062DataCostsAndChargesExPostManagementFee), InlineResponse20062DataCostsAndChargesExPostDistributionFee distributionFee = default(InlineResponse20062DataCostsAndChargesExPostDistributionFee), InlineResponse20062DataCostsAndChargesExPostTransactionCosts transactionCosts = default(InlineResponse20062DataCostsAndChargesExPostTransactionCosts), InlineResponse20062DataCostsAndChargesExPostIncidentalCosts incidentalCosts = default(InlineResponse20062DataCostsAndChargesExPostIncidentalCosts))
        {
            this.OneOffEntryCost = oneOffEntryCost;
            this.OneOffExitCost = oneOffExitCost;
            this.OngoingCosts = ongoingCosts;
            this.OngoingCostAccumulated = ongoingCostAccumulated;
            this.ManagementFee = managementFee;
            this.DistributionFee = distributionFee;
            this.TransactionCosts = transactionCosts;
            this.IncidentalCosts = incidentalCosts;
        }

        /// <summary>
        /// Gets or Sets OneOffEntryCost
        /// </summary>
        [DataMember(Name = "oneOffEntryCost", EmitDefaultValue = false)]
        public InlineResponse20062DataCostsAndChargesExPostOneOffEntryCost OneOffEntryCost { get; set; }

        /// <summary>
        /// Gets or Sets OneOffExitCost
        /// </summary>
        [DataMember(Name = "oneOffExitCost", EmitDefaultValue = false)]
        public InlineResponse20062DataCostsAndChargesExPostOneOffExitCost OneOffExitCost { get; set; }

        /// <summary>
        /// Gets or Sets OngoingCosts
        /// </summary>
        [DataMember(Name = "ongoingCosts", EmitDefaultValue = false)]
        public InlineResponse20062DataCostsAndChargesExPostOngoingCosts OngoingCosts { get; set; }

        /// <summary>
        /// Gets or Sets OngoingCostAccumulated
        /// </summary>
        [DataMember(Name = "ongoingCostAccumulated", EmitDefaultValue = false)]
        public InlineResponse20062DataCostsAndChargesExPostOngoingCostAccumulated OngoingCostAccumulated { get; set; }

        /// <summary>
        /// Gets or Sets ManagementFee
        /// </summary>
        [DataMember(Name = "managementFee", EmitDefaultValue = false)]
        public InlineResponse20062DataCostsAndChargesExPostManagementFee ManagementFee { get; set; }

        /// <summary>
        /// Gets or Sets DistributionFee
        /// </summary>
        [DataMember(Name = "distributionFee", EmitDefaultValue = false)]
        public InlineResponse20062DataCostsAndChargesExPostDistributionFee DistributionFee { get; set; }

        /// <summary>
        /// Gets or Sets TransactionCosts
        /// </summary>
        [DataMember(Name = "transactionCosts", EmitDefaultValue = false)]
        public InlineResponse20062DataCostsAndChargesExPostTransactionCosts TransactionCosts { get; set; }

        /// <summary>
        /// Gets or Sets IncidentalCosts
        /// </summary>
        [DataMember(Name = "incidentalCosts", EmitDefaultValue = false)]
        public InlineResponse20062DataCostsAndChargesExPostIncidentalCosts IncidentalCosts { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class InlineResponse20062DataCostsAndChargesExPost {\n");
            sb.Append("  OneOffEntryCost: ").Append(OneOffEntryCost).Append("\n");
            sb.Append("  OneOffExitCost: ").Append(OneOffExitCost).Append("\n");
            sb.Append("  OngoingCosts: ").Append(OngoingCosts).Append("\n");
            sb.Append("  OngoingCostAccumulated: ").Append(OngoingCostAccumulated).Append("\n");
            sb.Append("  ManagementFee: ").Append(ManagementFee).Append("\n");
            sb.Append("  DistributionFee: ").Append(DistributionFee).Append("\n");
            sb.Append("  TransactionCosts: ").Append(TransactionCosts).Append("\n");
            sb.Append("  IncidentalCosts: ").Append(IncidentalCosts).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as InlineResponse20062DataCostsAndChargesExPost);
        }

        /// <summary>
        /// Returns true if InlineResponse20062DataCostsAndChargesExPost instances are equal
        /// </summary>
        /// <param name="input">Instance of InlineResponse20062DataCostsAndChargesExPost to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(InlineResponse20062DataCostsAndChargesExPost input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.OneOffEntryCost == input.OneOffEntryCost ||
                    (this.OneOffEntryCost != null &&
                    this.OneOffEntryCost.Equals(input.OneOffEntryCost))
                ) && 
                (
                    this.OneOffExitCost == input.OneOffExitCost ||
                    (this.OneOffExitCost != null &&
                    this.OneOffExitCost.Equals(input.OneOffExitCost))
                ) && 
                (
                    this.OngoingCosts == input.OngoingCosts ||
                    (this.OngoingCosts != null &&
                    this.OngoingCosts.Equals(input.OngoingCosts))
                ) && 
                (
                    this.OngoingCostAccumulated == input.OngoingCostAccumulated ||
                    (this.OngoingCostAccumulated != null &&
                    this.OngoingCostAccumulated.Equals(input.OngoingCostAccumulated))
                ) && 
                (
                    this.ManagementFee == input.ManagementFee ||
                    (this.ManagementFee != null &&
                    this.ManagementFee.Equals(input.ManagementFee))
                ) && 
                (
                    this.DistributionFee == input.DistributionFee ||
                    (this.DistributionFee != null &&
                    this.DistributionFee.Equals(input.DistributionFee))
                ) && 
                (
                    this.TransactionCosts == input.TransactionCosts ||
                    (this.TransactionCosts != null &&
                    this.TransactionCosts.Equals(input.TransactionCosts))
                ) && 
                (
                    this.IncidentalCosts == input.IncidentalCosts ||
                    (this.IncidentalCosts != null &&
                    this.IncidentalCosts.Equals(input.IncidentalCosts))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.OneOffEntryCost != null)
                    hashCode = hashCode * 59 + this.OneOffEntryCost.GetHashCode();
                if (this.OneOffExitCost != null)
                    hashCode = hashCode * 59 + this.OneOffExitCost.GetHashCode();
                if (this.OngoingCosts != null)
                    hashCode = hashCode * 59 + this.OngoingCosts.GetHashCode();
                if (this.OngoingCostAccumulated != null)
                    hashCode = hashCode * 59 + this.OngoingCostAccumulated.GetHashCode();
                if (this.ManagementFee != null)
                    hashCode = hashCode * 59 + this.ManagementFee.GetHashCode();
                if (this.DistributionFee != null)
                    hashCode = hashCode * 59 + this.DistributionFee.GetHashCode();
                if (this.TransactionCosts != null)
                    hashCode = hashCode * 59 + this.TransactionCosts.GetHashCode();
                if (this.IncidentalCosts != null)
                    hashCode = hashCode * 59 + this.IncidentalCosts.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
