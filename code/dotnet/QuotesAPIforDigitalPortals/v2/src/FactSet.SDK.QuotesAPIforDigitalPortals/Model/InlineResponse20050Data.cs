/*
 * Prime Developer Trial
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = FactSet.SDK.QuotesAPIforDigitalPortals.Client.OpenAPIDateConverter;

namespace FactSet.SDK.QuotesAPIforDigitalPortals.Model
{
    /// <summary>
    /// Composite instrument and its components.
    /// </summary>
    [DataContract(Name = "inline_response_200_50_data")]
    public partial class InlineResponse20050Data : IEquatable<InlineResponse20050Data>, IValidatableObject
    {
        /// <summary>
        /// Type of the composite instrument.
        /// </summary>
        /// <value>Type of the composite instrument.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TypeCompositeEnum
        {
            /// <summary>
            /// Enum Basket for value: basket
            /// </summary>
            [EnumMember(Value = "basket")]
            Basket = 1,

            /// <summary>
            /// Enum AlphaStructure for value: alphaStructure
            /// </summary>
            [EnumMember(Value = "alphaStructure")]
            AlphaStructure = 2,

            /// <summary>
            /// Enum FuturesSpread for value: futuresSpread
            /// </summary>
            [EnumMember(Value = "futuresSpread")]
            FuturesSpread = 3,

            /// <summary>
            /// Enum FactorIndex for value: factorIndex
            /// </summary>
            [EnumMember(Value = "factorIndex")]
            FactorIndex = 4

        }


        /// <summary>
        /// Type of the composite instrument.
        /// </summary>
        /// <value>Type of the composite instrument.</value>
        [DataMember(Name = "typeComposite", EmitDefaultValue = false)]
        public TypeCompositeEnum? TypeComposite { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="InlineResponse20050Data" /> class.
        /// </summary>
        /// <param name="typeComposite">Type of the composite instrument..</param>
        /// <param name="activeManagement">If set to true, the composite instrument is actively managed..</param>
        /// <param name="managementFee">Management fee p.a. of the composite instrument..</param>
        /// <param name="components">Information regarding the components of the composite instrument..</param>
        public InlineResponse20050Data(TypeCompositeEnum? typeComposite = default(TypeCompositeEnum?), bool activeManagement = default(bool), decimal managementFee = default(decimal), List<InlineResponse20050DataComponents> components = default(List<InlineResponse20050DataComponents>))
        {
            this.TypeComposite = typeComposite;
            this.ActiveManagement = activeManagement;
            this.ManagementFee = managementFee;
            this.Components = components;
        }

        /// <summary>
        /// If set to true, the composite instrument is actively managed.
        /// </summary>
        /// <value>If set to true, the composite instrument is actively managed.</value>
        [DataMember(Name = "activeManagement", EmitDefaultValue = true)]
        public bool ActiveManagement { get; set; }

        /// <summary>
        /// Management fee p.a. of the composite instrument.
        /// </summary>
        /// <value>Management fee p.a. of the composite instrument.</value>
        [DataMember(Name = "managementFee", EmitDefaultValue = false)]
        public decimal ManagementFee { get; set; }

        /// <summary>
        /// Information regarding the components of the composite instrument.
        /// </summary>
        /// <value>Information regarding the components of the composite instrument.</value>
        [DataMember(Name = "components", EmitDefaultValue = false)]
        public List<InlineResponse20050DataComponents> Components { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class InlineResponse20050Data {\n");
            sb.Append("  TypeComposite: ").Append(TypeComposite).Append("\n");
            sb.Append("  ActiveManagement: ").Append(ActiveManagement).Append("\n");
            sb.Append("  ManagementFee: ").Append(ManagementFee).Append("\n");
            sb.Append("  Components: ").Append(Components).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as InlineResponse20050Data);
        }

        /// <summary>
        /// Returns true if InlineResponse20050Data instances are equal
        /// </summary>
        /// <param name="input">Instance of InlineResponse20050Data to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(InlineResponse20050Data input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.TypeComposite == input.TypeComposite ||
                    this.TypeComposite.Equals(input.TypeComposite)
                ) && 
                (
                    this.ActiveManagement == input.ActiveManagement ||
                    this.ActiveManagement.Equals(input.ActiveManagement)
                ) && 
                (
                    this.ManagementFee == input.ManagementFee ||
                    this.ManagementFee.Equals(input.ManagementFee)
                ) && 
                (
                    this.Components == input.Components ||
                    this.Components != null &&
                    input.Components != null &&
                    this.Components.SequenceEqual(input.Components)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = hashCode * 59 + this.TypeComposite.GetHashCode();
                hashCode = hashCode * 59 + this.ActiveManagement.GetHashCode();
                hashCode = hashCode * 59 + this.ManagementFee.GetHashCode();
                if (this.Components != null)
                    hashCode = hashCode * 59 + this.Components.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
