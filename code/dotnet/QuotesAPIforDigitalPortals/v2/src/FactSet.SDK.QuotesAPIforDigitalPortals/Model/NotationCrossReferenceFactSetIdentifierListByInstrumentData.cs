/*
 * Prime Developer Trial
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = FactSet.SDK.QuotesAPIforDigitalPortals.Client.OpenAPIDateConverter;

namespace FactSet.SDK.QuotesAPIforDigitalPortals.Model
{
    /// <summary>
    /// The data member contains the request&#39;s primary data.
    /// </summary>
    [DataContract(Name = "_notation_crossReference_factSetIdentifier_listByInstrument_data")]
    public partial class NotationCrossReferenceFactSetIdentifierListByInstrumentData : IEquatable<NotationCrossReferenceFactSetIdentifierListByInstrumentData>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="NotationCrossReferenceFactSetIdentifierListByInstrumentData" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected NotationCrossReferenceFactSetIdentifierListByInstrumentData() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="NotationCrossReferenceFactSetIdentifierListByInstrumentData" /> class.
        /// </summary>
        /// <param name="id">Identifier of an instrument. (required).</param>
        public NotationCrossReferenceFactSetIdentifierListByInstrumentData(string id = default(string))
        {
            // to ensure "id" is required (not null)
            if (id == null) {
                throw new ArgumentNullException("id is a required property for NotationCrossReferenceFactSetIdentifierListByInstrumentData and cannot be null");
            }
            this.Id = id;
        }

        /// <summary>
        /// Identifier of an instrument.
        /// </summary>
        /// <value>Identifier of an instrument.</value>
        [DataMember(Name = "id", IsRequired = true, EmitDefaultValue = false)]
        public string Id { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class NotationCrossReferenceFactSetIdentifierListByInstrumentData {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as NotationCrossReferenceFactSetIdentifierListByInstrumentData);
        }

        /// <summary>
        /// Returns true if NotationCrossReferenceFactSetIdentifierListByInstrumentData instances are equal
        /// </summary>
        /// <param name="input">Instance of NotationCrossReferenceFactSetIdentifierListByInstrumentData to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(NotationCrossReferenceFactSetIdentifierListByInstrumentData input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
