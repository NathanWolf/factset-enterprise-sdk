/*
 * Prime Developer Trial
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = FactSet.SDK.QuotesAPIforDigitalPortals.Client.OpenAPIDateConverter;

namespace FactSet.SDK.QuotesAPIforDigitalPortals.Model
{
    /// <summary>
    /// The data member contains the request&#39;s primary data.
    /// </summary>
    [DataContract(Name = "_notation_searchByText_data")]
    public partial class NotationSearchByTextData : IEquatable<NotationSearchByTextData>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="NotationSearchByTextData" /> class.
        /// </summary>
        /// <param name="text">text.</param>
        /// <param name="validation">validation.</param>
        /// <param name="assetClasses">assetClasses.</param>
        /// <param name="market">market.</param>
        /// <param name="tradingValue">tradingValue.</param>
        public NotationSearchByTextData(NotationSearchByTextDataText text = default(NotationSearchByTextDataText), NotationSearchByTextDataValidation validation = default(NotationSearchByTextDataValidation), NotationSearchByTextDataAssetClasses assetClasses = default(NotationSearchByTextDataAssetClasses), NotationSearchByTextDataMarket market = default(NotationSearchByTextDataMarket), NotationSearchByTextDataTradingValue tradingValue = default(NotationSearchByTextDataTradingValue))
        {
            this.Text = text;
            this.Validation = validation;
            this.AssetClasses = assetClasses;
            this.Market = market;
            this.TradingValue = tradingValue;
        }

        /// <summary>
        /// Gets or Sets Text
        /// </summary>
        [DataMember(Name = "text", EmitDefaultValue = false)]
        public NotationSearchByTextDataText Text { get; set; }

        /// <summary>
        /// Gets or Sets Validation
        /// </summary>
        [DataMember(Name = "validation", EmitDefaultValue = false)]
        public NotationSearchByTextDataValidation Validation { get; set; }

        /// <summary>
        /// Gets or Sets AssetClasses
        /// </summary>
        [DataMember(Name = "assetClasses", EmitDefaultValue = false)]
        public NotationSearchByTextDataAssetClasses AssetClasses { get; set; }

        /// <summary>
        /// Gets or Sets Market
        /// </summary>
        [DataMember(Name = "market", EmitDefaultValue = false)]
        public NotationSearchByTextDataMarket Market { get; set; }

        /// <summary>
        /// Gets or Sets TradingValue
        /// </summary>
        [DataMember(Name = "tradingValue", EmitDefaultValue = false)]
        public NotationSearchByTextDataTradingValue TradingValue { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class NotationSearchByTextData {\n");
            sb.Append("  Text: ").Append(Text).Append("\n");
            sb.Append("  Validation: ").Append(Validation).Append("\n");
            sb.Append("  AssetClasses: ").Append(AssetClasses).Append("\n");
            sb.Append("  Market: ").Append(Market).Append("\n");
            sb.Append("  TradingValue: ").Append(TradingValue).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as NotationSearchByTextData);
        }

        /// <summary>
        /// Returns true if NotationSearchByTextData instances are equal
        /// </summary>
        /// <param name="input">Instance of NotationSearchByTextData to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(NotationSearchByTextData input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Text == input.Text ||
                    (this.Text != null &&
                    this.Text.Equals(input.Text))
                ) && 
                (
                    this.Validation == input.Validation ||
                    (this.Validation != null &&
                    this.Validation.Equals(input.Validation))
                ) && 
                (
                    this.AssetClasses == input.AssetClasses ||
                    (this.AssetClasses != null &&
                    this.AssetClasses.Equals(input.AssetClasses))
                ) && 
                (
                    this.Market == input.Market ||
                    (this.Market != null &&
                    this.Market.Equals(input.Market))
                ) && 
                (
                    this.TradingValue == input.TradingValue ||
                    (this.TradingValue != null &&
                    this.TradingValue.Equals(input.TradingValue))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Text != null)
                {
                    hashCode = (hashCode * 59) + this.Text.GetHashCode();
                }
                if (this.Validation != null)
                {
                    hashCode = (hashCode * 59) + this.Validation.GetHashCode();
                }
                if (this.AssetClasses != null)
                {
                    hashCode = (hashCode * 59) + this.AssetClasses.GetHashCode();
                }
                if (this.Market != null)
                {
                    hashCode = (hashCode * 59) + this.Market.GetHashCode();
                }
                if (this.TradingValue != null)
                {
                    hashCode = (hashCode * 59) + this.TradingValue.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
