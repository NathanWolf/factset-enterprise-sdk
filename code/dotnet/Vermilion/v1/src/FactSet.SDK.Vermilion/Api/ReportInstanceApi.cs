/*
 * VRS API documentation
 *
 * Documentation on all available end points in the VRSAPI
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using FactSet.SDK.Vermilion.Client;
using FactSet.SDK.Vermilion.Model;
using FactSet.SDK.Utils.Authentication;

namespace FactSet.SDK.Vermilion.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IReportInstanceApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Generates a report
        /// </summary>
        /// <remarks>
        /// Generates a report using the specified ID and the JSON in the request body
        /// </remarks>
        /// <exception cref="FactSet.SDK.Vermilion.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inlineObject"></param>
        /// <returns>ReportInstanceDataResponse</returns>
        ReportInstanceDataResponse V1ReportInstancesGeneratePost(InlineObject inlineObject);

        /// <summary>
        /// Generates a report
        /// </summary>
        /// <remarks>
        /// Generates a report using the specified ID and the JSON in the request body
        /// </remarks>
        /// <exception cref="FactSet.SDK.Vermilion.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inlineObject"></param>
        /// <returns>ApiResponse of ReportInstanceDataResponse</returns>
        ApiResponse<ReportInstanceDataResponse> V1ReportInstancesGeneratePostWithHttpInfo(InlineObject inlineObject);
        /// <summary>
        /// Gets a list of report instances
        /// </summary>
        /// <remarks>
        /// Gets a list of report instances. This can be filtered down further by including query parameters in the URL. For example, a report definition id can be added so the only report instances returned are the ones with a matching id
        /// </remarks>
        /// <exception cref="FactSet.SDK.Vermilion.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenant">The code of the tenancy</param>
        /// <param name="reportDefinitionCode">Acts as a filter for the retrieval process. Filters the report instances that match the report definition code (optional)</param>
        /// <param name="entityCodes">A series of query parameters used to filter the report instances by entity code. E.g: entityCode&#x3D;DATE&amp;entityCode&#x3D;SYSTEM_LANG (optional)</param>
        /// <param name="entityKeys">A series of query parameters used to filter the report instances by entity keys. E.g: entityKey&#x3D;en-gb (optional)</param>
        /// <param name="sectionFilter">Acts as a filter for the retrieval process. Filters the report instances that match the section filter (optional)</param>
        /// <param name="outputFormat">Acts as a filter for the retrieval process. Filters the report instances that match the output format (optional)</param>
        /// <param name="paginationLimit">Non-negative maximum number of entries to return (optional)</param>
        /// <param name="paginationOffset">Non-negative number of entries to skip (optional)</param>
        /// <returns>ReportInstanceList</returns>
        ReportInstanceList V1TenantReportInstancesGet(string tenant, string reportDefinitionCode = default(string), string entityCodes = default(string), string entityKeys = default(string), string sectionFilter = default(string), string outputFormat = default(string), int? paginationLimit = default(int?), int? paginationOffset = default(int?));

        /// <summary>
        /// Gets a list of report instances
        /// </summary>
        /// <remarks>
        /// Gets a list of report instances. This can be filtered down further by including query parameters in the URL. For example, a report definition id can be added so the only report instances returned are the ones with a matching id
        /// </remarks>
        /// <exception cref="FactSet.SDK.Vermilion.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenant">The code of the tenancy</param>
        /// <param name="reportDefinitionCode">Acts as a filter for the retrieval process. Filters the report instances that match the report definition code (optional)</param>
        /// <param name="entityCodes">A series of query parameters used to filter the report instances by entity code. E.g: entityCode&#x3D;DATE&amp;entityCode&#x3D;SYSTEM_LANG (optional)</param>
        /// <param name="entityKeys">A series of query parameters used to filter the report instances by entity keys. E.g: entityKey&#x3D;en-gb (optional)</param>
        /// <param name="sectionFilter">Acts as a filter for the retrieval process. Filters the report instances that match the section filter (optional)</param>
        /// <param name="outputFormat">Acts as a filter for the retrieval process. Filters the report instances that match the output format (optional)</param>
        /// <param name="paginationLimit">Non-negative maximum number of entries to return (optional)</param>
        /// <param name="paginationOffset">Non-negative number of entries to skip (optional)</param>
        /// <returns>ApiResponse of ReportInstanceList</returns>
        ApiResponse<ReportInstanceList> V1TenantReportInstancesGetWithHttpInfo(string tenant, string reportDefinitionCode = default(string), string entityCodes = default(string), string entityKeys = default(string), string sectionFilter = default(string), string outputFormat = default(string), int? paginationLimit = default(int?), int? paginationOffset = default(int?));
        /// <summary>
        /// Cancels a report generation
        /// </summary>
        /// <remarks>
        /// Sends a request to cancel a report generation based on the report instance id passed
        /// </remarks>
        /// <exception cref="FactSet.SDK.Vermilion.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenant">The code of the tenancy</param>
        /// <param name="reportInstanceId">The id of the report instance</param>
        /// <returns></returns>
        void V1TenantReportInstancesReportInstanceIdDelete(string tenant, string reportInstanceId);

        /// <summary>
        /// Cancels a report generation
        /// </summary>
        /// <remarks>
        /// Sends a request to cancel a report generation based on the report instance id passed
        /// </remarks>
        /// <exception cref="FactSet.SDK.Vermilion.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenant">The code of the tenancy</param>
        /// <param name="reportInstanceId">The id of the report instance</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> V1TenantReportInstancesReportInstanceIdDeleteWithHttpInfo(string tenant, string reportInstanceId);
        /// <summary>
        /// Gets a report instance based on the ID
        /// </summary>
        /// <remarks>
        /// Gets a report instance object based on the ID passed
        /// </remarks>
        /// <exception cref="FactSet.SDK.Vermilion.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reportInstanceId">The ID of the report instance</param>
        /// <param name="tenant">The code of the tenancy</param>
        /// <returns></returns>
        void V1TenantReportInstancesReportInstanceIdGet(string reportInstanceId, string tenant);

        /// <summary>
        /// Gets a report instance based on the ID
        /// </summary>
        /// <remarks>
        /// Gets a report instance object based on the ID passed
        /// </remarks>
        /// <exception cref="FactSet.SDK.Vermilion.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reportInstanceId">The ID of the report instance</param>
        /// <param name="tenant">The code of the tenancy</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> V1TenantReportInstancesReportInstanceIdGetWithHttpInfo(string reportInstanceId, string tenant);
        /// <summary>
        /// Gets a list of logs for the report instance generation
        /// </summary>
        /// <remarks>
        /// Gets a list of logs for the generated report instance. Allows the user to sort on log message, type and date. Also allows for retrieving of just the errors &amp; warnings&#39;
        /// </remarks>
        /// <exception cref="FactSet.SDK.Vermilion.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenant">The code of the tenancy</param>
        /// <param name="reportInstanceId">Used to validate that report file name belongs to the report instance passed</param>
        /// <param name="fullLog">Determines if the endpoint should return a full set of logs or just the errors and warnings E.g: fullLog&#x3D;true (optional)</param>
        /// <param name="sort">The column to sort on. Can add - to sort (optional)</param>
        /// <param name="paginationLimit">Non-negative maximum number of entries to return (optional)</param>
        /// <param name="paginationOffset">Non-negative number of entries to skip (optional)</param>
        /// <returns>ReportInstanceLogList</returns>
        ReportInstanceLogList V1TenantReportInstancesReportInstanceIdLogsGet(string tenant, string reportInstanceId, string fullLog = default(string), string sort = default(string), int? paginationLimit = default(int?), int? paginationOffset = default(int?));

        /// <summary>
        /// Gets a list of logs for the report instance generation
        /// </summary>
        /// <remarks>
        /// Gets a list of logs for the generated report instance. Allows the user to sort on log message, type and date. Also allows for retrieving of just the errors &amp; warnings&#39;
        /// </remarks>
        /// <exception cref="FactSet.SDK.Vermilion.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenant">The code of the tenancy</param>
        /// <param name="reportInstanceId">Used to validate that report file name belongs to the report instance passed</param>
        /// <param name="fullLog">Determines if the endpoint should return a full set of logs or just the errors and warnings E.g: fullLog&#x3D;true (optional)</param>
        /// <param name="sort">The column to sort on. Can add - to sort (optional)</param>
        /// <param name="paginationLimit">Non-negative maximum number of entries to return (optional)</param>
        /// <param name="paginationOffset">Non-negative number of entries to skip (optional)</param>
        /// <returns>ApiResponse of ReportInstanceLogList</returns>
        ApiResponse<ReportInstanceLogList> V1TenantReportInstancesReportInstanceIdLogsGetWithHttpInfo(string tenant, string reportInstanceId, string fullLog = default(string), string sort = default(string), int? paginationLimit = default(int?), int? paginationOffset = default(int?));
        /// <summary>
        /// Gets the generated file
        /// </summary>
        /// <remarks>
        /// Get the generated file for a report instance. Users can fetch the generated report once the genration is finished. The report instance id and the report file name are passed in as path paramters
        /// </remarks>
        /// <exception cref="FactSet.SDK.Vermilion.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenant">The code of the tenancy</param>
        /// <param name="reportInstanceId">Used to validate that report file name belongs to the report instance passed</param>
        /// <param name="reportFileName">The report file name that has to be retrieved. report file name. E.g: xyz.pdf</param>
        /// <returns></returns>
        void V1TenantReportInstancesReportInstanceIdResultsReportFileNameGet(string tenant, string reportInstanceId, string reportFileName);

        /// <summary>
        /// Gets the generated file
        /// </summary>
        /// <remarks>
        /// Get the generated file for a report instance. Users can fetch the generated report once the genration is finished. The report instance id and the report file name are passed in as path paramters
        /// </remarks>
        /// <exception cref="FactSet.SDK.Vermilion.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenant">The code of the tenancy</param>
        /// <param name="reportInstanceId">Used to validate that report file name belongs to the report instance passed</param>
        /// <param name="reportFileName">The report file name that has to be retrieved. report file name. E.g: xyz.pdf</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> V1TenantReportInstancesReportInstanceIdResultsReportFileNameGetWithHttpInfo(string tenant, string reportInstanceId, string reportFileName);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IReportInstanceApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Generates a report
        /// </summary>
        /// <remarks>
        /// Generates a report using the specified ID and the JSON in the request body
        /// </remarks>
        /// <exception cref="FactSet.SDK.Vermilion.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inlineObject"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ReportInstanceDataResponse</returns>
        System.Threading.Tasks.Task<ReportInstanceDataResponse> V1ReportInstancesGeneratePostAsync(InlineObject inlineObject, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Generates a report
        /// </summary>
        /// <remarks>
        /// Generates a report using the specified ID and the JSON in the request body
        /// </remarks>
        /// <exception cref="FactSet.SDK.Vermilion.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inlineObject"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ReportInstanceDataResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ReportInstanceDataResponse>> V1ReportInstancesGeneratePostWithHttpInfoAsync(InlineObject inlineObject, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Gets a list of report instances
        /// </summary>
        /// <remarks>
        /// Gets a list of report instances. This can be filtered down further by including query parameters in the URL. For example, a report definition id can be added so the only report instances returned are the ones with a matching id
        /// </remarks>
        /// <exception cref="FactSet.SDK.Vermilion.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenant">The code of the tenancy</param>
        /// <param name="reportDefinitionCode">Acts as a filter for the retrieval process. Filters the report instances that match the report definition code (optional)</param>
        /// <param name="entityCodes">A series of query parameters used to filter the report instances by entity code. E.g: entityCode&#x3D;DATE&amp;entityCode&#x3D;SYSTEM_LANG (optional)</param>
        /// <param name="entityKeys">A series of query parameters used to filter the report instances by entity keys. E.g: entityKey&#x3D;en-gb (optional)</param>
        /// <param name="sectionFilter">Acts as a filter for the retrieval process. Filters the report instances that match the section filter (optional)</param>
        /// <param name="outputFormat">Acts as a filter for the retrieval process. Filters the report instances that match the output format (optional)</param>
        /// <param name="paginationLimit">Non-negative maximum number of entries to return (optional)</param>
        /// <param name="paginationOffset">Non-negative number of entries to skip (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ReportInstanceList</returns>
        System.Threading.Tasks.Task<ReportInstanceList> V1TenantReportInstancesGetAsync(string tenant, string reportDefinitionCode = default(string), string entityCodes = default(string), string entityKeys = default(string), string sectionFilter = default(string), string outputFormat = default(string), int? paginationLimit = default(int?), int? paginationOffset = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Gets a list of report instances
        /// </summary>
        /// <remarks>
        /// Gets a list of report instances. This can be filtered down further by including query parameters in the URL. For example, a report definition id can be added so the only report instances returned are the ones with a matching id
        /// </remarks>
        /// <exception cref="FactSet.SDK.Vermilion.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenant">The code of the tenancy</param>
        /// <param name="reportDefinitionCode">Acts as a filter for the retrieval process. Filters the report instances that match the report definition code (optional)</param>
        /// <param name="entityCodes">A series of query parameters used to filter the report instances by entity code. E.g: entityCode&#x3D;DATE&amp;entityCode&#x3D;SYSTEM_LANG (optional)</param>
        /// <param name="entityKeys">A series of query parameters used to filter the report instances by entity keys. E.g: entityKey&#x3D;en-gb (optional)</param>
        /// <param name="sectionFilter">Acts as a filter for the retrieval process. Filters the report instances that match the section filter (optional)</param>
        /// <param name="outputFormat">Acts as a filter for the retrieval process. Filters the report instances that match the output format (optional)</param>
        /// <param name="paginationLimit">Non-negative maximum number of entries to return (optional)</param>
        /// <param name="paginationOffset">Non-negative number of entries to skip (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ReportInstanceList)</returns>
        System.Threading.Tasks.Task<ApiResponse<ReportInstanceList>> V1TenantReportInstancesGetWithHttpInfoAsync(string tenant, string reportDefinitionCode = default(string), string entityCodes = default(string), string entityKeys = default(string), string sectionFilter = default(string), string outputFormat = default(string), int? paginationLimit = default(int?), int? paginationOffset = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Cancels a report generation
        /// </summary>
        /// <remarks>
        /// Sends a request to cancel a report generation based on the report instance id passed
        /// </remarks>
        /// <exception cref="FactSet.SDK.Vermilion.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenant">The code of the tenancy</param>
        /// <param name="reportInstanceId">The id of the report instance</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task V1TenantReportInstancesReportInstanceIdDeleteAsync(string tenant, string reportInstanceId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Cancels a report generation
        /// </summary>
        /// <remarks>
        /// Sends a request to cancel a report generation based on the report instance id passed
        /// </remarks>
        /// <exception cref="FactSet.SDK.Vermilion.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenant">The code of the tenancy</param>
        /// <param name="reportInstanceId">The id of the report instance</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> V1TenantReportInstancesReportInstanceIdDeleteWithHttpInfoAsync(string tenant, string reportInstanceId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Gets a report instance based on the ID
        /// </summary>
        /// <remarks>
        /// Gets a report instance object based on the ID passed
        /// </remarks>
        /// <exception cref="FactSet.SDK.Vermilion.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reportInstanceId">The ID of the report instance</param>
        /// <param name="tenant">The code of the tenancy</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task V1TenantReportInstancesReportInstanceIdGetAsync(string reportInstanceId, string tenant, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Gets a report instance based on the ID
        /// </summary>
        /// <remarks>
        /// Gets a report instance object based on the ID passed
        /// </remarks>
        /// <exception cref="FactSet.SDK.Vermilion.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reportInstanceId">The ID of the report instance</param>
        /// <param name="tenant">The code of the tenancy</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> V1TenantReportInstancesReportInstanceIdGetWithHttpInfoAsync(string reportInstanceId, string tenant, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Gets a list of logs for the report instance generation
        /// </summary>
        /// <remarks>
        /// Gets a list of logs for the generated report instance. Allows the user to sort on log message, type and date. Also allows for retrieving of just the errors &amp; warnings&#39;
        /// </remarks>
        /// <exception cref="FactSet.SDK.Vermilion.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenant">The code of the tenancy</param>
        /// <param name="reportInstanceId">Used to validate that report file name belongs to the report instance passed</param>
        /// <param name="fullLog">Determines if the endpoint should return a full set of logs or just the errors and warnings E.g: fullLog&#x3D;true (optional)</param>
        /// <param name="sort">The column to sort on. Can add - to sort (optional)</param>
        /// <param name="paginationLimit">Non-negative maximum number of entries to return (optional)</param>
        /// <param name="paginationOffset">Non-negative number of entries to skip (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ReportInstanceLogList</returns>
        System.Threading.Tasks.Task<ReportInstanceLogList> V1TenantReportInstancesReportInstanceIdLogsGetAsync(string tenant, string reportInstanceId, string fullLog = default(string), string sort = default(string), int? paginationLimit = default(int?), int? paginationOffset = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Gets a list of logs for the report instance generation
        /// </summary>
        /// <remarks>
        /// Gets a list of logs for the generated report instance. Allows the user to sort on log message, type and date. Also allows for retrieving of just the errors &amp; warnings&#39;
        /// </remarks>
        /// <exception cref="FactSet.SDK.Vermilion.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenant">The code of the tenancy</param>
        /// <param name="reportInstanceId">Used to validate that report file name belongs to the report instance passed</param>
        /// <param name="fullLog">Determines if the endpoint should return a full set of logs or just the errors and warnings E.g: fullLog&#x3D;true (optional)</param>
        /// <param name="sort">The column to sort on. Can add - to sort (optional)</param>
        /// <param name="paginationLimit">Non-negative maximum number of entries to return (optional)</param>
        /// <param name="paginationOffset">Non-negative number of entries to skip (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ReportInstanceLogList)</returns>
        System.Threading.Tasks.Task<ApiResponse<ReportInstanceLogList>> V1TenantReportInstancesReportInstanceIdLogsGetWithHttpInfoAsync(string tenant, string reportInstanceId, string fullLog = default(string), string sort = default(string), int? paginationLimit = default(int?), int? paginationOffset = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Gets the generated file
        /// </summary>
        /// <remarks>
        /// Get the generated file for a report instance. Users can fetch the generated report once the genration is finished. The report instance id and the report file name are passed in as path paramters
        /// </remarks>
        /// <exception cref="FactSet.SDK.Vermilion.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenant">The code of the tenancy</param>
        /// <param name="reportInstanceId">Used to validate that report file name belongs to the report instance passed</param>
        /// <param name="reportFileName">The report file name that has to be retrieved. report file name. E.g: xyz.pdf</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task V1TenantReportInstancesReportInstanceIdResultsReportFileNameGetAsync(string tenant, string reportInstanceId, string reportFileName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Gets the generated file
        /// </summary>
        /// <remarks>
        /// Get the generated file for a report instance. Users can fetch the generated report once the genration is finished. The report instance id and the report file name are passed in as path paramters
        /// </remarks>
        /// <exception cref="FactSet.SDK.Vermilion.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenant">The code of the tenancy</param>
        /// <param name="reportInstanceId">Used to validate that report file name belongs to the report instance passed</param>
        /// <param name="reportFileName">The report file name that has to be retrieved. report file name. E.g: xyz.pdf</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> V1TenantReportInstancesReportInstanceIdResultsReportFileNameGetWithHttpInfoAsync(string tenant, string reportInstanceId, string reportFileName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IReportInstanceApi : IReportInstanceApiSync, IReportInstanceApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ReportInstanceApi : IReportInstanceApi
    {
        private FactSet.SDK.Vermilion.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ReportInstanceApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ReportInstanceApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ReportInstanceApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ReportInstanceApi(string basePath)
        {
            this.Configuration = FactSet.SDK.Vermilion.Client.Configuration.MergeConfigurations(
                FactSet.SDK.Vermilion.Client.GlobalConfiguration.Instance,
                new FactSet.SDK.Vermilion.Client.Configuration { BasePath = basePath }
            );
            this.Client = new FactSet.SDK.Vermilion.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new FactSet.SDK.Vermilion.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = FactSet.SDK.Vermilion.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ReportInstanceApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ReportInstanceApi(FactSet.SDK.Vermilion.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = FactSet.SDK.Vermilion.Client.Configuration.MergeConfigurations(
                FactSet.SDK.Vermilion.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new FactSet.SDK.Vermilion.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new FactSet.SDK.Vermilion.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = FactSet.SDK.Vermilion.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ReportInstanceApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public ReportInstanceApi(FactSet.SDK.Vermilion.Client.ISynchronousClient client, FactSet.SDK.Vermilion.Client.IAsynchronousClient asyncClient, FactSet.SDK.Vermilion.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = FactSet.SDK.Vermilion.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public FactSet.SDK.Vermilion.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public FactSet.SDK.Vermilion.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public FactSet.SDK.Vermilion.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public FactSet.SDK.Vermilion.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Generates a report Generates a report using the specified ID and the JSON in the request body
        /// </summary>
        /// <exception cref="FactSet.SDK.Vermilion.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inlineObject"></param>
        /// <returns>ReportInstanceDataResponse</returns>
        public ReportInstanceDataResponse V1ReportInstancesGeneratePost(InlineObject inlineObject)
        {
            FactSet.SDK.Vermilion.Client.ApiResponse<ReportInstanceDataResponse> localVarResponse = V1ReportInstancesGeneratePostWithHttpInfo(inlineObject);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Generates a report Generates a report using the specified ID and the JSON in the request body
        /// </summary>
        /// <exception cref="FactSet.SDK.Vermilion.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inlineObject"></param>
        /// <returns>ApiResponse of ReportInstanceDataResponse</returns>
        public FactSet.SDK.Vermilion.Client.ApiResponse<ReportInstanceDataResponse> V1ReportInstancesGeneratePostWithHttpInfo(InlineObject inlineObject)
        {
            // verify the required parameter 'inlineObject' is set
            if (inlineObject == null)
            {
                throw new FactSet.SDK.Vermilion.Client.ApiException(400, "Missing required parameter 'inlineObject' when calling ReportInstanceApi->V1ReportInstancesGeneratePost");
            }

            FactSet.SDK.Vermilion.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.Vermilion.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.Vermilion.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.Vermilion.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = inlineObject;

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.Vermilion.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ReportInstanceDataResponse>("/v1/report-instances/generate", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V1ReportInstancesGeneratePost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Generates a report Generates a report using the specified ID and the JSON in the request body
        /// </summary>
        /// <exception cref="FactSet.SDK.Vermilion.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inlineObject"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ReportInstanceDataResponse</returns>
        public async System.Threading.Tasks.Task<ReportInstanceDataResponse> V1ReportInstancesGeneratePostAsync(InlineObject inlineObject, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            FactSet.SDK.Vermilion.Client.ApiResponse<ReportInstanceDataResponse> localVarResponse = await V1ReportInstancesGeneratePostWithHttpInfoAsync(inlineObject, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Generates a report Generates a report using the specified ID and the JSON in the request body
        /// </summary>
        /// <exception cref="FactSet.SDK.Vermilion.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inlineObject"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ReportInstanceDataResponse)</returns>
        public async System.Threading.Tasks.Task<FactSet.SDK.Vermilion.Client.ApiResponse<ReportInstanceDataResponse>> V1ReportInstancesGeneratePostWithHttpInfoAsync(InlineObject inlineObject, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'inlineObject' is set
            if (inlineObject == null)
            {
                throw new FactSet.SDK.Vermilion.Client.ApiException(400, "Missing required parameter 'inlineObject' when calling ReportInstanceApi->V1ReportInstancesGeneratePost");
            }


            FactSet.SDK.Vermilion.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.Vermilion.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.Vermilion.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.Vermilion.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = inlineObject;

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.Vermilion.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ReportInstanceDataResponse>("/v1/report-instances/generate", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V1ReportInstancesGeneratePost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Gets a list of report instances Gets a list of report instances. This can be filtered down further by including query parameters in the URL. For example, a report definition id can be added so the only report instances returned are the ones with a matching id
        /// </summary>
        /// <exception cref="FactSet.SDK.Vermilion.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenant">The code of the tenancy</param>
        /// <param name="reportDefinitionCode">Acts as a filter for the retrieval process. Filters the report instances that match the report definition code (optional)</param>
        /// <param name="entityCodes">A series of query parameters used to filter the report instances by entity code. E.g: entityCode&#x3D;DATE&amp;entityCode&#x3D;SYSTEM_LANG (optional)</param>
        /// <param name="entityKeys">A series of query parameters used to filter the report instances by entity keys. E.g: entityKey&#x3D;en-gb (optional)</param>
        /// <param name="sectionFilter">Acts as a filter for the retrieval process. Filters the report instances that match the section filter (optional)</param>
        /// <param name="outputFormat">Acts as a filter for the retrieval process. Filters the report instances that match the output format (optional)</param>
        /// <param name="paginationLimit">Non-negative maximum number of entries to return (optional)</param>
        /// <param name="paginationOffset">Non-negative number of entries to skip (optional)</param>
        /// <returns>ReportInstanceList</returns>
        public ReportInstanceList V1TenantReportInstancesGet(string tenant, string reportDefinitionCode = default(string), string entityCodes = default(string), string entityKeys = default(string), string sectionFilter = default(string), string outputFormat = default(string), int? paginationLimit = default(int?), int? paginationOffset = default(int?))
        {
            FactSet.SDK.Vermilion.Client.ApiResponse<ReportInstanceList> localVarResponse = V1TenantReportInstancesGetWithHttpInfo(tenant, reportDefinitionCode, entityCodes, entityKeys, sectionFilter, outputFormat, paginationLimit, paginationOffset);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Gets a list of report instances Gets a list of report instances. This can be filtered down further by including query parameters in the URL. For example, a report definition id can be added so the only report instances returned are the ones with a matching id
        /// </summary>
        /// <exception cref="FactSet.SDK.Vermilion.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenant">The code of the tenancy</param>
        /// <param name="reportDefinitionCode">Acts as a filter for the retrieval process. Filters the report instances that match the report definition code (optional)</param>
        /// <param name="entityCodes">A series of query parameters used to filter the report instances by entity code. E.g: entityCode&#x3D;DATE&amp;entityCode&#x3D;SYSTEM_LANG (optional)</param>
        /// <param name="entityKeys">A series of query parameters used to filter the report instances by entity keys. E.g: entityKey&#x3D;en-gb (optional)</param>
        /// <param name="sectionFilter">Acts as a filter for the retrieval process. Filters the report instances that match the section filter (optional)</param>
        /// <param name="outputFormat">Acts as a filter for the retrieval process. Filters the report instances that match the output format (optional)</param>
        /// <param name="paginationLimit">Non-negative maximum number of entries to return (optional)</param>
        /// <param name="paginationOffset">Non-negative number of entries to skip (optional)</param>
        /// <returns>ApiResponse of ReportInstanceList</returns>
        public FactSet.SDK.Vermilion.Client.ApiResponse<ReportInstanceList> V1TenantReportInstancesGetWithHttpInfo(string tenant, string reportDefinitionCode = default(string), string entityCodes = default(string), string entityKeys = default(string), string sectionFilter = default(string), string outputFormat = default(string), int? paginationLimit = default(int?), int? paginationOffset = default(int?))
        {
            // verify the required parameter 'tenant' is set
            if (tenant == null)
            {
                throw new FactSet.SDK.Vermilion.Client.ApiException(400, "Missing required parameter 'tenant' when calling ReportInstanceApi->V1TenantReportInstancesGet");
            }

            FactSet.SDK.Vermilion.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.Vermilion.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.Vermilion.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.Vermilion.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("tenant", FactSet.SDK.Vermilion.Client.ClientUtils.ParameterToString(tenant)); // path parameter
            if (reportDefinitionCode != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.Vermilion.Client.ClientUtils.ParameterToMultiMap("", "reportDefinitionCode", reportDefinitionCode));
            }
            if (entityCodes != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.Vermilion.Client.ClientUtils.ParameterToMultiMap("", "entityCodes", entityCodes));
            }
            if (entityKeys != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.Vermilion.Client.ClientUtils.ParameterToMultiMap("", "entityKeys", entityKeys));
            }
            if (sectionFilter != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.Vermilion.Client.ClientUtils.ParameterToMultiMap("", "sectionFilter", sectionFilter));
            }
            if (outputFormat != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.Vermilion.Client.ClientUtils.ParameterToMultiMap("", "outputFormat", outputFormat));
            }
            if (paginationLimit != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.Vermilion.Client.ClientUtils.ParameterToMultiMap("", "_paginationLimit", paginationLimit));
            }
            if (paginationOffset != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.Vermilion.Client.ClientUtils.ParameterToMultiMap("", "_paginationOffset", paginationOffset));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.Vermilion.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<ReportInstanceList>("/v1/{tenant}/report-instances", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V1TenantReportInstancesGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Gets a list of report instances Gets a list of report instances. This can be filtered down further by including query parameters in the URL. For example, a report definition id can be added so the only report instances returned are the ones with a matching id
        /// </summary>
        /// <exception cref="FactSet.SDK.Vermilion.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenant">The code of the tenancy</param>
        /// <param name="reportDefinitionCode">Acts as a filter for the retrieval process. Filters the report instances that match the report definition code (optional)</param>
        /// <param name="entityCodes">A series of query parameters used to filter the report instances by entity code. E.g: entityCode&#x3D;DATE&amp;entityCode&#x3D;SYSTEM_LANG (optional)</param>
        /// <param name="entityKeys">A series of query parameters used to filter the report instances by entity keys. E.g: entityKey&#x3D;en-gb (optional)</param>
        /// <param name="sectionFilter">Acts as a filter for the retrieval process. Filters the report instances that match the section filter (optional)</param>
        /// <param name="outputFormat">Acts as a filter for the retrieval process. Filters the report instances that match the output format (optional)</param>
        /// <param name="paginationLimit">Non-negative maximum number of entries to return (optional)</param>
        /// <param name="paginationOffset">Non-negative number of entries to skip (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ReportInstanceList</returns>
        public async System.Threading.Tasks.Task<ReportInstanceList> V1TenantReportInstancesGetAsync(string tenant, string reportDefinitionCode = default(string), string entityCodes = default(string), string entityKeys = default(string), string sectionFilter = default(string), string outputFormat = default(string), int? paginationLimit = default(int?), int? paginationOffset = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            FactSet.SDK.Vermilion.Client.ApiResponse<ReportInstanceList> localVarResponse = await V1TenantReportInstancesGetWithHttpInfoAsync(tenant, reportDefinitionCode, entityCodes, entityKeys, sectionFilter, outputFormat, paginationLimit, paginationOffset, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Gets a list of report instances Gets a list of report instances. This can be filtered down further by including query parameters in the URL. For example, a report definition id can be added so the only report instances returned are the ones with a matching id
        /// </summary>
        /// <exception cref="FactSet.SDK.Vermilion.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenant">The code of the tenancy</param>
        /// <param name="reportDefinitionCode">Acts as a filter for the retrieval process. Filters the report instances that match the report definition code (optional)</param>
        /// <param name="entityCodes">A series of query parameters used to filter the report instances by entity code. E.g: entityCode&#x3D;DATE&amp;entityCode&#x3D;SYSTEM_LANG (optional)</param>
        /// <param name="entityKeys">A series of query parameters used to filter the report instances by entity keys. E.g: entityKey&#x3D;en-gb (optional)</param>
        /// <param name="sectionFilter">Acts as a filter for the retrieval process. Filters the report instances that match the section filter (optional)</param>
        /// <param name="outputFormat">Acts as a filter for the retrieval process. Filters the report instances that match the output format (optional)</param>
        /// <param name="paginationLimit">Non-negative maximum number of entries to return (optional)</param>
        /// <param name="paginationOffset">Non-negative number of entries to skip (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ReportInstanceList)</returns>
        public async System.Threading.Tasks.Task<FactSet.SDK.Vermilion.Client.ApiResponse<ReportInstanceList>> V1TenantReportInstancesGetWithHttpInfoAsync(string tenant, string reportDefinitionCode = default(string), string entityCodes = default(string), string entityKeys = default(string), string sectionFilter = default(string), string outputFormat = default(string), int? paginationLimit = default(int?), int? paginationOffset = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'tenant' is set
            if (tenant == null)
            {
                throw new FactSet.SDK.Vermilion.Client.ApiException(400, "Missing required parameter 'tenant' when calling ReportInstanceApi->V1TenantReportInstancesGet");
            }


            FactSet.SDK.Vermilion.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.Vermilion.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.Vermilion.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.Vermilion.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("tenant", FactSet.SDK.Vermilion.Client.ClientUtils.ParameterToString(tenant)); // path parameter
            if (reportDefinitionCode != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.Vermilion.Client.ClientUtils.ParameterToMultiMap("", "reportDefinitionCode", reportDefinitionCode));
            }
            if (entityCodes != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.Vermilion.Client.ClientUtils.ParameterToMultiMap("", "entityCodes", entityCodes));
            }
            if (entityKeys != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.Vermilion.Client.ClientUtils.ParameterToMultiMap("", "entityKeys", entityKeys));
            }
            if (sectionFilter != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.Vermilion.Client.ClientUtils.ParameterToMultiMap("", "sectionFilter", sectionFilter));
            }
            if (outputFormat != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.Vermilion.Client.ClientUtils.ParameterToMultiMap("", "outputFormat", outputFormat));
            }
            if (paginationLimit != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.Vermilion.Client.ClientUtils.ParameterToMultiMap("", "_paginationLimit", paginationLimit));
            }
            if (paginationOffset != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.Vermilion.Client.ClientUtils.ParameterToMultiMap("", "_paginationOffset", paginationOffset));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.Vermilion.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ReportInstanceList>("/v1/{tenant}/report-instances", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V1TenantReportInstancesGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Cancels a report generation Sends a request to cancel a report generation based on the report instance id passed
        /// </summary>
        /// <exception cref="FactSet.SDK.Vermilion.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenant">The code of the tenancy</param>
        /// <param name="reportInstanceId">The id of the report instance</param>
        /// <returns></returns>
        public void V1TenantReportInstancesReportInstanceIdDelete(string tenant, string reportInstanceId)
        {
            V1TenantReportInstancesReportInstanceIdDeleteWithHttpInfo(tenant, reportInstanceId);
        }

        /// <summary>
        /// Cancels a report generation Sends a request to cancel a report generation based on the report instance id passed
        /// </summary>
        /// <exception cref="FactSet.SDK.Vermilion.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenant">The code of the tenancy</param>
        /// <param name="reportInstanceId">The id of the report instance</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public FactSet.SDK.Vermilion.Client.ApiResponse<Object> V1TenantReportInstancesReportInstanceIdDeleteWithHttpInfo(string tenant, string reportInstanceId)
        {
            // verify the required parameter 'tenant' is set
            if (tenant == null)
            {
                throw new FactSet.SDK.Vermilion.Client.ApiException(400, "Missing required parameter 'tenant' when calling ReportInstanceApi->V1TenantReportInstancesReportInstanceIdDelete");
            }

            // verify the required parameter 'reportInstanceId' is set
            if (reportInstanceId == null)
            {
                throw new FactSet.SDK.Vermilion.Client.ApiException(400, "Missing required parameter 'reportInstanceId' when calling ReportInstanceApi->V1TenantReportInstancesReportInstanceIdDelete");
            }

            FactSet.SDK.Vermilion.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.Vermilion.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.Vermilion.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.Vermilion.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("tenant", FactSet.SDK.Vermilion.Client.ClientUtils.ParameterToString(tenant)); // path parameter
            localVarRequestOptions.PathParameters.Add("reportInstanceId", FactSet.SDK.Vermilion.Client.ClientUtils.ParameterToString(reportInstanceId)); // path parameter

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.Vermilion.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/v1/{tenant}/report-instances/{reportInstanceId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V1TenantReportInstancesReportInstanceIdDelete", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Cancels a report generation Sends a request to cancel a report generation based on the report instance id passed
        /// </summary>
        /// <exception cref="FactSet.SDK.Vermilion.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenant">The code of the tenancy</param>
        /// <param name="reportInstanceId">The id of the report instance</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task V1TenantReportInstancesReportInstanceIdDeleteAsync(string tenant, string reportInstanceId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await V1TenantReportInstancesReportInstanceIdDeleteWithHttpInfoAsync(tenant, reportInstanceId, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Cancels a report generation Sends a request to cancel a report generation based on the report instance id passed
        /// </summary>
        /// <exception cref="FactSet.SDK.Vermilion.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenant">The code of the tenancy</param>
        /// <param name="reportInstanceId">The id of the report instance</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<FactSet.SDK.Vermilion.Client.ApiResponse<Object>> V1TenantReportInstancesReportInstanceIdDeleteWithHttpInfoAsync(string tenant, string reportInstanceId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'tenant' is set
            if (tenant == null)
            {
                throw new FactSet.SDK.Vermilion.Client.ApiException(400, "Missing required parameter 'tenant' when calling ReportInstanceApi->V1TenantReportInstancesReportInstanceIdDelete");
            }

            // verify the required parameter 'reportInstanceId' is set
            if (reportInstanceId == null)
            {
                throw new FactSet.SDK.Vermilion.Client.ApiException(400, "Missing required parameter 'reportInstanceId' when calling ReportInstanceApi->V1TenantReportInstancesReportInstanceIdDelete");
            }


            FactSet.SDK.Vermilion.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.Vermilion.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.Vermilion.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.Vermilion.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("tenant", FactSet.SDK.Vermilion.Client.ClientUtils.ParameterToString(tenant)); // path parameter
            localVarRequestOptions.PathParameters.Add("reportInstanceId", FactSet.SDK.Vermilion.Client.ClientUtils.ParameterToString(reportInstanceId)); // path parameter

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.Vermilion.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/v1/{tenant}/report-instances/{reportInstanceId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V1TenantReportInstancesReportInstanceIdDelete", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Gets a report instance based on the ID Gets a report instance object based on the ID passed
        /// </summary>
        /// <exception cref="FactSet.SDK.Vermilion.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reportInstanceId">The ID of the report instance</param>
        /// <param name="tenant">The code of the tenancy</param>
        /// <returns></returns>
        public void V1TenantReportInstancesReportInstanceIdGet(string reportInstanceId, string tenant)
        {
            V1TenantReportInstancesReportInstanceIdGetWithHttpInfo(reportInstanceId, tenant);
        }

        /// <summary>
        /// Gets a report instance based on the ID Gets a report instance object based on the ID passed
        /// </summary>
        /// <exception cref="FactSet.SDK.Vermilion.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reportInstanceId">The ID of the report instance</param>
        /// <param name="tenant">The code of the tenancy</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public FactSet.SDK.Vermilion.Client.ApiResponse<Object> V1TenantReportInstancesReportInstanceIdGetWithHttpInfo(string reportInstanceId, string tenant)
        {
            // verify the required parameter 'reportInstanceId' is set
            if (reportInstanceId == null)
            {
                throw new FactSet.SDK.Vermilion.Client.ApiException(400, "Missing required parameter 'reportInstanceId' when calling ReportInstanceApi->V1TenantReportInstancesReportInstanceIdGet");
            }

            // verify the required parameter 'tenant' is set
            if (tenant == null)
            {
                throw new FactSet.SDK.Vermilion.Client.ApiException(400, "Missing required parameter 'tenant' when calling ReportInstanceApi->V1TenantReportInstancesReportInstanceIdGet");
            }

            FactSet.SDK.Vermilion.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.Vermilion.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.Vermilion.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.Vermilion.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("reportInstanceId", FactSet.SDK.Vermilion.Client.ClientUtils.ParameterToString(reportInstanceId)); // path parameter
            localVarRequestOptions.PathParameters.Add("tenant", FactSet.SDK.Vermilion.Client.ClientUtils.ParameterToString(tenant)); // path parameter

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.Vermilion.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/v1/{tenant}/report-instances/{reportInstanceId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V1TenantReportInstancesReportInstanceIdGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Gets a report instance based on the ID Gets a report instance object based on the ID passed
        /// </summary>
        /// <exception cref="FactSet.SDK.Vermilion.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reportInstanceId">The ID of the report instance</param>
        /// <param name="tenant">The code of the tenancy</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task V1TenantReportInstancesReportInstanceIdGetAsync(string reportInstanceId, string tenant, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await V1TenantReportInstancesReportInstanceIdGetWithHttpInfoAsync(reportInstanceId, tenant, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Gets a report instance based on the ID Gets a report instance object based on the ID passed
        /// </summary>
        /// <exception cref="FactSet.SDK.Vermilion.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reportInstanceId">The ID of the report instance</param>
        /// <param name="tenant">The code of the tenancy</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<FactSet.SDK.Vermilion.Client.ApiResponse<Object>> V1TenantReportInstancesReportInstanceIdGetWithHttpInfoAsync(string reportInstanceId, string tenant, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'reportInstanceId' is set
            if (reportInstanceId == null)
            {
                throw new FactSet.SDK.Vermilion.Client.ApiException(400, "Missing required parameter 'reportInstanceId' when calling ReportInstanceApi->V1TenantReportInstancesReportInstanceIdGet");
            }

            // verify the required parameter 'tenant' is set
            if (tenant == null)
            {
                throw new FactSet.SDK.Vermilion.Client.ApiException(400, "Missing required parameter 'tenant' when calling ReportInstanceApi->V1TenantReportInstancesReportInstanceIdGet");
            }


            FactSet.SDK.Vermilion.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.Vermilion.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.Vermilion.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.Vermilion.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("reportInstanceId", FactSet.SDK.Vermilion.Client.ClientUtils.ParameterToString(reportInstanceId)); // path parameter
            localVarRequestOptions.PathParameters.Add("tenant", FactSet.SDK.Vermilion.Client.ClientUtils.ParameterToString(tenant)); // path parameter

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.Vermilion.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/v1/{tenant}/report-instances/{reportInstanceId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V1TenantReportInstancesReportInstanceIdGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Gets a list of logs for the report instance generation Gets a list of logs for the generated report instance. Allows the user to sort on log message, type and date. Also allows for retrieving of just the errors &amp; warnings&#39;
        /// </summary>
        /// <exception cref="FactSet.SDK.Vermilion.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenant">The code of the tenancy</param>
        /// <param name="reportInstanceId">Used to validate that report file name belongs to the report instance passed</param>
        /// <param name="fullLog">Determines if the endpoint should return a full set of logs or just the errors and warnings E.g: fullLog&#x3D;true (optional)</param>
        /// <param name="sort">The column to sort on. Can add - to sort (optional)</param>
        /// <param name="paginationLimit">Non-negative maximum number of entries to return (optional)</param>
        /// <param name="paginationOffset">Non-negative number of entries to skip (optional)</param>
        /// <returns>ReportInstanceLogList</returns>
        public ReportInstanceLogList V1TenantReportInstancesReportInstanceIdLogsGet(string tenant, string reportInstanceId, string fullLog = default(string), string sort = default(string), int? paginationLimit = default(int?), int? paginationOffset = default(int?))
        {
            FactSet.SDK.Vermilion.Client.ApiResponse<ReportInstanceLogList> localVarResponse = V1TenantReportInstancesReportInstanceIdLogsGetWithHttpInfo(tenant, reportInstanceId, fullLog, sort, paginationLimit, paginationOffset);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Gets a list of logs for the report instance generation Gets a list of logs for the generated report instance. Allows the user to sort on log message, type and date. Also allows for retrieving of just the errors &amp; warnings&#39;
        /// </summary>
        /// <exception cref="FactSet.SDK.Vermilion.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenant">The code of the tenancy</param>
        /// <param name="reportInstanceId">Used to validate that report file name belongs to the report instance passed</param>
        /// <param name="fullLog">Determines if the endpoint should return a full set of logs or just the errors and warnings E.g: fullLog&#x3D;true (optional)</param>
        /// <param name="sort">The column to sort on. Can add - to sort (optional)</param>
        /// <param name="paginationLimit">Non-negative maximum number of entries to return (optional)</param>
        /// <param name="paginationOffset">Non-negative number of entries to skip (optional)</param>
        /// <returns>ApiResponse of ReportInstanceLogList</returns>
        public FactSet.SDK.Vermilion.Client.ApiResponse<ReportInstanceLogList> V1TenantReportInstancesReportInstanceIdLogsGetWithHttpInfo(string tenant, string reportInstanceId, string fullLog = default(string), string sort = default(string), int? paginationLimit = default(int?), int? paginationOffset = default(int?))
        {
            // verify the required parameter 'tenant' is set
            if (tenant == null)
            {
                throw new FactSet.SDK.Vermilion.Client.ApiException(400, "Missing required parameter 'tenant' when calling ReportInstanceApi->V1TenantReportInstancesReportInstanceIdLogsGet");
            }

            // verify the required parameter 'reportInstanceId' is set
            if (reportInstanceId == null)
            {
                throw new FactSet.SDK.Vermilion.Client.ApiException(400, "Missing required parameter 'reportInstanceId' when calling ReportInstanceApi->V1TenantReportInstancesReportInstanceIdLogsGet");
            }

            FactSet.SDK.Vermilion.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.Vermilion.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.Vermilion.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.Vermilion.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("tenant", FactSet.SDK.Vermilion.Client.ClientUtils.ParameterToString(tenant)); // path parameter
            localVarRequestOptions.PathParameters.Add("reportInstanceId", FactSet.SDK.Vermilion.Client.ClientUtils.ParameterToString(reportInstanceId)); // path parameter
            if (fullLog != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.Vermilion.Client.ClientUtils.ParameterToMultiMap("", "fullLog", fullLog));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.Vermilion.Client.ClientUtils.ParameterToMultiMap("", "_sort", sort));
            }
            if (paginationLimit != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.Vermilion.Client.ClientUtils.ParameterToMultiMap("", "_paginationLimit", paginationLimit));
            }
            if (paginationOffset != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.Vermilion.Client.ClientUtils.ParameterToMultiMap("", "_paginationOffset", paginationOffset));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.Vermilion.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<ReportInstanceLogList>("/v1/{tenant}/report-instances/{reportInstanceId}/logs", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V1TenantReportInstancesReportInstanceIdLogsGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Gets a list of logs for the report instance generation Gets a list of logs for the generated report instance. Allows the user to sort on log message, type and date. Also allows for retrieving of just the errors &amp; warnings&#39;
        /// </summary>
        /// <exception cref="FactSet.SDK.Vermilion.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenant">The code of the tenancy</param>
        /// <param name="reportInstanceId">Used to validate that report file name belongs to the report instance passed</param>
        /// <param name="fullLog">Determines if the endpoint should return a full set of logs or just the errors and warnings E.g: fullLog&#x3D;true (optional)</param>
        /// <param name="sort">The column to sort on. Can add - to sort (optional)</param>
        /// <param name="paginationLimit">Non-negative maximum number of entries to return (optional)</param>
        /// <param name="paginationOffset">Non-negative number of entries to skip (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ReportInstanceLogList</returns>
        public async System.Threading.Tasks.Task<ReportInstanceLogList> V1TenantReportInstancesReportInstanceIdLogsGetAsync(string tenant, string reportInstanceId, string fullLog = default(string), string sort = default(string), int? paginationLimit = default(int?), int? paginationOffset = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            FactSet.SDK.Vermilion.Client.ApiResponse<ReportInstanceLogList> localVarResponse = await V1TenantReportInstancesReportInstanceIdLogsGetWithHttpInfoAsync(tenant, reportInstanceId, fullLog, sort, paginationLimit, paginationOffset, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Gets a list of logs for the report instance generation Gets a list of logs for the generated report instance. Allows the user to sort on log message, type and date. Also allows for retrieving of just the errors &amp; warnings&#39;
        /// </summary>
        /// <exception cref="FactSet.SDK.Vermilion.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenant">The code of the tenancy</param>
        /// <param name="reportInstanceId">Used to validate that report file name belongs to the report instance passed</param>
        /// <param name="fullLog">Determines if the endpoint should return a full set of logs or just the errors and warnings E.g: fullLog&#x3D;true (optional)</param>
        /// <param name="sort">The column to sort on. Can add - to sort (optional)</param>
        /// <param name="paginationLimit">Non-negative maximum number of entries to return (optional)</param>
        /// <param name="paginationOffset">Non-negative number of entries to skip (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ReportInstanceLogList)</returns>
        public async System.Threading.Tasks.Task<FactSet.SDK.Vermilion.Client.ApiResponse<ReportInstanceLogList>> V1TenantReportInstancesReportInstanceIdLogsGetWithHttpInfoAsync(string tenant, string reportInstanceId, string fullLog = default(string), string sort = default(string), int? paginationLimit = default(int?), int? paginationOffset = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'tenant' is set
            if (tenant == null)
            {
                throw new FactSet.SDK.Vermilion.Client.ApiException(400, "Missing required parameter 'tenant' when calling ReportInstanceApi->V1TenantReportInstancesReportInstanceIdLogsGet");
            }

            // verify the required parameter 'reportInstanceId' is set
            if (reportInstanceId == null)
            {
                throw new FactSet.SDK.Vermilion.Client.ApiException(400, "Missing required parameter 'reportInstanceId' when calling ReportInstanceApi->V1TenantReportInstancesReportInstanceIdLogsGet");
            }


            FactSet.SDK.Vermilion.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.Vermilion.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.Vermilion.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.Vermilion.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("tenant", FactSet.SDK.Vermilion.Client.ClientUtils.ParameterToString(tenant)); // path parameter
            localVarRequestOptions.PathParameters.Add("reportInstanceId", FactSet.SDK.Vermilion.Client.ClientUtils.ParameterToString(reportInstanceId)); // path parameter
            if (fullLog != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.Vermilion.Client.ClientUtils.ParameterToMultiMap("", "fullLog", fullLog));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.Vermilion.Client.ClientUtils.ParameterToMultiMap("", "_sort", sort));
            }
            if (paginationLimit != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.Vermilion.Client.ClientUtils.ParameterToMultiMap("", "_paginationLimit", paginationLimit));
            }
            if (paginationOffset != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.Vermilion.Client.ClientUtils.ParameterToMultiMap("", "_paginationOffset", paginationOffset));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.Vermilion.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ReportInstanceLogList>("/v1/{tenant}/report-instances/{reportInstanceId}/logs", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V1TenantReportInstancesReportInstanceIdLogsGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Gets the generated file Get the generated file for a report instance. Users can fetch the generated report once the genration is finished. The report instance id and the report file name are passed in as path paramters
        /// </summary>
        /// <exception cref="FactSet.SDK.Vermilion.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenant">The code of the tenancy</param>
        /// <param name="reportInstanceId">Used to validate that report file name belongs to the report instance passed</param>
        /// <param name="reportFileName">The report file name that has to be retrieved. report file name. E.g: xyz.pdf</param>
        /// <returns></returns>
        public void V1TenantReportInstancesReportInstanceIdResultsReportFileNameGet(string tenant, string reportInstanceId, string reportFileName)
        {
            V1TenantReportInstancesReportInstanceIdResultsReportFileNameGetWithHttpInfo(tenant, reportInstanceId, reportFileName);
        }

        /// <summary>
        /// Gets the generated file Get the generated file for a report instance. Users can fetch the generated report once the genration is finished. The report instance id and the report file name are passed in as path paramters
        /// </summary>
        /// <exception cref="FactSet.SDK.Vermilion.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenant">The code of the tenancy</param>
        /// <param name="reportInstanceId">Used to validate that report file name belongs to the report instance passed</param>
        /// <param name="reportFileName">The report file name that has to be retrieved. report file name. E.g: xyz.pdf</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public FactSet.SDK.Vermilion.Client.ApiResponse<Object> V1TenantReportInstancesReportInstanceIdResultsReportFileNameGetWithHttpInfo(string tenant, string reportInstanceId, string reportFileName)
        {
            // verify the required parameter 'tenant' is set
            if (tenant == null)
            {
                throw new FactSet.SDK.Vermilion.Client.ApiException(400, "Missing required parameter 'tenant' when calling ReportInstanceApi->V1TenantReportInstancesReportInstanceIdResultsReportFileNameGet");
            }

            // verify the required parameter 'reportInstanceId' is set
            if (reportInstanceId == null)
            {
                throw new FactSet.SDK.Vermilion.Client.ApiException(400, "Missing required parameter 'reportInstanceId' when calling ReportInstanceApi->V1TenantReportInstancesReportInstanceIdResultsReportFileNameGet");
            }

            // verify the required parameter 'reportFileName' is set
            if (reportFileName == null)
            {
                throw new FactSet.SDK.Vermilion.Client.ApiException(400, "Missing required parameter 'reportFileName' when calling ReportInstanceApi->V1TenantReportInstancesReportInstanceIdResultsReportFileNameGet");
            }

            FactSet.SDK.Vermilion.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.Vermilion.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.Vermilion.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.Vermilion.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("tenant", FactSet.SDK.Vermilion.Client.ClientUtils.ParameterToString(tenant)); // path parameter
            localVarRequestOptions.PathParameters.Add("reportInstanceId", FactSet.SDK.Vermilion.Client.ClientUtils.ParameterToString(reportInstanceId)); // path parameter
            localVarRequestOptions.PathParameters.Add("reportFileName", FactSet.SDK.Vermilion.Client.ClientUtils.ParameterToString(reportFileName)); // path parameter

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.Vermilion.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/v1/{tenant}/report-instances/{reportInstanceId}/results/{reportFileName}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V1TenantReportInstancesReportInstanceIdResultsReportFileNameGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Gets the generated file Get the generated file for a report instance. Users can fetch the generated report once the genration is finished. The report instance id and the report file name are passed in as path paramters
        /// </summary>
        /// <exception cref="FactSet.SDK.Vermilion.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenant">The code of the tenancy</param>
        /// <param name="reportInstanceId">Used to validate that report file name belongs to the report instance passed</param>
        /// <param name="reportFileName">The report file name that has to be retrieved. report file name. E.g: xyz.pdf</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task V1TenantReportInstancesReportInstanceIdResultsReportFileNameGetAsync(string tenant, string reportInstanceId, string reportFileName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await V1TenantReportInstancesReportInstanceIdResultsReportFileNameGetWithHttpInfoAsync(tenant, reportInstanceId, reportFileName, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Gets the generated file Get the generated file for a report instance. Users can fetch the generated report once the genration is finished. The report instance id and the report file name are passed in as path paramters
        /// </summary>
        /// <exception cref="FactSet.SDK.Vermilion.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenant">The code of the tenancy</param>
        /// <param name="reportInstanceId">Used to validate that report file name belongs to the report instance passed</param>
        /// <param name="reportFileName">The report file name that has to be retrieved. report file name. E.g: xyz.pdf</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<FactSet.SDK.Vermilion.Client.ApiResponse<Object>> V1TenantReportInstancesReportInstanceIdResultsReportFileNameGetWithHttpInfoAsync(string tenant, string reportInstanceId, string reportFileName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'tenant' is set
            if (tenant == null)
            {
                throw new FactSet.SDK.Vermilion.Client.ApiException(400, "Missing required parameter 'tenant' when calling ReportInstanceApi->V1TenantReportInstancesReportInstanceIdResultsReportFileNameGet");
            }

            // verify the required parameter 'reportInstanceId' is set
            if (reportInstanceId == null)
            {
                throw new FactSet.SDK.Vermilion.Client.ApiException(400, "Missing required parameter 'reportInstanceId' when calling ReportInstanceApi->V1TenantReportInstancesReportInstanceIdResultsReportFileNameGet");
            }

            // verify the required parameter 'reportFileName' is set
            if (reportFileName == null)
            {
                throw new FactSet.SDK.Vermilion.Client.ApiException(400, "Missing required parameter 'reportFileName' when calling ReportInstanceApi->V1TenantReportInstancesReportInstanceIdResultsReportFileNameGet");
            }


            FactSet.SDK.Vermilion.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.Vermilion.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.Vermilion.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.Vermilion.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("tenant", FactSet.SDK.Vermilion.Client.ClientUtils.ParameterToString(tenant)); // path parameter
            localVarRequestOptions.PathParameters.Add("reportInstanceId", FactSet.SDK.Vermilion.Client.ClientUtils.ParameterToString(reportInstanceId)); // path parameter
            localVarRequestOptions.PathParameters.Add("reportFileName", FactSet.SDK.Vermilion.Client.ClientUtils.ParameterToString(reportFileName)); // path parameter

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.Vermilion.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/v1/{tenant}/report-instances/{reportInstanceId}/results/{reportFileName}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V1TenantReportInstancesReportInstanceIdResultsReportFileNameGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
