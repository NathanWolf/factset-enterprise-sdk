/*
 * VRS API documentation
 *
 * Documentation on all available end points in the VRSAPI
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = FactSet.SDK.Vermilion.Client.OpenAPIDateConverter;

namespace FactSet.SDK.Vermilion.Model
{
    /// <summary>
    /// RecordSetFieldValues
    /// </summary>
    [DataContract(Name = "RecordSetFieldValues")]
    public partial class RecordSetFieldValues : IEquatable<RecordSetFieldValues>, IValidatableObject
    {
        /// <summary>
        /// Defines FieldType
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum FieldTypeEnum
        {
            /// <summary>
            /// Enum BOOLEAN for value: BOOLEAN
            /// </summary>
            [EnumMember(Value = "BOOLEAN")]
            BOOLEAN = 1,

            /// <summary>
            /// Enum DATETIME for value: DATETIME
            /// </summary>
            [EnumMember(Value = "DATETIME")]
            DATETIME = 2,

            /// <summary>
            /// Enum DECIMAL for value: DECIMAL
            /// </summary>
            [EnumMember(Value = "DECIMAL")]
            DECIMAL = 3,

            /// <summary>
            /// Enum HTML for value: HTML
            /// </summary>
            [EnumMember(Value = "HTML")]
            HTML = 4,

            /// <summary>
            /// Enum INTEGER for value: INTEGER
            /// </summary>
            [EnumMember(Value = "INTEGER")]
            INTEGER = 5,

            /// <summary>
            /// Enum TEXT for value: TEXT
            /// </summary>
            [EnumMember(Value = "TEXT")]
            TEXT = 6

        }


        /// <summary>
        /// Gets or Sets FieldType
        /// </summary>
        [DataMember(Name = "fieldType", EmitDefaultValue = false)]
        public FieldTypeEnum? FieldType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="RecordSetFieldValues" /> class.
        /// </summary>
        /// <param name="fieldId">fieldId.</param>
        /// <param name="fieldType">fieldType.</param>
        /// <param name="fieldValue">fieldValue.</param>
        public RecordSetFieldValues(int fieldId = default(int), FieldTypeEnum? fieldType = default(FieldTypeEnum?), string fieldValue = default(string))
        {
            this.FieldId = fieldId;
            this.FieldType = fieldType;
            this.FieldValue = fieldValue;
        }

        /// <summary>
        /// Gets or Sets FieldId
        /// </summary>
        [DataMember(Name = "fieldId", EmitDefaultValue = false)]
        public int FieldId { get; set; }

        /// <summary>
        /// Gets or Sets FieldValue
        /// </summary>
        [DataMember(Name = "fieldValue", EmitDefaultValue = false)]
        public string FieldValue { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class RecordSetFieldValues {\n");
            sb.Append("  FieldId: ").Append(FieldId).Append("\n");
            sb.Append("  FieldType: ").Append(FieldType).Append("\n");
            sb.Append("  FieldValue: ").Append(FieldValue).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as RecordSetFieldValues);
        }

        /// <summary>
        /// Returns true if RecordSetFieldValues instances are equal
        /// </summary>
        /// <param name="input">Instance of RecordSetFieldValues to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(RecordSetFieldValues input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.FieldId == input.FieldId ||
                    this.FieldId.Equals(input.FieldId)
                ) && 
                (
                    this.FieldType == input.FieldType ||
                    this.FieldType.Equals(input.FieldType)
                ) && 
                (
                    this.FieldValue == input.FieldValue ||
                    (this.FieldValue != null &&
                    this.FieldValue.Equals(input.FieldValue))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.FieldId.GetHashCode();
                hashCode = (hashCode * 59) + this.FieldType.GetHashCode();
                if (this.FieldValue != null)
                {
                    hashCode = (hashCode * 59) + this.FieldValue.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
