/*
 * Documents Distributor - Documents API
 *
 * Documents APIs that provide filings such as Global Filings and XML files such as StreetAccount    Global Filings API provides the capability to search and download filings documents from various exchanges around the world. The API also provides relevant metadata such as document source, company identifiers and form type around each filings document. Filings providers currently include EDGAR and SYMEX WebDisclosure.      StreetAccount XML API provides access to historical StreetAccount (SA) news. SA provides a summary for various corporate and market news written by journalist with background in financial markets.    The API delivers SA stories in XML format based on user-specified date input parameters. When the API request is completed, output files will be made available back to the users through a secure URL. This API has three endpoints (1) Request Files (2) Check Status (3) Get Files.   Files delivered contain both metadata and content body in each file. This eliminates the need to make multiple requests through multiple services to get all the information.  
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = FactSet.SDK.DocumentsDistributorDocuments.Client.OpenAPIDateConverter;

namespace FactSet.SDK.DocumentsDistributorDocuments.Model
{
    /// <summary>
    /// CheckstatusResponse
    /// </summary>
    [DataContract(Name = "checkstatusResponse")]
    public partial class CheckstatusResponse : IEquatable<CheckstatusResponse>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CheckstatusResponse" /> class.
        /// </summary>
        /// <param name="jobID">Unique id to get the xml files for the requested date.</param>
        /// <param name="status">Returns any of the 2 results Submitted -&gt;Running-&gt;Completed and Failed.</param>
        /// <param name="percentDone">Returns how much percentage of  task is completed for the requested jobID.</param>
        public CheckstatusResponse(string jobID = default(string), string status = default(string), int percentDone = default(int))
        {
            this.JobID = jobID;
            this.Status = status;
            this.PercentDone = percentDone;
        }

        /// <summary>
        /// Unique id to get the xml files for the requested date
        /// </summary>
        /// <value>Unique id to get the xml files for the requested date</value>
        [DataMember(Name = "jobID", EmitDefaultValue = false)]
        public string JobID { get; set; }

        /// <summary>
        /// Returns any of the 2 results Submitted -&gt;Running-&gt;Completed and Failed
        /// </summary>
        /// <value>Returns any of the 2 results Submitted -&gt;Running-&gt;Completed and Failed</value>
        [DataMember(Name = "status", EmitDefaultValue = false)]
        public string Status { get; set; }

        /// <summary>
        /// Returns how much percentage of  task is completed for the requested jobID
        /// </summary>
        /// <value>Returns how much percentage of  task is completed for the requested jobID</value>
        [DataMember(Name = "percentDone", EmitDefaultValue = false)]
        public int PercentDone { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CheckstatusResponse {\n");
            sb.Append("  JobID: ").Append(JobID).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  PercentDone: ").Append(PercentDone).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CheckstatusResponse);
        }

        /// <summary>
        /// Returns true if CheckstatusResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of CheckstatusResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CheckstatusResponse input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.JobID == input.JobID ||
                    (this.JobID != null &&
                    this.JobID.Equals(input.JobID))
                ) && 
                (
                    this.Status == input.Status ||
                    (this.Status != null &&
                    this.Status.Equals(input.Status))
                ) && 
                (
                    this.PercentDone == input.PercentDone ||
                    this.PercentDone.Equals(input.PercentDone)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.JobID != null)
                    hashCode = hashCode * 59 + this.JobID.GetHashCode();
                if (this.Status != null)
                    hashCode = hashCode * 59 + this.Status.GetHashCode();
                hashCode = hashCode * 59 + this.PercentDone.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
