/*
 * Documents Distributor - Documents API
 *
 * Documents APIs that provide filings such as Global Filings and XML files such as StreetAccount    Global Filings API provides the capability to search and download filings documents from various exchanges around the world. The API also provides relevant metadata such as document source, company identifiers and form type around each filings document. Filings providers currently include EDGAR and SYMEX WebDisclosure.      StreetAccount XML API provides access to historical StreetAccount (SA) news. SA provides a summary for various corporate and market news written by journalist with background in financial markets.    The API delivers SA stories in XML format based on user-specified date input parameters. When the API request is completed, output files will be made available back to the users through a secure URL. This API has three endpoints (1) Request Files (2) Check Status (3) Get Files.   Files delivered contain both metadata and content body in each file. This eliminates the need to make multiple requests through multiple services to get all the information.  
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using FactSet.SDK.DocumentsDistributorDocuments.Client;
using FactSet.SDK.DocumentsDistributorDocuments.Model;
using FactSet.SDK.Utils.Authentication;

namespace FactSet.SDK.DocumentsDistributorDocuments.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IGlobalFilingsAPIApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Retrieve form types for each available Filings Source
        /// </summary>
        /// <remarks>
        /// Gets all available form types for the filings sources. Source parameter can be used to filter the results.
        /// </remarks>
        /// <exception cref="FactSet.SDK.DocumentsDistributorDocuments.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="source">This parameter filters the results based on the source of the filings document.</param>
        /// <returns>Response</returns>
        Response GlobalFilingsV1FormTypesGet(string source);

        /// <summary>
        /// Retrieve form types for each available Filings Source
        /// </summary>
        /// <remarks>
        /// Gets all available form types for the filings sources. Source parameter can be used to filter the results.
        /// </remarks>
        /// <exception cref="FactSet.SDK.DocumentsDistributorDocuments.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="source">This parameter filters the results based on the source of the filings document.</param>
        /// <returns>ApiResponse of Response</returns>
        ApiResponse<Response> GlobalFilingsV1FormTypesGetWithHttpInfo(string source);
        /// <summary>
        /// Retrieve filings and metadata within FactSet coverage
        /// </summary>
        /// <remarks>
        /// Gets the latest 25 filings files. Parameters can be used to filter and narrow down the results
        /// </remarks>
        /// <exception cref="FactSet.SDK.DocumentsDistributorDocuments.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="source">This parameter filters the results based on the source of the filings documents.</param>
        /// <param name="paginationLimit">Specifies the maximum number of results to return per result (max. 25)</param>
        /// <param name="paginationOffset">Specifies the starting point for pagination. This parameter is used to identify the beginning of next set of results</param>
        /// <param name="sort">Enables to get the data in ascending or descending order based on startTime. Results are in reverse chronological order if this parameter is not used (optional, default to -startDate)</param>
        /// <param name="startDate">The earliest date the API should fetch for. Dates can be YYYY-MM-DD format (optional)</param>
        /// <param name="endDate">The latest date the API should fetch for. Dates can be YYYY-MM-DD format (optional)</param>
        /// <param name="ids">This parameter filters the results based on ticker ID. (optional)</param>
        /// <param name="formType">This parameter filters the results based on filings formType. Use the form-types endpoint to view the formTypes available by filings source. (optional)</param>
        /// <returns>Response</returns>
        Response GlobalFilingsV1ListFilesGet(string source, int paginationLimit, int paginationOffset, string sort = default(string), string startDate = default(string), string endDate = default(string), string ids = default(string), string formType = default(string));

        /// <summary>
        /// Retrieve filings and metadata within FactSet coverage
        /// </summary>
        /// <remarks>
        /// Gets the latest 25 filings files. Parameters can be used to filter and narrow down the results
        /// </remarks>
        /// <exception cref="FactSet.SDK.DocumentsDistributorDocuments.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="source">This parameter filters the results based on the source of the filings documents.</param>
        /// <param name="paginationLimit">Specifies the maximum number of results to return per result (max. 25)</param>
        /// <param name="paginationOffset">Specifies the starting point for pagination. This parameter is used to identify the beginning of next set of results</param>
        /// <param name="sort">Enables to get the data in ascending or descending order based on startTime. Results are in reverse chronological order if this parameter is not used (optional, default to -startDate)</param>
        /// <param name="startDate">The earliest date the API should fetch for. Dates can be YYYY-MM-DD format (optional)</param>
        /// <param name="endDate">The latest date the API should fetch for. Dates can be YYYY-MM-DD format (optional)</param>
        /// <param name="ids">This parameter filters the results based on ticker ID. (optional)</param>
        /// <param name="formType">This parameter filters the results based on filings formType. Use the form-types endpoint to view the formTypes available by filings source. (optional)</param>
        /// <returns>ApiResponse of Response</returns>
        ApiResponse<Response> GlobalFilingsV1ListFilesGetWithHttpInfo(string source, int paginationLimit, int paginationOffset, string sort = default(string), string startDate = default(string), string endDate = default(string), string ids = default(string), string formType = default(string));
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IGlobalFilingsAPIApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Retrieve form types for each available Filings Source
        /// </summary>
        /// <remarks>
        /// Gets all available form types for the filings sources. Source parameter can be used to filter the results.
        /// </remarks>
        /// <exception cref="FactSet.SDK.DocumentsDistributorDocuments.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="source">This parameter filters the results based on the source of the filings document.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Response</returns>
        System.Threading.Tasks.Task<Response> GlobalFilingsV1FormTypesGetAsync(string source, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieve form types for each available Filings Source
        /// </summary>
        /// <remarks>
        /// Gets all available form types for the filings sources. Source parameter can be used to filter the results.
        /// </remarks>
        /// <exception cref="FactSet.SDK.DocumentsDistributorDocuments.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="source">This parameter filters the results based on the source of the filings document.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<Response>> GlobalFilingsV1FormTypesGetWithHttpInfoAsync(string source, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieve filings and metadata within FactSet coverage
        /// </summary>
        /// <remarks>
        /// Gets the latest 25 filings files. Parameters can be used to filter and narrow down the results
        /// </remarks>
        /// <exception cref="FactSet.SDK.DocumentsDistributorDocuments.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="source">This parameter filters the results based on the source of the filings documents.</param>
        /// <param name="paginationLimit">Specifies the maximum number of results to return per result (max. 25)</param>
        /// <param name="paginationOffset">Specifies the starting point for pagination. This parameter is used to identify the beginning of next set of results</param>
        /// <param name="sort">Enables to get the data in ascending or descending order based on startTime. Results are in reverse chronological order if this parameter is not used (optional, default to -startDate)</param>
        /// <param name="startDate">The earliest date the API should fetch for. Dates can be YYYY-MM-DD format (optional)</param>
        /// <param name="endDate">The latest date the API should fetch for. Dates can be YYYY-MM-DD format (optional)</param>
        /// <param name="ids">This parameter filters the results based on ticker ID. (optional)</param>
        /// <param name="formType">This parameter filters the results based on filings formType. Use the form-types endpoint to view the formTypes available by filings source. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Response</returns>
        System.Threading.Tasks.Task<Response> GlobalFilingsV1ListFilesGetAsync(string source, int paginationLimit, int paginationOffset, string sort = default(string), string startDate = default(string), string endDate = default(string), string ids = default(string), string formType = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieve filings and metadata within FactSet coverage
        /// </summary>
        /// <remarks>
        /// Gets the latest 25 filings files. Parameters can be used to filter and narrow down the results
        /// </remarks>
        /// <exception cref="FactSet.SDK.DocumentsDistributorDocuments.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="source">This parameter filters the results based on the source of the filings documents.</param>
        /// <param name="paginationLimit">Specifies the maximum number of results to return per result (max. 25)</param>
        /// <param name="paginationOffset">Specifies the starting point for pagination. This parameter is used to identify the beginning of next set of results</param>
        /// <param name="sort">Enables to get the data in ascending or descending order based on startTime. Results are in reverse chronological order if this parameter is not used (optional, default to -startDate)</param>
        /// <param name="startDate">The earliest date the API should fetch for. Dates can be YYYY-MM-DD format (optional)</param>
        /// <param name="endDate">The latest date the API should fetch for. Dates can be YYYY-MM-DD format (optional)</param>
        /// <param name="ids">This parameter filters the results based on ticker ID. (optional)</param>
        /// <param name="formType">This parameter filters the results based on filings formType. Use the form-types endpoint to view the formTypes available by filings source. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<Response>> GlobalFilingsV1ListFilesGetWithHttpInfoAsync(string source, int paginationLimit, int paginationOffset, string sort = default(string), string startDate = default(string), string endDate = default(string), string ids = default(string), string formType = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IGlobalFilingsAPIApi : IGlobalFilingsAPIApiSync, IGlobalFilingsAPIApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class GlobalFilingsAPIApi : IGlobalFilingsAPIApi
    {
        private FactSet.SDK.DocumentsDistributorDocuments.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="GlobalFilingsAPIApi"/> class.
        /// </summary>
        /// <returns></returns>
        public GlobalFilingsAPIApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="GlobalFilingsAPIApi"/> class.
        /// </summary>
        /// <returns></returns>
        public GlobalFilingsAPIApi(string basePath)
        {
            this.Configuration = FactSet.SDK.DocumentsDistributorDocuments.Client.Configuration.MergeConfigurations(
                FactSet.SDK.DocumentsDistributorDocuments.Client.GlobalConfiguration.Instance,
                new FactSet.SDK.DocumentsDistributorDocuments.Client.Configuration { BasePath = basePath }
            );
            this.Client = new FactSet.SDK.DocumentsDistributorDocuments.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new FactSet.SDK.DocumentsDistributorDocuments.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = FactSet.SDK.DocumentsDistributorDocuments.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="GlobalFilingsAPIApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public GlobalFilingsAPIApi(FactSet.SDK.DocumentsDistributorDocuments.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = FactSet.SDK.DocumentsDistributorDocuments.Client.Configuration.MergeConfigurations(
                FactSet.SDK.DocumentsDistributorDocuments.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new FactSet.SDK.DocumentsDistributorDocuments.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new FactSet.SDK.DocumentsDistributorDocuments.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = FactSet.SDK.DocumentsDistributorDocuments.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="GlobalFilingsAPIApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public GlobalFilingsAPIApi(FactSet.SDK.DocumentsDistributorDocuments.Client.ISynchronousClient client, FactSet.SDK.DocumentsDistributorDocuments.Client.IAsynchronousClient asyncClient, FactSet.SDK.DocumentsDistributorDocuments.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = FactSet.SDK.DocumentsDistributorDocuments.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public FactSet.SDK.DocumentsDistributorDocuments.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public FactSet.SDK.DocumentsDistributorDocuments.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public FactSet.SDK.DocumentsDistributorDocuments.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public FactSet.SDK.DocumentsDistributorDocuments.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Retrieve form types for each available Filings Source Gets all available form types for the filings sources. Source parameter can be used to filter the results.
        /// </summary>
        /// <exception cref="FactSet.SDK.DocumentsDistributorDocuments.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="source">This parameter filters the results based on the source of the filings document.</param>
        /// <returns>Response</returns>
        public Response GlobalFilingsV1FormTypesGet(string source)
        {
            FactSet.SDK.DocumentsDistributorDocuments.Client.ApiResponse<Response> localVarResponse = GlobalFilingsV1FormTypesGetWithHttpInfo(source);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve form types for each available Filings Source Gets all available form types for the filings sources. Source parameter can be used to filter the results.
        /// </summary>
        /// <exception cref="FactSet.SDK.DocumentsDistributorDocuments.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="source">This parameter filters the results based on the source of the filings document.</param>
        /// <returns>ApiResponse of Response</returns>
        public FactSet.SDK.DocumentsDistributorDocuments.Client.ApiResponse<Response> GlobalFilingsV1FormTypesGetWithHttpInfo(string source)
        {
            // verify the required parameter 'source' is set
            if (source == null)
                throw new FactSet.SDK.DocumentsDistributorDocuments.Client.ApiException(400, "Missing required parameter 'source' when calling GlobalFilingsAPIApi->GlobalFilingsV1FormTypesGet");

            FactSet.SDK.DocumentsDistributorDocuments.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.DocumentsDistributorDocuments.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.DocumentsDistributorDocuments.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = FactSet.SDK.DocumentsDistributorDocuments.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.DocumentsDistributorDocuments.Client.ClientUtils.ParameterToMultiMap("", "source", source));

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.DocumentsDistributorDocuments.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<Response>("/global-filings/v1/form-types", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GlobalFilingsV1FormTypesGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve form types for each available Filings Source Gets all available form types for the filings sources. Source parameter can be used to filter the results.
        /// </summary>
        /// <exception cref="FactSet.SDK.DocumentsDistributorDocuments.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="source">This parameter filters the results based on the source of the filings document.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Response</returns>
        public async System.Threading.Tasks.Task<Response> GlobalFilingsV1FormTypesGetAsync(string source, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            FactSet.SDK.DocumentsDistributorDocuments.Client.ApiResponse<Response> localVarResponse = await GlobalFilingsV1FormTypesGetWithHttpInfoAsync(source, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve form types for each available Filings Source Gets all available form types for the filings sources. Source parameter can be used to filter the results.
        /// </summary>
        /// <exception cref="FactSet.SDK.DocumentsDistributorDocuments.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="source">This parameter filters the results based on the source of the filings document.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Response)</returns>
        public async System.Threading.Tasks.Task<FactSet.SDK.DocumentsDistributorDocuments.Client.ApiResponse<Response>> GlobalFilingsV1FormTypesGetWithHttpInfoAsync(string source, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'source' is set
            if (source == null)
                throw new FactSet.SDK.DocumentsDistributorDocuments.Client.ApiException(400, "Missing required parameter 'source' when calling GlobalFilingsAPIApi->GlobalFilingsV1FormTypesGet");


            FactSet.SDK.DocumentsDistributorDocuments.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.DocumentsDistributorDocuments.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = FactSet.SDK.DocumentsDistributorDocuments.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = FactSet.SDK.DocumentsDistributorDocuments.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.DocumentsDistributorDocuments.Client.ClientUtils.ParameterToMultiMap("", "source", source));

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.DocumentsDistributorDocuments.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Response>("/global-filings/v1/form-types", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GlobalFilingsV1FormTypesGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve filings and metadata within FactSet coverage Gets the latest 25 filings files. Parameters can be used to filter and narrow down the results
        /// </summary>
        /// <exception cref="FactSet.SDK.DocumentsDistributorDocuments.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="source">This parameter filters the results based on the source of the filings documents.</param>
        /// <param name="paginationLimit">Specifies the maximum number of results to return per result (max. 25)</param>
        /// <param name="paginationOffset">Specifies the starting point for pagination. This parameter is used to identify the beginning of next set of results</param>
        /// <param name="sort">Enables to get the data in ascending or descending order based on startTime. Results are in reverse chronological order if this parameter is not used (optional, default to -startDate)</param>
        /// <param name="startDate">The earliest date the API should fetch for. Dates can be YYYY-MM-DD format (optional)</param>
        /// <param name="endDate">The latest date the API should fetch for. Dates can be YYYY-MM-DD format (optional)</param>
        /// <param name="ids">This parameter filters the results based on ticker ID. (optional)</param>
        /// <param name="formType">This parameter filters the results based on filings formType. Use the form-types endpoint to view the formTypes available by filings source. (optional)</param>
        /// <returns>Response</returns>
        public Response GlobalFilingsV1ListFilesGet(string source, int paginationLimit, int paginationOffset, string sort = default(string), string startDate = default(string), string endDate = default(string), string ids = default(string), string formType = default(string))
        {
            FactSet.SDK.DocumentsDistributorDocuments.Client.ApiResponse<Response> localVarResponse = GlobalFilingsV1ListFilesGetWithHttpInfo(source, paginationLimit, paginationOffset, sort, startDate, endDate, ids, formType);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve filings and metadata within FactSet coverage Gets the latest 25 filings files. Parameters can be used to filter and narrow down the results
        /// </summary>
        /// <exception cref="FactSet.SDK.DocumentsDistributorDocuments.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="source">This parameter filters the results based on the source of the filings documents.</param>
        /// <param name="paginationLimit">Specifies the maximum number of results to return per result (max. 25)</param>
        /// <param name="paginationOffset">Specifies the starting point for pagination. This parameter is used to identify the beginning of next set of results</param>
        /// <param name="sort">Enables to get the data in ascending or descending order based on startTime. Results are in reverse chronological order if this parameter is not used (optional, default to -startDate)</param>
        /// <param name="startDate">The earliest date the API should fetch for. Dates can be YYYY-MM-DD format (optional)</param>
        /// <param name="endDate">The latest date the API should fetch for. Dates can be YYYY-MM-DD format (optional)</param>
        /// <param name="ids">This parameter filters the results based on ticker ID. (optional)</param>
        /// <param name="formType">This parameter filters the results based on filings formType. Use the form-types endpoint to view the formTypes available by filings source. (optional)</param>
        /// <returns>ApiResponse of Response</returns>
        public FactSet.SDK.DocumentsDistributorDocuments.Client.ApiResponse<Response> GlobalFilingsV1ListFilesGetWithHttpInfo(string source, int paginationLimit, int paginationOffset, string sort = default(string), string startDate = default(string), string endDate = default(string), string ids = default(string), string formType = default(string))
        {
            // verify the required parameter 'source' is set
            if (source == null)
                throw new FactSet.SDK.DocumentsDistributorDocuments.Client.ApiException(400, "Missing required parameter 'source' when calling GlobalFilingsAPIApi->GlobalFilingsV1ListFilesGet");

            FactSet.SDK.DocumentsDistributorDocuments.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.DocumentsDistributorDocuments.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.DocumentsDistributorDocuments.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = FactSet.SDK.DocumentsDistributorDocuments.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.DocumentsDistributorDocuments.Client.ClientUtils.ParameterToMultiMap("", "source", source));
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.DocumentsDistributorDocuments.Client.ClientUtils.ParameterToMultiMap("", "_sort", sort));
            }
            if (startDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.DocumentsDistributorDocuments.Client.ClientUtils.ParameterToMultiMap("", "startDate", startDate));
            }
            if (endDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.DocumentsDistributorDocuments.Client.ClientUtils.ParameterToMultiMap("", "endDate", endDate));
            }
            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.DocumentsDistributorDocuments.Client.ClientUtils.ParameterToMultiMap("", "_paginationLimit", paginationLimit));
            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.DocumentsDistributorDocuments.Client.ClientUtils.ParameterToMultiMap("", "_paginationOffset", paginationOffset));
            if (ids != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.DocumentsDistributorDocuments.Client.ClientUtils.ParameterToMultiMap("", "ids", ids));
            }
            if (formType != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.DocumentsDistributorDocuments.Client.ClientUtils.ParameterToMultiMap("", "formType", formType));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.DocumentsDistributorDocuments.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<Response>("/global-filings/v1/list-files", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GlobalFilingsV1ListFilesGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve filings and metadata within FactSet coverage Gets the latest 25 filings files. Parameters can be used to filter and narrow down the results
        /// </summary>
        /// <exception cref="FactSet.SDK.DocumentsDistributorDocuments.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="source">This parameter filters the results based on the source of the filings documents.</param>
        /// <param name="paginationLimit">Specifies the maximum number of results to return per result (max. 25)</param>
        /// <param name="paginationOffset">Specifies the starting point for pagination. This parameter is used to identify the beginning of next set of results</param>
        /// <param name="sort">Enables to get the data in ascending or descending order based on startTime. Results are in reverse chronological order if this parameter is not used (optional, default to -startDate)</param>
        /// <param name="startDate">The earliest date the API should fetch for. Dates can be YYYY-MM-DD format (optional)</param>
        /// <param name="endDate">The latest date the API should fetch for. Dates can be YYYY-MM-DD format (optional)</param>
        /// <param name="ids">This parameter filters the results based on ticker ID. (optional)</param>
        /// <param name="formType">This parameter filters the results based on filings formType. Use the form-types endpoint to view the formTypes available by filings source. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Response</returns>
        public async System.Threading.Tasks.Task<Response> GlobalFilingsV1ListFilesGetAsync(string source, int paginationLimit, int paginationOffset, string sort = default(string), string startDate = default(string), string endDate = default(string), string ids = default(string), string formType = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            FactSet.SDK.DocumentsDistributorDocuments.Client.ApiResponse<Response> localVarResponse = await GlobalFilingsV1ListFilesGetWithHttpInfoAsync(source, paginationLimit, paginationOffset, sort, startDate, endDate, ids, formType, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve filings and metadata within FactSet coverage Gets the latest 25 filings files. Parameters can be used to filter and narrow down the results
        /// </summary>
        /// <exception cref="FactSet.SDK.DocumentsDistributorDocuments.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="source">This parameter filters the results based on the source of the filings documents.</param>
        /// <param name="paginationLimit">Specifies the maximum number of results to return per result (max. 25)</param>
        /// <param name="paginationOffset">Specifies the starting point for pagination. This parameter is used to identify the beginning of next set of results</param>
        /// <param name="sort">Enables to get the data in ascending or descending order based on startTime. Results are in reverse chronological order if this parameter is not used (optional, default to -startDate)</param>
        /// <param name="startDate">The earliest date the API should fetch for. Dates can be YYYY-MM-DD format (optional)</param>
        /// <param name="endDate">The latest date the API should fetch for. Dates can be YYYY-MM-DD format (optional)</param>
        /// <param name="ids">This parameter filters the results based on ticker ID. (optional)</param>
        /// <param name="formType">This parameter filters the results based on filings formType. Use the form-types endpoint to view the formTypes available by filings source. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Response)</returns>
        public async System.Threading.Tasks.Task<FactSet.SDK.DocumentsDistributorDocuments.Client.ApiResponse<Response>> GlobalFilingsV1ListFilesGetWithHttpInfoAsync(string source, int paginationLimit, int paginationOffset, string sort = default(string), string startDate = default(string), string endDate = default(string), string ids = default(string), string formType = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'source' is set
            if (source == null)
                throw new FactSet.SDK.DocumentsDistributorDocuments.Client.ApiException(400, "Missing required parameter 'source' when calling GlobalFilingsAPIApi->GlobalFilingsV1ListFilesGet");


            FactSet.SDK.DocumentsDistributorDocuments.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.DocumentsDistributorDocuments.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = FactSet.SDK.DocumentsDistributorDocuments.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = FactSet.SDK.DocumentsDistributorDocuments.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.DocumentsDistributorDocuments.Client.ClientUtils.ParameterToMultiMap("", "source", source));
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.DocumentsDistributorDocuments.Client.ClientUtils.ParameterToMultiMap("", "_sort", sort));
            }
            if (startDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.DocumentsDistributorDocuments.Client.ClientUtils.ParameterToMultiMap("", "startDate", startDate));
            }
            if (endDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.DocumentsDistributorDocuments.Client.ClientUtils.ParameterToMultiMap("", "endDate", endDate));
            }
            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.DocumentsDistributorDocuments.Client.ClientUtils.ParameterToMultiMap("", "_paginationLimit", paginationLimit));
            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.DocumentsDistributorDocuments.Client.ClientUtils.ParameterToMultiMap("", "_paginationOffset", paginationOffset));
            if (ids != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.DocumentsDistributorDocuments.Client.ClientUtils.ParameterToMultiMap("", "ids", ids));
            }
            if (formType != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.DocumentsDistributorDocuments.Client.ClientUtils.ParameterToMultiMap("", "formType", formType));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.DocumentsDistributorDocuments.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Response>("/global-filings/v1/list-files", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GlobalFilingsV1ListFilesGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
