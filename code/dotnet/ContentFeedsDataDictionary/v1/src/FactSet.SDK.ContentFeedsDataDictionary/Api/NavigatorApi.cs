/*
 * CTS Data Dictionary API
 *
 * An API for interacting with CTS Data Dictionary.
 *
 * The version of the OpenAPI document: 0.2
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using FactSet.SDK.ContentFeedsDataDictionary.Client;
using FactSet.SDK.ContentFeedsDataDictionary.Model;
using FactSet.SDK.Utils.Authentication;

namespace FactSet.SDK.ContentFeedsDataDictionary.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface INavigatorApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Returns the data items (along with the products they belong to) that contain at least one of the search terms as a substring of either their name or description.
        /// </summary>
        /// <exception cref="FactSet.SDK.ContentFeedsDataDictionary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="basicSearchRequest">A list of search terms (each term must be at least two characters).</param>
        /// <returns>BasicSearchResponse</returns>
        BasicSearchResponse NavigatorBasicSearchPost(BasicSearchRequest basicSearchRequest);

        /// <summary>
        /// Returns the data items (along with the products they belong to) that contain at least one of the search terms as a substring of either their name or description.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FactSet.SDK.ContentFeedsDataDictionary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="basicSearchRequest">A list of search terms (each term must be at least two characters).</param>
        /// <returns>ApiResponse of BasicSearchResponse</returns>
        ApiResponse<BasicSearchResponse> NavigatorBasicSearchPostWithHttpInfo(BasicSearchRequest basicSearchRequest);
        /// <summary>
        /// Get the list of data items associated with a product for Navigator.
        /// </summary>
        /// <exception cref="FactSet.SDK.ContentFeedsDataDictionary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId">The id for the Product to fetch the list of data items for.</param>
        /// <returns>List<DataItem></returns>
        List<DataItem> NavigatorDataItemsProductIdGet(string productId);

        /// <summary>
        /// Get the list of data items associated with a product for Navigator.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FactSet.SDK.ContentFeedsDataDictionary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId">The id for the Product to fetch the list of data items for.</param>
        /// <returns>ApiResponse of List<DataItem></returns>
        ApiResponse<List<DataItem>> NavigatorDataItemsProductIdGetWithHttpInfo(string productId);
        /// <summary>
        /// Get the list of products for Navigator.
        /// </summary>
        /// <exception cref="FactSet.SDK.ContentFeedsDataDictionary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List<Product></returns>
        List<Product> NavigatorProductsGet();

        /// <summary>
        /// Get the list of products for Navigator.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FactSet.SDK.ContentFeedsDataDictionary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List<Product></returns>
        ApiResponse<List<Product>> NavigatorProductsGetWithHttpInfo();
        /// <summary>
        /// Get a list of sources where the specified data item can be found, for each delivery method, filtered to the appearances of the given data item within the specified product.
        /// </summary>
        /// <exception cref="FactSet.SDK.ContentFeedsDataDictionary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataItemId">The id for the DataItem to fetch the sources for.</param>
        /// <param name="productId">The id for the Product to filter down the sources returned on.</param>
        /// <returns>NavigatorSourcesResponse</returns>
        NavigatorSourcesResponse NavigatorSourcesDataItemIdGet(string dataItemId, string productId);

        /// <summary>
        /// Get a list of sources where the specified data item can be found, for each delivery method, filtered to the appearances of the given data item within the specified product.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FactSet.SDK.ContentFeedsDataDictionary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataItemId">The id for the DataItem to fetch the sources for.</param>
        /// <param name="productId">The id for the Product to filter down the sources returned on.</param>
        /// <returns>ApiResponse of NavigatorSourcesResponse</returns>
        ApiResponse<NavigatorSourcesResponse> NavigatorSourcesDataItemIdGetWithHttpInfo(string dataItemId, string productId);
        /// <summary>
        /// Get a list of sources by delivery method for the given product_id
        /// </summary>
        /// <exception cref="FactSet.SDK.ContentFeedsDataDictionary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId">The id for the Product to filter down the sources returned on.</param>
        /// <returns>NavigatorSourcesResponse</returns>
        NavigatorSourcesResponse NavigatorSourcesGet(string productId);

        /// <summary>
        /// Get a list of sources by delivery method for the given product_id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FactSet.SDK.ContentFeedsDataDictionary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId">The id for the Product to filter down the sources returned on.</param>
        /// <returns>ApiResponse of NavigatorSourcesResponse</returns>
        ApiResponse<NavigatorSourcesResponse> NavigatorSourcesGetWithHttpInfo(string productId);
        /// <summary>
        /// Get the list of fields associated with a table for Navigator, and the code information for the specified data item, if applicable.
        /// </summary>
        /// <exception cref="FactSet.SDK.ContentFeedsDataDictionary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableId">The id for the Table to fetch the fields for.</param>
        /// <param name="dataItemId">The id for the DataItem. This is required in case the data item is represented as a code in Standard DataFeeds. (optional)</param>
        /// <returns>TableCodeFieldInfoResponse</returns>
        TableCodeFieldInfoResponse NavigatorTableFieldsTableIdGet(string tableId, string dataItemId = default(string));

        /// <summary>
        /// Get the list of fields associated with a table for Navigator, and the code information for the specified data item, if applicable.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FactSet.SDK.ContentFeedsDataDictionary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableId">The id for the Table to fetch the fields for.</param>
        /// <param name="dataItemId">The id for the DataItem. This is required in case the data item is represented as a code in Standard DataFeeds. (optional)</param>
        /// <returns>ApiResponse of TableCodeFieldInfoResponse</returns>
        ApiResponse<TableCodeFieldInfoResponse> NavigatorTableFieldsTableIdGetWithHttpInfo(string tableId, string dataItemId = default(string));
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface INavigatorApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Returns the data items (along with the products they belong to) that contain at least one of the search terms as a substring of either their name or description.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FactSet.SDK.ContentFeedsDataDictionary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="basicSearchRequest">A list of search terms (each term must be at least two characters).</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BasicSearchResponse</returns>
        System.Threading.Tasks.Task<BasicSearchResponse> NavigatorBasicSearchPostAsync(BasicSearchRequest basicSearchRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Returns the data items (along with the products they belong to) that contain at least one of the search terms as a substring of either their name or description.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FactSet.SDK.ContentFeedsDataDictionary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="basicSearchRequest">A list of search terms (each term must be at least two characters).</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BasicSearchResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<BasicSearchResponse>> NavigatorBasicSearchPostWithHttpInfoAsync(BasicSearchRequest basicSearchRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get the list of data items associated with a product for Navigator.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FactSet.SDK.ContentFeedsDataDictionary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId">The id for the Product to fetch the list of data items for.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;DataItem&gt;</returns>
        System.Threading.Tasks.Task<List<DataItem>> NavigatorDataItemsProductIdGetAsync(string productId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get the list of data items associated with a product for Navigator.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FactSet.SDK.ContentFeedsDataDictionary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId">The id for the Product to fetch the list of data items for.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List<DataItem>)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<DataItem>>> NavigatorDataItemsProductIdGetWithHttpInfoAsync(string productId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get the list of products for Navigator.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FactSet.SDK.ContentFeedsDataDictionary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Product&gt;</returns>
        System.Threading.Tasks.Task<List<Product>> NavigatorProductsGetAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get the list of products for Navigator.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FactSet.SDK.ContentFeedsDataDictionary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List<Product>)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Product>>> NavigatorProductsGetWithHttpInfoAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get a list of sources where the specified data item can be found, for each delivery method, filtered to the appearances of the given data item within the specified product.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FactSet.SDK.ContentFeedsDataDictionary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataItemId">The id for the DataItem to fetch the sources for.</param>
        /// <param name="productId">The id for the Product to filter down the sources returned on.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of NavigatorSourcesResponse</returns>
        System.Threading.Tasks.Task<NavigatorSourcesResponse> NavigatorSourcesDataItemIdGetAsync(string dataItemId, string productId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get a list of sources where the specified data item can be found, for each delivery method, filtered to the appearances of the given data item within the specified product.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FactSet.SDK.ContentFeedsDataDictionary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataItemId">The id for the DataItem to fetch the sources for.</param>
        /// <param name="productId">The id for the Product to filter down the sources returned on.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (NavigatorSourcesResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<NavigatorSourcesResponse>> NavigatorSourcesDataItemIdGetWithHttpInfoAsync(string dataItemId, string productId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get a list of sources by delivery method for the given product_id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FactSet.SDK.ContentFeedsDataDictionary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId">The id for the Product to filter down the sources returned on.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of NavigatorSourcesResponse</returns>
        System.Threading.Tasks.Task<NavigatorSourcesResponse> NavigatorSourcesGetAsync(string productId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get a list of sources by delivery method for the given product_id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FactSet.SDK.ContentFeedsDataDictionary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId">The id for the Product to filter down the sources returned on.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (NavigatorSourcesResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<NavigatorSourcesResponse>> NavigatorSourcesGetWithHttpInfoAsync(string productId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get the list of fields associated with a table for Navigator, and the code information for the specified data item, if applicable.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FactSet.SDK.ContentFeedsDataDictionary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableId">The id for the Table to fetch the fields for.</param>
        /// <param name="dataItemId">The id for the DataItem. This is required in case the data item is represented as a code in Standard DataFeeds. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TableCodeFieldInfoResponse</returns>
        System.Threading.Tasks.Task<TableCodeFieldInfoResponse> NavigatorTableFieldsTableIdGetAsync(string tableId, string dataItemId = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get the list of fields associated with a table for Navigator, and the code information for the specified data item, if applicable.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FactSet.SDK.ContentFeedsDataDictionary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableId">The id for the Table to fetch the fields for.</param>
        /// <param name="dataItemId">The id for the DataItem. This is required in case the data item is represented as a code in Standard DataFeeds. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TableCodeFieldInfoResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TableCodeFieldInfoResponse>> NavigatorTableFieldsTableIdGetWithHttpInfoAsync(string tableId, string dataItemId = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface INavigatorApi : INavigatorApiSync, INavigatorApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class NavigatorApi : INavigatorApi
    {
        private FactSet.SDK.ContentFeedsDataDictionary.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        # region Response Type Disctionaries
                private static readonly Dictionary<HttpStatusCode, System.Type> NavigatorBasicSearchPostResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)200, typeof(BasicSearchResponse) },
        };
        private static readonly Dictionary<HttpStatusCode, System.Type> NavigatorDataItemsProductIdGetResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)200, typeof(List<DataItem>) },
        };
        private static readonly Dictionary<HttpStatusCode, System.Type> NavigatorProductsGetResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)200, typeof(List<Product>) },
        };
        private static readonly Dictionary<HttpStatusCode, System.Type> NavigatorSourcesDataItemIdGetResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)200, typeof(NavigatorSourcesResponse) },
        };
        private static readonly Dictionary<HttpStatusCode, System.Type> NavigatorSourcesGetResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)200, typeof(NavigatorSourcesResponse) },
        };
        private static readonly Dictionary<HttpStatusCode, System.Type> NavigatorTableFieldsTableIdGetResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)200, typeof(TableCodeFieldInfoResponse) },
        };

        # endregion Response Type Disctionaries

        # region Api Response Objects
         

        # endregion Api Response Objects

        /// <summary>
        /// Initializes a new instance of the <see cref="NavigatorApi"/> class.
        /// </summary>
        /// <returns></returns>
        public NavigatorApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="NavigatorApi"/> class.
        /// </summary>
        /// <returns></returns>
        public NavigatorApi(string basePath)
        {
            this.Configuration = FactSet.SDK.ContentFeedsDataDictionary.Client.Configuration.MergeConfigurations(
                FactSet.SDK.ContentFeedsDataDictionary.Client.GlobalConfiguration.Instance,
                new FactSet.SDK.ContentFeedsDataDictionary.Client.Configuration { BasePath = basePath }
            );
            this.Client = new FactSet.SDK.ContentFeedsDataDictionary.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new FactSet.SDK.ContentFeedsDataDictionary.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = FactSet.SDK.ContentFeedsDataDictionary.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="NavigatorApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public NavigatorApi(FactSet.SDK.ContentFeedsDataDictionary.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = FactSet.SDK.ContentFeedsDataDictionary.Client.Configuration.MergeConfigurations(
                FactSet.SDK.ContentFeedsDataDictionary.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new FactSet.SDK.ContentFeedsDataDictionary.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new FactSet.SDK.ContentFeedsDataDictionary.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = FactSet.SDK.ContentFeedsDataDictionary.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="NavigatorApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public NavigatorApi(FactSet.SDK.ContentFeedsDataDictionary.Client.ISynchronousClient client, FactSet.SDK.ContentFeedsDataDictionary.Client.IAsynchronousClient asyncClient, FactSet.SDK.ContentFeedsDataDictionary.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = FactSet.SDK.ContentFeedsDataDictionary.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public FactSet.SDK.ContentFeedsDataDictionary.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public FactSet.SDK.ContentFeedsDataDictionary.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public FactSet.SDK.ContentFeedsDataDictionary.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public FactSet.SDK.ContentFeedsDataDictionary.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Returns the data items (along with the products they belong to) that contain at least one of the search terms as a substring of either their name or description. 
        /// </summary>
        /// <exception cref="FactSet.SDK.ContentFeedsDataDictionary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="basicSearchRequest">A list of search terms (each term must be at least two characters).</param>
        /// <returns>BasicSearchResponse</returns>
        public BasicSearchResponse NavigatorBasicSearchPost(BasicSearchRequest basicSearchRequest)
        {
            var localVarResponse = NavigatorBasicSearchPostWithHttpInfo(basicSearchRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns the data items (along with the products they belong to) that contain at least one of the search terms as a substring of either their name or description. 
        /// </summary>
        /// <exception cref="FactSet.SDK.ContentFeedsDataDictionary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="basicSearchRequest">A list of search terms (each term must be at least two characters).</param>
        /// <returns>ApiResponse of BasicSearchResponse</returns>
        public ApiResponse<BasicSearchResponse> NavigatorBasicSearchPostWithHttpInfo(BasicSearchRequest basicSearchRequest)
        {
            // verify the required parameter 'basicSearchRequest' is set
            if (basicSearchRequest == null)
            {
                throw new FactSet.SDK.ContentFeedsDataDictionary.Client.ApiException(400, "Missing required parameter 'basicSearchRequest' when calling NavigatorApi->NavigatorBasicSearchPost");
            }

            FactSet.SDK.ContentFeedsDataDictionary.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.ContentFeedsDataDictionary.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.ContentFeedsDataDictionary.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.ContentFeedsDataDictionary.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = basicSearchRequest;

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.ContentFeedsDataDictionary.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = NavigatorBasicSearchPostResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Post<
            BasicSearchResponse>("/navigator/basic_search", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("NavigatorBasicSearchPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// Returns the data items (along with the products they belong to) that contain at least one of the search terms as a substring of either their name or description. 
        /// </summary>
        /// <exception cref="FactSet.SDK.ContentFeedsDataDictionary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="basicSearchRequest">A list of search terms (each term must be at least two characters).</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BasicSearchResponse</returns>
        public async System.Threading.Tasks.Task<BasicSearchResponse>NavigatorBasicSearchPostAsync(BasicSearchRequest basicSearchRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await NavigatorBasicSearchPostWithHttpInfoAsync(basicSearchRequest, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns the data items (along with the products they belong to) that contain at least one of the search terms as a substring of either their name or description. 
        /// </summary>
        /// <exception cref="FactSet.SDK.ContentFeedsDataDictionary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="basicSearchRequest">A list of search terms (each term must be at least two characters).</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BasicSearchResponse)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<BasicSearchResponse>> NavigatorBasicSearchPostWithHttpInfoAsync(BasicSearchRequest basicSearchRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'basicSearchRequest' is set
            if (basicSearchRequest == null)
            {
                throw new FactSet.SDK.ContentFeedsDataDictionary.Client.ApiException(400, "Missing required parameter 'basicSearchRequest' when calling NavigatorApi->NavigatorBasicSearchPost");
            }


            FactSet.SDK.ContentFeedsDataDictionary.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.ContentFeedsDataDictionary.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.ContentFeedsDataDictionary.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.ContentFeedsDataDictionary.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = basicSearchRequest;

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.ContentFeedsDataDictionary.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = NavigatorBasicSearchPostResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<BasicSearchResponse>("/navigator/basic_search", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("NavigatorBasicSearchPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get the list of data items associated with a product for Navigator. 
        /// </summary>
        /// <exception cref="FactSet.SDK.ContentFeedsDataDictionary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId">The id for the Product to fetch the list of data items for.</param>
        /// <returns>List<DataItem></returns>
        public List<DataItem> NavigatorDataItemsProductIdGet(string productId)
        {
            var localVarResponse = NavigatorDataItemsProductIdGetWithHttpInfo(productId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get the list of data items associated with a product for Navigator. 
        /// </summary>
        /// <exception cref="FactSet.SDK.ContentFeedsDataDictionary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId">The id for the Product to fetch the list of data items for.</param>
        /// <returns>ApiResponse of List&lt;DataItem&gt;</returns>
        public ApiResponse<List<DataItem>> NavigatorDataItemsProductIdGetWithHttpInfo(string productId)
        {
            // verify the required parameter 'productId' is set
            if (productId == null)
            {
                throw new FactSet.SDK.ContentFeedsDataDictionary.Client.ApiException(400, "Missing required parameter 'productId' when calling NavigatorApi->NavigatorDataItemsProductIdGet");
            }

            FactSet.SDK.ContentFeedsDataDictionary.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.ContentFeedsDataDictionary.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.ContentFeedsDataDictionary.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.ContentFeedsDataDictionary.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("Product_id", FactSet.SDK.ContentFeedsDataDictionary.Client.ClientUtils.ParameterToString(productId)); // path parameter

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.ContentFeedsDataDictionary.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = NavigatorDataItemsProductIdGetResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Get<
            List<DataItem>>("/navigator/data_items/{Product_id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("NavigatorDataItemsProductIdGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// Get the list of data items associated with a product for Navigator. 
        /// </summary>
        /// <exception cref="FactSet.SDK.ContentFeedsDataDictionary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId">The id for the Product to fetch the list of data items for.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;DataItem&gt;</returns>
        public async System.Threading.Tasks.Task<List<DataItem>>NavigatorDataItemsProductIdGetAsync(string productId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await NavigatorDataItemsProductIdGetWithHttpInfoAsync(productId, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get the list of data items associated with a product for Navigator. 
        /// </summary>
        /// <exception cref="FactSet.SDK.ContentFeedsDataDictionary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId">The id for the Product to fetch the list of data items for.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;DataItem&gt;)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<List<DataItem>>> NavigatorDataItemsProductIdGetWithHttpInfoAsync(string productId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'productId' is set
            if (productId == null)
            {
                throw new FactSet.SDK.ContentFeedsDataDictionary.Client.ApiException(400, "Missing required parameter 'productId' when calling NavigatorApi->NavigatorDataItemsProductIdGet");
            }


            FactSet.SDK.ContentFeedsDataDictionary.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.ContentFeedsDataDictionary.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.ContentFeedsDataDictionary.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.ContentFeedsDataDictionary.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("Product_id", FactSet.SDK.ContentFeedsDataDictionary.Client.ClientUtils.ParameterToString(productId)); // path parameter

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.ContentFeedsDataDictionary.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = NavigatorDataItemsProductIdGetResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<DataItem>>("/navigator/data_items/{Product_id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("NavigatorDataItemsProductIdGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get the list of products for Navigator. 
        /// </summary>
        /// <exception cref="FactSet.SDK.ContentFeedsDataDictionary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List<Product></returns>
        public List<Product> NavigatorProductsGet()
        {
            var localVarResponse = NavigatorProductsGetWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get the list of products for Navigator. 
        /// </summary>
        /// <exception cref="FactSet.SDK.ContentFeedsDataDictionary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;Product&gt;</returns>
        public ApiResponse<List<Product>> NavigatorProductsGetWithHttpInfo()
        {
            FactSet.SDK.ContentFeedsDataDictionary.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.ContentFeedsDataDictionary.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.ContentFeedsDataDictionary.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.ContentFeedsDataDictionary.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.ContentFeedsDataDictionary.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = NavigatorProductsGetResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Get<
            List<Product>>("/navigator/products", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("NavigatorProductsGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// Get the list of products for Navigator. 
        /// </summary>
        /// <exception cref="FactSet.SDK.ContentFeedsDataDictionary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Product&gt;</returns>
        public async System.Threading.Tasks.Task<List<Product>>NavigatorProductsGetAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await NavigatorProductsGetWithHttpInfoAsync(cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get the list of products for Navigator. 
        /// </summary>
        /// <exception cref="FactSet.SDK.ContentFeedsDataDictionary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Product&gt;)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<List<Product>>> NavigatorProductsGetWithHttpInfoAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            FactSet.SDK.ContentFeedsDataDictionary.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.ContentFeedsDataDictionary.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.ContentFeedsDataDictionary.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.ContentFeedsDataDictionary.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.ContentFeedsDataDictionary.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = NavigatorProductsGetResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<Product>>("/navigator/products", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("NavigatorProductsGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get a list of sources where the specified data item can be found, for each delivery method, filtered to the appearances of the given data item within the specified product. 
        /// </summary>
        /// <exception cref="FactSet.SDK.ContentFeedsDataDictionary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataItemId">The id for the DataItem to fetch the sources for.</param>
        /// <param name="productId">The id for the Product to filter down the sources returned on.</param>
        /// <returns>NavigatorSourcesResponse</returns>
        public NavigatorSourcesResponse NavigatorSourcesDataItemIdGet(string dataItemId, string productId)
        {
            var localVarResponse = NavigatorSourcesDataItemIdGetWithHttpInfo(dataItemId, productId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get a list of sources where the specified data item can be found, for each delivery method, filtered to the appearances of the given data item within the specified product. 
        /// </summary>
        /// <exception cref="FactSet.SDK.ContentFeedsDataDictionary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataItemId">The id for the DataItem to fetch the sources for.</param>
        /// <param name="productId">The id for the Product to filter down the sources returned on.</param>
        /// <returns>ApiResponse of NavigatorSourcesResponse</returns>
        public ApiResponse<NavigatorSourcesResponse> NavigatorSourcesDataItemIdGetWithHttpInfo(string dataItemId, string productId)
        {
            // verify the required parameter 'dataItemId' is set
            if (dataItemId == null)
            {
                throw new FactSet.SDK.ContentFeedsDataDictionary.Client.ApiException(400, "Missing required parameter 'dataItemId' when calling NavigatorApi->NavigatorSourcesDataItemIdGet");
            }

            // verify the required parameter 'productId' is set
            if (productId == null)
            {
                throw new FactSet.SDK.ContentFeedsDataDictionary.Client.ApiException(400, "Missing required parameter 'productId' when calling NavigatorApi->NavigatorSourcesDataItemIdGet");
            }

            FactSet.SDK.ContentFeedsDataDictionary.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.ContentFeedsDataDictionary.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.ContentFeedsDataDictionary.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.ContentFeedsDataDictionary.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("DataItem_id", FactSet.SDK.ContentFeedsDataDictionary.Client.ClientUtils.ParameterToString(dataItemId)); // path parameter
            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.ContentFeedsDataDictionary.Client.ClientUtils.ParameterToMultiMap("", "Product_id", productId));

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.ContentFeedsDataDictionary.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = NavigatorSourcesDataItemIdGetResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Get<
            NavigatorSourcesResponse>("/navigator/sources/{DataItem_id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("NavigatorSourcesDataItemIdGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// Get a list of sources where the specified data item can be found, for each delivery method, filtered to the appearances of the given data item within the specified product. 
        /// </summary>
        /// <exception cref="FactSet.SDK.ContentFeedsDataDictionary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataItemId">The id for the DataItem to fetch the sources for.</param>
        /// <param name="productId">The id for the Product to filter down the sources returned on.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of NavigatorSourcesResponse</returns>
        public async System.Threading.Tasks.Task<NavigatorSourcesResponse>NavigatorSourcesDataItemIdGetAsync(string dataItemId, string productId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await NavigatorSourcesDataItemIdGetWithHttpInfoAsync(dataItemId, productId, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get a list of sources where the specified data item can be found, for each delivery method, filtered to the appearances of the given data item within the specified product. 
        /// </summary>
        /// <exception cref="FactSet.SDK.ContentFeedsDataDictionary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataItemId">The id for the DataItem to fetch the sources for.</param>
        /// <param name="productId">The id for the Product to filter down the sources returned on.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (NavigatorSourcesResponse)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<NavigatorSourcesResponse>> NavigatorSourcesDataItemIdGetWithHttpInfoAsync(string dataItemId, string productId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'dataItemId' is set
            if (dataItemId == null)
            {
                throw new FactSet.SDK.ContentFeedsDataDictionary.Client.ApiException(400, "Missing required parameter 'dataItemId' when calling NavigatorApi->NavigatorSourcesDataItemIdGet");
            }

            // verify the required parameter 'productId' is set
            if (productId == null)
            {
                throw new FactSet.SDK.ContentFeedsDataDictionary.Client.ApiException(400, "Missing required parameter 'productId' when calling NavigatorApi->NavigatorSourcesDataItemIdGet");
            }


            FactSet.SDK.ContentFeedsDataDictionary.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.ContentFeedsDataDictionary.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.ContentFeedsDataDictionary.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.ContentFeedsDataDictionary.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("DataItem_id", FactSet.SDK.ContentFeedsDataDictionary.Client.ClientUtils.ParameterToString(dataItemId)); // path parameter
            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.ContentFeedsDataDictionary.Client.ClientUtils.ParameterToMultiMap("", "Product_id", productId));

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.ContentFeedsDataDictionary.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = NavigatorSourcesDataItemIdGetResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<NavigatorSourcesResponse>("/navigator/sources/{DataItem_id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("NavigatorSourcesDataItemIdGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get a list of sources by delivery method for the given product_id 
        /// </summary>
        /// <exception cref="FactSet.SDK.ContentFeedsDataDictionary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId">The id for the Product to filter down the sources returned on.</param>
        /// <returns>NavigatorSourcesResponse</returns>
        public NavigatorSourcesResponse NavigatorSourcesGet(string productId)
        {
            var localVarResponse = NavigatorSourcesGetWithHttpInfo(productId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get a list of sources by delivery method for the given product_id 
        /// </summary>
        /// <exception cref="FactSet.SDK.ContentFeedsDataDictionary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId">The id for the Product to filter down the sources returned on.</param>
        /// <returns>ApiResponse of NavigatorSourcesResponse</returns>
        public ApiResponse<NavigatorSourcesResponse> NavigatorSourcesGetWithHttpInfo(string productId)
        {
            // verify the required parameter 'productId' is set
            if (productId == null)
            {
                throw new FactSet.SDK.ContentFeedsDataDictionary.Client.ApiException(400, "Missing required parameter 'productId' when calling NavigatorApi->NavigatorSourcesGet");
            }

            FactSet.SDK.ContentFeedsDataDictionary.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.ContentFeedsDataDictionary.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.ContentFeedsDataDictionary.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.ContentFeedsDataDictionary.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.ContentFeedsDataDictionary.Client.ClientUtils.ParameterToMultiMap("", "Product_id", productId));

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.ContentFeedsDataDictionary.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = NavigatorSourcesGetResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Get<
            NavigatorSourcesResponse>("/navigator/sources", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("NavigatorSourcesGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// Get a list of sources by delivery method for the given product_id 
        /// </summary>
        /// <exception cref="FactSet.SDK.ContentFeedsDataDictionary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId">The id for the Product to filter down the sources returned on.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of NavigatorSourcesResponse</returns>
        public async System.Threading.Tasks.Task<NavigatorSourcesResponse>NavigatorSourcesGetAsync(string productId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await NavigatorSourcesGetWithHttpInfoAsync(productId, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get a list of sources by delivery method for the given product_id 
        /// </summary>
        /// <exception cref="FactSet.SDK.ContentFeedsDataDictionary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId">The id for the Product to filter down the sources returned on.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (NavigatorSourcesResponse)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<NavigatorSourcesResponse>> NavigatorSourcesGetWithHttpInfoAsync(string productId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'productId' is set
            if (productId == null)
            {
                throw new FactSet.SDK.ContentFeedsDataDictionary.Client.ApiException(400, "Missing required parameter 'productId' when calling NavigatorApi->NavigatorSourcesGet");
            }


            FactSet.SDK.ContentFeedsDataDictionary.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.ContentFeedsDataDictionary.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.ContentFeedsDataDictionary.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.ContentFeedsDataDictionary.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.ContentFeedsDataDictionary.Client.ClientUtils.ParameterToMultiMap("", "Product_id", productId));

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.ContentFeedsDataDictionary.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = NavigatorSourcesGetResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<NavigatorSourcesResponse>("/navigator/sources", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("NavigatorSourcesGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get the list of fields associated with a table for Navigator, and the code information for the specified data item, if applicable. 
        /// </summary>
        /// <exception cref="FactSet.SDK.ContentFeedsDataDictionary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableId">The id for the Table to fetch the fields for.</param>
        /// <param name="dataItemId">The id for the DataItem. This is required in case the data item is represented as a code in Standard DataFeeds. (optional)</param>
        /// <returns>TableCodeFieldInfoResponse</returns>
        public TableCodeFieldInfoResponse NavigatorTableFieldsTableIdGet(string tableId, string dataItemId = default(string))
        {
            var localVarResponse = NavigatorTableFieldsTableIdGetWithHttpInfo(tableId, dataItemId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get the list of fields associated with a table for Navigator, and the code information for the specified data item, if applicable. 
        /// </summary>
        /// <exception cref="FactSet.SDK.ContentFeedsDataDictionary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableId">The id for the Table to fetch the fields for.</param>
        /// <param name="dataItemId">The id for the DataItem. This is required in case the data item is represented as a code in Standard DataFeeds. (optional)</param>
        /// <returns>ApiResponse of TableCodeFieldInfoResponse</returns>
        public ApiResponse<TableCodeFieldInfoResponse> NavigatorTableFieldsTableIdGetWithHttpInfo(string tableId, string dataItemId = default(string))
        {
            // verify the required parameter 'tableId' is set
            if (tableId == null)
            {
                throw new FactSet.SDK.ContentFeedsDataDictionary.Client.ApiException(400, "Missing required parameter 'tableId' when calling NavigatorApi->NavigatorTableFieldsTableIdGet");
            }

            FactSet.SDK.ContentFeedsDataDictionary.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.ContentFeedsDataDictionary.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.ContentFeedsDataDictionary.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.ContentFeedsDataDictionary.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("Table_id", FactSet.SDK.ContentFeedsDataDictionary.Client.ClientUtils.ParameterToString(tableId)); // path parameter
            if (dataItemId != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.ContentFeedsDataDictionary.Client.ClientUtils.ParameterToMultiMap("", "DataItem_id", dataItemId));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.ContentFeedsDataDictionary.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = NavigatorTableFieldsTableIdGetResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Get<
            TableCodeFieldInfoResponse>("/navigator/table_fields/{Table_id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("NavigatorTableFieldsTableIdGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// Get the list of fields associated with a table for Navigator, and the code information for the specified data item, if applicable. 
        /// </summary>
        /// <exception cref="FactSet.SDK.ContentFeedsDataDictionary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableId">The id for the Table to fetch the fields for.</param>
        /// <param name="dataItemId">The id for the DataItem. This is required in case the data item is represented as a code in Standard DataFeeds. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TableCodeFieldInfoResponse</returns>
        public async System.Threading.Tasks.Task<TableCodeFieldInfoResponse>NavigatorTableFieldsTableIdGetAsync(string tableId, string dataItemId = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await NavigatorTableFieldsTableIdGetWithHttpInfoAsync(tableId, dataItemId, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get the list of fields associated with a table for Navigator, and the code information for the specified data item, if applicable. 
        /// </summary>
        /// <exception cref="FactSet.SDK.ContentFeedsDataDictionary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableId">The id for the Table to fetch the fields for.</param>
        /// <param name="dataItemId">The id for the DataItem. This is required in case the data item is represented as a code in Standard DataFeeds. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TableCodeFieldInfoResponse)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<TableCodeFieldInfoResponse>> NavigatorTableFieldsTableIdGetWithHttpInfoAsync(string tableId, string dataItemId = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'tableId' is set
            if (tableId == null)
            {
                throw new FactSet.SDK.ContentFeedsDataDictionary.Client.ApiException(400, "Missing required parameter 'tableId' when calling NavigatorApi->NavigatorTableFieldsTableIdGet");
            }


            FactSet.SDK.ContentFeedsDataDictionary.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.ContentFeedsDataDictionary.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.ContentFeedsDataDictionary.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.ContentFeedsDataDictionary.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("Table_id", FactSet.SDK.ContentFeedsDataDictionary.Client.ClientUtils.ParameterToString(tableId)); // path parameter
            if (dataItemId != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.ContentFeedsDataDictionary.Client.ClientUtils.ParameterToMultiMap("", "DataItem_id", dataItemId));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.ContentFeedsDataDictionary.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = NavigatorTableFieldsTableIdGetResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<TableCodeFieldInfoResponse>("/navigator/table_fields/{Table_id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("NavigatorTableFieldsTableIdGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
