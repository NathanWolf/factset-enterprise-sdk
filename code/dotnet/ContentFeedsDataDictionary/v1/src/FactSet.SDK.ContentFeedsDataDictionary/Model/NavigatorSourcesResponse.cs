/*
 * CTS Data Dictionary API
 *
 * An API for interacting with CTS Data Dictionary.
 *
 * The version of the OpenAPI document: 0.2
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = FactSet.SDK.ContentFeedsDataDictionary.Client.OpenAPIDateConverter;

namespace FactSet.SDK.ContentFeedsDataDictionary.Model
{
    /// <summary>
    /// NavigatorSourcesResponse
    /// </summary>
    [DataContract(Name = "NavigatorSourcesResponse")]
    public partial class NavigatorSourcesResponse : IEquatable<NavigatorSourcesResponse>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="NavigatorSourcesResponse" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected NavigatorSourcesResponse() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="NavigatorSourcesResponse" /> class.
        /// </summary>
        /// <param name="sdf">sdf (required).</param>
        /// <param name="contentApi">contentApi.</param>
        /// <param name="reference">reference.</param>
        public NavigatorSourcesResponse(List<Table> sdf,List<ApiEndpoint> contentApi = default(List<ApiEndpoint>), List<ReferenceGroup> reference = default(List<ReferenceGroup>))
        {
            // to ensure "sdf" is required (not null)
            if (sdf == null) {
                throw new ArgumentNullException("sdf is a required property for NavigatorSourcesResponse and cannot be null");
            }
            this.Sdf = sdf;
            this.ContentApi = contentApi;
            this.Reference = reference;
        }

        /// <summary>
        /// Gets or Sets Sdf
        /// </summary>
        [DataMember(Name = "sdf", IsRequired = true, EmitDefaultValue = false)]
        public List<Table> Sdf { get; set; }

        /// <summary>
        /// Gets or Sets ContentApi
        /// </summary>
        [DataMember(Name = "contentApi", EmitDefaultValue = false)]
        public List<ApiEndpoint> ContentApi { get; set; }

        /// <summary>
        /// Gets or Sets Reference
        /// </summary>
        [DataMember(Name = "reference", EmitDefaultValue = false)]
        public List<ReferenceGroup> Reference { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class NavigatorSourcesResponse {\n");
            sb.Append("  Sdf: ").Append(Sdf).Append("\n");
            sb.Append("  ContentApi: ").Append(ContentApi).Append("\n");
            sb.Append("  Reference: ").Append(Reference).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as NavigatorSourcesResponse);
        }

        /// <summary>
        /// Returns true if NavigatorSourcesResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of NavigatorSourcesResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(NavigatorSourcesResponse input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Sdf == input.Sdf ||
                    this.Sdf != null &&
                    input.Sdf != null &&
                    this.Sdf.SequenceEqual(input.Sdf)
                ) && 
                (
                    this.ContentApi == input.ContentApi ||
                    this.ContentApi != null &&
                    input.ContentApi != null &&
                    this.ContentApi.SequenceEqual(input.ContentApi)
                ) && 
                (
                    this.Reference == input.Reference ||
                    this.Reference != null &&
                    input.Reference != null &&
                    this.Reference.SequenceEqual(input.Reference)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Sdf != null)
                {
                    hashCode = (hashCode * 59) + this.Sdf.GetHashCode();
                }
                if (this.ContentApi != null)
                {
                    hashCode = (hashCode * 59) + this.ContentApi.GetHashCode();
                }
                if (this.Reference != null)
                {
                    hashCode = (hashCode * 59) + this.Reference.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
