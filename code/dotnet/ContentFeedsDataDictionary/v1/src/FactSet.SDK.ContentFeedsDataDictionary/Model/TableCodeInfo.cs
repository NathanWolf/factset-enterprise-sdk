/*
 * CTS Data Dictionary API
 *
 * An API for interacting with CTS Data Dictionary.
 *
 * The version of the OpenAPI document: 0.2
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = FactSet.SDK.ContentFeedsDataDictionary.Client.OpenAPIDateConverter;

namespace FactSet.SDK.ContentFeedsDataDictionary.Model
{
    /// <summary>
    /// TableCodeInfo
    /// </summary>
    [DataContract(Name = "TableCodeInfo")]
    public partial class TableCodeInfo : IEquatable<TableCodeInfo>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TableCodeInfo" /> class.
        /// </summary>
        /// <param name="dataItemIsCode">Flag indicating if the field is represented as a code in Standard DataFeeds.</param>
        /// <param name="codeFieldId">Unique identifier for the code.</param>
        /// <param name="codeString">String value for the code as it appears in Standard DataFeeds.</param>
        public TableCodeInfo(bool dataItemIsCode = default(bool), string codeFieldId = default(string), string codeString = default(string))
        {
            this.DataItemIsCode = dataItemIsCode;
            this.CodeFieldId = codeFieldId;
            this.CodeString = codeString;
        }

        /// <summary>
        /// Flag indicating if the field is represented as a code in Standard DataFeeds
        /// </summary>
        /// <value>Flag indicating if the field is represented as a code in Standard DataFeeds</value>
        [DataMember(Name = "dataItemIsCode", EmitDefaultValue = true)]
        public bool DataItemIsCode { get; set; }

        /// <summary>
        /// Unique identifier for the code
        /// </summary>
        /// <value>Unique identifier for the code</value>
        [DataMember(Name = "codeFieldId", EmitDefaultValue = false)]
        public string CodeFieldId { get; set; }

        /// <summary>
        /// String value for the code as it appears in Standard DataFeeds
        /// </summary>
        /// <value>String value for the code as it appears in Standard DataFeeds</value>
        [DataMember(Name = "codeString", EmitDefaultValue = false)]
        public string CodeString { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class TableCodeInfo {\n");
            sb.Append("  DataItemIsCode: ").Append(DataItemIsCode).Append("\n");
            sb.Append("  CodeFieldId: ").Append(CodeFieldId).Append("\n");
            sb.Append("  CodeString: ").Append(CodeString).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TableCodeInfo);
        }

        /// <summary>
        /// Returns true if TableCodeInfo instances are equal
        /// </summary>
        /// <param name="input">Instance of TableCodeInfo to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TableCodeInfo input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.DataItemIsCode == input.DataItemIsCode ||
                    this.DataItemIsCode.Equals(input.DataItemIsCode)
                ) && 
                (
                    this.CodeFieldId == input.CodeFieldId ||
                    (this.CodeFieldId != null &&
                    this.CodeFieldId.Equals(input.CodeFieldId))
                ) && 
                (
                    this.CodeString == input.CodeString ||
                    (this.CodeString != null &&
                    this.CodeString.Equals(input.CodeString))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.DataItemIsCode.GetHashCode();
                if (this.CodeFieldId != null)
                {
                    hashCode = (hashCode * 59) + this.CodeFieldId.GetHashCode();
                }
                if (this.CodeString != null)
                {
                    hashCode = (hashCode * 59) + this.CodeString.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
