/*
 * CTS Data Dictionary API
 *
 * An API for interacting with CTS Data Dictionary.
 *
 * The version of the OpenAPI document: 0.2
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = FactSet.SDK.ContentFeedsDataDictionary.Client.OpenAPIDateConverter;

namespace FactSet.SDK.ContentFeedsDataDictionary.Model
{
    /// <summary>
    /// TableCodeFieldInfoResponse
    /// </summary>
    [DataContract(Name = "TableCodeFieldInfoResponse")]
    public partial class TableCodeFieldInfoResponse : IEquatable<TableCodeFieldInfoResponse>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TableCodeFieldInfoResponse" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected TableCodeFieldInfoResponse() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="TableCodeFieldInfoResponse" /> class.
        /// </summary>
        /// <param name="codeInfo">codeInfo (required).</param>
        /// <param name="fields">fields (required).</param>
        /// <param name="entitled">entitled.</param>
        public TableCodeFieldInfoResponse(TableCodeInfo codeInfo, List<TableField> fields,bool entitled = default(bool))
        {
            // to ensure "codeInfo" is required (not null)
            if (codeInfo == null) {
                throw new ArgumentNullException("codeInfo is a required property for TableCodeFieldInfoResponse and cannot be null");
            }
            this.CodeInfo = codeInfo;
            // to ensure "fields" is required (not null)
            if (fields == null) {
                throw new ArgumentNullException("fields is a required property for TableCodeFieldInfoResponse and cannot be null");
            }
            this.Fields = fields;
            this.Entitled = entitled;
        }

        /// <summary>
        /// Gets or Sets CodeInfo
        /// </summary>
        [DataMember(Name = "codeInfo", IsRequired = true, EmitDefaultValue = false)]
        public TableCodeInfo CodeInfo { get; set; }

        /// <summary>
        /// Gets or Sets Fields
        /// </summary>
        [DataMember(Name = "fields", IsRequired = true, EmitDefaultValue = false)]
        public List<TableField> Fields { get; set; }

        /// <summary>
        /// Gets or Sets Entitled
        /// </summary>
        [DataMember(Name = "entitled", EmitDefaultValue = true)]
        public bool Entitled { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class TableCodeFieldInfoResponse {\n");
            sb.Append("  CodeInfo: ").Append(CodeInfo).Append("\n");
            sb.Append("  Fields: ").Append(Fields).Append("\n");
            sb.Append("  Entitled: ").Append(Entitled).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TableCodeFieldInfoResponse);
        }

        /// <summary>
        /// Returns true if TableCodeFieldInfoResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of TableCodeFieldInfoResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TableCodeFieldInfoResponse input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.CodeInfo == input.CodeInfo ||
                    (this.CodeInfo != null &&
                    this.CodeInfo.Equals(input.CodeInfo))
                ) && 
                (
                    this.Fields == input.Fields ||
                    this.Fields != null &&
                    input.Fields != null &&
                    this.Fields.SequenceEqual(input.Fields)
                ) && 
                (
                    this.Entitled == input.Entitled ||
                    this.Entitled.Equals(input.Entitled)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.CodeInfo != null)
                {
                    hashCode = (hashCode * 59) + this.CodeInfo.GetHashCode();
                }
                if (this.Fields != null)
                {
                    hashCode = (hashCode * 59) + this.Fields.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Entitled.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
