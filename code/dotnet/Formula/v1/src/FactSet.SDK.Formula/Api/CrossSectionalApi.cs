/*
 * FactSet Formula API
 *
 *  **FactSet Formula API**  FactSet’s Formula API is a modern, flexible, formula-based API that enables users to access FactSet’s wide range of financial data and content. The API offers two endpoints, one optimized for time-series analysis and one designed for cross-sectional analysis, providing users a simplified interface into FactSet’s expansive offering. By providing two endpoints, it allows for the optimization of user workflows, while reducing complexity.  Leverage the power and flexibility of the Formula API to -   * Pull data from across most content sets that a user has access to in a single request   * Include business logic and mathematical operations in request   * Submit a dynamic universe in both endpoints   * Return the fsymId to easily combine with other FactSet content / products   * Set the trading calendar   * Define custom display names  **Formula API Request Builder**  The Formula API Request Builder provides users everything they need to form a Formula API request. In the Request Builder, you can select identifiers, build a universe expression, select FQL or Screening formulas, easily apply business logic and mathematical functions to the FQL or Screening formulas, specify optional parameters, and construct a GET or POST request. The Request Builder eliminates the need to have previous FQL and Screening knowledge and allows you to quickly find your desired data items and form the request.  The Formula API Request Builder can be accessed by navigating to [https://developer.factset.com/formula-api-request-builder](https://developer.factset.com/formula-api-request-builder) and logging in using your FactSet.net ID. When using the Request Builder to construct requests for the one of the Formula API's endpoints, be sure to toggle to the correct endpoint at the top of the page.  **How to Check the Health and Availability of the Formula API**  Please use the below endpoint to check the health and availability of the Formula API. You must be authorized for this API to use the Health endpoint.  [https://api.factset.com/formula-api/health](https://api.factset.com/formula-api/health)  **How to Programmatically Download API Specification File**  Please use the below endpoint to download the FactSet Formula API Specification File in .yaml. You must be authorized for this API to extract. This specification can then be used for Codegen to create your own SDKs. You can also download the spec using the \"Download Spec\" button to the right of the version number.  [https://api.factset.com/formula-api/v1/spec](https://api.factset.com/formula-api/v1/spec) 
 *
 * The version of the OpenAPI document: 1.2.2
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using FactSet.SDK.Formula.Client;
using FactSet.SDK.Formula.Model;
using FactSet.SDK.Utils.Authentication;

namespace FactSet.SDK.Formula.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ICrossSectionalApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Retrieve data items (Screening formulas) for a list of identifiers or defined universe.
        /// </summary>
        /// <remarks>
        /// The &#x60;/cross-sectional&#x60; endpoint is closely aligned with FactSet’s powerful data retrieval **Screening language** which is optimized for analysis of data items at single point in time for different entities and is extremely efficient for large universes.  The &#x60;/cross-sectional&#x60; endpoint supports Long Running asynchronous requests up to **10 minutes** via the &#x60;batch&#x60; parameter. *This feature is available to Individual Users subscribed to the Performance Package and Performance Package Plus Performance Tiers and all Production Users. If you are unsure which Performance Tier you are subscribed to or you would like to gain access to the batch capabilities, please contact your FactSet Account Team or \&quot;Report Issue\&quot; above and our support teams can assist.* 
        /// </remarks>
        /// <exception cref="FactSet.SDK.Formula.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="formulas">List of Screening formulas</param>
        /// <param name="ids">List of entity identifiers.  The &#x60;ids&#x60; and &#x60;universe&#x60; parameters provide two different ways to specify the identifiers for which you want data retrieved. Please enter either the &#x60;ids&#x60; or &#x60;universe&#x60; parameter.  (optional)</param>
        /// <param name="universe">Screening expression to limit the universe  Please enter either the &#x60;ids&#x60; or &#x60;universe&#x60; parameter.  (optional)</param>
        /// <param name="universeType">Specify the universe type to calculate the &#x60;universe&#x60; in.  Find documentation below on how to build a screen for each universe type - * Equity Screen - [Online Assistant Page 20606](https://my.apps.factset.com/oa/pages/20606)  * Debt Screen - [Online Assistant Page 20888](https://my.apps.factset.com/oa/pages/20888)  * Fund Screen - [Online Assistant Page 21384](https://my.apps.factset.com/oa/pages/21384)  (optional, default to EQUITY)</param>
        /// <param name="backTestDate">Specify the backtest date either in **YYYY-MM-DD**, **YYYYMMDD** or **MM/DD/YYYY** format.  To learn more about backtesting, please visit [Online Assistant Page 20610](https://my.apps.factset.com/oa/pages/20610#backtest). User must have access to backtesting functionality.  (optional)</param>
        /// <param name="calendar">Calendar of data returned. The default value is FIVEDAY which displays Monday through Friday, regardless of whether there were trading holidays. (optional)</param>
        /// <param name="fsymId">Specify **Y** for &#x60;fsymId&#x60; to return an additional response object containing the data item **fsymId** which will contain the fsymIds of the requestIds. This is in addition to the response object containing the data item **requestId**. The default value for &#x60;fsymId&#x60; is **N**.  The **fsymId** field returned is the FactSet Default Permanent Identifier for the &#x60;requestId&#x60;. For all supported &#x60;requestId&#x60; symbol types, the &#x60;fsymId&#x60; parameter will return the Regional Level PermId &#39;-R&#39; which identifies the security’s best regional security data series per currency. Currently, the fsymId parameter only supports equities. Accepted &#x60;requestId&#x60; symbol types include all FactSet Permanent Identifiers types, CUSIP, SEDOL, ISIN, and Tickers. Further documentation can be found at this [Online Assistant attachment](https://oa.apps.factset.com/cms/oaAttachment/64c3213a-f415-4c27-a336-92c73a72deed/24881).  (optional, default to N)</param>
        /// <param name="displayName">Define display names for the formulas inputted. Enter the list of display names in the same order as the formulas inputted. An additional field **displayName** will be returned in the data object for a formula.  If the number of display names does not match the number of formulas provided, an error will be returned.  To define the display name for a subset of the formulas, leave a blank in the position of the formula that won&#39;t be renamed. For example - If three formulas are inputted, to define display names only for the first and third formula, enter *displayName&#x3D;FORMULA_1,,FORMULA_3*. The **displayName** field will still be included in that formula, but will contain the formula as inputted.  (optional)</param>
        /// <param name="flatten">Specify **Y** for &#x60;flatten&#x60; to return a flat, table-like JSON response model instead of the standard nested JSON response model. This option is provided for easier data processing and visualization. The default value for &#x60;flatten&#x60; is **N**.  See the **Cross-Sectional Result Object Flattened** schema for more detail on the response structure for flattened output.  (optional, default to N)</param>
        /// <param name="batch">Enables the ability to asynchronously \&quot;batch\&quot; the request, supporting a long-running request up to **10 minutes**. Upon requesting batch&#x3D;Y, the service will respond back with an HTTP Status Code of 202.  A user is limited to running 5 Batch Requests in a 10 minute period.  *This feature is available to Individual Users subscribed to the Performance Package and Performance Package Plus Performance Tiers and all Production Users. If you are unsure which Performance Tier you are subscribed to or you would like to gain access to the batch capabilities, please contact your FactSet Account Team or \&quot;Report Issue\&quot; above and our support teams can assist.*  Once a batch request is submitted, use &#x60;/batch-status&#x60; to see if the job has completed. Once completed, retrieve the results of the request via &#x60;/batch-result&#x60;. See the endpoints listed under *Batch Processing* for more information.  (optional, default to N)</param>
        /// <returns>CrossSectionalApi.GetCrossSectionalDataResponseWrapper</returns>
        CrossSectionalApi.GetCrossSectionalDataResponseWrapper GetCrossSectionalData(List<string> formulas, List<string> ids = default(List<string>), string universe = default(string), string universeType = default(string), string backTestDate = default(string), string calendar = default(string), string fsymId = default(string), List<string> displayName = default(List<string>), string flatten = default(string), string batch = default(string));

        /// <summary>
        /// Retrieve data items (Screening formulas) for a list of identifiers or defined universe.
        /// </summary>
        /// <remarks>
        /// The &#x60;/cross-sectional&#x60; endpoint is closely aligned with FactSet’s powerful data retrieval **Screening language** which is optimized for analysis of data items at single point in time for different entities and is extremely efficient for large universes.  The &#x60;/cross-sectional&#x60; endpoint supports Long Running asynchronous requests up to **10 minutes** via the &#x60;batch&#x60; parameter. *This feature is available to Individual Users subscribed to the Performance Package and Performance Package Plus Performance Tiers and all Production Users. If you are unsure which Performance Tier you are subscribed to or you would like to gain access to the batch capabilities, please contact your FactSet Account Team or \&quot;Report Issue\&quot; above and our support teams can assist.* 
        /// </remarks>
        /// <exception cref="FactSet.SDK.Formula.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="formulas">List of Screening formulas</param>
        /// <param name="ids">List of entity identifiers.  The &#x60;ids&#x60; and &#x60;universe&#x60; parameters provide two different ways to specify the identifiers for which you want data retrieved. Please enter either the &#x60;ids&#x60; or &#x60;universe&#x60; parameter.  (optional)</param>
        /// <param name="universe">Screening expression to limit the universe  Please enter either the &#x60;ids&#x60; or &#x60;universe&#x60; parameter.  (optional)</param>
        /// <param name="universeType">Specify the universe type to calculate the &#x60;universe&#x60; in.  Find documentation below on how to build a screen for each universe type - * Equity Screen - [Online Assistant Page 20606](https://my.apps.factset.com/oa/pages/20606)  * Debt Screen - [Online Assistant Page 20888](https://my.apps.factset.com/oa/pages/20888)  * Fund Screen - [Online Assistant Page 21384](https://my.apps.factset.com/oa/pages/21384)  (optional, default to EQUITY)</param>
        /// <param name="backTestDate">Specify the backtest date either in **YYYY-MM-DD**, **YYYYMMDD** or **MM/DD/YYYY** format.  To learn more about backtesting, please visit [Online Assistant Page 20610](https://my.apps.factset.com/oa/pages/20610#backtest). User must have access to backtesting functionality.  (optional)</param>
        /// <param name="calendar">Calendar of data returned. The default value is FIVEDAY which displays Monday through Friday, regardless of whether there were trading holidays. (optional)</param>
        /// <param name="fsymId">Specify **Y** for &#x60;fsymId&#x60; to return an additional response object containing the data item **fsymId** which will contain the fsymIds of the requestIds. This is in addition to the response object containing the data item **requestId**. The default value for &#x60;fsymId&#x60; is **N**.  The **fsymId** field returned is the FactSet Default Permanent Identifier for the &#x60;requestId&#x60;. For all supported &#x60;requestId&#x60; symbol types, the &#x60;fsymId&#x60; parameter will return the Regional Level PermId &#39;-R&#39; which identifies the security’s best regional security data series per currency. Currently, the fsymId parameter only supports equities. Accepted &#x60;requestId&#x60; symbol types include all FactSet Permanent Identifiers types, CUSIP, SEDOL, ISIN, and Tickers. Further documentation can be found at this [Online Assistant attachment](https://oa.apps.factset.com/cms/oaAttachment/64c3213a-f415-4c27-a336-92c73a72deed/24881).  (optional, default to N)</param>
        /// <param name="displayName">Define display names for the formulas inputted. Enter the list of display names in the same order as the formulas inputted. An additional field **displayName** will be returned in the data object for a formula.  If the number of display names does not match the number of formulas provided, an error will be returned.  To define the display name for a subset of the formulas, leave a blank in the position of the formula that won&#39;t be renamed. For example - If three formulas are inputted, to define display names only for the first and third formula, enter *displayName&#x3D;FORMULA_1,,FORMULA_3*. The **displayName** field will still be included in that formula, but will contain the formula as inputted.  (optional)</param>
        /// <param name="flatten">Specify **Y** for &#x60;flatten&#x60; to return a flat, table-like JSON response model instead of the standard nested JSON response model. This option is provided for easier data processing and visualization. The default value for &#x60;flatten&#x60; is **N**.  See the **Cross-Sectional Result Object Flattened** schema for more detail on the response structure for flattened output.  (optional, default to N)</param>
        /// <param name="batch">Enables the ability to asynchronously \&quot;batch\&quot; the request, supporting a long-running request up to **10 minutes**. Upon requesting batch&#x3D;Y, the service will respond back with an HTTP Status Code of 202.  A user is limited to running 5 Batch Requests in a 10 minute period.  *This feature is available to Individual Users subscribed to the Performance Package and Performance Package Plus Performance Tiers and all Production Users. If you are unsure which Performance Tier you are subscribed to or you would like to gain access to the batch capabilities, please contact your FactSet Account Team or \&quot;Report Issue\&quot; above and our support teams can assist.*  Once a batch request is submitted, use &#x60;/batch-status&#x60; to see if the job has completed. Once completed, retrieve the results of the request via &#x60;/batch-result&#x60;. See the endpoints listed under *Batch Processing* for more information.  (optional, default to N)</param>
        /// <returns>ApiResponse of CrossSectionalApi.GetCrossSectionalDataResponseWrapper</returns>
        ApiResponse<CrossSectionalApi.GetCrossSectionalDataResponseWrapper> GetCrossSectionalDataWithHttpInfo(List<string> formulas, List<string> ids = default(List<string>), string universe = default(string), string universeType = default(string), string backTestDate = default(string), string calendar = default(string), string fsymId = default(string), List<string> displayName = default(List<string>), string flatten = default(string), string batch = default(string));
        /// <summary>
        /// Retrieve data items (Screening formulas) for a list of identifiers or defined universe.
        /// </summary>
        /// <remarks>
        /// The &#x60;/cross-sectional&#x60; endpoint is closely aligned with FactSet’s powerful data retrieval **Screening language** which is optimized for analysis of data items at single point in time for different entities and is extremely efficient for large universes.  The &#x60;/cross-sectional&#x60; endpoint supports Long Running asynchronous requests up to **10 minutes** via the &#x60;batch&#x60; parameter. *This feature is available to Individual Users subscribed to the Performance Package and Performance Package Plus Performance Tiers and all Production Users. If you are unsure which Performance Tier you are subscribed to or you would like to gain access to the batch capabilities, please contact your FactSet Account Team or \&quot;Report Issue\&quot; above and our support teams can assist.* 
        /// </remarks>
        /// <exception cref="FactSet.SDK.Formula.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="crossSectionalRequest"></param>
        /// <returns>CrossSectionalApi.GetCrossSectionalDataForListResponseWrapper</returns>
        CrossSectionalApi.GetCrossSectionalDataForListResponseWrapper GetCrossSectionalDataForList(CrossSectionalRequest crossSectionalRequest);

        /// <summary>
        /// Retrieve data items (Screening formulas) for a list of identifiers or defined universe.
        /// </summary>
        /// <remarks>
        /// The &#x60;/cross-sectional&#x60; endpoint is closely aligned with FactSet’s powerful data retrieval **Screening language** which is optimized for analysis of data items at single point in time for different entities and is extremely efficient for large universes.  The &#x60;/cross-sectional&#x60; endpoint supports Long Running asynchronous requests up to **10 minutes** via the &#x60;batch&#x60; parameter. *This feature is available to Individual Users subscribed to the Performance Package and Performance Package Plus Performance Tiers and all Production Users. If you are unsure which Performance Tier you are subscribed to or you would like to gain access to the batch capabilities, please contact your FactSet Account Team or \&quot;Report Issue\&quot; above and our support teams can assist.* 
        /// </remarks>
        /// <exception cref="FactSet.SDK.Formula.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="crossSectionalRequest"></param>
        /// <returns>ApiResponse of CrossSectionalApi.GetCrossSectionalDataForListResponseWrapper</returns>
        ApiResponse<CrossSectionalApi.GetCrossSectionalDataForListResponseWrapper> GetCrossSectionalDataForListWithHttpInfo(CrossSectionalRequest crossSectionalRequest);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ICrossSectionalApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Retrieve data items (Screening formulas) for a list of identifiers or defined universe.
        /// </summary>
        /// <remarks>
        /// The &#x60;/cross-sectional&#x60; endpoint is closely aligned with FactSet’s powerful data retrieval **Screening language** which is optimized for analysis of data items at single point in time for different entities and is extremely efficient for large universes.  The &#x60;/cross-sectional&#x60; endpoint supports Long Running asynchronous requests up to **10 minutes** via the &#x60;batch&#x60; parameter. *This feature is available to Individual Users subscribed to the Performance Package and Performance Package Plus Performance Tiers and all Production Users. If you are unsure which Performance Tier you are subscribed to or you would like to gain access to the batch capabilities, please contact your FactSet Account Team or \&quot;Report Issue\&quot; above and our support teams can assist.* 
        /// </remarks>
        /// <exception cref="FactSet.SDK.Formula.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="formulas">List of Screening formulas</param>
        /// <param name="ids">List of entity identifiers.  The &#x60;ids&#x60; and &#x60;universe&#x60; parameters provide two different ways to specify the identifiers for which you want data retrieved. Please enter either the &#x60;ids&#x60; or &#x60;universe&#x60; parameter.  (optional)</param>
        /// <param name="universe">Screening expression to limit the universe  Please enter either the &#x60;ids&#x60; or &#x60;universe&#x60; parameter.  (optional)</param>
        /// <param name="universeType">Specify the universe type to calculate the &#x60;universe&#x60; in.  Find documentation below on how to build a screen for each universe type - * Equity Screen - [Online Assistant Page 20606](https://my.apps.factset.com/oa/pages/20606)  * Debt Screen - [Online Assistant Page 20888](https://my.apps.factset.com/oa/pages/20888)  * Fund Screen - [Online Assistant Page 21384](https://my.apps.factset.com/oa/pages/21384)  (optional, default to EQUITY)</param>
        /// <param name="backTestDate">Specify the backtest date either in **YYYY-MM-DD**, **YYYYMMDD** or **MM/DD/YYYY** format.  To learn more about backtesting, please visit [Online Assistant Page 20610](https://my.apps.factset.com/oa/pages/20610#backtest). User must have access to backtesting functionality.  (optional)</param>
        /// <param name="calendar">Calendar of data returned. The default value is FIVEDAY which displays Monday through Friday, regardless of whether there were trading holidays. (optional)</param>
        /// <param name="fsymId">Specify **Y** for &#x60;fsymId&#x60; to return an additional response object containing the data item **fsymId** which will contain the fsymIds of the requestIds. This is in addition to the response object containing the data item **requestId**. The default value for &#x60;fsymId&#x60; is **N**.  The **fsymId** field returned is the FactSet Default Permanent Identifier for the &#x60;requestId&#x60;. For all supported &#x60;requestId&#x60; symbol types, the &#x60;fsymId&#x60; parameter will return the Regional Level PermId &#39;-R&#39; which identifies the security’s best regional security data series per currency. Currently, the fsymId parameter only supports equities. Accepted &#x60;requestId&#x60; symbol types include all FactSet Permanent Identifiers types, CUSIP, SEDOL, ISIN, and Tickers. Further documentation can be found at this [Online Assistant attachment](https://oa.apps.factset.com/cms/oaAttachment/64c3213a-f415-4c27-a336-92c73a72deed/24881).  (optional, default to N)</param>
        /// <param name="displayName">Define display names for the formulas inputted. Enter the list of display names in the same order as the formulas inputted. An additional field **displayName** will be returned in the data object for a formula.  If the number of display names does not match the number of formulas provided, an error will be returned.  To define the display name for a subset of the formulas, leave a blank in the position of the formula that won&#39;t be renamed. For example - If three formulas are inputted, to define display names only for the first and third formula, enter *displayName&#x3D;FORMULA_1,,FORMULA_3*. The **displayName** field will still be included in that formula, but will contain the formula as inputted.  (optional)</param>
        /// <param name="flatten">Specify **Y** for &#x60;flatten&#x60; to return a flat, table-like JSON response model instead of the standard nested JSON response model. This option is provided for easier data processing and visualization. The default value for &#x60;flatten&#x60; is **N**.  See the **Cross-Sectional Result Object Flattened** schema for more detail on the response structure for flattened output.  (optional, default to N)</param>
        /// <param name="batch">Enables the ability to asynchronously \&quot;batch\&quot; the request, supporting a long-running request up to **10 minutes**. Upon requesting batch&#x3D;Y, the service will respond back with an HTTP Status Code of 202.  A user is limited to running 5 Batch Requests in a 10 minute period.  *This feature is available to Individual Users subscribed to the Performance Package and Performance Package Plus Performance Tiers and all Production Users. If you are unsure which Performance Tier you are subscribed to or you would like to gain access to the batch capabilities, please contact your FactSet Account Team or \&quot;Report Issue\&quot; above and our support teams can assist.*  Once a batch request is submitted, use &#x60;/batch-status&#x60; to see if the job has completed. Once completed, retrieve the results of the request via &#x60;/batch-result&#x60;. See the endpoints listed under *Batch Processing* for more information.  (optional, default to N)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CrossSectionalResponse</returns>
        System.Threading.Tasks.Task<CrossSectionalApi.GetCrossSectionalDataResponseWrapper> GetCrossSectionalDataAsync(List<string> formulas, List<string> ids = default(List<string>), string universe = default(string), string universeType = default(string), string backTestDate = default(string), string calendar = default(string), string fsymId = default(string), List<string> displayName = default(List<string>), string flatten = default(string), string batch = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieve data items (Screening formulas) for a list of identifiers or defined universe.
        /// </summary>
        /// <remarks>
        /// The &#x60;/cross-sectional&#x60; endpoint is closely aligned with FactSet’s powerful data retrieval **Screening language** which is optimized for analysis of data items at single point in time for different entities and is extremely efficient for large universes.  The &#x60;/cross-sectional&#x60; endpoint supports Long Running asynchronous requests up to **10 minutes** via the &#x60;batch&#x60; parameter. *This feature is available to Individual Users subscribed to the Performance Package and Performance Package Plus Performance Tiers and all Production Users. If you are unsure which Performance Tier you are subscribed to or you would like to gain access to the batch capabilities, please contact your FactSet Account Team or \&quot;Report Issue\&quot; above and our support teams can assist.* 
        /// </remarks>
        /// <exception cref="FactSet.SDK.Formula.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="formulas">List of Screening formulas</param>
        /// <param name="ids">List of entity identifiers.  The &#x60;ids&#x60; and &#x60;universe&#x60; parameters provide two different ways to specify the identifiers for which you want data retrieved. Please enter either the &#x60;ids&#x60; or &#x60;universe&#x60; parameter.  (optional)</param>
        /// <param name="universe">Screening expression to limit the universe  Please enter either the &#x60;ids&#x60; or &#x60;universe&#x60; parameter.  (optional)</param>
        /// <param name="universeType">Specify the universe type to calculate the &#x60;universe&#x60; in.  Find documentation below on how to build a screen for each universe type - * Equity Screen - [Online Assistant Page 20606](https://my.apps.factset.com/oa/pages/20606)  * Debt Screen - [Online Assistant Page 20888](https://my.apps.factset.com/oa/pages/20888)  * Fund Screen - [Online Assistant Page 21384](https://my.apps.factset.com/oa/pages/21384)  (optional, default to EQUITY)</param>
        /// <param name="backTestDate">Specify the backtest date either in **YYYY-MM-DD**, **YYYYMMDD** or **MM/DD/YYYY** format.  To learn more about backtesting, please visit [Online Assistant Page 20610](https://my.apps.factset.com/oa/pages/20610#backtest). User must have access to backtesting functionality.  (optional)</param>
        /// <param name="calendar">Calendar of data returned. The default value is FIVEDAY which displays Monday through Friday, regardless of whether there were trading holidays. (optional)</param>
        /// <param name="fsymId">Specify **Y** for &#x60;fsymId&#x60; to return an additional response object containing the data item **fsymId** which will contain the fsymIds of the requestIds. This is in addition to the response object containing the data item **requestId**. The default value for &#x60;fsymId&#x60; is **N**.  The **fsymId** field returned is the FactSet Default Permanent Identifier for the &#x60;requestId&#x60;. For all supported &#x60;requestId&#x60; symbol types, the &#x60;fsymId&#x60; parameter will return the Regional Level PermId &#39;-R&#39; which identifies the security’s best regional security data series per currency. Currently, the fsymId parameter only supports equities. Accepted &#x60;requestId&#x60; symbol types include all FactSet Permanent Identifiers types, CUSIP, SEDOL, ISIN, and Tickers. Further documentation can be found at this [Online Assistant attachment](https://oa.apps.factset.com/cms/oaAttachment/64c3213a-f415-4c27-a336-92c73a72deed/24881).  (optional, default to N)</param>
        /// <param name="displayName">Define display names for the formulas inputted. Enter the list of display names in the same order as the formulas inputted. An additional field **displayName** will be returned in the data object for a formula.  If the number of display names does not match the number of formulas provided, an error will be returned.  To define the display name for a subset of the formulas, leave a blank in the position of the formula that won&#39;t be renamed. For example - If three formulas are inputted, to define display names only for the first and third formula, enter *displayName&#x3D;FORMULA_1,,FORMULA_3*. The **displayName** field will still be included in that formula, but will contain the formula as inputted.  (optional)</param>
        /// <param name="flatten">Specify **Y** for &#x60;flatten&#x60; to return a flat, table-like JSON response model instead of the standard nested JSON response model. This option is provided for easier data processing and visualization. The default value for &#x60;flatten&#x60; is **N**.  See the **Cross-Sectional Result Object Flattened** schema for more detail on the response structure for flattened output.  (optional, default to N)</param>
        /// <param name="batch">Enables the ability to asynchronously \&quot;batch\&quot; the request, supporting a long-running request up to **10 minutes**. Upon requesting batch&#x3D;Y, the service will respond back with an HTTP Status Code of 202.  A user is limited to running 5 Batch Requests in a 10 minute period.  *This feature is available to Individual Users subscribed to the Performance Package and Performance Package Plus Performance Tiers and all Production Users. If you are unsure which Performance Tier you are subscribed to or you would like to gain access to the batch capabilities, please contact your FactSet Account Team or \&quot;Report Issue\&quot; above and our support teams can assist.*  Once a batch request is submitted, use &#x60;/batch-status&#x60; to see if the job has completed. Once completed, retrieve the results of the request via &#x60;/batch-result&#x60;. See the endpoints listed under *Batch Processing* for more information.  (optional, default to N)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CrossSectionalApi.GetCrossSectionalDataResponseWrapper)</returns>
        System.Threading.Tasks.Task<ApiResponse<CrossSectionalApi.GetCrossSectionalDataResponseWrapper>> GetCrossSectionalDataWithHttpInfoAsync(List<string> formulas, List<string> ids = default(List<string>), string universe = default(string), string universeType = default(string), string backTestDate = default(string), string calendar = default(string), string fsymId = default(string), List<string> displayName = default(List<string>), string flatten = default(string), string batch = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieve data items (Screening formulas) for a list of identifiers or defined universe.
        /// </summary>
        /// <remarks>
        /// The &#x60;/cross-sectional&#x60; endpoint is closely aligned with FactSet’s powerful data retrieval **Screening language** which is optimized for analysis of data items at single point in time for different entities and is extremely efficient for large universes.  The &#x60;/cross-sectional&#x60; endpoint supports Long Running asynchronous requests up to **10 minutes** via the &#x60;batch&#x60; parameter. *This feature is available to Individual Users subscribed to the Performance Package and Performance Package Plus Performance Tiers and all Production Users. If you are unsure which Performance Tier you are subscribed to or you would like to gain access to the batch capabilities, please contact your FactSet Account Team or \&quot;Report Issue\&quot; above and our support teams can assist.* 
        /// </remarks>
        /// <exception cref="FactSet.SDK.Formula.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="crossSectionalRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CrossSectionalResponse</returns>
        System.Threading.Tasks.Task<CrossSectionalApi.GetCrossSectionalDataForListResponseWrapper> GetCrossSectionalDataForListAsync(CrossSectionalRequest crossSectionalRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieve data items (Screening formulas) for a list of identifiers or defined universe.
        /// </summary>
        /// <remarks>
        /// The &#x60;/cross-sectional&#x60; endpoint is closely aligned with FactSet’s powerful data retrieval **Screening language** which is optimized for analysis of data items at single point in time for different entities and is extremely efficient for large universes.  The &#x60;/cross-sectional&#x60; endpoint supports Long Running asynchronous requests up to **10 minutes** via the &#x60;batch&#x60; parameter. *This feature is available to Individual Users subscribed to the Performance Package and Performance Package Plus Performance Tiers and all Production Users. If you are unsure which Performance Tier you are subscribed to or you would like to gain access to the batch capabilities, please contact your FactSet Account Team or \&quot;Report Issue\&quot; above and our support teams can assist.* 
        /// </remarks>
        /// <exception cref="FactSet.SDK.Formula.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="crossSectionalRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CrossSectionalApi.GetCrossSectionalDataForListResponseWrapper)</returns>
        System.Threading.Tasks.Task<ApiResponse<CrossSectionalApi.GetCrossSectionalDataForListResponseWrapper>> GetCrossSectionalDataForListWithHttpInfoAsync(CrossSectionalRequest crossSectionalRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ICrossSectionalApi : ICrossSectionalApiSync, ICrossSectionalApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class CrossSectionalApi : ICrossSectionalApi
    {
        private FactSet.SDK.Formula.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        # region Response Type Disctionaries
                private static readonly Dictionary<HttpStatusCode, System.Type> GetCrossSectionalDataResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)200, typeof(CrossSectionalResponse) },
            { (HttpStatusCode)202, typeof(BatchStatusResponse) },
            { (HttpStatusCode)400, typeof(ErrorDetail) },
            { (HttpStatusCode)401, typeof(ErrorDetail) },
            { (HttpStatusCode)403, typeof(ErrorDetail) },
            { (HttpStatusCode)404, typeof(ErrorDetail) },
            { (HttpStatusCode)405, typeof(ErrorDetail) },
            { (HttpStatusCode)406, typeof(ErrorDetail) },
            { (HttpStatusCode)408, typeof(ErrorDetail) },
            { (HttpStatusCode)415, typeof(ErrorDetail) },
            { (HttpStatusCode)429, typeof(Object) },
            { (HttpStatusCode)500, typeof(ErrorDetail) },
            { (HttpStatusCode)501, typeof(ErrorDetail) },
            { (HttpStatusCode)503, typeof(ErrorDetail) },
        };
        private static readonly Dictionary<HttpStatusCode, System.Type> GetCrossSectionalDataForListResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)200, typeof(CrossSectionalResponse) },
            { (HttpStatusCode)202, typeof(BatchStatusResponse) },
            { (HttpStatusCode)400, typeof(ErrorDetail) },
            { (HttpStatusCode)401, typeof(ErrorDetail) },
            { (HttpStatusCode)403, typeof(ErrorDetail) },
            { (HttpStatusCode)404, typeof(ErrorDetail) },
            { (HttpStatusCode)405, typeof(ErrorDetail) },
            { (HttpStatusCode)406, typeof(ErrorDetail) },
            { (HttpStatusCode)408, typeof(ErrorDetail) },
            { (HttpStatusCode)415, typeof(ErrorDetail) },
            { (HttpStatusCode)429, typeof(Object) },
            { (HttpStatusCode)500, typeof(ErrorDetail) },
            { (HttpStatusCode)501, typeof(ErrorDetail) },
            { (HttpStatusCode)503, typeof(ErrorDetail) },
        };

        # endregion Response Type Disctionaries

        # region Api Response Objects
         
        /// <summary>
        /// Wrapper to support GET /v1/cross-sectional returning different types
        /// per status code.
        ///
        /// <list>
        /// <item>
        /// <description>
        /// 200 : CrossSectionalResponse<br />
        /// Gets an array of &#x60;Response Objects&#x60; for a list of IDs and Screening formulas.
        /// </description>
        /// </item>
        /// 
        /// <item>
        /// <description>
        /// 202 : BatchStatusResponse<br />
        /// Batch request has been accepted.
        /// </description>
        /// </item>
        /// </list>
        ///
        /// <example>
        /// <code>
        /// GetCrossSectionalDataResponseWrapper response = ...;
        /// switch (response.statusCode)
        /// {
        ///   case 200:
        ///     CrossSectionalResponse data200 = response.getResponse200();
        ///     break;
        ///   case 202:
        ///     BatchStatusResponse data202 = response.getResponse202();
        ///     break;
        ///  }
        /// </code>
        /// </example>
        /// </summary>
        public class GetCrossSectionalDataResponseWrapper {

            /// <summary>This constructor initializes the new GetCrossSectionalDataResponseWrapper to
            /// (<paramref name="statusCode"/>,<paramref name="response"/>).
            /// </summary>
            /// <param name="statusCode">Http status code of the response</param>
            /// <param name="response">Raw response</param>
            public GetCrossSectionalDataResponseWrapper(HttpStatusCode statusCode, object response)
            {
                StatusCode = statusCode;
                Response = response;
            }

            /// <summary>
            /// Http status code of the response
            /// </summary>
            public HttpStatusCode StatusCode { get; }

            /// <summary>
            /// Raw Object response
            /// </summary>
            public object Response { get; }

            
            /// <summary>
            /// Gets an array of &#x60;Response Objects&#x60; for a list of IDs and Screening formulas.
            /// </summary>
            public CrossSectionalResponse Response200
            {
                get
                {
                    if (StatusCode != (HttpStatusCode) 200)
                    {
                        throw new FactSet.SDK.Formula.Client.ApiException(500, "Invalid response getter called. Response200 can't return a " + StatusCode + " response");
                    }
                    return (CrossSectionalResponse) Response;
                }
            }
            
            /// <summary>
            /// Batch request has been accepted.
            /// </summary>
            public BatchStatusResponse Response202
            {
                get
                {
                    if (StatusCode != (HttpStatusCode) 202)
                    {
                        throw new FactSet.SDK.Formula.Client.ApiException(500, "Invalid response getter called. Response202 can't return a " + StatusCode + " response");
                    }
                    return (BatchStatusResponse) Response;
                }
            }
            
        }


        /// <summary>
        /// Wrapper to support POST /v1/cross-sectional returning different types
        /// per status code.
        ///
        /// <list>
        /// <item>
        /// <description>
        /// 200 : CrossSectionalResponse<br />
        /// Gets an array of &#x60;Response Objects&#x60; for a list of IDs and Screening formulas.
        /// </description>
        /// </item>
        /// 
        /// <item>
        /// <description>
        /// 202 : BatchStatusResponse<br />
        /// Batch request has been accepted.
        /// </description>
        /// </item>
        /// </list>
        ///
        /// <example>
        /// <code>
        /// GetCrossSectionalDataForListResponseWrapper response = ...;
        /// switch (response.statusCode)
        /// {
        ///   case 200:
        ///     CrossSectionalResponse data200 = response.getResponse200();
        ///     break;
        ///   case 202:
        ///     BatchStatusResponse data202 = response.getResponse202();
        ///     break;
        ///  }
        /// </code>
        /// </example>
        /// </summary>
        public class GetCrossSectionalDataForListResponseWrapper {

            /// <summary>This constructor initializes the new GetCrossSectionalDataForListResponseWrapper to
            /// (<paramref name="statusCode"/>,<paramref name="response"/>).
            /// </summary>
            /// <param name="statusCode">Http status code of the response</param>
            /// <param name="response">Raw response</param>
            public GetCrossSectionalDataForListResponseWrapper(HttpStatusCode statusCode, object response)
            {
                StatusCode = statusCode;
                Response = response;
            }

            /// <summary>
            /// Http status code of the response
            /// </summary>
            public HttpStatusCode StatusCode { get; }

            /// <summary>
            /// Raw Object response
            /// </summary>
            public object Response { get; }

            
            /// <summary>
            /// Gets an array of &#x60;Response Objects&#x60; for a list of IDs and Screening formulas.
            /// </summary>
            public CrossSectionalResponse Response200
            {
                get
                {
                    if (StatusCode != (HttpStatusCode) 200)
                    {
                        throw new FactSet.SDK.Formula.Client.ApiException(500, "Invalid response getter called. Response200 can't return a " + StatusCode + " response");
                    }
                    return (CrossSectionalResponse) Response;
                }
            }
            
            /// <summary>
            /// Batch request has been accepted.
            /// </summary>
            public BatchStatusResponse Response202
            {
                get
                {
                    if (StatusCode != (HttpStatusCode) 202)
                    {
                        throw new FactSet.SDK.Formula.Client.ApiException(500, "Invalid response getter called. Response202 can't return a " + StatusCode + " response");
                    }
                    return (BatchStatusResponse) Response;
                }
            }
            
        }



        # endregion Api Response Objects

        /// <summary>
        /// Initializes a new instance of the <see cref="CrossSectionalApi"/> class.
        /// </summary>
        /// <returns></returns>
        public CrossSectionalApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CrossSectionalApi"/> class.
        /// </summary>
        /// <returns></returns>
        public CrossSectionalApi(string basePath)
        {
            this.Configuration = FactSet.SDK.Formula.Client.Configuration.MergeConfigurations(
                FactSet.SDK.Formula.Client.GlobalConfiguration.Instance,
                new FactSet.SDK.Formula.Client.Configuration { BasePath = basePath }
            );
            this.Client = new FactSet.SDK.Formula.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new FactSet.SDK.Formula.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = FactSet.SDK.Formula.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CrossSectionalApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public CrossSectionalApi(FactSet.SDK.Formula.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = FactSet.SDK.Formula.Client.Configuration.MergeConfigurations(
                FactSet.SDK.Formula.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new FactSet.SDK.Formula.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new FactSet.SDK.Formula.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = FactSet.SDK.Formula.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CrossSectionalApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public CrossSectionalApi(FactSet.SDK.Formula.Client.ISynchronousClient client, FactSet.SDK.Formula.Client.IAsynchronousClient asyncClient, FactSet.SDK.Formula.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = FactSet.SDK.Formula.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public FactSet.SDK.Formula.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public FactSet.SDK.Formula.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public FactSet.SDK.Formula.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public FactSet.SDK.Formula.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Retrieve data items (Screening formulas) for a list of identifiers or defined universe. The &#x60;/cross-sectional&#x60; endpoint is closely aligned with FactSet’s powerful data retrieval **Screening language** which is optimized for analysis of data items at single point in time for different entities and is extremely efficient for large universes.  The &#x60;/cross-sectional&#x60; endpoint supports Long Running asynchronous requests up to **10 minutes** via the &#x60;batch&#x60; parameter. *This feature is available to Individual Users subscribed to the Performance Package and Performance Package Plus Performance Tiers and all Production Users. If you are unsure which Performance Tier you are subscribed to or you would like to gain access to the batch capabilities, please contact your FactSet Account Team or \&quot;Report Issue\&quot; above and our support teams can assist.* 
        /// </summary>
        /// <exception cref="FactSet.SDK.Formula.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="formulas">List of Screening formulas</param>
        /// <param name="ids">List of entity identifiers.  The &#x60;ids&#x60; and &#x60;universe&#x60; parameters provide two different ways to specify the identifiers for which you want data retrieved. Please enter either the &#x60;ids&#x60; or &#x60;universe&#x60; parameter.  (optional)</param>
        /// <param name="universe">Screening expression to limit the universe  Please enter either the &#x60;ids&#x60; or &#x60;universe&#x60; parameter.  (optional)</param>
        /// <param name="universeType">Specify the universe type to calculate the &#x60;universe&#x60; in.  Find documentation below on how to build a screen for each universe type - * Equity Screen - [Online Assistant Page 20606](https://my.apps.factset.com/oa/pages/20606)  * Debt Screen - [Online Assistant Page 20888](https://my.apps.factset.com/oa/pages/20888)  * Fund Screen - [Online Assistant Page 21384](https://my.apps.factset.com/oa/pages/21384)  (optional, default to EQUITY)</param>
        /// <param name="backTestDate">Specify the backtest date either in **YYYY-MM-DD**, **YYYYMMDD** or **MM/DD/YYYY** format.  To learn more about backtesting, please visit [Online Assistant Page 20610](https://my.apps.factset.com/oa/pages/20610#backtest). User must have access to backtesting functionality.  (optional)</param>
        /// <param name="calendar">Calendar of data returned. The default value is FIVEDAY which displays Monday through Friday, regardless of whether there were trading holidays. (optional)</param>
        /// <param name="fsymId">Specify **Y** for &#x60;fsymId&#x60; to return an additional response object containing the data item **fsymId** which will contain the fsymIds of the requestIds. This is in addition to the response object containing the data item **requestId**. The default value for &#x60;fsymId&#x60; is **N**.  The **fsymId** field returned is the FactSet Default Permanent Identifier for the &#x60;requestId&#x60;. For all supported &#x60;requestId&#x60; symbol types, the &#x60;fsymId&#x60; parameter will return the Regional Level PermId &#39;-R&#39; which identifies the security’s best regional security data series per currency. Currently, the fsymId parameter only supports equities. Accepted &#x60;requestId&#x60; symbol types include all FactSet Permanent Identifiers types, CUSIP, SEDOL, ISIN, and Tickers. Further documentation can be found at this [Online Assistant attachment](https://oa.apps.factset.com/cms/oaAttachment/64c3213a-f415-4c27-a336-92c73a72deed/24881).  (optional, default to N)</param>
        /// <param name="displayName">Define display names for the formulas inputted. Enter the list of display names in the same order as the formulas inputted. An additional field **displayName** will be returned in the data object for a formula.  If the number of display names does not match the number of formulas provided, an error will be returned.  To define the display name for a subset of the formulas, leave a blank in the position of the formula that won&#39;t be renamed. For example - If three formulas are inputted, to define display names only for the first and third formula, enter *displayName&#x3D;FORMULA_1,,FORMULA_3*. The **displayName** field will still be included in that formula, but will contain the formula as inputted.  (optional)</param>
        /// <param name="flatten">Specify **Y** for &#x60;flatten&#x60; to return a flat, table-like JSON response model instead of the standard nested JSON response model. This option is provided for easier data processing and visualization. The default value for &#x60;flatten&#x60; is **N**.  See the **Cross-Sectional Result Object Flattened** schema for more detail on the response structure for flattened output.  (optional, default to N)</param>
        /// <param name="batch">Enables the ability to asynchronously \&quot;batch\&quot; the request, supporting a long-running request up to **10 minutes**. Upon requesting batch&#x3D;Y, the service will respond back with an HTTP Status Code of 202.  A user is limited to running 5 Batch Requests in a 10 minute period.  *This feature is available to Individual Users subscribed to the Performance Package and Performance Package Plus Performance Tiers and all Production Users. If you are unsure which Performance Tier you are subscribed to or you would like to gain access to the batch capabilities, please contact your FactSet Account Team or \&quot;Report Issue\&quot; above and our support teams can assist.*  Once a batch request is submitted, use &#x60;/batch-status&#x60; to see if the job has completed. Once completed, retrieve the results of the request via &#x60;/batch-result&#x60;. See the endpoints listed under *Batch Processing* for more information.  (optional, default to N)</param>
        /// <returns>CrossSectionalApi.GetCrossSectionalDataResponseWrapper</returns>
        public CrossSectionalApi.GetCrossSectionalDataResponseWrapper GetCrossSectionalData(List<string> formulas, List<string> ids = default(List<string>), string universe = default(string), string universeType = default(string), string backTestDate = default(string), string calendar = default(string), string fsymId = default(string), List<string> displayName = default(List<string>), string flatten = default(string), string batch = default(string))
        {
            var localVarResponse = GetCrossSectionalDataWithHttpInfo(formulas, ids, universe, universeType, backTestDate, calendar, fsymId, displayName, flatten, batch);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve data items (Screening formulas) for a list of identifiers or defined universe. The &#x60;/cross-sectional&#x60; endpoint is closely aligned with FactSet’s powerful data retrieval **Screening language** which is optimized for analysis of data items at single point in time for different entities and is extremely efficient for large universes.  The &#x60;/cross-sectional&#x60; endpoint supports Long Running asynchronous requests up to **10 minutes** via the &#x60;batch&#x60; parameter. *This feature is available to Individual Users subscribed to the Performance Package and Performance Package Plus Performance Tiers and all Production Users. If you are unsure which Performance Tier you are subscribed to or you would like to gain access to the batch capabilities, please contact your FactSet Account Team or \&quot;Report Issue\&quot; above and our support teams can assist.* 
        /// </summary>
        /// <exception cref="FactSet.SDK.Formula.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="formulas">List of Screening formulas</param>
        /// <param name="ids">List of entity identifiers.  The &#x60;ids&#x60; and &#x60;universe&#x60; parameters provide two different ways to specify the identifiers for which you want data retrieved. Please enter either the &#x60;ids&#x60; or &#x60;universe&#x60; parameter.  (optional)</param>
        /// <param name="universe">Screening expression to limit the universe  Please enter either the &#x60;ids&#x60; or &#x60;universe&#x60; parameter.  (optional)</param>
        /// <param name="universeType">Specify the universe type to calculate the &#x60;universe&#x60; in.  Find documentation below on how to build a screen for each universe type - * Equity Screen - [Online Assistant Page 20606](https://my.apps.factset.com/oa/pages/20606)  * Debt Screen - [Online Assistant Page 20888](https://my.apps.factset.com/oa/pages/20888)  * Fund Screen - [Online Assistant Page 21384](https://my.apps.factset.com/oa/pages/21384)  (optional, default to EQUITY)</param>
        /// <param name="backTestDate">Specify the backtest date either in **YYYY-MM-DD**, **YYYYMMDD** or **MM/DD/YYYY** format.  To learn more about backtesting, please visit [Online Assistant Page 20610](https://my.apps.factset.com/oa/pages/20610#backtest). User must have access to backtesting functionality.  (optional)</param>
        /// <param name="calendar">Calendar of data returned. The default value is FIVEDAY which displays Monday through Friday, regardless of whether there were trading holidays. (optional)</param>
        /// <param name="fsymId">Specify **Y** for &#x60;fsymId&#x60; to return an additional response object containing the data item **fsymId** which will contain the fsymIds of the requestIds. This is in addition to the response object containing the data item **requestId**. The default value for &#x60;fsymId&#x60; is **N**.  The **fsymId** field returned is the FactSet Default Permanent Identifier for the &#x60;requestId&#x60;. For all supported &#x60;requestId&#x60; symbol types, the &#x60;fsymId&#x60; parameter will return the Regional Level PermId &#39;-R&#39; which identifies the security’s best regional security data series per currency. Currently, the fsymId parameter only supports equities. Accepted &#x60;requestId&#x60; symbol types include all FactSet Permanent Identifiers types, CUSIP, SEDOL, ISIN, and Tickers. Further documentation can be found at this [Online Assistant attachment](https://oa.apps.factset.com/cms/oaAttachment/64c3213a-f415-4c27-a336-92c73a72deed/24881).  (optional, default to N)</param>
        /// <param name="displayName">Define display names for the formulas inputted. Enter the list of display names in the same order as the formulas inputted. An additional field **displayName** will be returned in the data object for a formula.  If the number of display names does not match the number of formulas provided, an error will be returned.  To define the display name for a subset of the formulas, leave a blank in the position of the formula that won&#39;t be renamed. For example - If three formulas are inputted, to define display names only for the first and third formula, enter *displayName&#x3D;FORMULA_1,,FORMULA_3*. The **displayName** field will still be included in that formula, but will contain the formula as inputted.  (optional)</param>
        /// <param name="flatten">Specify **Y** for &#x60;flatten&#x60; to return a flat, table-like JSON response model instead of the standard nested JSON response model. This option is provided for easier data processing and visualization. The default value for &#x60;flatten&#x60; is **N**.  See the **Cross-Sectional Result Object Flattened** schema for more detail on the response structure for flattened output.  (optional, default to N)</param>
        /// <param name="batch">Enables the ability to asynchronously \&quot;batch\&quot; the request, supporting a long-running request up to **10 minutes**. Upon requesting batch&#x3D;Y, the service will respond back with an HTTP Status Code of 202.  A user is limited to running 5 Batch Requests in a 10 minute period.  *This feature is available to Individual Users subscribed to the Performance Package and Performance Package Plus Performance Tiers and all Production Users. If you are unsure which Performance Tier you are subscribed to or you would like to gain access to the batch capabilities, please contact your FactSet Account Team or \&quot;Report Issue\&quot; above and our support teams can assist.*  Once a batch request is submitted, use &#x60;/batch-status&#x60; to see if the job has completed. Once completed, retrieve the results of the request via &#x60;/batch-result&#x60;. See the endpoints listed under *Batch Processing* for more information.  (optional, default to N)</param>
        /// <returns>ApiResponse of CrossSectionalResponse</returns>
        public ApiResponse<CrossSectionalApi.GetCrossSectionalDataResponseWrapper> GetCrossSectionalDataWithHttpInfo(List<string> formulas, List<string> ids = default(List<string>), string universe = default(string), string universeType = default(string), string backTestDate = default(string), string calendar = default(string), string fsymId = default(string), List<string> displayName = default(List<string>), string flatten = default(string), string batch = default(string))
        {
            // verify the required parameter 'formulas' is set
            if (formulas == null)
            {
                throw new FactSet.SDK.Formula.Client.ApiException(400, "Missing required parameter 'formulas' when calling CrossSectionalApi->GetCrossSectionalData");
            }

            FactSet.SDK.Formula.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.Formula.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.Formula.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.Formula.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (ids != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.Formula.Client.ClientUtils.ParameterToMultiMap("csv", "ids", ids));
            }
            if (universe != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.Formula.Client.ClientUtils.ParameterToMultiMap("", "universe", universe));
            }
            if (universeType != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.Formula.Client.ClientUtils.ParameterToMultiMap("", "universeType", universeType));
            }
            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.Formula.Client.ClientUtils.ParameterToMultiMap("csv", "formulas", formulas));
            if (backTestDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.Formula.Client.ClientUtils.ParameterToMultiMap("", "backTestDate", backTestDate));
            }
            if (calendar != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.Formula.Client.ClientUtils.ParameterToMultiMap("", "calendar", calendar));
            }
            if (fsymId != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.Formula.Client.ClientUtils.ParameterToMultiMap("", "fsymId", fsymId));
            }
            if (displayName != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.Formula.Client.ClientUtils.ParameterToMultiMap("csv", "displayName", displayName));
            }
            if (flatten != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.Formula.Client.ClientUtils.ParameterToMultiMap("", "flatten", flatten));
            }
            if (batch != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.Formula.Client.ClientUtils.ParameterToMultiMap("", "batch", batch));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.Formula.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = GetCrossSectionalDataResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Get<
            Object>("/v1/cross-sectional", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCrossSectionalData", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            var getcrosssectionaldataResponse = new GetCrossSectionalDataResponseWrapper(localVarResponse.StatusCode, localVarResponse.Data);
            return new ApiResponse<GetCrossSectionalDataResponseWrapper>(localVarResponse.StatusCode, getcrosssectionaldataResponse);
        }

        /// <summary>
        /// Retrieve data items (Screening formulas) for a list of identifiers or defined universe. The &#x60;/cross-sectional&#x60; endpoint is closely aligned with FactSet’s powerful data retrieval **Screening language** which is optimized for analysis of data items at single point in time for different entities and is extremely efficient for large universes.  The &#x60;/cross-sectional&#x60; endpoint supports Long Running asynchronous requests up to **10 minutes** via the &#x60;batch&#x60; parameter. *This feature is available to Individual Users subscribed to the Performance Package and Performance Package Plus Performance Tiers and all Production Users. If you are unsure which Performance Tier you are subscribed to or you would like to gain access to the batch capabilities, please contact your FactSet Account Team or \&quot;Report Issue\&quot; above and our support teams can assist.* 
        /// </summary>
        /// <exception cref="FactSet.SDK.Formula.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="formulas">List of Screening formulas</param>
        /// <param name="ids">List of entity identifiers.  The &#x60;ids&#x60; and &#x60;universe&#x60; parameters provide two different ways to specify the identifiers for which you want data retrieved. Please enter either the &#x60;ids&#x60; or &#x60;universe&#x60; parameter.  (optional)</param>
        /// <param name="universe">Screening expression to limit the universe  Please enter either the &#x60;ids&#x60; or &#x60;universe&#x60; parameter.  (optional)</param>
        /// <param name="universeType">Specify the universe type to calculate the &#x60;universe&#x60; in.  Find documentation below on how to build a screen for each universe type - * Equity Screen - [Online Assistant Page 20606](https://my.apps.factset.com/oa/pages/20606)  * Debt Screen - [Online Assistant Page 20888](https://my.apps.factset.com/oa/pages/20888)  * Fund Screen - [Online Assistant Page 21384](https://my.apps.factset.com/oa/pages/21384)  (optional, default to EQUITY)</param>
        /// <param name="backTestDate">Specify the backtest date either in **YYYY-MM-DD**, **YYYYMMDD** or **MM/DD/YYYY** format.  To learn more about backtesting, please visit [Online Assistant Page 20610](https://my.apps.factset.com/oa/pages/20610#backtest). User must have access to backtesting functionality.  (optional)</param>
        /// <param name="calendar">Calendar of data returned. The default value is FIVEDAY which displays Monday through Friday, regardless of whether there were trading holidays. (optional)</param>
        /// <param name="fsymId">Specify **Y** for &#x60;fsymId&#x60; to return an additional response object containing the data item **fsymId** which will contain the fsymIds of the requestIds. This is in addition to the response object containing the data item **requestId**. The default value for &#x60;fsymId&#x60; is **N**.  The **fsymId** field returned is the FactSet Default Permanent Identifier for the &#x60;requestId&#x60;. For all supported &#x60;requestId&#x60; symbol types, the &#x60;fsymId&#x60; parameter will return the Regional Level PermId &#39;-R&#39; which identifies the security’s best regional security data series per currency. Currently, the fsymId parameter only supports equities. Accepted &#x60;requestId&#x60; symbol types include all FactSet Permanent Identifiers types, CUSIP, SEDOL, ISIN, and Tickers. Further documentation can be found at this [Online Assistant attachment](https://oa.apps.factset.com/cms/oaAttachment/64c3213a-f415-4c27-a336-92c73a72deed/24881).  (optional, default to N)</param>
        /// <param name="displayName">Define display names for the formulas inputted. Enter the list of display names in the same order as the formulas inputted. An additional field **displayName** will be returned in the data object for a formula.  If the number of display names does not match the number of formulas provided, an error will be returned.  To define the display name for a subset of the formulas, leave a blank in the position of the formula that won&#39;t be renamed. For example - If three formulas are inputted, to define display names only for the first and third formula, enter *displayName&#x3D;FORMULA_1,,FORMULA_3*. The **displayName** field will still be included in that formula, but will contain the formula as inputted.  (optional)</param>
        /// <param name="flatten">Specify **Y** for &#x60;flatten&#x60; to return a flat, table-like JSON response model instead of the standard nested JSON response model. This option is provided for easier data processing and visualization. The default value for &#x60;flatten&#x60; is **N**.  See the **Cross-Sectional Result Object Flattened** schema for more detail on the response structure for flattened output.  (optional, default to N)</param>
        /// <param name="batch">Enables the ability to asynchronously \&quot;batch\&quot; the request, supporting a long-running request up to **10 minutes**. Upon requesting batch&#x3D;Y, the service will respond back with an HTTP Status Code of 202.  A user is limited to running 5 Batch Requests in a 10 minute period.  *This feature is available to Individual Users subscribed to the Performance Package and Performance Package Plus Performance Tiers and all Production Users. If you are unsure which Performance Tier you are subscribed to or you would like to gain access to the batch capabilities, please contact your FactSet Account Team or \&quot;Report Issue\&quot; above and our support teams can assist.*  Once a batch request is submitted, use &#x60;/batch-status&#x60; to see if the job has completed. Once completed, retrieve the results of the request via &#x60;/batch-result&#x60;. See the endpoints listed under *Batch Processing* for more information.  (optional, default to N)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CrossSectionalResponse</returns>
        public async System.Threading.Tasks.Task<CrossSectionalApi.GetCrossSectionalDataResponseWrapper>GetCrossSectionalDataAsync(List<string> formulas, List<string> ids = default(List<string>), string universe = default(string), string universeType = default(string), string backTestDate = default(string), string calendar = default(string), string fsymId = default(string), List<string> displayName = default(List<string>), string flatten = default(string), string batch = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await GetCrossSectionalDataWithHttpInfoAsync(formulas, ids, universe, universeType, backTestDate, calendar, fsymId, displayName, flatten, batch, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve data items (Screening formulas) for a list of identifiers or defined universe. The &#x60;/cross-sectional&#x60; endpoint is closely aligned with FactSet’s powerful data retrieval **Screening language** which is optimized for analysis of data items at single point in time for different entities and is extremely efficient for large universes.  The &#x60;/cross-sectional&#x60; endpoint supports Long Running asynchronous requests up to **10 minutes** via the &#x60;batch&#x60; parameter. *This feature is available to Individual Users subscribed to the Performance Package and Performance Package Plus Performance Tiers and all Production Users. If you are unsure which Performance Tier you are subscribed to or you would like to gain access to the batch capabilities, please contact your FactSet Account Team or \&quot;Report Issue\&quot; above and our support teams can assist.* 
        /// </summary>
        /// <exception cref="FactSet.SDK.Formula.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="formulas">List of Screening formulas</param>
        /// <param name="ids">List of entity identifiers.  The &#x60;ids&#x60; and &#x60;universe&#x60; parameters provide two different ways to specify the identifiers for which you want data retrieved. Please enter either the &#x60;ids&#x60; or &#x60;universe&#x60; parameter.  (optional)</param>
        /// <param name="universe">Screening expression to limit the universe  Please enter either the &#x60;ids&#x60; or &#x60;universe&#x60; parameter.  (optional)</param>
        /// <param name="universeType">Specify the universe type to calculate the &#x60;universe&#x60; in.  Find documentation below on how to build a screen for each universe type - * Equity Screen - [Online Assistant Page 20606](https://my.apps.factset.com/oa/pages/20606)  * Debt Screen - [Online Assistant Page 20888](https://my.apps.factset.com/oa/pages/20888)  * Fund Screen - [Online Assistant Page 21384](https://my.apps.factset.com/oa/pages/21384)  (optional, default to EQUITY)</param>
        /// <param name="backTestDate">Specify the backtest date either in **YYYY-MM-DD**, **YYYYMMDD** or **MM/DD/YYYY** format.  To learn more about backtesting, please visit [Online Assistant Page 20610](https://my.apps.factset.com/oa/pages/20610#backtest). User must have access to backtesting functionality.  (optional)</param>
        /// <param name="calendar">Calendar of data returned. The default value is FIVEDAY which displays Monday through Friday, regardless of whether there were trading holidays. (optional)</param>
        /// <param name="fsymId">Specify **Y** for &#x60;fsymId&#x60; to return an additional response object containing the data item **fsymId** which will contain the fsymIds of the requestIds. This is in addition to the response object containing the data item **requestId**. The default value for &#x60;fsymId&#x60; is **N**.  The **fsymId** field returned is the FactSet Default Permanent Identifier for the &#x60;requestId&#x60;. For all supported &#x60;requestId&#x60; symbol types, the &#x60;fsymId&#x60; parameter will return the Regional Level PermId &#39;-R&#39; which identifies the security’s best regional security data series per currency. Currently, the fsymId parameter only supports equities. Accepted &#x60;requestId&#x60; symbol types include all FactSet Permanent Identifiers types, CUSIP, SEDOL, ISIN, and Tickers. Further documentation can be found at this [Online Assistant attachment](https://oa.apps.factset.com/cms/oaAttachment/64c3213a-f415-4c27-a336-92c73a72deed/24881).  (optional, default to N)</param>
        /// <param name="displayName">Define display names for the formulas inputted. Enter the list of display names in the same order as the formulas inputted. An additional field **displayName** will be returned in the data object for a formula.  If the number of display names does not match the number of formulas provided, an error will be returned.  To define the display name for a subset of the formulas, leave a blank in the position of the formula that won&#39;t be renamed. For example - If three formulas are inputted, to define display names only for the first and third formula, enter *displayName&#x3D;FORMULA_1,,FORMULA_3*. The **displayName** field will still be included in that formula, but will contain the formula as inputted.  (optional)</param>
        /// <param name="flatten">Specify **Y** for &#x60;flatten&#x60; to return a flat, table-like JSON response model instead of the standard nested JSON response model. This option is provided for easier data processing and visualization. The default value for &#x60;flatten&#x60; is **N**.  See the **Cross-Sectional Result Object Flattened** schema for more detail on the response structure for flattened output.  (optional, default to N)</param>
        /// <param name="batch">Enables the ability to asynchronously \&quot;batch\&quot; the request, supporting a long-running request up to **10 minutes**. Upon requesting batch&#x3D;Y, the service will respond back with an HTTP Status Code of 202.  A user is limited to running 5 Batch Requests in a 10 minute period.  *This feature is available to Individual Users subscribed to the Performance Package and Performance Package Plus Performance Tiers and all Production Users. If you are unsure which Performance Tier you are subscribed to or you would like to gain access to the batch capabilities, please contact your FactSet Account Team or \&quot;Report Issue\&quot; above and our support teams can assist.*  Once a batch request is submitted, use &#x60;/batch-status&#x60; to see if the job has completed. Once completed, retrieve the results of the request via &#x60;/batch-result&#x60;. See the endpoints listed under *Batch Processing* for more information.  (optional, default to N)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CrossSectionalResponse)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<CrossSectionalApi.GetCrossSectionalDataResponseWrapper>> GetCrossSectionalDataWithHttpInfoAsync(List<string> formulas, List<string> ids = default(List<string>), string universe = default(string), string universeType = default(string), string backTestDate = default(string), string calendar = default(string), string fsymId = default(string), List<string> displayName = default(List<string>), string flatten = default(string), string batch = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'formulas' is set
            if (formulas == null)
            {
                throw new FactSet.SDK.Formula.Client.ApiException(400, "Missing required parameter 'formulas' when calling CrossSectionalApi->GetCrossSectionalData");
            }


            FactSet.SDK.Formula.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.Formula.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.Formula.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.Formula.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (ids != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.Formula.Client.ClientUtils.ParameterToMultiMap("csv", "ids", ids));
            }
            if (universe != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.Formula.Client.ClientUtils.ParameterToMultiMap("", "universe", universe));
            }
            if (universeType != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.Formula.Client.ClientUtils.ParameterToMultiMap("", "universeType", universeType));
            }
            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.Formula.Client.ClientUtils.ParameterToMultiMap("csv", "formulas", formulas));
            if (backTestDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.Formula.Client.ClientUtils.ParameterToMultiMap("", "backTestDate", backTestDate));
            }
            if (calendar != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.Formula.Client.ClientUtils.ParameterToMultiMap("", "calendar", calendar));
            }
            if (fsymId != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.Formula.Client.ClientUtils.ParameterToMultiMap("", "fsymId", fsymId));
            }
            if (displayName != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.Formula.Client.ClientUtils.ParameterToMultiMap("csv", "displayName", displayName));
            }
            if (flatten != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.Formula.Client.ClientUtils.ParameterToMultiMap("", "flatten", flatten));
            }
            if (batch != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.Formula.Client.ClientUtils.ParameterToMultiMap("", "batch", batch));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.Formula.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = GetCrossSectionalDataResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/v1/cross-sectional", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCrossSectionalData", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            var getcrosssectionaldataResponse = new GetCrossSectionalDataResponseWrapper(localVarResponse.StatusCode, localVarResponse.Data);
            return new ApiResponse<GetCrossSectionalDataResponseWrapper>(localVarResponse.StatusCode, getcrosssectionaldataResponse);
        }

        /// <summary>
        /// Retrieve data items (Screening formulas) for a list of identifiers or defined universe. The &#x60;/cross-sectional&#x60; endpoint is closely aligned with FactSet’s powerful data retrieval **Screening language** which is optimized for analysis of data items at single point in time for different entities and is extremely efficient for large universes.  The &#x60;/cross-sectional&#x60; endpoint supports Long Running asynchronous requests up to **10 minutes** via the &#x60;batch&#x60; parameter. *This feature is available to Individual Users subscribed to the Performance Package and Performance Package Plus Performance Tiers and all Production Users. If you are unsure which Performance Tier you are subscribed to or you would like to gain access to the batch capabilities, please contact your FactSet Account Team or \&quot;Report Issue\&quot; above and our support teams can assist.* 
        /// </summary>
        /// <exception cref="FactSet.SDK.Formula.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="crossSectionalRequest"></param>
        /// <returns>CrossSectionalApi.GetCrossSectionalDataForListResponseWrapper</returns>
        public CrossSectionalApi.GetCrossSectionalDataForListResponseWrapper GetCrossSectionalDataForList(CrossSectionalRequest crossSectionalRequest)
        {
            var localVarResponse = GetCrossSectionalDataForListWithHttpInfo(crossSectionalRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve data items (Screening formulas) for a list of identifiers or defined universe. The &#x60;/cross-sectional&#x60; endpoint is closely aligned with FactSet’s powerful data retrieval **Screening language** which is optimized for analysis of data items at single point in time for different entities and is extremely efficient for large universes.  The &#x60;/cross-sectional&#x60; endpoint supports Long Running asynchronous requests up to **10 minutes** via the &#x60;batch&#x60; parameter. *This feature is available to Individual Users subscribed to the Performance Package and Performance Package Plus Performance Tiers and all Production Users. If you are unsure which Performance Tier you are subscribed to or you would like to gain access to the batch capabilities, please contact your FactSet Account Team or \&quot;Report Issue\&quot; above and our support teams can assist.* 
        /// </summary>
        /// <exception cref="FactSet.SDK.Formula.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="crossSectionalRequest"></param>
        /// <returns>ApiResponse of CrossSectionalResponse</returns>
        public ApiResponse<CrossSectionalApi.GetCrossSectionalDataForListResponseWrapper> GetCrossSectionalDataForListWithHttpInfo(CrossSectionalRequest crossSectionalRequest)
        {
            // verify the required parameter 'crossSectionalRequest' is set
            if (crossSectionalRequest == null)
            {
                throw new FactSet.SDK.Formula.Client.ApiException(400, "Missing required parameter 'crossSectionalRequest' when calling CrossSectionalApi->GetCrossSectionalDataForList");
            }

            FactSet.SDK.Formula.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.Formula.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.Formula.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.Formula.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = crossSectionalRequest;

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.Formula.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = GetCrossSectionalDataForListResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Post<
            Object>("/v1/cross-sectional", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCrossSectionalDataForList", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            var getcrosssectionaldataforlistResponse = new GetCrossSectionalDataForListResponseWrapper(localVarResponse.StatusCode, localVarResponse.Data);
            return new ApiResponse<GetCrossSectionalDataForListResponseWrapper>(localVarResponse.StatusCode, getcrosssectionaldataforlistResponse);
        }

        /// <summary>
        /// Retrieve data items (Screening formulas) for a list of identifiers or defined universe. The &#x60;/cross-sectional&#x60; endpoint is closely aligned with FactSet’s powerful data retrieval **Screening language** which is optimized for analysis of data items at single point in time for different entities and is extremely efficient for large universes.  The &#x60;/cross-sectional&#x60; endpoint supports Long Running asynchronous requests up to **10 minutes** via the &#x60;batch&#x60; parameter. *This feature is available to Individual Users subscribed to the Performance Package and Performance Package Plus Performance Tiers and all Production Users. If you are unsure which Performance Tier you are subscribed to or you would like to gain access to the batch capabilities, please contact your FactSet Account Team or \&quot;Report Issue\&quot; above and our support teams can assist.* 
        /// </summary>
        /// <exception cref="FactSet.SDK.Formula.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="crossSectionalRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CrossSectionalResponse</returns>
        public async System.Threading.Tasks.Task<CrossSectionalApi.GetCrossSectionalDataForListResponseWrapper>GetCrossSectionalDataForListAsync(CrossSectionalRequest crossSectionalRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await GetCrossSectionalDataForListWithHttpInfoAsync(crossSectionalRequest, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve data items (Screening formulas) for a list of identifiers or defined universe. The &#x60;/cross-sectional&#x60; endpoint is closely aligned with FactSet’s powerful data retrieval **Screening language** which is optimized for analysis of data items at single point in time for different entities and is extremely efficient for large universes.  The &#x60;/cross-sectional&#x60; endpoint supports Long Running asynchronous requests up to **10 minutes** via the &#x60;batch&#x60; parameter. *This feature is available to Individual Users subscribed to the Performance Package and Performance Package Plus Performance Tiers and all Production Users. If you are unsure which Performance Tier you are subscribed to or you would like to gain access to the batch capabilities, please contact your FactSet Account Team or \&quot;Report Issue\&quot; above and our support teams can assist.* 
        /// </summary>
        /// <exception cref="FactSet.SDK.Formula.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="crossSectionalRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CrossSectionalResponse)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<CrossSectionalApi.GetCrossSectionalDataForListResponseWrapper>> GetCrossSectionalDataForListWithHttpInfoAsync(CrossSectionalRequest crossSectionalRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'crossSectionalRequest' is set
            if (crossSectionalRequest == null)
            {
                throw new FactSet.SDK.Formula.Client.ApiException(400, "Missing required parameter 'crossSectionalRequest' when calling CrossSectionalApi->GetCrossSectionalDataForList");
            }


            FactSet.SDK.Formula.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.Formula.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.Formula.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.Formula.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = crossSectionalRequest;

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.Formula.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = GetCrossSectionalDataForListResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/v1/cross-sectional", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCrossSectionalDataForList", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            var getcrosssectionaldataforlistResponse = new GetCrossSectionalDataForListResponseWrapper(localVarResponse.StatusCode, localVarResponse.Data);
            return new ApiResponse<GetCrossSectionalDataForListResponseWrapper>(localVarResponse.StatusCode, getcrosssectionaldataforlistResponse);
        }

    }
}
