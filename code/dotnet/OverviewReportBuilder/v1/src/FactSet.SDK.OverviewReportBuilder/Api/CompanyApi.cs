/*
 * FactSet Overview Report Builder API
 *
 * Get relevant industry-specific data for high level analysis of public and private companies
 *
 * The version of the OpenAPI document: 1.2.0
 * Contact: api@factset.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using FactSet.SDK.OverviewReportBuilder.Client;
using FactSet.SDK.OverviewReportBuilder.Model;
using FactSet.SDK.Utils.Authentication;

namespace FactSet.SDK.OverviewReportBuilder.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ICompanyApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Current Capitalization
        /// </summary>
        /// <exception cref="FactSet.SDK.OverviewReportBuilder.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Company ticker</param>
        /// <returns>StachTableResponse</returns>
        StachTableResponse CurrentCapGet(string id);

        /// <summary>
        /// Current Capitalization
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FactSet.SDK.OverviewReportBuilder.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Company ticker</param>
        /// <returns>ApiResponse of StachTableResponse</returns>
        ApiResponse<StachTableResponse> CurrentCapGetWithHttpInfo(string id);
        /// <summary>
        /// Financial / Estimate Highlights
        /// </summary>
        /// <exception cref="FactSet.SDK.OverviewReportBuilder.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Company ticker</param>
        /// <param name="actual">The number of actual data periods to be returned. Must be greater than 0 (optional, default to 4)</param>
        /// <param name="estimate">The number of estimate data periods to be returned. Must be greater than 0 (optional, default to 1)</param>
        /// <returns>StachTableResponse</returns>
        StachTableResponse FinancialHighlightsGet(string id, int? actual = default(int?), int? estimate = default(int?));

        /// <summary>
        /// Financial / Estimate Highlights
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FactSet.SDK.OverviewReportBuilder.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Company ticker</param>
        /// <param name="actual">The number of actual data periods to be returned. Must be greater than 0 (optional, default to 4)</param>
        /// <param name="estimate">The number of estimate data periods to be returned. Must be greater than 0 (optional, default to 1)</param>
        /// <returns>ApiResponse of StachTableResponse</returns>
        ApiResponse<StachTableResponse> FinancialHighlightsGetWithHttpInfo(string id, int? actual = default(int?), int? estimate = default(int?));
        /// <summary>
        /// Overview Profile
        /// </summary>
        /// <exception cref="FactSet.SDK.OverviewReportBuilder.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Company ticker</param>
        /// <returns>ProfileResponse</returns>
        ProfileResponse GetProfileProfile(string id);

        /// <summary>
        /// Overview Profile
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FactSet.SDK.OverviewReportBuilder.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Company ticker</param>
        /// <returns>ApiResponse of ProfileResponse</returns>
        ApiResponse<ProfileResponse> GetProfileProfileWithHttpInfo(string id);
        /// <summary>
        /// Key Stats
        /// </summary>
        /// <exception cref="FactSet.SDK.OverviewReportBuilder.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Company ticker</param>
        /// <returns>KeyStatsResponse</returns>
        KeyStatsResponse KeyStatsGet(string id);

        /// <summary>
        /// Key Stats
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FactSet.SDK.OverviewReportBuilder.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Company ticker</param>
        /// <returns>ApiResponse of KeyStatsResponse</returns>
        ApiResponse<KeyStatsResponse> KeyStatsGetWithHttpInfo(string id);
        /// <summary>
        /// Peer List
        /// </summary>
        /// <exception cref="FactSet.SDK.OverviewReportBuilder.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Company ticker</param>
        /// <param name="topn">Limits the number of peers returned. (optional)</param>
        /// <returns>PeerListResponse</returns>
        PeerListResponse PeerListGet(string id, decimal? topn = default(decimal?));

        /// <summary>
        /// Peer List
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FactSet.SDK.OverviewReportBuilder.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Company ticker</param>
        /// <param name="topn">Limits the number of peers returned. (optional)</param>
        /// <returns>ApiResponse of PeerListResponse</returns>
        ApiResponse<PeerListResponse> PeerListGetWithHttpInfo(string id, decimal? topn = default(decimal?));
        /// <summary>
        /// Transactions
        /// </summary>
        /// <exception cref="FactSet.SDK.OverviewReportBuilder.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Company ticker</param>
        /// <param name="transactionType">Filters response to return only this type of transaction. If not specified, returns all transactions. Values are not case sensitive. (optional)</param>
        /// <param name="financingType">Filters response to return transactions of this financing type. If not specified, returns all transactions. Values are not case sensitive (optional)</param>
        /// <returns>StachTableResponse</returns>
        StachTableResponse TransactionsGet(string id, string transactionType = default(string), string financingType = default(string));

        /// <summary>
        /// Transactions
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FactSet.SDK.OverviewReportBuilder.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Company ticker</param>
        /// <param name="transactionType">Filters response to return only this type of transaction. If not specified, returns all transactions. Values are not case sensitive. (optional)</param>
        /// <param name="financingType">Filters response to return transactions of this financing type. If not specified, returns all transactions. Values are not case sensitive (optional)</param>
        /// <returns>ApiResponse of StachTableResponse</returns>
        ApiResponse<StachTableResponse> TransactionsGetWithHttpInfo(string id, string transactionType = default(string), string financingType = default(string));
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ICompanyApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Current Capitalization
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FactSet.SDK.OverviewReportBuilder.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Company ticker</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of StachTableResponse</returns>
        System.Threading.Tasks.Task<StachTableResponse> CurrentCapGetAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Current Capitalization
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FactSet.SDK.OverviewReportBuilder.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Company ticker</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (StachTableResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<StachTableResponse>> CurrentCapGetWithHttpInfoAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Financial / Estimate Highlights
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FactSet.SDK.OverviewReportBuilder.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Company ticker</param>
        /// <param name="actual">The number of actual data periods to be returned. Must be greater than 0 (optional, default to 4)</param>
        /// <param name="estimate">The number of estimate data periods to be returned. Must be greater than 0 (optional, default to 1)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of StachTableResponse</returns>
        System.Threading.Tasks.Task<StachTableResponse> FinancialHighlightsGetAsync(string id, int? actual = default(int?), int? estimate = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Financial / Estimate Highlights
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FactSet.SDK.OverviewReportBuilder.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Company ticker</param>
        /// <param name="actual">The number of actual data periods to be returned. Must be greater than 0 (optional, default to 4)</param>
        /// <param name="estimate">The number of estimate data periods to be returned. Must be greater than 0 (optional, default to 1)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (StachTableResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<StachTableResponse>> FinancialHighlightsGetWithHttpInfoAsync(string id, int? actual = default(int?), int? estimate = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Overview Profile
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FactSet.SDK.OverviewReportBuilder.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Company ticker</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ProfileResponse</returns>
        System.Threading.Tasks.Task<ProfileResponse> GetProfileProfileAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Overview Profile
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FactSet.SDK.OverviewReportBuilder.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Company ticker</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ProfileResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ProfileResponse>> GetProfileProfileWithHttpInfoAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Key Stats
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FactSet.SDK.OverviewReportBuilder.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Company ticker</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of KeyStatsResponse</returns>
        System.Threading.Tasks.Task<KeyStatsResponse> KeyStatsGetAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Key Stats
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FactSet.SDK.OverviewReportBuilder.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Company ticker</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (KeyStatsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<KeyStatsResponse>> KeyStatsGetWithHttpInfoAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Peer List
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FactSet.SDK.OverviewReportBuilder.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Company ticker</param>
        /// <param name="topn">Limits the number of peers returned. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PeerListResponse</returns>
        System.Threading.Tasks.Task<PeerListResponse> PeerListGetAsync(string id, decimal? topn = default(decimal?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Peer List
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FactSet.SDK.OverviewReportBuilder.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Company ticker</param>
        /// <param name="topn">Limits the number of peers returned. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PeerListResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<PeerListResponse>> PeerListGetWithHttpInfoAsync(string id, decimal? topn = default(decimal?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Transactions
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FactSet.SDK.OverviewReportBuilder.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Company ticker</param>
        /// <param name="transactionType">Filters response to return only this type of transaction. If not specified, returns all transactions. Values are not case sensitive. (optional)</param>
        /// <param name="financingType">Filters response to return transactions of this financing type. If not specified, returns all transactions. Values are not case sensitive (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of StachTableResponse</returns>
        System.Threading.Tasks.Task<StachTableResponse> TransactionsGetAsync(string id, string transactionType = default(string), string financingType = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Transactions
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FactSet.SDK.OverviewReportBuilder.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Company ticker</param>
        /// <param name="transactionType">Filters response to return only this type of transaction. If not specified, returns all transactions. Values are not case sensitive. (optional)</param>
        /// <param name="financingType">Filters response to return transactions of this financing type. If not specified, returns all transactions. Values are not case sensitive (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (StachTableResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<StachTableResponse>> TransactionsGetWithHttpInfoAsync(string id, string transactionType = default(string), string financingType = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ICompanyApi : ICompanyApiSync, ICompanyApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class CompanyApi : ICompanyApi
    {
        private FactSet.SDK.OverviewReportBuilder.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        # region Response Type Disctionaries
        
        private static readonly Dictionary<HttpStatusCode, System.Type> CurrentCapGetResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)200, typeof(StachTableResponse) },
            { (HttpStatusCode)400, typeof(ErrorResponse) },
            { (HttpStatusCode)404, typeof(ErrorResponse) },
        };

        private static readonly Dictionary<HttpStatusCode, System.Type> FinancialHighlightsGetResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)200, typeof(StachTableResponse) },
            { (HttpStatusCode)400, typeof(ErrorResponse) },
            { (HttpStatusCode)404, typeof(ErrorResponse) },
        };

        private static readonly Dictionary<HttpStatusCode, System.Type> GetProfileProfileResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)200, typeof(ProfileResponse) },
            { (HttpStatusCode)400, typeof(ErrorResponse) },
            { (HttpStatusCode)404, typeof(ErrorResponse) },
        };

        private static readonly Dictionary<HttpStatusCode, System.Type> KeyStatsGetResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)200, typeof(KeyStatsResponse) },
            { (HttpStatusCode)400, typeof(ErrorResponse) },
            { (HttpStatusCode)404, typeof(ErrorResponse) },
        };

        private static readonly Dictionary<HttpStatusCode, System.Type> PeerListGetResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)200, typeof(PeerListResponse) },
            { (HttpStatusCode)400, typeof(ErrorResponse) },
            { (HttpStatusCode)404, typeof(ErrorResponse) },
        };

        private static readonly Dictionary<HttpStatusCode, System.Type> TransactionsGetResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)200, typeof(StachTableResponse) },
            { (HttpStatusCode)400, typeof(ErrorResponse) },
            { (HttpStatusCode)404, typeof(ErrorResponse) },
        };

        # endregion Response Type Disctionaries

        # region Api Response Objects
        

        # endregion Api Response Objects

        /// <summary>
        /// Initializes a new instance of the <see cref="CompanyApi"/> class.
        /// </summary>
        /// <returns></returns>
        public CompanyApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CompanyApi"/> class.
        /// </summary>
        /// <returns></returns>
        public CompanyApi(string basePath)
        {
            this.Configuration = FactSet.SDK.OverviewReportBuilder.Client.Configuration.MergeConfigurations(
                FactSet.SDK.OverviewReportBuilder.Client.GlobalConfiguration.Instance,
                new FactSet.SDK.OverviewReportBuilder.Client.Configuration { BasePath = basePath }
            );
            this.Client = new FactSet.SDK.OverviewReportBuilder.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new FactSet.SDK.OverviewReportBuilder.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = FactSet.SDK.OverviewReportBuilder.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CompanyApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public CompanyApi(FactSet.SDK.OverviewReportBuilder.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = FactSet.SDK.OverviewReportBuilder.Client.Configuration.MergeConfigurations(
                FactSet.SDK.OverviewReportBuilder.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new FactSet.SDK.OverviewReportBuilder.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new FactSet.SDK.OverviewReportBuilder.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = FactSet.SDK.OverviewReportBuilder.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CompanyApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public CompanyApi(FactSet.SDK.OverviewReportBuilder.Client.ISynchronousClient client, FactSet.SDK.OverviewReportBuilder.Client.IAsynchronousClient asyncClient, FactSet.SDK.OverviewReportBuilder.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = FactSet.SDK.OverviewReportBuilder.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public FactSet.SDK.OverviewReportBuilder.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public FactSet.SDK.OverviewReportBuilder.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public FactSet.SDK.OverviewReportBuilder.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public FactSet.SDK.OverviewReportBuilder.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Current Capitalization 
        /// </summary>
        /// <exception cref="FactSet.SDK.OverviewReportBuilder.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Company ticker</param>
        /// <returns>StachTableResponse</returns>
        public StachTableResponse CurrentCapGet(string id)
        {
            var localVarResponse = CurrentCapGetWithHttpInfo(id);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Current Capitalization 
        /// </summary>
        /// <exception cref="FactSet.SDK.OverviewReportBuilder.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Company ticker</param>
        /// <returns>ApiResponse of StachTableResponse</returns>
        public ApiResponse<StachTableResponse> CurrentCapGetWithHttpInfo(string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new FactSet.SDK.OverviewReportBuilder.Client.ApiException(400, "Missing required parameter 'id' when calling CompanyApi->CurrentCapGet");
            }

            FactSet.SDK.OverviewReportBuilder.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.OverviewReportBuilder.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.OverviewReportBuilder.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.OverviewReportBuilder.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.OverviewReportBuilder.Client.ClientUtils.ParameterToMultiMap("", "id", id));

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.OverviewReportBuilder.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = CurrentCapGetResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Get<
            StachTableResponse>("/current-cap", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CurrentCapGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// Current Capitalization 
        /// </summary>
        /// <exception cref="FactSet.SDK.OverviewReportBuilder.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Company ticker</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of StachTableResponse</returns>
        public async System.Threading.Tasks.Task<StachTableResponse>CurrentCapGetAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await CurrentCapGetWithHttpInfoAsync(id, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Current Capitalization 
        /// </summary>
        /// <exception cref="FactSet.SDK.OverviewReportBuilder.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Company ticker</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (StachTableResponse)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<StachTableResponse>> CurrentCapGetWithHttpInfoAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new FactSet.SDK.OverviewReportBuilder.Client.ApiException(400, "Missing required parameter 'id' when calling CompanyApi->CurrentCapGet");
            }


            FactSet.SDK.OverviewReportBuilder.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.OverviewReportBuilder.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.OverviewReportBuilder.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.OverviewReportBuilder.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.OverviewReportBuilder.Client.ClientUtils.ParameterToMultiMap("", "id", id));

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.OverviewReportBuilder.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = CurrentCapGetResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<StachTableResponse>("/current-cap", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CurrentCapGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Financial / Estimate Highlights 
        /// </summary>
        /// <exception cref="FactSet.SDK.OverviewReportBuilder.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Company ticker</param>
        /// <param name="actual">The number of actual data periods to be returned. Must be greater than 0 (optional, default to 4)</param>
        /// <param name="estimate">The number of estimate data periods to be returned. Must be greater than 0 (optional, default to 1)</param>
        /// <returns>StachTableResponse</returns>
        public StachTableResponse FinancialHighlightsGet(string id, int? actual = default(int?), int? estimate = default(int?))
        {
            var localVarResponse = FinancialHighlightsGetWithHttpInfo(id, actual, estimate);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Financial / Estimate Highlights 
        /// </summary>
        /// <exception cref="FactSet.SDK.OverviewReportBuilder.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Company ticker</param>
        /// <param name="actual">The number of actual data periods to be returned. Must be greater than 0 (optional, default to 4)</param>
        /// <param name="estimate">The number of estimate data periods to be returned. Must be greater than 0 (optional, default to 1)</param>
        /// <returns>ApiResponse of StachTableResponse</returns>
        public ApiResponse<StachTableResponse> FinancialHighlightsGetWithHttpInfo(string id, int? actual = default(int?), int? estimate = default(int?))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new FactSet.SDK.OverviewReportBuilder.Client.ApiException(400, "Missing required parameter 'id' when calling CompanyApi->FinancialHighlightsGet");
            }

            FactSet.SDK.OverviewReportBuilder.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.OverviewReportBuilder.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.OverviewReportBuilder.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.OverviewReportBuilder.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.OverviewReportBuilder.Client.ClientUtils.ParameterToMultiMap("", "id", id));
            if (actual != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.OverviewReportBuilder.Client.ClientUtils.ParameterToMultiMap("", "actual", actual));
            }
            if (estimate != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.OverviewReportBuilder.Client.ClientUtils.ParameterToMultiMap("", "estimate", estimate));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.OverviewReportBuilder.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = FinancialHighlightsGetResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Get<
            StachTableResponse>("/financial-highlights", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("FinancialHighlightsGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// Financial / Estimate Highlights 
        /// </summary>
        /// <exception cref="FactSet.SDK.OverviewReportBuilder.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Company ticker</param>
        /// <param name="actual">The number of actual data periods to be returned. Must be greater than 0 (optional, default to 4)</param>
        /// <param name="estimate">The number of estimate data periods to be returned. Must be greater than 0 (optional, default to 1)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of StachTableResponse</returns>
        public async System.Threading.Tasks.Task<StachTableResponse>FinancialHighlightsGetAsync(string id, int? actual = default(int?), int? estimate = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await FinancialHighlightsGetWithHttpInfoAsync(id, actual, estimate, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Financial / Estimate Highlights 
        /// </summary>
        /// <exception cref="FactSet.SDK.OverviewReportBuilder.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Company ticker</param>
        /// <param name="actual">The number of actual data periods to be returned. Must be greater than 0 (optional, default to 4)</param>
        /// <param name="estimate">The number of estimate data periods to be returned. Must be greater than 0 (optional, default to 1)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (StachTableResponse)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<StachTableResponse>> FinancialHighlightsGetWithHttpInfoAsync(string id, int? actual = default(int?), int? estimate = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new FactSet.SDK.OverviewReportBuilder.Client.ApiException(400, "Missing required parameter 'id' when calling CompanyApi->FinancialHighlightsGet");
            }


            FactSet.SDK.OverviewReportBuilder.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.OverviewReportBuilder.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.OverviewReportBuilder.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.OverviewReportBuilder.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.OverviewReportBuilder.Client.ClientUtils.ParameterToMultiMap("", "id", id));
            if (actual != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.OverviewReportBuilder.Client.ClientUtils.ParameterToMultiMap("", "actual", actual));
            }
            if (estimate != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.OverviewReportBuilder.Client.ClientUtils.ParameterToMultiMap("", "estimate", estimate));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.OverviewReportBuilder.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = FinancialHighlightsGetResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<StachTableResponse>("/financial-highlights", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("FinancialHighlightsGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Overview Profile 
        /// </summary>
        /// <exception cref="FactSet.SDK.OverviewReportBuilder.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Company ticker</param>
        /// <returns>ProfileResponse</returns>
        public ProfileResponse GetProfileProfile(string id)
        {
            var localVarResponse = GetProfileProfileWithHttpInfo(id);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Overview Profile 
        /// </summary>
        /// <exception cref="FactSet.SDK.OverviewReportBuilder.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Company ticker</param>
        /// <returns>ApiResponse of ProfileResponse</returns>
        public ApiResponse<ProfileResponse> GetProfileProfileWithHttpInfo(string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new FactSet.SDK.OverviewReportBuilder.Client.ApiException(400, "Missing required parameter 'id' when calling CompanyApi->GetProfileProfile");
            }

            FactSet.SDK.OverviewReportBuilder.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.OverviewReportBuilder.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.OverviewReportBuilder.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.OverviewReportBuilder.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.OverviewReportBuilder.Client.ClientUtils.ParameterToMultiMap("", "id", id));

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.OverviewReportBuilder.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = GetProfileProfileResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Get<
            ProfileResponse>("/profile", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetProfileProfile", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// Overview Profile 
        /// </summary>
        /// <exception cref="FactSet.SDK.OverviewReportBuilder.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Company ticker</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ProfileResponse</returns>
        public async System.Threading.Tasks.Task<ProfileResponse>GetProfileProfileAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await GetProfileProfileWithHttpInfoAsync(id, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Overview Profile 
        /// </summary>
        /// <exception cref="FactSet.SDK.OverviewReportBuilder.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Company ticker</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ProfileResponse)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<ProfileResponse>> GetProfileProfileWithHttpInfoAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new FactSet.SDK.OverviewReportBuilder.Client.ApiException(400, "Missing required parameter 'id' when calling CompanyApi->GetProfileProfile");
            }


            FactSet.SDK.OverviewReportBuilder.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.OverviewReportBuilder.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.OverviewReportBuilder.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.OverviewReportBuilder.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.OverviewReportBuilder.Client.ClientUtils.ParameterToMultiMap("", "id", id));

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.OverviewReportBuilder.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = GetProfileProfileResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ProfileResponse>("/profile", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetProfileProfile", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Key Stats 
        /// </summary>
        /// <exception cref="FactSet.SDK.OverviewReportBuilder.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Company ticker</param>
        /// <returns>KeyStatsResponse</returns>
        public KeyStatsResponse KeyStatsGet(string id)
        {
            var localVarResponse = KeyStatsGetWithHttpInfo(id);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Key Stats 
        /// </summary>
        /// <exception cref="FactSet.SDK.OverviewReportBuilder.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Company ticker</param>
        /// <returns>ApiResponse of KeyStatsResponse</returns>
        public ApiResponse<KeyStatsResponse> KeyStatsGetWithHttpInfo(string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new FactSet.SDK.OverviewReportBuilder.Client.ApiException(400, "Missing required parameter 'id' when calling CompanyApi->KeyStatsGet");
            }

            FactSet.SDK.OverviewReportBuilder.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.OverviewReportBuilder.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.OverviewReportBuilder.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.OverviewReportBuilder.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.OverviewReportBuilder.Client.ClientUtils.ParameterToMultiMap("", "id", id));

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.OverviewReportBuilder.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = KeyStatsGetResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Get<
            KeyStatsResponse>("/key-stats", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("KeyStatsGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// Key Stats 
        /// </summary>
        /// <exception cref="FactSet.SDK.OverviewReportBuilder.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Company ticker</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of KeyStatsResponse</returns>
        public async System.Threading.Tasks.Task<KeyStatsResponse>KeyStatsGetAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await KeyStatsGetWithHttpInfoAsync(id, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Key Stats 
        /// </summary>
        /// <exception cref="FactSet.SDK.OverviewReportBuilder.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Company ticker</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (KeyStatsResponse)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<KeyStatsResponse>> KeyStatsGetWithHttpInfoAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new FactSet.SDK.OverviewReportBuilder.Client.ApiException(400, "Missing required parameter 'id' when calling CompanyApi->KeyStatsGet");
            }


            FactSet.SDK.OverviewReportBuilder.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.OverviewReportBuilder.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.OverviewReportBuilder.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.OverviewReportBuilder.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.OverviewReportBuilder.Client.ClientUtils.ParameterToMultiMap("", "id", id));

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.OverviewReportBuilder.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = KeyStatsGetResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<KeyStatsResponse>("/key-stats", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("KeyStatsGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Peer List 
        /// </summary>
        /// <exception cref="FactSet.SDK.OverviewReportBuilder.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Company ticker</param>
        /// <param name="topn">Limits the number of peers returned. (optional)</param>
        /// <returns>PeerListResponse</returns>
        public PeerListResponse PeerListGet(string id, decimal? topn = default(decimal?))
        {
            var localVarResponse = PeerListGetWithHttpInfo(id, topn);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Peer List 
        /// </summary>
        /// <exception cref="FactSet.SDK.OverviewReportBuilder.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Company ticker</param>
        /// <param name="topn">Limits the number of peers returned. (optional)</param>
        /// <returns>ApiResponse of PeerListResponse</returns>
        public ApiResponse<PeerListResponse> PeerListGetWithHttpInfo(string id, decimal? topn = default(decimal?))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new FactSet.SDK.OverviewReportBuilder.Client.ApiException(400, "Missing required parameter 'id' when calling CompanyApi->PeerListGet");
            }

            FactSet.SDK.OverviewReportBuilder.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.OverviewReportBuilder.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.OverviewReportBuilder.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.OverviewReportBuilder.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.OverviewReportBuilder.Client.ClientUtils.ParameterToMultiMap("", "id", id));
            if (topn != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.OverviewReportBuilder.Client.ClientUtils.ParameterToMultiMap("", "topn", topn));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.OverviewReportBuilder.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = PeerListGetResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Get<
            PeerListResponse>("/peer-list", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PeerListGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// Peer List 
        /// </summary>
        /// <exception cref="FactSet.SDK.OverviewReportBuilder.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Company ticker</param>
        /// <param name="topn">Limits the number of peers returned. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PeerListResponse</returns>
        public async System.Threading.Tasks.Task<PeerListResponse>PeerListGetAsync(string id, decimal? topn = default(decimal?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await PeerListGetWithHttpInfoAsync(id, topn, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Peer List 
        /// </summary>
        /// <exception cref="FactSet.SDK.OverviewReportBuilder.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Company ticker</param>
        /// <param name="topn">Limits the number of peers returned. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PeerListResponse)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<PeerListResponse>> PeerListGetWithHttpInfoAsync(string id, decimal? topn = default(decimal?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new FactSet.SDK.OverviewReportBuilder.Client.ApiException(400, "Missing required parameter 'id' when calling CompanyApi->PeerListGet");
            }


            FactSet.SDK.OverviewReportBuilder.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.OverviewReportBuilder.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.OverviewReportBuilder.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.OverviewReportBuilder.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.OverviewReportBuilder.Client.ClientUtils.ParameterToMultiMap("", "id", id));
            if (topn != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.OverviewReportBuilder.Client.ClientUtils.ParameterToMultiMap("", "topn", topn));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.OverviewReportBuilder.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = PeerListGetResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<PeerListResponse>("/peer-list", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PeerListGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Transactions 
        /// </summary>
        /// <exception cref="FactSet.SDK.OverviewReportBuilder.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Company ticker</param>
        /// <param name="transactionType">Filters response to return only this type of transaction. If not specified, returns all transactions. Values are not case sensitive. (optional)</param>
        /// <param name="financingType">Filters response to return transactions of this financing type. If not specified, returns all transactions. Values are not case sensitive (optional)</param>
        /// <returns>StachTableResponse</returns>
        public StachTableResponse TransactionsGet(string id, string transactionType = default(string), string financingType = default(string))
        {
            var localVarResponse = TransactionsGetWithHttpInfo(id, transactionType, financingType);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Transactions 
        /// </summary>
        /// <exception cref="FactSet.SDK.OverviewReportBuilder.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Company ticker</param>
        /// <param name="transactionType">Filters response to return only this type of transaction. If not specified, returns all transactions. Values are not case sensitive. (optional)</param>
        /// <param name="financingType">Filters response to return transactions of this financing type. If not specified, returns all transactions. Values are not case sensitive (optional)</param>
        /// <returns>ApiResponse of StachTableResponse</returns>
        public ApiResponse<StachTableResponse> TransactionsGetWithHttpInfo(string id, string transactionType = default(string), string financingType = default(string))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new FactSet.SDK.OverviewReportBuilder.Client.ApiException(400, "Missing required parameter 'id' when calling CompanyApi->TransactionsGet");
            }

            FactSet.SDK.OverviewReportBuilder.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.OverviewReportBuilder.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.OverviewReportBuilder.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.OverviewReportBuilder.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.OverviewReportBuilder.Client.ClientUtils.ParameterToMultiMap("", "id", id));
            if (transactionType != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.OverviewReportBuilder.Client.ClientUtils.ParameterToMultiMap("", "transactionType", transactionType));
            }
            if (financingType != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.OverviewReportBuilder.Client.ClientUtils.ParameterToMultiMap("", "financingType", financingType));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.OverviewReportBuilder.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = TransactionsGetResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Get<
            StachTableResponse>("/transactions", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("TransactionsGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// Transactions 
        /// </summary>
        /// <exception cref="FactSet.SDK.OverviewReportBuilder.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Company ticker</param>
        /// <param name="transactionType">Filters response to return only this type of transaction. If not specified, returns all transactions. Values are not case sensitive. (optional)</param>
        /// <param name="financingType">Filters response to return transactions of this financing type. If not specified, returns all transactions. Values are not case sensitive (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of StachTableResponse</returns>
        public async System.Threading.Tasks.Task<StachTableResponse>TransactionsGetAsync(string id, string transactionType = default(string), string financingType = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await TransactionsGetWithHttpInfoAsync(id, transactionType, financingType, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Transactions 
        /// </summary>
        /// <exception cref="FactSet.SDK.OverviewReportBuilder.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Company ticker</param>
        /// <param name="transactionType">Filters response to return only this type of transaction. If not specified, returns all transactions. Values are not case sensitive. (optional)</param>
        /// <param name="financingType">Filters response to return transactions of this financing type. If not specified, returns all transactions. Values are not case sensitive (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (StachTableResponse)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<StachTableResponse>> TransactionsGetWithHttpInfoAsync(string id, string transactionType = default(string), string financingType = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new FactSet.SDK.OverviewReportBuilder.Client.ApiException(400, "Missing required parameter 'id' when calling CompanyApi->TransactionsGet");
            }


            FactSet.SDK.OverviewReportBuilder.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.OverviewReportBuilder.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.OverviewReportBuilder.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.OverviewReportBuilder.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.OverviewReportBuilder.Client.ClientUtils.ParameterToMultiMap("", "id", id));
            if (transactionType != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.OverviewReportBuilder.Client.ClientUtils.ParameterToMultiMap("", "transactionType", transactionType));
            }
            if (financingType != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.OverviewReportBuilder.Client.ClientUtils.ParameterToMultiMap("", "financingType", financingType));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.OverviewReportBuilder.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = TransactionsGetResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<StachTableResponse>("/transactions", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("TransactionsGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
