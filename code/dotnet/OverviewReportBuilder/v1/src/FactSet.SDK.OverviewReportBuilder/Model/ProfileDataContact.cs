/*
 * FactSet Overview Report Builder API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = FactSet.SDK.OverviewReportBuilder.Client.OpenAPIDateConverter;

namespace FactSet.SDK.OverviewReportBuilder.Model
{
    /// <summary>
    /// ProfileDataContact
    /// </summary>
    [DataContract(Name = "ProfileData_contact")]
    public partial class ProfileDataContact : IEquatable<ProfileDataContact>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ProfileDataContact" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ProfileDataContact() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ProfileDataContact" /> class.
        /// </summary>
        /// <param name="address">address (required).</param>
        /// <param name="city">city (required).</param>
        /// <param name="phone">phone (required).</param>
        /// <param name="stateProvince">stateProvince (required).</param>
        /// <param name="zip">zip (required).</param>
        /// <param name="country">country (required).</param>
        /// <param name="website">website (required).</param>
        /// <param name="email">email (required).</param>
        /// <param name="people">people.</param>
        public ProfileDataContact(ProfileDataBusinessIndustry address, ProfileDataBusinessIndustry city, ProfileDataBusinessIndustry phone, ProfileDataBusinessIndustry stateProvince, ProfileDataBusinessIndustry zip, ProfileDataBusinessIndustry country, ProfileDataBusinessIndustry website, ProfileDataBusinessIndustry email,List<ProfileDataContactPeople> people = default(List<ProfileDataContactPeople>))
        {
            // to ensure "address" is required (not null)
            if (address == null) {
                throw new ArgumentNullException("address is a required property for ProfileDataContact and cannot be null");
            }
            this.Address = address;
            // to ensure "city" is required (not null)
            if (city == null) {
                throw new ArgumentNullException("city is a required property for ProfileDataContact and cannot be null");
            }
            this.City = city;
            // to ensure "phone" is required (not null)
            if (phone == null) {
                throw new ArgumentNullException("phone is a required property for ProfileDataContact and cannot be null");
            }
            this.Phone = phone;
            // to ensure "stateProvince" is required (not null)
            if (stateProvince == null) {
                throw new ArgumentNullException("stateProvince is a required property for ProfileDataContact and cannot be null");
            }
            this.StateProvince = stateProvince;
            // to ensure "zip" is required (not null)
            if (zip == null) {
                throw new ArgumentNullException("zip is a required property for ProfileDataContact and cannot be null");
            }
            this.Zip = zip;
            // to ensure "country" is required (not null)
            if (country == null) {
                throw new ArgumentNullException("country is a required property for ProfileDataContact and cannot be null");
            }
            this.Country = country;
            // to ensure "website" is required (not null)
            if (website == null) {
                throw new ArgumentNullException("website is a required property for ProfileDataContact and cannot be null");
            }
            this.Website = website;
            // to ensure "email" is required (not null)
            if (email == null) {
                throw new ArgumentNullException("email is a required property for ProfileDataContact and cannot be null");
            }
            this.Email = email;
            this.People = people;
        }

        /// <summary>
        /// Gets or Sets Address
        /// </summary>
        [DataMember(Name = "address", IsRequired = true, EmitDefaultValue = false)]
        public ProfileDataBusinessIndustry Address { get; set; }

        /// <summary>
        /// Gets or Sets City
        /// </summary>
        [DataMember(Name = "city", IsRequired = true, EmitDefaultValue = false)]
        public ProfileDataBusinessIndustry City { get; set; }

        /// <summary>
        /// Gets or Sets Phone
        /// </summary>
        [DataMember(Name = "phone", IsRequired = true, EmitDefaultValue = false)]
        public ProfileDataBusinessIndustry Phone { get; set; }

        /// <summary>
        /// Gets or Sets StateProvince
        /// </summary>
        [DataMember(Name = "stateProvince", IsRequired = true, EmitDefaultValue = false)]
        public ProfileDataBusinessIndustry StateProvince { get; set; }

        /// <summary>
        /// Gets or Sets Zip
        /// </summary>
        [DataMember(Name = "zip", IsRequired = true, EmitDefaultValue = false)]
        public ProfileDataBusinessIndustry Zip { get; set; }

        /// <summary>
        /// Gets or Sets Country
        /// </summary>
        [DataMember(Name = "country", IsRequired = true, EmitDefaultValue = false)]
        public ProfileDataBusinessIndustry Country { get; set; }

        /// <summary>
        /// Gets or Sets Website
        /// </summary>
        [DataMember(Name = "website", IsRequired = true, EmitDefaultValue = false)]
        public ProfileDataBusinessIndustry Website { get; set; }

        /// <summary>
        /// Gets or Sets Email
        /// </summary>
        [DataMember(Name = "email", IsRequired = true, EmitDefaultValue = false)]
        public ProfileDataBusinessIndustry Email { get; set; }

        /// <summary>
        /// Gets or Sets People
        /// </summary>
        [DataMember(Name = "people", EmitDefaultValue = false)]
        public List<ProfileDataContactPeople> People { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ProfileDataContact {\n");
            sb.Append("  Address: ").Append(Address).Append("\n");
            sb.Append("  City: ").Append(City).Append("\n");
            sb.Append("  Phone: ").Append(Phone).Append("\n");
            sb.Append("  StateProvince: ").Append(StateProvince).Append("\n");
            sb.Append("  Zip: ").Append(Zip).Append("\n");
            sb.Append("  Country: ").Append(Country).Append("\n");
            sb.Append("  Website: ").Append(Website).Append("\n");
            sb.Append("  Email: ").Append(Email).Append("\n");
            sb.Append("  People: ").Append(People).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ProfileDataContact);
        }

        /// <summary>
        /// Returns true if ProfileDataContact instances are equal
        /// </summary>
        /// <param name="input">Instance of ProfileDataContact to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ProfileDataContact input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Address == input.Address ||
                    (this.Address != null &&
                    this.Address.Equals(input.Address))
                ) && 
                (
                    this.City == input.City ||
                    (this.City != null &&
                    this.City.Equals(input.City))
                ) && 
                (
                    this.Phone == input.Phone ||
                    (this.Phone != null &&
                    this.Phone.Equals(input.Phone))
                ) && 
                (
                    this.StateProvince == input.StateProvince ||
                    (this.StateProvince != null &&
                    this.StateProvince.Equals(input.StateProvince))
                ) && 
                (
                    this.Zip == input.Zip ||
                    (this.Zip != null &&
                    this.Zip.Equals(input.Zip))
                ) && 
                (
                    this.Country == input.Country ||
                    (this.Country != null &&
                    this.Country.Equals(input.Country))
                ) && 
                (
                    this.Website == input.Website ||
                    (this.Website != null &&
                    this.Website.Equals(input.Website))
                ) && 
                (
                    this.Email == input.Email ||
                    (this.Email != null &&
                    this.Email.Equals(input.Email))
                ) && 
                (
                    this.People == input.People ||
                    this.People != null &&
                    input.People != null &&
                    this.People.SequenceEqual(input.People)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Address != null)
                {
                    hashCode = (hashCode * 59) + this.Address.GetHashCode();
                }
                if (this.City != null)
                {
                    hashCode = (hashCode * 59) + this.City.GetHashCode();
                }
                if (this.Phone != null)
                {
                    hashCode = (hashCode * 59) + this.Phone.GetHashCode();
                }
                if (this.StateProvince != null)
                {
                    hashCode = (hashCode * 59) + this.StateProvince.GetHashCode();
                }
                if (this.Zip != null)
                {
                    hashCode = (hashCode * 59) + this.Zip.GetHashCode();
                }
                if (this.Country != null)
                {
                    hashCode = (hashCode * 59) + this.Country.GetHashCode();
                }
                if (this.Website != null)
                {
                    hashCode = (hashCode * 59) + this.Website.GetHashCode();
                }
                if (this.Email != null)
                {
                    hashCode = (hashCode * 59) + this.Email.GetHashCode();
                }
                if (this.People != null)
                {
                    hashCode = (hashCode * 59) + this.People.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
