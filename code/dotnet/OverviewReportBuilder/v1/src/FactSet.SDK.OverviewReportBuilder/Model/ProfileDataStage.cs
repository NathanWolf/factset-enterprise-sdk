/*
 * FactSet Overview Report Builder API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = FactSet.SDK.OverviewReportBuilder.Client.OpenAPIDateConverter;

namespace FactSet.SDK.OverviewReportBuilder.Model
{
    /// <summary>
    /// ProfileDataStage
    /// </summary>
    [DataContract(Name = "ProfileData_stage")]
    public partial class ProfileDataStage : IEquatable<ProfileDataStage>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ProfileDataStage" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ProfileDataStage() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ProfileDataStage" /> class.
        /// </summary>
        /// <param name="exchangePrimary">exchangePrimary (required).</param>
        /// <param name="tradeDateRange">tradeDateRange (required).</param>
        /// <param name="foundedYear">foundedYear (required).</param>
        /// <param name="pevcBacking">pevcBacking (required).</param>
        /// <param name="pevcLatestPostMoneyValuation">pevcLatestPostMoneyValuation.</param>
        /// <param name="peActiveFirmNumber">peActiveFirmNumber.</param>
        /// <param name="peActiveInvestmentNumber">peActiveInvestmentNumber.</param>
        /// <param name="peLastInvestmentDate">peLastInvestmentDate.</param>
        /// <param name="peActiveFirms">peActiveFirms.</param>
        /// <param name="peActiveAcqDate">peActiveAcqDate.</param>
        /// <param name="peActiveAcqAmt">peActiveAcqAmt.</param>
        /// <param name="vcLastRound">vcLastRound.</param>
        /// <param name="vcLastRoundAmt">vcLastRoundAmt.</param>
        /// <param name="vcLastRoundInvestorNumber">vcLastRoundInvestorNumber.</param>
        /// <param name="vcLastRoundDate">vcLastRoundDate.</param>
        /// <param name="vcTotalEstRaised">vcTotalEstRaised.</param>
        /// <param name="crunchbaseRank">crunchbaseRank.</param>
        public ProfileDataStage(ProfileDataBusinessIndustry exchangePrimary = default(ProfileDataBusinessIndustry), ProfileDataStageTradeDateRange tradeDateRange = default(ProfileDataStageTradeDateRange), ProfileDataBusinessIndustry foundedYear = default(ProfileDataBusinessIndustry), ProfileDataBusinessIndustry pevcBacking = default(ProfileDataBusinessIndustry), ProfileDataSizeEv pevcLatestPostMoneyValuation = default(ProfileDataSizeEv), ProfileDataStagePeActiveFirmNumber peActiveFirmNumber = default(ProfileDataStagePeActiveFirmNumber), ProfileDataStagePeActiveFirmNumber peActiveInvestmentNumber = default(ProfileDataStagePeActiveFirmNumber), ProfileDataBusinessIndustry peLastInvestmentDate = default(ProfileDataBusinessIndustry), List<ProfileDataStagePeActiveFirms> peActiveFirms = default(List<ProfileDataStagePeActiveFirms>), ProfileDataBusinessIndustry peActiveAcqDate = default(ProfileDataBusinessIndustry), ProfileDataSizeEv peActiveAcqAmt = default(ProfileDataSizeEv), ProfileDataBusinessIndustry vcLastRound = default(ProfileDataBusinessIndustry), ProfileDataSizeEv vcLastRoundAmt = default(ProfileDataSizeEv), ProfileDataStagePeActiveFirmNumber vcLastRoundInvestorNumber = default(ProfileDataStagePeActiveFirmNumber), ProfileDataBusinessIndustry vcLastRoundDate = default(ProfileDataBusinessIndustry), ProfileDataSizeEv vcTotalEstRaised = default(ProfileDataSizeEv), ProfileDataStageCrunchbaseRank crunchbaseRank = default(ProfileDataStageCrunchbaseRank))
        {
            // to ensure "exchangePrimary" is required (not null)
            if (exchangePrimary == null) {
                throw new ArgumentNullException("exchangePrimary is a required property for ProfileDataStage and cannot be null");
            }
            this.ExchangePrimary = exchangePrimary;
            // to ensure "tradeDateRange" is required (not null)
            if (tradeDateRange == null) {
                throw new ArgumentNullException("tradeDateRange is a required property for ProfileDataStage and cannot be null");
            }
            this.TradeDateRange = tradeDateRange;
            // to ensure "foundedYear" is required (not null)
            if (foundedYear == null) {
                throw new ArgumentNullException("foundedYear is a required property for ProfileDataStage and cannot be null");
            }
            this.FoundedYear = foundedYear;
            // to ensure "pevcBacking" is required (not null)
            if (pevcBacking == null) {
                throw new ArgumentNullException("pevcBacking is a required property for ProfileDataStage and cannot be null");
            }
            this.PevcBacking = pevcBacking;
            this.PevcLatestPostMoneyValuation = pevcLatestPostMoneyValuation;
            this.PeActiveFirmNumber = peActiveFirmNumber;
            this.PeActiveInvestmentNumber = peActiveInvestmentNumber;
            this.PeLastInvestmentDate = peLastInvestmentDate;
            this.PeActiveFirms = peActiveFirms;
            this.PeActiveAcqDate = peActiveAcqDate;
            this.PeActiveAcqAmt = peActiveAcqAmt;
            this.VcLastRound = vcLastRound;
            this.VcLastRoundAmt = vcLastRoundAmt;
            this.VcLastRoundInvestorNumber = vcLastRoundInvestorNumber;
            this.VcLastRoundDate = vcLastRoundDate;
            this.VcTotalEstRaised = vcTotalEstRaised;
            this.CrunchbaseRank = crunchbaseRank;
        }

        /// <summary>
        /// Gets or Sets ExchangePrimary
        /// </summary>
        [DataMember(Name = "exchangePrimary", IsRequired = true, EmitDefaultValue = false)]
        public ProfileDataBusinessIndustry ExchangePrimary { get; set; }

        /// <summary>
        /// Gets or Sets TradeDateRange
        /// </summary>
        [DataMember(Name = "tradeDateRange", IsRequired = true, EmitDefaultValue = false)]
        public ProfileDataStageTradeDateRange TradeDateRange { get; set; }

        /// <summary>
        /// Gets or Sets FoundedYear
        /// </summary>
        [DataMember(Name = "foundedYear", IsRequired = true, EmitDefaultValue = false)]
        public ProfileDataBusinessIndustry FoundedYear { get; set; }

        /// <summary>
        /// Gets or Sets PevcBacking
        /// </summary>
        [DataMember(Name = "pevcBacking", IsRequired = true, EmitDefaultValue = false)]
        public ProfileDataBusinessIndustry PevcBacking { get; set; }

        /// <summary>
        /// Gets or Sets PevcLatestPostMoneyValuation
        /// </summary>
        [DataMember(Name = "pevcLatestPostMoneyValuation", EmitDefaultValue = false)]
        public ProfileDataSizeEv PevcLatestPostMoneyValuation { get; set; }

        /// <summary>
        /// Gets or Sets PeActiveFirmNumber
        /// </summary>
        [DataMember(Name = "peActiveFirmNumber", EmitDefaultValue = false)]
        public ProfileDataStagePeActiveFirmNumber PeActiveFirmNumber { get; set; }

        /// <summary>
        /// Gets or Sets PeActiveInvestmentNumber
        /// </summary>
        [DataMember(Name = "peActiveInvestmentNumber", EmitDefaultValue = false)]
        public ProfileDataStagePeActiveFirmNumber PeActiveInvestmentNumber { get; set; }

        /// <summary>
        /// Gets or Sets PeLastInvestmentDate
        /// </summary>
        [DataMember(Name = "peLastInvestmentDate", EmitDefaultValue = false)]
        public ProfileDataBusinessIndustry PeLastInvestmentDate { get; set; }

        /// <summary>
        /// Gets or Sets PeActiveFirms
        /// </summary>
        [DataMember(Name = "peActiveFirms", EmitDefaultValue = false)]
        public List<ProfileDataStagePeActiveFirms> PeActiveFirms { get; set; }

        /// <summary>
        /// Gets or Sets PeActiveAcqDate
        /// </summary>
        [DataMember(Name = "peActiveAcqDate", EmitDefaultValue = false)]
        public ProfileDataBusinessIndustry PeActiveAcqDate { get; set; }

        /// <summary>
        /// Gets or Sets PeActiveAcqAmt
        /// </summary>
        [DataMember(Name = "peActiveAcqAmt", EmitDefaultValue = false)]
        public ProfileDataSizeEv PeActiveAcqAmt { get; set; }

        /// <summary>
        /// Gets or Sets VcLastRound
        /// </summary>
        [DataMember(Name = "vcLastRound", EmitDefaultValue = false)]
        public ProfileDataBusinessIndustry VcLastRound { get; set; }

        /// <summary>
        /// Gets or Sets VcLastRoundAmt
        /// </summary>
        [DataMember(Name = "vcLastRoundAmt", EmitDefaultValue = false)]
        public ProfileDataSizeEv VcLastRoundAmt { get; set; }

        /// <summary>
        /// Gets or Sets VcLastRoundInvestorNumber
        /// </summary>
        [DataMember(Name = "vcLastRoundInvestorNumber", EmitDefaultValue = false)]
        public ProfileDataStagePeActiveFirmNumber VcLastRoundInvestorNumber { get; set; }

        /// <summary>
        /// Gets or Sets VcLastRoundDate
        /// </summary>
        [DataMember(Name = "vcLastRoundDate", EmitDefaultValue = false)]
        public ProfileDataBusinessIndustry VcLastRoundDate { get; set; }

        /// <summary>
        /// Gets or Sets VcTotalEstRaised
        /// </summary>
        [DataMember(Name = "vcTotalEstRaised", EmitDefaultValue = false)]
        public ProfileDataSizeEv VcTotalEstRaised { get; set; }

        /// <summary>
        /// Gets or Sets CrunchbaseRank
        /// </summary>
        [DataMember(Name = "crunchbaseRank", EmitDefaultValue = false)]
        public ProfileDataStageCrunchbaseRank CrunchbaseRank { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ProfileDataStage {\n");
            sb.Append("  ExchangePrimary: ").Append(ExchangePrimary).Append("\n");
            sb.Append("  TradeDateRange: ").Append(TradeDateRange).Append("\n");
            sb.Append("  FoundedYear: ").Append(FoundedYear).Append("\n");
            sb.Append("  PevcBacking: ").Append(PevcBacking).Append("\n");
            sb.Append("  PevcLatestPostMoneyValuation: ").Append(PevcLatestPostMoneyValuation).Append("\n");
            sb.Append("  PeActiveFirmNumber: ").Append(PeActiveFirmNumber).Append("\n");
            sb.Append("  PeActiveInvestmentNumber: ").Append(PeActiveInvestmentNumber).Append("\n");
            sb.Append("  PeLastInvestmentDate: ").Append(PeLastInvestmentDate).Append("\n");
            sb.Append("  PeActiveFirms: ").Append(PeActiveFirms).Append("\n");
            sb.Append("  PeActiveAcqDate: ").Append(PeActiveAcqDate).Append("\n");
            sb.Append("  PeActiveAcqAmt: ").Append(PeActiveAcqAmt).Append("\n");
            sb.Append("  VcLastRound: ").Append(VcLastRound).Append("\n");
            sb.Append("  VcLastRoundAmt: ").Append(VcLastRoundAmt).Append("\n");
            sb.Append("  VcLastRoundInvestorNumber: ").Append(VcLastRoundInvestorNumber).Append("\n");
            sb.Append("  VcLastRoundDate: ").Append(VcLastRoundDate).Append("\n");
            sb.Append("  VcTotalEstRaised: ").Append(VcTotalEstRaised).Append("\n");
            sb.Append("  CrunchbaseRank: ").Append(CrunchbaseRank).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ProfileDataStage);
        }

        /// <summary>
        /// Returns true if ProfileDataStage instances are equal
        /// </summary>
        /// <param name="input">Instance of ProfileDataStage to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ProfileDataStage input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.ExchangePrimary == input.ExchangePrimary ||
                    (this.ExchangePrimary != null &&
                    this.ExchangePrimary.Equals(input.ExchangePrimary))
                ) && 
                (
                    this.TradeDateRange == input.TradeDateRange ||
                    (this.TradeDateRange != null &&
                    this.TradeDateRange.Equals(input.TradeDateRange))
                ) && 
                (
                    this.FoundedYear == input.FoundedYear ||
                    (this.FoundedYear != null &&
                    this.FoundedYear.Equals(input.FoundedYear))
                ) && 
                (
                    this.PevcBacking == input.PevcBacking ||
                    (this.PevcBacking != null &&
                    this.PevcBacking.Equals(input.PevcBacking))
                ) && 
                (
                    this.PevcLatestPostMoneyValuation == input.PevcLatestPostMoneyValuation ||
                    (this.PevcLatestPostMoneyValuation != null &&
                    this.PevcLatestPostMoneyValuation.Equals(input.PevcLatestPostMoneyValuation))
                ) && 
                (
                    this.PeActiveFirmNumber == input.PeActiveFirmNumber ||
                    (this.PeActiveFirmNumber != null &&
                    this.PeActiveFirmNumber.Equals(input.PeActiveFirmNumber))
                ) && 
                (
                    this.PeActiveInvestmentNumber == input.PeActiveInvestmentNumber ||
                    (this.PeActiveInvestmentNumber != null &&
                    this.PeActiveInvestmentNumber.Equals(input.PeActiveInvestmentNumber))
                ) && 
                (
                    this.PeLastInvestmentDate == input.PeLastInvestmentDate ||
                    (this.PeLastInvestmentDate != null &&
                    this.PeLastInvestmentDate.Equals(input.PeLastInvestmentDate))
                ) && 
                (
                    this.PeActiveFirms == input.PeActiveFirms ||
                    this.PeActiveFirms != null &&
                    input.PeActiveFirms != null &&
                    this.PeActiveFirms.SequenceEqual(input.PeActiveFirms)
                ) && 
                (
                    this.PeActiveAcqDate == input.PeActiveAcqDate ||
                    (this.PeActiveAcqDate != null &&
                    this.PeActiveAcqDate.Equals(input.PeActiveAcqDate))
                ) && 
                (
                    this.PeActiveAcqAmt == input.PeActiveAcqAmt ||
                    (this.PeActiveAcqAmt != null &&
                    this.PeActiveAcqAmt.Equals(input.PeActiveAcqAmt))
                ) && 
                (
                    this.VcLastRound == input.VcLastRound ||
                    (this.VcLastRound != null &&
                    this.VcLastRound.Equals(input.VcLastRound))
                ) && 
                (
                    this.VcLastRoundAmt == input.VcLastRoundAmt ||
                    (this.VcLastRoundAmt != null &&
                    this.VcLastRoundAmt.Equals(input.VcLastRoundAmt))
                ) && 
                (
                    this.VcLastRoundInvestorNumber == input.VcLastRoundInvestorNumber ||
                    (this.VcLastRoundInvestorNumber != null &&
                    this.VcLastRoundInvestorNumber.Equals(input.VcLastRoundInvestorNumber))
                ) && 
                (
                    this.VcLastRoundDate == input.VcLastRoundDate ||
                    (this.VcLastRoundDate != null &&
                    this.VcLastRoundDate.Equals(input.VcLastRoundDate))
                ) && 
                (
                    this.VcTotalEstRaised == input.VcTotalEstRaised ||
                    (this.VcTotalEstRaised != null &&
                    this.VcTotalEstRaised.Equals(input.VcTotalEstRaised))
                ) && 
                (
                    this.CrunchbaseRank == input.CrunchbaseRank ||
                    (this.CrunchbaseRank != null &&
                    this.CrunchbaseRank.Equals(input.CrunchbaseRank))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ExchangePrimary != null)
                {
                    hashCode = (hashCode * 59) + this.ExchangePrimary.GetHashCode();
                }
                if (this.TradeDateRange != null)
                {
                    hashCode = (hashCode * 59) + this.TradeDateRange.GetHashCode();
                }
                if (this.FoundedYear != null)
                {
                    hashCode = (hashCode * 59) + this.FoundedYear.GetHashCode();
                }
                if (this.PevcBacking != null)
                {
                    hashCode = (hashCode * 59) + this.PevcBacking.GetHashCode();
                }
                if (this.PevcLatestPostMoneyValuation != null)
                {
                    hashCode = (hashCode * 59) + this.PevcLatestPostMoneyValuation.GetHashCode();
                }
                if (this.PeActiveFirmNumber != null)
                {
                    hashCode = (hashCode * 59) + this.PeActiveFirmNumber.GetHashCode();
                }
                if (this.PeActiveInvestmentNumber != null)
                {
                    hashCode = (hashCode * 59) + this.PeActiveInvestmentNumber.GetHashCode();
                }
                if (this.PeLastInvestmentDate != null)
                {
                    hashCode = (hashCode * 59) + this.PeLastInvestmentDate.GetHashCode();
                }
                if (this.PeActiveFirms != null)
                {
                    hashCode = (hashCode * 59) + this.PeActiveFirms.GetHashCode();
                }
                if (this.PeActiveAcqDate != null)
                {
                    hashCode = (hashCode * 59) + this.PeActiveAcqDate.GetHashCode();
                }
                if (this.PeActiveAcqAmt != null)
                {
                    hashCode = (hashCode * 59) + this.PeActiveAcqAmt.GetHashCode();
                }
                if (this.VcLastRound != null)
                {
                    hashCode = (hashCode * 59) + this.VcLastRound.GetHashCode();
                }
                if (this.VcLastRoundAmt != null)
                {
                    hashCode = (hashCode * 59) + this.VcLastRoundAmt.GetHashCode();
                }
                if (this.VcLastRoundInvestorNumber != null)
                {
                    hashCode = (hashCode * 59) + this.VcLastRoundInvestorNumber.GetHashCode();
                }
                if (this.VcLastRoundDate != null)
                {
                    hashCode = (hashCode * 59) + this.VcLastRoundDate.GetHashCode();
                }
                if (this.VcTotalEstRaised != null)
                {
                    hashCode = (hashCode * 59) + this.VcTotalEstRaised.GetHashCode();
                }
                if (this.CrunchbaseRank != null)
                {
                    hashCode = (hashCode * 59) + this.CrunchbaseRank.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
