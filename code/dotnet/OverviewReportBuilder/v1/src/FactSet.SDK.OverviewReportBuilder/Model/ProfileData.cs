/*
 * FactSet Overview Report Builder API
 *
 * Get relevant industry-specific data for high level analysis of public and private companies
 *
 * The version of the OpenAPI document: 1.2.0
 * Contact: api@factset.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = FactSet.SDK.OverviewReportBuilder.Client.OpenAPIDateConverter;

namespace FactSet.SDK.OverviewReportBuilder.Model
{
    /// <summary>
    /// ProfileData
    /// </summary>
    [DataContract(Name = "ProfileData")]
    public partial class ProfileData : IEquatable<ProfileData>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ProfileData" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ProfileData() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ProfileData" /> class.
        /// </summary>
        /// <param name="business">business (required).</param>
        /// <param name="contact">contact (required).</param>
        /// <param name="size">size (required).</param>
        /// <param name="stage">stage (required).</param>
        /// <param name="meta">meta.</param>
        public ProfileData(ProfileDataBusiness business, ProfileDataContact contact, ProfileDataSize size, ProfileDataStage stage,KeyStatsEntityObjectMeta meta = default(KeyStatsEntityObjectMeta))
        {
            // to ensure "business" is required (not null)
            if (business == null) {
                throw new ArgumentNullException("business is a required property for ProfileData and cannot be null");
            }
            this.Business = business;
            // to ensure "contact" is required (not null)
            if (contact == null) {
                throw new ArgumentNullException("contact is a required property for ProfileData and cannot be null");
            }
            this.Contact = contact;
            // to ensure "size" is required (not null)
            if (size == null) {
                throw new ArgumentNullException("size is a required property for ProfileData and cannot be null");
            }
            this.Size = size;
            // to ensure "stage" is required (not null)
            if (stage == null) {
                throw new ArgumentNullException("stage is a required property for ProfileData and cannot be null");
            }
            this.Stage = stage;
            this.Meta = meta;
        }

        /// <summary>
        /// Gets or Sets Business
        /// </summary>
        [DataMember(Name = "business", IsRequired = true, EmitDefaultValue = false)]
        public ProfileDataBusiness Business { get; set; }

        /// <summary>
        /// Gets or Sets Contact
        /// </summary>
        [DataMember(Name = "contact", IsRequired = true, EmitDefaultValue = false)]
        public ProfileDataContact Contact { get; set; }

        /// <summary>
        /// Gets or Sets Size
        /// </summary>
        [DataMember(Name = "size", IsRequired = true, EmitDefaultValue = false)]
        public ProfileDataSize Size { get; set; }

        /// <summary>
        /// Gets or Sets Stage
        /// </summary>
        [DataMember(Name = "stage", IsRequired = true, EmitDefaultValue = false)]
        public ProfileDataStage Stage { get; set; }

        /// <summary>
        /// Gets or Sets Meta
        /// </summary>
        [DataMember(Name = "meta", EmitDefaultValue = false)]
        public KeyStatsEntityObjectMeta Meta { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ProfileData {\n");
            sb.Append("  Business: ").Append(Business).Append("\n");
            sb.Append("  Contact: ").Append(Contact).Append("\n");
            sb.Append("  Size: ").Append(Size).Append("\n");
            sb.Append("  Stage: ").Append(Stage).Append("\n");
            sb.Append("  Meta: ").Append(Meta).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ProfileData);
        }

        /// <summary>
        /// Returns true if ProfileData instances are equal
        /// </summary>
        /// <param name="input">Instance of ProfileData to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ProfileData input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Business == input.Business ||
                    (this.Business != null &&
                    this.Business.Equals(input.Business))
                ) && 
                (
                    this.Contact == input.Contact ||
                    (this.Contact != null &&
                    this.Contact.Equals(input.Contact))
                ) && 
                (
                    this.Size == input.Size ||
                    (this.Size != null &&
                    this.Size.Equals(input.Size))
                ) && 
                (
                    this.Stage == input.Stage ||
                    (this.Stage != null &&
                    this.Stage.Equals(input.Stage))
                ) && 
                (
                    this.Meta == input.Meta ||
                    (this.Meta != null &&
                    this.Meta.Equals(input.Meta))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Business != null)
                {
                    hashCode = (hashCode * 59) + this.Business.GetHashCode();
                }
                if (this.Contact != null)
                {
                    hashCode = (hashCode * 59) + this.Contact.GetHashCode();
                }
                if (this.Size != null)
                {
                    hashCode = (hashCode * 59) + this.Size.GetHashCode();
                }
                if (this.Stage != null)
                {
                    hashCode = (hashCode * 59) + this.Stage.GetHashCode();
                }
                if (this.Meta != null)
                {
                    hashCode = (hashCode * 59) + this.Meta.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
