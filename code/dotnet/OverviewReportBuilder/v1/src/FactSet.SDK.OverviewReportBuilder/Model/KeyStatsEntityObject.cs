/*
 * FactSet Overview Report Builder API
 *
 * Get relevant industry-specific data for high level analysis of public and private companies
 *
 * The version of the OpenAPI document: 1.2.0
 * Contact: api@factset.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = FactSet.SDK.OverviewReportBuilder.Client.OpenAPIDateConverter;

namespace FactSet.SDK.OverviewReportBuilder.Model
{
    /// <summary>
    /// Key Statistics for the provided entity
    /// </summary>
    [DataContract(Name = "KeyStatsEntityObject")]
    public partial class KeyStatsEntityObject : IEquatable<KeyStatsEntityObject>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="KeyStatsEntityObject" /> class.
        /// </summary>
        /// <param name="range52Week">range52Week.</param>
        /// <param name="averageDailyVol">averageDailyVol.</param>
        /// <param name="basicShares">basicShares.</param>
        /// <param name="marketCap">marketCap.</param>
        /// <param name="dividendYield">dividendYield.</param>
        /// <param name="firstDate">firstDate.</param>
        /// <param name="dilutedShares">dilutedShares.</param>
        /// <param name="dilutedMarketCap">dilutedMarketCap.</param>
        /// <param name="enterpriseValue">enterpriseValue.</param>
        /// <param name="wacc">wacc.</param>
        /// <param name="_float">_float.</param>
        /// <param name="institutional">institutional.</param>
        /// <param name="top10InstitutionalHolders">top10InstitutionalHolders.</param>
        /// <param name="brokerContributors">brokerContributors.</param>
        /// <param name="averageRating">averageRating.</param>
        /// <param name="targetPrice">targetPrice.</param>
        /// <param name="ltGrowthRate">ltGrowthRate.</param>
        /// <param name="revenue">revenue.</param>
        /// <param name="employees">employees.</param>
        /// <param name="fundingRounds">fundingRounds.</param>
        /// <param name="estimatedVcRaised">estimatedVcRaised.</param>
        /// <param name="lastFunding">lastFunding.</param>
        /// <param name="firstFunding">firstFunding.</param>
        /// <param name="latestPostMoneyValuation">latestPostMoneyValuation.</param>
        /// <param name="activeInvestors">activeInvestors.</param>
        /// <param name="totalInvestors">totalInvestors.</param>
        /// <param name="premiums">premiums.</param>
        /// <param name="grossPremiums">grossPremiums.</param>
        /// <param name="grossAssets">grossAssets.</param>
        /// <param name="totalDeposits">totalDeposits.</param>
        /// <param name="branches">branches.</param>
        /// <param name="netInterestIncome">netInterestIncome.</param>
        /// <param name="meta">meta.</param>
        public KeyStatsEntityObject(KeyStatsEntityObjectRange52Week range52Week = default(KeyStatsEntityObjectRange52Week), KeyStatsEntityObjectAverageDailyVol averageDailyVol = default(KeyStatsEntityObjectAverageDailyVol), KeyStatsEntityObjectBasicShares basicShares = default(KeyStatsEntityObjectBasicShares), KeyStatsEntityObjectMarketCap marketCap = default(KeyStatsEntityObjectMarketCap), KeyStatsEntityObjectDividendYield dividendYield = default(KeyStatsEntityObjectDividendYield), KeyStatsEntityObjectFirstDate firstDate = default(KeyStatsEntityObjectFirstDate), KeyStatsEntityObjectDilutedShares dilutedShares = default(KeyStatsEntityObjectDilutedShares), KeyStatsEntityObjectDilutedMarketCap dilutedMarketCap = default(KeyStatsEntityObjectDilutedMarketCap), KeyStatsEntityObjectEnterpriseValue enterpriseValue = default(KeyStatsEntityObjectEnterpriseValue), KeyStatsEntityObjectWacc wacc = default(KeyStatsEntityObjectWacc), KeyStatsEntityObjectFloat _float = default(KeyStatsEntityObjectFloat), KeyStatsEntityObjectInstitutional institutional = default(KeyStatsEntityObjectInstitutional), KeyStatsEntityObjectTop10InstitutionalHolders top10InstitutionalHolders = default(KeyStatsEntityObjectTop10InstitutionalHolders), KeyStatsEntityObjectBrokerContributors brokerContributors = default(KeyStatsEntityObjectBrokerContributors), KeyStatsEntityObjectAverageRating averageRating = default(KeyStatsEntityObjectAverageRating), KeyStatsEntityObjectTargetPrice targetPrice = default(KeyStatsEntityObjectTargetPrice), KeyStatsEntityObjectLtGrowthRate ltGrowthRate = default(KeyStatsEntityObjectLtGrowthRate), KeyStatsEntityObjectRevenue revenue = default(KeyStatsEntityObjectRevenue), KeyStatsEntityObjectEmployees employees = default(KeyStatsEntityObjectEmployees), KeyStatsEntityObjectFundingRounds fundingRounds = default(KeyStatsEntityObjectFundingRounds), KeyStatsEntityObjectEstimatedVcRaised estimatedVcRaised = default(KeyStatsEntityObjectEstimatedVcRaised), KeyStatsEntityObjectLastFunding lastFunding = default(KeyStatsEntityObjectLastFunding), KeyStatsEntityObjectFirstFunding firstFunding = default(KeyStatsEntityObjectFirstFunding), KeyStatsEntityObjectLatestPostMoneyValuation latestPostMoneyValuation = default(KeyStatsEntityObjectLatestPostMoneyValuation), KeyStatsEntityObjectActiveInvestors activeInvestors = default(KeyStatsEntityObjectActiveInvestors), KeyStatsEntityObjectTotalInvestors totalInvestors = default(KeyStatsEntityObjectTotalInvestors), KeyStatsEntityObjectPremiums premiums = default(KeyStatsEntityObjectPremiums), KeyStatsEntityObjectGrossPremiums grossPremiums = default(KeyStatsEntityObjectGrossPremiums), KeyStatsEntityObjectGrossAssets grossAssets = default(KeyStatsEntityObjectGrossAssets), KeyStatsEntityObjectTotalDeposits totalDeposits = default(KeyStatsEntityObjectTotalDeposits), KeyStatsEntityObjectBranches branches = default(KeyStatsEntityObjectBranches), KeyStatsEntityObjectNetInterestIncome netInterestIncome = default(KeyStatsEntityObjectNetInterestIncome), KeyStatsEntityObjectMeta meta = default(KeyStatsEntityObjectMeta))
        {
            this.Range52Week = range52Week;
            this.AverageDailyVol = averageDailyVol;
            this.BasicShares = basicShares;
            this.MarketCap = marketCap;
            this.DividendYield = dividendYield;
            this.FirstDate = firstDate;
            this.DilutedShares = dilutedShares;
            this.DilutedMarketCap = dilutedMarketCap;
            this.EnterpriseValue = enterpriseValue;
            this.Wacc = wacc;
            this.Float = _float;
            this.Institutional = institutional;
            this.Top10InstitutionalHolders = top10InstitutionalHolders;
            this.BrokerContributors = brokerContributors;
            this.AverageRating = averageRating;
            this.TargetPrice = targetPrice;
            this.LtGrowthRate = ltGrowthRate;
            this.Revenue = revenue;
            this.Employees = employees;
            this.FundingRounds = fundingRounds;
            this.EstimatedVcRaised = estimatedVcRaised;
            this.LastFunding = lastFunding;
            this.FirstFunding = firstFunding;
            this.LatestPostMoneyValuation = latestPostMoneyValuation;
            this.ActiveInvestors = activeInvestors;
            this.TotalInvestors = totalInvestors;
            this.Premiums = premiums;
            this.GrossPremiums = grossPremiums;
            this.GrossAssets = grossAssets;
            this.TotalDeposits = totalDeposits;
            this.Branches = branches;
            this.NetInterestIncome = netInterestIncome;
            this.Meta = meta;
        }

        /// <summary>
        /// Gets or Sets Range52Week
        /// </summary>
        [DataMember(Name = "range52Week", EmitDefaultValue = false)]
        public KeyStatsEntityObjectRange52Week Range52Week { get; set; }

        /// <summary>
        /// Gets or Sets AverageDailyVol
        /// </summary>
        [DataMember(Name = "averageDailyVol", EmitDefaultValue = false)]
        public KeyStatsEntityObjectAverageDailyVol AverageDailyVol { get; set; }

        /// <summary>
        /// Gets or Sets BasicShares
        /// </summary>
        [DataMember(Name = "basicShares", EmitDefaultValue = false)]
        public KeyStatsEntityObjectBasicShares BasicShares { get; set; }

        /// <summary>
        /// Gets or Sets MarketCap
        /// </summary>
        [DataMember(Name = "marketCap", EmitDefaultValue = false)]
        public KeyStatsEntityObjectMarketCap MarketCap { get; set; }

        /// <summary>
        /// Gets or Sets DividendYield
        /// </summary>
        [DataMember(Name = "dividendYield", EmitDefaultValue = false)]
        public KeyStatsEntityObjectDividendYield DividendYield { get; set; }

        /// <summary>
        /// Gets or Sets FirstDate
        /// </summary>
        [DataMember(Name = "firstDate", EmitDefaultValue = false)]
        public KeyStatsEntityObjectFirstDate FirstDate { get; set; }

        /// <summary>
        /// Gets or Sets DilutedShares
        /// </summary>
        [DataMember(Name = "dilutedShares", EmitDefaultValue = false)]
        public KeyStatsEntityObjectDilutedShares DilutedShares { get; set; }

        /// <summary>
        /// Gets or Sets DilutedMarketCap
        /// </summary>
        [DataMember(Name = "dilutedMarketCap", EmitDefaultValue = false)]
        public KeyStatsEntityObjectDilutedMarketCap DilutedMarketCap { get; set; }

        /// <summary>
        /// Gets or Sets EnterpriseValue
        /// </summary>
        [DataMember(Name = "enterpriseValue", EmitDefaultValue = false)]
        public KeyStatsEntityObjectEnterpriseValue EnterpriseValue { get; set; }

        /// <summary>
        /// Gets or Sets Wacc
        /// </summary>
        [DataMember(Name = "wacc", EmitDefaultValue = false)]
        public KeyStatsEntityObjectWacc Wacc { get; set; }

        /// <summary>
        /// Gets or Sets Float
        /// </summary>
        [DataMember(Name = "float", EmitDefaultValue = false)]
        public KeyStatsEntityObjectFloat Float { get; set; }

        /// <summary>
        /// Gets or Sets Institutional
        /// </summary>
        [DataMember(Name = "institutional", EmitDefaultValue = false)]
        public KeyStatsEntityObjectInstitutional Institutional { get; set; }

        /// <summary>
        /// Gets or Sets Top10InstitutionalHolders
        /// </summary>
        [DataMember(Name = "top10InstitutionalHolders", EmitDefaultValue = false)]
        public KeyStatsEntityObjectTop10InstitutionalHolders Top10InstitutionalHolders { get; set; }

        /// <summary>
        /// Gets or Sets BrokerContributors
        /// </summary>
        [DataMember(Name = "brokerContributors", EmitDefaultValue = false)]
        public KeyStatsEntityObjectBrokerContributors BrokerContributors { get; set; }

        /// <summary>
        /// Gets or Sets AverageRating
        /// </summary>
        [DataMember(Name = "averageRating", EmitDefaultValue = false)]
        public KeyStatsEntityObjectAverageRating AverageRating { get; set; }

        /// <summary>
        /// Gets or Sets TargetPrice
        /// </summary>
        [DataMember(Name = "targetPrice", EmitDefaultValue = false)]
        public KeyStatsEntityObjectTargetPrice TargetPrice { get; set; }

        /// <summary>
        /// Gets or Sets LtGrowthRate
        /// </summary>
        [DataMember(Name = "ltGrowthRate", EmitDefaultValue = false)]
        public KeyStatsEntityObjectLtGrowthRate LtGrowthRate { get; set; }

        /// <summary>
        /// Gets or Sets Revenue
        /// </summary>
        [DataMember(Name = "revenue", EmitDefaultValue = false)]
        public KeyStatsEntityObjectRevenue Revenue { get; set; }

        /// <summary>
        /// Gets or Sets Employees
        /// </summary>
        [DataMember(Name = "employees", EmitDefaultValue = false)]
        public KeyStatsEntityObjectEmployees Employees { get; set; }

        /// <summary>
        /// Gets or Sets FundingRounds
        /// </summary>
        [DataMember(Name = "fundingRounds", EmitDefaultValue = false)]
        public KeyStatsEntityObjectFundingRounds FundingRounds { get; set; }

        /// <summary>
        /// Gets or Sets EstimatedVcRaised
        /// </summary>
        [DataMember(Name = "estimatedVcRaised", EmitDefaultValue = false)]
        public KeyStatsEntityObjectEstimatedVcRaised EstimatedVcRaised { get; set; }

        /// <summary>
        /// Gets or Sets LastFunding
        /// </summary>
        [DataMember(Name = "lastFunding", EmitDefaultValue = false)]
        public KeyStatsEntityObjectLastFunding LastFunding { get; set; }

        /// <summary>
        /// Gets or Sets FirstFunding
        /// </summary>
        [DataMember(Name = "firstFunding", EmitDefaultValue = false)]
        public KeyStatsEntityObjectFirstFunding FirstFunding { get; set; }

        /// <summary>
        /// Gets or Sets LatestPostMoneyValuation
        /// </summary>
        [DataMember(Name = "latestPostMoneyValuation", EmitDefaultValue = false)]
        public KeyStatsEntityObjectLatestPostMoneyValuation LatestPostMoneyValuation { get; set; }

        /// <summary>
        /// Gets or Sets ActiveInvestors
        /// </summary>
        [DataMember(Name = "activeInvestors", EmitDefaultValue = false)]
        public KeyStatsEntityObjectActiveInvestors ActiveInvestors { get; set; }

        /// <summary>
        /// Gets or Sets TotalInvestors
        /// </summary>
        [DataMember(Name = "totalInvestors", EmitDefaultValue = false)]
        public KeyStatsEntityObjectTotalInvestors TotalInvestors { get; set; }

        /// <summary>
        /// Gets or Sets Premiums
        /// </summary>
        [DataMember(Name = "premiums", EmitDefaultValue = false)]
        public KeyStatsEntityObjectPremiums Premiums { get; set; }

        /// <summary>
        /// Gets or Sets GrossPremiums
        /// </summary>
        [DataMember(Name = "grossPremiums", EmitDefaultValue = false)]
        public KeyStatsEntityObjectGrossPremiums GrossPremiums { get; set; }

        /// <summary>
        /// Gets or Sets GrossAssets
        /// </summary>
        [DataMember(Name = "grossAssets", EmitDefaultValue = false)]
        public KeyStatsEntityObjectGrossAssets GrossAssets { get; set; }

        /// <summary>
        /// Gets or Sets TotalDeposits
        /// </summary>
        [DataMember(Name = "totalDeposits", EmitDefaultValue = false)]
        public KeyStatsEntityObjectTotalDeposits TotalDeposits { get; set; }

        /// <summary>
        /// Gets or Sets Branches
        /// </summary>
        [DataMember(Name = "branches", EmitDefaultValue = false)]
        public KeyStatsEntityObjectBranches Branches { get; set; }

        /// <summary>
        /// Gets or Sets NetInterestIncome
        /// </summary>
        [DataMember(Name = "netInterestIncome", EmitDefaultValue = false)]
        public KeyStatsEntityObjectNetInterestIncome NetInterestIncome { get; set; }

        /// <summary>
        /// Gets or Sets Meta
        /// </summary>
        [DataMember(Name = "meta", EmitDefaultValue = false)]
        public KeyStatsEntityObjectMeta Meta { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class KeyStatsEntityObject {\n");
            sb.Append("  Range52Week: ").Append(Range52Week).Append("\n");
            sb.Append("  AverageDailyVol: ").Append(AverageDailyVol).Append("\n");
            sb.Append("  BasicShares: ").Append(BasicShares).Append("\n");
            sb.Append("  MarketCap: ").Append(MarketCap).Append("\n");
            sb.Append("  DividendYield: ").Append(DividendYield).Append("\n");
            sb.Append("  FirstDate: ").Append(FirstDate).Append("\n");
            sb.Append("  DilutedShares: ").Append(DilutedShares).Append("\n");
            sb.Append("  DilutedMarketCap: ").Append(DilutedMarketCap).Append("\n");
            sb.Append("  EnterpriseValue: ").Append(EnterpriseValue).Append("\n");
            sb.Append("  Wacc: ").Append(Wacc).Append("\n");
            sb.Append("  Float: ").Append(Float).Append("\n");
            sb.Append("  Institutional: ").Append(Institutional).Append("\n");
            sb.Append("  Top10InstitutionalHolders: ").Append(Top10InstitutionalHolders).Append("\n");
            sb.Append("  BrokerContributors: ").Append(BrokerContributors).Append("\n");
            sb.Append("  AverageRating: ").Append(AverageRating).Append("\n");
            sb.Append("  TargetPrice: ").Append(TargetPrice).Append("\n");
            sb.Append("  LtGrowthRate: ").Append(LtGrowthRate).Append("\n");
            sb.Append("  Revenue: ").Append(Revenue).Append("\n");
            sb.Append("  Employees: ").Append(Employees).Append("\n");
            sb.Append("  FundingRounds: ").Append(FundingRounds).Append("\n");
            sb.Append("  EstimatedVcRaised: ").Append(EstimatedVcRaised).Append("\n");
            sb.Append("  LastFunding: ").Append(LastFunding).Append("\n");
            sb.Append("  FirstFunding: ").Append(FirstFunding).Append("\n");
            sb.Append("  LatestPostMoneyValuation: ").Append(LatestPostMoneyValuation).Append("\n");
            sb.Append("  ActiveInvestors: ").Append(ActiveInvestors).Append("\n");
            sb.Append("  TotalInvestors: ").Append(TotalInvestors).Append("\n");
            sb.Append("  Premiums: ").Append(Premiums).Append("\n");
            sb.Append("  GrossPremiums: ").Append(GrossPremiums).Append("\n");
            sb.Append("  GrossAssets: ").Append(GrossAssets).Append("\n");
            sb.Append("  TotalDeposits: ").Append(TotalDeposits).Append("\n");
            sb.Append("  Branches: ").Append(Branches).Append("\n");
            sb.Append("  NetInterestIncome: ").Append(NetInterestIncome).Append("\n");
            sb.Append("  Meta: ").Append(Meta).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as KeyStatsEntityObject);
        }

        /// <summary>
        /// Returns true if KeyStatsEntityObject instances are equal
        /// </summary>
        /// <param name="input">Instance of KeyStatsEntityObject to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(KeyStatsEntityObject input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Range52Week == input.Range52Week ||
                    (this.Range52Week != null &&
                    this.Range52Week.Equals(input.Range52Week))
                ) && 
                (
                    this.AverageDailyVol == input.AverageDailyVol ||
                    (this.AverageDailyVol != null &&
                    this.AverageDailyVol.Equals(input.AverageDailyVol))
                ) && 
                (
                    this.BasicShares == input.BasicShares ||
                    (this.BasicShares != null &&
                    this.BasicShares.Equals(input.BasicShares))
                ) && 
                (
                    this.MarketCap == input.MarketCap ||
                    (this.MarketCap != null &&
                    this.MarketCap.Equals(input.MarketCap))
                ) && 
                (
                    this.DividendYield == input.DividendYield ||
                    (this.DividendYield != null &&
                    this.DividendYield.Equals(input.DividendYield))
                ) && 
                (
                    this.FirstDate == input.FirstDate ||
                    (this.FirstDate != null &&
                    this.FirstDate.Equals(input.FirstDate))
                ) && 
                (
                    this.DilutedShares == input.DilutedShares ||
                    (this.DilutedShares != null &&
                    this.DilutedShares.Equals(input.DilutedShares))
                ) && 
                (
                    this.DilutedMarketCap == input.DilutedMarketCap ||
                    (this.DilutedMarketCap != null &&
                    this.DilutedMarketCap.Equals(input.DilutedMarketCap))
                ) && 
                (
                    this.EnterpriseValue == input.EnterpriseValue ||
                    (this.EnterpriseValue != null &&
                    this.EnterpriseValue.Equals(input.EnterpriseValue))
                ) && 
                (
                    this.Wacc == input.Wacc ||
                    (this.Wacc != null &&
                    this.Wacc.Equals(input.Wacc))
                ) && 
                (
                    this.Float == input.Float ||
                    (this.Float != null &&
                    this.Float.Equals(input.Float))
                ) && 
                (
                    this.Institutional == input.Institutional ||
                    (this.Institutional != null &&
                    this.Institutional.Equals(input.Institutional))
                ) && 
                (
                    this.Top10InstitutionalHolders == input.Top10InstitutionalHolders ||
                    (this.Top10InstitutionalHolders != null &&
                    this.Top10InstitutionalHolders.Equals(input.Top10InstitutionalHolders))
                ) && 
                (
                    this.BrokerContributors == input.BrokerContributors ||
                    (this.BrokerContributors != null &&
                    this.BrokerContributors.Equals(input.BrokerContributors))
                ) && 
                (
                    this.AverageRating == input.AverageRating ||
                    (this.AverageRating != null &&
                    this.AverageRating.Equals(input.AverageRating))
                ) && 
                (
                    this.TargetPrice == input.TargetPrice ||
                    (this.TargetPrice != null &&
                    this.TargetPrice.Equals(input.TargetPrice))
                ) && 
                (
                    this.LtGrowthRate == input.LtGrowthRate ||
                    (this.LtGrowthRate != null &&
                    this.LtGrowthRate.Equals(input.LtGrowthRate))
                ) && 
                (
                    this.Revenue == input.Revenue ||
                    (this.Revenue != null &&
                    this.Revenue.Equals(input.Revenue))
                ) && 
                (
                    this.Employees == input.Employees ||
                    (this.Employees != null &&
                    this.Employees.Equals(input.Employees))
                ) && 
                (
                    this.FundingRounds == input.FundingRounds ||
                    (this.FundingRounds != null &&
                    this.FundingRounds.Equals(input.FundingRounds))
                ) && 
                (
                    this.EstimatedVcRaised == input.EstimatedVcRaised ||
                    (this.EstimatedVcRaised != null &&
                    this.EstimatedVcRaised.Equals(input.EstimatedVcRaised))
                ) && 
                (
                    this.LastFunding == input.LastFunding ||
                    (this.LastFunding != null &&
                    this.LastFunding.Equals(input.LastFunding))
                ) && 
                (
                    this.FirstFunding == input.FirstFunding ||
                    (this.FirstFunding != null &&
                    this.FirstFunding.Equals(input.FirstFunding))
                ) && 
                (
                    this.LatestPostMoneyValuation == input.LatestPostMoneyValuation ||
                    (this.LatestPostMoneyValuation != null &&
                    this.LatestPostMoneyValuation.Equals(input.LatestPostMoneyValuation))
                ) && 
                (
                    this.ActiveInvestors == input.ActiveInvestors ||
                    (this.ActiveInvestors != null &&
                    this.ActiveInvestors.Equals(input.ActiveInvestors))
                ) && 
                (
                    this.TotalInvestors == input.TotalInvestors ||
                    (this.TotalInvestors != null &&
                    this.TotalInvestors.Equals(input.TotalInvestors))
                ) && 
                (
                    this.Premiums == input.Premiums ||
                    (this.Premiums != null &&
                    this.Premiums.Equals(input.Premiums))
                ) && 
                (
                    this.GrossPremiums == input.GrossPremiums ||
                    (this.GrossPremiums != null &&
                    this.GrossPremiums.Equals(input.GrossPremiums))
                ) && 
                (
                    this.GrossAssets == input.GrossAssets ||
                    (this.GrossAssets != null &&
                    this.GrossAssets.Equals(input.GrossAssets))
                ) && 
                (
                    this.TotalDeposits == input.TotalDeposits ||
                    (this.TotalDeposits != null &&
                    this.TotalDeposits.Equals(input.TotalDeposits))
                ) && 
                (
                    this.Branches == input.Branches ||
                    (this.Branches != null &&
                    this.Branches.Equals(input.Branches))
                ) && 
                (
                    this.NetInterestIncome == input.NetInterestIncome ||
                    (this.NetInterestIncome != null &&
                    this.NetInterestIncome.Equals(input.NetInterestIncome))
                ) && 
                (
                    this.Meta == input.Meta ||
                    (this.Meta != null &&
                    this.Meta.Equals(input.Meta))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Range52Week != null)
                {
                    hashCode = (hashCode * 59) + this.Range52Week.GetHashCode();
                }
                if (this.AverageDailyVol != null)
                {
                    hashCode = (hashCode * 59) + this.AverageDailyVol.GetHashCode();
                }
                if (this.BasicShares != null)
                {
                    hashCode = (hashCode * 59) + this.BasicShares.GetHashCode();
                }
                if (this.MarketCap != null)
                {
                    hashCode = (hashCode * 59) + this.MarketCap.GetHashCode();
                }
                if (this.DividendYield != null)
                {
                    hashCode = (hashCode * 59) + this.DividendYield.GetHashCode();
                }
                if (this.FirstDate != null)
                {
                    hashCode = (hashCode * 59) + this.FirstDate.GetHashCode();
                }
                if (this.DilutedShares != null)
                {
                    hashCode = (hashCode * 59) + this.DilutedShares.GetHashCode();
                }
                if (this.DilutedMarketCap != null)
                {
                    hashCode = (hashCode * 59) + this.DilutedMarketCap.GetHashCode();
                }
                if (this.EnterpriseValue != null)
                {
                    hashCode = (hashCode * 59) + this.EnterpriseValue.GetHashCode();
                }
                if (this.Wacc != null)
                {
                    hashCode = (hashCode * 59) + this.Wacc.GetHashCode();
                }
                if (this.Float != null)
                {
                    hashCode = (hashCode * 59) + this.Float.GetHashCode();
                }
                if (this.Institutional != null)
                {
                    hashCode = (hashCode * 59) + this.Institutional.GetHashCode();
                }
                if (this.Top10InstitutionalHolders != null)
                {
                    hashCode = (hashCode * 59) + this.Top10InstitutionalHolders.GetHashCode();
                }
                if (this.BrokerContributors != null)
                {
                    hashCode = (hashCode * 59) + this.BrokerContributors.GetHashCode();
                }
                if (this.AverageRating != null)
                {
                    hashCode = (hashCode * 59) + this.AverageRating.GetHashCode();
                }
                if (this.TargetPrice != null)
                {
                    hashCode = (hashCode * 59) + this.TargetPrice.GetHashCode();
                }
                if (this.LtGrowthRate != null)
                {
                    hashCode = (hashCode * 59) + this.LtGrowthRate.GetHashCode();
                }
                if (this.Revenue != null)
                {
                    hashCode = (hashCode * 59) + this.Revenue.GetHashCode();
                }
                if (this.Employees != null)
                {
                    hashCode = (hashCode * 59) + this.Employees.GetHashCode();
                }
                if (this.FundingRounds != null)
                {
                    hashCode = (hashCode * 59) + this.FundingRounds.GetHashCode();
                }
                if (this.EstimatedVcRaised != null)
                {
                    hashCode = (hashCode * 59) + this.EstimatedVcRaised.GetHashCode();
                }
                if (this.LastFunding != null)
                {
                    hashCode = (hashCode * 59) + this.LastFunding.GetHashCode();
                }
                if (this.FirstFunding != null)
                {
                    hashCode = (hashCode * 59) + this.FirstFunding.GetHashCode();
                }
                if (this.LatestPostMoneyValuation != null)
                {
                    hashCode = (hashCode * 59) + this.LatestPostMoneyValuation.GetHashCode();
                }
                if (this.ActiveInvestors != null)
                {
                    hashCode = (hashCode * 59) + this.ActiveInvestors.GetHashCode();
                }
                if (this.TotalInvestors != null)
                {
                    hashCode = (hashCode * 59) + this.TotalInvestors.GetHashCode();
                }
                if (this.Premiums != null)
                {
                    hashCode = (hashCode * 59) + this.Premiums.GetHashCode();
                }
                if (this.GrossPremiums != null)
                {
                    hashCode = (hashCode * 59) + this.GrossPremiums.GetHashCode();
                }
                if (this.GrossAssets != null)
                {
                    hashCode = (hashCode * 59) + this.GrossAssets.GetHashCode();
                }
                if (this.TotalDeposits != null)
                {
                    hashCode = (hashCode * 59) + this.TotalDeposits.GetHashCode();
                }
                if (this.Branches != null)
                {
                    hashCode = (hashCode * 59) + this.Branches.GetHashCode();
                }
                if (this.NetInterestIncome != null)
                {
                    hashCode = (hashCode * 59) + this.NetInterestIncome.GetHashCode();
                }
                if (this.Meta != null)
                {
                    hashCode = (hashCode * 59) + this.Meta.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
