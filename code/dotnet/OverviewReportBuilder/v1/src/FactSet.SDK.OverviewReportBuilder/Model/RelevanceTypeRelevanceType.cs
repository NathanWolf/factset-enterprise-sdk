/*
 * FactSet Overview Report Builder API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = FactSet.SDK.OverviewReportBuilder.Client.OpenAPIDateConverter;

namespace FactSet.SDK.OverviewReportBuilder.Model
{
    /// <summary>
    /// Relevance type of company. Only applicable in /supply-chain-relationship. 
    /// </summary>
    [DataContract(Name = "relevanceType_relevanceType")]
    public partial class RelevanceTypeRelevanceType : IEquatable<RelevanceTypeRelevanceType>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="RelevanceTypeRelevanceType" /> class.
        /// </summary>
        /// <param name="c">c.</param>
        /// <param name="p">p.</param>
        /// <param name="s">s.</param>
        public RelevanceTypeRelevanceType(RelevanceTypeRelevanceTypeC c = default(RelevanceTypeRelevanceTypeC), RelevanceTypeRelevanceTypeP p = default(RelevanceTypeRelevanceTypeP), RelevanceTypeRelevanceTypeS s = default(RelevanceTypeRelevanceTypeS))
        {
            this.C = c;
            this.P = p;
            this.S = s;
        }

        /// <summary>
        /// Gets or Sets C
        /// </summary>
        [DataMember(Name = "C", EmitDefaultValue = false)]
        public RelevanceTypeRelevanceTypeC C { get; set; }

        /// <summary>
        /// Gets or Sets P
        /// </summary>
        [DataMember(Name = "P", EmitDefaultValue = false)]
        public RelevanceTypeRelevanceTypeP P { get; set; }

        /// <summary>
        /// Gets or Sets S
        /// </summary>
        [DataMember(Name = "S", EmitDefaultValue = false)]
        public RelevanceTypeRelevanceTypeS S { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class RelevanceTypeRelevanceType {\n");
            sb.Append("  C: ").Append(C).Append("\n");
            sb.Append("  P: ").Append(P).Append("\n");
            sb.Append("  S: ").Append(S).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as RelevanceTypeRelevanceType);
        }

        /// <summary>
        /// Returns true if RelevanceTypeRelevanceType instances are equal
        /// </summary>
        /// <param name="input">Instance of RelevanceTypeRelevanceType to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(RelevanceTypeRelevanceType input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.C == input.C ||
                    (this.C != null &&
                    this.C.Equals(input.C))
                ) && 
                (
                    this.P == input.P ||
                    (this.P != null &&
                    this.P.Equals(input.P))
                ) && 
                (
                    this.S == input.S ||
                    (this.S != null &&
                    this.S.Equals(input.S))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.C != null)
                {
                    hashCode = (hashCode * 59) + this.C.GetHashCode();
                }
                if (this.P != null)
                {
                    hashCode = (hashCode * 59) + this.P.GetHashCode();
                }
                if (this.S != null)
                {
                    hashCode = (hashCode * 59) + this.S.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
