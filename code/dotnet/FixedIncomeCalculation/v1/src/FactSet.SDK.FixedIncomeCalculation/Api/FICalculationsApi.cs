/*
 * FI API
 *
 * Allow clients to fetch Analytics through APIs.
 *
 * The version of the OpenAPI document: 1
 * Contact: analytics.api.support@factset.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using FactSet.SDK.FixedIncomeCalculation.Client;
using FactSet.SDK.FixedIncomeCalculation.Model;
using FactSet.SDK.Utils.Authentication;

namespace FactSet.SDK.FixedIncomeCalculation.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IFICalculationsApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Cancel FI calculation by id
        /// </summary>
        /// <remarks>
        /// This is the endpoint to cancel a previously submitted calculation.  Instead of doing a GET on the polling URL, cancel the request by doing a DELETE.
        /// </remarks>
        /// <exception cref="FactSet.SDK.FixedIncomeCalculation.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">from url, provided from the location header in the Run FI Calculation endpoint</param>
        /// <returns>void</returns>
        void CancelFICalculationById(string id);

        /// <summary>
        /// Cancel FI calculation by id
        /// </summary>
        /// <remarks>
        /// This is the endpoint to cancel a previously submitted calculation.  Instead of doing a GET on the polling URL, cancel the request by doing a DELETE.
        /// </remarks>
        /// <exception cref="FactSet.SDK.FixedIncomeCalculation.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">from url, provided from the location header in the Run FI Calculation endpoint</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> CancelFICalculationByIdWithHttpInfo(string id);
        /// <summary>
        /// Get FI calculation by id
        /// </summary>
        /// <remarks>
        /// This is the endpoint to check on the progress of a previously requested calculation.  If the calculation has finished computing, the body of the response will contain the requested document in JSON.  Otherwise, the calculation is still running and the X-FactSet-Api-PickUp-Progress header will contain a progress percentage.
        /// </remarks>
        /// <exception cref="FactSet.SDK.FixedIncomeCalculation.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">from url, provided from the location header in the Run FI Calculation endpoint</param>
        /// <returns>Object</returns>
        Object GetFICalculationById(string id);

        /// <summary>
        /// Get FI calculation by id
        /// </summary>
        /// <remarks>
        /// This is the endpoint to check on the progress of a previously requested calculation.  If the calculation has finished computing, the body of the response will contain the requested document in JSON.  Otherwise, the calculation is still running and the X-FactSet-Api-PickUp-Progress header will contain a progress percentage.
        /// </remarks>
        /// <exception cref="FactSet.SDK.FixedIncomeCalculation.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">from url, provided from the location header in the Run FI Calculation endpoint</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> GetFICalculationByIdWithHttpInfo(string id);
        /// <summary>
        /// Run FI calculation
        /// </summary>
        /// <remarks>
        /// This endpoint creates a new FI calculation.  This must be used first before get status or cancelling endpoints with a calculation id.  A successful response will contain the resulting FI calculation or a polling URL in location header if the request takes too long.
        /// </remarks>
        /// <exception cref="FactSet.SDK.FixedIncomeCalculation.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xFactSetContentOrganization">FactSet content organization (optional)</param>
        /// <param name="xFactSetContentType">FactSet content type (optional)</param>
        /// <param name="fICalculationParameters"> (optional)</param>
        /// <returns>Object</returns>
        Object RunFICalculation(string xFactSetContentOrganization = default(string), string xFactSetContentType = default(string), FICalculationParameters fICalculationParameters = default(FICalculationParameters));

        /// <summary>
        /// Run FI calculation
        /// </summary>
        /// <remarks>
        /// This endpoint creates a new FI calculation.  This must be used first before get status or cancelling endpoints with a calculation id.  A successful response will contain the resulting FI calculation or a polling URL in location header if the request takes too long.
        /// </remarks>
        /// <exception cref="FactSet.SDK.FixedIncomeCalculation.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xFactSetContentOrganization">FactSet content organization (optional)</param>
        /// <param name="xFactSetContentType">FactSet content type (optional)</param>
        /// <param name="fICalculationParameters"> (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> RunFICalculationWithHttpInfo(string xFactSetContentOrganization = default(string), string xFactSetContentType = default(string), FICalculationParameters fICalculationParameters = default(FICalculationParameters));
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IFICalculationsApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Cancel FI calculation by id
        /// </summary>
        /// <remarks>
        /// This is the endpoint to cancel a previously submitted calculation.  Instead of doing a GET on the polling URL, cancel the request by doing a DELETE.
        /// </remarks>
        /// <exception cref="FactSet.SDK.FixedIncomeCalculation.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">from url, provided from the location header in the Run FI Calculation endpoint</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task CancelFICalculationByIdAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Cancel FI calculation by id
        /// </summary>
        /// <remarks>
        /// This is the endpoint to cancel a previously submitted calculation.  Instead of doing a GET on the polling URL, cancel the request by doing a DELETE.
        /// </remarks>
        /// <exception cref="FactSet.SDK.FixedIncomeCalculation.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">from url, provided from the location header in the Run FI Calculation endpoint</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> CancelFICalculationByIdWithHttpInfoAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get FI calculation by id
        /// </summary>
        /// <remarks>
        /// This is the endpoint to check on the progress of a previously requested calculation.  If the calculation has finished computing, the body of the response will contain the requested document in JSON.  Otherwise, the calculation is still running and the X-FactSet-Api-PickUp-Progress header will contain a progress percentage.
        /// </remarks>
        /// <exception cref="FactSet.SDK.FixedIncomeCalculation.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">from url, provided from the location header in the Run FI Calculation endpoint</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> GetFICalculationByIdAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get FI calculation by id
        /// </summary>
        /// <remarks>
        /// This is the endpoint to check on the progress of a previously requested calculation.  If the calculation has finished computing, the body of the response will contain the requested document in JSON.  Otherwise, the calculation is still running and the X-FactSet-Api-PickUp-Progress header will contain a progress percentage.
        /// </remarks>
        /// <exception cref="FactSet.SDK.FixedIncomeCalculation.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">from url, provided from the location header in the Run FI Calculation endpoint</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GetFICalculationByIdWithHttpInfoAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Run FI calculation
        /// </summary>
        /// <remarks>
        /// This endpoint creates a new FI calculation.  This must be used first before get status or cancelling endpoints with a calculation id.  A successful response will contain the resulting FI calculation or a polling URL in location header if the request takes too long.
        /// </remarks>
        /// <exception cref="FactSet.SDK.FixedIncomeCalculation.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xFactSetContentOrganization">FactSet content organization (optional)</param>
        /// <param name="xFactSetContentType">FactSet content type (optional)</param>
        /// <param name="fICalculationParameters"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> RunFICalculationAsync(string xFactSetContentOrganization = default(string), string xFactSetContentType = default(string), FICalculationParameters fICalculationParameters = default(FICalculationParameters), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Run FI calculation
        /// </summary>
        /// <remarks>
        /// This endpoint creates a new FI calculation.  This must be used first before get status or cancelling endpoints with a calculation id.  A successful response will contain the resulting FI calculation or a polling URL in location header if the request takes too long.
        /// </remarks>
        /// <exception cref="FactSet.SDK.FixedIncomeCalculation.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xFactSetContentOrganization">FactSet content organization (optional)</param>
        /// <param name="xFactSetContentType">FactSet content type (optional)</param>
        /// <param name="fICalculationParameters"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> RunFICalculationWithHttpInfoAsync(string xFactSetContentOrganization = default(string), string xFactSetContentType = default(string), FICalculationParameters fICalculationParameters = default(FICalculationParameters), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IFICalculationsApi : IFICalculationsApiSync, IFICalculationsApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class FICalculationsApi : IFICalculationsApi
    {
        private FactSet.SDK.FixedIncomeCalculation.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        # region Response Type Disctionaries
                private static readonly Dictionary<HttpStatusCode, System.Type> CancelFICalculationByIdResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
        };
        private static readonly Dictionary<HttpStatusCode, System.Type> GetFICalculationByIdResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)200, typeof(Object) },
        };
        private static readonly Dictionary<HttpStatusCode, System.Type> RunFICalculationResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)201, typeof(Object) },
        };

        # endregion Response Type Disctionaries

        # region Api Response Objects
         

        # endregion Api Response Objects

        /// <summary>
        /// Initializes a new instance of the <see cref="FICalculationsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public FICalculationsApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="FICalculationsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public FICalculationsApi(string basePath)
        {
            this.Configuration = FactSet.SDK.FixedIncomeCalculation.Client.Configuration.MergeConfigurations(
                FactSet.SDK.FixedIncomeCalculation.Client.GlobalConfiguration.Instance,
                new FactSet.SDK.FixedIncomeCalculation.Client.Configuration { BasePath = basePath }
            );
            this.Client = new FactSet.SDK.FixedIncomeCalculation.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new FactSet.SDK.FixedIncomeCalculation.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = FactSet.SDK.FixedIncomeCalculation.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="FICalculationsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public FICalculationsApi(FactSet.SDK.FixedIncomeCalculation.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = FactSet.SDK.FixedIncomeCalculation.Client.Configuration.MergeConfigurations(
                FactSet.SDK.FixedIncomeCalculation.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new FactSet.SDK.FixedIncomeCalculation.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new FactSet.SDK.FixedIncomeCalculation.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = FactSet.SDK.FixedIncomeCalculation.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="FICalculationsApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public FICalculationsApi(FactSet.SDK.FixedIncomeCalculation.Client.ISynchronousClient client, FactSet.SDK.FixedIncomeCalculation.Client.IAsynchronousClient asyncClient, FactSet.SDK.FixedIncomeCalculation.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = FactSet.SDK.FixedIncomeCalculation.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public FactSet.SDK.FixedIncomeCalculation.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public FactSet.SDK.FixedIncomeCalculation.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public FactSet.SDK.FixedIncomeCalculation.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public FactSet.SDK.FixedIncomeCalculation.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Cancel FI calculation by id This is the endpoint to cancel a previously submitted calculation.  Instead of doing a GET on the polling URL, cancel the request by doing a DELETE.
        /// </summary>
        /// <exception cref="FactSet.SDK.FixedIncomeCalculation.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">from url, provided from the location header in the Run FI Calculation endpoint</param>
        /// <returns>void</returns>
        public void CancelFICalculationById(string id)
        {
            CancelFICalculationByIdWithHttpInfo(id);
        }

        /// <summary>
        /// Cancel FI calculation by id This is the endpoint to cancel a previously submitted calculation.  Instead of doing a GET on the polling URL, cancel the request by doing a DELETE.
        /// </summary>
        /// <exception cref="FactSet.SDK.FixedIncomeCalculation.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">from url, provided from the location header in the Run FI Calculation endpoint</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> CancelFICalculationByIdWithHttpInfo(string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new FactSet.SDK.FixedIncomeCalculation.Client.ApiException(400, "Missing required parameter 'id' when calling FICalculationsApi->CancelFICalculationById");
            }

            FactSet.SDK.FixedIncomeCalculation.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.FixedIncomeCalculation.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = FactSet.SDK.FixedIncomeCalculation.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.FixedIncomeCalculation.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", FactSet.SDK.FixedIncomeCalculation.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.FixedIncomeCalculation.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = CancelFICalculationByIdResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Delete<
            Object>("/analytics/engines/fi/v1/calculations/{id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CancelFICalculationById", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// Cancel FI calculation by id This is the endpoint to cancel a previously submitted calculation.  Instead of doing a GET on the polling URL, cancel the request by doing a DELETE.
        /// </summary>
        /// <exception cref="FactSet.SDK.FixedIncomeCalculation.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">from url, provided from the location header in the Run FI Calculation endpoint</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task CancelFICalculationByIdAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await CancelFICalculationByIdWithHttpInfoAsync(id, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Cancel FI calculation by id This is the endpoint to cancel a previously submitted calculation.  Instead of doing a GET on the polling URL, cancel the request by doing a DELETE.
        /// </summary>
        /// <exception cref="FactSet.SDK.FixedIncomeCalculation.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">from url, provided from the location header in the Run FI Calculation endpoint</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>

        public async System.Threading.Tasks.Task<ApiResponse<Object>> CancelFICalculationByIdWithHttpInfoAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new FactSet.SDK.FixedIncomeCalculation.Client.ApiException(400, "Missing required parameter 'id' when calling FICalculationsApi->CancelFICalculationById");
            }


            FactSet.SDK.FixedIncomeCalculation.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.FixedIncomeCalculation.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = FactSet.SDK.FixedIncomeCalculation.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.FixedIncomeCalculation.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", FactSet.SDK.FixedIncomeCalculation.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.FixedIncomeCalculation.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = CancelFICalculationByIdResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/analytics/engines/fi/v1/calculations/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CancelFICalculationById", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get FI calculation by id This is the endpoint to check on the progress of a previously requested calculation.  If the calculation has finished computing, the body of the response will contain the requested document in JSON.  Otherwise, the calculation is still running and the X-FactSet-Api-PickUp-Progress header will contain a progress percentage.
        /// </summary>
        /// <exception cref="FactSet.SDK.FixedIncomeCalculation.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">from url, provided from the location header in the Run FI Calculation endpoint</param>
        /// <returns>Object</returns>
        public Object GetFICalculationById(string id)
        {
            var localVarResponse = GetFICalculationByIdWithHttpInfo(id);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get FI calculation by id This is the endpoint to check on the progress of a previously requested calculation.  If the calculation has finished computing, the body of the response will contain the requested document in JSON.  Otherwise, the calculation is still running and the X-FactSet-Api-PickUp-Progress header will contain a progress percentage.
        /// </summary>
        /// <exception cref="FactSet.SDK.FixedIncomeCalculation.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">from url, provided from the location header in the Run FI Calculation endpoint</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse<Object> GetFICalculationByIdWithHttpInfo(string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new FactSet.SDK.FixedIncomeCalculation.Client.ApiException(400, "Missing required parameter 'id' when calling FICalculationsApi->GetFICalculationById");
            }

            FactSet.SDK.FixedIncomeCalculation.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.FixedIncomeCalculation.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.FixedIncomeCalculation.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.FixedIncomeCalculation.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", FactSet.SDK.FixedIncomeCalculation.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.FixedIncomeCalculation.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = GetFICalculationByIdResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Get<
            Object>("/analytics/engines/fi/v1/calculations/{id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetFICalculationById", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// Get FI calculation by id This is the endpoint to check on the progress of a previously requested calculation.  If the calculation has finished computing, the body of the response will contain the requested document in JSON.  Otherwise, the calculation is still running and the X-FactSet-Api-PickUp-Progress header will contain a progress percentage.
        /// </summary>
        /// <exception cref="FactSet.SDK.FixedIncomeCalculation.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">from url, provided from the location header in the Run FI Calculation endpoint</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object>GetFICalculationByIdAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await GetFICalculationByIdWithHttpInfoAsync(id, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get FI calculation by id This is the endpoint to check on the progress of a previously requested calculation.  If the calculation has finished computing, the body of the response will contain the requested document in JSON.  Otherwise, the calculation is still running and the X-FactSet-Api-PickUp-Progress header will contain a progress percentage.
        /// </summary>
        /// <exception cref="FactSet.SDK.FixedIncomeCalculation.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">from url, provided from the location header in the Run FI Calculation endpoint</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<Object>> GetFICalculationByIdWithHttpInfoAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new FactSet.SDK.FixedIncomeCalculation.Client.ApiException(400, "Missing required parameter 'id' when calling FICalculationsApi->GetFICalculationById");
            }


            FactSet.SDK.FixedIncomeCalculation.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.FixedIncomeCalculation.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.FixedIncomeCalculation.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.FixedIncomeCalculation.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", FactSet.SDK.FixedIncomeCalculation.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.FixedIncomeCalculation.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = GetFICalculationByIdResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/analytics/engines/fi/v1/calculations/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetFICalculationById", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Run FI calculation This endpoint creates a new FI calculation.  This must be used first before get status or cancelling endpoints with a calculation id.  A successful response will contain the resulting FI calculation or a polling URL in location header if the request takes too long.
        /// </summary>
        /// <exception cref="FactSet.SDK.FixedIncomeCalculation.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xFactSetContentOrganization">FactSet content organization (optional)</param>
        /// <param name="xFactSetContentType">FactSet content type (optional)</param>
        /// <param name="fICalculationParameters"> (optional)</param>
        /// <returns>Object</returns>
        public Object RunFICalculation(string xFactSetContentOrganization = default(string), string xFactSetContentType = default(string), FICalculationParameters fICalculationParameters = default(FICalculationParameters))
        {
            var localVarResponse = RunFICalculationWithHttpInfo(xFactSetContentOrganization, xFactSetContentType, fICalculationParameters);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Run FI calculation This endpoint creates a new FI calculation.  This must be used first before get status or cancelling endpoints with a calculation id.  A successful response will contain the resulting FI calculation or a polling URL in location header if the request takes too long.
        /// </summary>
        /// <exception cref="FactSet.SDK.FixedIncomeCalculation.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xFactSetContentOrganization">FactSet content organization (optional)</param>
        /// <param name="xFactSetContentType">FactSet content type (optional)</param>
        /// <param name="fICalculationParameters"> (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse<Object> RunFICalculationWithHttpInfo(string xFactSetContentOrganization = default(string), string xFactSetContentType = default(string), FICalculationParameters fICalculationParameters = default(FICalculationParameters))
        {
            FactSet.SDK.FixedIncomeCalculation.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.FixedIncomeCalculation.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.FixedIncomeCalculation.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.FixedIncomeCalculation.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (xFactSetContentOrganization != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-FactSet-Content-Organization", FactSet.SDK.FixedIncomeCalculation.Client.ClientUtils.ParameterToString(xFactSetContentOrganization)); // header parameter
            }
            if (xFactSetContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-FactSet-Content-Type", FactSet.SDK.FixedIncomeCalculation.Client.ClientUtils.ParameterToString(xFactSetContentType)); // header parameter
            }
            localVarRequestOptions.Data = fICalculationParameters;

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.FixedIncomeCalculation.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = RunFICalculationResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Post<
            Object>("/analytics/engines/fi/v1/calculations", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RunFICalculation", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// Run FI calculation This endpoint creates a new FI calculation.  This must be used first before get status or cancelling endpoints with a calculation id.  A successful response will contain the resulting FI calculation or a polling URL in location header if the request takes too long.
        /// </summary>
        /// <exception cref="FactSet.SDK.FixedIncomeCalculation.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xFactSetContentOrganization">FactSet content organization (optional)</param>
        /// <param name="xFactSetContentType">FactSet content type (optional)</param>
        /// <param name="fICalculationParameters"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object>RunFICalculationAsync(string xFactSetContentOrganization = default(string), string xFactSetContentType = default(string), FICalculationParameters fICalculationParameters = default(FICalculationParameters), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await RunFICalculationWithHttpInfoAsync(xFactSetContentOrganization, xFactSetContentType, fICalculationParameters, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Run FI calculation This endpoint creates a new FI calculation.  This must be used first before get status or cancelling endpoints with a calculation id.  A successful response will contain the resulting FI calculation or a polling URL in location header if the request takes too long.
        /// </summary>
        /// <exception cref="FactSet.SDK.FixedIncomeCalculation.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xFactSetContentOrganization">FactSet content organization (optional)</param>
        /// <param name="xFactSetContentType">FactSet content type (optional)</param>
        /// <param name="fICalculationParameters"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<Object>> RunFICalculationWithHttpInfoAsync(string xFactSetContentOrganization = default(string), string xFactSetContentType = default(string), FICalculationParameters fICalculationParameters = default(FICalculationParameters), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            FactSet.SDK.FixedIncomeCalculation.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.FixedIncomeCalculation.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.FixedIncomeCalculation.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.FixedIncomeCalculation.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (xFactSetContentOrganization != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-FactSet-Content-Organization", FactSet.SDK.FixedIncomeCalculation.Client.ClientUtils.ParameterToString(xFactSetContentOrganization)); // header parameter
            }
            if (xFactSetContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-FactSet-Content-Type", FactSet.SDK.FixedIncomeCalculation.Client.ClientUtils.ParameterToString(xFactSetContentType)); // header parameter
            }
            localVarRequestOptions.Data = fICalculationParameters;

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.FixedIncomeCalculation.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = RunFICalculationResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/analytics/engines/fi/v1/calculations", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RunFICalculation", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
