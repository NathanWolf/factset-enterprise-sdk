/*
 * Prime Developer Trial
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = FactSet.SDK.SecuritizedDerivativesAPIforDigitalPortals.Client.OpenAPIDateConverter;

namespace FactSet.SDK.SecuritizedDerivativesAPIforDigitalPortals.Model
{
    /// <summary>
    /// Summary data accumulated over all trades of the current trading day.
    /// </summary>
    [DataContract(Name = "inline_response_200_4_accumulated")]
    public partial class InlineResponse2004Accumulated : IEquatable<InlineResponse2004Accumulated>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="InlineResponse2004Accumulated" /> class.
        /// </summary>
        /// <param name="numberTrades">Number of trades..</param>
        /// <param name="tradingVolume">Number of units (e.g. shares) traded. For securitized derivatives quoted in percent (attribute &#x60;valueUnit.id&#x3D;258&#x60;), this field represents the nominal trading volume; see attribute currency for its unit..</param>
        /// <param name="tradingValue">Monetary equivalent (cash value) of the trades. See attribute &#x60;currency&#x60; for its unit..</param>
        /// <param name="currency">currency.</param>
        public InlineResponse2004Accumulated(decimal numberTrades = default(decimal), decimal tradingVolume = default(decimal), decimal tradingValue = default(decimal), InlineResponse2004AccumulatedCurrency currency = default(InlineResponse2004AccumulatedCurrency))
        {
            this.NumberTrades = numberTrades;
            this.TradingVolume = tradingVolume;
            this.TradingValue = tradingValue;
            this.Currency = currency;
        }

        /// <summary>
        /// Number of trades.
        /// </summary>
        /// <value>Number of trades.</value>
        [DataMember(Name = "numberTrades", EmitDefaultValue = false)]
        public decimal NumberTrades { get; set; }

        /// <summary>
        /// Number of units (e.g. shares) traded. For securitized derivatives quoted in percent (attribute &#x60;valueUnit.id&#x3D;258&#x60;), this field represents the nominal trading volume; see attribute currency for its unit.
        /// </summary>
        /// <value>Number of units (e.g. shares) traded. For securitized derivatives quoted in percent (attribute &#x60;valueUnit.id&#x3D;258&#x60;), this field represents the nominal trading volume; see attribute currency for its unit.</value>
        [DataMember(Name = "tradingVolume", EmitDefaultValue = false)]
        public decimal TradingVolume { get; set; }

        /// <summary>
        /// Monetary equivalent (cash value) of the trades. See attribute &#x60;currency&#x60; for its unit.
        /// </summary>
        /// <value>Monetary equivalent (cash value) of the trades. See attribute &#x60;currency&#x60; for its unit.</value>
        [DataMember(Name = "tradingValue", EmitDefaultValue = false)]
        public decimal TradingValue { get; set; }

        /// <summary>
        /// Gets or Sets Currency
        /// </summary>
        [DataMember(Name = "currency", EmitDefaultValue = false)]
        public InlineResponse2004AccumulatedCurrency Currency { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class InlineResponse2004Accumulated {\n");
            sb.Append("  NumberTrades: ").Append(NumberTrades).Append("\n");
            sb.Append("  TradingVolume: ").Append(TradingVolume).Append("\n");
            sb.Append("  TradingValue: ").Append(TradingValue).Append("\n");
            sb.Append("  Currency: ").Append(Currency).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as InlineResponse2004Accumulated);
        }

        /// <summary>
        /// Returns true if InlineResponse2004Accumulated instances are equal
        /// </summary>
        /// <param name="input">Instance of InlineResponse2004Accumulated to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(InlineResponse2004Accumulated input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.NumberTrades == input.NumberTrades ||
                    this.NumberTrades.Equals(input.NumberTrades)
                ) && 
                (
                    this.TradingVolume == input.TradingVolume ||
                    this.TradingVolume.Equals(input.TradingVolume)
                ) && 
                (
                    this.TradingValue == input.TradingValue ||
                    this.TradingValue.Equals(input.TradingValue)
                ) && 
                (
                    this.Currency == input.Currency ||
                    (this.Currency != null &&
                    this.Currency.Equals(input.Currency))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = hashCode * 59 + this.NumberTrades.GetHashCode();
                hashCode = hashCode * 59 + this.TradingVolume.GetHashCode();
                hashCode = hashCode * 59 + this.TradingValue.GetHashCode();
                if (this.Currency != null)
                    hashCode = hashCode * 59 + this.Currency.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
