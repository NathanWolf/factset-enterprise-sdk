/*
 * Prime Developer Trial
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = FactSet.SDK.SecuritizedDerivativesAPIforDigitalPortals.Client.OpenAPIDateConverter;

namespace FactSet.SDK.SecuritizedDerivativesAPIforDigitalPortals.Model
{
    /// <summary>
    /// Ask and bid-based performance since issue, see attribute &#x60;issue&#x60; in endpoint &#x60;/securitizedDerivative/get&#x60; for the issue date. It represents the difference between the ask (bid respectively) price of the derivative&#39;s notation and the issue price. For securitized derivatives quoted in percent, the result is multiplied with the nominal (see attribute &#x60;nominal.value&#x60; in endpoint &#x60;/securitizedDerivative/get&#x60;) in order to calculate the value in absolute terms.
    /// </summary>
    [DataContract(Name = "inline_response_200_3_data_performanceIssue")]
    public partial class InlineResponse2003DataPerformanceIssue : IEquatable<InlineResponse2003DataPerformanceIssue>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="InlineResponse2003DataPerformanceIssue" /> class.
        /// </summary>
        /// <param name="ask">ask.</param>
        /// <param name="bid">bid.</param>
        public InlineResponse2003DataPerformanceIssue(InlineResponse2003DataPerformanceIssueAsk ask = default(InlineResponse2003DataPerformanceIssueAsk), InlineResponse2003DataPerformanceIssueBid bid = default(InlineResponse2003DataPerformanceIssueBid))
        {
            this.Ask = ask;
            this.Bid = bid;
        }

        /// <summary>
        /// Gets or Sets Ask
        /// </summary>
        [DataMember(Name = "ask", EmitDefaultValue = false)]
        public InlineResponse2003DataPerformanceIssueAsk Ask { get; set; }

        /// <summary>
        /// Gets or Sets Bid
        /// </summary>
        [DataMember(Name = "bid", EmitDefaultValue = false)]
        public InlineResponse2003DataPerformanceIssueBid Bid { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class InlineResponse2003DataPerformanceIssue {\n");
            sb.Append("  Ask: ").Append(Ask).Append("\n");
            sb.Append("  Bid: ").Append(Bid).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as InlineResponse2003DataPerformanceIssue);
        }

        /// <summary>
        /// Returns true if InlineResponse2003DataPerformanceIssue instances are equal
        /// </summary>
        /// <param name="input">Instance of InlineResponse2003DataPerformanceIssue to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(InlineResponse2003DataPerformanceIssue input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Ask == input.Ask ||
                    (this.Ask != null &&
                    this.Ask.Equals(input.Ask))
                ) && 
                (
                    this.Bid == input.Bid ||
                    (this.Bid != null &&
                    this.Bid.Equals(input.Bid))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Ask != null)
                    hashCode = hashCode * 59 + this.Ask.GetHashCode();
                if (this.Bid != null)
                    hashCode = hashCode * 59 + this.Bid.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
