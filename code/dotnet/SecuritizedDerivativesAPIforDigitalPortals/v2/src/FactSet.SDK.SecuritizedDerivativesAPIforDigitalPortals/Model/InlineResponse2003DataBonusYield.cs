/*
 * Prime Developer Trial
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = FactSet.SDK.SecuritizedDerivativesAPIforDigitalPortals.Client.OpenAPIDateConverter;

namespace FactSet.SDK.SecuritizedDerivativesAPIforDigitalPortals.Model
{
    /// <summary>
    /// Bonus yield based on the ask price. It represents the bonus level adjusted for the cover ratio and currency cross rate minus the ask price of the securitized derivative. The value can become negative (e.g. for uncapped products), which does not mean that the investor will necessarily suffer a loss buying it. This key figure is calculated for bonus certificates with intact knock-in barrier only. For the barrier breach of barriers with a single limit, see attribute &#x60;barrierTypeConditions.barriers.single.breach.isBreached&#x60; in endpoint &#x60;/securitizedDerivative/underlying/list&#x60;, for the breach of the up and down limit of range barriers see attribute &#x60;barrierTypeConditions.barriers.range.up/down.breach.isBreached&#x60; respectively.
    /// </summary>
    [DataContract(Name = "inline_response_200_3_data_bonusYield")]
    public partial class InlineResponse2003DataBonusYield : IEquatable<InlineResponse2003DataBonusYield>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="InlineResponse2003DataBonusYield" /> class.
        /// </summary>
        /// <param name="absolute">Bonus yield in absolute terms..</param>
        /// <param name="relative">Bonus yield relative to the ask price..</param>
        /// <param name="annualized">Annualized bonus yield relative to the ask price..</param>
        public InlineResponse2003DataBonusYield(decimal absolute = default(decimal), decimal relative = default(decimal), decimal annualized = default(decimal))
        {
            this.Absolute = absolute;
            this.Relative = relative;
            this.Annualized = annualized;
        }

        /// <summary>
        /// Bonus yield in absolute terms.
        /// </summary>
        /// <value>Bonus yield in absolute terms.</value>
        [DataMember(Name = "absolute", EmitDefaultValue = false)]
        public decimal Absolute { get; set; }

        /// <summary>
        /// Bonus yield relative to the ask price.
        /// </summary>
        /// <value>Bonus yield relative to the ask price.</value>
        [DataMember(Name = "relative", EmitDefaultValue = false)]
        public decimal Relative { get; set; }

        /// <summary>
        /// Annualized bonus yield relative to the ask price.
        /// </summary>
        /// <value>Annualized bonus yield relative to the ask price.</value>
        [DataMember(Name = "annualized", EmitDefaultValue = false)]
        public decimal Annualized { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class InlineResponse2003DataBonusYield {\n");
            sb.Append("  Absolute: ").Append(Absolute).Append("\n");
            sb.Append("  Relative: ").Append(Relative).Append("\n");
            sb.Append("  Annualized: ").Append(Annualized).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as InlineResponse2003DataBonusYield);
        }

        /// <summary>
        /// Returns true if InlineResponse2003DataBonusYield instances are equal
        /// </summary>
        /// <param name="input">Instance of InlineResponse2003DataBonusYield to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(InlineResponse2003DataBonusYield input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Absolute == input.Absolute ||
                    this.Absolute.Equals(input.Absolute)
                ) && 
                (
                    this.Relative == input.Relative ||
                    this.Relative.Equals(input.Relative)
                ) && 
                (
                    this.Annualized == input.Annualized ||
                    this.Annualized.Equals(input.Annualized)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.Absolute.GetHashCode();
                hashCode = (hashCode * 59) + this.Relative.GetHashCode();
                hashCode = (hashCode * 59) + this.Annualized.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
