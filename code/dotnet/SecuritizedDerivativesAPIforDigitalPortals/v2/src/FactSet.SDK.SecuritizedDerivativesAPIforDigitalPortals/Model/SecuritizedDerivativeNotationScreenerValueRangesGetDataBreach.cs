/*
 * Prime Developer Trial
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = FactSet.SDK.SecuritizedDerivativesAPIforDigitalPortals.Client.OpenAPIDateConverter;

namespace FactSet.SDK.SecuritizedDerivativesAPIforDigitalPortals.Model
{
    /// <summary>
    /// Parameters related to a barrier breach; applicable to the following barrier types: &#x60;knockIn&#x60; and &#x60;knockOut&#x60;
    /// </summary>
    [DataContract(Name = "_securitizedDerivative_notation_screener_valueRanges_get_data_breach")]
    public partial class SecuritizedDerivativeNotationScreenerValueRangesGetDataBreach : IEquatable<SecuritizedDerivativeNotationScreenerValueRangesGetDataBreach>, IValidatableObject
    {
        /// <summary>
        /// Defines whether or not securitized derivatives for which the barrier has been breached are included in the result.
        /// </summary>
        /// <value>Defines whether or not securitized derivatives for which the barrier has been breached are included in the result.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum BreachedEnum
        {
            /// <summary>
            /// Enum All for value: all
            /// </summary>
            [EnumMember(Value = "all")]
            All = 1,

            /// <summary>
            /// Enum Only for value: only
            /// </summary>
            [EnumMember(Value = "only")]
            Only = 2,

            /// <summary>
            /// Enum Exclude for value: exclude
            /// </summary>
            [EnumMember(Value = "exclude")]
            Exclude = 3

        }


        /// <summary>
        /// Defines whether or not securitized derivatives for which the barrier has been breached are included in the result.
        /// </summary>
        /// <value>Defines whether or not securitized derivatives for which the barrier has been breached are included in the result.</value>
        [DataMember(Name = "breached", EmitDefaultValue = false)]
        public BreachedEnum? Breached { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="SecuritizedDerivativeNotationScreenerValueRangesGetDataBreach" /> class.
        /// </summary>
        /// <param name="breached">Defines whether or not securitized derivatives for which the barrier has been breached are included in the result. (default to BreachedEnum.Exclude).</param>
        public SecuritizedDerivativeNotationScreenerValueRangesGetDataBreach(BreachedEnum? breached = BreachedEnum.Exclude)
        {
            this.Breached = breached;
        }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SecuritizedDerivativeNotationScreenerValueRangesGetDataBreach {\n");
            sb.Append("  Breached: ").Append(Breached).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SecuritizedDerivativeNotationScreenerValueRangesGetDataBreach);
        }

        /// <summary>
        /// Returns true if SecuritizedDerivativeNotationScreenerValueRangesGetDataBreach instances are equal
        /// </summary>
        /// <param name="input">Instance of SecuritizedDerivativeNotationScreenerValueRangesGetDataBreach to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SecuritizedDerivativeNotationScreenerValueRangesGetDataBreach input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Breached == input.Breached ||
                    this.Breached.Equals(input.Breached)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.Breached.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
