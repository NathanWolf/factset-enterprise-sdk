/*
 * Prime Developer Trial
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = FactSet.SDK.SecuritizedDerivativesAPIforDigitalPortals.Client.OpenAPIDateConverter;

namespace FactSet.SDK.SecuritizedDerivativesAPIforDigitalPortals.Model
{
    /// <summary>
    /// Conditions on the order volume for placing an order with the issuer.
    /// </summary>
    [DataContract(Name = "inline_response_200_data_orderVolume")]
    public partial class InlineResponse200DataOrderVolume : IEquatable<InlineResponse200DataOrderVolume>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="InlineResponse200DataOrderVolume" /> class.
        /// </summary>
        /// <param name="minimum">Minimum order volume required for placing an order at the trading venue of the notation for the given market phase..</param>
        /// <param name="increment">Increment of the order volume over the minimum (see attribute inimumOrderVolumeSecDer) required for placing an order at the respective trading venue. The order volume over the minimum must be an integral multiple of the increment. The value unit for this attribute is the same as for the attribute tradingVolumeLatestTradePrice..</param>
        public InlineResponse200DataOrderVolume(decimal minimum = default(decimal), decimal increment = default(decimal))
        {
            this.Minimum = minimum;
            this.Increment = increment;
        }

        /// <summary>
        /// Minimum order volume required for placing an order at the trading venue of the notation for the given market phase.
        /// </summary>
        /// <value>Minimum order volume required for placing an order at the trading venue of the notation for the given market phase.</value>
        [DataMember(Name = "minimum", EmitDefaultValue = false)]
        public decimal Minimum { get; set; }

        /// <summary>
        /// Increment of the order volume over the minimum (see attribute inimumOrderVolumeSecDer) required for placing an order at the respective trading venue. The order volume over the minimum must be an integral multiple of the increment. The value unit for this attribute is the same as for the attribute tradingVolumeLatestTradePrice.
        /// </summary>
        /// <value>Increment of the order volume over the minimum (see attribute inimumOrderVolumeSecDer) required for placing an order at the respective trading venue. The order volume over the minimum must be an integral multiple of the increment. The value unit for this attribute is the same as for the attribute tradingVolumeLatestTradePrice.</value>
        [DataMember(Name = "increment", EmitDefaultValue = false)]
        public decimal Increment { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class InlineResponse200DataOrderVolume {\n");
            sb.Append("  Minimum: ").Append(Minimum).Append("\n");
            sb.Append("  Increment: ").Append(Increment).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as InlineResponse200DataOrderVolume);
        }

        /// <summary>
        /// Returns true if InlineResponse200DataOrderVolume instances are equal
        /// </summary>
        /// <param name="input">Instance of InlineResponse200DataOrderVolume to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(InlineResponse200DataOrderVolume input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Minimum == input.Minimum ||
                    this.Minimum.Equals(input.Minimum)
                ) && 
                (
                    this.Increment == input.Increment ||
                    this.Increment.Equals(input.Increment)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = hashCode * 59 + this.Minimum.GetHashCode();
                hashCode = hashCode * 59 + this.Increment.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
