/*
 * Prime Developer Trial
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = FactSet.SDK.SecuritizedDerivativesAPIforDigitalPortals.Client.OpenAPIDateConverter;

namespace FactSet.SDK.SecuritizedDerivativesAPIforDigitalPortals.Model
{
    /// <summary>
    /// The data member contains the request&#39;s primary data.
    /// </summary>
    [DataContract(Name = "_securitizedDerivative_notation_ranking_intraday_list_data")]
    public partial class SecuritizedDerivativeNotationRankingIntradayListData : IEquatable<SecuritizedDerivativeNotationRankingIntradayListData>, IValidatableObject
    {
        /// <summary>
        /// Specifies whether knocked-out securitized derivatives are included in the response. Particularly relevant for knock-out certificates.
        /// </summary>
        /// <value>Specifies whether knocked-out securitized derivatives are included in the response. Particularly relevant for knock-out certificates.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum KnockedOutEnum
        {
            /// <summary>
            /// Enum Only for value: only
            /// </summary>
            [EnumMember(Value = "only")]
            Only = 1,

            /// <summary>
            /// Enum Include for value: include
            /// </summary>
            [EnumMember(Value = "include")]
            Include = 2,

            /// <summary>
            /// Enum Exclude for value: exclude
            /// </summary>
            [EnumMember(Value = "exclude")]
            Exclude = 3

        }


        /// <summary>
        /// Specifies whether knocked-out securitized derivatives are included in the response. Particularly relevant for knock-out certificates.
        /// </summary>
        /// <value>Specifies whether knocked-out securitized derivatives are included in the response. Particularly relevant for knock-out certificates.</value>
        [DataMember(Name = "knockedOut", EmitDefaultValue = false)]
        public KnockedOutEnum? KnockedOut { get; set; }
        /// <summary>
        /// Specifies whether knocked-in securitized derivatives are included in the response. Particularly relevant for bonus certificates but also for securitized derivatives that might have additional protection such as reverse convertible bonds, discount certificates, and capital-protection certificates.
        /// </summary>
        /// <value>Specifies whether knocked-in securitized derivatives are included in the response. Particularly relevant for bonus certificates but also for securitized derivatives that might have additional protection such as reverse convertible bonds, discount certificates, and capital-protection certificates.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum KnockedInEnum
        {
            /// <summary>
            /// Enum Only for value: only
            /// </summary>
            [EnumMember(Value = "only")]
            Only = 1,

            /// <summary>
            /// Enum Include for value: include
            /// </summary>
            [EnumMember(Value = "include")]
            Include = 2,

            /// <summary>
            /// Enum Exclude for value: exclude
            /// </summary>
            [EnumMember(Value = "exclude")]
            Exclude = 3

        }


        /// <summary>
        /// Specifies whether knocked-in securitized derivatives are included in the response. Particularly relevant for bonus certificates but also for securitized derivatives that might have additional protection such as reverse convertible bonds, discount certificates, and capital-protection certificates.
        /// </summary>
        /// <value>Specifies whether knocked-in securitized derivatives are included in the response. Particularly relevant for bonus certificates but also for securitized derivatives that might have additional protection such as reverse convertible bonds, discount certificates, and capital-protection certificates.</value>
        [DataMember(Name = "knockedIn", EmitDefaultValue = false)]
        public KnockedInEnum? KnockedIn { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="SecuritizedDerivativeNotationRankingIntradayListData" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected SecuritizedDerivativeNotationRankingIntradayListData() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="SecuritizedDerivativeNotationRankingIntradayListData" /> class.
        /// </summary>
        /// <param name="prices">prices.</param>
        /// <param name="valueUnit">valueUnit.</param>
        /// <param name="currency">currency.</param>
        /// <param name="market">market (required).</param>
        /// <param name="instrumentRestrictionList">instrumentRestrictionList.</param>
        /// <param name="notationRestrictionList">notationRestrictionList.</param>
        /// <param name="category">category.</param>
        /// <param name="registrationCountry">registrationCountry.</param>
        /// <param name="lifeCycle">lifeCycle.</param>
        /// <param name="issuer">issuer.</param>
        /// <param name="exercise">exercise.</param>
        /// <param name="underlying">underlying.</param>
        /// <param name="factorCertificates">factorCertificates.</param>
        /// <param name="knockedOut">Specifies whether knocked-out securitized derivatives are included in the response. Particularly relevant for knock-out certificates. (default to KnockedOutEnum.Exclude).</param>
        /// <param name="knockedIn">Specifies whether knocked-in securitized derivatives are included in the response. Particularly relevant for bonus certificates but also for securitized derivatives that might have additional protection such as reverse convertible bonds, discount certificates, and capital-protection certificates. (default to KnockedInEnum.Exclude).</param>
        /// <param name="performance">performance.</param>
        public SecuritizedDerivativeNotationRankingIntradayListData(SecuritizedDerivativeNotationRankingIntradayListDataPrices prices = default(SecuritizedDerivativeNotationRankingIntradayListDataPrices), SecuritizedDerivativeNotationRankingIntradayListDataValueUnit valueUnit = default(SecuritizedDerivativeNotationRankingIntradayListDataValueUnit), SecuritizedDerivativeNotationRankingIntradayListDataCurrency currency = default(SecuritizedDerivativeNotationRankingIntradayListDataCurrency), SecuritizedDerivativeNotationRankingIntradayListDataMarket market = default(SecuritizedDerivativeNotationRankingIntradayListDataMarket), SecuritizedDerivativeNotationRankingIntradayListDataInstrumentRestrictionList instrumentRestrictionList = default(SecuritizedDerivativeNotationRankingIntradayListDataInstrumentRestrictionList), SecuritizedDerivativeNotationRankingIntradayListDataNotationRestrictionList notationRestrictionList = default(SecuritizedDerivativeNotationRankingIntradayListDataNotationRestrictionList), SecuritizedDerivativeNotationRankingIntradayListDataCategory category = default(SecuritizedDerivativeNotationRankingIntradayListDataCategory), SecuritizedDerivativeNotationRankingIntradayListDataRegistrationCountry registrationCountry = default(SecuritizedDerivativeNotationRankingIntradayListDataRegistrationCountry), SecuritizedDerivativeNotationRankingIntradayListDataLifeCycle lifeCycle = default(SecuritizedDerivativeNotationRankingIntradayListDataLifeCycle), SecuritizedDerivativeNotationRankingIntradayListDataIssuer issuer = default(SecuritizedDerivativeNotationRankingIntradayListDataIssuer), SecuritizedDerivativeNotationRankingIntradayListDataExercise exercise = default(SecuritizedDerivativeNotationRankingIntradayListDataExercise), SecuritizedDerivativeNotationRankingIntradayListDataUnderlying underlying = default(SecuritizedDerivativeNotationRankingIntradayListDataUnderlying), SecuritizedDerivativeNotationRankingIntradayListDataFactorCertificates factorCertificates = default(SecuritizedDerivativeNotationRankingIntradayListDataFactorCertificates), KnockedOutEnum? knockedOut = KnockedOutEnum.Exclude, KnockedInEnum? knockedIn = KnockedInEnum.Exclude, SecuritizedDerivativeNotationRankingIntradayListDataPerformance performance = default(SecuritizedDerivativeNotationRankingIntradayListDataPerformance))
        {
            // to ensure "market" is required (not null)
            if (market == null) {
                throw new ArgumentNullException("market is a required property for SecuritizedDerivativeNotationRankingIntradayListData and cannot be null");
            }
            this.Market = market;
            this.Prices = prices;
            this.ValueUnit = valueUnit;
            this.Currency = currency;
            this.InstrumentRestrictionList = instrumentRestrictionList;
            this.NotationRestrictionList = notationRestrictionList;
            this.Category = category;
            this.RegistrationCountry = registrationCountry;
            this.LifeCycle = lifeCycle;
            this.Issuer = issuer;
            this.Exercise = exercise;
            this.Underlying = underlying;
            this.FactorCertificates = factorCertificates;
            this.KnockedOut = knockedOut;
            this.KnockedIn = knockedIn;
            this.Performance = performance;
        }

        /// <summary>
        /// Gets or Sets Prices
        /// </summary>
        [DataMember(Name = "prices", EmitDefaultValue = false)]
        public SecuritizedDerivativeNotationRankingIntradayListDataPrices Prices { get; set; }

        /// <summary>
        /// Gets or Sets ValueUnit
        /// </summary>
        [DataMember(Name = "valueUnit", EmitDefaultValue = false)]
        public SecuritizedDerivativeNotationRankingIntradayListDataValueUnit ValueUnit { get; set; }

        /// <summary>
        /// Gets or Sets Currency
        /// </summary>
        [DataMember(Name = "currency", EmitDefaultValue = false)]
        public SecuritizedDerivativeNotationRankingIntradayListDataCurrency Currency { get; set; }

        /// <summary>
        /// Gets or Sets Market
        /// </summary>
        [DataMember(Name = "market", IsRequired = true, EmitDefaultValue = false)]
        public SecuritizedDerivativeNotationRankingIntradayListDataMarket Market { get; set; }

        /// <summary>
        /// Gets or Sets InstrumentRestrictionList
        /// </summary>
        [DataMember(Name = "instrumentRestrictionList", EmitDefaultValue = false)]
        public SecuritizedDerivativeNotationRankingIntradayListDataInstrumentRestrictionList InstrumentRestrictionList { get; set; }

        /// <summary>
        /// Gets or Sets NotationRestrictionList
        /// </summary>
        [DataMember(Name = "notationRestrictionList", EmitDefaultValue = false)]
        public SecuritizedDerivativeNotationRankingIntradayListDataNotationRestrictionList NotationRestrictionList { get; set; }

        /// <summary>
        /// Gets or Sets Category
        /// </summary>
        [DataMember(Name = "category", EmitDefaultValue = false)]
        public SecuritizedDerivativeNotationRankingIntradayListDataCategory Category { get; set; }

        /// <summary>
        /// Gets or Sets RegistrationCountry
        /// </summary>
        [DataMember(Name = "registrationCountry", EmitDefaultValue = false)]
        public SecuritizedDerivativeNotationRankingIntradayListDataRegistrationCountry RegistrationCountry { get; set; }

        /// <summary>
        /// Gets or Sets LifeCycle
        /// </summary>
        [DataMember(Name = "lifeCycle", EmitDefaultValue = false)]
        public SecuritizedDerivativeNotationRankingIntradayListDataLifeCycle LifeCycle { get; set; }

        /// <summary>
        /// Gets or Sets Issuer
        /// </summary>
        [DataMember(Name = "issuer", EmitDefaultValue = false)]
        public SecuritizedDerivativeNotationRankingIntradayListDataIssuer Issuer { get; set; }

        /// <summary>
        /// Gets or Sets Exercise
        /// </summary>
        [DataMember(Name = "exercise", EmitDefaultValue = false)]
        public SecuritizedDerivativeNotationRankingIntradayListDataExercise Exercise { get; set; }

        /// <summary>
        /// Gets or Sets Underlying
        /// </summary>
        [DataMember(Name = "underlying", EmitDefaultValue = false)]
        public SecuritizedDerivativeNotationRankingIntradayListDataUnderlying Underlying { get; set; }

        /// <summary>
        /// Gets or Sets FactorCertificates
        /// </summary>
        [DataMember(Name = "factorCertificates", EmitDefaultValue = false)]
        public SecuritizedDerivativeNotationRankingIntradayListDataFactorCertificates FactorCertificates { get; set; }

        /// <summary>
        /// Gets or Sets Performance
        /// </summary>
        [DataMember(Name = "performance", EmitDefaultValue = false)]
        public SecuritizedDerivativeNotationRankingIntradayListDataPerformance Performance { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SecuritizedDerivativeNotationRankingIntradayListData {\n");
            sb.Append("  Prices: ").Append(Prices).Append("\n");
            sb.Append("  ValueUnit: ").Append(ValueUnit).Append("\n");
            sb.Append("  Currency: ").Append(Currency).Append("\n");
            sb.Append("  Market: ").Append(Market).Append("\n");
            sb.Append("  InstrumentRestrictionList: ").Append(InstrumentRestrictionList).Append("\n");
            sb.Append("  NotationRestrictionList: ").Append(NotationRestrictionList).Append("\n");
            sb.Append("  Category: ").Append(Category).Append("\n");
            sb.Append("  RegistrationCountry: ").Append(RegistrationCountry).Append("\n");
            sb.Append("  LifeCycle: ").Append(LifeCycle).Append("\n");
            sb.Append("  Issuer: ").Append(Issuer).Append("\n");
            sb.Append("  Exercise: ").Append(Exercise).Append("\n");
            sb.Append("  Underlying: ").Append(Underlying).Append("\n");
            sb.Append("  FactorCertificates: ").Append(FactorCertificates).Append("\n");
            sb.Append("  KnockedOut: ").Append(KnockedOut).Append("\n");
            sb.Append("  KnockedIn: ").Append(KnockedIn).Append("\n");
            sb.Append("  Performance: ").Append(Performance).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SecuritizedDerivativeNotationRankingIntradayListData);
        }

        /// <summary>
        /// Returns true if SecuritizedDerivativeNotationRankingIntradayListData instances are equal
        /// </summary>
        /// <param name="input">Instance of SecuritizedDerivativeNotationRankingIntradayListData to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SecuritizedDerivativeNotationRankingIntradayListData input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Prices == input.Prices ||
                    (this.Prices != null &&
                    this.Prices.Equals(input.Prices))
                ) && 
                (
                    this.ValueUnit == input.ValueUnit ||
                    (this.ValueUnit != null &&
                    this.ValueUnit.Equals(input.ValueUnit))
                ) && 
                (
                    this.Currency == input.Currency ||
                    (this.Currency != null &&
                    this.Currency.Equals(input.Currency))
                ) && 
                (
                    this.Market == input.Market ||
                    (this.Market != null &&
                    this.Market.Equals(input.Market))
                ) && 
                (
                    this.InstrumentRestrictionList == input.InstrumentRestrictionList ||
                    (this.InstrumentRestrictionList != null &&
                    this.InstrumentRestrictionList.Equals(input.InstrumentRestrictionList))
                ) && 
                (
                    this.NotationRestrictionList == input.NotationRestrictionList ||
                    (this.NotationRestrictionList != null &&
                    this.NotationRestrictionList.Equals(input.NotationRestrictionList))
                ) && 
                (
                    this.Category == input.Category ||
                    (this.Category != null &&
                    this.Category.Equals(input.Category))
                ) && 
                (
                    this.RegistrationCountry == input.RegistrationCountry ||
                    (this.RegistrationCountry != null &&
                    this.RegistrationCountry.Equals(input.RegistrationCountry))
                ) && 
                (
                    this.LifeCycle == input.LifeCycle ||
                    (this.LifeCycle != null &&
                    this.LifeCycle.Equals(input.LifeCycle))
                ) && 
                (
                    this.Issuer == input.Issuer ||
                    (this.Issuer != null &&
                    this.Issuer.Equals(input.Issuer))
                ) && 
                (
                    this.Exercise == input.Exercise ||
                    (this.Exercise != null &&
                    this.Exercise.Equals(input.Exercise))
                ) && 
                (
                    this.Underlying == input.Underlying ||
                    (this.Underlying != null &&
                    this.Underlying.Equals(input.Underlying))
                ) && 
                (
                    this.FactorCertificates == input.FactorCertificates ||
                    (this.FactorCertificates != null &&
                    this.FactorCertificates.Equals(input.FactorCertificates))
                ) && 
                (
                    this.KnockedOut == input.KnockedOut ||
                    this.KnockedOut.Equals(input.KnockedOut)
                ) && 
                (
                    this.KnockedIn == input.KnockedIn ||
                    this.KnockedIn.Equals(input.KnockedIn)
                ) && 
                (
                    this.Performance == input.Performance ||
                    (this.Performance != null &&
                    this.Performance.Equals(input.Performance))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Prices != null)
                {
                    hashCode = (hashCode * 59) + this.Prices.GetHashCode();
                }
                if (this.ValueUnit != null)
                {
                    hashCode = (hashCode * 59) + this.ValueUnit.GetHashCode();
                }
                if (this.Currency != null)
                {
                    hashCode = (hashCode * 59) + this.Currency.GetHashCode();
                }
                if (this.Market != null)
                {
                    hashCode = (hashCode * 59) + this.Market.GetHashCode();
                }
                if (this.InstrumentRestrictionList != null)
                {
                    hashCode = (hashCode * 59) + this.InstrumentRestrictionList.GetHashCode();
                }
                if (this.NotationRestrictionList != null)
                {
                    hashCode = (hashCode * 59) + this.NotationRestrictionList.GetHashCode();
                }
                if (this.Category != null)
                {
                    hashCode = (hashCode * 59) + this.Category.GetHashCode();
                }
                if (this.RegistrationCountry != null)
                {
                    hashCode = (hashCode * 59) + this.RegistrationCountry.GetHashCode();
                }
                if (this.LifeCycle != null)
                {
                    hashCode = (hashCode * 59) + this.LifeCycle.GetHashCode();
                }
                if (this.Issuer != null)
                {
                    hashCode = (hashCode * 59) + this.Issuer.GetHashCode();
                }
                if (this.Exercise != null)
                {
                    hashCode = (hashCode * 59) + this.Exercise.GetHashCode();
                }
                if (this.Underlying != null)
                {
                    hashCode = (hashCode * 59) + this.Underlying.GetHashCode();
                }
                if (this.FactorCertificates != null)
                {
                    hashCode = (hashCode * 59) + this.FactorCertificates.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.KnockedOut.GetHashCode();
                hashCode = (hashCode * 59) + this.KnockedIn.GetHashCode();
                if (this.Performance != null)
                {
                    hashCode = (hashCode * 59) + this.Performance.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
