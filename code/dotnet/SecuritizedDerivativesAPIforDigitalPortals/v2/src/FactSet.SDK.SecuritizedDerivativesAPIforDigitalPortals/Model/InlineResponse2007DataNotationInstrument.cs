/*
 * Prime Developer Trial
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = FactSet.SDK.SecuritizedDerivativesAPIforDigitalPortals.Client.OpenAPIDateConverter;

namespace FactSet.SDK.SecuritizedDerivativesAPIforDigitalPortals.Model
{
    /// <summary>
    /// Instrument of the underlying.
    /// </summary>
    [DataContract(Name = "inline_response_200_7_data_notation_instrument")]
    public partial class InlineResponse2007DataNotationInstrument : IEquatable<InlineResponse2007DataNotationInstrument>, IValidatableObject
    {
        /// <summary>
        /// Type of composite instrument, in case the underlying is a composite instrument.
        /// </summary>
        /// <value>Type of composite instrument, in case the underlying is a composite instrument.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TypeCompositeEnum
        {
            /// <summary>
            /// Enum Basket for value: basket
            /// </summary>
            [EnumMember(Value = "basket")]
            Basket = 1,

            /// <summary>
            /// Enum AlphaStructure for value: alphaStructure
            /// </summary>
            [EnumMember(Value = "alphaStructure")]
            AlphaStructure = 2,

            /// <summary>
            /// Enum FuturesSpread for value: futuresSpread
            /// </summary>
            [EnumMember(Value = "futuresSpread")]
            FuturesSpread = 3,

            /// <summary>
            /// Enum FactorIndex for value: factorIndex
            /// </summary>
            [EnumMember(Value = "factorIndex")]
            FactorIndex = 4

        }


        /// <summary>
        /// Type of composite instrument, in case the underlying is a composite instrument.
        /// </summary>
        /// <value>Type of composite instrument, in case the underlying is a composite instrument.</value>
        [DataMember(Name = "typeComposite", EmitDefaultValue = false)]
        public TypeCompositeEnum? TypeComposite { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="InlineResponse2007DataNotationInstrument" /> class.
        /// </summary>
        /// <param name="id">Identifier of the instrument..</param>
        /// <param name="fsym">fsym.</param>
        /// <param name="typeComposite">Type of composite instrument, in case the underlying is a composite instrument..</param>
        public InlineResponse2007DataNotationInstrument(string id = default(string), InlineResponse2004InstrumentFsym fsym = default(InlineResponse2004InstrumentFsym), TypeCompositeEnum? typeComposite = default(TypeCompositeEnum?))
        {
            this.Id = id;
            this.Fsym = fsym;
            this.TypeComposite = typeComposite;
        }

        /// <summary>
        /// Identifier of the instrument.
        /// </summary>
        /// <value>Identifier of the instrument.</value>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets Fsym
        /// </summary>
        [DataMember(Name = "fsym", EmitDefaultValue = false)]
        public InlineResponse2004InstrumentFsym Fsym { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class InlineResponse2007DataNotationInstrument {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Fsym: ").Append(Fsym).Append("\n");
            sb.Append("  TypeComposite: ").Append(TypeComposite).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as InlineResponse2007DataNotationInstrument);
        }

        /// <summary>
        /// Returns true if InlineResponse2007DataNotationInstrument instances are equal
        /// </summary>
        /// <param name="input">Instance of InlineResponse2007DataNotationInstrument to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(InlineResponse2007DataNotationInstrument input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Fsym == input.Fsym ||
                    (this.Fsym != null &&
                    this.Fsym.Equals(input.Fsym))
                ) && 
                (
                    this.TypeComposite == input.TypeComposite ||
                    this.TypeComposite.Equals(input.TypeComposite)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                {
                    hashCode = (hashCode * 59) + this.Id.GetHashCode();
                }
                if (this.Fsym != null)
                {
                    hashCode = (hashCode * 59) + this.Fsym.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.TypeComposite.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
