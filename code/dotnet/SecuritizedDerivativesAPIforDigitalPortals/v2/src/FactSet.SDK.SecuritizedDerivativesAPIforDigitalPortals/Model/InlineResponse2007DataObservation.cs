/*
 * Prime Developer Trial
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = FactSet.SDK.SecuritizedDerivativesAPIforDigitalPortals.Client.OpenAPIDateConverter;

namespace FactSet.SDK.SecuritizedDerivativesAPIforDigitalPortals.Model
{
    /// <summary>
    /// Barrier observation modality of the condition.
    /// </summary>
    [DataContract(Name = "inline_response_200_7_data_observation")]
    public partial class InlineResponse2007DataObservation : IEquatable<InlineResponse2007DataObservation>, IValidatableObject
    {
        /// <summary>
        /// Identifier of the type of observation during the observation period.
        /// </summary>
        /// <value>Identifier of the type of observation during the observation period.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TypeEnum
        {
            /// <summary>
            /// Enum Continuous for value: continuous
            /// </summary>
            [EnumMember(Value = "continuous")]
            Continuous = 1,

            /// <summary>
            /// Enum Eod for value: eod
            /// </summary>
            [EnumMember(Value = "eod")]
            Eod = 2

        }


        /// <summary>
        /// Identifier of the type of observation during the observation period.
        /// </summary>
        /// <value>Identifier of the type of observation during the observation period.</value>
        [DataMember(Name = "type", EmitDefaultValue = false)]
        public TypeEnum? Type { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="InlineResponse2007DataObservation" /> class.
        /// </summary>
        /// <param name="type">Identifier of the type of observation during the observation period..</param>
        /// <param name="period">period.</param>
        public InlineResponse2007DataObservation(TypeEnum? type = default(TypeEnum?), InlineResponse2007DataObservationPeriod period = default(InlineResponse2007DataObservationPeriod))
        {
            this.Type = type;
            this.Period = period;
        }

        /// <summary>
        /// Gets or Sets Period
        /// </summary>
        [DataMember(Name = "period", EmitDefaultValue = false)]
        public InlineResponse2007DataObservationPeriod Period { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class InlineResponse2007DataObservation {\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Period: ").Append(Period).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as InlineResponse2007DataObservation);
        }

        /// <summary>
        /// Returns true if InlineResponse2007DataObservation instances are equal
        /// </summary>
        /// <param name="input">Instance of InlineResponse2007DataObservation to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(InlineResponse2007DataObservation input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Type == input.Type ||
                    this.Type.Equals(input.Type)
                ) && 
                (
                    this.Period == input.Period ||
                    (this.Period != null &&
                    this.Period.Equals(input.Period))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.Period != null)
                    hashCode = hashCode * 59 + this.Period.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
