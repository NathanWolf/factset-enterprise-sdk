/*
 * Prime Developer Trial
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = FactSet.SDK.SecuritizedDerivativesAPIforDigitalPortals.Client.OpenAPIDateConverter;

namespace FactSet.SDK.SecuritizedDerivativesAPIforDigitalPortals.Model
{
    /// <summary>
    /// Range knock-out of the securitized derivative.
    /// </summary>
    [DataContract(Name = "inline_response_200_6_instrument_rangeKnockOut")]
    public partial class InlineResponse2006InstrumentRangeKnockOut : IEquatable<InlineResponse2006InstrumentRangeKnockOut>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="InlineResponse2006InstrumentRangeKnockOut" /> class.
        /// </summary>
        /// <param name="observation">observation.</param>
        /// <param name="upper">upper.</param>
        /// <param name="lower">lower.</param>
        /// <param name="breach">breach.</param>
        /// <param name="cashFlow">Cash flow amount..</param>
        public InlineResponse2006InstrumentRangeKnockOut(InlineResponse2006InstrumentKnockOutObservation observation = default(InlineResponse2006InstrumentKnockOutObservation), InlineResponse2006InstrumentRangeKnockOutUpper upper = default(InlineResponse2006InstrumentRangeKnockOutUpper), InlineResponse2006InstrumentRangeKnockOutLower lower = default(InlineResponse2006InstrumentRangeKnockOutLower), InlineResponse2006InstrumentKnockOutBreach breach = default(InlineResponse2006InstrumentKnockOutBreach), decimal cashFlow = default(decimal))
        {
            this.Observation = observation;
            this.Upper = upper;
            this.Lower = lower;
            this.Breach = breach;
            this.CashFlow = cashFlow;
        }

        /// <summary>
        /// Gets or Sets Observation
        /// </summary>
        [DataMember(Name = "observation", EmitDefaultValue = false)]
        public InlineResponse2006InstrumentKnockOutObservation Observation { get; set; }

        /// <summary>
        /// Gets or Sets Upper
        /// </summary>
        [DataMember(Name = "upper", EmitDefaultValue = false)]
        public InlineResponse2006InstrumentRangeKnockOutUpper Upper { get; set; }

        /// <summary>
        /// Gets or Sets Lower
        /// </summary>
        [DataMember(Name = "lower", EmitDefaultValue = false)]
        public InlineResponse2006InstrumentRangeKnockOutLower Lower { get; set; }

        /// <summary>
        /// Gets or Sets Breach
        /// </summary>
        [DataMember(Name = "breach", EmitDefaultValue = false)]
        public InlineResponse2006InstrumentKnockOutBreach Breach { get; set; }

        /// <summary>
        /// Cash flow amount.
        /// </summary>
        /// <value>Cash flow amount.</value>
        [DataMember(Name = "cashFlow", EmitDefaultValue = false)]
        public decimal CashFlow { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class InlineResponse2006InstrumentRangeKnockOut {\n");
            sb.Append("  Observation: ").Append(Observation).Append("\n");
            sb.Append("  Upper: ").Append(Upper).Append("\n");
            sb.Append("  Lower: ").Append(Lower).Append("\n");
            sb.Append("  Breach: ").Append(Breach).Append("\n");
            sb.Append("  CashFlow: ").Append(CashFlow).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as InlineResponse2006InstrumentRangeKnockOut);
        }

        /// <summary>
        /// Returns true if InlineResponse2006InstrumentRangeKnockOut instances are equal
        /// </summary>
        /// <param name="input">Instance of InlineResponse2006InstrumentRangeKnockOut to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(InlineResponse2006InstrumentRangeKnockOut input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Observation == input.Observation ||
                    (this.Observation != null &&
                    this.Observation.Equals(input.Observation))
                ) && 
                (
                    this.Upper == input.Upper ||
                    (this.Upper != null &&
                    this.Upper.Equals(input.Upper))
                ) && 
                (
                    this.Lower == input.Lower ||
                    (this.Lower != null &&
                    this.Lower.Equals(input.Lower))
                ) && 
                (
                    this.Breach == input.Breach ||
                    (this.Breach != null &&
                    this.Breach.Equals(input.Breach))
                ) && 
                (
                    this.CashFlow == input.CashFlow ||
                    this.CashFlow.Equals(input.CashFlow)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Observation != null)
                {
                    hashCode = (hashCode * 59) + this.Observation.GetHashCode();
                }
                if (this.Upper != null)
                {
                    hashCode = (hashCode * 59) + this.Upper.GetHashCode();
                }
                if (this.Lower != null)
                {
                    hashCode = (hashCode * 59) + this.Lower.GetHashCode();
                }
                if (this.Breach != null)
                {
                    hashCode = (hashCode * 59) + this.Breach.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.CashFlow.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
