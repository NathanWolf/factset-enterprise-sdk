/*
 * Prime Developer Trial
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = FactSet.SDK.SecuritizedDerivativesAPIforDigitalPortals.Client.OpenAPIDateConverter;

namespace FactSet.SDK.SecuritizedDerivativesAPIforDigitalPortals.Model
{
    /// <summary>
    /// Important dates of the instrument.
    /// </summary>
    [DataContract(Name = "inline_response_200_data_lifeCycle")]
    public partial class InlineResponse200DataLifeCycle : IEquatable<InlineResponse200DataLifeCycle>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="InlineResponse200DataLifeCycle" /> class.
        /// </summary>
        /// <param name="subscriptionPeriod">subscriptionPeriod.</param>
        /// <param name="valutaIssue">Date by which the issuer requires receiving the purchase price for a newly issued product purchased during the subscription period..</param>
        /// <param name="initialFixing">Date of the initial fixing..</param>
        /// <param name="issue">Date of the issue..</param>
        /// <param name="intradayActivation">intradayActivation.</param>
        /// <param name="tradingPeriod">tradingPeriod.</param>
        /// <param name="startExercisePeriod">Date of the start of the exercise period, which ends with the valuation..</param>
        /// <param name="valuation">Date of the valuation..</param>
        /// <param name="maturity">maturity.</param>
        /// <param name="repayment">Date of the repayment..</param>
        /// <param name="cancellation">Date of the cancellation day defined by the issuer..</param>
        public InlineResponse200DataLifeCycle(InlineResponse200DataLifeCycleSubscriptionPeriod subscriptionPeriod = default(InlineResponse200DataLifeCycleSubscriptionPeriod), DateTime valutaIssue = default(DateTime), DateTime initialFixing = default(DateTime), DateTime issue = default(DateTime), InlineResponse200DataLifeCycleIntradayActivation intradayActivation = default(InlineResponse200DataLifeCycleIntradayActivation), InlineResponse200DataLifeCycleTradingPeriod tradingPeriod = default(InlineResponse200DataLifeCycleTradingPeriod), DateTime startExercisePeriod = default(DateTime), DateTime valuation = default(DateTime), InlineResponse200DataLifeCycleMaturity maturity = default(InlineResponse200DataLifeCycleMaturity), DateTime repayment = default(DateTime), DateTime cancellation = default(DateTime))
        {
            this.SubscriptionPeriod = subscriptionPeriod;
            this.ValutaIssue = valutaIssue;
            this.InitialFixing = initialFixing;
            this.Issue = issue;
            this.IntradayActivation = intradayActivation;
            this.TradingPeriod = tradingPeriod;
            this.StartExercisePeriod = startExercisePeriod;
            this.Valuation = valuation;
            this.Maturity = maturity;
            this.Repayment = repayment;
            this.Cancellation = cancellation;
        }

        /// <summary>
        /// Gets or Sets SubscriptionPeriod
        /// </summary>
        [DataMember(Name = "subscriptionPeriod", EmitDefaultValue = false)]
        public InlineResponse200DataLifeCycleSubscriptionPeriod SubscriptionPeriod { get; set; }

        /// <summary>
        /// Date by which the issuer requires receiving the purchase price for a newly issued product purchased during the subscription period.
        /// </summary>
        /// <value>Date by which the issuer requires receiving the purchase price for a newly issued product purchased during the subscription period.</value>
        [DataMember(Name = "valutaIssue", EmitDefaultValue = false)]
        [JsonConverter(typeof(OpenAPIDateConverter))]
        public DateTime ValutaIssue { get; set; }

        /// <summary>
        /// Date of the initial fixing.
        /// </summary>
        /// <value>Date of the initial fixing.</value>
        [DataMember(Name = "initialFixing", EmitDefaultValue = false)]
        [JsonConverter(typeof(OpenAPIDateConverter))]
        public DateTime InitialFixing { get; set; }

        /// <summary>
        /// Date of the issue.
        /// </summary>
        /// <value>Date of the issue.</value>
        [DataMember(Name = "issue", EmitDefaultValue = false)]
        [JsonConverter(typeof(OpenAPIDateConverter))]
        public DateTime Issue { get; set; }

        /// <summary>
        /// Gets or Sets IntradayActivation
        /// </summary>
        [DataMember(Name = "intradayActivation", EmitDefaultValue = false)]
        public InlineResponse200DataLifeCycleIntradayActivation IntradayActivation { get; set; }

        /// <summary>
        /// Gets or Sets TradingPeriod
        /// </summary>
        [DataMember(Name = "tradingPeriod", EmitDefaultValue = false)]
        public InlineResponse200DataLifeCycleTradingPeriod TradingPeriod { get; set; }

        /// <summary>
        /// Date of the start of the exercise period, which ends with the valuation.
        /// </summary>
        /// <value>Date of the start of the exercise period, which ends with the valuation.</value>
        [DataMember(Name = "startExercisePeriod", EmitDefaultValue = false)]
        [JsonConverter(typeof(OpenAPIDateConverter))]
        public DateTime StartExercisePeriod { get; set; }

        /// <summary>
        /// Date of the valuation.
        /// </summary>
        /// <value>Date of the valuation.</value>
        [DataMember(Name = "valuation", EmitDefaultValue = false)]
        [JsonConverter(typeof(OpenAPIDateConverter))]
        public DateTime Valuation { get; set; }

        /// <summary>
        /// Gets or Sets Maturity
        /// </summary>
        [DataMember(Name = "maturity", EmitDefaultValue = false)]
        public InlineResponse200DataLifeCycleMaturity Maturity { get; set; }

        /// <summary>
        /// Date of the repayment.
        /// </summary>
        /// <value>Date of the repayment.</value>
        [DataMember(Name = "repayment", EmitDefaultValue = false)]
        [JsonConverter(typeof(OpenAPIDateConverter))]
        public DateTime Repayment { get; set; }

        /// <summary>
        /// Date of the cancellation day defined by the issuer.
        /// </summary>
        /// <value>Date of the cancellation day defined by the issuer.</value>
        [DataMember(Name = "cancellation", EmitDefaultValue = false)]
        [JsonConverter(typeof(OpenAPIDateConverter))]
        public DateTime Cancellation { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class InlineResponse200DataLifeCycle {\n");
            sb.Append("  SubscriptionPeriod: ").Append(SubscriptionPeriod).Append("\n");
            sb.Append("  ValutaIssue: ").Append(ValutaIssue).Append("\n");
            sb.Append("  InitialFixing: ").Append(InitialFixing).Append("\n");
            sb.Append("  Issue: ").Append(Issue).Append("\n");
            sb.Append("  IntradayActivation: ").Append(IntradayActivation).Append("\n");
            sb.Append("  TradingPeriod: ").Append(TradingPeriod).Append("\n");
            sb.Append("  StartExercisePeriod: ").Append(StartExercisePeriod).Append("\n");
            sb.Append("  Valuation: ").Append(Valuation).Append("\n");
            sb.Append("  Maturity: ").Append(Maturity).Append("\n");
            sb.Append("  Repayment: ").Append(Repayment).Append("\n");
            sb.Append("  Cancellation: ").Append(Cancellation).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as InlineResponse200DataLifeCycle);
        }

        /// <summary>
        /// Returns true if InlineResponse200DataLifeCycle instances are equal
        /// </summary>
        /// <param name="input">Instance of InlineResponse200DataLifeCycle to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(InlineResponse200DataLifeCycle input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.SubscriptionPeriod == input.SubscriptionPeriod ||
                    (this.SubscriptionPeriod != null &&
                    this.SubscriptionPeriod.Equals(input.SubscriptionPeriod))
                ) && 
                (
                    this.ValutaIssue == input.ValutaIssue ||
                    (this.ValutaIssue != null &&
                    this.ValutaIssue.Equals(input.ValutaIssue))
                ) && 
                (
                    this.InitialFixing == input.InitialFixing ||
                    (this.InitialFixing != null &&
                    this.InitialFixing.Equals(input.InitialFixing))
                ) && 
                (
                    this.Issue == input.Issue ||
                    (this.Issue != null &&
                    this.Issue.Equals(input.Issue))
                ) && 
                (
                    this.IntradayActivation == input.IntradayActivation ||
                    (this.IntradayActivation != null &&
                    this.IntradayActivation.Equals(input.IntradayActivation))
                ) && 
                (
                    this.TradingPeriod == input.TradingPeriod ||
                    (this.TradingPeriod != null &&
                    this.TradingPeriod.Equals(input.TradingPeriod))
                ) && 
                (
                    this.StartExercisePeriod == input.StartExercisePeriod ||
                    (this.StartExercisePeriod != null &&
                    this.StartExercisePeriod.Equals(input.StartExercisePeriod))
                ) && 
                (
                    this.Valuation == input.Valuation ||
                    (this.Valuation != null &&
                    this.Valuation.Equals(input.Valuation))
                ) && 
                (
                    this.Maturity == input.Maturity ||
                    (this.Maturity != null &&
                    this.Maturity.Equals(input.Maturity))
                ) && 
                (
                    this.Repayment == input.Repayment ||
                    (this.Repayment != null &&
                    this.Repayment.Equals(input.Repayment))
                ) && 
                (
                    this.Cancellation == input.Cancellation ||
                    (this.Cancellation != null &&
                    this.Cancellation.Equals(input.Cancellation))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.SubscriptionPeriod != null)
                    hashCode = hashCode * 59 + this.SubscriptionPeriod.GetHashCode();
                if (this.ValutaIssue != null)
                    hashCode = hashCode * 59 + this.ValutaIssue.GetHashCode();
                if (this.InitialFixing != null)
                    hashCode = hashCode * 59 + this.InitialFixing.GetHashCode();
                if (this.Issue != null)
                    hashCode = hashCode * 59 + this.Issue.GetHashCode();
                if (this.IntradayActivation != null)
                    hashCode = hashCode * 59 + this.IntradayActivation.GetHashCode();
                if (this.TradingPeriod != null)
                    hashCode = hashCode * 59 + this.TradingPeriod.GetHashCode();
                if (this.StartExercisePeriod != null)
                    hashCode = hashCode * 59 + this.StartExercisePeriod.GetHashCode();
                if (this.Valuation != null)
                    hashCode = hashCode * 59 + this.Valuation.GetHashCode();
                if (this.Maturity != null)
                    hashCode = hashCode * 59 + this.Maturity.GetHashCode();
                if (this.Repayment != null)
                    hashCode = hashCode * 59 + this.Repayment.GetHashCode();
                if (this.Cancellation != null)
                    hashCode = hashCode * 59 + this.Cancellation.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
