/*
 * Prime Developer Trial
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = FactSet.SDK.SecuritizedDerivativesAPIforDigitalPortals.Client.OpenAPIDateConverter;

namespace FactSet.SDK.SecuritizedDerivativesAPIforDigitalPortals.Model
{
    /// <summary>
    /// Information whether or not, and if yes - when a barrier breach has occurred.
    /// </summary>
    [DataContract(Name = "inline_response_200_6_instrument_knockOut_breach")]
    public partial class InlineResponse2006InstrumentKnockOutBreach : IEquatable<InlineResponse2006InstrumentKnockOutBreach>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="InlineResponse2006InstrumentKnockOutBreach" /> class.
        /// </summary>
        /// <param name="breached">If &#x60;true&#x60;, the barrier has been breached..</param>
        /// <param name="datetime">Date and time of the breach..</param>
        public InlineResponse2006InstrumentKnockOutBreach(bool breached = default(bool), string datetime = default(string))
        {
            this.Breached = breached;
            this.Datetime = datetime;
        }

        /// <summary>
        /// If &#x60;true&#x60;, the barrier has been breached.
        /// </summary>
        /// <value>If &#x60;true&#x60;, the barrier has been breached.</value>
        [DataMember(Name = "breached", EmitDefaultValue = true)]
        public bool Breached { get; set; }

        /// <summary>
        /// Date and time of the breach.
        /// </summary>
        /// <value>Date and time of the breach.</value>
        [DataMember(Name = "datetime", EmitDefaultValue = false)]
        public string Datetime { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class InlineResponse2006InstrumentKnockOutBreach {\n");
            sb.Append("  Breached: ").Append(Breached).Append("\n");
            sb.Append("  Datetime: ").Append(Datetime).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as InlineResponse2006InstrumentKnockOutBreach);
        }

        /// <summary>
        /// Returns true if InlineResponse2006InstrumentKnockOutBreach instances are equal
        /// </summary>
        /// <param name="input">Instance of InlineResponse2006InstrumentKnockOutBreach to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(InlineResponse2006InstrumentKnockOutBreach input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Breached == input.Breached ||
                    this.Breached.Equals(input.Breached)
                ) && 
                (
                    this.Datetime == input.Datetime ||
                    (this.Datetime != null &&
                    this.Datetime.Equals(input.Datetime))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = hashCode * 59 + this.Breached.GetHashCode();
                if (this.Datetime != null)
                    hashCode = hashCode * 59 + this.Datetime.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
