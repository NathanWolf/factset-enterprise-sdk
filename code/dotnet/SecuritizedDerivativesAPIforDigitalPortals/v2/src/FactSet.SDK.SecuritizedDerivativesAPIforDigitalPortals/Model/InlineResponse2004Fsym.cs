/*
 * Prime Developer Trial
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = FactSet.SDK.SecuritizedDerivativesAPIforDigitalPortals.Client.OpenAPIDateConverter;

namespace FactSet.SDK.SecuritizedDerivativesAPIforDigitalPortals.Model
{
    /// <summary>
    /// Notation-level FactSet identifiers of the financial instrument used primarily in FactSet products other than the MDG.
    /// </summary>
    [DataContract(Name = "inline_response_200_4_fsym")]
    public partial class InlineResponse2004Fsym : IEquatable<InlineResponse2004Fsym>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="InlineResponse2004Fsym" /> class.
        /// </summary>
        /// <param name="listing">listing.</param>
        /// <param name="regional">regional.</param>
        public InlineResponse2004Fsym(InlineResponse2004FsymListing listing = default(InlineResponse2004FsymListing), InlineResponse2004FsymRegional regional = default(InlineResponse2004FsymRegional))
        {
            this.Listing = listing;
            this.Regional = regional;
        }

        /// <summary>
        /// Gets or Sets Listing
        /// </summary>
        [DataMember(Name = "listing", EmitDefaultValue = false)]
        public InlineResponse2004FsymListing Listing { get; set; }

        /// <summary>
        /// Gets or Sets Regional
        /// </summary>
        [DataMember(Name = "regional", EmitDefaultValue = false)]
        public InlineResponse2004FsymRegional Regional { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class InlineResponse2004Fsym {\n");
            sb.Append("  Listing: ").Append(Listing).Append("\n");
            sb.Append("  Regional: ").Append(Regional).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as InlineResponse2004Fsym);
        }

        /// <summary>
        /// Returns true if InlineResponse2004Fsym instances are equal
        /// </summary>
        /// <param name="input">Instance of InlineResponse2004Fsym to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(InlineResponse2004Fsym input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Listing == input.Listing ||
                    (this.Listing != null &&
                    this.Listing.Equals(input.Listing))
                ) && 
                (
                    this.Regional == input.Regional ||
                    (this.Regional != null &&
                    this.Regional.Equals(input.Regional))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Listing != null)
                {
                    hashCode = (hashCode * 59) + this.Listing.GetHashCode();
                }
                if (this.Regional != null)
                {
                    hashCode = (hashCode * 59) + this.Regional.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
