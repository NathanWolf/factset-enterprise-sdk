/*
 * Prime Developer Trial
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = FactSet.SDK.SecuritizedDerivativesAPIforDigitalPortals.Client.OpenAPIDateConverter;

namespace FactSet.SDK.SecuritizedDerivativesAPIforDigitalPortals.Model
{
    /// <summary>
    /// Knock-out of the securitized derivative.
    /// </summary>
    [DataContract(Name = "inline_response_200_6_instrument_knockOut")]
    public partial class InlineResponse2006InstrumentKnockOut : IEquatable<InlineResponse2006InstrumentKnockOut>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="InlineResponse2006InstrumentKnockOut" /> class.
        /// </summary>
        /// <param name="observation">observation.</param>
        /// <param name="value">Value of the knock-out..</param>
        /// <param name="distance">distance.</param>
        /// <param name="breach">breach.</param>
        public InlineResponse2006InstrumentKnockOut(InlineResponse2006InstrumentKnockOutObservation observation = default(InlineResponse2006InstrumentKnockOutObservation), decimal value = default(decimal), InlineResponse2006InstrumentKnockOutDistance distance = default(InlineResponse2006InstrumentKnockOutDistance), InlineResponse2006InstrumentKnockOutBreach breach = default(InlineResponse2006InstrumentKnockOutBreach))
        {
            this.Observation = observation;
            this.Value = value;
            this.Distance = distance;
            this.Breach = breach;
        }

        /// <summary>
        /// Gets or Sets Observation
        /// </summary>
        [DataMember(Name = "observation", EmitDefaultValue = false)]
        public InlineResponse2006InstrumentKnockOutObservation Observation { get; set; }

        /// <summary>
        /// Value of the knock-out.
        /// </summary>
        /// <value>Value of the knock-out.</value>
        [DataMember(Name = "value", EmitDefaultValue = false)]
        public decimal Value { get; set; }

        /// <summary>
        /// Gets or Sets Distance
        /// </summary>
        [DataMember(Name = "distance", EmitDefaultValue = false)]
        public InlineResponse2006InstrumentKnockOutDistance Distance { get; set; }

        /// <summary>
        /// Gets or Sets Breach
        /// </summary>
        [DataMember(Name = "breach", EmitDefaultValue = false)]
        public InlineResponse2006InstrumentKnockOutBreach Breach { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class InlineResponse2006InstrumentKnockOut {\n");
            sb.Append("  Observation: ").Append(Observation).Append("\n");
            sb.Append("  Value: ").Append(Value).Append("\n");
            sb.Append("  Distance: ").Append(Distance).Append("\n");
            sb.Append("  Breach: ").Append(Breach).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as InlineResponse2006InstrumentKnockOut);
        }

        /// <summary>
        /// Returns true if InlineResponse2006InstrumentKnockOut instances are equal
        /// </summary>
        /// <param name="input">Instance of InlineResponse2006InstrumentKnockOut to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(InlineResponse2006InstrumentKnockOut input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Observation == input.Observation ||
                    (this.Observation != null &&
                    this.Observation.Equals(input.Observation))
                ) && 
                (
                    this.Value == input.Value ||
                    this.Value.Equals(input.Value)
                ) && 
                (
                    this.Distance == input.Distance ||
                    (this.Distance != null &&
                    this.Distance.Equals(input.Distance))
                ) && 
                (
                    this.Breach == input.Breach ||
                    (this.Breach != null &&
                    this.Breach.Equals(input.Breach))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Observation != null)
                    hashCode = hashCode * 59 + this.Observation.GetHashCode();
                hashCode = hashCode * 59 + this.Value.GetHashCode();
                if (this.Distance != null)
                    hashCode = hashCode * 59 + this.Distance.GetHashCode();
                if (this.Breach != null)
                    hashCode = hashCode * 59 + this.Breach.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
