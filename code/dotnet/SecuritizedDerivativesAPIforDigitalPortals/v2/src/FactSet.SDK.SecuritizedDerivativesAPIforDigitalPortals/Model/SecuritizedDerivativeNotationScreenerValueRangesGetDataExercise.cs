/*
 * Prime Developer Trial
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = FactSet.SDK.SecuritizedDerivativesAPIforDigitalPortals.Client.OpenAPIDateConverter;

namespace FactSet.SDK.SecuritizedDerivativesAPIforDigitalPortals.Model
{
    /// <summary>
    /// Parameters related to the exercise.
    /// </summary>
    [DataContract(Name = "_securitizedDerivative_notation_screener_valueRanges_get_data_exercise")]
    public partial class SecuritizedDerivativeNotationScreenerValueRangesGetDataExercise : IEquatable<SecuritizedDerivativeNotationScreenerValueRangesGetDataExercise>, IValidatableObject
    {
        /// <summary>
        /// Code of the exercise right.
        /// </summary>
        /// <value>Code of the exercise right.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum RightEnum
        {
            /// <summary>
            /// Enum Put for value: put
            /// </summary>
            [EnumMember(Value = "put")]
            Put = 1,

            /// <summary>
            /// Enum Call for value: call
            /// </summary>
            [EnumMember(Value = "call")]
            Call = 2

        }


        /// <summary>
        /// Code of the exercise right.
        /// </summary>
        /// <value>Code of the exercise right.</value>
        [DataMember(Name = "right", EmitDefaultValue = false)]
        public RightEnum? Right { get; set; }
        /// <summary>
        /// Code of the exercise style.
        /// </summary>
        /// <value>Code of the exercise style.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum StyleEnum
        {
            /// <summary>
            /// Enum American for value: american
            /// </summary>
            [EnumMember(Value = "american")]
            American = 1,

            /// <summary>
            /// Enum European for value: european
            /// </summary>
            [EnumMember(Value = "european")]
            European = 2,

            /// <summary>
            /// Enum Bermudan for value: bermudan
            /// </summary>
            [EnumMember(Value = "bermudan")]
            Bermudan = 3

        }


        /// <summary>
        /// Code of the exercise style.
        /// </summary>
        /// <value>Code of the exercise style.</value>
        [DataMember(Name = "style", EmitDefaultValue = false)]
        public StyleEnum? Style { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="SecuritizedDerivativeNotationScreenerValueRangesGetDataExercise" /> class.
        /// </summary>
        /// <param name="right">Code of the exercise right..</param>
        /// <param name="style">Code of the exercise style..</param>
        public SecuritizedDerivativeNotationScreenerValueRangesGetDataExercise(RightEnum? right = default(RightEnum?), StyleEnum? style = default(StyleEnum?))
        {
            this.Right = right;
            this.Style = style;
        }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SecuritizedDerivativeNotationScreenerValueRangesGetDataExercise {\n");
            sb.Append("  Right: ").Append(Right).Append("\n");
            sb.Append("  Style: ").Append(Style).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SecuritizedDerivativeNotationScreenerValueRangesGetDataExercise);
        }

        /// <summary>
        /// Returns true if SecuritizedDerivativeNotationScreenerValueRangesGetDataExercise instances are equal
        /// </summary>
        /// <param name="input">Instance of SecuritizedDerivativeNotationScreenerValueRangesGetDataExercise to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SecuritizedDerivativeNotationScreenerValueRangesGetDataExercise input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Right == input.Right ||
                    this.Right.Equals(input.Right)
                ) && 
                (
                    this.Style == input.Style ||
                    this.Style.Equals(input.Style)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = hashCode * 59 + this.Right.GetHashCode();
                hashCode = hashCode * 59 + this.Style.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
