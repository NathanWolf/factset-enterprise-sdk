/*
 * Prime Developer Trial
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = FactSet.SDK.SecuritizedDerivativesAPIforDigitalPortals.Client.OpenAPIDateConverter;

namespace FactSet.SDK.SecuritizedDerivativesAPIforDigitalPortals.Model
{
    /// <summary>
    /// Ask-based delta. It represents the first partial derivative of the function determining the derivative notation&#39;s theoretical price with respect to the underlying level, evaluated at the underlying level. Delta indicates the ratio of the absolute change of the price of a derivative for an indefinitely small absolute change in the underlying level, thus it represents the price sensitivity of the derivative relative to changes in the underlying level. This key figure is calculated for plain vanilla warrants only.
    /// </summary>
    [DataContract(Name = "inline_response_200_3_data_delta")]
    public partial class InlineResponse2003DataDelta : IEquatable<InlineResponse2003DataDelta>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="InlineResponse2003DataDelta" /> class.
        /// </summary>
        /// <param name="effective">Delta calculated using the actual cover ration of the securitized derivative..</param>
        /// <param name="unadjusted">Delta calculated using a (hypothetical) cover ratio of 1:1..</param>
        public InlineResponse2003DataDelta(decimal effective = default(decimal), decimal unadjusted = default(decimal))
        {
            this.Effective = effective;
            this.Unadjusted = unadjusted;
        }

        /// <summary>
        /// Delta calculated using the actual cover ration of the securitized derivative.
        /// </summary>
        /// <value>Delta calculated using the actual cover ration of the securitized derivative.</value>
        [DataMember(Name = "effective", EmitDefaultValue = false)]
        public decimal Effective { get; set; }

        /// <summary>
        /// Delta calculated using a (hypothetical) cover ratio of 1:1.
        /// </summary>
        /// <value>Delta calculated using a (hypothetical) cover ratio of 1:1.</value>
        [DataMember(Name = "unadjusted", EmitDefaultValue = false)]
        public decimal Unadjusted { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class InlineResponse2003DataDelta {\n");
            sb.Append("  Effective: ").Append(Effective).Append("\n");
            sb.Append("  Unadjusted: ").Append(Unadjusted).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as InlineResponse2003DataDelta);
        }

        /// <summary>
        /// Returns true if InlineResponse2003DataDelta instances are equal
        /// </summary>
        /// <param name="input">Instance of InlineResponse2003DataDelta to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(InlineResponse2003DataDelta input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Effective == input.Effective ||
                    this.Effective.Equals(input.Effective)
                ) && 
                (
                    this.Unadjusted == input.Unadjusted ||
                    this.Unadjusted.Equals(input.Unadjusted)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.Effective.GetHashCode();
                hashCode = (hashCode * 59) + this.Unadjusted.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
