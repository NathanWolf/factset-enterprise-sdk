/*
 * Prime Developer Trial
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = FactSet.SDK.SecuritizedDerivativesAPIforDigitalPortals.Client.OpenAPIDateConverter;

namespace FactSet.SDK.SecuritizedDerivativesAPIforDigitalPortals.Model
{
    /// <summary>
    /// Instrument data of the notation.
    /// </summary>
    [DataContract(Name = "inline_response_200_6_instrument")]
    public partial class InlineResponse2006Instrument : IEquatable<InlineResponse2006Instrument>, IValidatableObject
    {
        /// <summary>
        /// Settlement of the securitized derivative. It concerns the fulfillment of the issuer&#39;s contractual obligations arising from the securitized derivative. Depending on the terms, the underlying asset may be delivered physically or its equivalent monetary value may be payed out.
        /// </summary>
        /// <value>Settlement of the securitized derivative. It concerns the fulfillment of the issuer&#39;s contractual obligations arising from the securitized derivative. Depending on the terms, the underlying asset may be delivered physically or its equivalent monetary value may be payed out.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum SettlementEnum
        {
            /// <summary>
            /// Enum Cash for value: cash
            /// </summary>
            [EnumMember(Value = "cash")]
            Cash = 1,

            /// <summary>
            /// Enum Physical for value: physical
            /// </summary>
            [EnumMember(Value = "physical")]
            Physical = 2,

            /// <summary>
            /// Enum Either for value: either
            /// </summary>
            [EnumMember(Value = "either")]
            Either = 3

        }


        /// <summary>
        /// Settlement of the securitized derivative. It concerns the fulfillment of the issuer&#39;s contractual obligations arising from the securitized derivative. Depending on the terms, the underlying asset may be delivered physically or its equivalent monetary value may be payed out.
        /// </summary>
        /// <value>Settlement of the securitized derivative. It concerns the fulfillment of the issuer&#39;s contractual obligations arising from the securitized derivative. Depending on the terms, the underlying asset may be delivered physically or its equivalent monetary value may be payed out.</value>
        [DataMember(Name = "settlement", EmitDefaultValue = false)]
        public SettlementEnum? Settlement { get; set; }
        /// <summary>
        /// Participation direction of a factor certificate at the level movement of its effective underlying.
        /// </summary>
        /// <value>Participation direction of a factor certificate at the level movement of its effective underlying.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ParticipationEnum
        {
            /// <summary>
            /// Enum Long for value: long
            /// </summary>
            [EnumMember(Value = "long")]
            Long = 1,

            /// <summary>
            /// Enum Short for value: short
            /// </summary>
            [EnumMember(Value = "short")]
            Short = 2

        }


        /// <summary>
        /// Participation direction of a factor certificate at the level movement of its effective underlying.
        /// </summary>
        /// <value>Participation direction of a factor certificate at the level movement of its effective underlying.</value>
        [DataMember(Name = "participation", EmitDefaultValue = false)]
        public ParticipationEnum? Participation { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="InlineResponse2006Instrument" /> class.
        /// </summary>
        /// <param name="id">Identifier of the instrument..</param>
        /// <param name="name">Name of the instrument..</param>
        /// <param name="shortName">Short name of the instrument..</param>
        /// <param name="isin">The International Securities Identification Number (ISIN) of the instrument.The ISIN is a 12-character code of digits and upper-case letters that uniquely identifiesan instrument..</param>
        /// <param name="nsin">nsin.</param>
        /// <param name="fsym">fsym.</param>
        /// <param name="categorization">categorization.</param>
        /// <param name="lifeCycle">lifeCycle.</param>
        /// <param name="issuer">issuer.</param>
        /// <param name="exercise">exercise.</param>
        /// <param name="settlement">Settlement of the securitized derivative. It concerns the fulfillment of the issuer&#39;s contractual obligations arising from the securitized derivative. Depending on the terms, the underlying asset may be delivered physically or its equivalent monetary value may be payed out..</param>
        /// <param name="collateralized">If &#x60;true&#x60;, this instrument is protected against an issuer default by collateral (e.g. COSI collateralization by SIX Swiss Exchange)..</param>
        /// <param name="quanto">If &#x60;true&#x60;, the risk of exchange rate fluctuations between the value unit of the underlying and the value unit of the cash flows is hedged..</param>
        /// <param name="capitalProtection">Proportion of the nominal amount protected against loss..</param>
        /// <param name="underlying">underlying.</param>
        /// <param name="strike">strike.</param>
        /// <param name="bonusLevel">bonusLevel.</param>
        /// <param name="cap">cap.</param>
        /// <param name="knockOut">knockOut.</param>
        /// <param name="knockIn">knockIn.</param>
        /// <param name="lockOut">lockOut.</param>
        /// <param name="lockIn">lockIn.</param>
        /// <param name="capitalGuarantee">capitalGuarantee.</param>
        /// <param name="couponTriggerLevel">couponTriggerLevel.</param>
        /// <param name="rangeKnockOut">rangeKnockOut.</param>
        /// <param name="participation">Participation direction of a factor certificate at the level movement of its effective underlying..</param>
        /// <param name="constantLeverage">Constant leverage of a factor certificate..</param>
        /// <param name="nominalCurrency">nominalCurrency.</param>
        /// <param name="currentInterestRate">currentInterestRate.</param>
        public InlineResponse2006Instrument(string id = default(string), string name = default(string), string shortName = default(string), string isin = default(string), InlineResponse200DataNsin nsin = default(InlineResponse200DataNsin), InlineResponse2004InstrumentFsym fsym = default(InlineResponse2004InstrumentFsym), InlineResponse2006InstrumentCategorization categorization = default(InlineResponse2006InstrumentCategorization), InlineResponse2006InstrumentLifeCycle lifeCycle = default(InlineResponse2006InstrumentLifeCycle), InlineResponse2006InstrumentIssuer issuer = default(InlineResponse2006InstrumentIssuer), InlineResponse2006InstrumentExercise exercise = default(InlineResponse2006InstrumentExercise), SettlementEnum? settlement = default(SettlementEnum?), bool collateralized = default(bool), bool quanto = default(bool), decimal capitalProtection = default(decimal), InlineResponse2006InstrumentUnderlying underlying = default(InlineResponse2006InstrumentUnderlying), InlineResponse2006InstrumentStrike strike = default(InlineResponse2006InstrumentStrike), InlineResponse2006InstrumentBonusLevel bonusLevel = default(InlineResponse2006InstrumentBonusLevel), InlineResponse2006InstrumentCap cap = default(InlineResponse2006InstrumentCap), InlineResponse2006InstrumentKnockOut knockOut = default(InlineResponse2006InstrumentKnockOut), InlineResponse2006InstrumentKnockIn knockIn = default(InlineResponse2006InstrumentKnockIn), InlineResponse2006InstrumentLockOut lockOut = default(InlineResponse2006InstrumentLockOut), InlineResponse2006InstrumentLockIn lockIn = default(InlineResponse2006InstrumentLockIn), InlineResponse2006InstrumentCapitalGuarantee capitalGuarantee = default(InlineResponse2006InstrumentCapitalGuarantee), InlineResponse2006InstrumentCouponTriggerLevel couponTriggerLevel = default(InlineResponse2006InstrumentCouponTriggerLevel), InlineResponse2006InstrumentRangeKnockOut rangeKnockOut = default(InlineResponse2006InstrumentRangeKnockOut), ParticipationEnum? participation = default(ParticipationEnum?), decimal constantLeverage = default(decimal), InlineResponse2006InstrumentNominalCurrency nominalCurrency = default(InlineResponse2006InstrumentNominalCurrency), InlineResponse2006InstrumentCurrentInterestRate currentInterestRate = default(InlineResponse2006InstrumentCurrentInterestRate))
        {
            this.Id = id;
            this.Name = name;
            this.ShortName = shortName;
            this.Isin = isin;
            this.Nsin = nsin;
            this.Fsym = fsym;
            this.Categorization = categorization;
            this.LifeCycle = lifeCycle;
            this.Issuer = issuer;
            this.Exercise = exercise;
            this.Settlement = settlement;
            this.Collateralized = collateralized;
            this.Quanto = quanto;
            this.CapitalProtection = capitalProtection;
            this.Underlying = underlying;
            this.Strike = strike;
            this.BonusLevel = bonusLevel;
            this.Cap = cap;
            this.KnockOut = knockOut;
            this.KnockIn = knockIn;
            this.LockOut = lockOut;
            this.LockIn = lockIn;
            this.CapitalGuarantee = capitalGuarantee;
            this.CouponTriggerLevel = couponTriggerLevel;
            this.RangeKnockOut = rangeKnockOut;
            this.Participation = participation;
            this.ConstantLeverage = constantLeverage;
            this.NominalCurrency = nominalCurrency;
            this.CurrentInterestRate = currentInterestRate;
        }

        /// <summary>
        /// Identifier of the instrument.
        /// </summary>
        /// <value>Identifier of the instrument.</value>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public string Id { get; set; }

        /// <summary>
        /// Name of the instrument.
        /// </summary>
        /// <value>Name of the instrument.</value>
        [DataMember(Name = "name", EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// Short name of the instrument.
        /// </summary>
        /// <value>Short name of the instrument.</value>
        [DataMember(Name = "shortName", EmitDefaultValue = false)]
        public string ShortName { get; set; }

        /// <summary>
        /// The International Securities Identification Number (ISIN) of the instrument.The ISIN is a 12-character code of digits and upper-case letters that uniquely identifiesan instrument.
        /// </summary>
        /// <value>The International Securities Identification Number (ISIN) of the instrument.The ISIN is a 12-character code of digits and upper-case letters that uniquely identifiesan instrument.</value>
        [DataMember(Name = "isin", EmitDefaultValue = false)]
        public string Isin { get; set; }

        /// <summary>
        /// Gets or Sets Nsin
        /// </summary>
        [DataMember(Name = "nsin", EmitDefaultValue = false)]
        public InlineResponse200DataNsin Nsin { get; set; }

        /// <summary>
        /// Gets or Sets Fsym
        /// </summary>
        [DataMember(Name = "fsym", EmitDefaultValue = false)]
        public InlineResponse2004InstrumentFsym Fsym { get; set; }

        /// <summary>
        /// Gets or Sets Categorization
        /// </summary>
        [DataMember(Name = "categorization", EmitDefaultValue = false)]
        public InlineResponse2006InstrumentCategorization Categorization { get; set; }

        /// <summary>
        /// Gets or Sets LifeCycle
        /// </summary>
        [DataMember(Name = "lifeCycle", EmitDefaultValue = false)]
        public InlineResponse2006InstrumentLifeCycle LifeCycle { get; set; }

        /// <summary>
        /// Gets or Sets Issuer
        /// </summary>
        [DataMember(Name = "issuer", EmitDefaultValue = false)]
        public InlineResponse2006InstrumentIssuer Issuer { get; set; }

        /// <summary>
        /// Gets or Sets Exercise
        /// </summary>
        [DataMember(Name = "exercise", EmitDefaultValue = false)]
        public InlineResponse2006InstrumentExercise Exercise { get; set; }

        /// <summary>
        /// If &#x60;true&#x60;, this instrument is protected against an issuer default by collateral (e.g. COSI collateralization by SIX Swiss Exchange).
        /// </summary>
        /// <value>If &#x60;true&#x60;, this instrument is protected against an issuer default by collateral (e.g. COSI collateralization by SIX Swiss Exchange).</value>
        [DataMember(Name = "collateralized", EmitDefaultValue = true)]
        public bool Collateralized { get; set; }

        /// <summary>
        /// If &#x60;true&#x60;, the risk of exchange rate fluctuations between the value unit of the underlying and the value unit of the cash flows is hedged.
        /// </summary>
        /// <value>If &#x60;true&#x60;, the risk of exchange rate fluctuations between the value unit of the underlying and the value unit of the cash flows is hedged.</value>
        [DataMember(Name = "quanto", EmitDefaultValue = true)]
        public bool Quanto { get; set; }

        /// <summary>
        /// Proportion of the nominal amount protected against loss.
        /// </summary>
        /// <value>Proportion of the nominal amount protected against loss.</value>
        [DataMember(Name = "capitalProtection", EmitDefaultValue = false)]
        public decimal CapitalProtection { get; set; }

        /// <summary>
        /// Gets or Sets Underlying
        /// </summary>
        [DataMember(Name = "underlying", EmitDefaultValue = false)]
        public InlineResponse2006InstrumentUnderlying Underlying { get; set; }

        /// <summary>
        /// Gets or Sets Strike
        /// </summary>
        [DataMember(Name = "strike", EmitDefaultValue = false)]
        public InlineResponse2006InstrumentStrike Strike { get; set; }

        /// <summary>
        /// Gets or Sets BonusLevel
        /// </summary>
        [DataMember(Name = "bonusLevel", EmitDefaultValue = false)]
        public InlineResponse2006InstrumentBonusLevel BonusLevel { get; set; }

        /// <summary>
        /// Gets or Sets Cap
        /// </summary>
        [DataMember(Name = "cap", EmitDefaultValue = false)]
        public InlineResponse2006InstrumentCap Cap { get; set; }

        /// <summary>
        /// Gets or Sets KnockOut
        /// </summary>
        [DataMember(Name = "knockOut", EmitDefaultValue = false)]
        public InlineResponse2006InstrumentKnockOut KnockOut { get; set; }

        /// <summary>
        /// Gets or Sets KnockIn
        /// </summary>
        [DataMember(Name = "knockIn", EmitDefaultValue = false)]
        public InlineResponse2006InstrumentKnockIn KnockIn { get; set; }

        /// <summary>
        /// Gets or Sets LockOut
        /// </summary>
        [DataMember(Name = "lockOut", EmitDefaultValue = false)]
        public InlineResponse2006InstrumentLockOut LockOut { get; set; }

        /// <summary>
        /// Gets or Sets LockIn
        /// </summary>
        [DataMember(Name = "lockIn", EmitDefaultValue = false)]
        public InlineResponse2006InstrumentLockIn LockIn { get; set; }

        /// <summary>
        /// Gets or Sets CapitalGuarantee
        /// </summary>
        [DataMember(Name = "capitalGuarantee", EmitDefaultValue = false)]
        public InlineResponse2006InstrumentCapitalGuarantee CapitalGuarantee { get; set; }

        /// <summary>
        /// Gets or Sets CouponTriggerLevel
        /// </summary>
        [DataMember(Name = "couponTriggerLevel", EmitDefaultValue = false)]
        public InlineResponse2006InstrumentCouponTriggerLevel CouponTriggerLevel { get; set; }

        /// <summary>
        /// Gets or Sets RangeKnockOut
        /// </summary>
        [DataMember(Name = "rangeKnockOut", EmitDefaultValue = false)]
        public InlineResponse2006InstrumentRangeKnockOut RangeKnockOut { get; set; }

        /// <summary>
        /// Constant leverage of a factor certificate.
        /// </summary>
        /// <value>Constant leverage of a factor certificate.</value>
        [DataMember(Name = "constantLeverage", EmitDefaultValue = false)]
        public decimal ConstantLeverage { get; set; }

        /// <summary>
        /// Gets or Sets NominalCurrency
        /// </summary>
        [DataMember(Name = "nominalCurrency", EmitDefaultValue = false)]
        public InlineResponse2006InstrumentNominalCurrency NominalCurrency { get; set; }

        /// <summary>
        /// Gets or Sets CurrentInterestRate
        /// </summary>
        [DataMember(Name = "currentInterestRate", EmitDefaultValue = false)]
        public InlineResponse2006InstrumentCurrentInterestRate CurrentInterestRate { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class InlineResponse2006Instrument {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  ShortName: ").Append(ShortName).Append("\n");
            sb.Append("  Isin: ").Append(Isin).Append("\n");
            sb.Append("  Nsin: ").Append(Nsin).Append("\n");
            sb.Append("  Fsym: ").Append(Fsym).Append("\n");
            sb.Append("  Categorization: ").Append(Categorization).Append("\n");
            sb.Append("  LifeCycle: ").Append(LifeCycle).Append("\n");
            sb.Append("  Issuer: ").Append(Issuer).Append("\n");
            sb.Append("  Exercise: ").Append(Exercise).Append("\n");
            sb.Append("  Settlement: ").Append(Settlement).Append("\n");
            sb.Append("  Collateralized: ").Append(Collateralized).Append("\n");
            sb.Append("  Quanto: ").Append(Quanto).Append("\n");
            sb.Append("  CapitalProtection: ").Append(CapitalProtection).Append("\n");
            sb.Append("  Underlying: ").Append(Underlying).Append("\n");
            sb.Append("  Strike: ").Append(Strike).Append("\n");
            sb.Append("  BonusLevel: ").Append(BonusLevel).Append("\n");
            sb.Append("  Cap: ").Append(Cap).Append("\n");
            sb.Append("  KnockOut: ").Append(KnockOut).Append("\n");
            sb.Append("  KnockIn: ").Append(KnockIn).Append("\n");
            sb.Append("  LockOut: ").Append(LockOut).Append("\n");
            sb.Append("  LockIn: ").Append(LockIn).Append("\n");
            sb.Append("  CapitalGuarantee: ").Append(CapitalGuarantee).Append("\n");
            sb.Append("  CouponTriggerLevel: ").Append(CouponTriggerLevel).Append("\n");
            sb.Append("  RangeKnockOut: ").Append(RangeKnockOut).Append("\n");
            sb.Append("  Participation: ").Append(Participation).Append("\n");
            sb.Append("  ConstantLeverage: ").Append(ConstantLeverage).Append("\n");
            sb.Append("  NominalCurrency: ").Append(NominalCurrency).Append("\n");
            sb.Append("  CurrentInterestRate: ").Append(CurrentInterestRate).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as InlineResponse2006Instrument);
        }

        /// <summary>
        /// Returns true if InlineResponse2006Instrument instances are equal
        /// </summary>
        /// <param name="input">Instance of InlineResponse2006Instrument to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(InlineResponse2006Instrument input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.ShortName == input.ShortName ||
                    (this.ShortName != null &&
                    this.ShortName.Equals(input.ShortName))
                ) && 
                (
                    this.Isin == input.Isin ||
                    (this.Isin != null &&
                    this.Isin.Equals(input.Isin))
                ) && 
                (
                    this.Nsin == input.Nsin ||
                    (this.Nsin != null &&
                    this.Nsin.Equals(input.Nsin))
                ) && 
                (
                    this.Fsym == input.Fsym ||
                    (this.Fsym != null &&
                    this.Fsym.Equals(input.Fsym))
                ) && 
                (
                    this.Categorization == input.Categorization ||
                    (this.Categorization != null &&
                    this.Categorization.Equals(input.Categorization))
                ) && 
                (
                    this.LifeCycle == input.LifeCycle ||
                    (this.LifeCycle != null &&
                    this.LifeCycle.Equals(input.LifeCycle))
                ) && 
                (
                    this.Issuer == input.Issuer ||
                    (this.Issuer != null &&
                    this.Issuer.Equals(input.Issuer))
                ) && 
                (
                    this.Exercise == input.Exercise ||
                    (this.Exercise != null &&
                    this.Exercise.Equals(input.Exercise))
                ) && 
                (
                    this.Settlement == input.Settlement ||
                    this.Settlement.Equals(input.Settlement)
                ) && 
                (
                    this.Collateralized == input.Collateralized ||
                    this.Collateralized.Equals(input.Collateralized)
                ) && 
                (
                    this.Quanto == input.Quanto ||
                    this.Quanto.Equals(input.Quanto)
                ) && 
                (
                    this.CapitalProtection == input.CapitalProtection ||
                    this.CapitalProtection.Equals(input.CapitalProtection)
                ) && 
                (
                    this.Underlying == input.Underlying ||
                    (this.Underlying != null &&
                    this.Underlying.Equals(input.Underlying))
                ) && 
                (
                    this.Strike == input.Strike ||
                    (this.Strike != null &&
                    this.Strike.Equals(input.Strike))
                ) && 
                (
                    this.BonusLevel == input.BonusLevel ||
                    (this.BonusLevel != null &&
                    this.BonusLevel.Equals(input.BonusLevel))
                ) && 
                (
                    this.Cap == input.Cap ||
                    (this.Cap != null &&
                    this.Cap.Equals(input.Cap))
                ) && 
                (
                    this.KnockOut == input.KnockOut ||
                    (this.KnockOut != null &&
                    this.KnockOut.Equals(input.KnockOut))
                ) && 
                (
                    this.KnockIn == input.KnockIn ||
                    (this.KnockIn != null &&
                    this.KnockIn.Equals(input.KnockIn))
                ) && 
                (
                    this.LockOut == input.LockOut ||
                    (this.LockOut != null &&
                    this.LockOut.Equals(input.LockOut))
                ) && 
                (
                    this.LockIn == input.LockIn ||
                    (this.LockIn != null &&
                    this.LockIn.Equals(input.LockIn))
                ) && 
                (
                    this.CapitalGuarantee == input.CapitalGuarantee ||
                    (this.CapitalGuarantee != null &&
                    this.CapitalGuarantee.Equals(input.CapitalGuarantee))
                ) && 
                (
                    this.CouponTriggerLevel == input.CouponTriggerLevel ||
                    (this.CouponTriggerLevel != null &&
                    this.CouponTriggerLevel.Equals(input.CouponTriggerLevel))
                ) && 
                (
                    this.RangeKnockOut == input.RangeKnockOut ||
                    (this.RangeKnockOut != null &&
                    this.RangeKnockOut.Equals(input.RangeKnockOut))
                ) && 
                (
                    this.Participation == input.Participation ||
                    this.Participation.Equals(input.Participation)
                ) && 
                (
                    this.ConstantLeverage == input.ConstantLeverage ||
                    this.ConstantLeverage.Equals(input.ConstantLeverage)
                ) && 
                (
                    this.NominalCurrency == input.NominalCurrency ||
                    (this.NominalCurrency != null &&
                    this.NominalCurrency.Equals(input.NominalCurrency))
                ) && 
                (
                    this.CurrentInterestRate == input.CurrentInterestRate ||
                    (this.CurrentInterestRate != null &&
                    this.CurrentInterestRate.Equals(input.CurrentInterestRate))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                {
                    hashCode = (hashCode * 59) + this.Id.GetHashCode();
                }
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                if (this.ShortName != null)
                {
                    hashCode = (hashCode * 59) + this.ShortName.GetHashCode();
                }
                if (this.Isin != null)
                {
                    hashCode = (hashCode * 59) + this.Isin.GetHashCode();
                }
                if (this.Nsin != null)
                {
                    hashCode = (hashCode * 59) + this.Nsin.GetHashCode();
                }
                if (this.Fsym != null)
                {
                    hashCode = (hashCode * 59) + this.Fsym.GetHashCode();
                }
                if (this.Categorization != null)
                {
                    hashCode = (hashCode * 59) + this.Categorization.GetHashCode();
                }
                if (this.LifeCycle != null)
                {
                    hashCode = (hashCode * 59) + this.LifeCycle.GetHashCode();
                }
                if (this.Issuer != null)
                {
                    hashCode = (hashCode * 59) + this.Issuer.GetHashCode();
                }
                if (this.Exercise != null)
                {
                    hashCode = (hashCode * 59) + this.Exercise.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Settlement.GetHashCode();
                hashCode = (hashCode * 59) + this.Collateralized.GetHashCode();
                hashCode = (hashCode * 59) + this.Quanto.GetHashCode();
                hashCode = (hashCode * 59) + this.CapitalProtection.GetHashCode();
                if (this.Underlying != null)
                {
                    hashCode = (hashCode * 59) + this.Underlying.GetHashCode();
                }
                if (this.Strike != null)
                {
                    hashCode = (hashCode * 59) + this.Strike.GetHashCode();
                }
                if (this.BonusLevel != null)
                {
                    hashCode = (hashCode * 59) + this.BonusLevel.GetHashCode();
                }
                if (this.Cap != null)
                {
                    hashCode = (hashCode * 59) + this.Cap.GetHashCode();
                }
                if (this.KnockOut != null)
                {
                    hashCode = (hashCode * 59) + this.KnockOut.GetHashCode();
                }
                if (this.KnockIn != null)
                {
                    hashCode = (hashCode * 59) + this.KnockIn.GetHashCode();
                }
                if (this.LockOut != null)
                {
                    hashCode = (hashCode * 59) + this.LockOut.GetHashCode();
                }
                if (this.LockIn != null)
                {
                    hashCode = (hashCode * 59) + this.LockIn.GetHashCode();
                }
                if (this.CapitalGuarantee != null)
                {
                    hashCode = (hashCode * 59) + this.CapitalGuarantee.GetHashCode();
                }
                if (this.CouponTriggerLevel != null)
                {
                    hashCode = (hashCode * 59) + this.CouponTriggerLevel.GetHashCode();
                }
                if (this.RangeKnockOut != null)
                {
                    hashCode = (hashCode * 59) + this.RangeKnockOut.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Participation.GetHashCode();
                hashCode = (hashCode * 59) + this.ConstantLeverage.GetHashCode();
                if (this.NominalCurrency != null)
                {
                    hashCode = (hashCode * 59) + this.NominalCurrency.GetHashCode();
                }
                if (this.CurrentInterestRate != null)
                {
                    hashCode = (hashCode * 59) + this.CurrentInterestRate.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
