/*
 * Prime Developer Trial
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = FactSet.SDK.SecuritizedDerivativesAPIforDigitalPortals.Client.OpenAPIDateConverter;

namespace FactSet.SDK.SecuritizedDerivativesAPIforDigitalPortals.Model
{
    /// <summary>
    /// Categorization of the securitized derivative. Not all securitized derivatives have an assignement to all category systems. For each category system, the categories are arranged in a hierarchy, with level 1 representing the most coarse granularity and further levels successively refining the granularity.
    /// </summary>
    [DataContract(Name = "inline_response_200_4_categorization")]
    public partial class InlineResponse2004Categorization : IEquatable<InlineResponse2004Categorization>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="InlineResponse2004Categorization" /> class.
        /// </summary>
        /// <param name="ddv">Categorization based on the DDV (Deutscher Derivate Verband, German for German Derivatives Association) product classification. This category system covers securitized derivatives traded in Germany except exchange trade commodities (ETC) and exchange traded notes (ETN). See endpoint &#x60;/category/listBySystem&#x60; for category system 23 for possible values..</param>
        /// <param name="eusipa">Categorization based on the EUSIPA (European Structured Investment Products Association) product classification. This category system  covers all securitized derivatives. See endpoint &#x60;/category/listBySystem&#x60; for category system 18 for possible values..</param>
        public InlineResponse2004Categorization(List<InlineResponse2004CategorizationDdv> ddv = default(List<InlineResponse2004CategorizationDdv>), List<InlineResponse2004CategorizationDdv> eusipa = default(List<InlineResponse2004CategorizationDdv>))
        {
            this.Ddv = ddv;
            this.Eusipa = eusipa;
        }

        /// <summary>
        /// Categorization based on the DDV (Deutscher Derivate Verband, German for German Derivatives Association) product classification. This category system covers securitized derivatives traded in Germany except exchange trade commodities (ETC) and exchange traded notes (ETN). See endpoint &#x60;/category/listBySystem&#x60; for category system 23 for possible values.
        /// </summary>
        /// <value>Categorization based on the DDV (Deutscher Derivate Verband, German for German Derivatives Association) product classification. This category system covers securitized derivatives traded in Germany except exchange trade commodities (ETC) and exchange traded notes (ETN). See endpoint &#x60;/category/listBySystem&#x60; for category system 23 for possible values.</value>
        [DataMember(Name = "ddv", EmitDefaultValue = false)]
        public List<InlineResponse2004CategorizationDdv> Ddv { get; set; }

        /// <summary>
        /// Categorization based on the EUSIPA (European Structured Investment Products Association) product classification. This category system  covers all securitized derivatives. See endpoint &#x60;/category/listBySystem&#x60; for category system 18 for possible values.
        /// </summary>
        /// <value>Categorization based on the EUSIPA (European Structured Investment Products Association) product classification. This category system  covers all securitized derivatives. See endpoint &#x60;/category/listBySystem&#x60; for category system 18 for possible values.</value>
        [DataMember(Name = "eusipa", EmitDefaultValue = false)]
        public List<InlineResponse2004CategorizationDdv> Eusipa { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class InlineResponse2004Categorization {\n");
            sb.Append("  Ddv: ").Append(Ddv).Append("\n");
            sb.Append("  Eusipa: ").Append(Eusipa).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as InlineResponse2004Categorization);
        }

        /// <summary>
        /// Returns true if InlineResponse2004Categorization instances are equal
        /// </summary>
        /// <param name="input">Instance of InlineResponse2004Categorization to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(InlineResponse2004Categorization input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Ddv == input.Ddv ||
                    this.Ddv != null &&
                    input.Ddv != null &&
                    this.Ddv.SequenceEqual(input.Ddv)
                ) && 
                (
                    this.Eusipa == input.Eusipa ||
                    this.Eusipa != null &&
                    input.Eusipa != null &&
                    this.Eusipa.SequenceEqual(input.Eusipa)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Ddv != null)
                {
                    hashCode = (hashCode * 59) + this.Ddv.GetHashCode();
                }
                if (this.Eusipa != null)
                {
                    hashCode = (hashCode * 59) + this.Eusipa.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
