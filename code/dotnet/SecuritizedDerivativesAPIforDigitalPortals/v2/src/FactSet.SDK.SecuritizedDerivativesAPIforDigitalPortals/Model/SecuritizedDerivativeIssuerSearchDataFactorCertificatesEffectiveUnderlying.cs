/*
 * Prime Developer Trial
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = FactSet.SDK.SecuritizedDerivativesAPIforDigitalPortals.Client.OpenAPIDateConverter;

namespace FactSet.SDK.SecuritizedDerivativesAPIforDigitalPortals.Model
{
    /// <summary>
    /// Selection of the effective underlying. The underlying of a factor certificate is usually a factor index which is an artificial index used to calculate the leveraged daily performance of another financial instrument called its effective underlying. Only issuers that have issued at least one factor certificate on an effective underlying in the provided list are returned.
    /// </summary>
    [DataContract(Name = "_securitizedDerivative_issuer_search_data_factorCertificates_effectiveUnderlying")]
    public partial class SecuritizedDerivativeIssuerSearchDataFactorCertificatesEffectiveUnderlying : IEquatable<SecuritizedDerivativeIssuerSearchDataFactorCertificatesEffectiveUnderlying>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SecuritizedDerivativeIssuerSearchDataFactorCertificatesEffectiveUnderlying" /> class.
        /// </summary>
        /// <param name="instrument">instrument.</param>
        public SecuritizedDerivativeIssuerSearchDataFactorCertificatesEffectiveUnderlying(SecuritizedDerivativeIssuerSearchDataFactorCertificatesEffectiveUnderlyingInstrument instrument = default(SecuritizedDerivativeIssuerSearchDataFactorCertificatesEffectiveUnderlyingInstrument))
        {
            this.Instrument = instrument;
        }

        /// <summary>
        /// Gets or Sets Instrument
        /// </summary>
        [DataMember(Name = "instrument", EmitDefaultValue = false)]
        public SecuritizedDerivativeIssuerSearchDataFactorCertificatesEffectiveUnderlyingInstrument Instrument { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SecuritizedDerivativeIssuerSearchDataFactorCertificatesEffectiveUnderlying {\n");
            sb.Append("  Instrument: ").Append(Instrument).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SecuritizedDerivativeIssuerSearchDataFactorCertificatesEffectiveUnderlying);
        }

        /// <summary>
        /// Returns true if SecuritizedDerivativeIssuerSearchDataFactorCertificatesEffectiveUnderlying instances are equal
        /// </summary>
        /// <param name="input">Instance of SecuritizedDerivativeIssuerSearchDataFactorCertificatesEffectiveUnderlying to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SecuritizedDerivativeIssuerSearchDataFactorCertificatesEffectiveUnderlying input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Instrument == input.Instrument ||
                    (this.Instrument != null &&
                    this.Instrument.Equals(input.Instrument))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Instrument != null)
                {
                    hashCode = (hashCode * 59) + this.Instrument.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
