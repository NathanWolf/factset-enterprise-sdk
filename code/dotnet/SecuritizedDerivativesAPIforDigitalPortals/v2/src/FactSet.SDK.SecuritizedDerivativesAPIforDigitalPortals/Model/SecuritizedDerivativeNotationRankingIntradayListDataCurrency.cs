/*
 * Prime Developer Trial
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = FactSet.SDK.SecuritizedDerivativesAPIforDigitalPortals.Client.OpenAPIDateConverter;

namespace FactSet.SDK.SecuritizedDerivativesAPIforDigitalPortals.Model
{
    /// <summary>
    /// Main currency of the trading value and volume for securitized derivatives quoted in percent. The parameter ensures the consistency and comparability of the trading value and trading volume for such securitized derivatives. For securitized derivatives not quoted in percent, the currency and the value unit, see parameter &#x60;valueUnit&#x60;, are identical, thus it is not neccessary to specify the currency if the value unit has been specified.
    /// </summary>
    [DataContract(Name = "_securitizedDerivative_notation_ranking_intraday_list_data_currency")]
    public partial class SecuritizedDerivativeNotationRankingIntradayListDataCurrency : IEquatable<SecuritizedDerivativeNotationRankingIntradayListDataCurrency>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SecuritizedDerivativeNotationRankingIntradayListDataCurrency" /> class.
        /// </summary>
        /// <param name="id">Identifier of the main currency. See endpoint &#x60;/basic/valueUnit/currency/main/list&#x60; for valid values..</param>
        public SecuritizedDerivativeNotationRankingIntradayListDataCurrency(decimal id = default(decimal))
        {
            this.Id = id;
        }

        /// <summary>
        /// Identifier of the main currency. See endpoint &#x60;/basic/valueUnit/currency/main/list&#x60; for valid values.
        /// </summary>
        /// <value>Identifier of the main currency. See endpoint &#x60;/basic/valueUnit/currency/main/list&#x60; for valid values.</value>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public decimal Id { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SecuritizedDerivativeNotationRankingIntradayListDataCurrency {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SecuritizedDerivativeNotationRankingIntradayListDataCurrency);
        }

        /// <summary>
        /// Returns true if SecuritizedDerivativeNotationRankingIntradayListDataCurrency instances are equal
        /// </summary>
        /// <param name="input">Instance of SecuritizedDerivativeNotationRankingIntradayListDataCurrency to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SecuritizedDerivativeNotationRankingIntradayListDataCurrency input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    this.Id.Equals(input.Id)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = hashCode * 59 + this.Id.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
