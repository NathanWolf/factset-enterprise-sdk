/*
 * Prime Developer Trial
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = FactSet.SDK.SecuritizedDerivativesAPIforDigitalPortals.Client.OpenAPIDateConverter;

namespace FactSet.SDK.SecuritizedDerivativesAPIforDigitalPortals.Model
{
    /// <summary>
    /// Values and value ranges related to the knock-out.
    /// </summary>
    [DataContract(Name = "inline_response_200_5_data_knockOut")]
    public partial class InlineResponse2005DataKnockOut : IEquatable<InlineResponse2005DataKnockOut>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="InlineResponse2005DataKnockOut" /> class.
        /// </summary>
        /// <param name="observation">Values of the barrier observation modality..</param>
        /// <param name="value">value.</param>
        /// <param name="distance">distance.</param>
        /// <param name="breached">Indicates whether securitized derivatives with a breached and with a non-breached knock-out barrier are among the results..</param>
        public InlineResponse2005DataKnockOut(List<InlineResponse2005DataKnockOutObservation> observation = default(List<InlineResponse2005DataKnockOutObservation>), InlineResponse2005DataKnockOutValue value = default(InlineResponse2005DataKnockOutValue), InlineResponse2005DataKnockOutDistance distance = default(InlineResponse2005DataKnockOutDistance), List<InlineResponse2005DataLifeCycleMaturityPerpetual> breached = default(List<InlineResponse2005DataLifeCycleMaturityPerpetual>))
        {
            this.Observation = observation;
            this.Value = value;
            this.Distance = distance;
            this.Breached = breached;
        }

        /// <summary>
        /// Values of the barrier observation modality.
        /// </summary>
        /// <value>Values of the barrier observation modality.</value>
        [DataMember(Name = "observation", EmitDefaultValue = false)]
        public List<InlineResponse2005DataKnockOutObservation> Observation { get; set; }

        /// <summary>
        /// Gets or Sets Value
        /// </summary>
        [DataMember(Name = "value", EmitDefaultValue = false)]
        public InlineResponse2005DataKnockOutValue Value { get; set; }

        /// <summary>
        /// Gets or Sets Distance
        /// </summary>
        [DataMember(Name = "distance", EmitDefaultValue = false)]
        public InlineResponse2005DataKnockOutDistance Distance { get; set; }

        /// <summary>
        /// Indicates whether securitized derivatives with a breached and with a non-breached knock-out barrier are among the results.
        /// </summary>
        /// <value>Indicates whether securitized derivatives with a breached and with a non-breached knock-out barrier are among the results.</value>
        [DataMember(Name = "breached", EmitDefaultValue = false)]
        public List<InlineResponse2005DataLifeCycleMaturityPerpetual> Breached { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class InlineResponse2005DataKnockOut {\n");
            sb.Append("  Observation: ").Append(Observation).Append("\n");
            sb.Append("  Value: ").Append(Value).Append("\n");
            sb.Append("  Distance: ").Append(Distance).Append("\n");
            sb.Append("  Breached: ").Append(Breached).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as InlineResponse2005DataKnockOut);
        }

        /// <summary>
        /// Returns true if InlineResponse2005DataKnockOut instances are equal
        /// </summary>
        /// <param name="input">Instance of InlineResponse2005DataKnockOut to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(InlineResponse2005DataKnockOut input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Observation == input.Observation ||
                    this.Observation != null &&
                    input.Observation != null &&
                    this.Observation.SequenceEqual(input.Observation)
                ) && 
                (
                    this.Value == input.Value ||
                    (this.Value != null &&
                    this.Value.Equals(input.Value))
                ) && 
                (
                    this.Distance == input.Distance ||
                    (this.Distance != null &&
                    this.Distance.Equals(input.Distance))
                ) && 
                (
                    this.Breached == input.Breached ||
                    this.Breached != null &&
                    input.Breached != null &&
                    this.Breached.SequenceEqual(input.Breached)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Observation != null)
                {
                    hashCode = (hashCode * 59) + this.Observation.GetHashCode();
                }
                if (this.Value != null)
                {
                    hashCode = (hashCode * 59) + this.Value.GetHashCode();
                }
                if (this.Distance != null)
                {
                    hashCode = (hashCode * 59) + this.Distance.GetHashCode();
                }
                if (this.Breached != null)
                {
                    hashCode = (hashCode * 59) + this.Breached.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
