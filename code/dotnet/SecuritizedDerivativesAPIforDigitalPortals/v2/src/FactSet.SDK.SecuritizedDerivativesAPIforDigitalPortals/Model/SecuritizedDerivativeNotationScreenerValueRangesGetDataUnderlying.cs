/*
 * Prime Developer Trial
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = FactSet.SDK.SecuritizedDerivativesAPIforDigitalPortals.Client.OpenAPIDateConverter;

namespace FactSet.SDK.SecuritizedDerivativesAPIforDigitalPortals.Model
{
    /// <summary>
    /// Underlying selection. A list of underlyings can be selected by either using their instrument identifiers, see parameter &#x60;underlying.instrument.ids&#x60; or by using their notation identifiers, see parameter &#x60;underlying.notation.ids&#x60; but not both at the same time. Only one of the provided identifiers needs to be matched in order for a securitized derivative to be returned in the result.   The list of underlyings is particularly useful to search for securitized derivatives that have very similar but not exactly the same underlyings such as futures with different maturities on a given commodity, e.g. brent crude oil. For such a list of underlyings, a barrier restriction in absolute terms, see for example parameter &#x60;singleBarriers.level.absolute&#x60; or &#x60;rangeBarriers.upper.level.absolute&#x60;, will provide a meaningful result, whereas for a list of non-similar underlyings, such as different stocks, a barrier restriction in absolute terms will not provide a meaningful result. This is due to the fact that futures on the same commodity are comparable in regards to their prices while two different stocks are not comparable.   Parameters in relative terms, see for example parameter &#x60;singleBarriers.distance.relative&#x60;, are generally comparable and will provide meaningful result for a list of similar as well as for a list of non-similar underlyings.   For the selection of the effective underling of factor certificates, use &#x60;factorCertificates.effectiveUnderlying.instrument.ids&#x60;.
    /// </summary>
    [DataContract(Name = "_securitizedDerivative_notation_screener_valueRanges_get_data_underlying")]
    public partial class SecuritizedDerivativeNotationScreenerValueRangesGetDataUnderlying : IEquatable<SecuritizedDerivativeNotationScreenerValueRangesGetDataUnderlying>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SecuritizedDerivativeNotationScreenerValueRangesGetDataUnderlying" /> class.
        /// </summary>
        /// <param name="instrument">instrument.</param>
        /// <param name="notation">notation.</param>
        public SecuritizedDerivativeNotationScreenerValueRangesGetDataUnderlying(SecuritizedDerivativeNotationRankingIntradayListDataUnderlyingInstrument instrument = default(SecuritizedDerivativeNotationRankingIntradayListDataUnderlyingInstrument), SecuritizedDerivativeNotationRankingIntradayListDataUnderlyingNotation notation = default(SecuritizedDerivativeNotationRankingIntradayListDataUnderlyingNotation))
        {
            this.Instrument = instrument;
            this.Notation = notation;
        }

        /// <summary>
        /// Gets or Sets Instrument
        /// </summary>
        [DataMember(Name = "instrument", EmitDefaultValue = false)]
        public SecuritizedDerivativeNotationRankingIntradayListDataUnderlyingInstrument Instrument { get; set; }

        /// <summary>
        /// Gets or Sets Notation
        /// </summary>
        [DataMember(Name = "notation", EmitDefaultValue = false)]
        public SecuritizedDerivativeNotationRankingIntradayListDataUnderlyingNotation Notation { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SecuritizedDerivativeNotationScreenerValueRangesGetDataUnderlying {\n");
            sb.Append("  Instrument: ").Append(Instrument).Append("\n");
            sb.Append("  Notation: ").Append(Notation).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SecuritizedDerivativeNotationScreenerValueRangesGetDataUnderlying);
        }

        /// <summary>
        /// Returns true if SecuritizedDerivativeNotationScreenerValueRangesGetDataUnderlying instances are equal
        /// </summary>
        /// <param name="input">Instance of SecuritizedDerivativeNotationScreenerValueRangesGetDataUnderlying to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SecuritizedDerivativeNotationScreenerValueRangesGetDataUnderlying input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Instrument == input.Instrument ||
                    (this.Instrument != null &&
                    this.Instrument.Equals(input.Instrument))
                ) && 
                (
                    this.Notation == input.Notation ||
                    (this.Notation != null &&
                    this.Notation.Equals(input.Notation))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Instrument != null)
                    hashCode = hashCode * 59 + this.Instrument.GetHashCode();
                if (this.Notation != null)
                    hashCode = hashCode * 59 + this.Notation.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
