/*
 * Prime Developer Trial
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = FactSet.SDK.SecuritizedDerivativesAPIforDigitalPortals.Client.OpenAPIDateConverter;

namespace FactSet.SDK.SecuritizedDerivativesAPIforDigitalPortals.Model
{
    /// <summary>
    /// Instrument data of the securitized derivative.
    /// </summary>
    [DataContract(Name = "inline_response_200_data")]
    public partial class InlineResponse200Data : IEquatable<InlineResponse200Data>, IValidatableObject
    {
        /// <summary>
        /// Settlement is the fulfillment of the issuer&#39;s contractual obligations arising from the securitized derivative. Depending on the terms, the underlying asset may be delivered physically or its equivalent monetary value may be payed out.
        /// </summary>
        /// <value>Settlement is the fulfillment of the issuer&#39;s contractual obligations arising from the securitized derivative. Depending on the terms, the underlying asset may be delivered physically or its equivalent monetary value may be payed out.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum SettlementEnum
        {
            /// <summary>
            /// Enum Cash for value: cash
            /// </summary>
            [EnumMember(Value = "cash")]
            Cash = 1,

            /// <summary>
            /// Enum Physical for value: physical
            /// </summary>
            [EnumMember(Value = "physical")]
            Physical = 2,

            /// <summary>
            /// Enum Either for value: either
            /// </summary>
            [EnumMember(Value = "either")]
            Either = 3

        }


        /// <summary>
        /// Settlement is the fulfillment of the issuer&#39;s contractual obligations arising from the securitized derivative. Depending on the terms, the underlying asset may be delivered physically or its equivalent monetary value may be payed out.
        /// </summary>
        /// <value>Settlement is the fulfillment of the issuer&#39;s contractual obligations arising from the securitized derivative. Depending on the terms, the underlying asset may be delivered physically or its equivalent monetary value may be payed out.</value>
        [DataMember(Name = "settlement", EmitDefaultValue = false)]
        public SettlementEnum? Settlement { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="InlineResponse200Data" /> class.
        /// </summary>
        /// <param name="isin">The International Securities Identification Number (ISIN) of the instrument. The ISIN is a 12-character code of digits and upper-case letters that uniquely identifies an instrument..</param>
        /// <param name="nsin">nsin.</param>
        /// <param name="isPrivatePlacement">If true, the instrument is part of a private placement and therefore not publicly traded..</param>
        /// <param name="name">Name of the instrument..</param>
        /// <param name="shortName">Short name of the instrument..</param>
        /// <param name="type">Instrument type as defined by FactSet Digital Solutions. Instrument types are arranged in a hierarchy, with the first level representing the most coarse granularity and further levels successively refining the granularity (see MDG category system 18). Please refer to endpoint &#x60;/category/get&#x60; for possible values..</param>
        /// <param name="isIncomplete">If true, the data supplier has marked the data for this instrument as incomplete..</param>
        /// <param name="lifeCycle">lifeCycle.</param>
        /// <param name="countrySecurityRegistration">List of countries where the instrument is registered. See endpoint &#x60;/basic/region/country/list&#x60; for possible values..</param>
        /// <param name="referenceDebtor">referenceDebtor.</param>
        /// <param name="isCollateralized">If true, this instrument is protected against an issuer default by collateral (e.g. COSI collateralization by SIX Swiss Exchange)..</param>
        /// <param name="isQuanto">If true, the risk of exchange rate fluctuations between the value unit of the underlying (all of them, in case of multiple underlyings) and the value unit of the redemption is hedged..</param>
        /// <param name="capitalProtection">Proportion of the nominal amount protected against loss, usually 100%..</param>
        /// <param name="hasCatchUp">If true, the instrument has a so-called \&quot;memory feature\&quot; (also called \&quot;catch up\&quot;). This means that a conditional payment that has not been paid out could be paid on a subsequent payment date if the condition is then satisfied..</param>
        /// <param name="hasAutomaticExercise">If true, the instrument will be automatically exercised at termination (such as maturity, premature call, or premature payout). It prevents such products from becoming worthless, meaning the investor does not have to undertake any steps in order to receive the payable amount..</param>
        /// <param name="orderVolume">orderVolume.</param>
        /// <param name="redemptionAmount">Actual redemption amount after expiry (e.g. knock out, maturity etc) for securitized derivatives with a so-called knock-out feature. The currency of the redemption amount is given by &#x60;issue.valueUnit&#x60; and is always a main currency for securitized derivatives with that feature. .</param>
        /// <param name="nominal">nominal.</param>
        /// <param name="issuer">issuer.</param>
        /// <param name="issue">issue.</param>
        /// <param name="exercise">exercise.</param>
        /// <param name="settlement">Settlement is the fulfillment of the issuer&#39;s contractual obligations arising from the securitized derivative. Depending on the terms, the underlying asset may be delivered physically or its equivalent monetary value may be payed out..</param>
        public InlineResponse200Data(string isin = default(string), InlineResponse200DataNsin nsin = default(InlineResponse200DataNsin), bool isPrivatePlacement = default(bool), string name = default(string), string shortName = default(string), List<InlineResponse200DataType> type = default(List<InlineResponse200DataType>), bool isIncomplete = default(bool), InlineResponse200DataLifeCycle lifeCycle = default(InlineResponse200DataLifeCycle), List<InlineResponse200DataCountrySecurityRegistration> countrySecurityRegistration = default(List<InlineResponse200DataCountrySecurityRegistration>), InlineResponse200DataReferenceDebtor referenceDebtor = default(InlineResponse200DataReferenceDebtor), bool isCollateralized = default(bool), bool isQuanto = default(bool), decimal capitalProtection = default(decimal), bool hasCatchUp = default(bool), bool hasAutomaticExercise = default(bool), InlineResponse200DataOrderVolume orderVolume = default(InlineResponse200DataOrderVolume), decimal redemptionAmount = default(decimal), InlineResponse200DataNominal nominal = default(InlineResponse200DataNominal), InlineResponse200DataIssuer issuer = default(InlineResponse200DataIssuer), InlineResponse200DataIssue issue = default(InlineResponse200DataIssue), InlineResponse200DataExercise exercise = default(InlineResponse200DataExercise), SettlementEnum? settlement = default(SettlementEnum?))
        {
            this.Isin = isin;
            this.Nsin = nsin;
            this.IsPrivatePlacement = isPrivatePlacement;
            this.Name = name;
            this.ShortName = shortName;
            this.Type = type;
            this.IsIncomplete = isIncomplete;
            this.LifeCycle = lifeCycle;
            this.CountrySecurityRegistration = countrySecurityRegistration;
            this.ReferenceDebtor = referenceDebtor;
            this.IsCollateralized = isCollateralized;
            this.IsQuanto = isQuanto;
            this.CapitalProtection = capitalProtection;
            this.HasCatchUp = hasCatchUp;
            this.HasAutomaticExercise = hasAutomaticExercise;
            this.OrderVolume = orderVolume;
            this.RedemptionAmount = redemptionAmount;
            this.Nominal = nominal;
            this.Issuer = issuer;
            this.Issue = issue;
            this.Exercise = exercise;
            this.Settlement = settlement;
        }

        /// <summary>
        /// The International Securities Identification Number (ISIN) of the instrument. The ISIN is a 12-character code of digits and upper-case letters that uniquely identifies an instrument.
        /// </summary>
        /// <value>The International Securities Identification Number (ISIN) of the instrument. The ISIN is a 12-character code of digits and upper-case letters that uniquely identifies an instrument.</value>
        [DataMember(Name = "isin", EmitDefaultValue = false)]
        public string Isin { get; set; }

        /// <summary>
        /// Gets or Sets Nsin
        /// </summary>
        [DataMember(Name = "nsin", EmitDefaultValue = false)]
        public InlineResponse200DataNsin Nsin { get; set; }

        /// <summary>
        /// If true, the instrument is part of a private placement and therefore not publicly traded.
        /// </summary>
        /// <value>If true, the instrument is part of a private placement and therefore not publicly traded.</value>
        [DataMember(Name = "isPrivatePlacement", EmitDefaultValue = true)]
        public bool IsPrivatePlacement { get; set; }

        /// <summary>
        /// Name of the instrument.
        /// </summary>
        /// <value>Name of the instrument.</value>
        [DataMember(Name = "name", EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// Short name of the instrument.
        /// </summary>
        /// <value>Short name of the instrument.</value>
        [DataMember(Name = "shortName", EmitDefaultValue = false)]
        public string ShortName { get; set; }

        /// <summary>
        /// Instrument type as defined by FactSet Digital Solutions. Instrument types are arranged in a hierarchy, with the first level representing the most coarse granularity and further levels successively refining the granularity (see MDG category system 18). Please refer to endpoint &#x60;/category/get&#x60; for possible values.
        /// </summary>
        /// <value>Instrument type as defined by FactSet Digital Solutions. Instrument types are arranged in a hierarchy, with the first level representing the most coarse granularity and further levels successively refining the granularity (see MDG category system 18). Please refer to endpoint &#x60;/category/get&#x60; for possible values.</value>
        [DataMember(Name = "type", EmitDefaultValue = false)]
        public List<InlineResponse200DataType> Type { get; set; }

        /// <summary>
        /// If true, the data supplier has marked the data for this instrument as incomplete.
        /// </summary>
        /// <value>If true, the data supplier has marked the data for this instrument as incomplete.</value>
        [DataMember(Name = "isIncomplete", EmitDefaultValue = true)]
        public bool IsIncomplete { get; set; }

        /// <summary>
        /// Gets or Sets LifeCycle
        /// </summary>
        [DataMember(Name = "lifeCycle", EmitDefaultValue = false)]
        public InlineResponse200DataLifeCycle LifeCycle { get; set; }

        /// <summary>
        /// List of countries where the instrument is registered. See endpoint &#x60;/basic/region/country/list&#x60; for possible values.
        /// </summary>
        /// <value>List of countries where the instrument is registered. See endpoint &#x60;/basic/region/country/list&#x60; for possible values.</value>
        [DataMember(Name = "countrySecurityRegistration", EmitDefaultValue = false)]
        public List<InlineResponse200DataCountrySecurityRegistration> CountrySecurityRegistration { get; set; }

        /// <summary>
        /// Gets or Sets ReferenceDebtor
        /// </summary>
        [DataMember(Name = "referenceDebtor", EmitDefaultValue = false)]
        public InlineResponse200DataReferenceDebtor ReferenceDebtor { get; set; }

        /// <summary>
        /// If true, this instrument is protected against an issuer default by collateral (e.g. COSI collateralization by SIX Swiss Exchange).
        /// </summary>
        /// <value>If true, this instrument is protected against an issuer default by collateral (e.g. COSI collateralization by SIX Swiss Exchange).</value>
        [DataMember(Name = "isCollateralized", EmitDefaultValue = true)]
        public bool IsCollateralized { get; set; }

        /// <summary>
        /// If true, the risk of exchange rate fluctuations between the value unit of the underlying (all of them, in case of multiple underlyings) and the value unit of the redemption is hedged.
        /// </summary>
        /// <value>If true, the risk of exchange rate fluctuations between the value unit of the underlying (all of them, in case of multiple underlyings) and the value unit of the redemption is hedged.</value>
        [DataMember(Name = "isQuanto", EmitDefaultValue = true)]
        public bool IsQuanto { get; set; }

        /// <summary>
        /// Proportion of the nominal amount protected against loss, usually 100%.
        /// </summary>
        /// <value>Proportion of the nominal amount protected against loss, usually 100%.</value>
        [DataMember(Name = "capitalProtection", EmitDefaultValue = false)]
        public decimal CapitalProtection { get; set; }

        /// <summary>
        /// If true, the instrument has a so-called \&quot;memory feature\&quot; (also called \&quot;catch up\&quot;). This means that a conditional payment that has not been paid out could be paid on a subsequent payment date if the condition is then satisfied.
        /// </summary>
        /// <value>If true, the instrument has a so-called \&quot;memory feature\&quot; (also called \&quot;catch up\&quot;). This means that a conditional payment that has not been paid out could be paid on a subsequent payment date if the condition is then satisfied.</value>
        [DataMember(Name = "hasCatchUp", EmitDefaultValue = true)]
        public bool HasCatchUp { get; set; }

        /// <summary>
        /// If true, the instrument will be automatically exercised at termination (such as maturity, premature call, or premature payout). It prevents such products from becoming worthless, meaning the investor does not have to undertake any steps in order to receive the payable amount.
        /// </summary>
        /// <value>If true, the instrument will be automatically exercised at termination (such as maturity, premature call, or premature payout). It prevents such products from becoming worthless, meaning the investor does not have to undertake any steps in order to receive the payable amount.</value>
        [DataMember(Name = "hasAutomaticExercise", EmitDefaultValue = true)]
        public bool HasAutomaticExercise { get; set; }

        /// <summary>
        /// Gets or Sets OrderVolume
        /// </summary>
        [DataMember(Name = "orderVolume", EmitDefaultValue = false)]
        public InlineResponse200DataOrderVolume OrderVolume { get; set; }

        /// <summary>
        /// Actual redemption amount after expiry (e.g. knock out, maturity etc) for securitized derivatives with a so-called knock-out feature. The currency of the redemption amount is given by &#x60;issue.valueUnit&#x60; and is always a main currency for securitized derivatives with that feature. 
        /// </summary>
        /// <value>Actual redemption amount after expiry (e.g. knock out, maturity etc) for securitized derivatives with a so-called knock-out feature. The currency of the redemption amount is given by &#x60;issue.valueUnit&#x60; and is always a main currency for securitized derivatives with that feature. </value>
        [DataMember(Name = "redemptionAmount", EmitDefaultValue = false)]
        public decimal RedemptionAmount { get; set; }

        /// <summary>
        /// Gets or Sets Nominal
        /// </summary>
        [DataMember(Name = "nominal", EmitDefaultValue = false)]
        public InlineResponse200DataNominal Nominal { get; set; }

        /// <summary>
        /// Gets or Sets Issuer
        /// </summary>
        [DataMember(Name = "issuer", EmitDefaultValue = false)]
        public InlineResponse200DataIssuer Issuer { get; set; }

        /// <summary>
        /// Gets or Sets Issue
        /// </summary>
        [DataMember(Name = "issue", EmitDefaultValue = false)]
        public InlineResponse200DataIssue Issue { get; set; }

        /// <summary>
        /// Gets or Sets Exercise
        /// </summary>
        [DataMember(Name = "exercise", EmitDefaultValue = false)]
        public InlineResponse200DataExercise Exercise { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class InlineResponse200Data {\n");
            sb.Append("  Isin: ").Append(Isin).Append("\n");
            sb.Append("  Nsin: ").Append(Nsin).Append("\n");
            sb.Append("  IsPrivatePlacement: ").Append(IsPrivatePlacement).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  ShortName: ").Append(ShortName).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  IsIncomplete: ").Append(IsIncomplete).Append("\n");
            sb.Append("  LifeCycle: ").Append(LifeCycle).Append("\n");
            sb.Append("  CountrySecurityRegistration: ").Append(CountrySecurityRegistration).Append("\n");
            sb.Append("  ReferenceDebtor: ").Append(ReferenceDebtor).Append("\n");
            sb.Append("  IsCollateralized: ").Append(IsCollateralized).Append("\n");
            sb.Append("  IsQuanto: ").Append(IsQuanto).Append("\n");
            sb.Append("  CapitalProtection: ").Append(CapitalProtection).Append("\n");
            sb.Append("  HasCatchUp: ").Append(HasCatchUp).Append("\n");
            sb.Append("  HasAutomaticExercise: ").Append(HasAutomaticExercise).Append("\n");
            sb.Append("  OrderVolume: ").Append(OrderVolume).Append("\n");
            sb.Append("  RedemptionAmount: ").Append(RedemptionAmount).Append("\n");
            sb.Append("  Nominal: ").Append(Nominal).Append("\n");
            sb.Append("  Issuer: ").Append(Issuer).Append("\n");
            sb.Append("  Issue: ").Append(Issue).Append("\n");
            sb.Append("  Exercise: ").Append(Exercise).Append("\n");
            sb.Append("  Settlement: ").Append(Settlement).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as InlineResponse200Data);
        }

        /// <summary>
        /// Returns true if InlineResponse200Data instances are equal
        /// </summary>
        /// <param name="input">Instance of InlineResponse200Data to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(InlineResponse200Data input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Isin == input.Isin ||
                    (this.Isin != null &&
                    this.Isin.Equals(input.Isin))
                ) && 
                (
                    this.Nsin == input.Nsin ||
                    (this.Nsin != null &&
                    this.Nsin.Equals(input.Nsin))
                ) && 
                (
                    this.IsPrivatePlacement == input.IsPrivatePlacement ||
                    this.IsPrivatePlacement.Equals(input.IsPrivatePlacement)
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.ShortName == input.ShortName ||
                    (this.ShortName != null &&
                    this.ShortName.Equals(input.ShortName))
                ) && 
                (
                    this.Type == input.Type ||
                    this.Type != null &&
                    input.Type != null &&
                    this.Type.SequenceEqual(input.Type)
                ) && 
                (
                    this.IsIncomplete == input.IsIncomplete ||
                    this.IsIncomplete.Equals(input.IsIncomplete)
                ) && 
                (
                    this.LifeCycle == input.LifeCycle ||
                    (this.LifeCycle != null &&
                    this.LifeCycle.Equals(input.LifeCycle))
                ) && 
                (
                    this.CountrySecurityRegistration == input.CountrySecurityRegistration ||
                    this.CountrySecurityRegistration != null &&
                    input.CountrySecurityRegistration != null &&
                    this.CountrySecurityRegistration.SequenceEqual(input.CountrySecurityRegistration)
                ) && 
                (
                    this.ReferenceDebtor == input.ReferenceDebtor ||
                    (this.ReferenceDebtor != null &&
                    this.ReferenceDebtor.Equals(input.ReferenceDebtor))
                ) && 
                (
                    this.IsCollateralized == input.IsCollateralized ||
                    this.IsCollateralized.Equals(input.IsCollateralized)
                ) && 
                (
                    this.IsQuanto == input.IsQuanto ||
                    this.IsQuanto.Equals(input.IsQuanto)
                ) && 
                (
                    this.CapitalProtection == input.CapitalProtection ||
                    this.CapitalProtection.Equals(input.CapitalProtection)
                ) && 
                (
                    this.HasCatchUp == input.HasCatchUp ||
                    this.HasCatchUp.Equals(input.HasCatchUp)
                ) && 
                (
                    this.HasAutomaticExercise == input.HasAutomaticExercise ||
                    this.HasAutomaticExercise.Equals(input.HasAutomaticExercise)
                ) && 
                (
                    this.OrderVolume == input.OrderVolume ||
                    (this.OrderVolume != null &&
                    this.OrderVolume.Equals(input.OrderVolume))
                ) && 
                (
                    this.RedemptionAmount == input.RedemptionAmount ||
                    this.RedemptionAmount.Equals(input.RedemptionAmount)
                ) && 
                (
                    this.Nominal == input.Nominal ||
                    (this.Nominal != null &&
                    this.Nominal.Equals(input.Nominal))
                ) && 
                (
                    this.Issuer == input.Issuer ||
                    (this.Issuer != null &&
                    this.Issuer.Equals(input.Issuer))
                ) && 
                (
                    this.Issue == input.Issue ||
                    (this.Issue != null &&
                    this.Issue.Equals(input.Issue))
                ) && 
                (
                    this.Exercise == input.Exercise ||
                    (this.Exercise != null &&
                    this.Exercise.Equals(input.Exercise))
                ) && 
                (
                    this.Settlement == input.Settlement ||
                    this.Settlement.Equals(input.Settlement)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Isin != null)
                {
                    hashCode = (hashCode * 59) + this.Isin.GetHashCode();
                }
                if (this.Nsin != null)
                {
                    hashCode = (hashCode * 59) + this.Nsin.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.IsPrivatePlacement.GetHashCode();
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                if (this.ShortName != null)
                {
                    hashCode = (hashCode * 59) + this.ShortName.GetHashCode();
                }
                if (this.Type != null)
                {
                    hashCode = (hashCode * 59) + this.Type.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.IsIncomplete.GetHashCode();
                if (this.LifeCycle != null)
                {
                    hashCode = (hashCode * 59) + this.LifeCycle.GetHashCode();
                }
                if (this.CountrySecurityRegistration != null)
                {
                    hashCode = (hashCode * 59) + this.CountrySecurityRegistration.GetHashCode();
                }
                if (this.ReferenceDebtor != null)
                {
                    hashCode = (hashCode * 59) + this.ReferenceDebtor.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.IsCollateralized.GetHashCode();
                hashCode = (hashCode * 59) + this.IsQuanto.GetHashCode();
                hashCode = (hashCode * 59) + this.CapitalProtection.GetHashCode();
                hashCode = (hashCode * 59) + this.HasCatchUp.GetHashCode();
                hashCode = (hashCode * 59) + this.HasAutomaticExercise.GetHashCode();
                if (this.OrderVolume != null)
                {
                    hashCode = (hashCode * 59) + this.OrderVolume.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.RedemptionAmount.GetHashCode();
                if (this.Nominal != null)
                {
                    hashCode = (hashCode * 59) + this.Nominal.GetHashCode();
                }
                if (this.Issuer != null)
                {
                    hashCode = (hashCode * 59) + this.Issuer.GetHashCode();
                }
                if (this.Issue != null)
                {
                    hashCode = (hashCode * 59) + this.Issue.GetHashCode();
                }
                if (this.Exercise != null)
                {
                    hashCode = (hashCode * 59) + this.Exercise.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Settlement.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
