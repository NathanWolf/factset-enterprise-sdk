/*
 * Prime Developer Trial
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = FactSet.SDK.SecuritizedDerivativesAPIforDigitalPortals.Client.OpenAPIDateConverter;

namespace FactSet.SDK.SecuritizedDerivativesAPIforDigitalPortals.Model
{
    /// <summary>
    /// Participation factor of the securitized derivative in the performance of the underlying, depending on the exercise right (see attribute &#x60;exercise.right&#x60; in endpoint &#x60;/securitizedDerivative/get&#x60;).
    /// </summary>
    [DataContract(Name = "inline_response_200_7_data_single_participationFactor")]
    public partial class InlineResponse2007DataSingleParticipationFactor : IEquatable<InlineResponse2007DataSingleParticipationFactor>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="InlineResponse2007DataSingleParticipationFactor" /> class.
        /// </summary>
        /// <param name="positive">Participation factor above the barrier for a securitized derivative with exercise right call, and below the barrier for exercise right put. .</param>
        /// <param name="negative">Participation factor above the barrier for a securitized derivative with exercise right put, and below the barrier for exercise right call..</param>
        public InlineResponse2007DataSingleParticipationFactor(decimal positive = default(decimal), decimal negative = default(decimal))
        {
            this.Positive = positive;
            this.Negative = negative;
        }

        /// <summary>
        /// Participation factor above the barrier for a securitized derivative with exercise right call, and below the barrier for exercise right put. 
        /// </summary>
        /// <value>Participation factor above the barrier for a securitized derivative with exercise right call, and below the barrier for exercise right put. </value>
        [DataMember(Name = "positive", EmitDefaultValue = false)]
        public decimal Positive { get; set; }

        /// <summary>
        /// Participation factor above the barrier for a securitized derivative with exercise right put, and below the barrier for exercise right call.
        /// </summary>
        /// <value>Participation factor above the barrier for a securitized derivative with exercise right put, and below the barrier for exercise right call.</value>
        [DataMember(Name = "negative", EmitDefaultValue = false)]
        public decimal Negative { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class InlineResponse2007DataSingleParticipationFactor {\n");
            sb.Append("  Positive: ").Append(Positive).Append("\n");
            sb.Append("  Negative: ").Append(Negative).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as InlineResponse2007DataSingleParticipationFactor);
        }

        /// <summary>
        /// Returns true if InlineResponse2007DataSingleParticipationFactor instances are equal
        /// </summary>
        /// <param name="input">Instance of InlineResponse2007DataSingleParticipationFactor to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(InlineResponse2007DataSingleParticipationFactor input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Positive == input.Positive ||
                    this.Positive.Equals(input.Positive)
                ) && 
                (
                    this.Negative == input.Negative ||
                    this.Negative.Equals(input.Negative)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = hashCode * 59 + this.Positive.GetHashCode();
                hashCode = hashCode * 59 + this.Negative.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
