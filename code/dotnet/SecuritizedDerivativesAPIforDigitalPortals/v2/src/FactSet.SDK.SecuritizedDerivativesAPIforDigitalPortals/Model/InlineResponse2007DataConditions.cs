/*
 * Prime Developer Trial
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = FactSet.SDK.SecuritizedDerivativesAPIforDigitalPortals.Client.OpenAPIDateConverter;

namespace FactSet.SDK.SecuritizedDerivativesAPIforDigitalPortals.Model
{
    /// <summary>
    /// InlineResponse2007DataConditions
    /// </summary>
    [DataContract(Name = "inline_response_200_7_data_conditions")]
    public partial class InlineResponse2007DataConditions : IEquatable<InlineResponse2007DataConditions>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="InlineResponse2007DataConditions" /> class.
        /// </summary>
        /// <param name="observation">observation.</param>
        /// <param name="barriers">Barrier modality of the condition, alongside with actual key figure and breach information..</param>
        /// <param name="cashFlow">cashFlow.</param>
        public InlineResponse2007DataConditions(InlineResponse2007DataObservation observation = default(InlineResponse2007DataObservation), List<InlineResponse2007DataBarriers> barriers = default(List<InlineResponse2007DataBarriers>), InlineResponse2007DataCashFlow cashFlow = default(InlineResponse2007DataCashFlow))
        {
            this.Observation = observation;
            this.Barriers = barriers;
            this.CashFlow = cashFlow;
        }

        /// <summary>
        /// Gets or Sets Observation
        /// </summary>
        [DataMember(Name = "observation", EmitDefaultValue = false)]
        public InlineResponse2007DataObservation Observation { get; set; }

        /// <summary>
        /// Barrier modality of the condition, alongside with actual key figure and breach information.
        /// </summary>
        /// <value>Barrier modality of the condition, alongside with actual key figure and breach information.</value>
        [DataMember(Name = "barriers", EmitDefaultValue = false)]
        public List<InlineResponse2007DataBarriers> Barriers { get; set; }

        /// <summary>
        /// Gets or Sets CashFlow
        /// </summary>
        [DataMember(Name = "cashFlow", EmitDefaultValue = false)]
        public InlineResponse2007DataCashFlow CashFlow { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class InlineResponse2007DataConditions {\n");
            sb.Append("  Observation: ").Append(Observation).Append("\n");
            sb.Append("  Barriers: ").Append(Barriers).Append("\n");
            sb.Append("  CashFlow: ").Append(CashFlow).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as InlineResponse2007DataConditions);
        }

        /// <summary>
        /// Returns true if InlineResponse2007DataConditions instances are equal
        /// </summary>
        /// <param name="input">Instance of InlineResponse2007DataConditions to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(InlineResponse2007DataConditions input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Observation == input.Observation ||
                    (this.Observation != null &&
                    this.Observation.Equals(input.Observation))
                ) && 
                (
                    this.Barriers == input.Barriers ||
                    this.Barriers != null &&
                    input.Barriers != null &&
                    this.Barriers.SequenceEqual(input.Barriers)
                ) && 
                (
                    this.CashFlow == input.CashFlow ||
                    (this.CashFlow != null &&
                    this.CashFlow.Equals(input.CashFlow))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Observation != null)
                    hashCode = hashCode * 59 + this.Observation.GetHashCode();
                if (this.Barriers != null)
                    hashCode = hashCode * 59 + this.Barriers.GetHashCode();
                if (this.CashFlow != null)
                    hashCode = hashCode * 59 + this.CashFlow.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
