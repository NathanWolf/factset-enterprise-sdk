/*
 * Prime Developer Trial
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = FactSet.SDK.SecuritizedDerivativesAPIforDigitalPortals.Client.OpenAPIDateConverter;

namespace FactSet.SDK.SecuritizedDerivativesAPIforDigitalPortals.Model
{
    /// <summary>
    /// Parameters for factor certificates.
    /// </summary>
    [DataContract(Name = "_securitizedDerivative_notation_ranking_intraday_list_data_factorCertificates")]
    public partial class SecuritizedDerivativeNotationRankingIntradayListDataFactorCertificates : IEquatable<SecuritizedDerivativeNotationRankingIntradayListDataFactorCertificates>, IValidatableObject
    {
        /// <summary>
        /// Participation direction of the factor certificate at the level movement of its effective underlying.
        /// </summary>
        /// <value>Participation direction of the factor certificate at the level movement of its effective underlying.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ParticipationEnum
        {
            /// <summary>
            /// Enum Long for value: long
            /// </summary>
            [EnumMember(Value = "long")]
            Long = 1,

            /// <summary>
            /// Enum Short for value: short
            /// </summary>
            [EnumMember(Value = "short")]
            Short = 2

        }


        /// <summary>
        /// Participation direction of the factor certificate at the level movement of its effective underlying.
        /// </summary>
        /// <value>Participation direction of the factor certificate at the level movement of its effective underlying.</value>
        [DataMember(Name = "participation", EmitDefaultValue = false)]
        public ParticipationEnum? Participation { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="SecuritizedDerivativeNotationRankingIntradayListDataFactorCertificates" /> class.
        /// </summary>
        /// <param name="effectiveUnderlying">effectiveUnderlying.</param>
        /// <param name="participation">Participation direction of the factor certificate at the level movement of its effective underlying..</param>
        public SecuritizedDerivativeNotationRankingIntradayListDataFactorCertificates(SecuritizedDerivativeNotationRankingIntradayListDataFactorCertificatesEffectiveUnderlying effectiveUnderlying = default(SecuritizedDerivativeNotationRankingIntradayListDataFactorCertificatesEffectiveUnderlying), ParticipationEnum? participation = default(ParticipationEnum?))
        {
            this.EffectiveUnderlying = effectiveUnderlying;
            this.Participation = participation;
        }

        /// <summary>
        /// Gets or Sets EffectiveUnderlying
        /// </summary>
        [DataMember(Name = "effectiveUnderlying", EmitDefaultValue = false)]
        public SecuritizedDerivativeNotationRankingIntradayListDataFactorCertificatesEffectiveUnderlying EffectiveUnderlying { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SecuritizedDerivativeNotationRankingIntradayListDataFactorCertificates {\n");
            sb.Append("  EffectiveUnderlying: ").Append(EffectiveUnderlying).Append("\n");
            sb.Append("  Participation: ").Append(Participation).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SecuritizedDerivativeNotationRankingIntradayListDataFactorCertificates);
        }

        /// <summary>
        /// Returns true if SecuritizedDerivativeNotationRankingIntradayListDataFactorCertificates instances are equal
        /// </summary>
        /// <param name="input">Instance of SecuritizedDerivativeNotationRankingIntradayListDataFactorCertificates to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SecuritizedDerivativeNotationRankingIntradayListDataFactorCertificates input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.EffectiveUnderlying == input.EffectiveUnderlying ||
                    (this.EffectiveUnderlying != null &&
                    this.EffectiveUnderlying.Equals(input.EffectiveUnderlying))
                ) && 
                (
                    this.Participation == input.Participation ||
                    this.Participation.Equals(input.Participation)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.EffectiveUnderlying != null)
                    hashCode = hashCode * 59 + this.EffectiveUnderlying.GetHashCode();
                hashCode = hashCode * 59 + this.Participation.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
