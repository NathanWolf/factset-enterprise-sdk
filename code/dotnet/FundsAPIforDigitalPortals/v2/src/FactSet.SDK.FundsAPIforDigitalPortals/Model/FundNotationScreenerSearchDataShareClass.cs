/*
 * Funds API For Digital Portals
 *
 * Search for mutual funds and ETFs using one single consolidated API, including a criteria-based screener. The API provides also base data, key figures, and holdings.  A separate endpoint returns the possible values and value range for the parameters that the endpoint /fund/notation/screener/search accepts: Application developers can request the values and value range only for a restricted set of notations that match predefined parameters. This functionality may be used to pre-fill the values and value ranges of the parameters of the /fund/notation/screener/search endpoint so that performing a search always leads to a non-empty set of notations.  This API is fully integrated with the corresponding Quotes API, allowing access to detailed price and performance information of instruments, as well as basic security identifier cross-reference. For direct access to price histories, please refer to the Time Series API for Digital Portals.  Similar criteria based screener APIs exist for equity instruments and securitized derivatives: See the Stocks API and the Securitized Derivatives API for details.
 *
 * The version of the OpenAPI document: 2
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = FactSet.SDK.FundsAPIforDigitalPortals.Client.OpenAPIDateConverter;

namespace FactSet.SDK.FundsAPIforDigitalPortals.Model
{
    /// <summary>
    /// Parameters related to share classes.
    /// </summary>
    [DataContract(Name = "_fund_notation_screener_search_data_shareClass")]
    public partial class FundNotationScreenerSearchDataShareClass : IEquatable<FundNotationScreenerSearchDataShareClass>, IValidatableObject
    {
        /// <summary>
        /// Defines whether or not distributing share classes are included in the result. A share class may distribute (pay out) the earnings to the investors or may reinvest them.
        /// </summary>
        /// <value>Defines whether or not distributing share classes are included in the result. A share class may distribute (pay out) the earnings to the investors or may reinvest them.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum DistributingEnum
        {
            /// <summary>
            /// Enum Only for value: only
            /// </summary>
            [EnumMember(Value = "only")]
            Only = 1,

            /// <summary>
            /// Enum Include for value: include
            /// </summary>
            [EnumMember(Value = "include")]
            Include = 2,

            /// <summary>
            /// Enum Exclude for value: exclude
            /// </summary>
            [EnumMember(Value = "exclude")]
            Exclude = 3

        }


        /// <summary>
        /// Defines whether or not distributing share classes are included in the result. A share class may distribute (pay out) the earnings to the investors or may reinvest them.
        /// </summary>
        /// <value>Defines whether or not distributing share classes are included in the result. A share class may distribute (pay out) the earnings to the investors or may reinvest them.</value>
        [DataMember(Name = "distributing", EmitDefaultValue = false)]
        public DistributingEnum? Distributing { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="FundNotationScreenerSearchDataShareClass" /> class.
        /// </summary>
        /// <param name="currency">currency.</param>
        /// <param name="distributing">Defines whether or not distributing share classes are included in the result. A share class may distribute (pay out) the earnings to the investors or may reinvest them. (default to DistributingEnum.Include).</param>
        /// <param name="registrationCountry">registrationCountry.</param>
        /// <param name="lifeCycle">lifeCycle.</param>
        /// <param name="minimumInvestment">minimumInvestment.</param>
        /// <param name="assetsUnderManagement">assetsUnderManagement.</param>
        /// <param name="compliance">compliance.</param>
        /// <param name="fee">fee.</param>
        public FundNotationScreenerSearchDataShareClass(FundNotationScreenerSearchDataShareClassCurrency currency = default(FundNotationScreenerSearchDataShareClassCurrency), DistributingEnum? distributing = DistributingEnum.Include, FundNotationScreenerSearchDataShareClassRegistrationCountry registrationCountry = default(FundNotationScreenerSearchDataShareClassRegistrationCountry), FundNotationScreenerSearchDataShareClassLifeCycle lifeCycle = default(FundNotationScreenerSearchDataShareClassLifeCycle), FundNotationScreenerSearchDataShareClassMinimumInvestment minimumInvestment = default(FundNotationScreenerSearchDataShareClassMinimumInvestment), FundNotationScreenerSearchDataShareClassAssetsUnderManagement assetsUnderManagement = default(FundNotationScreenerSearchDataShareClassAssetsUnderManagement), FundNotationScreenerSearchDataShareClassCompliance compliance = default(FundNotationScreenerSearchDataShareClassCompliance), FundNotationScreenerSearchDataShareClassFee fee = default(FundNotationScreenerSearchDataShareClassFee))
        {
            this.Currency = currency;
            this.Distributing = distributing;
            this.RegistrationCountry = registrationCountry;
            this.LifeCycle = lifeCycle;
            this.MinimumInvestment = minimumInvestment;
            this.AssetsUnderManagement = assetsUnderManagement;
            this.Compliance = compliance;
            this.Fee = fee;
        }

        /// <summary>
        /// Gets or Sets Currency
        /// </summary>
        [DataMember(Name = "currency", EmitDefaultValue = false)]
        public FundNotationScreenerSearchDataShareClassCurrency Currency { get; set; }

        /// <summary>
        /// Gets or Sets RegistrationCountry
        /// </summary>
        [DataMember(Name = "registrationCountry", EmitDefaultValue = false)]
        public FundNotationScreenerSearchDataShareClassRegistrationCountry RegistrationCountry { get; set; }

        /// <summary>
        /// Gets or Sets LifeCycle
        /// </summary>
        [DataMember(Name = "lifeCycle", EmitDefaultValue = false)]
        public FundNotationScreenerSearchDataShareClassLifeCycle LifeCycle { get; set; }

        /// <summary>
        /// Gets or Sets MinimumInvestment
        /// </summary>
        [DataMember(Name = "minimumInvestment", EmitDefaultValue = false)]
        public FundNotationScreenerSearchDataShareClassMinimumInvestment MinimumInvestment { get; set; }

        /// <summary>
        /// Gets or Sets AssetsUnderManagement
        /// </summary>
        [DataMember(Name = "assetsUnderManagement", EmitDefaultValue = false)]
        public FundNotationScreenerSearchDataShareClassAssetsUnderManagement AssetsUnderManagement { get; set; }

        /// <summary>
        /// Gets or Sets Compliance
        /// </summary>
        [DataMember(Name = "compliance", EmitDefaultValue = false)]
        public FundNotationScreenerSearchDataShareClassCompliance Compliance { get; set; }

        /// <summary>
        /// Gets or Sets Fee
        /// </summary>
        [DataMember(Name = "fee", EmitDefaultValue = false)]
        public FundNotationScreenerSearchDataShareClassFee Fee { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class FundNotationScreenerSearchDataShareClass {\n");
            sb.Append("  Currency: ").Append(Currency).Append("\n");
            sb.Append("  Distributing: ").Append(Distributing).Append("\n");
            sb.Append("  RegistrationCountry: ").Append(RegistrationCountry).Append("\n");
            sb.Append("  LifeCycle: ").Append(LifeCycle).Append("\n");
            sb.Append("  MinimumInvestment: ").Append(MinimumInvestment).Append("\n");
            sb.Append("  AssetsUnderManagement: ").Append(AssetsUnderManagement).Append("\n");
            sb.Append("  Compliance: ").Append(Compliance).Append("\n");
            sb.Append("  Fee: ").Append(Fee).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as FundNotationScreenerSearchDataShareClass);
        }

        /// <summary>
        /// Returns true if FundNotationScreenerSearchDataShareClass instances are equal
        /// </summary>
        /// <param name="input">Instance of FundNotationScreenerSearchDataShareClass to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FundNotationScreenerSearchDataShareClass input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Currency == input.Currency ||
                    (this.Currency != null &&
                    this.Currency.Equals(input.Currency))
                ) && 
                (
                    this.Distributing == input.Distributing ||
                    this.Distributing.Equals(input.Distributing)
                ) && 
                (
                    this.RegistrationCountry == input.RegistrationCountry ||
                    (this.RegistrationCountry != null &&
                    this.RegistrationCountry.Equals(input.RegistrationCountry))
                ) && 
                (
                    this.LifeCycle == input.LifeCycle ||
                    (this.LifeCycle != null &&
                    this.LifeCycle.Equals(input.LifeCycle))
                ) && 
                (
                    this.MinimumInvestment == input.MinimumInvestment ||
                    (this.MinimumInvestment != null &&
                    this.MinimumInvestment.Equals(input.MinimumInvestment))
                ) && 
                (
                    this.AssetsUnderManagement == input.AssetsUnderManagement ||
                    (this.AssetsUnderManagement != null &&
                    this.AssetsUnderManagement.Equals(input.AssetsUnderManagement))
                ) && 
                (
                    this.Compliance == input.Compliance ||
                    (this.Compliance != null &&
                    this.Compliance.Equals(input.Compliance))
                ) && 
                (
                    this.Fee == input.Fee ||
                    (this.Fee != null &&
                    this.Fee.Equals(input.Fee))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Currency != null)
                {
                    hashCode = (hashCode * 59) + this.Currency.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Distributing.GetHashCode();
                if (this.RegistrationCountry != null)
                {
                    hashCode = (hashCode * 59) + this.RegistrationCountry.GetHashCode();
                }
                if (this.LifeCycle != null)
                {
                    hashCode = (hashCode * 59) + this.LifeCycle.GetHashCode();
                }
                if (this.MinimumInvestment != null)
                {
                    hashCode = (hashCode * 59) + this.MinimumInvestment.GetHashCode();
                }
                if (this.AssetsUnderManagement != null)
                {
                    hashCode = (hashCode * 59) + this.AssetsUnderManagement.GetHashCode();
                }
                if (this.Compliance != null)
                {
                    hashCode = (hashCode * 59) + this.Compliance.GetHashCode();
                }
                if (this.Fee != null)
                {
                    hashCode = (hashCode * 59) + this.Fee.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
