/*
 * Funds API For Digital Portals
 *
 * Search for mutual funds and ETFs using one single consolidated API, including a criteria-based screener. The API provides also base data, key figures, and holdings.  A separate endpoint returns the possible values and value range for the parameters that the endpoint /fund/notation/screener/search accepts: Application developers can request the values and value range only for a restricted set of notations that match predefined parameters. This functionality may be used to pre-fill the values and value ranges of the parameters of the /fund/notation/screener/search endpoint so that performing a search always leads to a non-empty set of notations.  This API is fully integrated with the corresponding Quotes API, allowing access to detailed price and performance information of instruments, as well as basic security identifier cross-reference. For direct access to price histories, please refer to the Time Series API for Digital Portals.  Similar criteria based screener APIs exist for equity instruments and securitized derivatives: See the Stocks API and the Securitized Derivatives API for details.
 *
 * The version of the OpenAPI document: 2
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = FactSet.SDK.FundsAPIforDigitalPortals.Client.OpenAPIDateConverter;

namespace FactSet.SDK.FundsAPIforDigitalPortals.Model
{
    /// <summary>
    /// End-of-day (EOD) relative performance for different time ranges. The relative performance is the difference of a notation&#39;s most recent EOD closing price against the EOD closing price on the reference date, relative to the EOD closing price on the reference date.
    /// </summary>
    [DataContract(Name = "_fund_notation_screener_search_data_performance_endOfDay")]
    public partial class FundNotationScreenerSearchDataPerformanceEndOfDay : IEquatable<FundNotationScreenerSearchDataPerformanceEndOfDay>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="FundNotationScreenerSearchDataPerformanceEndOfDay" /> class.
        /// </summary>
        /// <param name="day1">day1.</param>
        /// <param name="week1">week1.</param>
        /// <param name="month1">month1.</param>
        /// <param name="months3">months3.</param>
        /// <param name="months6">months6.</param>
        /// <param name="year1">year1.</param>
        /// <param name="years3">years3.</param>
        /// <param name="years5">years5.</param>
        /// <param name="yearToDate">yearToDate.</param>
        public FundNotationScreenerSearchDataPerformanceEndOfDay(FundNotationScreenerSearchDataPerformanceEndOfDayDay1 day1 = default(FundNotationScreenerSearchDataPerformanceEndOfDayDay1), FundNotationScreenerSearchDataPerformanceEndOfDayWeek1 week1 = default(FundNotationScreenerSearchDataPerformanceEndOfDayWeek1), FundNotationScreenerSearchDataPerformanceEndOfDayMonth1 month1 = default(FundNotationScreenerSearchDataPerformanceEndOfDayMonth1), FundNotationScreenerSearchDataPerformanceEndOfDayMonths3 months3 = default(FundNotationScreenerSearchDataPerformanceEndOfDayMonths3), FundNotationScreenerSearchDataPerformanceEndOfDayMonths6 months6 = default(FundNotationScreenerSearchDataPerformanceEndOfDayMonths6), FundNotationScreenerSearchDataPerformanceEndOfDayYear1 year1 = default(FundNotationScreenerSearchDataPerformanceEndOfDayYear1), FundNotationScreenerSearchDataPerformanceEndOfDayYears3 years3 = default(FundNotationScreenerSearchDataPerformanceEndOfDayYears3), FundNotationScreenerSearchDataPerformanceEndOfDayYears5 years5 = default(FundNotationScreenerSearchDataPerformanceEndOfDayYears5), FundNotationScreenerSearchDataPerformanceEndOfDayYearToDate yearToDate = default(FundNotationScreenerSearchDataPerformanceEndOfDayYearToDate))
        {
            this.Day1 = day1;
            this.Week1 = week1;
            this.Month1 = month1;
            this.Months3 = months3;
            this.Months6 = months6;
            this.Year1 = year1;
            this.Years3 = years3;
            this.Years5 = years5;
            this.YearToDate = yearToDate;
        }

        /// <summary>
        /// Gets or Sets Day1
        /// </summary>
        [DataMember(Name = "day1", EmitDefaultValue = false)]
        public FundNotationScreenerSearchDataPerformanceEndOfDayDay1 Day1 { get; set; }

        /// <summary>
        /// Gets or Sets Week1
        /// </summary>
        [DataMember(Name = "week1", EmitDefaultValue = false)]
        public FundNotationScreenerSearchDataPerformanceEndOfDayWeek1 Week1 { get; set; }

        /// <summary>
        /// Gets or Sets Month1
        /// </summary>
        [DataMember(Name = "month1", EmitDefaultValue = false)]
        public FundNotationScreenerSearchDataPerformanceEndOfDayMonth1 Month1 { get; set; }

        /// <summary>
        /// Gets or Sets Months3
        /// </summary>
        [DataMember(Name = "months3", EmitDefaultValue = false)]
        public FundNotationScreenerSearchDataPerformanceEndOfDayMonths3 Months3 { get; set; }

        /// <summary>
        /// Gets or Sets Months6
        /// </summary>
        [DataMember(Name = "months6", EmitDefaultValue = false)]
        public FundNotationScreenerSearchDataPerformanceEndOfDayMonths6 Months6 { get; set; }

        /// <summary>
        /// Gets or Sets Year1
        /// </summary>
        [DataMember(Name = "year1", EmitDefaultValue = false)]
        public FundNotationScreenerSearchDataPerformanceEndOfDayYear1 Year1 { get; set; }

        /// <summary>
        /// Gets or Sets Years3
        /// </summary>
        [DataMember(Name = "years3", EmitDefaultValue = false)]
        public FundNotationScreenerSearchDataPerformanceEndOfDayYears3 Years3 { get; set; }

        /// <summary>
        /// Gets or Sets Years5
        /// </summary>
        [DataMember(Name = "years5", EmitDefaultValue = false)]
        public FundNotationScreenerSearchDataPerformanceEndOfDayYears5 Years5 { get; set; }

        /// <summary>
        /// Gets or Sets YearToDate
        /// </summary>
        [DataMember(Name = "yearToDate", EmitDefaultValue = false)]
        public FundNotationScreenerSearchDataPerformanceEndOfDayYearToDate YearToDate { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class FundNotationScreenerSearchDataPerformanceEndOfDay {\n");
            sb.Append("  Day1: ").Append(Day1).Append("\n");
            sb.Append("  Week1: ").Append(Week1).Append("\n");
            sb.Append("  Month1: ").Append(Month1).Append("\n");
            sb.Append("  Months3: ").Append(Months3).Append("\n");
            sb.Append("  Months6: ").Append(Months6).Append("\n");
            sb.Append("  Year1: ").Append(Year1).Append("\n");
            sb.Append("  Years3: ").Append(Years3).Append("\n");
            sb.Append("  Years5: ").Append(Years5).Append("\n");
            sb.Append("  YearToDate: ").Append(YearToDate).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as FundNotationScreenerSearchDataPerformanceEndOfDay);
        }

        /// <summary>
        /// Returns true if FundNotationScreenerSearchDataPerformanceEndOfDay instances are equal
        /// </summary>
        /// <param name="input">Instance of FundNotationScreenerSearchDataPerformanceEndOfDay to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FundNotationScreenerSearchDataPerformanceEndOfDay input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Day1 == input.Day1 ||
                    (this.Day1 != null &&
                    this.Day1.Equals(input.Day1))
                ) && 
                (
                    this.Week1 == input.Week1 ||
                    (this.Week1 != null &&
                    this.Week1.Equals(input.Week1))
                ) && 
                (
                    this.Month1 == input.Month1 ||
                    (this.Month1 != null &&
                    this.Month1.Equals(input.Month1))
                ) && 
                (
                    this.Months3 == input.Months3 ||
                    (this.Months3 != null &&
                    this.Months3.Equals(input.Months3))
                ) && 
                (
                    this.Months6 == input.Months6 ||
                    (this.Months6 != null &&
                    this.Months6.Equals(input.Months6))
                ) && 
                (
                    this.Year1 == input.Year1 ||
                    (this.Year1 != null &&
                    this.Year1.Equals(input.Year1))
                ) && 
                (
                    this.Years3 == input.Years3 ||
                    (this.Years3 != null &&
                    this.Years3.Equals(input.Years3))
                ) && 
                (
                    this.Years5 == input.Years5 ||
                    (this.Years5 != null &&
                    this.Years5.Equals(input.Years5))
                ) && 
                (
                    this.YearToDate == input.YearToDate ||
                    (this.YearToDate != null &&
                    this.YearToDate.Equals(input.YearToDate))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Day1 != null)
                {
                    hashCode = (hashCode * 59) + this.Day1.GetHashCode();
                }
                if (this.Week1 != null)
                {
                    hashCode = (hashCode * 59) + this.Week1.GetHashCode();
                }
                if (this.Month1 != null)
                {
                    hashCode = (hashCode * 59) + this.Month1.GetHashCode();
                }
                if (this.Months3 != null)
                {
                    hashCode = (hashCode * 59) + this.Months3.GetHashCode();
                }
                if (this.Months6 != null)
                {
                    hashCode = (hashCode * 59) + this.Months6.GetHashCode();
                }
                if (this.Year1 != null)
                {
                    hashCode = (hashCode * 59) + this.Year1.GetHashCode();
                }
                if (this.Years3 != null)
                {
                    hashCode = (hashCode * 59) + this.Years3.GetHashCode();
                }
                if (this.Years5 != null)
                {
                    hashCode = (hashCode * 59) + this.Years5.GetHashCode();
                }
                if (this.YearToDate != null)
                {
                    hashCode = (hashCode * 59) + this.YearToDate.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
