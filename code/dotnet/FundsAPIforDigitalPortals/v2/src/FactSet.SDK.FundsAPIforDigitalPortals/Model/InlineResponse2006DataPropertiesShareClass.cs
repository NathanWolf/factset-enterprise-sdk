/*
 * Funds API For Digital Portals
 *
 * Search for mutual funds and ETFs using one single consolidated API, including a criteria-based screener. The API provides also base data, key figures, and holdings.  A separate endpoint returns the possible values and value range for the parameters that the endpoint /fund/notation/screener/search accepts: Application developers can request the values and value range only for a restricted set of notations that match predefined parameters. This functionality may be used to pre-fill the values and value ranges of the parameters of the /fund/notation/screener/search endpoint so that performing a search always leads to a non-empty set of notations.  This API is fully integrated with the corresponding Quotes API, allowing access to detailed price and performance information of instruments, as well as basic security identifier cross-reference. For direct access to price histories, please refer to the Time Series API for Digital Portals.  Similar criteria based screener APIs exist for equity instruments and securitized derivatives: See the Stocks API and the Securitized Derivatives API for details.
 *
 * The version of the OpenAPI document: 2
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = FactSet.SDK.FundsAPIforDigitalPortals.Client.OpenAPIDateConverter;

namespace FactSet.SDK.FundsAPIforDigitalPortals.Model
{
    /// <summary>
    /// Share class properties.
    /// </summary>
    [DataContract(Name = "inline_response_200_6_data_properties_shareClass")]
    public partial class InlineResponse2006DataPropertiesShareClass : IEquatable<InlineResponse2006DataPropertiesShareClass>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="InlineResponse2006DataPropertiesShareClass" /> class.
        /// </summary>
        /// <param name="isMaster">If true, the share class is the master share class of the fund. That is, the one that has been created first..</param>
        /// <param name="countryRegistration">List of countries where the share class is registered for trading on a regulated market..</param>
        /// <param name="minimumInvestment">minimumInvestment.</param>
        /// <param name="savingsPlan">Savings plan availability and frequency per country..</param>
        public InlineResponse2006DataPropertiesShareClass(bool isMaster = default(bool), List<InlineResponse2004ShareClassRegistrationCountry> countryRegistration = default(List<InlineResponse2004ShareClassRegistrationCountry>), InlineResponse2006DataPropertiesShareClassMinimumInvestment minimumInvestment = default(InlineResponse2006DataPropertiesShareClassMinimumInvestment), List<InlineResponse2006DataPropertiesShareClassSavingsPlan> savingsPlan = default(List<InlineResponse2006DataPropertiesShareClassSavingsPlan>))
        {
            this.IsMaster = isMaster;
            this.CountryRegistration = countryRegistration;
            this.MinimumInvestment = minimumInvestment;
            this.SavingsPlan = savingsPlan;
        }

        /// <summary>
        /// If true, the share class is the master share class of the fund. That is, the one that has been created first.
        /// </summary>
        /// <value>If true, the share class is the master share class of the fund. That is, the one that has been created first.</value>
        [DataMember(Name = "isMaster", EmitDefaultValue = true)]
        public bool IsMaster { get; set; }

        /// <summary>
        /// List of countries where the share class is registered for trading on a regulated market.
        /// </summary>
        /// <value>List of countries where the share class is registered for trading on a regulated market.</value>
        [DataMember(Name = "countryRegistration", EmitDefaultValue = false)]
        public List<InlineResponse2004ShareClassRegistrationCountry> CountryRegistration { get; set; }

        /// <summary>
        /// Gets or Sets MinimumInvestment
        /// </summary>
        [DataMember(Name = "minimumInvestment", EmitDefaultValue = false)]
        public InlineResponse2006DataPropertiesShareClassMinimumInvestment MinimumInvestment { get; set; }

        /// <summary>
        /// Savings plan availability and frequency per country.
        /// </summary>
        /// <value>Savings plan availability and frequency per country.</value>
        [DataMember(Name = "savingsPlan", EmitDefaultValue = false)]
        public List<InlineResponse2006DataPropertiesShareClassSavingsPlan> SavingsPlan { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class InlineResponse2006DataPropertiesShareClass {\n");
            sb.Append("  IsMaster: ").Append(IsMaster).Append("\n");
            sb.Append("  CountryRegistration: ").Append(CountryRegistration).Append("\n");
            sb.Append("  MinimumInvestment: ").Append(MinimumInvestment).Append("\n");
            sb.Append("  SavingsPlan: ").Append(SavingsPlan).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as InlineResponse2006DataPropertiesShareClass);
        }

        /// <summary>
        /// Returns true if InlineResponse2006DataPropertiesShareClass instances are equal
        /// </summary>
        /// <param name="input">Instance of InlineResponse2006DataPropertiesShareClass to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(InlineResponse2006DataPropertiesShareClass input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.IsMaster == input.IsMaster ||
                    this.IsMaster.Equals(input.IsMaster)
                ) && 
                (
                    this.CountryRegistration == input.CountryRegistration ||
                    this.CountryRegistration != null &&
                    input.CountryRegistration != null &&
                    this.CountryRegistration.SequenceEqual(input.CountryRegistration)
                ) && 
                (
                    this.MinimumInvestment == input.MinimumInvestment ||
                    (this.MinimumInvestment != null &&
                    this.MinimumInvestment.Equals(input.MinimumInvestment))
                ) && 
                (
                    this.SavingsPlan == input.SavingsPlan ||
                    this.SavingsPlan != null &&
                    input.SavingsPlan != null &&
                    this.SavingsPlan.SequenceEqual(input.SavingsPlan)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.IsMaster.GetHashCode();
                if (this.CountryRegistration != null)
                {
                    hashCode = (hashCode * 59) + this.CountryRegistration.GetHashCode();
                }
                if (this.MinimumInvestment != null)
                {
                    hashCode = (hashCode * 59) + this.MinimumInvestment.GetHashCode();
                }
                if (this.SavingsPlan != null)
                {
                    hashCode = (hashCode * 59) + this.SavingsPlan.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
