/*
 * Funds API For Digital Portals
 *
 * Search for mutual funds and ETFs using one single consolidated API, including a criteria-based screener. The API provides also base data, key figures, and holdings.  A separate endpoint returns the possible values and value range for the parameters that the endpoint /fund/notation/screener/search accepts: Application developers can request the values and value range only for a restricted set of notations that match predefined parameters. This functionality may be used to pre-fill the values and value ranges of the parameters of the /fund/notation/screener/search endpoint so that performing a search always leads to a non-empty set of notations.  This API is fully integrated with the corresponding Quotes API, allowing access to detailed price and performance information of instruments, as well as basic security identifier cross-reference. For direct access to price histories, please refer to the Time Series API for Digital Portals.  Similar criteria based screener APIs exist for equity instruments and securitized derivatives: See the Stocks API and the Securitized Derivatives API for details.
 *
 * The version of the OpenAPI document: 2
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = FactSet.SDK.FundsAPIforDigitalPortals.Client.OpenAPIDateConverter;

namespace FactSet.SDK.FundsAPIforDigitalPortals.Model
{
    /// <summary>
    /// Fund properties.
    /// </summary>
    [DataContract(Name = "inline_response_200_6_data_properties_fund")]
    public partial class InlineResponse2006DataPropertiesFund : IEquatable<InlineResponse2006DataPropertiesFund>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="InlineResponse2006DataPropertiesFund" /> class.
        /// </summary>
        /// <param name="isClosedEnded">If true, the share class is closed-ended, i.e. the number of shares is limited..</param>
        /// <param name="isGuaranteed">If true, the fund guarantees a minimum return at maturity..</param>
        /// <param name="isIndexTracker">If true, the fund is tracking an index, i.e. attempts to replicate the price movements of an index..</param>
        /// <param name="typeReplication">typeReplication.</param>
        /// <param name="assetsUnderManagement">assetsUnderManagement.</param>
        /// <param name="macaulayDuration">macaulayDuration.</param>
        public InlineResponse2006DataPropertiesFund(bool isClosedEnded = default(bool), bool isGuaranteed = default(bool), bool isIndexTracker = default(bool), InlineResponse2006DataPropertiesFundTypeReplication typeReplication = default(InlineResponse2006DataPropertiesFundTypeReplication), InlineResponse2006DataPropertiesFundAssetsUnderManagement assetsUnderManagement = default(InlineResponse2006DataPropertiesFundAssetsUnderManagement), InlineResponse2006DataPropertiesFundMacaulayDuration macaulayDuration = default(InlineResponse2006DataPropertiesFundMacaulayDuration))
        {
            this.IsClosedEnded = isClosedEnded;
            this.IsGuaranteed = isGuaranteed;
            this.IsIndexTracker = isIndexTracker;
            this.TypeReplication = typeReplication;
            this.AssetsUnderManagement = assetsUnderManagement;
            this.MacaulayDuration = macaulayDuration;
        }

        /// <summary>
        /// If true, the share class is closed-ended, i.e. the number of shares is limited.
        /// </summary>
        /// <value>If true, the share class is closed-ended, i.e. the number of shares is limited.</value>
        [DataMember(Name = "isClosedEnded", EmitDefaultValue = true)]
        public bool IsClosedEnded { get; set; }

        /// <summary>
        /// If true, the fund guarantees a minimum return at maturity.
        /// </summary>
        /// <value>If true, the fund guarantees a minimum return at maturity.</value>
        [DataMember(Name = "isGuaranteed", EmitDefaultValue = true)]
        public bool IsGuaranteed { get; set; }

        /// <summary>
        /// If true, the fund is tracking an index, i.e. attempts to replicate the price movements of an index.
        /// </summary>
        /// <value>If true, the fund is tracking an index, i.e. attempts to replicate the price movements of an index.</value>
        [DataMember(Name = "isIndexTracker", EmitDefaultValue = true)]
        public bool IsIndexTracker { get; set; }

        /// <summary>
        /// Gets or Sets TypeReplication
        /// </summary>
        [DataMember(Name = "typeReplication", EmitDefaultValue = false)]
        public InlineResponse2006DataPropertiesFundTypeReplication TypeReplication { get; set; }

        /// <summary>
        /// Gets or Sets AssetsUnderManagement
        /// </summary>
        [DataMember(Name = "assetsUnderManagement", EmitDefaultValue = false)]
        public InlineResponse2006DataPropertiesFundAssetsUnderManagement AssetsUnderManagement { get; set; }

        /// <summary>
        /// Gets or Sets MacaulayDuration
        /// </summary>
        [DataMember(Name = "macaulayDuration", EmitDefaultValue = false)]
        public InlineResponse2006DataPropertiesFundMacaulayDuration MacaulayDuration { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class InlineResponse2006DataPropertiesFund {\n");
            sb.Append("  IsClosedEnded: ").Append(IsClosedEnded).Append("\n");
            sb.Append("  IsGuaranteed: ").Append(IsGuaranteed).Append("\n");
            sb.Append("  IsIndexTracker: ").Append(IsIndexTracker).Append("\n");
            sb.Append("  TypeReplication: ").Append(TypeReplication).Append("\n");
            sb.Append("  AssetsUnderManagement: ").Append(AssetsUnderManagement).Append("\n");
            sb.Append("  MacaulayDuration: ").Append(MacaulayDuration).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as InlineResponse2006DataPropertiesFund);
        }

        /// <summary>
        /// Returns true if InlineResponse2006DataPropertiesFund instances are equal
        /// </summary>
        /// <param name="input">Instance of InlineResponse2006DataPropertiesFund to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(InlineResponse2006DataPropertiesFund input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.IsClosedEnded == input.IsClosedEnded ||
                    this.IsClosedEnded.Equals(input.IsClosedEnded)
                ) && 
                (
                    this.IsGuaranteed == input.IsGuaranteed ||
                    this.IsGuaranteed.Equals(input.IsGuaranteed)
                ) && 
                (
                    this.IsIndexTracker == input.IsIndexTracker ||
                    this.IsIndexTracker.Equals(input.IsIndexTracker)
                ) && 
                (
                    this.TypeReplication == input.TypeReplication ||
                    (this.TypeReplication != null &&
                    this.TypeReplication.Equals(input.TypeReplication))
                ) && 
                (
                    this.AssetsUnderManagement == input.AssetsUnderManagement ||
                    (this.AssetsUnderManagement != null &&
                    this.AssetsUnderManagement.Equals(input.AssetsUnderManagement))
                ) && 
                (
                    this.MacaulayDuration == input.MacaulayDuration ||
                    (this.MacaulayDuration != null &&
                    this.MacaulayDuration.Equals(input.MacaulayDuration))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.IsClosedEnded.GetHashCode();
                hashCode = (hashCode * 59) + this.IsGuaranteed.GetHashCode();
                hashCode = (hashCode * 59) + this.IsIndexTracker.GetHashCode();
                if (this.TypeReplication != null)
                {
                    hashCode = (hashCode * 59) + this.TypeReplication.GetHashCode();
                }
                if (this.AssetsUnderManagement != null)
                {
                    hashCode = (hashCode * 59) + this.AssetsUnderManagement.GetHashCode();
                }
                if (this.MacaulayDuration != null)
                {
                    hashCode = (hashCode * 59) + this.MacaulayDuration.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
