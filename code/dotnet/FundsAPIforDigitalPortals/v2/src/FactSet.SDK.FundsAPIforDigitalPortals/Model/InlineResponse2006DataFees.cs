/*
 * Funds API For Digital Portals
 *
 * Search for mutual funds and ETFs using one single consolidated API, including a criteria-based screener. The API provides also base data, key figures, and holdings.  A separate endpoint returns the possible values and value range for the parameters that the endpoint /fund/notation/screener/search accepts: Application developers can request the values and value range only for a restricted set of notations that match predefined parameters. This functionality may be used to pre-fill the values and value ranges of the parameters of the /fund/notation/screener/search endpoint so that performing a search always leads to a non-empty set of notations.  This API is fully integrated with the corresponding Quotes API, allowing access to detailed price and performance information of instruments, as well as basic security identifier cross-reference. For direct access to price histories, please refer to the Time Series API for Digital Portals.  Similar criteria based screener APIs exist for equity instruments and securitized derivatives: See the Stocks API and the Securitized Derivatives API for details.
 *
 * The version of the OpenAPI document: 2
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = FactSet.SDK.FundsAPIforDigitalPortals.Client.OpenAPIDateConverter;

namespace FactSet.SDK.FundsAPIforDigitalPortals.Model
{
    /// <summary>
    /// Annualized fund fees.
    /// </summary>
    [DataContract(Name = "inline_response_200_6_data_fees")]
    public partial class InlineResponse2006DataFees : IEquatable<InlineResponse2006DataFees>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="InlineResponse2006DataFees" /> class.
        /// </summary>
        /// <param name="allIn">All-in fee. It is a measure of the total costs associated with investing in the fund and includes managing and operating costs..</param>
        /// <param name="custodianBank">Custodian bank fee. It is paid from the assets of the fund to the custodian bank (see attribute custodianBank) for holding the fund&#39;s assets..</param>
        /// <param name="switching">Switching fee. It is paid for moving an investment from one fund to another within the same umbrella fund..</param>
        /// <param name="maximumAdvisor">Maximum possible value of the advisor fee. It is paid from the assets of the investment fund to the fund company for advisory services..</param>
        /// <param name="maximumAdministration">Maximum possible value of the administration fee. It is paid for running and administration of the fund excluding expenses for an advisor and/or a manager..</param>
        /// <param name="maximumDistribution">Maximum possible value of the distribution fee. It s paid for distribution services provided by a distribution agent..</param>
        /// <param name="maximumHandling">Maximum possible value of the handling fee. It is paid for handling services of a fund. This fee may include, but is not limited to, the administration fee, the management fee, and the distribution fee..</param>
        /// <param name="ongoing">ongoing.</param>
        /// <param name="performance">performance.</param>
        /// <param name="management">management.</param>
        /// <param name="maximumRedemption">Maximum possible value of the redemption fee. It is a proportion of the redeemed investment amount paid once by the investor to the fund company when selling fund shares of the share class. Also called selling fee or exit charge..</param>
        /// <param name="initial">initial.</param>
        public InlineResponse2006DataFees(decimal allIn = default(decimal), decimal custodianBank = default(decimal), decimal switching = default(decimal), decimal maximumAdvisor = default(decimal), decimal maximumAdministration = default(decimal), decimal maximumDistribution = default(decimal), decimal maximumHandling = default(decimal), InlineResponse2006DataFeesOngoing ongoing = default(InlineResponse2006DataFeesOngoing), InlineResponse2006DataFeesPerformance performance = default(InlineResponse2006DataFeesPerformance), InlineResponse2006DataFeesManagement management = default(InlineResponse2006DataFeesManagement), List<InlineResponse2006DataFeesMaximumRedemption> maximumRedemption = default(List<InlineResponse2006DataFeesMaximumRedemption>), InlineResponse2006DataFeesInitial initial = default(InlineResponse2006DataFeesInitial))
        {
            this.AllIn = allIn;
            this.CustodianBank = custodianBank;
            this.Switching = switching;
            this.MaximumAdvisor = maximumAdvisor;
            this.MaximumAdministration = maximumAdministration;
            this.MaximumDistribution = maximumDistribution;
            this.MaximumHandling = maximumHandling;
            this.Ongoing = ongoing;
            this.Performance = performance;
            this.Management = management;
            this.MaximumRedemption = maximumRedemption;
            this.Initial = initial;
        }

        /// <summary>
        /// All-in fee. It is a measure of the total costs associated with investing in the fund and includes managing and operating costs.
        /// </summary>
        /// <value>All-in fee. It is a measure of the total costs associated with investing in the fund and includes managing and operating costs.</value>
        [DataMember(Name = "allIn", EmitDefaultValue = false)]
        public decimal AllIn { get; set; }

        /// <summary>
        /// Custodian bank fee. It is paid from the assets of the fund to the custodian bank (see attribute custodianBank) for holding the fund&#39;s assets.
        /// </summary>
        /// <value>Custodian bank fee. It is paid from the assets of the fund to the custodian bank (see attribute custodianBank) for holding the fund&#39;s assets.</value>
        [DataMember(Name = "custodianBank", EmitDefaultValue = false)]
        public decimal CustodianBank { get; set; }

        /// <summary>
        /// Switching fee. It is paid for moving an investment from one fund to another within the same umbrella fund.
        /// </summary>
        /// <value>Switching fee. It is paid for moving an investment from one fund to another within the same umbrella fund.</value>
        [DataMember(Name = "switching", EmitDefaultValue = false)]
        public decimal Switching { get; set; }

        /// <summary>
        /// Maximum possible value of the advisor fee. It is paid from the assets of the investment fund to the fund company for advisory services.
        /// </summary>
        /// <value>Maximum possible value of the advisor fee. It is paid from the assets of the investment fund to the fund company for advisory services.</value>
        [DataMember(Name = "maximumAdvisor", EmitDefaultValue = false)]
        public decimal MaximumAdvisor { get; set; }

        /// <summary>
        /// Maximum possible value of the administration fee. It is paid for running and administration of the fund excluding expenses for an advisor and/or a manager.
        /// </summary>
        /// <value>Maximum possible value of the administration fee. It is paid for running and administration of the fund excluding expenses for an advisor and/or a manager.</value>
        [DataMember(Name = "maximumAdministration", EmitDefaultValue = false)]
        public decimal MaximumAdministration { get; set; }

        /// <summary>
        /// Maximum possible value of the distribution fee. It s paid for distribution services provided by a distribution agent.
        /// </summary>
        /// <value>Maximum possible value of the distribution fee. It s paid for distribution services provided by a distribution agent.</value>
        [DataMember(Name = "maximumDistribution", EmitDefaultValue = false)]
        public decimal MaximumDistribution { get; set; }

        /// <summary>
        /// Maximum possible value of the handling fee. It is paid for handling services of a fund. This fee may include, but is not limited to, the administration fee, the management fee, and the distribution fee.
        /// </summary>
        /// <value>Maximum possible value of the handling fee. It is paid for handling services of a fund. This fee may include, but is not limited to, the administration fee, the management fee, and the distribution fee.</value>
        [DataMember(Name = "maximumHandling", EmitDefaultValue = false)]
        public decimal MaximumHandling { get; set; }

        /// <summary>
        /// Gets or Sets Ongoing
        /// </summary>
        [DataMember(Name = "ongoing", EmitDefaultValue = false)]
        public InlineResponse2006DataFeesOngoing Ongoing { get; set; }

        /// <summary>
        /// Gets or Sets Performance
        /// </summary>
        [DataMember(Name = "performance", EmitDefaultValue = false)]
        public InlineResponse2006DataFeesPerformance Performance { get; set; }

        /// <summary>
        /// Gets or Sets Management
        /// </summary>
        [DataMember(Name = "management", EmitDefaultValue = false)]
        public InlineResponse2006DataFeesManagement Management { get; set; }

        /// <summary>
        /// Maximum possible value of the redemption fee. It is a proportion of the redeemed investment amount paid once by the investor to the fund company when selling fund shares of the share class. Also called selling fee or exit charge.
        /// </summary>
        /// <value>Maximum possible value of the redemption fee. It is a proportion of the redeemed investment amount paid once by the investor to the fund company when selling fund shares of the share class. Also called selling fee or exit charge.</value>
        [DataMember(Name = "maximumRedemption", EmitDefaultValue = false)]
        public List<InlineResponse2006DataFeesMaximumRedemption> MaximumRedemption { get; set; }

        /// <summary>
        /// Gets or Sets Initial
        /// </summary>
        [DataMember(Name = "initial", EmitDefaultValue = false)]
        public InlineResponse2006DataFeesInitial Initial { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class InlineResponse2006DataFees {\n");
            sb.Append("  AllIn: ").Append(AllIn).Append("\n");
            sb.Append("  CustodianBank: ").Append(CustodianBank).Append("\n");
            sb.Append("  Switching: ").Append(Switching).Append("\n");
            sb.Append("  MaximumAdvisor: ").Append(MaximumAdvisor).Append("\n");
            sb.Append("  MaximumAdministration: ").Append(MaximumAdministration).Append("\n");
            sb.Append("  MaximumDistribution: ").Append(MaximumDistribution).Append("\n");
            sb.Append("  MaximumHandling: ").Append(MaximumHandling).Append("\n");
            sb.Append("  Ongoing: ").Append(Ongoing).Append("\n");
            sb.Append("  Performance: ").Append(Performance).Append("\n");
            sb.Append("  Management: ").Append(Management).Append("\n");
            sb.Append("  MaximumRedemption: ").Append(MaximumRedemption).Append("\n");
            sb.Append("  Initial: ").Append(Initial).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as InlineResponse2006DataFees);
        }

        /// <summary>
        /// Returns true if InlineResponse2006DataFees instances are equal
        /// </summary>
        /// <param name="input">Instance of InlineResponse2006DataFees to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(InlineResponse2006DataFees input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.AllIn == input.AllIn ||
                    this.AllIn.Equals(input.AllIn)
                ) && 
                (
                    this.CustodianBank == input.CustodianBank ||
                    this.CustodianBank.Equals(input.CustodianBank)
                ) && 
                (
                    this.Switching == input.Switching ||
                    this.Switching.Equals(input.Switching)
                ) && 
                (
                    this.MaximumAdvisor == input.MaximumAdvisor ||
                    this.MaximumAdvisor.Equals(input.MaximumAdvisor)
                ) && 
                (
                    this.MaximumAdministration == input.MaximumAdministration ||
                    this.MaximumAdministration.Equals(input.MaximumAdministration)
                ) && 
                (
                    this.MaximumDistribution == input.MaximumDistribution ||
                    this.MaximumDistribution.Equals(input.MaximumDistribution)
                ) && 
                (
                    this.MaximumHandling == input.MaximumHandling ||
                    this.MaximumHandling.Equals(input.MaximumHandling)
                ) && 
                (
                    this.Ongoing == input.Ongoing ||
                    (this.Ongoing != null &&
                    this.Ongoing.Equals(input.Ongoing))
                ) && 
                (
                    this.Performance == input.Performance ||
                    (this.Performance != null &&
                    this.Performance.Equals(input.Performance))
                ) && 
                (
                    this.Management == input.Management ||
                    (this.Management != null &&
                    this.Management.Equals(input.Management))
                ) && 
                (
                    this.MaximumRedemption == input.MaximumRedemption ||
                    this.MaximumRedemption != null &&
                    input.MaximumRedemption != null &&
                    this.MaximumRedemption.SequenceEqual(input.MaximumRedemption)
                ) && 
                (
                    this.Initial == input.Initial ||
                    (this.Initial != null &&
                    this.Initial.Equals(input.Initial))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.AllIn.GetHashCode();
                hashCode = (hashCode * 59) + this.CustodianBank.GetHashCode();
                hashCode = (hashCode * 59) + this.Switching.GetHashCode();
                hashCode = (hashCode * 59) + this.MaximumAdvisor.GetHashCode();
                hashCode = (hashCode * 59) + this.MaximumAdministration.GetHashCode();
                hashCode = (hashCode * 59) + this.MaximumDistribution.GetHashCode();
                hashCode = (hashCode * 59) + this.MaximumHandling.GetHashCode();
                if (this.Ongoing != null)
                {
                    hashCode = (hashCode * 59) + this.Ongoing.GetHashCode();
                }
                if (this.Performance != null)
                {
                    hashCode = (hashCode * 59) + this.Performance.GetHashCode();
                }
                if (this.Management != null)
                {
                    hashCode = (hashCode * 59) + this.Management.GetHashCode();
                }
                if (this.MaximumRedemption != null)
                {
                    hashCode = (hashCode * 59) + this.MaximumRedemption.GetHashCode();
                }
                if (this.Initial != null)
                {
                    hashCode = (hashCode * 59) + this.Initial.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
