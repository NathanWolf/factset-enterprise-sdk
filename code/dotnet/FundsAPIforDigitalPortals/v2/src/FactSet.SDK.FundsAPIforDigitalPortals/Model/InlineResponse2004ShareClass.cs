/*
 * Funds API For Digital Portals
 *
 * Search for mutual funds and ETFs using one single consolidated API, including a criteria-based screener. The API provides also base data, key figures, and holdings.  A separate endpoint returns the possible values and value range for the parameters that the endpoint /fund/notation/screener/search accepts: Application developers can request the values and value range only for a restricted set of notations that match predefined parameters. This functionality may be used to pre-fill the values and value ranges of the parameters of the /fund/notation/screener/search endpoint so that performing a search always leads to a non-empty set of notations.  This API is fully integrated with the corresponding Quotes API, allowing access to detailed price and performance information of instruments, as well as basic security identifier cross-reference. For direct access to price histories, please refer to the Time Series API for Digital Portals.  Similar criteria based screener APIs exist for equity instruments and securitized derivatives: See the Stocks API and the Securitized Derivatives API for details.
 *
 * The version of the OpenAPI document: 2
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = FactSet.SDK.FundsAPIforDigitalPortals.Client.OpenAPIDateConverter;

namespace FactSet.SDK.FundsAPIforDigitalPortals.Model
{
    /// <summary>
    /// Attributes related to the share class.
    /// </summary>
    [DataContract(Name = "inline_response_200_4_shareClass")]
    public partial class InlineResponse2004ShareClass : IEquatable<InlineResponse2004ShareClass>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="InlineResponse2004ShareClass" /> class.
        /// </summary>
        /// <param name="currency">currency.</param>
        /// <param name="distributing">If &#x60;true&#x60;, the share class distributes the earnings to the investors..</param>
        /// <param name="registrationCountry">Country of trading registration of the share class. See endpoint &#x60;/basic/region/country/list&#x60; for possible values..</param>
        /// <param name="lifeCycle">lifeCycle.</param>
        /// <param name="minimumInvestment">minimumInvestment.</param>
        /// <param name="assetsUnderManagement">Assets under management (AUM) which is the sum of the market values of the holdings of the share class including cash. The AUM is expressed in the currency of the share class, see attribute &#x60;shareClass.currency&#x60;..</param>
        /// <param name="compliance">List of compliance properties to which the share class is compliant. See endpoint &#x60;/instrument/complianceProperty/list&#x60; for possible values..</param>
        /// <param name="fee">fee.</param>
        public InlineResponse2004ShareClass(InlineResponse2004ShareClassCurrency currency = default(InlineResponse2004ShareClassCurrency), bool distributing = default(bool), List<InlineResponse2004ShareClassRegistrationCountry> registrationCountry = default(List<InlineResponse2004ShareClassRegistrationCountry>), InlineResponse2004ShareClassLifeCycle lifeCycle = default(InlineResponse2004ShareClassLifeCycle), InlineResponse2004ShareClassMinimumInvestment minimumInvestment = default(InlineResponse2004ShareClassMinimumInvestment), decimal assetsUnderManagement = default(decimal), List<InlineResponse2004FundCompliance> compliance = default(List<InlineResponse2004FundCompliance>), InlineResponse2004ShareClassFee fee = default(InlineResponse2004ShareClassFee))
        {
            this.Currency = currency;
            this.Distributing = distributing;
            this.RegistrationCountry = registrationCountry;
            this.LifeCycle = lifeCycle;
            this.MinimumInvestment = minimumInvestment;
            this.AssetsUnderManagement = assetsUnderManagement;
            this.Compliance = compliance;
            this.Fee = fee;
        }

        /// <summary>
        /// Gets or Sets Currency
        /// </summary>
        [DataMember(Name = "currency", EmitDefaultValue = false)]
        public InlineResponse2004ShareClassCurrency Currency { get; set; }

        /// <summary>
        /// If &#x60;true&#x60;, the share class distributes the earnings to the investors.
        /// </summary>
        /// <value>If &#x60;true&#x60;, the share class distributes the earnings to the investors.</value>
        [DataMember(Name = "distributing", EmitDefaultValue = true)]
        public bool Distributing { get; set; }

        /// <summary>
        /// Country of trading registration of the share class. See endpoint &#x60;/basic/region/country/list&#x60; for possible values.
        /// </summary>
        /// <value>Country of trading registration of the share class. See endpoint &#x60;/basic/region/country/list&#x60; for possible values.</value>
        [DataMember(Name = "registrationCountry", EmitDefaultValue = false)]
        public List<InlineResponse2004ShareClassRegistrationCountry> RegistrationCountry { get; set; }

        /// <summary>
        /// Gets or Sets LifeCycle
        /// </summary>
        [DataMember(Name = "lifeCycle", EmitDefaultValue = false)]
        public InlineResponse2004ShareClassLifeCycle LifeCycle { get; set; }

        /// <summary>
        /// Gets or Sets MinimumInvestment
        /// </summary>
        [DataMember(Name = "minimumInvestment", EmitDefaultValue = false)]
        public InlineResponse2004ShareClassMinimumInvestment MinimumInvestment { get; set; }

        /// <summary>
        /// Assets under management (AUM) which is the sum of the market values of the holdings of the share class including cash. The AUM is expressed in the currency of the share class, see attribute &#x60;shareClass.currency&#x60;.
        /// </summary>
        /// <value>Assets under management (AUM) which is the sum of the market values of the holdings of the share class including cash. The AUM is expressed in the currency of the share class, see attribute &#x60;shareClass.currency&#x60;.</value>
        [DataMember(Name = "assetsUnderManagement", EmitDefaultValue = false)]
        public decimal AssetsUnderManagement { get; set; }

        /// <summary>
        /// List of compliance properties to which the share class is compliant. See endpoint &#x60;/instrument/complianceProperty/list&#x60; for possible values.
        /// </summary>
        /// <value>List of compliance properties to which the share class is compliant. See endpoint &#x60;/instrument/complianceProperty/list&#x60; for possible values.</value>
        [DataMember(Name = "compliance", EmitDefaultValue = false)]
        public List<InlineResponse2004FundCompliance> Compliance { get; set; }

        /// <summary>
        /// Gets or Sets Fee
        /// </summary>
        [DataMember(Name = "fee", EmitDefaultValue = false)]
        public InlineResponse2004ShareClassFee Fee { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class InlineResponse2004ShareClass {\n");
            sb.Append("  Currency: ").Append(Currency).Append("\n");
            sb.Append("  Distributing: ").Append(Distributing).Append("\n");
            sb.Append("  RegistrationCountry: ").Append(RegistrationCountry).Append("\n");
            sb.Append("  LifeCycle: ").Append(LifeCycle).Append("\n");
            sb.Append("  MinimumInvestment: ").Append(MinimumInvestment).Append("\n");
            sb.Append("  AssetsUnderManagement: ").Append(AssetsUnderManagement).Append("\n");
            sb.Append("  Compliance: ").Append(Compliance).Append("\n");
            sb.Append("  Fee: ").Append(Fee).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as InlineResponse2004ShareClass);
        }

        /// <summary>
        /// Returns true if InlineResponse2004ShareClass instances are equal
        /// </summary>
        /// <param name="input">Instance of InlineResponse2004ShareClass to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(InlineResponse2004ShareClass input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Currency == input.Currency ||
                    (this.Currency != null &&
                    this.Currency.Equals(input.Currency))
                ) && 
                (
                    this.Distributing == input.Distributing ||
                    this.Distributing.Equals(input.Distributing)
                ) && 
                (
                    this.RegistrationCountry == input.RegistrationCountry ||
                    this.RegistrationCountry != null &&
                    input.RegistrationCountry != null &&
                    this.RegistrationCountry.SequenceEqual(input.RegistrationCountry)
                ) && 
                (
                    this.LifeCycle == input.LifeCycle ||
                    (this.LifeCycle != null &&
                    this.LifeCycle.Equals(input.LifeCycle))
                ) && 
                (
                    this.MinimumInvestment == input.MinimumInvestment ||
                    (this.MinimumInvestment != null &&
                    this.MinimumInvestment.Equals(input.MinimumInvestment))
                ) && 
                (
                    this.AssetsUnderManagement == input.AssetsUnderManagement ||
                    this.AssetsUnderManagement.Equals(input.AssetsUnderManagement)
                ) && 
                (
                    this.Compliance == input.Compliance ||
                    this.Compliance != null &&
                    input.Compliance != null &&
                    this.Compliance.SequenceEqual(input.Compliance)
                ) && 
                (
                    this.Fee == input.Fee ||
                    (this.Fee != null &&
                    this.Fee.Equals(input.Fee))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Currency != null)
                {
                    hashCode = (hashCode * 59) + this.Currency.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Distributing.GetHashCode();
                if (this.RegistrationCountry != null)
                {
                    hashCode = (hashCode * 59) + this.RegistrationCountry.GetHashCode();
                }
                if (this.LifeCycle != null)
                {
                    hashCode = (hashCode * 59) + this.LifeCycle.GetHashCode();
                }
                if (this.MinimumInvestment != null)
                {
                    hashCode = (hashCode * 59) + this.MinimumInvestment.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.AssetsUnderManagement.GetHashCode();
                if (this.Compliance != null)
                {
                    hashCode = (hashCode * 59) + this.Compliance.GetHashCode();
                }
                if (this.Fee != null)
                {
                    hashCode = (hashCode * 59) + this.Fee.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
