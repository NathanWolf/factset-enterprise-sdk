/*
 * Funds API For Digital Portals
 *
 * Search for mutual funds and ETFs using one single consolidated API, including a criteria-based screener. The API provides also base data, key figures, and holdings.  A separate endpoint returns the possible values and value range for the parameters that the endpoint /fund/notation/screener/search accepts: Application developers can request the values and value range only for a restricted set of notations that match predefined parameters. This functionality may be used to pre-fill the values and value ranges of the parameters of the /fund/notation/screener/search endpoint so that performing a search always leads to a non-empty set of notations.  This API is fully integrated with the corresponding Quotes API, allowing access to detailed price and performance information of instruments, as well as basic security identifier cross-reference. For direct access to price histories, please refer to the Time Series API for Digital Portals.  Similar criteria based screener APIs exist for equity instruments and securitized derivatives: See the Stocks API and the Securitized Derivatives API for details.
 *
 * The version of the OpenAPI document: 2
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = FactSet.SDK.FundsAPIforDigitalPortals.Client.OpenAPIDateConverter;

namespace FactSet.SDK.FundsAPIforDigitalPortals.Model
{
    /// <summary>
    /// Attributes related to the fund.
    /// </summary>
    [DataContract(Name = "inline_response_200_4_fund")]
    public partial class InlineResponse2004Fund : IEquatable<InlineResponse2004Fund>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="InlineResponse2004Fund" /> class.
        /// </summary>
        /// <param name="id">Identifier of the fund..</param>
        /// <param name="name">Name of the fund..</param>
        /// <param name="etf">If &#x60;true&#x60;, the fund is an ETF..</param>
        /// <param name="currency">currency.</param>
        /// <param name="domicile">domicile.</param>
        /// <param name="holdingType">holdingType.</param>
        /// <param name="countryDevelopment">countryDevelopment.</param>
        /// <param name="regionalExposure">regionalExposure.</param>
        /// <param name="strategy">strategy.</param>
        /// <param name="industry">industry.</param>
        /// <param name="srri">srri.</param>
        /// <param name="issuer">issuer.</param>
        /// <param name="assetsUnderManagement">Assets under management (AUM)..</param>
        /// <param name="compliance">List of compliance properties to which the fund is compliant. See endpoint &#x60;/legalEntity/complianceProperty/list&#x60; for possible values..</param>
        public InlineResponse2004Fund(decimal id = default(decimal), string name = default(string), bool etf = default(bool), InlineResponse2004FundCurrency currency = default(InlineResponse2004FundCurrency), InlineResponse2004FundDomicile domicile = default(InlineResponse2004FundDomicile), InlineResponse2004FundHoldingType holdingType = default(InlineResponse2004FundHoldingType), InlineResponse2004FundCountryDevelopment countryDevelopment = default(InlineResponse2004FundCountryDevelopment), InlineResponse2004FundRegionalExposure regionalExposure = default(InlineResponse2004FundRegionalExposure), InlineResponse2004FundStrategy strategy = default(InlineResponse2004FundStrategy), InlineResponse2004FundIndustry industry = default(InlineResponse2004FundIndustry), InlineResponse2004FundSrri srri = default(InlineResponse2004FundSrri), InlineResponse2004FundIssuer issuer = default(InlineResponse2004FundIssuer), decimal assetsUnderManagement = default(decimal), List<InlineResponse2004FundCompliance> compliance = default(List<InlineResponse2004FundCompliance>))
        {
            this.Id = id;
            this.Name = name;
            this.Etf = etf;
            this.Currency = currency;
            this.Domicile = domicile;
            this.HoldingType = holdingType;
            this.CountryDevelopment = countryDevelopment;
            this.RegionalExposure = regionalExposure;
            this.Strategy = strategy;
            this.Industry = industry;
            this.Srri = srri;
            this.Issuer = issuer;
            this.AssetsUnderManagement = assetsUnderManagement;
            this.Compliance = compliance;
        }

        /// <summary>
        /// Identifier of the fund.
        /// </summary>
        /// <value>Identifier of the fund.</value>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public decimal Id { get; set; }

        /// <summary>
        /// Name of the fund.
        /// </summary>
        /// <value>Name of the fund.</value>
        [DataMember(Name = "name", EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// If &#x60;true&#x60;, the fund is an ETF.
        /// </summary>
        /// <value>If &#x60;true&#x60;, the fund is an ETF.</value>
        [DataMember(Name = "etf", EmitDefaultValue = true)]
        public bool Etf { get; set; }

        /// <summary>
        /// Gets or Sets Currency
        /// </summary>
        [DataMember(Name = "currency", EmitDefaultValue = false)]
        public InlineResponse2004FundCurrency Currency { get; set; }

        /// <summary>
        /// Gets or Sets Domicile
        /// </summary>
        [DataMember(Name = "domicile", EmitDefaultValue = false)]
        public InlineResponse2004FundDomicile Domicile { get; set; }

        /// <summary>
        /// Gets or Sets HoldingType
        /// </summary>
        [DataMember(Name = "holdingType", EmitDefaultValue = false)]
        public InlineResponse2004FundHoldingType HoldingType { get; set; }

        /// <summary>
        /// Gets or Sets CountryDevelopment
        /// </summary>
        [DataMember(Name = "countryDevelopment", EmitDefaultValue = false)]
        public InlineResponse2004FundCountryDevelopment CountryDevelopment { get; set; }

        /// <summary>
        /// Gets or Sets RegionalExposure
        /// </summary>
        [DataMember(Name = "regionalExposure", EmitDefaultValue = false)]
        public InlineResponse2004FundRegionalExposure RegionalExposure { get; set; }

        /// <summary>
        /// Gets or Sets Strategy
        /// </summary>
        [DataMember(Name = "strategy", EmitDefaultValue = false)]
        public InlineResponse2004FundStrategy Strategy { get; set; }

        /// <summary>
        /// Gets or Sets Industry
        /// </summary>
        [DataMember(Name = "industry", EmitDefaultValue = false)]
        public InlineResponse2004FundIndustry Industry { get; set; }

        /// <summary>
        /// Gets or Sets Srri
        /// </summary>
        [DataMember(Name = "srri", EmitDefaultValue = false)]
        public InlineResponse2004FundSrri Srri { get; set; }

        /// <summary>
        /// Gets or Sets Issuer
        /// </summary>
        [DataMember(Name = "issuer", EmitDefaultValue = false)]
        public InlineResponse2004FundIssuer Issuer { get; set; }

        /// <summary>
        /// Assets under management (AUM).
        /// </summary>
        /// <value>Assets under management (AUM).</value>
        [DataMember(Name = "assetsUnderManagement", EmitDefaultValue = false)]
        public decimal AssetsUnderManagement { get; set; }

        /// <summary>
        /// List of compliance properties to which the fund is compliant. See endpoint &#x60;/legalEntity/complianceProperty/list&#x60; for possible values.
        /// </summary>
        /// <value>List of compliance properties to which the fund is compliant. See endpoint &#x60;/legalEntity/complianceProperty/list&#x60; for possible values.</value>
        [DataMember(Name = "compliance", EmitDefaultValue = false)]
        public List<InlineResponse2004FundCompliance> Compliance { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class InlineResponse2004Fund {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Etf: ").Append(Etf).Append("\n");
            sb.Append("  Currency: ").Append(Currency).Append("\n");
            sb.Append("  Domicile: ").Append(Domicile).Append("\n");
            sb.Append("  HoldingType: ").Append(HoldingType).Append("\n");
            sb.Append("  CountryDevelopment: ").Append(CountryDevelopment).Append("\n");
            sb.Append("  RegionalExposure: ").Append(RegionalExposure).Append("\n");
            sb.Append("  Strategy: ").Append(Strategy).Append("\n");
            sb.Append("  Industry: ").Append(Industry).Append("\n");
            sb.Append("  Srri: ").Append(Srri).Append("\n");
            sb.Append("  Issuer: ").Append(Issuer).Append("\n");
            sb.Append("  AssetsUnderManagement: ").Append(AssetsUnderManagement).Append("\n");
            sb.Append("  Compliance: ").Append(Compliance).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as InlineResponse2004Fund);
        }

        /// <summary>
        /// Returns true if InlineResponse2004Fund instances are equal
        /// </summary>
        /// <param name="input">Instance of InlineResponse2004Fund to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(InlineResponse2004Fund input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Id == input.Id ||
                    this.Id.Equals(input.Id)
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Etf == input.Etf ||
                    this.Etf.Equals(input.Etf)
                ) && 
                (
                    this.Currency == input.Currency ||
                    (this.Currency != null &&
                    this.Currency.Equals(input.Currency))
                ) && 
                (
                    this.Domicile == input.Domicile ||
                    (this.Domicile != null &&
                    this.Domicile.Equals(input.Domicile))
                ) && 
                (
                    this.HoldingType == input.HoldingType ||
                    (this.HoldingType != null &&
                    this.HoldingType.Equals(input.HoldingType))
                ) && 
                (
                    this.CountryDevelopment == input.CountryDevelopment ||
                    (this.CountryDevelopment != null &&
                    this.CountryDevelopment.Equals(input.CountryDevelopment))
                ) && 
                (
                    this.RegionalExposure == input.RegionalExposure ||
                    (this.RegionalExposure != null &&
                    this.RegionalExposure.Equals(input.RegionalExposure))
                ) && 
                (
                    this.Strategy == input.Strategy ||
                    (this.Strategy != null &&
                    this.Strategy.Equals(input.Strategy))
                ) && 
                (
                    this.Industry == input.Industry ||
                    (this.Industry != null &&
                    this.Industry.Equals(input.Industry))
                ) && 
                (
                    this.Srri == input.Srri ||
                    (this.Srri != null &&
                    this.Srri.Equals(input.Srri))
                ) && 
                (
                    this.Issuer == input.Issuer ||
                    (this.Issuer != null &&
                    this.Issuer.Equals(input.Issuer))
                ) && 
                (
                    this.AssetsUnderManagement == input.AssetsUnderManagement ||
                    this.AssetsUnderManagement.Equals(input.AssetsUnderManagement)
                ) && 
                (
                    this.Compliance == input.Compliance ||
                    this.Compliance != null &&
                    input.Compliance != null &&
                    this.Compliance.SequenceEqual(input.Compliance)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.Id.GetHashCode();
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Etf.GetHashCode();
                if (this.Currency != null)
                {
                    hashCode = (hashCode * 59) + this.Currency.GetHashCode();
                }
                if (this.Domicile != null)
                {
                    hashCode = (hashCode * 59) + this.Domicile.GetHashCode();
                }
                if (this.HoldingType != null)
                {
                    hashCode = (hashCode * 59) + this.HoldingType.GetHashCode();
                }
                if (this.CountryDevelopment != null)
                {
                    hashCode = (hashCode * 59) + this.CountryDevelopment.GetHashCode();
                }
                if (this.RegionalExposure != null)
                {
                    hashCode = (hashCode * 59) + this.RegionalExposure.GetHashCode();
                }
                if (this.Strategy != null)
                {
                    hashCode = (hashCode * 59) + this.Strategy.GetHashCode();
                }
                if (this.Industry != null)
                {
                    hashCode = (hashCode * 59) + this.Industry.GetHashCode();
                }
                if (this.Srri != null)
                {
                    hashCode = (hashCode * 59) + this.Srri.GetHashCode();
                }
                if (this.Issuer != null)
                {
                    hashCode = (hashCode * 59) + this.Issuer.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.AssetsUnderManagement.GetHashCode();
                if (this.Compliance != null)
                {
                    hashCode = (hashCode * 59) + this.Compliance.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
