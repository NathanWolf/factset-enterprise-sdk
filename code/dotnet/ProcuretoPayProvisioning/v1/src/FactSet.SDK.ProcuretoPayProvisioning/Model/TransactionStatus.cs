/*
 * FactSet Procure to Pay API
 *
 * Allows for Provisioning and Entitlement of FactSet accounts.     Authentication is provided via FactSet's [API Key System](https://developer.factset.com/authentication)    Please note that the on-page \"Try it out\" features do not function. You must authorize against our API and make requests directly againt the endpoints.    
 *
 * The version of the OpenAPI document: 1S
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = FactSet.SDK.ProcuretoPayProvisioning.Client.OpenAPIDateConverter;

namespace FactSet.SDK.ProcuretoPayProvisioning.Model
{
    /// <summary>
    /// TransactionStatus
    /// </summary>
    [DataContract(Name = "transactionStatus")]
    public partial class TransactionStatus : IEquatable<TransactionStatus>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TransactionStatus" /> class.
        /// </summary>
        /// <param name="currentStatus">currentStatus.</param>
        /// <param name="message">message.</param>
        /// <param name="username">username.</param>
        /// <param name="serialNumber">serialNumber.</param>
        /// <param name="factsetId">factsetId.</param>
        /// <param name="errorId">errorId.</param>
        public TransactionStatus(int currentStatus = default(int), string message = default(string), string username = default(string), string serialNumber = default(string), string factsetId = default(string), int errorId = default(int))
        {
            this.CurrentStatus = currentStatus;
            this.Message = message;
            this.Username = username;
            this.SerialNumber = serialNumber;
            this.FactsetId = factsetId;
            this.ErrorId = errorId;
        }

        /// <summary>
        /// Gets or Sets CurrentStatus
        /// </summary>
        [DataMember(Name = "currentStatus", EmitDefaultValue = false)]
        public int CurrentStatus { get; set; }

        /// <summary>
        /// Gets or Sets Message
        /// </summary>
        [DataMember(Name = "message", EmitDefaultValue = false)]
        public string Message { get; set; }

        /// <summary>
        /// Gets or Sets Username
        /// </summary>
        [DataMember(Name = "username", EmitDefaultValue = false)]
        public string Username { get; set; }

        /// <summary>
        /// Gets or Sets SerialNumber
        /// </summary>
        [DataMember(Name = "serialNumber", EmitDefaultValue = false)]
        public string SerialNumber { get; set; }

        /// <summary>
        /// Gets or Sets FactsetId
        /// </summary>
        [DataMember(Name = "factsetId", EmitDefaultValue = false)]
        public string FactsetId { get; set; }

        /// <summary>
        /// Gets or Sets ErrorId
        /// </summary>
        [DataMember(Name = "errorId", EmitDefaultValue = false)]
        public int ErrorId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TransactionStatus {\n");
            sb.Append("  CurrentStatus: ").Append(CurrentStatus).Append("\n");
            sb.Append("  Message: ").Append(Message).Append("\n");
            sb.Append("  Username: ").Append(Username).Append("\n");
            sb.Append("  SerialNumber: ").Append(SerialNumber).Append("\n");
            sb.Append("  FactsetId: ").Append(FactsetId).Append("\n");
            sb.Append("  ErrorId: ").Append(ErrorId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TransactionStatus);
        }

        /// <summary>
        /// Returns true if TransactionStatus instances are equal
        /// </summary>
        /// <param name="input">Instance of TransactionStatus to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TransactionStatus input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.CurrentStatus == input.CurrentStatus ||
                    this.CurrentStatus.Equals(input.CurrentStatus)
                ) && 
                (
                    this.Message == input.Message ||
                    (this.Message != null &&
                    this.Message.Equals(input.Message))
                ) && 
                (
                    this.Username == input.Username ||
                    (this.Username != null &&
                    this.Username.Equals(input.Username))
                ) && 
                (
                    this.SerialNumber == input.SerialNumber ||
                    (this.SerialNumber != null &&
                    this.SerialNumber.Equals(input.SerialNumber))
                ) && 
                (
                    this.FactsetId == input.FactsetId ||
                    (this.FactsetId != null &&
                    this.FactsetId.Equals(input.FactsetId))
                ) && 
                (
                    this.ErrorId == input.ErrorId ||
                    this.ErrorId.Equals(input.ErrorId)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = hashCode * 59 + this.CurrentStatus.GetHashCode();
                if (this.Message != null)
                    hashCode = hashCode * 59 + this.Message.GetHashCode();
                if (this.Username != null)
                    hashCode = hashCode * 59 + this.Username.GetHashCode();
                if (this.SerialNumber != null)
                    hashCode = hashCode * 59 + this.SerialNumber.GetHashCode();
                if (this.FactsetId != null)
                    hashCode = hashCode * 59 + this.FactsetId.GetHashCode();
                hashCode = hashCode * 59 + this.ErrorId.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
