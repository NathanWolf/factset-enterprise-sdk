/*
 * FactSet Procure to Pay API
 *
 * Allows for Provisioning and Entitlement of FactSet accounts.     Authentication is provided via FactSet's [API Key System](https://developer.factset.com/authentication)    Please note that the on-page \"Try it out\" features do not function. You must authorize against our API and make requests directly againt the endpoints.    
 *
 * The version of the OpenAPI document: 1S
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using FactSet.SDK.ProcuretoPayProvisioning.Client;
using FactSet.SDK.ProcuretoPayProvisioning.Model;
using FactSet.SDK.Utils.Authentication;

namespace FactSet.SDK.ProcuretoPayProvisioning.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IOrderStatusApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Check status of order by transactionCode
        /// </summary>
        /// <exception cref="FactSet.SDK.ProcuretoPayProvisioning.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactioncode">Transaction Code to query</param>
        /// <returns>TransactionStatus</returns>
        TransactionStatus TransactionStatusGet(string transactioncode);

        /// <summary>
        /// Check status of order by transactionCode
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FactSet.SDK.ProcuretoPayProvisioning.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactioncode">Transaction Code to query</param>
        /// <returns>ApiResponse of TransactionStatus</returns>
        ApiResponse<TransactionStatus> TransactionStatusGetWithHttpInfo(string transactioncode);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IOrderStatusApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Check status of order by transactionCode
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FactSet.SDK.ProcuretoPayProvisioning.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactioncode">Transaction Code to query</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TransactionStatus</returns>
        System.Threading.Tasks.Task<TransactionStatus> TransactionStatusGetAsync(string transactioncode, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Check status of order by transactionCode
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FactSet.SDK.ProcuretoPayProvisioning.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactioncode">Transaction Code to query</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TransactionStatus)</returns>
        System.Threading.Tasks.Task<ApiResponse<TransactionStatus>> TransactionStatusGetWithHttpInfoAsync(string transactioncode, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IOrderStatusApi : IOrderStatusApiSync, IOrderStatusApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class OrderStatusApi : IOrderStatusApi
    {
        private FactSet.SDK.ProcuretoPayProvisioning.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="OrderStatusApi"/> class.
        /// </summary>
        /// <returns></returns>
        public OrderStatusApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="OrderStatusApi"/> class.
        /// </summary>
        /// <returns></returns>
        public OrderStatusApi(string basePath)
        {
            this.Configuration = FactSet.SDK.ProcuretoPayProvisioning.Client.Configuration.MergeConfigurations(
                FactSet.SDK.ProcuretoPayProvisioning.Client.GlobalConfiguration.Instance,
                new FactSet.SDK.ProcuretoPayProvisioning.Client.Configuration { BasePath = basePath }
            );
            this.Client = new FactSet.SDK.ProcuretoPayProvisioning.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new FactSet.SDK.ProcuretoPayProvisioning.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = FactSet.SDK.ProcuretoPayProvisioning.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="OrderStatusApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public OrderStatusApi(FactSet.SDK.ProcuretoPayProvisioning.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = FactSet.SDK.ProcuretoPayProvisioning.Client.Configuration.MergeConfigurations(
                FactSet.SDK.ProcuretoPayProvisioning.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new FactSet.SDK.ProcuretoPayProvisioning.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new FactSet.SDK.ProcuretoPayProvisioning.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = FactSet.SDK.ProcuretoPayProvisioning.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="OrderStatusApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public OrderStatusApi(FactSet.SDK.ProcuretoPayProvisioning.Client.ISynchronousClient client, FactSet.SDK.ProcuretoPayProvisioning.Client.IAsynchronousClient asyncClient, FactSet.SDK.ProcuretoPayProvisioning.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = FactSet.SDK.ProcuretoPayProvisioning.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public FactSet.SDK.ProcuretoPayProvisioning.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public FactSet.SDK.ProcuretoPayProvisioning.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public FactSet.SDK.ProcuretoPayProvisioning.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public FactSet.SDK.ProcuretoPayProvisioning.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Check status of order by transactionCode 
        /// </summary>
        /// <exception cref="FactSet.SDK.ProcuretoPayProvisioning.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactioncode">Transaction Code to query</param>
        /// <returns>TransactionStatus</returns>
        public TransactionStatus TransactionStatusGet(string transactioncode)
        {
            FactSet.SDK.ProcuretoPayProvisioning.Client.ApiResponse<TransactionStatus> localVarResponse = TransactionStatusGetWithHttpInfo(transactioncode);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Check status of order by transactionCode 
        /// </summary>
        /// <exception cref="FactSet.SDK.ProcuretoPayProvisioning.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactioncode">Transaction Code to query</param>
        /// <returns>ApiResponse of TransactionStatus</returns>
        public FactSet.SDK.ProcuretoPayProvisioning.Client.ApiResponse<TransactionStatus> TransactionStatusGetWithHttpInfo(string transactioncode)
        {
            // verify the required parameter 'transactioncode' is set
            if (transactioncode == null)
                throw new FactSet.SDK.ProcuretoPayProvisioning.Client.ApiException(400, "Missing required parameter 'transactioncode' when calling OrderStatusApi->TransactionStatusGet");

            FactSet.SDK.ProcuretoPayProvisioning.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.ProcuretoPayProvisioning.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json; charset=utf-8",
                "text/plain"
            };

            var localVarContentType = FactSet.SDK.ProcuretoPayProvisioning.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = FactSet.SDK.ProcuretoPayProvisioning.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.ProcuretoPayProvisioning.Client.ClientUtils.ParameterToMultiMap("", "transactioncode", transactioncode));

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.ProcuretoPayProvisioning.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<TransactionStatus>("/transactionStatus", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("TransactionStatusGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Check status of order by transactionCode 
        /// </summary>
        /// <exception cref="FactSet.SDK.ProcuretoPayProvisioning.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactioncode">Transaction Code to query</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TransactionStatus</returns>
        public async System.Threading.Tasks.Task<TransactionStatus> TransactionStatusGetAsync(string transactioncode, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            FactSet.SDK.ProcuretoPayProvisioning.Client.ApiResponse<TransactionStatus> localVarResponse = await TransactionStatusGetWithHttpInfoAsync(transactioncode, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Check status of order by transactionCode 
        /// </summary>
        /// <exception cref="FactSet.SDK.ProcuretoPayProvisioning.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactioncode">Transaction Code to query</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TransactionStatus)</returns>
        public async System.Threading.Tasks.Task<FactSet.SDK.ProcuretoPayProvisioning.Client.ApiResponse<TransactionStatus>> TransactionStatusGetWithHttpInfoAsync(string transactioncode, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'transactioncode' is set
            if (transactioncode == null)
                throw new FactSet.SDK.ProcuretoPayProvisioning.Client.ApiException(400, "Missing required parameter 'transactioncode' when calling OrderStatusApi->TransactionStatusGet");


            FactSet.SDK.ProcuretoPayProvisioning.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.ProcuretoPayProvisioning.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json; charset=utf-8",
                "text/plain"
            };


            var localVarContentType = FactSet.SDK.ProcuretoPayProvisioning.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = FactSet.SDK.ProcuretoPayProvisioning.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.ProcuretoPayProvisioning.Client.ClientUtils.ParameterToMultiMap("", "transactioncode", transactioncode));

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.ProcuretoPayProvisioning.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<TransactionStatus>("/transactionStatus", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("TransactionStatusGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
