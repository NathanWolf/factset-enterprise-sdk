/*
 * FactSet Procure to Pay API
 *
 * Allows for Provisioning and Entitlement of FactSet accounts.     Authentication is provided via FactSet's [API Key System](https://developer.factset.com/authentication)    Please note that the on-page \"Try it out\" features do not function. You must authorize against our API and make requests directly againt the endpoints.    
 *
 * The version of the OpenAPI document: 1S
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using FactSet.SDK.ProcuretoPayProvisioning.Client;
using FactSet.SDK.ProcuretoPayProvisioning.Model;
using FactSet.SDK.Utils.Authentication;

namespace FactSet.SDK.ProcuretoPayProvisioning.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IUserManagementApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Cancels an individual&#39;s serial and all productIds
        /// </summary>
        /// <exception cref="FactSet.SDK.ProcuretoPayProvisioning.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancelIndividual"> (optional)</param>
        /// <returns>InlineResponse202</returns>
        InlineResponse202 CancelIndividualPost(CancelIndividual cancelIndividual = default(CancelIndividual));

        /// <summary>
        /// Cancels an individual&#39;s serial and all productIds
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FactSet.SDK.ProcuretoPayProvisioning.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancelIndividual"> (optional)</param>
        /// <returns>ApiResponse of InlineResponse202</returns>
        ApiResponse<InlineResponse202> CancelIndividualPostWithHttpInfo(CancelIndividual cancelIndividual = default(CancelIndividual));
        /// <summary>
        /// Provisions an individual for FactSet
        /// </summary>
        /// <exception cref="FactSet.SDK.ProcuretoPayProvisioning.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createIndividual"> (optional)</param>
        /// <returns>InlineResponse202</returns>
        InlineResponse202 CreateIndividualPost(CreateIndividual createIndividual = default(CreateIndividual));

        /// <summary>
        /// Provisions an individual for FactSet
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FactSet.SDK.ProcuretoPayProvisioning.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createIndividual"> (optional)</param>
        /// <returns>ApiResponse of InlineResponse202</returns>
        ApiResponse<InlineResponse202> CreateIndividualPostWithHttpInfo(CreateIndividual createIndividual = default(CreateIndividual));
        /// <summary>
        /// Returns an individual&#39;s details by uniqueId
        /// </summary>
        /// <exception cref="FactSet.SDK.ProcuretoPayProvisioning.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uniqueid">uniqueId to query</param>
        /// <returns>GetIndividual</returns>
        GetIndividual GetIndividualGet(string uniqueid);

        /// <summary>
        /// Returns an individual&#39;s details by uniqueId
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FactSet.SDK.ProcuretoPayProvisioning.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uniqueid">uniqueId to query</param>
        /// <returns>ApiResponse of GetIndividual</returns>
        ApiResponse<GetIndividual> GetIndividualGetWithHttpInfo(string uniqueid);
        /// <summary>
        /// Lists all individuals with details at all locations.
        /// </summary>
        /// <exception cref="FactSet.SDK.ProcuretoPayProvisioning.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="includeProductIds">&lt;br&gt;Optional, if &#x3D;TRUE will return additional product array per object with all productIds for all returned individuals.&lt;/br&gt; (optional)</param>
        /// <returns>List&lt;Object&gt;</returns>
        List<Object> ListIndividualsGet(bool? includeProductIds = default(bool?));

        /// <summary>
        /// Lists all individuals with details at all locations.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FactSet.SDK.ProcuretoPayProvisioning.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="includeProductIds">&lt;br&gt;Optional, if &#x3D;TRUE will return additional product array per object with all productIds for all returned individuals.&lt;/br&gt; (optional)</param>
        /// <returns>ApiResponse of List&lt;Object&gt;</returns>
        ApiResponse<List<Object>> ListIndividualsGetWithHttpInfo(bool? includeProductIds = default(bool?));
        /// <summary>
        /// Modifies an individual&#39;s attributes as determined by the uniqueId in the body of the request. Please note that the uniqueId may not be changed. Fields not changing may be passed as NULL but never empty.
        /// </summary>
        /// <exception cref="FactSet.SDK.ProcuretoPayProvisioning.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modifyIndividual"> (optional)</param>
        /// <returns>InlineResponse202</returns>
        InlineResponse202 ModifyIndividualPost(ModifyIndividual modifyIndividual = default(ModifyIndividual));

        /// <summary>
        /// Modifies an individual&#39;s attributes as determined by the uniqueId in the body of the request. Please note that the uniqueId may not be changed. Fields not changing may be passed as NULL but never empty.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FactSet.SDK.ProcuretoPayProvisioning.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modifyIndividual"> (optional)</param>
        /// <returns>ApiResponse of InlineResponse202</returns>
        ApiResponse<InlineResponse202> ModifyIndividualPostWithHttpInfo(ModifyIndividual modifyIndividual = default(ModifyIndividual));
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IUserManagementApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Cancels an individual&#39;s serial and all productIds
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FactSet.SDK.ProcuretoPayProvisioning.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancelIndividual"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse202</returns>
        System.Threading.Tasks.Task<InlineResponse202> CancelIndividualPostAsync(CancelIndividual cancelIndividual = default(CancelIndividual), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Cancels an individual&#39;s serial and all productIds
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FactSet.SDK.ProcuretoPayProvisioning.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancelIndividual"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse202)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse202>> CancelIndividualPostWithHttpInfoAsync(CancelIndividual cancelIndividual = default(CancelIndividual), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Provisions an individual for FactSet
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FactSet.SDK.ProcuretoPayProvisioning.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createIndividual"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse202</returns>
        System.Threading.Tasks.Task<InlineResponse202> CreateIndividualPostAsync(CreateIndividual createIndividual = default(CreateIndividual), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Provisions an individual for FactSet
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FactSet.SDK.ProcuretoPayProvisioning.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createIndividual"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse202)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse202>> CreateIndividualPostWithHttpInfoAsync(CreateIndividual createIndividual = default(CreateIndividual), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Returns an individual&#39;s details by uniqueId
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FactSet.SDK.ProcuretoPayProvisioning.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uniqueid">uniqueId to query</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetIndividual</returns>
        System.Threading.Tasks.Task<GetIndividual> GetIndividualGetAsync(string uniqueid, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Returns an individual&#39;s details by uniqueId
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FactSet.SDK.ProcuretoPayProvisioning.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uniqueid">uniqueId to query</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetIndividual)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetIndividual>> GetIndividualGetWithHttpInfoAsync(string uniqueid, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Lists all individuals with details at all locations.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FactSet.SDK.ProcuretoPayProvisioning.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="includeProductIds">&lt;br&gt;Optional, if &#x3D;TRUE will return additional product array per object with all productIds for all returned individuals.&lt;/br&gt; (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Object&gt;</returns>
        System.Threading.Tasks.Task<List<Object>> ListIndividualsGetAsync(bool? includeProductIds = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Lists all individuals with details at all locations.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FactSet.SDK.ProcuretoPayProvisioning.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="includeProductIds">&lt;br&gt;Optional, if &#x3D;TRUE will return additional product array per object with all productIds for all returned individuals.&lt;/br&gt; (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Object&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Object>>> ListIndividualsGetWithHttpInfoAsync(bool? includeProductIds = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Modifies an individual&#39;s attributes as determined by the uniqueId in the body of the request. Please note that the uniqueId may not be changed. Fields not changing may be passed as NULL but never empty.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FactSet.SDK.ProcuretoPayProvisioning.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modifyIndividual"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse202</returns>
        System.Threading.Tasks.Task<InlineResponse202> ModifyIndividualPostAsync(ModifyIndividual modifyIndividual = default(ModifyIndividual), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Modifies an individual&#39;s attributes as determined by the uniqueId in the body of the request. Please note that the uniqueId may not be changed. Fields not changing may be passed as NULL but never empty.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FactSet.SDK.ProcuretoPayProvisioning.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modifyIndividual"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse202)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse202>> ModifyIndividualPostWithHttpInfoAsync(ModifyIndividual modifyIndividual = default(ModifyIndividual), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IUserManagementApi : IUserManagementApiSync, IUserManagementApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class UserManagementApi : IUserManagementApi
    {
        private FactSet.SDK.ProcuretoPayProvisioning.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="UserManagementApi"/> class.
        /// </summary>
        /// <returns></returns>
        public UserManagementApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="UserManagementApi"/> class.
        /// </summary>
        /// <returns></returns>
        public UserManagementApi(string basePath)
        {
            this.Configuration = FactSet.SDK.ProcuretoPayProvisioning.Client.Configuration.MergeConfigurations(
                FactSet.SDK.ProcuretoPayProvisioning.Client.GlobalConfiguration.Instance,
                new FactSet.SDK.ProcuretoPayProvisioning.Client.Configuration { BasePath = basePath }
            );
            this.Client = new FactSet.SDK.ProcuretoPayProvisioning.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new FactSet.SDK.ProcuretoPayProvisioning.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = FactSet.SDK.ProcuretoPayProvisioning.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="UserManagementApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public UserManagementApi(FactSet.SDK.ProcuretoPayProvisioning.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = FactSet.SDK.ProcuretoPayProvisioning.Client.Configuration.MergeConfigurations(
                FactSet.SDK.ProcuretoPayProvisioning.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new FactSet.SDK.ProcuretoPayProvisioning.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new FactSet.SDK.ProcuretoPayProvisioning.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = FactSet.SDK.ProcuretoPayProvisioning.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="UserManagementApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public UserManagementApi(FactSet.SDK.ProcuretoPayProvisioning.Client.ISynchronousClient client, FactSet.SDK.ProcuretoPayProvisioning.Client.IAsynchronousClient asyncClient, FactSet.SDK.ProcuretoPayProvisioning.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = FactSet.SDK.ProcuretoPayProvisioning.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public FactSet.SDK.ProcuretoPayProvisioning.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public FactSet.SDK.ProcuretoPayProvisioning.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public FactSet.SDK.ProcuretoPayProvisioning.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public FactSet.SDK.ProcuretoPayProvisioning.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Cancels an individual&#39;s serial and all productIds 
        /// </summary>
        /// <exception cref="FactSet.SDK.ProcuretoPayProvisioning.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancelIndividual"> (optional)</param>
        /// <returns>InlineResponse202</returns>
        public InlineResponse202 CancelIndividualPost(CancelIndividual cancelIndividual = default(CancelIndividual))
        {
            FactSet.SDK.ProcuretoPayProvisioning.Client.ApiResponse<InlineResponse202> localVarResponse = CancelIndividualPostWithHttpInfo(cancelIndividual);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Cancels an individual&#39;s serial and all productIds 
        /// </summary>
        /// <exception cref="FactSet.SDK.ProcuretoPayProvisioning.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancelIndividual"> (optional)</param>
        /// <returns>ApiResponse of InlineResponse202</returns>
        public FactSet.SDK.ProcuretoPayProvisioning.Client.ApiResponse<InlineResponse202> CancelIndividualPostWithHttpInfo(CancelIndividual cancelIndividual = default(CancelIndividual))
        {
            FactSet.SDK.ProcuretoPayProvisioning.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.ProcuretoPayProvisioning.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json; charset=utf-8",
                "text/plain"
            };

            var localVarContentType = FactSet.SDK.ProcuretoPayProvisioning.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = FactSet.SDK.ProcuretoPayProvisioning.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = cancelIndividual;

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.ProcuretoPayProvisioning.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<InlineResponse202>("/cancelIndividual", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CancelIndividualPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Cancels an individual&#39;s serial and all productIds 
        /// </summary>
        /// <exception cref="FactSet.SDK.ProcuretoPayProvisioning.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancelIndividual"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse202</returns>
        public async System.Threading.Tasks.Task<InlineResponse202> CancelIndividualPostAsync(CancelIndividual cancelIndividual = default(CancelIndividual), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            FactSet.SDK.ProcuretoPayProvisioning.Client.ApiResponse<InlineResponse202> localVarResponse = await CancelIndividualPostWithHttpInfoAsync(cancelIndividual, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Cancels an individual&#39;s serial and all productIds 
        /// </summary>
        /// <exception cref="FactSet.SDK.ProcuretoPayProvisioning.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancelIndividual"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse202)</returns>
        public async System.Threading.Tasks.Task<FactSet.SDK.ProcuretoPayProvisioning.Client.ApiResponse<InlineResponse202>> CancelIndividualPostWithHttpInfoAsync(CancelIndividual cancelIndividual = default(CancelIndividual), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            FactSet.SDK.ProcuretoPayProvisioning.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.ProcuretoPayProvisioning.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json; charset=utf-8",
                "text/plain"
            };


            var localVarContentType = FactSet.SDK.ProcuretoPayProvisioning.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = FactSet.SDK.ProcuretoPayProvisioning.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = cancelIndividual;

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.ProcuretoPayProvisioning.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<InlineResponse202>("/cancelIndividual", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CancelIndividualPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Provisions an individual for FactSet 
        /// </summary>
        /// <exception cref="FactSet.SDK.ProcuretoPayProvisioning.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createIndividual"> (optional)</param>
        /// <returns>InlineResponse202</returns>
        public InlineResponse202 CreateIndividualPost(CreateIndividual createIndividual = default(CreateIndividual))
        {
            FactSet.SDK.ProcuretoPayProvisioning.Client.ApiResponse<InlineResponse202> localVarResponse = CreateIndividualPostWithHttpInfo(createIndividual);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Provisions an individual for FactSet 
        /// </summary>
        /// <exception cref="FactSet.SDK.ProcuretoPayProvisioning.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createIndividual"> (optional)</param>
        /// <returns>ApiResponse of InlineResponse202</returns>
        public FactSet.SDK.ProcuretoPayProvisioning.Client.ApiResponse<InlineResponse202> CreateIndividualPostWithHttpInfo(CreateIndividual createIndividual = default(CreateIndividual))
        {
            FactSet.SDK.ProcuretoPayProvisioning.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.ProcuretoPayProvisioning.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json; charset=utf-8",
                "text/plain"
            };

            var localVarContentType = FactSet.SDK.ProcuretoPayProvisioning.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = FactSet.SDK.ProcuretoPayProvisioning.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = createIndividual;

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.ProcuretoPayProvisioning.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<InlineResponse202>("/createIndividual", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateIndividualPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Provisions an individual for FactSet 
        /// </summary>
        /// <exception cref="FactSet.SDK.ProcuretoPayProvisioning.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createIndividual"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse202</returns>
        public async System.Threading.Tasks.Task<InlineResponse202> CreateIndividualPostAsync(CreateIndividual createIndividual = default(CreateIndividual), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            FactSet.SDK.ProcuretoPayProvisioning.Client.ApiResponse<InlineResponse202> localVarResponse = await CreateIndividualPostWithHttpInfoAsync(createIndividual, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Provisions an individual for FactSet 
        /// </summary>
        /// <exception cref="FactSet.SDK.ProcuretoPayProvisioning.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createIndividual"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse202)</returns>
        public async System.Threading.Tasks.Task<FactSet.SDK.ProcuretoPayProvisioning.Client.ApiResponse<InlineResponse202>> CreateIndividualPostWithHttpInfoAsync(CreateIndividual createIndividual = default(CreateIndividual), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            FactSet.SDK.ProcuretoPayProvisioning.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.ProcuretoPayProvisioning.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json; charset=utf-8",
                "text/plain"
            };


            var localVarContentType = FactSet.SDK.ProcuretoPayProvisioning.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = FactSet.SDK.ProcuretoPayProvisioning.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = createIndividual;

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.ProcuretoPayProvisioning.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<InlineResponse202>("/createIndividual", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateIndividualPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Returns an individual&#39;s details by uniqueId 
        /// </summary>
        /// <exception cref="FactSet.SDK.ProcuretoPayProvisioning.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uniqueid">uniqueId to query</param>
        /// <returns>GetIndividual</returns>
        public GetIndividual GetIndividualGet(string uniqueid)
        {
            FactSet.SDK.ProcuretoPayProvisioning.Client.ApiResponse<GetIndividual> localVarResponse = GetIndividualGetWithHttpInfo(uniqueid);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns an individual&#39;s details by uniqueId 
        /// </summary>
        /// <exception cref="FactSet.SDK.ProcuretoPayProvisioning.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uniqueid">uniqueId to query</param>
        /// <returns>ApiResponse of GetIndividual</returns>
        public FactSet.SDK.ProcuretoPayProvisioning.Client.ApiResponse<GetIndividual> GetIndividualGetWithHttpInfo(string uniqueid)
        {
            // verify the required parameter 'uniqueid' is set
            if (uniqueid == null)
                throw new FactSet.SDK.ProcuretoPayProvisioning.Client.ApiException(400, "Missing required parameter 'uniqueid' when calling UserManagementApi->GetIndividualGet");

            FactSet.SDK.ProcuretoPayProvisioning.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.ProcuretoPayProvisioning.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json; charset=utf-8",
                "text/plain"
            };

            var localVarContentType = FactSet.SDK.ProcuretoPayProvisioning.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = FactSet.SDK.ProcuretoPayProvisioning.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.ProcuretoPayProvisioning.Client.ClientUtils.ParameterToMultiMap("", "uniqueid", uniqueid));

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.ProcuretoPayProvisioning.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<GetIndividual>("/getIndividual", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetIndividualGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Returns an individual&#39;s details by uniqueId 
        /// </summary>
        /// <exception cref="FactSet.SDK.ProcuretoPayProvisioning.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uniqueid">uniqueId to query</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetIndividual</returns>
        public async System.Threading.Tasks.Task<GetIndividual> GetIndividualGetAsync(string uniqueid, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            FactSet.SDK.ProcuretoPayProvisioning.Client.ApiResponse<GetIndividual> localVarResponse = await GetIndividualGetWithHttpInfoAsync(uniqueid, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns an individual&#39;s details by uniqueId 
        /// </summary>
        /// <exception cref="FactSet.SDK.ProcuretoPayProvisioning.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uniqueid">uniqueId to query</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetIndividual)</returns>
        public async System.Threading.Tasks.Task<FactSet.SDK.ProcuretoPayProvisioning.Client.ApiResponse<GetIndividual>> GetIndividualGetWithHttpInfoAsync(string uniqueid, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'uniqueid' is set
            if (uniqueid == null)
                throw new FactSet.SDK.ProcuretoPayProvisioning.Client.ApiException(400, "Missing required parameter 'uniqueid' when calling UserManagementApi->GetIndividualGet");


            FactSet.SDK.ProcuretoPayProvisioning.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.ProcuretoPayProvisioning.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json; charset=utf-8",
                "text/plain"
            };


            var localVarContentType = FactSet.SDK.ProcuretoPayProvisioning.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = FactSet.SDK.ProcuretoPayProvisioning.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.ProcuretoPayProvisioning.Client.ClientUtils.ParameterToMultiMap("", "uniqueid", uniqueid));

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.ProcuretoPayProvisioning.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<GetIndividual>("/getIndividual", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetIndividualGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Lists all individuals with details at all locations. 
        /// </summary>
        /// <exception cref="FactSet.SDK.ProcuretoPayProvisioning.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="includeProductIds">&lt;br&gt;Optional, if &#x3D;TRUE will return additional product array per object with all productIds for all returned individuals.&lt;/br&gt; (optional)</param>
        /// <returns>List&lt;Object&gt;</returns>
        public List<Object> ListIndividualsGet(bool? includeProductIds = default(bool?))
        {
            FactSet.SDK.ProcuretoPayProvisioning.Client.ApiResponse<List<Object>> localVarResponse = ListIndividualsGetWithHttpInfo(includeProductIds);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Lists all individuals with details at all locations. 
        /// </summary>
        /// <exception cref="FactSet.SDK.ProcuretoPayProvisioning.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="includeProductIds">&lt;br&gt;Optional, if &#x3D;TRUE will return additional product array per object with all productIds for all returned individuals.&lt;/br&gt; (optional)</param>
        /// <returns>ApiResponse of List&lt;Object&gt;</returns>
        public FactSet.SDK.ProcuretoPayProvisioning.Client.ApiResponse<List<Object>> ListIndividualsGetWithHttpInfo(bool? includeProductIds = default(bool?))
        {
            FactSet.SDK.ProcuretoPayProvisioning.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.ProcuretoPayProvisioning.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json; charset=utf-8",
                "text/plain"
            };

            var localVarContentType = FactSet.SDK.ProcuretoPayProvisioning.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = FactSet.SDK.ProcuretoPayProvisioning.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (includeProductIds != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.ProcuretoPayProvisioning.Client.ClientUtils.ParameterToMultiMap("", "includeProductIds", includeProductIds));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.ProcuretoPayProvisioning.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<Object>>("/listIndividuals", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListIndividualsGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Lists all individuals with details at all locations. 
        /// </summary>
        /// <exception cref="FactSet.SDK.ProcuretoPayProvisioning.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="includeProductIds">&lt;br&gt;Optional, if &#x3D;TRUE will return additional product array per object with all productIds for all returned individuals.&lt;/br&gt; (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Object&gt;</returns>
        public async System.Threading.Tasks.Task<List<Object>> ListIndividualsGetAsync(bool? includeProductIds = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            FactSet.SDK.ProcuretoPayProvisioning.Client.ApiResponse<List<Object>> localVarResponse = await ListIndividualsGetWithHttpInfoAsync(includeProductIds, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Lists all individuals with details at all locations. 
        /// </summary>
        /// <exception cref="FactSet.SDK.ProcuretoPayProvisioning.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="includeProductIds">&lt;br&gt;Optional, if &#x3D;TRUE will return additional product array per object with all productIds for all returned individuals.&lt;/br&gt; (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Object&gt;)</returns>
        public async System.Threading.Tasks.Task<FactSet.SDK.ProcuretoPayProvisioning.Client.ApiResponse<List<Object>>> ListIndividualsGetWithHttpInfoAsync(bool? includeProductIds = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            FactSet.SDK.ProcuretoPayProvisioning.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.ProcuretoPayProvisioning.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json; charset=utf-8",
                "text/plain"
            };


            var localVarContentType = FactSet.SDK.ProcuretoPayProvisioning.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = FactSet.SDK.ProcuretoPayProvisioning.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (includeProductIds != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.ProcuretoPayProvisioning.Client.ClientUtils.ParameterToMultiMap("", "includeProductIds", includeProductIds));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.ProcuretoPayProvisioning.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<Object>>("/listIndividuals", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListIndividualsGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Modifies an individual&#39;s attributes as determined by the uniqueId in the body of the request. Please note that the uniqueId may not be changed. Fields not changing may be passed as NULL but never empty. 
        /// </summary>
        /// <exception cref="FactSet.SDK.ProcuretoPayProvisioning.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modifyIndividual"> (optional)</param>
        /// <returns>InlineResponse202</returns>
        public InlineResponse202 ModifyIndividualPost(ModifyIndividual modifyIndividual = default(ModifyIndividual))
        {
            FactSet.SDK.ProcuretoPayProvisioning.Client.ApiResponse<InlineResponse202> localVarResponse = ModifyIndividualPostWithHttpInfo(modifyIndividual);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Modifies an individual&#39;s attributes as determined by the uniqueId in the body of the request. Please note that the uniqueId may not be changed. Fields not changing may be passed as NULL but never empty. 
        /// </summary>
        /// <exception cref="FactSet.SDK.ProcuretoPayProvisioning.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modifyIndividual"> (optional)</param>
        /// <returns>ApiResponse of InlineResponse202</returns>
        public FactSet.SDK.ProcuretoPayProvisioning.Client.ApiResponse<InlineResponse202> ModifyIndividualPostWithHttpInfo(ModifyIndividual modifyIndividual = default(ModifyIndividual))
        {
            FactSet.SDK.ProcuretoPayProvisioning.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.ProcuretoPayProvisioning.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json; charset=utf-8",
                "text/plain"
            };

            var localVarContentType = FactSet.SDK.ProcuretoPayProvisioning.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = FactSet.SDK.ProcuretoPayProvisioning.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = modifyIndividual;

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.ProcuretoPayProvisioning.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<InlineResponse202>("/modifyIndividual", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ModifyIndividualPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Modifies an individual&#39;s attributes as determined by the uniqueId in the body of the request. Please note that the uniqueId may not be changed. Fields not changing may be passed as NULL but never empty. 
        /// </summary>
        /// <exception cref="FactSet.SDK.ProcuretoPayProvisioning.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modifyIndividual"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse202</returns>
        public async System.Threading.Tasks.Task<InlineResponse202> ModifyIndividualPostAsync(ModifyIndividual modifyIndividual = default(ModifyIndividual), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            FactSet.SDK.ProcuretoPayProvisioning.Client.ApiResponse<InlineResponse202> localVarResponse = await ModifyIndividualPostWithHttpInfoAsync(modifyIndividual, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Modifies an individual&#39;s attributes as determined by the uniqueId in the body of the request. Please note that the uniqueId may not be changed. Fields not changing may be passed as NULL but never empty. 
        /// </summary>
        /// <exception cref="FactSet.SDK.ProcuretoPayProvisioning.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modifyIndividual"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse202)</returns>
        public async System.Threading.Tasks.Task<FactSet.SDK.ProcuretoPayProvisioning.Client.ApiResponse<InlineResponse202>> ModifyIndividualPostWithHttpInfoAsync(ModifyIndividual modifyIndividual = default(ModifyIndividual), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            FactSet.SDK.ProcuretoPayProvisioning.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.ProcuretoPayProvisioning.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json; charset=utf-8",
                "text/plain"
            };


            var localVarContentType = FactSet.SDK.ProcuretoPayProvisioning.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = FactSet.SDK.ProcuretoPayProvisioning.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = modifyIndividual;

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.ProcuretoPayProvisioning.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<InlineResponse202>("/modifyIndividual", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ModifyIndividualPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
