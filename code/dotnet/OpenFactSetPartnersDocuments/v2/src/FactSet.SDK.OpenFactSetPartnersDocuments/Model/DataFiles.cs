/*
 * Open:FactSet - Partners
 *
 * This service provides the capability to search and download unstructured content provided by <a href=\"https://open.factset.com/catalog/en-us\">Open:FactSet Partners</a>.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: api@factset.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = FactSet.SDK.OpenFactSetPartnersDocuments.Client.OpenAPIDateConverter;

namespace FactSet.SDK.OpenFactSetPartnersDocuments.Model
{
    /// <summary>
    /// Returns Data Response.
    /// </summary>
    [DataContract(Name = "DataFiles")]
    public partial class DataFiles : IEquatable<DataFiles>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DataFiles" /> class.
        /// </summary>
        /// <param name="trialId">ID of the trial assigned by the trial registry..</param>
        /// <param name="version">Specifies the version of a trial..</param>
        /// <param name="fileName">The filename of the trial data..</param>
        /// <param name="clinicalTrialId">Specifies Ozmosi unique ID for each historical version of a trial..</param>
        /// <param name="uniqueProtocolId">ID assigned by the sponsor of a trial..</param>
        /// <param name="officialTitle">Full scientific title of a trial..</param>
        /// <param name="overallStatus">Defines the current stage of a trial&#39;s activity..</param>
        /// <param name="primaryCompletion">The date where the final patient is examined or treated for the purpose of collecting data on the trial&#39;s primary outcome measures. Trial Sponsors may publicly announce the data. results after this date.</param>
        /// <param name="studyCompletion">The date that treatment will complete in the trial and data will be fully collected for secondary outcome measures and adverse events..</param>
        /// <param name="firstPosted">The date on which the trial was first available on ClinicalTrials.gov. Specifically, this date refers to version 1 of a trial.</param>
        /// <param name="lastPosted">The date on which this version of a trial was officially updated and publicly visible on the registry..</param>
        /// <param name="sponsor">The primary sponsor of the trial..</param>
        /// <param name="responsibleParty">Identifies if the responsible party of the trial is the Sponsor (The entity that initiates the study), the Principal Investigator (An individual designated by the Sponsor) or Sponsor-Investigator (An individual both initiating and conduct the trial).</param>
        /// <param name="dataMonitoring">Identifies if the trial involves a group of independent scientists who monitor the safety and scientific integrity of a clinical trial..</param>
        /// <param name="studyType">Describes the nature of a clinical study..</param>
        /// <param name="primaryPurpose">Describes the main reason for the clinical trial..</param>
        /// <param name="studyPhase">Specifies the stage of a clinical trial studying a drug or biological product..</param>
        /// <param name="interventionalModel">Describes the general design of the strategy for assigning interventions to participants in a clinical study..</param>
        /// <param name="numberOfArms">The number of clinical arms for study..</param>
        /// <param name="masking">Defines the type of masking..</param>
        /// <param name="allocation">Identifies the method used to assign participants to an arm of a clinical study..</param>
        /// <param name="enrollment">Number of patients enrolled..</param>
        /// <param name="minimumAge">Minimum age of participants..</param>
        /// <param name="maximumAge">Maximum age of participants..</param>
        /// <param name="sex">A type of eligibility criteria that indicates the sex of people who may participate in a clinical study..</param>
        /// <param name="genderBased">Defines if study is gender specific..</param>
        /// <param name="acceptsVolunteers">A type of eligibility criteria that indicates whether people who do not have the condition/disease being studied can participate in that clinical study..</param>
        /// <param name="date">Specifies the timestamp of each version of a trial..</param>
        /// <param name="recordVerification">The date on which the responsible party last verified the clinical study information in the entire ClinicalTrials.gov record for the clinical study, even if no additional or updated information is being submitted.</param>
        /// <param name="studyStart">Date that the trial becomes open for recruitment or the date on which the first patient was enrolled..</param>
        /// <param name="firstSubmitted">The date that the trial was submitted to the registry..</param>
        /// <param name="firstSubmitMetQxCrite">The date on which a submitted study record is confirmed to be consistent with National Library of Medicine (NLM) quality control (QC) review criteria..</param>
        /// <param name="lastSubmitMetQxCrite">The most recent date on which the study sponsor or investigator submitted changes to a study record..</param>
        /// <param name="primaryCompDateType">Designates if primary completion date is actual or anticipated..</param>
        /// <param name="studyCompletionDateType">Designates if study completion date is actual or anticipated..</param>
        /// <param name="firstPostedDateType">Designates if the first posted date is actual or anticipated..</param>
        /// <param name="lastPostedDateType">Designates if the last update posted date is actual or anticipated..</param>
        /// <param name="enrollmentType">Identifies if the enrollment number is the anticipated or actual amount..</param>
        /// <param name="beamProbabilityOfTrialSuccess">Probability of trial success..</param>
        /// <param name="beamProbabilityOfLaunch">Probability of trial being launched..</param>
        /// <param name="url">Download link for the clinical trials provided by the Ozmosi feed..</param>
        public DataFiles(string trialId = default(string), int version = default(int), string fileName = default(string), string clinicalTrialId = default(string), string uniqueProtocolId = default(string), string officialTitle = default(string), string overallStatus = default(string), DateTime primaryCompletion = default(DateTime), DateTime studyCompletion = default(DateTime), DateTime firstPosted = default(DateTime), DateTime lastPosted = default(DateTime), string sponsor = default(string), string responsibleParty = default(string), string dataMonitoring = default(string), string studyType = default(string), string primaryPurpose = default(string), string studyPhase = default(string), string interventionalModel = default(string), int numberOfArms = default(int), string masking = default(string), string allocation = default(string), int enrollment = default(int), string minimumAge = default(string), string maximumAge = default(string), string sex = default(string), string genderBased = default(string), string acceptsVolunteers = default(string), DateTime date = default(DateTime), DateTime recordVerification = default(DateTime), DateTime studyStart = default(DateTime), DateTime firstSubmitted = default(DateTime), DateTime firstSubmitMetQxCrite = default(DateTime), DateTime lastSubmitMetQxCrite = default(DateTime), string primaryCompDateType = default(string), string studyCompletionDateType = default(string), string firstPostedDateType = default(string), string lastPostedDateType = default(string), string enrollmentType = default(string), decimal beamProbabilityOfTrialSuccess = default(decimal), decimal beamProbabilityOfLaunch = default(decimal), string url = default(string))
        {
            this.TrialId = trialId;
            this._Version = version;
            this.FileName = fileName;
            this.ClinicalTrialId = clinicalTrialId;
            this.UniqueProtocolId = uniqueProtocolId;
            this.OfficialTitle = officialTitle;
            this.OverallStatus = overallStatus;
            this.PrimaryCompletion = primaryCompletion;
            this.StudyCompletion = studyCompletion;
            this.FirstPosted = firstPosted;
            this.LastPosted = lastPosted;
            this.Sponsor = sponsor;
            this.ResponsibleParty = responsibleParty;
            this.DataMonitoring = dataMonitoring;
            this.StudyType = studyType;
            this.PrimaryPurpose = primaryPurpose;
            this.StudyPhase = studyPhase;
            this.InterventionalModel = interventionalModel;
            this.NumberOfArms = numberOfArms;
            this.Masking = masking;
            this.Allocation = allocation;
            this.Enrollment = enrollment;
            this.MinimumAge = minimumAge;
            this.MaximumAge = maximumAge;
            this.Sex = sex;
            this.GenderBased = genderBased;
            this.AcceptsVolunteers = acceptsVolunteers;
            this.Date = date;
            this.RecordVerification = recordVerification;
            this.StudyStart = studyStart;
            this.FirstSubmitted = firstSubmitted;
            this.FirstSubmitMetQxCrite = firstSubmitMetQxCrite;
            this.LastSubmitMetQxCrite = lastSubmitMetQxCrite;
            this.PrimaryCompDateType = primaryCompDateType;
            this.StudyCompletionDateType = studyCompletionDateType;
            this.FirstPostedDateType = firstPostedDateType;
            this.LastPostedDateType = lastPostedDateType;
            this.EnrollmentType = enrollmentType;
            this.BeamProbabilityOfTrialSuccess = beamProbabilityOfTrialSuccess;
            this.BeamProbabilityOfLaunch = beamProbabilityOfLaunch;
            this.Url = url;
        }

        /// <summary>
        /// ID of the trial assigned by the trial registry.
        /// </summary>
        /// <value>ID of the trial assigned by the trial registry.</value>
        [DataMember(Name = "trialId", EmitDefaultValue = false)]
        public string TrialId { get; set; }

        /// <summary>
        /// Specifies the version of a trial.
        /// </summary>
        /// <value>Specifies the version of a trial.</value>
        [DataMember(Name = "version", EmitDefaultValue = false)]
        public int _Version { get; set; }

        /// <summary>
        /// The filename of the trial data.
        /// </summary>
        /// <value>The filename of the trial data.</value>
        [DataMember(Name = "fileName", EmitDefaultValue = false)]
        public string FileName { get; set; }

        /// <summary>
        /// Specifies Ozmosi unique ID for each historical version of a trial.
        /// </summary>
        /// <value>Specifies Ozmosi unique ID for each historical version of a trial.</value>
        [DataMember(Name = "clinicalTrialId", EmitDefaultValue = false)]
        public string ClinicalTrialId { get; set; }

        /// <summary>
        /// ID assigned by the sponsor of a trial.
        /// </summary>
        /// <value>ID assigned by the sponsor of a trial.</value>
        [DataMember(Name = "uniqueProtocolId", EmitDefaultValue = false)]
        public string UniqueProtocolId { get; set; }

        /// <summary>
        /// Full scientific title of a trial.
        /// </summary>
        /// <value>Full scientific title of a trial.</value>
        [DataMember(Name = "officialTitle", EmitDefaultValue = false)]
        public string OfficialTitle { get; set; }

        /// <summary>
        /// Defines the current stage of a trial&#39;s activity.
        /// </summary>
        /// <value>Defines the current stage of a trial&#39;s activity.</value>
        [DataMember(Name = "overallStatus", EmitDefaultValue = false)]
        public string OverallStatus { get; set; }

        /// <summary>
        /// The date where the final patient is examined or treated for the purpose of collecting data on the trial&#39;s primary outcome measures. Trial Sponsors may publicly announce the data. results after this date
        /// </summary>
        /// <value>The date where the final patient is examined or treated for the purpose of collecting data on the trial&#39;s primary outcome measures. Trial Sponsors may publicly announce the data. results after this date</value>
        [DataMember(Name = "primaryCompletion", EmitDefaultValue = false)]
        public DateTime PrimaryCompletion { get; set; }

        /// <summary>
        /// The date that treatment will complete in the trial and data will be fully collected for secondary outcome measures and adverse events.
        /// </summary>
        /// <value>The date that treatment will complete in the trial and data will be fully collected for secondary outcome measures and adverse events.</value>
        [DataMember(Name = "studyCompletion", EmitDefaultValue = false)]
        public DateTime StudyCompletion { get; set; }

        /// <summary>
        /// The date on which the trial was first available on ClinicalTrials.gov. Specifically, this date refers to version 1 of a trial
        /// </summary>
        /// <value>The date on which the trial was first available on ClinicalTrials.gov. Specifically, this date refers to version 1 of a trial</value>
        [DataMember(Name = "firstPosted", EmitDefaultValue = false)]
        public DateTime FirstPosted { get; set; }

        /// <summary>
        /// The date on which this version of a trial was officially updated and publicly visible on the registry.
        /// </summary>
        /// <value>The date on which this version of a trial was officially updated and publicly visible on the registry.</value>
        [DataMember(Name = "lastPosted", EmitDefaultValue = false)]
        public DateTime LastPosted { get; set; }

        /// <summary>
        /// The primary sponsor of the trial.
        /// </summary>
        /// <value>The primary sponsor of the trial.</value>
        [DataMember(Name = "sponsor", EmitDefaultValue = false)]
        public string Sponsor { get; set; }

        /// <summary>
        /// Identifies if the responsible party of the trial is the Sponsor (The entity that initiates the study), the Principal Investigator (An individual designated by the Sponsor) or Sponsor-Investigator (An individual both initiating and conduct the trial)
        /// </summary>
        /// <value>Identifies if the responsible party of the trial is the Sponsor (The entity that initiates the study), the Principal Investigator (An individual designated by the Sponsor) or Sponsor-Investigator (An individual both initiating and conduct the trial)</value>
        [DataMember(Name = "responsibleParty", EmitDefaultValue = false)]
        public string ResponsibleParty { get; set; }

        /// <summary>
        /// Identifies if the trial involves a group of independent scientists who monitor the safety and scientific integrity of a clinical trial.
        /// </summary>
        /// <value>Identifies if the trial involves a group of independent scientists who monitor the safety and scientific integrity of a clinical trial.</value>
        [DataMember(Name = "dataMonitoring", EmitDefaultValue = false)]
        public string DataMonitoring { get; set; }

        /// <summary>
        /// Describes the nature of a clinical study.
        /// </summary>
        /// <value>Describes the nature of a clinical study.</value>
        [DataMember(Name = "studyType", EmitDefaultValue = false)]
        public string StudyType { get; set; }

        /// <summary>
        /// Describes the main reason for the clinical trial.
        /// </summary>
        /// <value>Describes the main reason for the clinical trial.</value>
        [DataMember(Name = "primaryPurpose", EmitDefaultValue = false)]
        public string PrimaryPurpose { get; set; }

        /// <summary>
        /// Specifies the stage of a clinical trial studying a drug or biological product.
        /// </summary>
        /// <value>Specifies the stage of a clinical trial studying a drug or biological product.</value>
        [DataMember(Name = "studyPhase", EmitDefaultValue = false)]
        public string StudyPhase { get; set; }

        /// <summary>
        /// Describes the general design of the strategy for assigning interventions to participants in a clinical study.
        /// </summary>
        /// <value>Describes the general design of the strategy for assigning interventions to participants in a clinical study.</value>
        [DataMember(Name = "interventionalModel", EmitDefaultValue = false)]
        public string InterventionalModel { get; set; }

        /// <summary>
        /// The number of clinical arms for study.
        /// </summary>
        /// <value>The number of clinical arms for study.</value>
        [DataMember(Name = "numberOfArms", EmitDefaultValue = false)]
        public int NumberOfArms { get; set; }

        /// <summary>
        /// Defines the type of masking.
        /// </summary>
        /// <value>Defines the type of masking.</value>
        [DataMember(Name = "masking", EmitDefaultValue = false)]
        public string Masking { get; set; }

        /// <summary>
        /// Identifies the method used to assign participants to an arm of a clinical study.
        /// </summary>
        /// <value>Identifies the method used to assign participants to an arm of a clinical study.</value>
        [DataMember(Name = "allocation", EmitDefaultValue = false)]
        public string Allocation { get; set; }

        /// <summary>
        /// Number of patients enrolled.
        /// </summary>
        /// <value>Number of patients enrolled.</value>
        [DataMember(Name = "enrollment", EmitDefaultValue = false)]
        public int Enrollment { get; set; }

        /// <summary>
        /// Minimum age of participants.
        /// </summary>
        /// <value>Minimum age of participants.</value>
        [DataMember(Name = "minimumAge", EmitDefaultValue = false)]
        public string MinimumAge { get; set; }

        /// <summary>
        /// Maximum age of participants.
        /// </summary>
        /// <value>Maximum age of participants.</value>
        [DataMember(Name = "maximumAge", EmitDefaultValue = false)]
        public string MaximumAge { get; set; }

        /// <summary>
        /// A type of eligibility criteria that indicates the sex of people who may participate in a clinical study.
        /// </summary>
        /// <value>A type of eligibility criteria that indicates the sex of people who may participate in a clinical study.</value>
        [DataMember(Name = "sex", EmitDefaultValue = false)]
        public string Sex { get; set; }

        /// <summary>
        /// Defines if study is gender specific.
        /// </summary>
        /// <value>Defines if study is gender specific.</value>
        [DataMember(Name = "genderBased", EmitDefaultValue = false)]
        public string GenderBased { get; set; }

        /// <summary>
        /// A type of eligibility criteria that indicates whether people who do not have the condition/disease being studied can participate in that clinical study.
        /// </summary>
        /// <value>A type of eligibility criteria that indicates whether people who do not have the condition/disease being studied can participate in that clinical study.</value>
        [DataMember(Name = "acceptsVolunteers", EmitDefaultValue = false)]
        public string AcceptsVolunteers { get; set; }

        /// <summary>
        /// Specifies the timestamp of each version of a trial.
        /// </summary>
        /// <value>Specifies the timestamp of each version of a trial.</value>
        [DataMember(Name = "date", EmitDefaultValue = false)]
        public DateTime Date { get; set; }

        /// <summary>
        /// The date on which the responsible party last verified the clinical study information in the entire ClinicalTrials.gov record for the clinical study, even if no additional or updated information is being submitted
        /// </summary>
        /// <value>The date on which the responsible party last verified the clinical study information in the entire ClinicalTrials.gov record for the clinical study, even if no additional or updated information is being submitted</value>
        [DataMember(Name = "recordVerification", EmitDefaultValue = false)]
        public DateTime RecordVerification { get; set; }

        /// <summary>
        /// Date that the trial becomes open for recruitment or the date on which the first patient was enrolled.
        /// </summary>
        /// <value>Date that the trial becomes open for recruitment or the date on which the first patient was enrolled.</value>
        [DataMember(Name = "studyStart", EmitDefaultValue = false)]
        public DateTime StudyStart { get; set; }

        /// <summary>
        /// The date that the trial was submitted to the registry.
        /// </summary>
        /// <value>The date that the trial was submitted to the registry.</value>
        [DataMember(Name = "firstSubmitted", EmitDefaultValue = false)]
        public DateTime FirstSubmitted { get; set; }

        /// <summary>
        /// The date on which a submitted study record is confirmed to be consistent with National Library of Medicine (NLM) quality control (QC) review criteria.
        /// </summary>
        /// <value>The date on which a submitted study record is confirmed to be consistent with National Library of Medicine (NLM) quality control (QC) review criteria.</value>
        [DataMember(Name = "firstSubmitMetQxCrite", EmitDefaultValue = false)]
        public DateTime FirstSubmitMetQxCrite { get; set; }

        /// <summary>
        /// The most recent date on which the study sponsor or investigator submitted changes to a study record.
        /// </summary>
        /// <value>The most recent date on which the study sponsor or investigator submitted changes to a study record.</value>
        [DataMember(Name = "lastSubmitMetQxCrite", EmitDefaultValue = false)]
        public DateTime LastSubmitMetQxCrite { get; set; }

        /// <summary>
        /// Designates if primary completion date is actual or anticipated.
        /// </summary>
        /// <value>Designates if primary completion date is actual or anticipated.</value>
        [DataMember(Name = "primaryCompDateType", EmitDefaultValue = false)]
        public string PrimaryCompDateType { get; set; }

        /// <summary>
        /// Designates if study completion date is actual or anticipated.
        /// </summary>
        /// <value>Designates if study completion date is actual or anticipated.</value>
        [DataMember(Name = "studyCompletionDateType", EmitDefaultValue = false)]
        public string StudyCompletionDateType { get; set; }

        /// <summary>
        /// Designates if the first posted date is actual or anticipated.
        /// </summary>
        /// <value>Designates if the first posted date is actual or anticipated.</value>
        [DataMember(Name = "firstPostedDateType", EmitDefaultValue = false)]
        public string FirstPostedDateType { get; set; }

        /// <summary>
        /// Designates if the last update posted date is actual or anticipated.
        /// </summary>
        /// <value>Designates if the last update posted date is actual or anticipated.</value>
        [DataMember(Name = "lastPostedDateType", EmitDefaultValue = false)]
        public string LastPostedDateType { get; set; }

        /// <summary>
        /// Identifies if the enrollment number is the anticipated or actual amount.
        /// </summary>
        /// <value>Identifies if the enrollment number is the anticipated or actual amount.</value>
        [DataMember(Name = "enrollmentType", EmitDefaultValue = false)]
        public string EnrollmentType { get; set; }

        /// <summary>
        /// Probability of trial success.
        /// </summary>
        /// <value>Probability of trial success.</value>
        [DataMember(Name = "beamProbabilityOfTrialSuccess", EmitDefaultValue = false)]
        public decimal BeamProbabilityOfTrialSuccess { get; set; }

        /// <summary>
        /// Probability of trial being launched.
        /// </summary>
        /// <value>Probability of trial being launched.</value>
        [DataMember(Name = "beamProbabilityOfLaunch", EmitDefaultValue = false)]
        public decimal BeamProbabilityOfLaunch { get; set; }

        /// <summary>
        /// Download link for the clinical trials provided by the Ozmosi feed.
        /// </summary>
        /// <value>Download link for the clinical trials provided by the Ozmosi feed.</value>
        [DataMember(Name = "url", EmitDefaultValue = false)]
        public string Url { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class DataFiles {\n");
            sb.Append("  TrialId: ").Append(TrialId).Append("\n");
            sb.Append("  _Version: ").Append(_Version).Append("\n");
            sb.Append("  FileName: ").Append(FileName).Append("\n");
            sb.Append("  ClinicalTrialId: ").Append(ClinicalTrialId).Append("\n");
            sb.Append("  UniqueProtocolId: ").Append(UniqueProtocolId).Append("\n");
            sb.Append("  OfficialTitle: ").Append(OfficialTitle).Append("\n");
            sb.Append("  OverallStatus: ").Append(OverallStatus).Append("\n");
            sb.Append("  PrimaryCompletion: ").Append(PrimaryCompletion).Append("\n");
            sb.Append("  StudyCompletion: ").Append(StudyCompletion).Append("\n");
            sb.Append("  FirstPosted: ").Append(FirstPosted).Append("\n");
            sb.Append("  LastPosted: ").Append(LastPosted).Append("\n");
            sb.Append("  Sponsor: ").Append(Sponsor).Append("\n");
            sb.Append("  ResponsibleParty: ").Append(ResponsibleParty).Append("\n");
            sb.Append("  DataMonitoring: ").Append(DataMonitoring).Append("\n");
            sb.Append("  StudyType: ").Append(StudyType).Append("\n");
            sb.Append("  PrimaryPurpose: ").Append(PrimaryPurpose).Append("\n");
            sb.Append("  StudyPhase: ").Append(StudyPhase).Append("\n");
            sb.Append("  InterventionalModel: ").Append(InterventionalModel).Append("\n");
            sb.Append("  NumberOfArms: ").Append(NumberOfArms).Append("\n");
            sb.Append("  Masking: ").Append(Masking).Append("\n");
            sb.Append("  Allocation: ").Append(Allocation).Append("\n");
            sb.Append("  Enrollment: ").Append(Enrollment).Append("\n");
            sb.Append("  MinimumAge: ").Append(MinimumAge).Append("\n");
            sb.Append("  MaximumAge: ").Append(MaximumAge).Append("\n");
            sb.Append("  Sex: ").Append(Sex).Append("\n");
            sb.Append("  GenderBased: ").Append(GenderBased).Append("\n");
            sb.Append("  AcceptsVolunteers: ").Append(AcceptsVolunteers).Append("\n");
            sb.Append("  Date: ").Append(Date).Append("\n");
            sb.Append("  RecordVerification: ").Append(RecordVerification).Append("\n");
            sb.Append("  StudyStart: ").Append(StudyStart).Append("\n");
            sb.Append("  FirstSubmitted: ").Append(FirstSubmitted).Append("\n");
            sb.Append("  FirstSubmitMetQxCrite: ").Append(FirstSubmitMetQxCrite).Append("\n");
            sb.Append("  LastSubmitMetQxCrite: ").Append(LastSubmitMetQxCrite).Append("\n");
            sb.Append("  PrimaryCompDateType: ").Append(PrimaryCompDateType).Append("\n");
            sb.Append("  StudyCompletionDateType: ").Append(StudyCompletionDateType).Append("\n");
            sb.Append("  FirstPostedDateType: ").Append(FirstPostedDateType).Append("\n");
            sb.Append("  LastPostedDateType: ").Append(LastPostedDateType).Append("\n");
            sb.Append("  EnrollmentType: ").Append(EnrollmentType).Append("\n");
            sb.Append("  BeamProbabilityOfTrialSuccess: ").Append(BeamProbabilityOfTrialSuccess).Append("\n");
            sb.Append("  BeamProbabilityOfLaunch: ").Append(BeamProbabilityOfLaunch).Append("\n");
            sb.Append("  Url: ").Append(Url).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DataFiles);
        }

        /// <summary>
        /// Returns true if DataFiles instances are equal
        /// </summary>
        /// <param name="input">Instance of DataFiles to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DataFiles input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.TrialId == input.TrialId ||
                    (this.TrialId != null &&
                    this.TrialId.Equals(input.TrialId))
                ) && 
                (
                    this._Version == input._Version ||
                    this._Version.Equals(input._Version)
                ) && 
                (
                    this.FileName == input.FileName ||
                    (this.FileName != null &&
                    this.FileName.Equals(input.FileName))
                ) && 
                (
                    this.ClinicalTrialId == input.ClinicalTrialId ||
                    (this.ClinicalTrialId != null &&
                    this.ClinicalTrialId.Equals(input.ClinicalTrialId))
                ) && 
                (
                    this.UniqueProtocolId == input.UniqueProtocolId ||
                    (this.UniqueProtocolId != null &&
                    this.UniqueProtocolId.Equals(input.UniqueProtocolId))
                ) && 
                (
                    this.OfficialTitle == input.OfficialTitle ||
                    (this.OfficialTitle != null &&
                    this.OfficialTitle.Equals(input.OfficialTitle))
                ) && 
                (
                    this.OverallStatus == input.OverallStatus ||
                    (this.OverallStatus != null &&
                    this.OverallStatus.Equals(input.OverallStatus))
                ) && 
                (
                    this.PrimaryCompletion == input.PrimaryCompletion ||
                    (this.PrimaryCompletion != null &&
                    this.PrimaryCompletion.Equals(input.PrimaryCompletion))
                ) && 
                (
                    this.StudyCompletion == input.StudyCompletion ||
                    (this.StudyCompletion != null &&
                    this.StudyCompletion.Equals(input.StudyCompletion))
                ) && 
                (
                    this.FirstPosted == input.FirstPosted ||
                    (this.FirstPosted != null &&
                    this.FirstPosted.Equals(input.FirstPosted))
                ) && 
                (
                    this.LastPosted == input.LastPosted ||
                    (this.LastPosted != null &&
                    this.LastPosted.Equals(input.LastPosted))
                ) && 
                (
                    this.Sponsor == input.Sponsor ||
                    (this.Sponsor != null &&
                    this.Sponsor.Equals(input.Sponsor))
                ) && 
                (
                    this.ResponsibleParty == input.ResponsibleParty ||
                    (this.ResponsibleParty != null &&
                    this.ResponsibleParty.Equals(input.ResponsibleParty))
                ) && 
                (
                    this.DataMonitoring == input.DataMonitoring ||
                    (this.DataMonitoring != null &&
                    this.DataMonitoring.Equals(input.DataMonitoring))
                ) && 
                (
                    this.StudyType == input.StudyType ||
                    (this.StudyType != null &&
                    this.StudyType.Equals(input.StudyType))
                ) && 
                (
                    this.PrimaryPurpose == input.PrimaryPurpose ||
                    (this.PrimaryPurpose != null &&
                    this.PrimaryPurpose.Equals(input.PrimaryPurpose))
                ) && 
                (
                    this.StudyPhase == input.StudyPhase ||
                    (this.StudyPhase != null &&
                    this.StudyPhase.Equals(input.StudyPhase))
                ) && 
                (
                    this.InterventionalModel == input.InterventionalModel ||
                    (this.InterventionalModel != null &&
                    this.InterventionalModel.Equals(input.InterventionalModel))
                ) && 
                (
                    this.NumberOfArms == input.NumberOfArms ||
                    this.NumberOfArms.Equals(input.NumberOfArms)
                ) && 
                (
                    this.Masking == input.Masking ||
                    (this.Masking != null &&
                    this.Masking.Equals(input.Masking))
                ) && 
                (
                    this.Allocation == input.Allocation ||
                    (this.Allocation != null &&
                    this.Allocation.Equals(input.Allocation))
                ) && 
                (
                    this.Enrollment == input.Enrollment ||
                    this.Enrollment.Equals(input.Enrollment)
                ) && 
                (
                    this.MinimumAge == input.MinimumAge ||
                    (this.MinimumAge != null &&
                    this.MinimumAge.Equals(input.MinimumAge))
                ) && 
                (
                    this.MaximumAge == input.MaximumAge ||
                    (this.MaximumAge != null &&
                    this.MaximumAge.Equals(input.MaximumAge))
                ) && 
                (
                    this.Sex == input.Sex ||
                    (this.Sex != null &&
                    this.Sex.Equals(input.Sex))
                ) && 
                (
                    this.GenderBased == input.GenderBased ||
                    (this.GenderBased != null &&
                    this.GenderBased.Equals(input.GenderBased))
                ) && 
                (
                    this.AcceptsVolunteers == input.AcceptsVolunteers ||
                    (this.AcceptsVolunteers != null &&
                    this.AcceptsVolunteers.Equals(input.AcceptsVolunteers))
                ) && 
                (
                    this.Date == input.Date ||
                    (this.Date != null &&
                    this.Date.Equals(input.Date))
                ) && 
                (
                    this.RecordVerification == input.RecordVerification ||
                    (this.RecordVerification != null &&
                    this.RecordVerification.Equals(input.RecordVerification))
                ) && 
                (
                    this.StudyStart == input.StudyStart ||
                    (this.StudyStart != null &&
                    this.StudyStart.Equals(input.StudyStart))
                ) && 
                (
                    this.FirstSubmitted == input.FirstSubmitted ||
                    (this.FirstSubmitted != null &&
                    this.FirstSubmitted.Equals(input.FirstSubmitted))
                ) && 
                (
                    this.FirstSubmitMetQxCrite == input.FirstSubmitMetQxCrite ||
                    (this.FirstSubmitMetQxCrite != null &&
                    this.FirstSubmitMetQxCrite.Equals(input.FirstSubmitMetQxCrite))
                ) && 
                (
                    this.LastSubmitMetQxCrite == input.LastSubmitMetQxCrite ||
                    (this.LastSubmitMetQxCrite != null &&
                    this.LastSubmitMetQxCrite.Equals(input.LastSubmitMetQxCrite))
                ) && 
                (
                    this.PrimaryCompDateType == input.PrimaryCompDateType ||
                    (this.PrimaryCompDateType != null &&
                    this.PrimaryCompDateType.Equals(input.PrimaryCompDateType))
                ) && 
                (
                    this.StudyCompletionDateType == input.StudyCompletionDateType ||
                    (this.StudyCompletionDateType != null &&
                    this.StudyCompletionDateType.Equals(input.StudyCompletionDateType))
                ) && 
                (
                    this.FirstPostedDateType == input.FirstPostedDateType ||
                    (this.FirstPostedDateType != null &&
                    this.FirstPostedDateType.Equals(input.FirstPostedDateType))
                ) && 
                (
                    this.LastPostedDateType == input.LastPostedDateType ||
                    (this.LastPostedDateType != null &&
                    this.LastPostedDateType.Equals(input.LastPostedDateType))
                ) && 
                (
                    this.EnrollmentType == input.EnrollmentType ||
                    (this.EnrollmentType != null &&
                    this.EnrollmentType.Equals(input.EnrollmentType))
                ) && 
                (
                    this.BeamProbabilityOfTrialSuccess == input.BeamProbabilityOfTrialSuccess ||
                    this.BeamProbabilityOfTrialSuccess.Equals(input.BeamProbabilityOfTrialSuccess)
                ) && 
                (
                    this.BeamProbabilityOfLaunch == input.BeamProbabilityOfLaunch ||
                    this.BeamProbabilityOfLaunch.Equals(input.BeamProbabilityOfLaunch)
                ) && 
                (
                    this.Url == input.Url ||
                    (this.Url != null &&
                    this.Url.Equals(input.Url))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.TrialId != null)
                {
                    hashCode = (hashCode * 59) + this.TrialId.GetHashCode();
                }
                hashCode = (hashCode * 59) + this._Version.GetHashCode();
                if (this.FileName != null)
                {
                    hashCode = (hashCode * 59) + this.FileName.GetHashCode();
                }
                if (this.ClinicalTrialId != null)
                {
                    hashCode = (hashCode * 59) + this.ClinicalTrialId.GetHashCode();
                }
                if (this.UniqueProtocolId != null)
                {
                    hashCode = (hashCode * 59) + this.UniqueProtocolId.GetHashCode();
                }
                if (this.OfficialTitle != null)
                {
                    hashCode = (hashCode * 59) + this.OfficialTitle.GetHashCode();
                }
                if (this.OverallStatus != null)
                {
                    hashCode = (hashCode * 59) + this.OverallStatus.GetHashCode();
                }
                if (this.PrimaryCompletion != null)
                {
                    hashCode = (hashCode * 59) + this.PrimaryCompletion.GetHashCode();
                }
                if (this.StudyCompletion != null)
                {
                    hashCode = (hashCode * 59) + this.StudyCompletion.GetHashCode();
                }
                if (this.FirstPosted != null)
                {
                    hashCode = (hashCode * 59) + this.FirstPosted.GetHashCode();
                }
                if (this.LastPosted != null)
                {
                    hashCode = (hashCode * 59) + this.LastPosted.GetHashCode();
                }
                if (this.Sponsor != null)
                {
                    hashCode = (hashCode * 59) + this.Sponsor.GetHashCode();
                }
                if (this.ResponsibleParty != null)
                {
                    hashCode = (hashCode * 59) + this.ResponsibleParty.GetHashCode();
                }
                if (this.DataMonitoring != null)
                {
                    hashCode = (hashCode * 59) + this.DataMonitoring.GetHashCode();
                }
                if (this.StudyType != null)
                {
                    hashCode = (hashCode * 59) + this.StudyType.GetHashCode();
                }
                if (this.PrimaryPurpose != null)
                {
                    hashCode = (hashCode * 59) + this.PrimaryPurpose.GetHashCode();
                }
                if (this.StudyPhase != null)
                {
                    hashCode = (hashCode * 59) + this.StudyPhase.GetHashCode();
                }
                if (this.InterventionalModel != null)
                {
                    hashCode = (hashCode * 59) + this.InterventionalModel.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.NumberOfArms.GetHashCode();
                if (this.Masking != null)
                {
                    hashCode = (hashCode * 59) + this.Masking.GetHashCode();
                }
                if (this.Allocation != null)
                {
                    hashCode = (hashCode * 59) + this.Allocation.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Enrollment.GetHashCode();
                if (this.MinimumAge != null)
                {
                    hashCode = (hashCode * 59) + this.MinimumAge.GetHashCode();
                }
                if (this.MaximumAge != null)
                {
                    hashCode = (hashCode * 59) + this.MaximumAge.GetHashCode();
                }
                if (this.Sex != null)
                {
                    hashCode = (hashCode * 59) + this.Sex.GetHashCode();
                }
                if (this.GenderBased != null)
                {
                    hashCode = (hashCode * 59) + this.GenderBased.GetHashCode();
                }
                if (this.AcceptsVolunteers != null)
                {
                    hashCode = (hashCode * 59) + this.AcceptsVolunteers.GetHashCode();
                }
                if (this.Date != null)
                {
                    hashCode = (hashCode * 59) + this.Date.GetHashCode();
                }
                if (this.RecordVerification != null)
                {
                    hashCode = (hashCode * 59) + this.RecordVerification.GetHashCode();
                }
                if (this.StudyStart != null)
                {
                    hashCode = (hashCode * 59) + this.StudyStart.GetHashCode();
                }
                if (this.FirstSubmitted != null)
                {
                    hashCode = (hashCode * 59) + this.FirstSubmitted.GetHashCode();
                }
                if (this.FirstSubmitMetQxCrite != null)
                {
                    hashCode = (hashCode * 59) + this.FirstSubmitMetQxCrite.GetHashCode();
                }
                if (this.LastSubmitMetQxCrite != null)
                {
                    hashCode = (hashCode * 59) + this.LastSubmitMetQxCrite.GetHashCode();
                }
                if (this.PrimaryCompDateType != null)
                {
                    hashCode = (hashCode * 59) + this.PrimaryCompDateType.GetHashCode();
                }
                if (this.StudyCompletionDateType != null)
                {
                    hashCode = (hashCode * 59) + this.StudyCompletionDateType.GetHashCode();
                }
                if (this.FirstPostedDateType != null)
                {
                    hashCode = (hashCode * 59) + this.FirstPostedDateType.GetHashCode();
                }
                if (this.LastPostedDateType != null)
                {
                    hashCode = (hashCode * 59) + this.LastPostedDateType.GetHashCode();
                }
                if (this.EnrollmentType != null)
                {
                    hashCode = (hashCode * 59) + this.EnrollmentType.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.BeamProbabilityOfTrialSuccess.GetHashCode();
                hashCode = (hashCode * 59) + this.BeamProbabilityOfLaunch.GetHashCode();
                if (this.Url != null)
                {
                    hashCode = (hashCode * 59) + this.Url.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
