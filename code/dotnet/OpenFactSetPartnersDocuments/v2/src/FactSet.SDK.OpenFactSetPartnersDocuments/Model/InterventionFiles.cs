/*
 * Open:FactSet - Partners
 *
 * This service provides the capability to search and download unstructured content provided by <a href=\"https://open.factset.com/catalog/en-us\">Open:FactSet Partners</a>.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: api@factset.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = FactSet.SDK.OpenFactSetPartnersDocuments.Client.OpenAPIDateConverter;

namespace FactSet.SDK.OpenFactSetPartnersDocuments.Model
{
    /// <summary>
    /// Returns Intervention Response
    /// </summary>
    [DataContract(Name = "InterventionFiles")]
    public partial class InterventionFiles : IEquatable<InterventionFiles>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="InterventionFiles" /> class.
        /// </summary>
        /// <param name="fileName">The filename of the trial data.</param>
        /// <param name="clinicalTrialId">Specifies Ozmosi unique ID for each historical version of a trial.</param>
        /// <param name="beamInterventionType">Identifies intervention type such as Drug, Biological, or Device.</param>
        /// <param name="beamInterventionName">Specifies the name of intervention applied.</param>
        /// <param name="beamInterventionDesc">Specifies the description of intervention applied.</param>
        /// <param name="beamOtherName">Other names listed for intervention.</param>
        /// <param name="beamArmGroupLabel">Name of the arm or group that this intervention is used in.</param>
        /// <param name="url">Download link for the clinical trials provided by the Ozmosi feed.</param>
        public InterventionFiles(string fileName = default(string), string clinicalTrialId = default(string), string beamInterventionType = default(string), string beamInterventionName = default(string), string beamInterventionDesc = default(string), string beamOtherName = default(string), string beamArmGroupLabel = default(string), string url = default(string))
        {
            this.FileName = fileName;
            this.ClinicalTrialId = clinicalTrialId;
            this.BeamInterventionType = beamInterventionType;
            this.BeamInterventionName = beamInterventionName;
            this.BeamInterventionDesc = beamInterventionDesc;
            this.BeamOtherName = beamOtherName;
            this.BeamArmGroupLabel = beamArmGroupLabel;
            this.Url = url;
        }

        /// <summary>
        /// The filename of the trial data
        /// </summary>
        /// <value>The filename of the trial data</value>
        [DataMember(Name = "fileName", EmitDefaultValue = false)]
        public string FileName { get; set; }

        /// <summary>
        /// Specifies Ozmosi unique ID for each historical version of a trial
        /// </summary>
        /// <value>Specifies Ozmosi unique ID for each historical version of a trial</value>
        [DataMember(Name = "clinicalTrialId", EmitDefaultValue = false)]
        public string ClinicalTrialId { get; set; }

        /// <summary>
        /// Identifies intervention type such as Drug, Biological, or Device
        /// </summary>
        /// <value>Identifies intervention type such as Drug, Biological, or Device</value>
        [DataMember(Name = "beamInterventionType", EmitDefaultValue = false)]
        public string BeamInterventionType { get; set; }

        /// <summary>
        /// Specifies the name of intervention applied
        /// </summary>
        /// <value>Specifies the name of intervention applied</value>
        [DataMember(Name = "beamInterventionName", EmitDefaultValue = false)]
        public string BeamInterventionName { get; set; }

        /// <summary>
        /// Specifies the description of intervention applied
        /// </summary>
        /// <value>Specifies the description of intervention applied</value>
        [DataMember(Name = "beamInterventionDesc", EmitDefaultValue = false)]
        public string BeamInterventionDesc { get; set; }

        /// <summary>
        /// Other names listed for intervention
        /// </summary>
        /// <value>Other names listed for intervention</value>
        [DataMember(Name = "beamOtherName", EmitDefaultValue = false)]
        public string BeamOtherName { get; set; }

        /// <summary>
        /// Name of the arm or group that this intervention is used in
        /// </summary>
        /// <value>Name of the arm or group that this intervention is used in</value>
        [DataMember(Name = "beamArmGroupLabel", EmitDefaultValue = false)]
        public string BeamArmGroupLabel { get; set; }

        /// <summary>
        /// Download link for the clinical trials provided by the Ozmosi feed
        /// </summary>
        /// <value>Download link for the clinical trials provided by the Ozmosi feed</value>
        [DataMember(Name = "url", EmitDefaultValue = false)]
        public string Url { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class InterventionFiles {\n");
            sb.Append("  FileName: ").Append(FileName).Append("\n");
            sb.Append("  ClinicalTrialId: ").Append(ClinicalTrialId).Append("\n");
            sb.Append("  BeamInterventionType: ").Append(BeamInterventionType).Append("\n");
            sb.Append("  BeamInterventionName: ").Append(BeamInterventionName).Append("\n");
            sb.Append("  BeamInterventionDesc: ").Append(BeamInterventionDesc).Append("\n");
            sb.Append("  BeamOtherName: ").Append(BeamOtherName).Append("\n");
            sb.Append("  BeamArmGroupLabel: ").Append(BeamArmGroupLabel).Append("\n");
            sb.Append("  Url: ").Append(Url).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as InterventionFiles);
        }

        /// <summary>
        /// Returns true if InterventionFiles instances are equal
        /// </summary>
        /// <param name="input">Instance of InterventionFiles to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(InterventionFiles input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.FileName == input.FileName ||
                    (this.FileName != null &&
                    this.FileName.Equals(input.FileName))
                ) && 
                (
                    this.ClinicalTrialId == input.ClinicalTrialId ||
                    (this.ClinicalTrialId != null &&
                    this.ClinicalTrialId.Equals(input.ClinicalTrialId))
                ) && 
                (
                    this.BeamInterventionType == input.BeamInterventionType ||
                    (this.BeamInterventionType != null &&
                    this.BeamInterventionType.Equals(input.BeamInterventionType))
                ) && 
                (
                    this.BeamInterventionName == input.BeamInterventionName ||
                    (this.BeamInterventionName != null &&
                    this.BeamInterventionName.Equals(input.BeamInterventionName))
                ) && 
                (
                    this.BeamInterventionDesc == input.BeamInterventionDesc ||
                    (this.BeamInterventionDesc != null &&
                    this.BeamInterventionDesc.Equals(input.BeamInterventionDesc))
                ) && 
                (
                    this.BeamOtherName == input.BeamOtherName ||
                    (this.BeamOtherName != null &&
                    this.BeamOtherName.Equals(input.BeamOtherName))
                ) && 
                (
                    this.BeamArmGroupLabel == input.BeamArmGroupLabel ||
                    (this.BeamArmGroupLabel != null &&
                    this.BeamArmGroupLabel.Equals(input.BeamArmGroupLabel))
                ) && 
                (
                    this.Url == input.Url ||
                    (this.Url != null &&
                    this.Url.Equals(input.Url))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.FileName != null)
                {
                    hashCode = (hashCode * 59) + this.FileName.GetHashCode();
                }
                if (this.ClinicalTrialId != null)
                {
                    hashCode = (hashCode * 59) + this.ClinicalTrialId.GetHashCode();
                }
                if (this.BeamInterventionType != null)
                {
                    hashCode = (hashCode * 59) + this.BeamInterventionType.GetHashCode();
                }
                if (this.BeamInterventionName != null)
                {
                    hashCode = (hashCode * 59) + this.BeamInterventionName.GetHashCode();
                }
                if (this.BeamInterventionDesc != null)
                {
                    hashCode = (hashCode * 59) + this.BeamInterventionDesc.GetHashCode();
                }
                if (this.BeamOtherName != null)
                {
                    hashCode = (hashCode * 59) + this.BeamOtherName.GetHashCode();
                }
                if (this.BeamArmGroupLabel != null)
                {
                    hashCode = (hashCode * 59) + this.BeamArmGroupLabel.GetHashCode();
                }
                if (this.Url != null)
                {
                    hashCode = (hashCode * 59) + this.Url.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
