/*
 * Open:FactSet - Partners
 *
 * This service provides the capability to search and download unstructured content provided by <a href=\"https://open.factset.com/catalog/en-us\">Open:FactSet Partners</a>.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: api@factset.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = FactSet.SDK.OpenFactSetPartnersDocuments.Client.OpenAPIDateConverter;

namespace FactSet.SDK.OpenFactSetPartnersDocuments.Model
{
    /// <summary>
    /// Returns Transcripts Response
    /// </summary>
    [DataContract(Name = "transcripts")]
    public partial class Transcripts : IEquatable<Transcripts>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Transcripts" /> class.
        /// </summary>
        /// <param name="type">Specifies the type of the record..</param>
        /// <param name="languageType"> Defines the language type(either local or english)of the XML file..</param>
        /// <param name="date">Specifies the date of the XML file..</param>
        /// <param name="fileName">Defines the name of the record..</param>
        /// <param name="trackingId">Defines an identifier assigned to an event..</param>
        /// <param name="eventType"> Defines Code of the event type..</param>
        /// <param name="companyName">Specifies the name of the company of the event..</param>
        /// <param name="language">Defines the language of the XML file..</param>
        /// <param name="saId">Specifies the name of the company of the event..</param>
        /// <param name="url">Download link for the Scripts Asia API provided by the Scripts Asia..</param>
        public Transcripts(string type = default(string), string languageType = default(string), DateTime date = default(DateTime), string fileName = default(string), string trackingId = default(string), string eventType = default(string), string companyName = default(string), string language = default(string), string saId = default(string), string url = default(string))
        {
            this.Type = type;
            this.LanguageType = languageType;
            this.Date = date;
            this.FileName = fileName;
            this.TrackingId = trackingId;
            this.EventType = eventType;
            this.CompanyName = companyName;
            this.Language = language;
            this.SaId = saId;
            this.Url = url;
        }

        /// <summary>
        /// Specifies the type of the record.
        /// </summary>
        /// <value>Specifies the type of the record.</value>
        [DataMember(Name = "type", EmitDefaultValue = false)]
        public string Type { get; set; }

        /// <summary>
        ///  Defines the language type(either local or english)of the XML file.
        /// </summary>
        /// <value> Defines the language type(either local or english)of the XML file.</value>
        [DataMember(Name = "languageType", EmitDefaultValue = false)]
        public string LanguageType { get; set; }

        /// <summary>
        /// Specifies the date of the XML file.
        /// </summary>
        /// <value>Specifies the date of the XML file.</value>
        [DataMember(Name = "date", EmitDefaultValue = false)]
        [JsonConverter(typeof(OpenAPIDateConverter))]
        public DateTime Date { get; set; }

        /// <summary>
        /// Defines the name of the record.
        /// </summary>
        /// <value>Defines the name of the record.</value>
        [DataMember(Name = "fileName", EmitDefaultValue = false)]
        public string FileName { get; set; }

        /// <summary>
        /// Defines an identifier assigned to an event.
        /// </summary>
        /// <value>Defines an identifier assigned to an event.</value>
        [DataMember(Name = "trackingId", EmitDefaultValue = false)]
        public string TrackingId { get; set; }

        /// <summary>
        ///  Defines Code of the event type.
        /// </summary>
        /// <value> Defines Code of the event type.</value>
        [DataMember(Name = "eventType", EmitDefaultValue = false)]
        public string EventType { get; set; }

        /// <summary>
        /// Specifies the name of the company of the event.
        /// </summary>
        /// <value>Specifies the name of the company of the event.</value>
        [DataMember(Name = "companyName", EmitDefaultValue = false)]
        public string CompanyName { get; set; }

        /// <summary>
        /// Defines the language of the XML file.
        /// </summary>
        /// <value>Defines the language of the XML file.</value>
        [DataMember(Name = "language", EmitDefaultValue = false)]
        public string Language { get; set; }

        /// <summary>
        /// Specifies the name of the company of the event.
        /// </summary>
        /// <value>Specifies the name of the company of the event.</value>
        [DataMember(Name = "saId", EmitDefaultValue = false)]
        public string SaId { get; set; }

        /// <summary>
        /// Download link for the Scripts Asia API provided by the Scripts Asia.
        /// </summary>
        /// <value>Download link for the Scripts Asia API provided by the Scripts Asia.</value>
        [DataMember(Name = "url", EmitDefaultValue = false)]
        public string Url { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Transcripts {\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  LanguageType: ").Append(LanguageType).Append("\n");
            sb.Append("  Date: ").Append(Date).Append("\n");
            sb.Append("  FileName: ").Append(FileName).Append("\n");
            sb.Append("  TrackingId: ").Append(TrackingId).Append("\n");
            sb.Append("  EventType: ").Append(EventType).Append("\n");
            sb.Append("  CompanyName: ").Append(CompanyName).Append("\n");
            sb.Append("  Language: ").Append(Language).Append("\n");
            sb.Append("  SaId: ").Append(SaId).Append("\n");
            sb.Append("  Url: ").Append(Url).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Transcripts);
        }

        /// <summary>
        /// Returns true if Transcripts instances are equal
        /// </summary>
        /// <param name="input">Instance of Transcripts to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Transcripts input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.LanguageType == input.LanguageType ||
                    (this.LanguageType != null &&
                    this.LanguageType.Equals(input.LanguageType))
                ) && 
                (
                    this.Date == input.Date ||
                    (this.Date != null &&
                    this.Date.Equals(input.Date))
                ) && 
                (
                    this.FileName == input.FileName ||
                    (this.FileName != null &&
                    this.FileName.Equals(input.FileName))
                ) && 
                (
                    this.TrackingId == input.TrackingId ||
                    (this.TrackingId != null &&
                    this.TrackingId.Equals(input.TrackingId))
                ) && 
                (
                    this.EventType == input.EventType ||
                    (this.EventType != null &&
                    this.EventType.Equals(input.EventType))
                ) && 
                (
                    this.CompanyName == input.CompanyName ||
                    (this.CompanyName != null &&
                    this.CompanyName.Equals(input.CompanyName))
                ) && 
                (
                    this.Language == input.Language ||
                    (this.Language != null &&
                    this.Language.Equals(input.Language))
                ) && 
                (
                    this.SaId == input.SaId ||
                    (this.SaId != null &&
                    this.SaId.Equals(input.SaId))
                ) && 
                (
                    this.Url == input.Url ||
                    (this.Url != null &&
                    this.Url.Equals(input.Url))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Type != null)
                {
                    hashCode = (hashCode * 59) + this.Type.GetHashCode();
                }
                if (this.LanguageType != null)
                {
                    hashCode = (hashCode * 59) + this.LanguageType.GetHashCode();
                }
                if (this.Date != null)
                {
                    hashCode = (hashCode * 59) + this.Date.GetHashCode();
                }
                if (this.FileName != null)
                {
                    hashCode = (hashCode * 59) + this.FileName.GetHashCode();
                }
                if (this.TrackingId != null)
                {
                    hashCode = (hashCode * 59) + this.TrackingId.GetHashCode();
                }
                if (this.EventType != null)
                {
                    hashCode = (hashCode * 59) + this.EventType.GetHashCode();
                }
                if (this.CompanyName != null)
                {
                    hashCode = (hashCode * 59) + this.CompanyName.GetHashCode();
                }
                if (this.Language != null)
                {
                    hashCode = (hashCode * 59) + this.Language.GetHashCode();
                }
                if (this.SaId != null)
                {
                    hashCode = (hashCode * 59) + this.SaId.GetHashCode();
                }
                if (this.Url != null)
                {
                    hashCode = (hashCode * 59) + this.Url.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
