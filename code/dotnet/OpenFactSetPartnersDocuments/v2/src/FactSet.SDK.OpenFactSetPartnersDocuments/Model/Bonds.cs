/*
 * Open:FactSet - Partners
 *
 * This service provides the capability to search and download unstructured content provided by <a href=\"https://open.factset.com/catalog/en-us\">Open:FactSet Partners</a>.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: api@factset.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = FactSet.SDK.OpenFactSetPartnersDocuments.Client.OpenAPIDateConverter;

namespace FactSet.SDK.OpenFactSetPartnersDocuments.Model
{
    /// <summary>
    /// Returns Bonds Response
    /// </summary>
    [DataContract(Name = "bonds")]
    public partial class Bonds : IEquatable<Bonds>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Bonds" /> class.
        /// </summary>
        /// <param name="isin">12-digit alphanumeric code that uniquely identifies a specific security..</param>
        /// <param name="fileName">The filename of the bonds data..</param>
        /// <param name="preissuancePubDate">Specifies the Pre-issuance date of the record. .</param>
        /// <param name="preissuanceExistence">Specifies the Pre-issuance existence of the record. The Issuer has developed a Framework for its upcoming Green and/or Social and/or Sustainability bond issuances. File is publically available on the Issuer&#39;s website. .</param>
        /// <param name="postissuancePubDate">Specifies the Post-issuance date of the record. .</param>
        /// <param name="postissuanceExistence">Specifies the Post-issuance existence of the record.The Issuer has published a file presenting some information on the utilisation of the proceeds of the bond. File is publicly available. .</param>
        /// <param name="url">Download link for the bonds data provided by the Luxembourg feed. This download link will expire after 30 mins..</param>
        public Bonds(string isin = default(string), string fileName = default(string), DateTime preissuancePubDate = default(DateTime), string preissuanceExistence = default(string), DateTime postissuancePubDate = default(DateTime), string postissuanceExistence = default(string), string url = default(string))
        {
            this.Isin = isin;
            this.FileName = fileName;
            this.PreissuancePubDate = preissuancePubDate;
            this.PreissuanceExistence = preissuanceExistence;
            this.PostissuancePubDate = postissuancePubDate;
            this.PostissuanceExistence = postissuanceExistence;
            this.Url = url;
        }

        /// <summary>
        /// 12-digit alphanumeric code that uniquely identifies a specific security.
        /// </summary>
        /// <value>12-digit alphanumeric code that uniquely identifies a specific security.</value>
        [DataMember(Name = "isin", EmitDefaultValue = false)]
        public string Isin { get; set; }

        /// <summary>
        /// The filename of the bonds data.
        /// </summary>
        /// <value>The filename of the bonds data.</value>
        [DataMember(Name = "fileName", EmitDefaultValue = false)]
        public string FileName { get; set; }

        /// <summary>
        /// Specifies the Pre-issuance date of the record. 
        /// </summary>
        /// <value>Specifies the Pre-issuance date of the record. </value>
        [DataMember(Name = "preissuancePubDate", EmitDefaultValue = false)]
        [JsonConverter(typeof(OpenAPIDateConverter))]
        public DateTime PreissuancePubDate { get; set; }

        /// <summary>
        /// Specifies the Pre-issuance existence of the record. The Issuer has developed a Framework for its upcoming Green and/or Social and/or Sustainability bond issuances. File is publically available on the Issuer&#39;s website. 
        /// </summary>
        /// <value>Specifies the Pre-issuance existence of the record. The Issuer has developed a Framework for its upcoming Green and/or Social and/or Sustainability bond issuances. File is publically available on the Issuer&#39;s website. </value>
        [DataMember(Name = "preissuanceExistence", EmitDefaultValue = false)]
        public string PreissuanceExistence { get; set; }

        /// <summary>
        /// Specifies the Post-issuance date of the record. 
        /// </summary>
        /// <value>Specifies the Post-issuance date of the record. </value>
        [DataMember(Name = "postissuancePubDate", EmitDefaultValue = false)]
        [JsonConverter(typeof(OpenAPIDateConverter))]
        public DateTime PostissuancePubDate { get; set; }

        /// <summary>
        /// Specifies the Post-issuance existence of the record.The Issuer has published a file presenting some information on the utilisation of the proceeds of the bond. File is publicly available. 
        /// </summary>
        /// <value>Specifies the Post-issuance existence of the record.The Issuer has published a file presenting some information on the utilisation of the proceeds of the bond. File is publicly available. </value>
        [DataMember(Name = "postissuanceExistence", EmitDefaultValue = false)]
        public string PostissuanceExistence { get; set; }

        /// <summary>
        /// Download link for the bonds data provided by the Luxembourg feed. This download link will expire after 30 mins.
        /// </summary>
        /// <value>Download link for the bonds data provided by the Luxembourg feed. This download link will expire after 30 mins.</value>
        [DataMember(Name = "url", EmitDefaultValue = false)]
        public string Url { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Bonds {\n");
            sb.Append("  Isin: ").Append(Isin).Append("\n");
            sb.Append("  FileName: ").Append(FileName).Append("\n");
            sb.Append("  PreissuancePubDate: ").Append(PreissuancePubDate).Append("\n");
            sb.Append("  PreissuanceExistence: ").Append(PreissuanceExistence).Append("\n");
            sb.Append("  PostissuancePubDate: ").Append(PostissuancePubDate).Append("\n");
            sb.Append("  PostissuanceExistence: ").Append(PostissuanceExistence).Append("\n");
            sb.Append("  Url: ").Append(Url).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Bonds);
        }

        /// <summary>
        /// Returns true if Bonds instances are equal
        /// </summary>
        /// <param name="input">Instance of Bonds to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Bonds input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Isin == input.Isin ||
                    (this.Isin != null &&
                    this.Isin.Equals(input.Isin))
                ) && 
                (
                    this.FileName == input.FileName ||
                    (this.FileName != null &&
                    this.FileName.Equals(input.FileName))
                ) && 
                (
                    this.PreissuancePubDate == input.PreissuancePubDate ||
                    (this.PreissuancePubDate != null &&
                    this.PreissuancePubDate.Equals(input.PreissuancePubDate))
                ) && 
                (
                    this.PreissuanceExistence == input.PreissuanceExistence ||
                    (this.PreissuanceExistence != null &&
                    this.PreissuanceExistence.Equals(input.PreissuanceExistence))
                ) && 
                (
                    this.PostissuancePubDate == input.PostissuancePubDate ||
                    (this.PostissuancePubDate != null &&
                    this.PostissuancePubDate.Equals(input.PostissuancePubDate))
                ) && 
                (
                    this.PostissuanceExistence == input.PostissuanceExistence ||
                    (this.PostissuanceExistence != null &&
                    this.PostissuanceExistence.Equals(input.PostissuanceExistence))
                ) && 
                (
                    this.Url == input.Url ||
                    (this.Url != null &&
                    this.Url.Equals(input.Url))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Isin != null)
                {
                    hashCode = (hashCode * 59) + this.Isin.GetHashCode();
                }
                if (this.FileName != null)
                {
                    hashCode = (hashCode * 59) + this.FileName.GetHashCode();
                }
                if (this.PreissuancePubDate != null)
                {
                    hashCode = (hashCode * 59) + this.PreissuancePubDate.GetHashCode();
                }
                if (this.PreissuanceExistence != null)
                {
                    hashCode = (hashCode * 59) + this.PreissuanceExistence.GetHashCode();
                }
                if (this.PostissuancePubDate != null)
                {
                    hashCode = (hashCode * 59) + this.PostissuancePubDate.GetHashCode();
                }
                if (this.PostissuanceExistence != null)
                {
                    hashCode = (hashCode * 59) + this.PostissuanceExistence.GetHashCode();
                }
                if (this.Url != null)
                {
                    hashCode = (hashCode * 59) + this.Url.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
