/*
 * Open:FactSet - Partners
 *
 * This service provides the capability to search and download unstructured content provided by <a href=\"https://open.factset.com/catalog/en-us\">Open:FactSet Partners</a>.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: api@factset.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = FactSet.SDK.OpenFactSetPartnersDocuments.Client.OpenAPIDateConverter;

namespace FactSet.SDK.OpenFactSetPartnersDocuments.Model
{
    /// <summary>
    /// Returns Orbit Response.
    /// </summary>
    [DataContract(Name = "OrbitFiles")]
    public partial class OrbitFiles : IEquatable<OrbitFiles>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="OrbitFiles" /> class.
        /// </summary>
        /// <param name="stockCode">The company/ticker which is associated with the transcript. Please submit a question via Issue Tracker under the Open:FactSet - Partner Communication to get the required list of tickers. .</param>
        /// <param name="eventStartDateTime">The timestamp when latest version of the call was published at the source..</param>
        /// <param name="eventEndDateTime">The timestamp when the file is last updated..</param>
        /// <param name="typesOfInvestorRelationsActivities">Specifies the type of the call..</param>
        /// <param name="transcriptUniqueId">Unique identifier for the transcript.</param>
        /// <param name="uploadTime">The timestamp when the transcript was last uploaded..</param>
        /// <param name="title">The headline of the transcript..</param>
        /// <param name="exchangeCode">Exchange Code.</param>
        /// <param name="versionId">Helpful to distinguish corrected reports..</param>
        /// <param name="fileName">The filename of the transcript..</param>
        /// <param name="fileTimestamp">The time when file is available for ingestion at the source..</param>
        /// <param name="updateTimestamp">The time when file is processed..</param>
        /// <param name="fileSize">Defines the size of the file..</param>
        /// <param name="url">Download link for the transcripts provided by the Orbit feed..</param>
        public OrbitFiles(string stockCode = default(string), DateTime eventStartDateTime = default(DateTime), DateTime eventEndDateTime = default(DateTime), string typesOfInvestorRelationsActivities = default(string), string transcriptUniqueId = default(string), DateTime uploadTime = default(DateTime), string title = default(string), string exchangeCode = default(string), int versionId = default(int), string fileName = default(string), DateTime fileTimestamp = default(DateTime), DateTime updateTimestamp = default(DateTime), int fileSize = default(int), string url = default(string))
        {
            this.StockCode = stockCode;
            this.EventStartDateTime = eventStartDateTime;
            this.EventEndDateTime = eventEndDateTime;
            this.TypesOfInvestorRelationsActivities = typesOfInvestorRelationsActivities;
            this.TranscriptUniqueId = transcriptUniqueId;
            this.UploadTime = uploadTime;
            this.Title = title;
            this.ExchangeCode = exchangeCode;
            this.VersionId = versionId;
            this.FileName = fileName;
            this.FileTimestamp = fileTimestamp;
            this.UpdateTimestamp = updateTimestamp;
            this.FileSize = fileSize;
            this.Url = url;
        }

        /// <summary>
        /// The company/ticker which is associated with the transcript. Please submit a question via Issue Tracker under the Open:FactSet - Partner Communication to get the required list of tickers. 
        /// </summary>
        /// <value>The company/ticker which is associated with the transcript. Please submit a question via Issue Tracker under the Open:FactSet - Partner Communication to get the required list of tickers. </value>
        [DataMember(Name = "stockCode", EmitDefaultValue = false)]
        public string StockCode { get; set; }

        /// <summary>
        /// The timestamp when latest version of the call was published at the source.
        /// </summary>
        /// <value>The timestamp when latest version of the call was published at the source.</value>
        [DataMember(Name = "eventStartDateTime", EmitDefaultValue = false)]
        public DateTime EventStartDateTime { get; set; }

        /// <summary>
        /// The timestamp when the file is last updated.
        /// </summary>
        /// <value>The timestamp when the file is last updated.</value>
        [DataMember(Name = "eventEndDateTime", EmitDefaultValue = false)]
        public DateTime EventEndDateTime { get; set; }

        /// <summary>
        /// Specifies the type of the call.
        /// </summary>
        /// <value>Specifies the type of the call.</value>
        [DataMember(Name = "typesOfInvestorRelationsActivities", EmitDefaultValue = false)]
        public string TypesOfInvestorRelationsActivities { get; set; }

        /// <summary>
        /// Unique identifier for the transcript
        /// </summary>
        /// <value>Unique identifier for the transcript</value>
        [DataMember(Name = "transcriptUniqueId", EmitDefaultValue = false)]
        public string TranscriptUniqueId { get; set; }

        /// <summary>
        /// The timestamp when the transcript was last uploaded.
        /// </summary>
        /// <value>The timestamp when the transcript was last uploaded.</value>
        [DataMember(Name = "uploadTime", EmitDefaultValue = false)]
        public DateTime UploadTime { get; set; }

        /// <summary>
        /// The headline of the transcript.
        /// </summary>
        /// <value>The headline of the transcript.</value>
        [DataMember(Name = "title", EmitDefaultValue = false)]
        public string Title { get; set; }

        /// <summary>
        /// Exchange Code
        /// </summary>
        /// <value>Exchange Code</value>
        [DataMember(Name = "exchangeCode", EmitDefaultValue = false)]
        public string ExchangeCode { get; set; }

        /// <summary>
        /// Helpful to distinguish corrected reports.
        /// </summary>
        /// <value>Helpful to distinguish corrected reports.</value>
        [DataMember(Name = "versionId", EmitDefaultValue = false)]
        public int VersionId { get; set; }

        /// <summary>
        /// The filename of the transcript.
        /// </summary>
        /// <value>The filename of the transcript.</value>
        [DataMember(Name = "fileName", EmitDefaultValue = false)]
        public string FileName { get; set; }

        /// <summary>
        /// The time when file is available for ingestion at the source.
        /// </summary>
        /// <value>The time when file is available for ingestion at the source.</value>
        [DataMember(Name = "fileTimestamp", EmitDefaultValue = false)]
        public DateTime FileTimestamp { get; set; }

        /// <summary>
        /// The time when file is processed.
        /// </summary>
        /// <value>The time when file is processed.</value>
        [DataMember(Name = "updateTimestamp", EmitDefaultValue = false)]
        public DateTime UpdateTimestamp { get; set; }

        /// <summary>
        /// Defines the size of the file.
        /// </summary>
        /// <value>Defines the size of the file.</value>
        [DataMember(Name = "fileSize", EmitDefaultValue = false)]
        public int FileSize { get; set; }

        /// <summary>
        /// Download link for the transcripts provided by the Orbit feed.
        /// </summary>
        /// <value>Download link for the transcripts provided by the Orbit feed.</value>
        [DataMember(Name = "url", EmitDefaultValue = false)]
        public string Url { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class OrbitFiles {\n");
            sb.Append("  StockCode: ").Append(StockCode).Append("\n");
            sb.Append("  EventStartDateTime: ").Append(EventStartDateTime).Append("\n");
            sb.Append("  EventEndDateTime: ").Append(EventEndDateTime).Append("\n");
            sb.Append("  TypesOfInvestorRelationsActivities: ").Append(TypesOfInvestorRelationsActivities).Append("\n");
            sb.Append("  TranscriptUniqueId: ").Append(TranscriptUniqueId).Append("\n");
            sb.Append("  UploadTime: ").Append(UploadTime).Append("\n");
            sb.Append("  Title: ").Append(Title).Append("\n");
            sb.Append("  ExchangeCode: ").Append(ExchangeCode).Append("\n");
            sb.Append("  VersionId: ").Append(VersionId).Append("\n");
            sb.Append("  FileName: ").Append(FileName).Append("\n");
            sb.Append("  FileTimestamp: ").Append(FileTimestamp).Append("\n");
            sb.Append("  UpdateTimestamp: ").Append(UpdateTimestamp).Append("\n");
            sb.Append("  FileSize: ").Append(FileSize).Append("\n");
            sb.Append("  Url: ").Append(Url).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as OrbitFiles);
        }

        /// <summary>
        /// Returns true if OrbitFiles instances are equal
        /// </summary>
        /// <param name="input">Instance of OrbitFiles to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(OrbitFiles input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.StockCode == input.StockCode ||
                    (this.StockCode != null &&
                    this.StockCode.Equals(input.StockCode))
                ) && 
                (
                    this.EventStartDateTime == input.EventStartDateTime ||
                    (this.EventStartDateTime != null &&
                    this.EventStartDateTime.Equals(input.EventStartDateTime))
                ) && 
                (
                    this.EventEndDateTime == input.EventEndDateTime ||
                    (this.EventEndDateTime != null &&
                    this.EventEndDateTime.Equals(input.EventEndDateTime))
                ) && 
                (
                    this.TypesOfInvestorRelationsActivities == input.TypesOfInvestorRelationsActivities ||
                    (this.TypesOfInvestorRelationsActivities != null &&
                    this.TypesOfInvestorRelationsActivities.Equals(input.TypesOfInvestorRelationsActivities))
                ) && 
                (
                    this.TranscriptUniqueId == input.TranscriptUniqueId ||
                    (this.TranscriptUniqueId != null &&
                    this.TranscriptUniqueId.Equals(input.TranscriptUniqueId))
                ) && 
                (
                    this.UploadTime == input.UploadTime ||
                    (this.UploadTime != null &&
                    this.UploadTime.Equals(input.UploadTime))
                ) && 
                (
                    this.Title == input.Title ||
                    (this.Title != null &&
                    this.Title.Equals(input.Title))
                ) && 
                (
                    this.ExchangeCode == input.ExchangeCode ||
                    (this.ExchangeCode != null &&
                    this.ExchangeCode.Equals(input.ExchangeCode))
                ) && 
                (
                    this.VersionId == input.VersionId ||
                    this.VersionId.Equals(input.VersionId)
                ) && 
                (
                    this.FileName == input.FileName ||
                    (this.FileName != null &&
                    this.FileName.Equals(input.FileName))
                ) && 
                (
                    this.FileTimestamp == input.FileTimestamp ||
                    (this.FileTimestamp != null &&
                    this.FileTimestamp.Equals(input.FileTimestamp))
                ) && 
                (
                    this.UpdateTimestamp == input.UpdateTimestamp ||
                    (this.UpdateTimestamp != null &&
                    this.UpdateTimestamp.Equals(input.UpdateTimestamp))
                ) && 
                (
                    this.FileSize == input.FileSize ||
                    this.FileSize.Equals(input.FileSize)
                ) && 
                (
                    this.Url == input.Url ||
                    (this.Url != null &&
                    this.Url.Equals(input.Url))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.StockCode != null)
                {
                    hashCode = (hashCode * 59) + this.StockCode.GetHashCode();
                }
                if (this.EventStartDateTime != null)
                {
                    hashCode = (hashCode * 59) + this.EventStartDateTime.GetHashCode();
                }
                if (this.EventEndDateTime != null)
                {
                    hashCode = (hashCode * 59) + this.EventEndDateTime.GetHashCode();
                }
                if (this.TypesOfInvestorRelationsActivities != null)
                {
                    hashCode = (hashCode * 59) + this.TypesOfInvestorRelationsActivities.GetHashCode();
                }
                if (this.TranscriptUniqueId != null)
                {
                    hashCode = (hashCode * 59) + this.TranscriptUniqueId.GetHashCode();
                }
                if (this.UploadTime != null)
                {
                    hashCode = (hashCode * 59) + this.UploadTime.GetHashCode();
                }
                if (this.Title != null)
                {
                    hashCode = (hashCode * 59) + this.Title.GetHashCode();
                }
                if (this.ExchangeCode != null)
                {
                    hashCode = (hashCode * 59) + this.ExchangeCode.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.VersionId.GetHashCode();
                if (this.FileName != null)
                {
                    hashCode = (hashCode * 59) + this.FileName.GetHashCode();
                }
                if (this.FileTimestamp != null)
                {
                    hashCode = (hashCode * 59) + this.FileTimestamp.GetHashCode();
                }
                if (this.UpdateTimestamp != null)
                {
                    hashCode = (hashCode * 59) + this.UpdateTimestamp.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.FileSize.GetHashCode();
                if (this.Url != null)
                {
                    hashCode = (hashCode * 59) + this.Url.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
