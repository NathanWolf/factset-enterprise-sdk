/*
 * Open:FactSet - Partners
 *
 * This service provides the capability to search and download unstructured content provided by <a href=\"https://open.factset.com/catalog/en-us\">Open:FactSet Partners</a>.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: api@factset.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = FactSet.SDK.OpenFactSetPartnersDocuments.Client.OpenAPIDateConverter;

namespace FactSet.SDK.OpenFactSetPartnersDocuments.Model
{
    /// <summary>
    /// Returns Biomarkers Response
    /// </summary>
    [DataContract(Name = "BiomarkersFiles")]
    public partial class BiomarkersFiles : IEquatable<BiomarkersFiles>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="BiomarkersFiles" /> class.
        /// </summary>
        /// <param name="organ">Related organ where applicable..</param>
        /// <param name="fileName">The filename of the trial data..</param>
        /// <param name="clinicalTrialId">Specifies Ozmosi unique ID for each historical version of a trial..</param>
        /// <param name="biomarkerName">Abbreviated name of any patient biomarkers being targeted for research in the trial..</param>
        /// <param name="biomarkerFullName">Full name of the biomarker..</param>
        /// <param name="biomarkerType">Defines the Biomarker type..</param>
        /// <param name="url">Download link for the clinical trials provided by the Ozmosi feed..</param>
        public BiomarkersFiles(string organ = default(string), string fileName = default(string), string clinicalTrialId = default(string), string biomarkerName = default(string), string biomarkerFullName = default(string), string biomarkerType = default(string), string url = default(string))
        {
            this.Organ = organ;
            this.FileName = fileName;
            this.ClinicalTrialId = clinicalTrialId;
            this.BiomarkerName = biomarkerName;
            this.BiomarkerFullName = biomarkerFullName;
            this.BiomarkerType = biomarkerType;
            this.Url = url;
        }

        /// <summary>
        /// Related organ where applicable.
        /// </summary>
        /// <value>Related organ where applicable.</value>
        [DataMember(Name = "organ", EmitDefaultValue = false)]
        public string Organ { get; set; }

        /// <summary>
        /// The filename of the trial data.
        /// </summary>
        /// <value>The filename of the trial data.</value>
        [DataMember(Name = "fileName", EmitDefaultValue = false)]
        public string FileName { get; set; }

        /// <summary>
        /// Specifies Ozmosi unique ID for each historical version of a trial.
        /// </summary>
        /// <value>Specifies Ozmosi unique ID for each historical version of a trial.</value>
        [DataMember(Name = "clinicalTrialId", EmitDefaultValue = false)]
        public string ClinicalTrialId { get; set; }

        /// <summary>
        /// Abbreviated name of any patient biomarkers being targeted for research in the trial.
        /// </summary>
        /// <value>Abbreviated name of any patient biomarkers being targeted for research in the trial.</value>
        [DataMember(Name = "biomarkerName", EmitDefaultValue = false)]
        public string BiomarkerName { get; set; }

        /// <summary>
        /// Full name of the biomarker.
        /// </summary>
        /// <value>Full name of the biomarker.</value>
        [DataMember(Name = "biomarkerFullName", EmitDefaultValue = false)]
        public string BiomarkerFullName { get; set; }

        /// <summary>
        /// Defines the Biomarker type.
        /// </summary>
        /// <value>Defines the Biomarker type.</value>
        [DataMember(Name = "biomarkerType", EmitDefaultValue = false)]
        public string BiomarkerType { get; set; }

        /// <summary>
        /// Download link for the clinical trials provided by the Ozmosi feed.
        /// </summary>
        /// <value>Download link for the clinical trials provided by the Ozmosi feed.</value>
        [DataMember(Name = "url", EmitDefaultValue = false)]
        public string Url { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class BiomarkersFiles {\n");
            sb.Append("  Organ: ").Append(Organ).Append("\n");
            sb.Append("  FileName: ").Append(FileName).Append("\n");
            sb.Append("  ClinicalTrialId: ").Append(ClinicalTrialId).Append("\n");
            sb.Append("  BiomarkerName: ").Append(BiomarkerName).Append("\n");
            sb.Append("  BiomarkerFullName: ").Append(BiomarkerFullName).Append("\n");
            sb.Append("  BiomarkerType: ").Append(BiomarkerType).Append("\n");
            sb.Append("  Url: ").Append(Url).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as BiomarkersFiles);
        }

        /// <summary>
        /// Returns true if BiomarkersFiles instances are equal
        /// </summary>
        /// <param name="input">Instance of BiomarkersFiles to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(BiomarkersFiles input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Organ == input.Organ ||
                    (this.Organ != null &&
                    this.Organ.Equals(input.Organ))
                ) && 
                (
                    this.FileName == input.FileName ||
                    (this.FileName != null &&
                    this.FileName.Equals(input.FileName))
                ) && 
                (
                    this.ClinicalTrialId == input.ClinicalTrialId ||
                    (this.ClinicalTrialId != null &&
                    this.ClinicalTrialId.Equals(input.ClinicalTrialId))
                ) && 
                (
                    this.BiomarkerName == input.BiomarkerName ||
                    (this.BiomarkerName != null &&
                    this.BiomarkerName.Equals(input.BiomarkerName))
                ) && 
                (
                    this.BiomarkerFullName == input.BiomarkerFullName ||
                    (this.BiomarkerFullName != null &&
                    this.BiomarkerFullName.Equals(input.BiomarkerFullName))
                ) && 
                (
                    this.BiomarkerType == input.BiomarkerType ||
                    (this.BiomarkerType != null &&
                    this.BiomarkerType.Equals(input.BiomarkerType))
                ) && 
                (
                    this.Url == input.Url ||
                    (this.Url != null &&
                    this.Url.Equals(input.Url))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Organ != null)
                {
                    hashCode = (hashCode * 59) + this.Organ.GetHashCode();
                }
                if (this.FileName != null)
                {
                    hashCode = (hashCode * 59) + this.FileName.GetHashCode();
                }
                if (this.ClinicalTrialId != null)
                {
                    hashCode = (hashCode * 59) + this.ClinicalTrialId.GetHashCode();
                }
                if (this.BiomarkerName != null)
                {
                    hashCode = (hashCode * 59) + this.BiomarkerName.GetHashCode();
                }
                if (this.BiomarkerFullName != null)
                {
                    hashCode = (hashCode * 59) + this.BiomarkerFullName.GetHashCode();
                }
                if (this.BiomarkerType != null)
                {
                    hashCode = (hashCode * 59) + this.BiomarkerType.GetHashCode();
                }
                if (this.Url != null)
                {
                    hashCode = (hashCode * 59) + this.Url.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
