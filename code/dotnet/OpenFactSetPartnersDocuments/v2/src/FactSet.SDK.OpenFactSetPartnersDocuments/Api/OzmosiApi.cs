/*
 * Open:FactSet - Partners
 *
 * This service provides the capability to search and download unstructured content provided by <a href=\"https://open.factset.com/catalog/en-us\">Open:FactSet Partners</a>.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: api@factset.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using FactSet.SDK.OpenFactSetPartnersDocuments.Client;
using FactSet.SDK.OpenFactSetPartnersDocuments.Model;
using FactSet.SDK.Utils.Authentication;

namespace FactSet.SDK.OpenFactSetPartnersDocuments.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IOzmosiApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Returns the daily files of Biomarkers Details from Open:FactSet Partner - Ozmosi.
        /// </summary>
        /// <remarks>
        /// Returns the daily files of Biomarkers Details from Open:FactSet Partner - Ozmosi.
        /// </remarks>
        /// <exception cref="FactSet.SDK.OpenFactSetPartnersDocuments.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="paginationLimit">Specifies the maximum number of results to return per result. (optional, default to 20)</param>
        /// <param name="paginationOffset">Specifies the starting point for pagination. This parameter is used to identify the beginning of next set of results. Using this parameter can fetch maximum of first 10000 records. (optional, default to 0)</param>
        /// <param name="clinicalTrialId">This parameter specifies Ozmosi unique ID for each historical version of a trial. (optional)</param>
        /// <param name="biomarkerName">This parameter specifies the abbreviated name of any patient biomarkers being targeted for research in the trial. (optional)</param>
        /// <param name="biomarkerFullName">Specifies the full name of the biomarker. (optional)</param>
        /// <returns>BiomarkersResponse</returns>
        BiomarkersResponse GetOzmosiBiomarkersDaily(int? paginationLimit = default(int?), int? paginationOffset = default(int?), string clinicalTrialId = default(string), string biomarkerName = default(string), string biomarkerFullName = default(string));

        /// <summary>
        /// Returns the daily files of Biomarkers Details from Open:FactSet Partner - Ozmosi.
        /// </summary>
        /// <remarks>
        /// Returns the daily files of Biomarkers Details from Open:FactSet Partner - Ozmosi.
        /// </remarks>
        /// <exception cref="FactSet.SDK.OpenFactSetPartnersDocuments.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="paginationLimit">Specifies the maximum number of results to return per result. (optional, default to 20)</param>
        /// <param name="paginationOffset">Specifies the starting point for pagination. This parameter is used to identify the beginning of next set of results. Using this parameter can fetch maximum of first 10000 records. (optional, default to 0)</param>
        /// <param name="clinicalTrialId">This parameter specifies Ozmosi unique ID for each historical version of a trial. (optional)</param>
        /// <param name="biomarkerName">This parameter specifies the abbreviated name of any patient biomarkers being targeted for research in the trial. (optional)</param>
        /// <param name="biomarkerFullName">Specifies the full name of the biomarker. (optional)</param>
        /// <returns>ApiResponse of BiomarkersResponse</returns>
        ApiResponse<BiomarkersResponse> GetOzmosiBiomarkersDailyWithHttpInfo(int? paginationLimit = default(int?), int? paginationOffset = default(int?), string clinicalTrialId = default(string), string biomarkerName = default(string), string biomarkerFullName = default(string));
        /// <summary>
        /// Returns the daily files of Clinical Trial Details from Open:FactSet Partner - Ozmosi.
        /// </summary>
        /// <remarks>
        /// Returns the daily files of Clinical Trial Details from Open:FactSet Partner - Ozmosi.
        /// </remarks>
        /// <exception cref="FactSet.SDK.OpenFactSetPartnersDocuments.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sort">Enables to get the data in ascending or descending order based on startTime. Results are in reverse chronological order if this parameter is not used. (optional, default to -startDate)</param>
        /// <param name="paginationLimit">Specifies the maximum number of results to return per result Default value 20 and Maximum value 300 (optional, default to 20)</param>
        /// <param name="paginationOffset">Specifies the starting point for pagination. This parameter is used to identify the beginning of next set of results. Using this parameter can fetch maximum of first 10000 records. (optional, default to 0)</param>
        /// <param name="clinicalTrialId">This parameter specifies Ozmosi unique ID for each historical version of a trial. (optional)</param>
        /// <param name="officialTitle">Specifies full scientific title of a trial. (optional)</param>
        /// <param name="trialId">This parameter specifies ID of the trial assigned by the trial registry. (optional)</param>
        /// <param name="date">Specifies the timestamp of each version of a trial in YYYY-MM-DD format. (optional)</param>
        /// <returns>DataResponse</returns>
        DataResponse GetOzmosiClinicalTrialsDaily(string sort = default(string), int? paginationLimit = default(int?), int? paginationOffset = default(int?), string clinicalTrialId = default(string), string officialTitle = default(string), string trialId = default(string), DateTime? date = default(DateTime?));

        /// <summary>
        /// Returns the daily files of Clinical Trial Details from Open:FactSet Partner - Ozmosi.
        /// </summary>
        /// <remarks>
        /// Returns the daily files of Clinical Trial Details from Open:FactSet Partner - Ozmosi.
        /// </remarks>
        /// <exception cref="FactSet.SDK.OpenFactSetPartnersDocuments.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sort">Enables to get the data in ascending or descending order based on startTime. Results are in reverse chronological order if this parameter is not used. (optional, default to -startDate)</param>
        /// <param name="paginationLimit">Specifies the maximum number of results to return per result Default value 20 and Maximum value 300 (optional, default to 20)</param>
        /// <param name="paginationOffset">Specifies the starting point for pagination. This parameter is used to identify the beginning of next set of results. Using this parameter can fetch maximum of first 10000 records. (optional, default to 0)</param>
        /// <param name="clinicalTrialId">This parameter specifies Ozmosi unique ID for each historical version of a trial. (optional)</param>
        /// <param name="officialTitle">Specifies full scientific title of a trial. (optional)</param>
        /// <param name="trialId">This parameter specifies ID of the trial assigned by the trial registry. (optional)</param>
        /// <param name="date">Specifies the timestamp of each version of a trial in YYYY-MM-DD format. (optional)</param>
        /// <returns>ApiResponse of DataResponse</returns>
        ApiResponse<DataResponse> GetOzmosiClinicalTrialsDailyWithHttpInfo(string sort = default(string), int? paginationLimit = default(int?), int? paginationOffset = default(int?), string clinicalTrialId = default(string), string officialTitle = default(string), string trialId = default(string), DateTime? date = default(DateTime?));
        /// <summary>
        /// Returns the history files from Open:FactSet Partner - Ozmosi
        /// </summary>
        /// <remarks>
        /// Returns the historical files from June 23rd, 2005 to current date.
        /// </remarks>
        /// <exception cref="FactSet.SDK.OpenFactSetPartnersDocuments.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="paginationLimit">Specifies the maximum number of results to return per result. (optional, default to 20)</param>
        /// <param name="paginationOffset">Specifies the starting point for pagination. This parameter is used to identify the beginning of next set of results. Using this parameter can fetch maximum of first 10000 records. (optional, default to 0)</param>
        /// <returns>FullHistoryResponse</returns>
        FullHistoryResponse GetOzmosiClinicalTrialsHistory(int? paginationLimit = default(int?), int? paginationOffset = default(int?));

        /// <summary>
        /// Returns the history files from Open:FactSet Partner - Ozmosi
        /// </summary>
        /// <remarks>
        /// Returns the historical files from June 23rd, 2005 to current date.
        /// </remarks>
        /// <exception cref="FactSet.SDK.OpenFactSetPartnersDocuments.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="paginationLimit">Specifies the maximum number of results to return per result. (optional, default to 20)</param>
        /// <param name="paginationOffset">Specifies the starting point for pagination. This parameter is used to identify the beginning of next set of results. Using this parameter can fetch maximum of first 10000 records. (optional, default to 0)</param>
        /// <returns>ApiResponse of FullHistoryResponse</returns>
        ApiResponse<FullHistoryResponse> GetOzmosiClinicalTrialsHistoryWithHttpInfo(int? paginationLimit = default(int?), int? paginationOffset = default(int?));
        /// <summary>
        /// Returns the daily files of Collaborators Details from Open:FactSet Partner - Ozmosi.
        /// </summary>
        /// <remarks>
        /// Returns the daily files of Collaborators Details from Open:FactSet Partner - Ozmosi.
        /// </remarks>
        /// <exception cref="FactSet.SDK.OpenFactSetPartnersDocuments.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="paginationLimit">Specifies the maximum number of results to return per result. (optional, default to 20)</param>
        /// <param name="paginationOffset">Specifies the starting point for pagination. This parameter is used to identify the beginning of next set of results. Using this parameter can fetch maximum of first 10000 records. (optional, default to 0)</param>
        /// <param name="clinicalTrialId">This parameter specifies Ozmosi unique ID for each historical version of a trial. (optional)</param>
        /// <param name="beamCollaboratorsName">It specifies the cleaned name of the collaborator. (optional)</param>
        /// <param name="beamCollaboratorsTicker">It specifies the Stock ticker for collaborator. (optional)</param>
        /// <returns>CollaboratorsResponse</returns>
        CollaboratorsResponse GetOzmosiCollaboratorsDaily(int? paginationLimit = default(int?), int? paginationOffset = default(int?), string clinicalTrialId = default(string), string beamCollaboratorsName = default(string), string beamCollaboratorsTicker = default(string));

        /// <summary>
        /// Returns the daily files of Collaborators Details from Open:FactSet Partner - Ozmosi.
        /// </summary>
        /// <remarks>
        /// Returns the daily files of Collaborators Details from Open:FactSet Partner - Ozmosi.
        /// </remarks>
        /// <exception cref="FactSet.SDK.OpenFactSetPartnersDocuments.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="paginationLimit">Specifies the maximum number of results to return per result. (optional, default to 20)</param>
        /// <param name="paginationOffset">Specifies the starting point for pagination. This parameter is used to identify the beginning of next set of results. Using this parameter can fetch maximum of first 10000 records. (optional, default to 0)</param>
        /// <param name="clinicalTrialId">This parameter specifies Ozmosi unique ID for each historical version of a trial. (optional)</param>
        /// <param name="beamCollaboratorsName">It specifies the cleaned name of the collaborator. (optional)</param>
        /// <param name="beamCollaboratorsTicker">It specifies the Stock ticker for collaborator. (optional)</param>
        /// <returns>ApiResponse of CollaboratorsResponse</returns>
        ApiResponse<CollaboratorsResponse> GetOzmosiCollaboratorsDailyWithHttpInfo(int? paginationLimit = default(int?), int? paginationOffset = default(int?), string clinicalTrialId = default(string), string beamCollaboratorsName = default(string), string beamCollaboratorsTicker = default(string));
        /// <summary>
        /// Returns the daily files of Diseases Details from Open:FactSet Partner- Ozmosi.
        /// </summary>
        /// <remarks>
        /// Returns the daily files of Diseases Details from Open:FactSet Partner- Ozmosi.
        /// </remarks>
        /// <exception cref="FactSet.SDK.OpenFactSetPartnersDocuments.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="paginationLimit">Specifies the maximum number of results to return per result. (optional, default to 20)</param>
        /// <param name="paginationOffset">Specifies the starting point for pagination. This parameter is used to identify the beginning of next set of results. Using this parameter can fetch maximum of first 10000 records. (optional, default to 0)</param>
        /// <param name="clinicalTrialId">This parameter specifies Ozmosi unique ID for each historical version of a trial. (optional)</param>
        /// <param name="diseaseArea">Specifies the cleaned disease name. (optional)</param>
        /// <param name="subTherapyArea">Specifies the Sub Therapy Area of the disease. (optional)</param>
        /// <param name="therapyArea">Specifies the Therapy Area of the disease. (optional)</param>
        /// <returns>DiseasesResponse</returns>
        DiseasesResponse GetOzmosiDiseasesDaily(int? paginationLimit = default(int?), int? paginationOffset = default(int?), string clinicalTrialId = default(string), string diseaseArea = default(string), string subTherapyArea = default(string), string therapyArea = default(string));

        /// <summary>
        /// Returns the daily files of Diseases Details from Open:FactSet Partner- Ozmosi.
        /// </summary>
        /// <remarks>
        /// Returns the daily files of Diseases Details from Open:FactSet Partner- Ozmosi.
        /// </remarks>
        /// <exception cref="FactSet.SDK.OpenFactSetPartnersDocuments.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="paginationLimit">Specifies the maximum number of results to return per result. (optional, default to 20)</param>
        /// <param name="paginationOffset">Specifies the starting point for pagination. This parameter is used to identify the beginning of next set of results. Using this parameter can fetch maximum of first 10000 records. (optional, default to 0)</param>
        /// <param name="clinicalTrialId">This parameter specifies Ozmosi unique ID for each historical version of a trial. (optional)</param>
        /// <param name="diseaseArea">Specifies the cleaned disease name. (optional)</param>
        /// <param name="subTherapyArea">Specifies the Sub Therapy Area of the disease. (optional)</param>
        /// <param name="therapyArea">Specifies the Therapy Area of the disease. (optional)</param>
        /// <returns>ApiResponse of DiseasesResponse</returns>
        ApiResponse<DiseasesResponse> GetOzmosiDiseasesDailyWithHttpInfo(int? paginationLimit = default(int?), int? paginationOffset = default(int?), string clinicalTrialId = default(string), string diseaseArea = default(string), string subTherapyArea = default(string), string therapyArea = default(string));
        /// <summary>
        /// Returns the daily files of Beam Endpoints Details from Open:FactSet Partner - Ozmosi.
        /// </summary>
        /// <remarks>
        /// Returns the daily files of Beam Endpoints Details from Open:FactSet Partner - Ozmosi.
        /// </remarks>
        /// <exception cref="FactSet.SDK.OpenFactSetPartnersDocuments.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="paginationLimit">Specifies the maximum number of results to return per result. (optional, default to 20)</param>
        /// <param name="paginationOffset">Specifies the starting point for pagination. This parameter is used to identify the beginning of next set of results. Using this parameter can fetch maximum of first 10000 records. (optional, default to 0)</param>
        /// <param name="clinicalTrialId">This parameter specifies Ozmosi unique ID for each historical version of a trial. (optional)</param>
        /// <param name="name">This parameter specifies cleaned and standardized abbreviations of primary endpoints that are common or of key interest. (optional)</param>
        /// <param name="fullForm">This parameter specifies cleaned and standardized full names of primary endpoints that are common or of key interest. (optional)</param>
        /// <returns>BeamEndpointsResponse</returns>
        BeamEndpointsResponse GetOzmosiEndpointsDaily(int? paginationLimit = default(int?), int? paginationOffset = default(int?), string clinicalTrialId = default(string), string name = default(string), string fullForm = default(string));

        /// <summary>
        /// Returns the daily files of Beam Endpoints Details from Open:FactSet Partner - Ozmosi.
        /// </summary>
        /// <remarks>
        /// Returns the daily files of Beam Endpoints Details from Open:FactSet Partner - Ozmosi.
        /// </remarks>
        /// <exception cref="FactSet.SDK.OpenFactSetPartnersDocuments.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="paginationLimit">Specifies the maximum number of results to return per result. (optional, default to 20)</param>
        /// <param name="paginationOffset">Specifies the starting point for pagination. This parameter is used to identify the beginning of next set of results. Using this parameter can fetch maximum of first 10000 records. (optional, default to 0)</param>
        /// <param name="clinicalTrialId">This parameter specifies Ozmosi unique ID for each historical version of a trial. (optional)</param>
        /// <param name="name">This parameter specifies cleaned and standardized abbreviations of primary endpoints that are common or of key interest. (optional)</param>
        /// <param name="fullForm">This parameter specifies cleaned and standardized full names of primary endpoints that are common or of key interest. (optional)</param>
        /// <returns>ApiResponse of BeamEndpointsResponse</returns>
        ApiResponse<BeamEndpointsResponse> GetOzmosiEndpointsDailyWithHttpInfo(int? paginationLimit = default(int?), int? paginationOffset = default(int?), string clinicalTrialId = default(string), string name = default(string), string fullForm = default(string));
        /// <summary>
        /// Returns the daily files of Intervention details from Open:FactSet Partner - Ozmosi.
        /// </summary>
        /// <remarks>
        /// Returns the daily files of Intervention details from Open:FactSet Partner - Ozmosi.
        /// </remarks>
        /// <exception cref="FactSet.SDK.OpenFactSetPartnersDocuments.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="paginationLimit">Specifies the maximum number of results to return per result. (optional, default to 20)</param>
        /// <param name="paginationOffset">Specifies the starting point for pagination. This parameter is used to identify the beginning of next set of results. Using this parameter can fetch maximum of first 10000 records. (optional, default to 0)</param>
        /// <param name="clinicalTrialId">This parameter specifies Ozmosi unique ID for each historical version of a trial. (optional)</param>
        /// <param name="beamInterventionName">This parameter specifies the name of intervention applied. (optional)</param>
        /// <param name="beamInterventionDesc">It specifies the description of intervention applied. (optional)</param>
        /// <returns>InterventionResponse</returns>
        InterventionResponse GetOzmosiInterventionDaily(int? paginationLimit = default(int?), int? paginationOffset = default(int?), string clinicalTrialId = default(string), string beamInterventionName = default(string), string beamInterventionDesc = default(string));

        /// <summary>
        /// Returns the daily files of Intervention details from Open:FactSet Partner - Ozmosi.
        /// </summary>
        /// <remarks>
        /// Returns the daily files of Intervention details from Open:FactSet Partner - Ozmosi.
        /// </remarks>
        /// <exception cref="FactSet.SDK.OpenFactSetPartnersDocuments.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="paginationLimit">Specifies the maximum number of results to return per result. (optional, default to 20)</param>
        /// <param name="paginationOffset">Specifies the starting point for pagination. This parameter is used to identify the beginning of next set of results. Using this parameter can fetch maximum of first 10000 records. (optional, default to 0)</param>
        /// <param name="clinicalTrialId">This parameter specifies Ozmosi unique ID for each historical version of a trial. (optional)</param>
        /// <param name="beamInterventionName">This parameter specifies the name of intervention applied. (optional)</param>
        /// <param name="beamInterventionDesc">It specifies the description of intervention applied. (optional)</param>
        /// <returns>ApiResponse of InterventionResponse</returns>
        ApiResponse<InterventionResponse> GetOzmosiInterventionDailyWithHttpInfo(int? paginationLimit = default(int?), int? paginationOffset = default(int?), string clinicalTrialId = default(string), string beamInterventionName = default(string), string beamInterventionDesc = default(string));
        /// <summary>
        /// Returns the daily files of OrangePurple Details from Open:FactSet Partner - Ozmosi.
        /// </summary>
        /// <remarks>
        /// Returns the daily files of OrangePurple Details from Open:FaStset Partner - Ozmosi.
        /// </remarks>
        /// <exception cref="FactSet.SDK.OpenFactSetPartnersDocuments.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="paginationLimit">Specifies the maximum number of results to return per result. (optional, default to 20)</param>
        /// <param name="paginationOffset">Specifies the starting point for pagination. This parameter is used to identify the beginning of next set of results. Using this parameter can fetch maximum of first 10000 records. (optional, default to 0)</param>
        /// <param name="clinicalTrialId">This parameter specifies Ozmosi unique ID for each historical version of a trial. (optional)</param>
        /// <param name="beamOpNovelDrug">This parameter identifies if the trial includes a drug that is not approved by the FDA. (optional)</param>
        /// <param name="beamOpNovelTarget">It lists the unapproved drug. (optional)</param>
        /// <returns>OrangePurpleResponse</returns>
        OrangePurpleResponse GetOzmosiOrangepurpleDaily(int? paginationLimit = default(int?), int? paginationOffset = default(int?), string clinicalTrialId = default(string), string beamOpNovelDrug = default(string), string beamOpNovelTarget = default(string));

        /// <summary>
        /// Returns the daily files of OrangePurple Details from Open:FactSet Partner - Ozmosi.
        /// </summary>
        /// <remarks>
        /// Returns the daily files of OrangePurple Details from Open:FaStset Partner - Ozmosi.
        /// </remarks>
        /// <exception cref="FactSet.SDK.OpenFactSetPartnersDocuments.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="paginationLimit">Specifies the maximum number of results to return per result. (optional, default to 20)</param>
        /// <param name="paginationOffset">Specifies the starting point for pagination. This parameter is used to identify the beginning of next set of results. Using this parameter can fetch maximum of first 10000 records. (optional, default to 0)</param>
        /// <param name="clinicalTrialId">This parameter specifies Ozmosi unique ID for each historical version of a trial. (optional)</param>
        /// <param name="beamOpNovelDrug">This parameter identifies if the trial includes a drug that is not approved by the FDA. (optional)</param>
        /// <param name="beamOpNovelTarget">It lists the unapproved drug. (optional)</param>
        /// <returns>ApiResponse of OrangePurpleResponse</returns>
        ApiResponse<OrangePurpleResponse> GetOzmosiOrangepurpleDailyWithHttpInfo(int? paginationLimit = default(int?), int? paginationOffset = default(int?), string clinicalTrialId = default(string), string beamOpNovelDrug = default(string), string beamOpNovelTarget = default(string));
        /// <summary>
        /// Returns the daily files of PrimaryOutcome Details from Open:FactSet Partner - Ozmosi.
        /// </summary>
        /// <remarks>
        /// Returns the daily files of PrimaryOutcome Details from Open:FactSet Partner - Ozmosi.
        /// </remarks>
        /// <exception cref="FactSet.SDK.OpenFactSetPartnersDocuments.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="paginationLimit">Specifies the maximum number of results to return per result. (optional, default to 20)</param>
        /// <param name="paginationOffset">Specifies the starting point for pagination. This parameter is used to identify the beginning of next set of results. Using this parameter can fetch maximum of first 10000 records. (optional, default to 0)</param>
        /// <param name="clinicalTrialId">This parameter specifies Ozmosi unique ID for each historical version of a trial. (optional)</param>
        /// <param name="primaryOutcomeMeasure">It specifies the description of each primary outcome measure (or for observational studies, specific key measurement[s] or observation[s] used to describe patterns of diseases or traits or associations with exposures, risk factors or treatment). (optional)</param>
        /// <param name="primaryOutcomeDesc">It describes the metric used to characterize the specific primary outcome measure, if not included in the primary outcome measure title. (optional)</param>
        /// <returns>PrimaryOutcomeResponse</returns>
        PrimaryOutcomeResponse GetOzmosiPrimaryoutcomeDaily(int? paginationLimit = default(int?), int? paginationOffset = default(int?), string clinicalTrialId = default(string), string primaryOutcomeMeasure = default(string), string primaryOutcomeDesc = default(string));

        /// <summary>
        /// Returns the daily files of PrimaryOutcome Details from Open:FactSet Partner - Ozmosi.
        /// </summary>
        /// <remarks>
        /// Returns the daily files of PrimaryOutcome Details from Open:FactSet Partner - Ozmosi.
        /// </remarks>
        /// <exception cref="FactSet.SDK.OpenFactSetPartnersDocuments.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="paginationLimit">Specifies the maximum number of results to return per result. (optional, default to 20)</param>
        /// <param name="paginationOffset">Specifies the starting point for pagination. This parameter is used to identify the beginning of next set of results. Using this parameter can fetch maximum of first 10000 records. (optional, default to 0)</param>
        /// <param name="clinicalTrialId">This parameter specifies Ozmosi unique ID for each historical version of a trial. (optional)</param>
        /// <param name="primaryOutcomeMeasure">It specifies the description of each primary outcome measure (or for observational studies, specific key measurement[s] or observation[s] used to describe patterns of diseases or traits or associations with exposures, risk factors or treatment). (optional)</param>
        /// <param name="primaryOutcomeDesc">It describes the metric used to characterize the specific primary outcome measure, if not included in the primary outcome measure title. (optional)</param>
        /// <returns>ApiResponse of PrimaryOutcomeResponse</returns>
        ApiResponse<PrimaryOutcomeResponse> GetOzmosiPrimaryoutcomeDailyWithHttpInfo(int? paginationLimit = default(int?), int? paginationOffset = default(int?), string clinicalTrialId = default(string), string primaryOutcomeMeasure = default(string), string primaryOutcomeDesc = default(string));
        /// <summary>
        /// Returns the daily files of Sponsors Details from Open:FactSet Partner - Ozmosi.
        /// </summary>
        /// <remarks>
        /// Returns the daily files of Sponsors Details from Open:FactSet Partner - Ozmosi.
        /// </remarks>
        /// <exception cref="FactSet.SDK.OpenFactSetPartnersDocuments.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="paginationLimit">Specifies the maximum number of results to return per result. (optional, default to 20)</param>
        /// <param name="paginationOffset">Specifies the starting point for pagination. This parameter is used to identify the beginning of next set of results. Using this parameter can fetch maximum of first 10000 records. (optional, default to 0)</param>
        /// <param name="clinicalTrialId">This parameter specifies Ozmosi unique ID for each historical version of a trial. (optional)</param>
        /// <param name="beamSponsorsName">It specifies the cleaned name of the Sponsor. (optional)</param>
        /// <param name="beamSponsorsTicker">It specifies the stock ticker for primary sponsor. (optional)</param>
        /// <returns>SponsorsResponse</returns>
        SponsorsResponse GetOzmosiSponsorsDaily(int? paginationLimit = default(int?), int? paginationOffset = default(int?), string clinicalTrialId = default(string), string beamSponsorsName = default(string), string beamSponsorsTicker = default(string));

        /// <summary>
        /// Returns the daily files of Sponsors Details from Open:FactSet Partner - Ozmosi.
        /// </summary>
        /// <remarks>
        /// Returns the daily files of Sponsors Details from Open:FactSet Partner - Ozmosi.
        /// </remarks>
        /// <exception cref="FactSet.SDK.OpenFactSetPartnersDocuments.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="paginationLimit">Specifies the maximum number of results to return per result. (optional, default to 20)</param>
        /// <param name="paginationOffset">Specifies the starting point for pagination. This parameter is used to identify the beginning of next set of results. Using this parameter can fetch maximum of first 10000 records. (optional, default to 0)</param>
        /// <param name="clinicalTrialId">This parameter specifies Ozmosi unique ID for each historical version of a trial. (optional)</param>
        /// <param name="beamSponsorsName">It specifies the cleaned name of the Sponsor. (optional)</param>
        /// <param name="beamSponsorsTicker">It specifies the stock ticker for primary sponsor. (optional)</param>
        /// <returns>ApiResponse of SponsorsResponse</returns>
        ApiResponse<SponsorsResponse> GetOzmosiSponsorsDailyWithHttpInfo(int? paginationLimit = default(int?), int? paginationOffset = default(int?), string clinicalTrialId = default(string), string beamSponsorsName = default(string), string beamSponsorsTicker = default(string));
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IOzmosiApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Returns the daily files of Biomarkers Details from Open:FactSet Partner - Ozmosi.
        /// </summary>
        /// <remarks>
        /// Returns the daily files of Biomarkers Details from Open:FactSet Partner - Ozmosi.
        /// </remarks>
        /// <exception cref="FactSet.SDK.OpenFactSetPartnersDocuments.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="paginationLimit">Specifies the maximum number of results to return per result. (optional, default to 20)</param>
        /// <param name="paginationOffset">Specifies the starting point for pagination. This parameter is used to identify the beginning of next set of results. Using this parameter can fetch maximum of first 10000 records. (optional, default to 0)</param>
        /// <param name="clinicalTrialId">This parameter specifies Ozmosi unique ID for each historical version of a trial. (optional)</param>
        /// <param name="biomarkerName">This parameter specifies the abbreviated name of any patient biomarkers being targeted for research in the trial. (optional)</param>
        /// <param name="biomarkerFullName">Specifies the full name of the biomarker. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BiomarkersResponse</returns>
        System.Threading.Tasks.Task<BiomarkersResponse> GetOzmosiBiomarkersDailyAsync(int? paginationLimit = default(int?), int? paginationOffset = default(int?), string clinicalTrialId = default(string), string biomarkerName = default(string), string biomarkerFullName = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Returns the daily files of Biomarkers Details from Open:FactSet Partner - Ozmosi.
        /// </summary>
        /// <remarks>
        /// Returns the daily files of Biomarkers Details from Open:FactSet Partner - Ozmosi.
        /// </remarks>
        /// <exception cref="FactSet.SDK.OpenFactSetPartnersDocuments.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="paginationLimit">Specifies the maximum number of results to return per result. (optional, default to 20)</param>
        /// <param name="paginationOffset">Specifies the starting point for pagination. This parameter is used to identify the beginning of next set of results. Using this parameter can fetch maximum of first 10000 records. (optional, default to 0)</param>
        /// <param name="clinicalTrialId">This parameter specifies Ozmosi unique ID for each historical version of a trial. (optional)</param>
        /// <param name="biomarkerName">This parameter specifies the abbreviated name of any patient biomarkers being targeted for research in the trial. (optional)</param>
        /// <param name="biomarkerFullName">Specifies the full name of the biomarker. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BiomarkersResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<BiomarkersResponse>> GetOzmosiBiomarkersDailyWithHttpInfoAsync(int? paginationLimit = default(int?), int? paginationOffset = default(int?), string clinicalTrialId = default(string), string biomarkerName = default(string), string biomarkerFullName = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Returns the daily files of Clinical Trial Details from Open:FactSet Partner - Ozmosi.
        /// </summary>
        /// <remarks>
        /// Returns the daily files of Clinical Trial Details from Open:FactSet Partner - Ozmosi.
        /// </remarks>
        /// <exception cref="FactSet.SDK.OpenFactSetPartnersDocuments.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sort">Enables to get the data in ascending or descending order based on startTime. Results are in reverse chronological order if this parameter is not used. (optional, default to -startDate)</param>
        /// <param name="paginationLimit">Specifies the maximum number of results to return per result Default value 20 and Maximum value 300 (optional, default to 20)</param>
        /// <param name="paginationOffset">Specifies the starting point for pagination. This parameter is used to identify the beginning of next set of results. Using this parameter can fetch maximum of first 10000 records. (optional, default to 0)</param>
        /// <param name="clinicalTrialId">This parameter specifies Ozmosi unique ID for each historical version of a trial. (optional)</param>
        /// <param name="officialTitle">Specifies full scientific title of a trial. (optional)</param>
        /// <param name="trialId">This parameter specifies ID of the trial assigned by the trial registry. (optional)</param>
        /// <param name="date">Specifies the timestamp of each version of a trial in YYYY-MM-DD format. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DataResponse</returns>
        System.Threading.Tasks.Task<DataResponse> GetOzmosiClinicalTrialsDailyAsync(string sort = default(string), int? paginationLimit = default(int?), int? paginationOffset = default(int?), string clinicalTrialId = default(string), string officialTitle = default(string), string trialId = default(string), DateTime? date = default(DateTime?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Returns the daily files of Clinical Trial Details from Open:FactSet Partner - Ozmosi.
        /// </summary>
        /// <remarks>
        /// Returns the daily files of Clinical Trial Details from Open:FactSet Partner - Ozmosi.
        /// </remarks>
        /// <exception cref="FactSet.SDK.OpenFactSetPartnersDocuments.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sort">Enables to get the data in ascending or descending order based on startTime. Results are in reverse chronological order if this parameter is not used. (optional, default to -startDate)</param>
        /// <param name="paginationLimit">Specifies the maximum number of results to return per result Default value 20 and Maximum value 300 (optional, default to 20)</param>
        /// <param name="paginationOffset">Specifies the starting point for pagination. This parameter is used to identify the beginning of next set of results. Using this parameter can fetch maximum of first 10000 records. (optional, default to 0)</param>
        /// <param name="clinicalTrialId">This parameter specifies Ozmosi unique ID for each historical version of a trial. (optional)</param>
        /// <param name="officialTitle">Specifies full scientific title of a trial. (optional)</param>
        /// <param name="trialId">This parameter specifies ID of the trial assigned by the trial registry. (optional)</param>
        /// <param name="date">Specifies the timestamp of each version of a trial in YYYY-MM-DD format. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DataResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<DataResponse>> GetOzmosiClinicalTrialsDailyWithHttpInfoAsync(string sort = default(string), int? paginationLimit = default(int?), int? paginationOffset = default(int?), string clinicalTrialId = default(string), string officialTitle = default(string), string trialId = default(string), DateTime? date = default(DateTime?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Returns the history files from Open:FactSet Partner - Ozmosi
        /// </summary>
        /// <remarks>
        /// Returns the historical files from June 23rd, 2005 to current date.
        /// </remarks>
        /// <exception cref="FactSet.SDK.OpenFactSetPartnersDocuments.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="paginationLimit">Specifies the maximum number of results to return per result. (optional, default to 20)</param>
        /// <param name="paginationOffset">Specifies the starting point for pagination. This parameter is used to identify the beginning of next set of results. Using this parameter can fetch maximum of first 10000 records. (optional, default to 0)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of FullHistoryResponse</returns>
        System.Threading.Tasks.Task<FullHistoryResponse> GetOzmosiClinicalTrialsHistoryAsync(int? paginationLimit = default(int?), int? paginationOffset = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Returns the history files from Open:FactSet Partner - Ozmosi
        /// </summary>
        /// <remarks>
        /// Returns the historical files from June 23rd, 2005 to current date.
        /// </remarks>
        /// <exception cref="FactSet.SDK.OpenFactSetPartnersDocuments.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="paginationLimit">Specifies the maximum number of results to return per result. (optional, default to 20)</param>
        /// <param name="paginationOffset">Specifies the starting point for pagination. This parameter is used to identify the beginning of next set of results. Using this parameter can fetch maximum of first 10000 records. (optional, default to 0)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (FullHistoryResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<FullHistoryResponse>> GetOzmosiClinicalTrialsHistoryWithHttpInfoAsync(int? paginationLimit = default(int?), int? paginationOffset = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Returns the daily files of Collaborators Details from Open:FactSet Partner - Ozmosi.
        /// </summary>
        /// <remarks>
        /// Returns the daily files of Collaborators Details from Open:FactSet Partner - Ozmosi.
        /// </remarks>
        /// <exception cref="FactSet.SDK.OpenFactSetPartnersDocuments.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="paginationLimit">Specifies the maximum number of results to return per result. (optional, default to 20)</param>
        /// <param name="paginationOffset">Specifies the starting point for pagination. This parameter is used to identify the beginning of next set of results. Using this parameter can fetch maximum of first 10000 records. (optional, default to 0)</param>
        /// <param name="clinicalTrialId">This parameter specifies Ozmosi unique ID for each historical version of a trial. (optional)</param>
        /// <param name="beamCollaboratorsName">It specifies the cleaned name of the collaborator. (optional)</param>
        /// <param name="beamCollaboratorsTicker">It specifies the Stock ticker for collaborator. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CollaboratorsResponse</returns>
        System.Threading.Tasks.Task<CollaboratorsResponse> GetOzmosiCollaboratorsDailyAsync(int? paginationLimit = default(int?), int? paginationOffset = default(int?), string clinicalTrialId = default(string), string beamCollaboratorsName = default(string), string beamCollaboratorsTicker = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Returns the daily files of Collaborators Details from Open:FactSet Partner - Ozmosi.
        /// </summary>
        /// <remarks>
        /// Returns the daily files of Collaborators Details from Open:FactSet Partner - Ozmosi.
        /// </remarks>
        /// <exception cref="FactSet.SDK.OpenFactSetPartnersDocuments.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="paginationLimit">Specifies the maximum number of results to return per result. (optional, default to 20)</param>
        /// <param name="paginationOffset">Specifies the starting point for pagination. This parameter is used to identify the beginning of next set of results. Using this parameter can fetch maximum of first 10000 records. (optional, default to 0)</param>
        /// <param name="clinicalTrialId">This parameter specifies Ozmosi unique ID for each historical version of a trial. (optional)</param>
        /// <param name="beamCollaboratorsName">It specifies the cleaned name of the collaborator. (optional)</param>
        /// <param name="beamCollaboratorsTicker">It specifies the Stock ticker for collaborator. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CollaboratorsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CollaboratorsResponse>> GetOzmosiCollaboratorsDailyWithHttpInfoAsync(int? paginationLimit = default(int?), int? paginationOffset = default(int?), string clinicalTrialId = default(string), string beamCollaboratorsName = default(string), string beamCollaboratorsTicker = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Returns the daily files of Diseases Details from Open:FactSet Partner- Ozmosi.
        /// </summary>
        /// <remarks>
        /// Returns the daily files of Diseases Details from Open:FactSet Partner- Ozmosi.
        /// </remarks>
        /// <exception cref="FactSet.SDK.OpenFactSetPartnersDocuments.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="paginationLimit">Specifies the maximum number of results to return per result. (optional, default to 20)</param>
        /// <param name="paginationOffset">Specifies the starting point for pagination. This parameter is used to identify the beginning of next set of results. Using this parameter can fetch maximum of first 10000 records. (optional, default to 0)</param>
        /// <param name="clinicalTrialId">This parameter specifies Ozmosi unique ID for each historical version of a trial. (optional)</param>
        /// <param name="diseaseArea">Specifies the cleaned disease name. (optional)</param>
        /// <param name="subTherapyArea">Specifies the Sub Therapy Area of the disease. (optional)</param>
        /// <param name="therapyArea">Specifies the Therapy Area of the disease. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DiseasesResponse</returns>
        System.Threading.Tasks.Task<DiseasesResponse> GetOzmosiDiseasesDailyAsync(int? paginationLimit = default(int?), int? paginationOffset = default(int?), string clinicalTrialId = default(string), string diseaseArea = default(string), string subTherapyArea = default(string), string therapyArea = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Returns the daily files of Diseases Details from Open:FactSet Partner- Ozmosi.
        /// </summary>
        /// <remarks>
        /// Returns the daily files of Diseases Details from Open:FactSet Partner- Ozmosi.
        /// </remarks>
        /// <exception cref="FactSet.SDK.OpenFactSetPartnersDocuments.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="paginationLimit">Specifies the maximum number of results to return per result. (optional, default to 20)</param>
        /// <param name="paginationOffset">Specifies the starting point for pagination. This parameter is used to identify the beginning of next set of results. Using this parameter can fetch maximum of first 10000 records. (optional, default to 0)</param>
        /// <param name="clinicalTrialId">This parameter specifies Ozmosi unique ID for each historical version of a trial. (optional)</param>
        /// <param name="diseaseArea">Specifies the cleaned disease name. (optional)</param>
        /// <param name="subTherapyArea">Specifies the Sub Therapy Area of the disease. (optional)</param>
        /// <param name="therapyArea">Specifies the Therapy Area of the disease. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DiseasesResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<DiseasesResponse>> GetOzmosiDiseasesDailyWithHttpInfoAsync(int? paginationLimit = default(int?), int? paginationOffset = default(int?), string clinicalTrialId = default(string), string diseaseArea = default(string), string subTherapyArea = default(string), string therapyArea = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Returns the daily files of Beam Endpoints Details from Open:FactSet Partner - Ozmosi.
        /// </summary>
        /// <remarks>
        /// Returns the daily files of Beam Endpoints Details from Open:FactSet Partner - Ozmosi.
        /// </remarks>
        /// <exception cref="FactSet.SDK.OpenFactSetPartnersDocuments.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="paginationLimit">Specifies the maximum number of results to return per result. (optional, default to 20)</param>
        /// <param name="paginationOffset">Specifies the starting point for pagination. This parameter is used to identify the beginning of next set of results. Using this parameter can fetch maximum of first 10000 records. (optional, default to 0)</param>
        /// <param name="clinicalTrialId">This parameter specifies Ozmosi unique ID for each historical version of a trial. (optional)</param>
        /// <param name="name">This parameter specifies cleaned and standardized abbreviations of primary endpoints that are common or of key interest. (optional)</param>
        /// <param name="fullForm">This parameter specifies cleaned and standardized full names of primary endpoints that are common or of key interest. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BeamEndpointsResponse</returns>
        System.Threading.Tasks.Task<BeamEndpointsResponse> GetOzmosiEndpointsDailyAsync(int? paginationLimit = default(int?), int? paginationOffset = default(int?), string clinicalTrialId = default(string), string name = default(string), string fullForm = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Returns the daily files of Beam Endpoints Details from Open:FactSet Partner - Ozmosi.
        /// </summary>
        /// <remarks>
        /// Returns the daily files of Beam Endpoints Details from Open:FactSet Partner - Ozmosi.
        /// </remarks>
        /// <exception cref="FactSet.SDK.OpenFactSetPartnersDocuments.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="paginationLimit">Specifies the maximum number of results to return per result. (optional, default to 20)</param>
        /// <param name="paginationOffset">Specifies the starting point for pagination. This parameter is used to identify the beginning of next set of results. Using this parameter can fetch maximum of first 10000 records. (optional, default to 0)</param>
        /// <param name="clinicalTrialId">This parameter specifies Ozmosi unique ID for each historical version of a trial. (optional)</param>
        /// <param name="name">This parameter specifies cleaned and standardized abbreviations of primary endpoints that are common or of key interest. (optional)</param>
        /// <param name="fullForm">This parameter specifies cleaned and standardized full names of primary endpoints that are common or of key interest. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BeamEndpointsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<BeamEndpointsResponse>> GetOzmosiEndpointsDailyWithHttpInfoAsync(int? paginationLimit = default(int?), int? paginationOffset = default(int?), string clinicalTrialId = default(string), string name = default(string), string fullForm = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Returns the daily files of Intervention details from Open:FactSet Partner - Ozmosi.
        /// </summary>
        /// <remarks>
        /// Returns the daily files of Intervention details from Open:FactSet Partner - Ozmosi.
        /// </remarks>
        /// <exception cref="FactSet.SDK.OpenFactSetPartnersDocuments.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="paginationLimit">Specifies the maximum number of results to return per result. (optional, default to 20)</param>
        /// <param name="paginationOffset">Specifies the starting point for pagination. This parameter is used to identify the beginning of next set of results. Using this parameter can fetch maximum of first 10000 records. (optional, default to 0)</param>
        /// <param name="clinicalTrialId">This parameter specifies Ozmosi unique ID for each historical version of a trial. (optional)</param>
        /// <param name="beamInterventionName">This parameter specifies the name of intervention applied. (optional)</param>
        /// <param name="beamInterventionDesc">It specifies the description of intervention applied. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InterventionResponse</returns>
        System.Threading.Tasks.Task<InterventionResponse> GetOzmosiInterventionDailyAsync(int? paginationLimit = default(int?), int? paginationOffset = default(int?), string clinicalTrialId = default(string), string beamInterventionName = default(string), string beamInterventionDesc = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Returns the daily files of Intervention details from Open:FactSet Partner - Ozmosi.
        /// </summary>
        /// <remarks>
        /// Returns the daily files of Intervention details from Open:FactSet Partner - Ozmosi.
        /// </remarks>
        /// <exception cref="FactSet.SDK.OpenFactSetPartnersDocuments.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="paginationLimit">Specifies the maximum number of results to return per result. (optional, default to 20)</param>
        /// <param name="paginationOffset">Specifies the starting point for pagination. This parameter is used to identify the beginning of next set of results. Using this parameter can fetch maximum of first 10000 records. (optional, default to 0)</param>
        /// <param name="clinicalTrialId">This parameter specifies Ozmosi unique ID for each historical version of a trial. (optional)</param>
        /// <param name="beamInterventionName">This parameter specifies the name of intervention applied. (optional)</param>
        /// <param name="beamInterventionDesc">It specifies the description of intervention applied. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InterventionResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<InterventionResponse>> GetOzmosiInterventionDailyWithHttpInfoAsync(int? paginationLimit = default(int?), int? paginationOffset = default(int?), string clinicalTrialId = default(string), string beamInterventionName = default(string), string beamInterventionDesc = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Returns the daily files of OrangePurple Details from Open:FactSet Partner - Ozmosi.
        /// </summary>
        /// <remarks>
        /// Returns the daily files of OrangePurple Details from Open:FaStset Partner - Ozmosi.
        /// </remarks>
        /// <exception cref="FactSet.SDK.OpenFactSetPartnersDocuments.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="paginationLimit">Specifies the maximum number of results to return per result. (optional, default to 20)</param>
        /// <param name="paginationOffset">Specifies the starting point for pagination. This parameter is used to identify the beginning of next set of results. Using this parameter can fetch maximum of first 10000 records. (optional, default to 0)</param>
        /// <param name="clinicalTrialId">This parameter specifies Ozmosi unique ID for each historical version of a trial. (optional)</param>
        /// <param name="beamOpNovelDrug">This parameter identifies if the trial includes a drug that is not approved by the FDA. (optional)</param>
        /// <param name="beamOpNovelTarget">It lists the unapproved drug. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of OrangePurpleResponse</returns>
        System.Threading.Tasks.Task<OrangePurpleResponse> GetOzmosiOrangepurpleDailyAsync(int? paginationLimit = default(int?), int? paginationOffset = default(int?), string clinicalTrialId = default(string), string beamOpNovelDrug = default(string), string beamOpNovelTarget = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Returns the daily files of OrangePurple Details from Open:FactSet Partner - Ozmosi.
        /// </summary>
        /// <remarks>
        /// Returns the daily files of OrangePurple Details from Open:FaStset Partner - Ozmosi.
        /// </remarks>
        /// <exception cref="FactSet.SDK.OpenFactSetPartnersDocuments.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="paginationLimit">Specifies the maximum number of results to return per result. (optional, default to 20)</param>
        /// <param name="paginationOffset">Specifies the starting point for pagination. This parameter is used to identify the beginning of next set of results. Using this parameter can fetch maximum of first 10000 records. (optional, default to 0)</param>
        /// <param name="clinicalTrialId">This parameter specifies Ozmosi unique ID for each historical version of a trial. (optional)</param>
        /// <param name="beamOpNovelDrug">This parameter identifies if the trial includes a drug that is not approved by the FDA. (optional)</param>
        /// <param name="beamOpNovelTarget">It lists the unapproved drug. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (OrangePurpleResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<OrangePurpleResponse>> GetOzmosiOrangepurpleDailyWithHttpInfoAsync(int? paginationLimit = default(int?), int? paginationOffset = default(int?), string clinicalTrialId = default(string), string beamOpNovelDrug = default(string), string beamOpNovelTarget = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Returns the daily files of PrimaryOutcome Details from Open:FactSet Partner - Ozmosi.
        /// </summary>
        /// <remarks>
        /// Returns the daily files of PrimaryOutcome Details from Open:FactSet Partner - Ozmosi.
        /// </remarks>
        /// <exception cref="FactSet.SDK.OpenFactSetPartnersDocuments.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="paginationLimit">Specifies the maximum number of results to return per result. (optional, default to 20)</param>
        /// <param name="paginationOffset">Specifies the starting point for pagination. This parameter is used to identify the beginning of next set of results. Using this parameter can fetch maximum of first 10000 records. (optional, default to 0)</param>
        /// <param name="clinicalTrialId">This parameter specifies Ozmosi unique ID for each historical version of a trial. (optional)</param>
        /// <param name="primaryOutcomeMeasure">It specifies the description of each primary outcome measure (or for observational studies, specific key measurement[s] or observation[s] used to describe patterns of diseases or traits or associations with exposures, risk factors or treatment). (optional)</param>
        /// <param name="primaryOutcomeDesc">It describes the metric used to characterize the specific primary outcome measure, if not included in the primary outcome measure title. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PrimaryOutcomeResponse</returns>
        System.Threading.Tasks.Task<PrimaryOutcomeResponse> GetOzmosiPrimaryoutcomeDailyAsync(int? paginationLimit = default(int?), int? paginationOffset = default(int?), string clinicalTrialId = default(string), string primaryOutcomeMeasure = default(string), string primaryOutcomeDesc = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Returns the daily files of PrimaryOutcome Details from Open:FactSet Partner - Ozmosi.
        /// </summary>
        /// <remarks>
        /// Returns the daily files of PrimaryOutcome Details from Open:FactSet Partner - Ozmosi.
        /// </remarks>
        /// <exception cref="FactSet.SDK.OpenFactSetPartnersDocuments.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="paginationLimit">Specifies the maximum number of results to return per result. (optional, default to 20)</param>
        /// <param name="paginationOffset">Specifies the starting point for pagination. This parameter is used to identify the beginning of next set of results. Using this parameter can fetch maximum of first 10000 records. (optional, default to 0)</param>
        /// <param name="clinicalTrialId">This parameter specifies Ozmosi unique ID for each historical version of a trial. (optional)</param>
        /// <param name="primaryOutcomeMeasure">It specifies the description of each primary outcome measure (or for observational studies, specific key measurement[s] or observation[s] used to describe patterns of diseases or traits or associations with exposures, risk factors or treatment). (optional)</param>
        /// <param name="primaryOutcomeDesc">It describes the metric used to characterize the specific primary outcome measure, if not included in the primary outcome measure title. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PrimaryOutcomeResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<PrimaryOutcomeResponse>> GetOzmosiPrimaryoutcomeDailyWithHttpInfoAsync(int? paginationLimit = default(int?), int? paginationOffset = default(int?), string clinicalTrialId = default(string), string primaryOutcomeMeasure = default(string), string primaryOutcomeDesc = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Returns the daily files of Sponsors Details from Open:FactSet Partner - Ozmosi.
        /// </summary>
        /// <remarks>
        /// Returns the daily files of Sponsors Details from Open:FactSet Partner - Ozmosi.
        /// </remarks>
        /// <exception cref="FactSet.SDK.OpenFactSetPartnersDocuments.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="paginationLimit">Specifies the maximum number of results to return per result. (optional, default to 20)</param>
        /// <param name="paginationOffset">Specifies the starting point for pagination. This parameter is used to identify the beginning of next set of results. Using this parameter can fetch maximum of first 10000 records. (optional, default to 0)</param>
        /// <param name="clinicalTrialId">This parameter specifies Ozmosi unique ID for each historical version of a trial. (optional)</param>
        /// <param name="beamSponsorsName">It specifies the cleaned name of the Sponsor. (optional)</param>
        /// <param name="beamSponsorsTicker">It specifies the stock ticker for primary sponsor. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SponsorsResponse</returns>
        System.Threading.Tasks.Task<SponsorsResponse> GetOzmosiSponsorsDailyAsync(int? paginationLimit = default(int?), int? paginationOffset = default(int?), string clinicalTrialId = default(string), string beamSponsorsName = default(string), string beamSponsorsTicker = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Returns the daily files of Sponsors Details from Open:FactSet Partner - Ozmosi.
        /// </summary>
        /// <remarks>
        /// Returns the daily files of Sponsors Details from Open:FactSet Partner - Ozmosi.
        /// </remarks>
        /// <exception cref="FactSet.SDK.OpenFactSetPartnersDocuments.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="paginationLimit">Specifies the maximum number of results to return per result. (optional, default to 20)</param>
        /// <param name="paginationOffset">Specifies the starting point for pagination. This parameter is used to identify the beginning of next set of results. Using this parameter can fetch maximum of first 10000 records. (optional, default to 0)</param>
        /// <param name="clinicalTrialId">This parameter specifies Ozmosi unique ID for each historical version of a trial. (optional)</param>
        /// <param name="beamSponsorsName">It specifies the cleaned name of the Sponsor. (optional)</param>
        /// <param name="beamSponsorsTicker">It specifies the stock ticker for primary sponsor. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SponsorsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SponsorsResponse>> GetOzmosiSponsorsDailyWithHttpInfoAsync(int? paginationLimit = default(int?), int? paginationOffset = default(int?), string clinicalTrialId = default(string), string beamSponsorsName = default(string), string beamSponsorsTicker = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IOzmosiApi : IOzmosiApiSync, IOzmosiApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class OzmosiApi : IOzmosiApi
    {
        private FactSet.SDK.OpenFactSetPartnersDocuments.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        # region Response Type Disctionaries
        
        private static readonly Dictionary<HttpStatusCode, System.Type> GetOzmosiBiomarkersDailyResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)200, typeof(BiomarkersResponse) },
            { (HttpStatusCode)400, typeof(AuthStatus) },
            { (HttpStatusCode)401, typeof(AuthStatus) },
            { (HttpStatusCode)403, typeof(AuthStatus) },
            { (HttpStatusCode)500, typeof(AuthStatus) },
        };

        private static readonly Dictionary<HttpStatusCode, System.Type> GetOzmosiClinicalTrialsDailyResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)200, typeof(DataResponse) },
            { (HttpStatusCode)400, typeof(AuthStatus) },
            { (HttpStatusCode)401, typeof(AuthStatus) },
            { (HttpStatusCode)403, typeof(AuthStatus) },
            { (HttpStatusCode)500, typeof(AuthStatus) },
        };

        private static readonly Dictionary<HttpStatusCode, System.Type> GetOzmosiClinicalTrialsHistoryResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)200, typeof(FullHistoryResponse) },
            { (HttpStatusCode)400, typeof(AuthStatus) },
            { (HttpStatusCode)401, typeof(AuthStatus) },
            { (HttpStatusCode)403, typeof(AuthStatus) },
            { (HttpStatusCode)500, typeof(AuthStatus) },
        };

        private static readonly Dictionary<HttpStatusCode, System.Type> GetOzmosiCollaboratorsDailyResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)200, typeof(CollaboratorsResponse) },
            { (HttpStatusCode)400, typeof(AuthStatus) },
            { (HttpStatusCode)401, typeof(AuthStatus) },
            { (HttpStatusCode)403, typeof(AuthStatus) },
            { (HttpStatusCode)500, typeof(AuthStatus) },
        };

        private static readonly Dictionary<HttpStatusCode, System.Type> GetOzmosiDiseasesDailyResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)200, typeof(DiseasesResponse) },
            { (HttpStatusCode)400, typeof(AuthStatus) },
            { (HttpStatusCode)401, typeof(AuthStatus) },
            { (HttpStatusCode)403, typeof(AuthStatus) },
            { (HttpStatusCode)500, typeof(AuthStatus) },
        };

        private static readonly Dictionary<HttpStatusCode, System.Type> GetOzmosiEndpointsDailyResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)200, typeof(BeamEndpointsResponse) },
            { (HttpStatusCode)400, typeof(AuthStatus) },
            { (HttpStatusCode)401, typeof(AuthStatus) },
            { (HttpStatusCode)403, typeof(AuthStatus) },
            { (HttpStatusCode)500, typeof(AuthStatus) },
        };

        private static readonly Dictionary<HttpStatusCode, System.Type> GetOzmosiInterventionDailyResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)200, typeof(InterventionResponse) },
            { (HttpStatusCode)400, typeof(AuthStatus) },
            { (HttpStatusCode)401, typeof(AuthStatus) },
            { (HttpStatusCode)403, typeof(AuthStatus) },
            { (HttpStatusCode)500, typeof(AuthStatus) },
        };

        private static readonly Dictionary<HttpStatusCode, System.Type> GetOzmosiOrangepurpleDailyResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)200, typeof(OrangePurpleResponse) },
            { (HttpStatusCode)400, typeof(AuthStatus) },
            { (HttpStatusCode)401, typeof(AuthStatus) },
            { (HttpStatusCode)403, typeof(AuthStatus) },
            { (HttpStatusCode)500, typeof(AuthStatus) },
        };

        private static readonly Dictionary<HttpStatusCode, System.Type> GetOzmosiPrimaryoutcomeDailyResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)200, typeof(PrimaryOutcomeResponse) },
            { (HttpStatusCode)400, typeof(AuthStatus) },
            { (HttpStatusCode)401, typeof(AuthStatus) },
            { (HttpStatusCode)403, typeof(AuthStatus) },
            { (HttpStatusCode)500, typeof(AuthStatus) },
        };

        private static readonly Dictionary<HttpStatusCode, System.Type> GetOzmosiSponsorsDailyResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)200, typeof(SponsorsResponse) },
            { (HttpStatusCode)400, typeof(AuthStatus) },
            { (HttpStatusCode)401, typeof(AuthStatus) },
            { (HttpStatusCode)403, typeof(AuthStatus) },
            { (HttpStatusCode)500, typeof(AuthStatus) },
        };

        # endregion Response Type Disctionaries

        # region Api Response Objects
        

        # endregion Api Response Objects

        /// <summary>
        /// Initializes a new instance of the <see cref="OzmosiApi"/> class.
        /// </summary>
        /// <returns></returns>
        public OzmosiApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="OzmosiApi"/> class.
        /// </summary>
        /// <returns></returns>
        public OzmosiApi(string basePath)
        {
            this.Configuration = FactSet.SDK.OpenFactSetPartnersDocuments.Client.Configuration.MergeConfigurations(
                FactSet.SDK.OpenFactSetPartnersDocuments.Client.GlobalConfiguration.Instance,
                new FactSet.SDK.OpenFactSetPartnersDocuments.Client.Configuration { BasePath = basePath }
            );
            this.Client = new FactSet.SDK.OpenFactSetPartnersDocuments.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new FactSet.SDK.OpenFactSetPartnersDocuments.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = FactSet.SDK.OpenFactSetPartnersDocuments.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="OzmosiApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public OzmosiApi(FactSet.SDK.OpenFactSetPartnersDocuments.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = FactSet.SDK.OpenFactSetPartnersDocuments.Client.Configuration.MergeConfigurations(
                FactSet.SDK.OpenFactSetPartnersDocuments.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new FactSet.SDK.OpenFactSetPartnersDocuments.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new FactSet.SDK.OpenFactSetPartnersDocuments.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = FactSet.SDK.OpenFactSetPartnersDocuments.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="OzmosiApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public OzmosiApi(FactSet.SDK.OpenFactSetPartnersDocuments.Client.ISynchronousClient client, FactSet.SDK.OpenFactSetPartnersDocuments.Client.IAsynchronousClient asyncClient, FactSet.SDK.OpenFactSetPartnersDocuments.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = FactSet.SDK.OpenFactSetPartnersDocuments.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public FactSet.SDK.OpenFactSetPartnersDocuments.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public FactSet.SDK.OpenFactSetPartnersDocuments.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public FactSet.SDK.OpenFactSetPartnersDocuments.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public FactSet.SDK.OpenFactSetPartnersDocuments.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Returns the daily files of Biomarkers Details from Open:FactSet Partner - Ozmosi. Returns the daily files of Biomarkers Details from Open:FactSet Partner - Ozmosi.
        /// </summary>
        /// <exception cref="FactSet.SDK.OpenFactSetPartnersDocuments.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="paginationLimit">Specifies the maximum number of results to return per result. (optional, default to 20)</param>
        /// <param name="paginationOffset">Specifies the starting point for pagination. This parameter is used to identify the beginning of next set of results. Using this parameter can fetch maximum of first 10000 records. (optional, default to 0)</param>
        /// <param name="clinicalTrialId">This parameter specifies Ozmosi unique ID for each historical version of a trial. (optional)</param>
        /// <param name="biomarkerName">This parameter specifies the abbreviated name of any patient biomarkers being targeted for research in the trial. (optional)</param>
        /// <param name="biomarkerFullName">Specifies the full name of the biomarker. (optional)</param>
        /// <returns>BiomarkersResponse</returns>
        public BiomarkersResponse GetOzmosiBiomarkersDaily(int? paginationLimit = default(int?), int? paginationOffset = default(int?), string clinicalTrialId = default(string), string biomarkerName = default(string), string biomarkerFullName = default(string))
        {
            var localVarResponse = GetOzmosiBiomarkersDailyWithHttpInfo(paginationLimit, paginationOffset, clinicalTrialId, biomarkerName, biomarkerFullName);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns the daily files of Biomarkers Details from Open:FactSet Partner - Ozmosi. Returns the daily files of Biomarkers Details from Open:FactSet Partner - Ozmosi.
        /// </summary>
        /// <exception cref="FactSet.SDK.OpenFactSetPartnersDocuments.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="paginationLimit">Specifies the maximum number of results to return per result. (optional, default to 20)</param>
        /// <param name="paginationOffset">Specifies the starting point for pagination. This parameter is used to identify the beginning of next set of results. Using this parameter can fetch maximum of first 10000 records. (optional, default to 0)</param>
        /// <param name="clinicalTrialId">This parameter specifies Ozmosi unique ID for each historical version of a trial. (optional)</param>
        /// <param name="biomarkerName">This parameter specifies the abbreviated name of any patient biomarkers being targeted for research in the trial. (optional)</param>
        /// <param name="biomarkerFullName">Specifies the full name of the biomarker. (optional)</param>
        /// <returns>ApiResponse of BiomarkersResponse</returns>
        public ApiResponse<BiomarkersResponse> GetOzmosiBiomarkersDailyWithHttpInfo(int? paginationLimit = default(int?), int? paginationOffset = default(int?), string clinicalTrialId = default(string), string biomarkerName = default(string), string biomarkerFullName = default(string))
        {
            FactSet.SDK.OpenFactSetPartnersDocuments.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.OpenFactSetPartnersDocuments.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.OpenFactSetPartnersDocuments.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.OpenFactSetPartnersDocuments.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (paginationLimit != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.OpenFactSetPartnersDocuments.Client.ClientUtils.ParameterToMultiMap("", "_paginationLimit", paginationLimit));
            }
            if (paginationOffset != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.OpenFactSetPartnersDocuments.Client.ClientUtils.ParameterToMultiMap("", "_paginationOffset", paginationOffset));
            }
            if (clinicalTrialId != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.OpenFactSetPartnersDocuments.Client.ClientUtils.ParameterToMultiMap("", "clinicalTrialId", clinicalTrialId));
            }
            if (biomarkerName != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.OpenFactSetPartnersDocuments.Client.ClientUtils.ParameterToMultiMap("", "biomarkerName", biomarkerName));
            }
            if (biomarkerFullName != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.OpenFactSetPartnersDocuments.Client.ClientUtils.ParameterToMultiMap("", "biomarkerFullName", biomarkerFullName));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.OpenFactSetPartnersDocuments.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = GetOzmosiBiomarkersDailyResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Get<
            BiomarkersResponse>("/ozmosi/biomarkers/daily", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetOzmosiBiomarkersDaily", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// Returns the daily files of Biomarkers Details from Open:FactSet Partner - Ozmosi. Returns the daily files of Biomarkers Details from Open:FactSet Partner - Ozmosi.
        /// </summary>
        /// <exception cref="FactSet.SDK.OpenFactSetPartnersDocuments.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="paginationLimit">Specifies the maximum number of results to return per result. (optional, default to 20)</param>
        /// <param name="paginationOffset">Specifies the starting point for pagination. This parameter is used to identify the beginning of next set of results. Using this parameter can fetch maximum of first 10000 records. (optional, default to 0)</param>
        /// <param name="clinicalTrialId">This parameter specifies Ozmosi unique ID for each historical version of a trial. (optional)</param>
        /// <param name="biomarkerName">This parameter specifies the abbreviated name of any patient biomarkers being targeted for research in the trial. (optional)</param>
        /// <param name="biomarkerFullName">Specifies the full name of the biomarker. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BiomarkersResponse</returns>
        public async System.Threading.Tasks.Task<BiomarkersResponse>GetOzmosiBiomarkersDailyAsync(int? paginationLimit = default(int?), int? paginationOffset = default(int?), string clinicalTrialId = default(string), string biomarkerName = default(string), string biomarkerFullName = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await GetOzmosiBiomarkersDailyWithHttpInfoAsync(paginationLimit, paginationOffset, clinicalTrialId, biomarkerName, biomarkerFullName, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns the daily files of Biomarkers Details from Open:FactSet Partner - Ozmosi. Returns the daily files of Biomarkers Details from Open:FactSet Partner - Ozmosi.
        /// </summary>
        /// <exception cref="FactSet.SDK.OpenFactSetPartnersDocuments.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="paginationLimit">Specifies the maximum number of results to return per result. (optional, default to 20)</param>
        /// <param name="paginationOffset">Specifies the starting point for pagination. This parameter is used to identify the beginning of next set of results. Using this parameter can fetch maximum of first 10000 records. (optional, default to 0)</param>
        /// <param name="clinicalTrialId">This parameter specifies Ozmosi unique ID for each historical version of a trial. (optional)</param>
        /// <param name="biomarkerName">This parameter specifies the abbreviated name of any patient biomarkers being targeted for research in the trial. (optional)</param>
        /// <param name="biomarkerFullName">Specifies the full name of the biomarker. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BiomarkersResponse)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<BiomarkersResponse>> GetOzmosiBiomarkersDailyWithHttpInfoAsync(int? paginationLimit = default(int?), int? paginationOffset = default(int?), string clinicalTrialId = default(string), string biomarkerName = default(string), string biomarkerFullName = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            FactSet.SDK.OpenFactSetPartnersDocuments.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.OpenFactSetPartnersDocuments.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.OpenFactSetPartnersDocuments.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.OpenFactSetPartnersDocuments.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (paginationLimit != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.OpenFactSetPartnersDocuments.Client.ClientUtils.ParameterToMultiMap("", "_paginationLimit", paginationLimit));
            }
            if (paginationOffset != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.OpenFactSetPartnersDocuments.Client.ClientUtils.ParameterToMultiMap("", "_paginationOffset", paginationOffset));
            }
            if (clinicalTrialId != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.OpenFactSetPartnersDocuments.Client.ClientUtils.ParameterToMultiMap("", "clinicalTrialId", clinicalTrialId));
            }
            if (biomarkerName != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.OpenFactSetPartnersDocuments.Client.ClientUtils.ParameterToMultiMap("", "biomarkerName", biomarkerName));
            }
            if (biomarkerFullName != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.OpenFactSetPartnersDocuments.Client.ClientUtils.ParameterToMultiMap("", "biomarkerFullName", biomarkerFullName));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.OpenFactSetPartnersDocuments.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = GetOzmosiBiomarkersDailyResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<BiomarkersResponse>("/ozmosi/biomarkers/daily", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetOzmosiBiomarkersDaily", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Returns the daily files of Clinical Trial Details from Open:FactSet Partner - Ozmosi. Returns the daily files of Clinical Trial Details from Open:FactSet Partner - Ozmosi.
        /// </summary>
        /// <exception cref="FactSet.SDK.OpenFactSetPartnersDocuments.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sort">Enables to get the data in ascending or descending order based on startTime. Results are in reverse chronological order if this parameter is not used. (optional, default to -startDate)</param>
        /// <param name="paginationLimit">Specifies the maximum number of results to return per result Default value 20 and Maximum value 300 (optional, default to 20)</param>
        /// <param name="paginationOffset">Specifies the starting point for pagination. This parameter is used to identify the beginning of next set of results. Using this parameter can fetch maximum of first 10000 records. (optional, default to 0)</param>
        /// <param name="clinicalTrialId">This parameter specifies Ozmosi unique ID for each historical version of a trial. (optional)</param>
        /// <param name="officialTitle">Specifies full scientific title of a trial. (optional)</param>
        /// <param name="trialId">This parameter specifies ID of the trial assigned by the trial registry. (optional)</param>
        /// <param name="date">Specifies the timestamp of each version of a trial in YYYY-MM-DD format. (optional)</param>
        /// <returns>DataResponse</returns>
        public DataResponse GetOzmosiClinicalTrialsDaily(string sort = default(string), int? paginationLimit = default(int?), int? paginationOffset = default(int?), string clinicalTrialId = default(string), string officialTitle = default(string), string trialId = default(string), DateTime? date = default(DateTime?))
        {
            var localVarResponse = GetOzmosiClinicalTrialsDailyWithHttpInfo(sort, paginationLimit, paginationOffset, clinicalTrialId, officialTitle, trialId, date);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns the daily files of Clinical Trial Details from Open:FactSet Partner - Ozmosi. Returns the daily files of Clinical Trial Details from Open:FactSet Partner - Ozmosi.
        /// </summary>
        /// <exception cref="FactSet.SDK.OpenFactSetPartnersDocuments.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sort">Enables to get the data in ascending or descending order based on startTime. Results are in reverse chronological order if this parameter is not used. (optional, default to -startDate)</param>
        /// <param name="paginationLimit">Specifies the maximum number of results to return per result Default value 20 and Maximum value 300 (optional, default to 20)</param>
        /// <param name="paginationOffset">Specifies the starting point for pagination. This parameter is used to identify the beginning of next set of results. Using this parameter can fetch maximum of first 10000 records. (optional, default to 0)</param>
        /// <param name="clinicalTrialId">This parameter specifies Ozmosi unique ID for each historical version of a trial. (optional)</param>
        /// <param name="officialTitle">Specifies full scientific title of a trial. (optional)</param>
        /// <param name="trialId">This parameter specifies ID of the trial assigned by the trial registry. (optional)</param>
        /// <param name="date">Specifies the timestamp of each version of a trial in YYYY-MM-DD format. (optional)</param>
        /// <returns>ApiResponse of DataResponse</returns>
        public ApiResponse<DataResponse> GetOzmosiClinicalTrialsDailyWithHttpInfo(string sort = default(string), int? paginationLimit = default(int?), int? paginationOffset = default(int?), string clinicalTrialId = default(string), string officialTitle = default(string), string trialId = default(string), DateTime? date = default(DateTime?))
        {
            FactSet.SDK.OpenFactSetPartnersDocuments.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.OpenFactSetPartnersDocuments.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.OpenFactSetPartnersDocuments.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.OpenFactSetPartnersDocuments.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.OpenFactSetPartnersDocuments.Client.ClientUtils.ParameterToMultiMap("", "_sort", sort));
            }
            if (paginationLimit != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.OpenFactSetPartnersDocuments.Client.ClientUtils.ParameterToMultiMap("", "_paginationLimit", paginationLimit));
            }
            if (paginationOffset != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.OpenFactSetPartnersDocuments.Client.ClientUtils.ParameterToMultiMap("", "_paginationOffset", paginationOffset));
            }
            if (clinicalTrialId != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.OpenFactSetPartnersDocuments.Client.ClientUtils.ParameterToMultiMap("", "clinicalTrialId", clinicalTrialId));
            }
            if (officialTitle != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.OpenFactSetPartnersDocuments.Client.ClientUtils.ParameterToMultiMap("", "officialTitle", officialTitle));
            }
            if (trialId != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.OpenFactSetPartnersDocuments.Client.ClientUtils.ParameterToMultiMap("", "trialId", trialId));
            }
            if (date != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.OpenFactSetPartnersDocuments.Client.ClientUtils.ParameterToMultiMap("", "date", date));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.OpenFactSetPartnersDocuments.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = GetOzmosiClinicalTrialsDailyResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Get<
            DataResponse>("/ozmosi/clinical-trials/daily", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetOzmosiClinicalTrialsDaily", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// Returns the daily files of Clinical Trial Details from Open:FactSet Partner - Ozmosi. Returns the daily files of Clinical Trial Details from Open:FactSet Partner - Ozmosi.
        /// </summary>
        /// <exception cref="FactSet.SDK.OpenFactSetPartnersDocuments.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sort">Enables to get the data in ascending or descending order based on startTime. Results are in reverse chronological order if this parameter is not used. (optional, default to -startDate)</param>
        /// <param name="paginationLimit">Specifies the maximum number of results to return per result Default value 20 and Maximum value 300 (optional, default to 20)</param>
        /// <param name="paginationOffset">Specifies the starting point for pagination. This parameter is used to identify the beginning of next set of results. Using this parameter can fetch maximum of first 10000 records. (optional, default to 0)</param>
        /// <param name="clinicalTrialId">This parameter specifies Ozmosi unique ID for each historical version of a trial. (optional)</param>
        /// <param name="officialTitle">Specifies full scientific title of a trial. (optional)</param>
        /// <param name="trialId">This parameter specifies ID of the trial assigned by the trial registry. (optional)</param>
        /// <param name="date">Specifies the timestamp of each version of a trial in YYYY-MM-DD format. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DataResponse</returns>
        public async System.Threading.Tasks.Task<DataResponse>GetOzmosiClinicalTrialsDailyAsync(string sort = default(string), int? paginationLimit = default(int?), int? paginationOffset = default(int?), string clinicalTrialId = default(string), string officialTitle = default(string), string trialId = default(string), DateTime? date = default(DateTime?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await GetOzmosiClinicalTrialsDailyWithHttpInfoAsync(sort, paginationLimit, paginationOffset, clinicalTrialId, officialTitle, trialId, date, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns the daily files of Clinical Trial Details from Open:FactSet Partner - Ozmosi. Returns the daily files of Clinical Trial Details from Open:FactSet Partner - Ozmosi.
        /// </summary>
        /// <exception cref="FactSet.SDK.OpenFactSetPartnersDocuments.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sort">Enables to get the data in ascending or descending order based on startTime. Results are in reverse chronological order if this parameter is not used. (optional, default to -startDate)</param>
        /// <param name="paginationLimit">Specifies the maximum number of results to return per result Default value 20 and Maximum value 300 (optional, default to 20)</param>
        /// <param name="paginationOffset">Specifies the starting point for pagination. This parameter is used to identify the beginning of next set of results. Using this parameter can fetch maximum of first 10000 records. (optional, default to 0)</param>
        /// <param name="clinicalTrialId">This parameter specifies Ozmosi unique ID for each historical version of a trial. (optional)</param>
        /// <param name="officialTitle">Specifies full scientific title of a trial. (optional)</param>
        /// <param name="trialId">This parameter specifies ID of the trial assigned by the trial registry. (optional)</param>
        /// <param name="date">Specifies the timestamp of each version of a trial in YYYY-MM-DD format. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DataResponse)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<DataResponse>> GetOzmosiClinicalTrialsDailyWithHttpInfoAsync(string sort = default(string), int? paginationLimit = default(int?), int? paginationOffset = default(int?), string clinicalTrialId = default(string), string officialTitle = default(string), string trialId = default(string), DateTime? date = default(DateTime?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            FactSet.SDK.OpenFactSetPartnersDocuments.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.OpenFactSetPartnersDocuments.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.OpenFactSetPartnersDocuments.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.OpenFactSetPartnersDocuments.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.OpenFactSetPartnersDocuments.Client.ClientUtils.ParameterToMultiMap("", "_sort", sort));
            }
            if (paginationLimit != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.OpenFactSetPartnersDocuments.Client.ClientUtils.ParameterToMultiMap("", "_paginationLimit", paginationLimit));
            }
            if (paginationOffset != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.OpenFactSetPartnersDocuments.Client.ClientUtils.ParameterToMultiMap("", "_paginationOffset", paginationOffset));
            }
            if (clinicalTrialId != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.OpenFactSetPartnersDocuments.Client.ClientUtils.ParameterToMultiMap("", "clinicalTrialId", clinicalTrialId));
            }
            if (officialTitle != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.OpenFactSetPartnersDocuments.Client.ClientUtils.ParameterToMultiMap("", "officialTitle", officialTitle));
            }
            if (trialId != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.OpenFactSetPartnersDocuments.Client.ClientUtils.ParameterToMultiMap("", "trialId", trialId));
            }
            if (date != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.OpenFactSetPartnersDocuments.Client.ClientUtils.ParameterToMultiMap("", "date", date));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.OpenFactSetPartnersDocuments.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = GetOzmosiClinicalTrialsDailyResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<DataResponse>("/ozmosi/clinical-trials/daily", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetOzmosiClinicalTrialsDaily", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Returns the history files from Open:FactSet Partner - Ozmosi Returns the historical files from June 23rd, 2005 to current date.
        /// </summary>
        /// <exception cref="FactSet.SDK.OpenFactSetPartnersDocuments.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="paginationLimit">Specifies the maximum number of results to return per result. (optional, default to 20)</param>
        /// <param name="paginationOffset">Specifies the starting point for pagination. This parameter is used to identify the beginning of next set of results. Using this parameter can fetch maximum of first 10000 records. (optional, default to 0)</param>
        /// <returns>FullHistoryResponse</returns>
        public FullHistoryResponse GetOzmosiClinicalTrialsHistory(int? paginationLimit = default(int?), int? paginationOffset = default(int?))
        {
            var localVarResponse = GetOzmosiClinicalTrialsHistoryWithHttpInfo(paginationLimit, paginationOffset);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns the history files from Open:FactSet Partner - Ozmosi Returns the historical files from June 23rd, 2005 to current date.
        /// </summary>
        /// <exception cref="FactSet.SDK.OpenFactSetPartnersDocuments.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="paginationLimit">Specifies the maximum number of results to return per result. (optional, default to 20)</param>
        /// <param name="paginationOffset">Specifies the starting point for pagination. This parameter is used to identify the beginning of next set of results. Using this parameter can fetch maximum of first 10000 records. (optional, default to 0)</param>
        /// <returns>ApiResponse of FullHistoryResponse</returns>
        public ApiResponse<FullHistoryResponse> GetOzmosiClinicalTrialsHistoryWithHttpInfo(int? paginationLimit = default(int?), int? paginationOffset = default(int?))
        {
            FactSet.SDK.OpenFactSetPartnersDocuments.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.OpenFactSetPartnersDocuments.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.OpenFactSetPartnersDocuments.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.OpenFactSetPartnersDocuments.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (paginationLimit != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.OpenFactSetPartnersDocuments.Client.ClientUtils.ParameterToMultiMap("", "_paginationLimit", paginationLimit));
            }
            if (paginationOffset != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.OpenFactSetPartnersDocuments.Client.ClientUtils.ParameterToMultiMap("", "_paginationOffset", paginationOffset));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.OpenFactSetPartnersDocuments.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = GetOzmosiClinicalTrialsHistoryResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Get<
            FullHistoryResponse>("/ozmosi/clinical-trials/history", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetOzmosiClinicalTrialsHistory", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// Returns the history files from Open:FactSet Partner - Ozmosi Returns the historical files from June 23rd, 2005 to current date.
        /// </summary>
        /// <exception cref="FactSet.SDK.OpenFactSetPartnersDocuments.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="paginationLimit">Specifies the maximum number of results to return per result. (optional, default to 20)</param>
        /// <param name="paginationOffset">Specifies the starting point for pagination. This parameter is used to identify the beginning of next set of results. Using this parameter can fetch maximum of first 10000 records. (optional, default to 0)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of FullHistoryResponse</returns>
        public async System.Threading.Tasks.Task<FullHistoryResponse>GetOzmosiClinicalTrialsHistoryAsync(int? paginationLimit = default(int?), int? paginationOffset = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await GetOzmosiClinicalTrialsHistoryWithHttpInfoAsync(paginationLimit, paginationOffset, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns the history files from Open:FactSet Partner - Ozmosi Returns the historical files from June 23rd, 2005 to current date.
        /// </summary>
        /// <exception cref="FactSet.SDK.OpenFactSetPartnersDocuments.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="paginationLimit">Specifies the maximum number of results to return per result. (optional, default to 20)</param>
        /// <param name="paginationOffset">Specifies the starting point for pagination. This parameter is used to identify the beginning of next set of results. Using this parameter can fetch maximum of first 10000 records. (optional, default to 0)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (FullHistoryResponse)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<FullHistoryResponse>> GetOzmosiClinicalTrialsHistoryWithHttpInfoAsync(int? paginationLimit = default(int?), int? paginationOffset = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            FactSet.SDK.OpenFactSetPartnersDocuments.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.OpenFactSetPartnersDocuments.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.OpenFactSetPartnersDocuments.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.OpenFactSetPartnersDocuments.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (paginationLimit != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.OpenFactSetPartnersDocuments.Client.ClientUtils.ParameterToMultiMap("", "_paginationLimit", paginationLimit));
            }
            if (paginationOffset != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.OpenFactSetPartnersDocuments.Client.ClientUtils.ParameterToMultiMap("", "_paginationOffset", paginationOffset));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.OpenFactSetPartnersDocuments.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = GetOzmosiClinicalTrialsHistoryResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<FullHistoryResponse>("/ozmosi/clinical-trials/history", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetOzmosiClinicalTrialsHistory", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Returns the daily files of Collaborators Details from Open:FactSet Partner - Ozmosi. Returns the daily files of Collaborators Details from Open:FactSet Partner - Ozmosi.
        /// </summary>
        /// <exception cref="FactSet.SDK.OpenFactSetPartnersDocuments.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="paginationLimit">Specifies the maximum number of results to return per result. (optional, default to 20)</param>
        /// <param name="paginationOffset">Specifies the starting point for pagination. This parameter is used to identify the beginning of next set of results. Using this parameter can fetch maximum of first 10000 records. (optional, default to 0)</param>
        /// <param name="clinicalTrialId">This parameter specifies Ozmosi unique ID for each historical version of a trial. (optional)</param>
        /// <param name="beamCollaboratorsName">It specifies the cleaned name of the collaborator. (optional)</param>
        /// <param name="beamCollaboratorsTicker">It specifies the Stock ticker for collaborator. (optional)</param>
        /// <returns>CollaboratorsResponse</returns>
        public CollaboratorsResponse GetOzmosiCollaboratorsDaily(int? paginationLimit = default(int?), int? paginationOffset = default(int?), string clinicalTrialId = default(string), string beamCollaboratorsName = default(string), string beamCollaboratorsTicker = default(string))
        {
            var localVarResponse = GetOzmosiCollaboratorsDailyWithHttpInfo(paginationLimit, paginationOffset, clinicalTrialId, beamCollaboratorsName, beamCollaboratorsTicker);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns the daily files of Collaborators Details from Open:FactSet Partner - Ozmosi. Returns the daily files of Collaborators Details from Open:FactSet Partner - Ozmosi.
        /// </summary>
        /// <exception cref="FactSet.SDK.OpenFactSetPartnersDocuments.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="paginationLimit">Specifies the maximum number of results to return per result. (optional, default to 20)</param>
        /// <param name="paginationOffset">Specifies the starting point for pagination. This parameter is used to identify the beginning of next set of results. Using this parameter can fetch maximum of first 10000 records. (optional, default to 0)</param>
        /// <param name="clinicalTrialId">This parameter specifies Ozmosi unique ID for each historical version of a trial. (optional)</param>
        /// <param name="beamCollaboratorsName">It specifies the cleaned name of the collaborator. (optional)</param>
        /// <param name="beamCollaboratorsTicker">It specifies the Stock ticker for collaborator. (optional)</param>
        /// <returns>ApiResponse of CollaboratorsResponse</returns>
        public ApiResponse<CollaboratorsResponse> GetOzmosiCollaboratorsDailyWithHttpInfo(int? paginationLimit = default(int?), int? paginationOffset = default(int?), string clinicalTrialId = default(string), string beamCollaboratorsName = default(string), string beamCollaboratorsTicker = default(string))
        {
            FactSet.SDK.OpenFactSetPartnersDocuments.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.OpenFactSetPartnersDocuments.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.OpenFactSetPartnersDocuments.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.OpenFactSetPartnersDocuments.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (paginationLimit != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.OpenFactSetPartnersDocuments.Client.ClientUtils.ParameterToMultiMap("", "_paginationLimit", paginationLimit));
            }
            if (paginationOffset != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.OpenFactSetPartnersDocuments.Client.ClientUtils.ParameterToMultiMap("", "_paginationOffset", paginationOffset));
            }
            if (clinicalTrialId != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.OpenFactSetPartnersDocuments.Client.ClientUtils.ParameterToMultiMap("", "clinicalTrialId", clinicalTrialId));
            }
            if (beamCollaboratorsName != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.OpenFactSetPartnersDocuments.Client.ClientUtils.ParameterToMultiMap("", "beamCollaboratorsName", beamCollaboratorsName));
            }
            if (beamCollaboratorsTicker != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.OpenFactSetPartnersDocuments.Client.ClientUtils.ParameterToMultiMap("", "beamCollaboratorsTicker", beamCollaboratorsTicker));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.OpenFactSetPartnersDocuments.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = GetOzmosiCollaboratorsDailyResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Get<
            CollaboratorsResponse>("/ozmosi/collaborators/daily", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetOzmosiCollaboratorsDaily", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// Returns the daily files of Collaborators Details from Open:FactSet Partner - Ozmosi. Returns the daily files of Collaborators Details from Open:FactSet Partner - Ozmosi.
        /// </summary>
        /// <exception cref="FactSet.SDK.OpenFactSetPartnersDocuments.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="paginationLimit">Specifies the maximum number of results to return per result. (optional, default to 20)</param>
        /// <param name="paginationOffset">Specifies the starting point for pagination. This parameter is used to identify the beginning of next set of results. Using this parameter can fetch maximum of first 10000 records. (optional, default to 0)</param>
        /// <param name="clinicalTrialId">This parameter specifies Ozmosi unique ID for each historical version of a trial. (optional)</param>
        /// <param name="beamCollaboratorsName">It specifies the cleaned name of the collaborator. (optional)</param>
        /// <param name="beamCollaboratorsTicker">It specifies the Stock ticker for collaborator. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CollaboratorsResponse</returns>
        public async System.Threading.Tasks.Task<CollaboratorsResponse>GetOzmosiCollaboratorsDailyAsync(int? paginationLimit = default(int?), int? paginationOffset = default(int?), string clinicalTrialId = default(string), string beamCollaboratorsName = default(string), string beamCollaboratorsTicker = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await GetOzmosiCollaboratorsDailyWithHttpInfoAsync(paginationLimit, paginationOffset, clinicalTrialId, beamCollaboratorsName, beamCollaboratorsTicker, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns the daily files of Collaborators Details from Open:FactSet Partner - Ozmosi. Returns the daily files of Collaborators Details from Open:FactSet Partner - Ozmosi.
        /// </summary>
        /// <exception cref="FactSet.SDK.OpenFactSetPartnersDocuments.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="paginationLimit">Specifies the maximum number of results to return per result. (optional, default to 20)</param>
        /// <param name="paginationOffset">Specifies the starting point for pagination. This parameter is used to identify the beginning of next set of results. Using this parameter can fetch maximum of first 10000 records. (optional, default to 0)</param>
        /// <param name="clinicalTrialId">This parameter specifies Ozmosi unique ID for each historical version of a trial. (optional)</param>
        /// <param name="beamCollaboratorsName">It specifies the cleaned name of the collaborator. (optional)</param>
        /// <param name="beamCollaboratorsTicker">It specifies the Stock ticker for collaborator. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CollaboratorsResponse)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<CollaboratorsResponse>> GetOzmosiCollaboratorsDailyWithHttpInfoAsync(int? paginationLimit = default(int?), int? paginationOffset = default(int?), string clinicalTrialId = default(string), string beamCollaboratorsName = default(string), string beamCollaboratorsTicker = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            FactSet.SDK.OpenFactSetPartnersDocuments.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.OpenFactSetPartnersDocuments.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.OpenFactSetPartnersDocuments.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.OpenFactSetPartnersDocuments.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (paginationLimit != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.OpenFactSetPartnersDocuments.Client.ClientUtils.ParameterToMultiMap("", "_paginationLimit", paginationLimit));
            }
            if (paginationOffset != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.OpenFactSetPartnersDocuments.Client.ClientUtils.ParameterToMultiMap("", "_paginationOffset", paginationOffset));
            }
            if (clinicalTrialId != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.OpenFactSetPartnersDocuments.Client.ClientUtils.ParameterToMultiMap("", "clinicalTrialId", clinicalTrialId));
            }
            if (beamCollaboratorsName != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.OpenFactSetPartnersDocuments.Client.ClientUtils.ParameterToMultiMap("", "beamCollaboratorsName", beamCollaboratorsName));
            }
            if (beamCollaboratorsTicker != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.OpenFactSetPartnersDocuments.Client.ClientUtils.ParameterToMultiMap("", "beamCollaboratorsTicker", beamCollaboratorsTicker));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.OpenFactSetPartnersDocuments.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = GetOzmosiCollaboratorsDailyResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<CollaboratorsResponse>("/ozmosi/collaborators/daily", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetOzmosiCollaboratorsDaily", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Returns the daily files of Diseases Details from Open:FactSet Partner- Ozmosi. Returns the daily files of Diseases Details from Open:FactSet Partner- Ozmosi.
        /// </summary>
        /// <exception cref="FactSet.SDK.OpenFactSetPartnersDocuments.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="paginationLimit">Specifies the maximum number of results to return per result. (optional, default to 20)</param>
        /// <param name="paginationOffset">Specifies the starting point for pagination. This parameter is used to identify the beginning of next set of results. Using this parameter can fetch maximum of first 10000 records. (optional, default to 0)</param>
        /// <param name="clinicalTrialId">This parameter specifies Ozmosi unique ID for each historical version of a trial. (optional)</param>
        /// <param name="diseaseArea">Specifies the cleaned disease name. (optional)</param>
        /// <param name="subTherapyArea">Specifies the Sub Therapy Area of the disease. (optional)</param>
        /// <param name="therapyArea">Specifies the Therapy Area of the disease. (optional)</param>
        /// <returns>DiseasesResponse</returns>
        public DiseasesResponse GetOzmosiDiseasesDaily(int? paginationLimit = default(int?), int? paginationOffset = default(int?), string clinicalTrialId = default(string), string diseaseArea = default(string), string subTherapyArea = default(string), string therapyArea = default(string))
        {
            var localVarResponse = GetOzmosiDiseasesDailyWithHttpInfo(paginationLimit, paginationOffset, clinicalTrialId, diseaseArea, subTherapyArea, therapyArea);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns the daily files of Diseases Details from Open:FactSet Partner- Ozmosi. Returns the daily files of Diseases Details from Open:FactSet Partner- Ozmosi.
        /// </summary>
        /// <exception cref="FactSet.SDK.OpenFactSetPartnersDocuments.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="paginationLimit">Specifies the maximum number of results to return per result. (optional, default to 20)</param>
        /// <param name="paginationOffset">Specifies the starting point for pagination. This parameter is used to identify the beginning of next set of results. Using this parameter can fetch maximum of first 10000 records. (optional, default to 0)</param>
        /// <param name="clinicalTrialId">This parameter specifies Ozmosi unique ID for each historical version of a trial. (optional)</param>
        /// <param name="diseaseArea">Specifies the cleaned disease name. (optional)</param>
        /// <param name="subTherapyArea">Specifies the Sub Therapy Area of the disease. (optional)</param>
        /// <param name="therapyArea">Specifies the Therapy Area of the disease. (optional)</param>
        /// <returns>ApiResponse of DiseasesResponse</returns>
        public ApiResponse<DiseasesResponse> GetOzmosiDiseasesDailyWithHttpInfo(int? paginationLimit = default(int?), int? paginationOffset = default(int?), string clinicalTrialId = default(string), string diseaseArea = default(string), string subTherapyArea = default(string), string therapyArea = default(string))
        {
            FactSet.SDK.OpenFactSetPartnersDocuments.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.OpenFactSetPartnersDocuments.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.OpenFactSetPartnersDocuments.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.OpenFactSetPartnersDocuments.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (paginationLimit != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.OpenFactSetPartnersDocuments.Client.ClientUtils.ParameterToMultiMap("", "_paginationLimit", paginationLimit));
            }
            if (paginationOffset != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.OpenFactSetPartnersDocuments.Client.ClientUtils.ParameterToMultiMap("", "_paginationOffset", paginationOffset));
            }
            if (clinicalTrialId != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.OpenFactSetPartnersDocuments.Client.ClientUtils.ParameterToMultiMap("", "clinicalTrialId", clinicalTrialId));
            }
            if (diseaseArea != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.OpenFactSetPartnersDocuments.Client.ClientUtils.ParameterToMultiMap("", "diseaseArea", diseaseArea));
            }
            if (subTherapyArea != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.OpenFactSetPartnersDocuments.Client.ClientUtils.ParameterToMultiMap("", "subTherapyArea", subTherapyArea));
            }
            if (therapyArea != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.OpenFactSetPartnersDocuments.Client.ClientUtils.ParameterToMultiMap("", "therapyArea", therapyArea));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.OpenFactSetPartnersDocuments.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = GetOzmosiDiseasesDailyResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Get<
            DiseasesResponse>("/ozmosi/diseases/daily", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetOzmosiDiseasesDaily", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// Returns the daily files of Diseases Details from Open:FactSet Partner- Ozmosi. Returns the daily files of Diseases Details from Open:FactSet Partner- Ozmosi.
        /// </summary>
        /// <exception cref="FactSet.SDK.OpenFactSetPartnersDocuments.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="paginationLimit">Specifies the maximum number of results to return per result. (optional, default to 20)</param>
        /// <param name="paginationOffset">Specifies the starting point for pagination. This parameter is used to identify the beginning of next set of results. Using this parameter can fetch maximum of first 10000 records. (optional, default to 0)</param>
        /// <param name="clinicalTrialId">This parameter specifies Ozmosi unique ID for each historical version of a trial. (optional)</param>
        /// <param name="diseaseArea">Specifies the cleaned disease name. (optional)</param>
        /// <param name="subTherapyArea">Specifies the Sub Therapy Area of the disease. (optional)</param>
        /// <param name="therapyArea">Specifies the Therapy Area of the disease. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DiseasesResponse</returns>
        public async System.Threading.Tasks.Task<DiseasesResponse>GetOzmosiDiseasesDailyAsync(int? paginationLimit = default(int?), int? paginationOffset = default(int?), string clinicalTrialId = default(string), string diseaseArea = default(string), string subTherapyArea = default(string), string therapyArea = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await GetOzmosiDiseasesDailyWithHttpInfoAsync(paginationLimit, paginationOffset, clinicalTrialId, diseaseArea, subTherapyArea, therapyArea, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns the daily files of Diseases Details from Open:FactSet Partner- Ozmosi. Returns the daily files of Diseases Details from Open:FactSet Partner- Ozmosi.
        /// </summary>
        /// <exception cref="FactSet.SDK.OpenFactSetPartnersDocuments.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="paginationLimit">Specifies the maximum number of results to return per result. (optional, default to 20)</param>
        /// <param name="paginationOffset">Specifies the starting point for pagination. This parameter is used to identify the beginning of next set of results. Using this parameter can fetch maximum of first 10000 records. (optional, default to 0)</param>
        /// <param name="clinicalTrialId">This parameter specifies Ozmosi unique ID for each historical version of a trial. (optional)</param>
        /// <param name="diseaseArea">Specifies the cleaned disease name. (optional)</param>
        /// <param name="subTherapyArea">Specifies the Sub Therapy Area of the disease. (optional)</param>
        /// <param name="therapyArea">Specifies the Therapy Area of the disease. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DiseasesResponse)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<DiseasesResponse>> GetOzmosiDiseasesDailyWithHttpInfoAsync(int? paginationLimit = default(int?), int? paginationOffset = default(int?), string clinicalTrialId = default(string), string diseaseArea = default(string), string subTherapyArea = default(string), string therapyArea = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            FactSet.SDK.OpenFactSetPartnersDocuments.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.OpenFactSetPartnersDocuments.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.OpenFactSetPartnersDocuments.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.OpenFactSetPartnersDocuments.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (paginationLimit != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.OpenFactSetPartnersDocuments.Client.ClientUtils.ParameterToMultiMap("", "_paginationLimit", paginationLimit));
            }
            if (paginationOffset != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.OpenFactSetPartnersDocuments.Client.ClientUtils.ParameterToMultiMap("", "_paginationOffset", paginationOffset));
            }
            if (clinicalTrialId != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.OpenFactSetPartnersDocuments.Client.ClientUtils.ParameterToMultiMap("", "clinicalTrialId", clinicalTrialId));
            }
            if (diseaseArea != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.OpenFactSetPartnersDocuments.Client.ClientUtils.ParameterToMultiMap("", "diseaseArea", diseaseArea));
            }
            if (subTherapyArea != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.OpenFactSetPartnersDocuments.Client.ClientUtils.ParameterToMultiMap("", "subTherapyArea", subTherapyArea));
            }
            if (therapyArea != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.OpenFactSetPartnersDocuments.Client.ClientUtils.ParameterToMultiMap("", "therapyArea", therapyArea));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.OpenFactSetPartnersDocuments.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = GetOzmosiDiseasesDailyResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<DiseasesResponse>("/ozmosi/diseases/daily", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetOzmosiDiseasesDaily", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Returns the daily files of Beam Endpoints Details from Open:FactSet Partner - Ozmosi. Returns the daily files of Beam Endpoints Details from Open:FactSet Partner - Ozmosi.
        /// </summary>
        /// <exception cref="FactSet.SDK.OpenFactSetPartnersDocuments.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="paginationLimit">Specifies the maximum number of results to return per result. (optional, default to 20)</param>
        /// <param name="paginationOffset">Specifies the starting point for pagination. This parameter is used to identify the beginning of next set of results. Using this parameter can fetch maximum of first 10000 records. (optional, default to 0)</param>
        /// <param name="clinicalTrialId">This parameter specifies Ozmosi unique ID for each historical version of a trial. (optional)</param>
        /// <param name="name">This parameter specifies cleaned and standardized abbreviations of primary endpoints that are common or of key interest. (optional)</param>
        /// <param name="fullForm">This parameter specifies cleaned and standardized full names of primary endpoints that are common or of key interest. (optional)</param>
        /// <returns>BeamEndpointsResponse</returns>
        public BeamEndpointsResponse GetOzmosiEndpointsDaily(int? paginationLimit = default(int?), int? paginationOffset = default(int?), string clinicalTrialId = default(string), string name = default(string), string fullForm = default(string))
        {
            var localVarResponse = GetOzmosiEndpointsDailyWithHttpInfo(paginationLimit, paginationOffset, clinicalTrialId, name, fullForm);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns the daily files of Beam Endpoints Details from Open:FactSet Partner - Ozmosi. Returns the daily files of Beam Endpoints Details from Open:FactSet Partner - Ozmosi.
        /// </summary>
        /// <exception cref="FactSet.SDK.OpenFactSetPartnersDocuments.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="paginationLimit">Specifies the maximum number of results to return per result. (optional, default to 20)</param>
        /// <param name="paginationOffset">Specifies the starting point for pagination. This parameter is used to identify the beginning of next set of results. Using this parameter can fetch maximum of first 10000 records. (optional, default to 0)</param>
        /// <param name="clinicalTrialId">This parameter specifies Ozmosi unique ID for each historical version of a trial. (optional)</param>
        /// <param name="name">This parameter specifies cleaned and standardized abbreviations of primary endpoints that are common or of key interest. (optional)</param>
        /// <param name="fullForm">This parameter specifies cleaned and standardized full names of primary endpoints that are common or of key interest. (optional)</param>
        /// <returns>ApiResponse of BeamEndpointsResponse</returns>
        public ApiResponse<BeamEndpointsResponse> GetOzmosiEndpointsDailyWithHttpInfo(int? paginationLimit = default(int?), int? paginationOffset = default(int?), string clinicalTrialId = default(string), string name = default(string), string fullForm = default(string))
        {
            FactSet.SDK.OpenFactSetPartnersDocuments.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.OpenFactSetPartnersDocuments.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.OpenFactSetPartnersDocuments.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.OpenFactSetPartnersDocuments.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (paginationLimit != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.OpenFactSetPartnersDocuments.Client.ClientUtils.ParameterToMultiMap("", "_paginationLimit", paginationLimit));
            }
            if (paginationOffset != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.OpenFactSetPartnersDocuments.Client.ClientUtils.ParameterToMultiMap("", "_paginationOffset", paginationOffset));
            }
            if (clinicalTrialId != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.OpenFactSetPartnersDocuments.Client.ClientUtils.ParameterToMultiMap("", "clinicalTrialId", clinicalTrialId));
            }
            if (name != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.OpenFactSetPartnersDocuments.Client.ClientUtils.ParameterToMultiMap("", "name", name));
            }
            if (fullForm != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.OpenFactSetPartnersDocuments.Client.ClientUtils.ParameterToMultiMap("", "fullForm", fullForm));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.OpenFactSetPartnersDocuments.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = GetOzmosiEndpointsDailyResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Get<
            BeamEndpointsResponse>("/ozmosi/beam-endpoints/daily", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetOzmosiEndpointsDaily", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// Returns the daily files of Beam Endpoints Details from Open:FactSet Partner - Ozmosi. Returns the daily files of Beam Endpoints Details from Open:FactSet Partner - Ozmosi.
        /// </summary>
        /// <exception cref="FactSet.SDK.OpenFactSetPartnersDocuments.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="paginationLimit">Specifies the maximum number of results to return per result. (optional, default to 20)</param>
        /// <param name="paginationOffset">Specifies the starting point for pagination. This parameter is used to identify the beginning of next set of results. Using this parameter can fetch maximum of first 10000 records. (optional, default to 0)</param>
        /// <param name="clinicalTrialId">This parameter specifies Ozmosi unique ID for each historical version of a trial. (optional)</param>
        /// <param name="name">This parameter specifies cleaned and standardized abbreviations of primary endpoints that are common or of key interest. (optional)</param>
        /// <param name="fullForm">This parameter specifies cleaned and standardized full names of primary endpoints that are common or of key interest. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BeamEndpointsResponse</returns>
        public async System.Threading.Tasks.Task<BeamEndpointsResponse>GetOzmosiEndpointsDailyAsync(int? paginationLimit = default(int?), int? paginationOffset = default(int?), string clinicalTrialId = default(string), string name = default(string), string fullForm = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await GetOzmosiEndpointsDailyWithHttpInfoAsync(paginationLimit, paginationOffset, clinicalTrialId, name, fullForm, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns the daily files of Beam Endpoints Details from Open:FactSet Partner - Ozmosi. Returns the daily files of Beam Endpoints Details from Open:FactSet Partner - Ozmosi.
        /// </summary>
        /// <exception cref="FactSet.SDK.OpenFactSetPartnersDocuments.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="paginationLimit">Specifies the maximum number of results to return per result. (optional, default to 20)</param>
        /// <param name="paginationOffset">Specifies the starting point for pagination. This parameter is used to identify the beginning of next set of results. Using this parameter can fetch maximum of first 10000 records. (optional, default to 0)</param>
        /// <param name="clinicalTrialId">This parameter specifies Ozmosi unique ID for each historical version of a trial. (optional)</param>
        /// <param name="name">This parameter specifies cleaned and standardized abbreviations of primary endpoints that are common or of key interest. (optional)</param>
        /// <param name="fullForm">This parameter specifies cleaned and standardized full names of primary endpoints that are common or of key interest. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BeamEndpointsResponse)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<BeamEndpointsResponse>> GetOzmosiEndpointsDailyWithHttpInfoAsync(int? paginationLimit = default(int?), int? paginationOffset = default(int?), string clinicalTrialId = default(string), string name = default(string), string fullForm = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            FactSet.SDK.OpenFactSetPartnersDocuments.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.OpenFactSetPartnersDocuments.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.OpenFactSetPartnersDocuments.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.OpenFactSetPartnersDocuments.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (paginationLimit != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.OpenFactSetPartnersDocuments.Client.ClientUtils.ParameterToMultiMap("", "_paginationLimit", paginationLimit));
            }
            if (paginationOffset != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.OpenFactSetPartnersDocuments.Client.ClientUtils.ParameterToMultiMap("", "_paginationOffset", paginationOffset));
            }
            if (clinicalTrialId != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.OpenFactSetPartnersDocuments.Client.ClientUtils.ParameterToMultiMap("", "clinicalTrialId", clinicalTrialId));
            }
            if (name != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.OpenFactSetPartnersDocuments.Client.ClientUtils.ParameterToMultiMap("", "name", name));
            }
            if (fullForm != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.OpenFactSetPartnersDocuments.Client.ClientUtils.ParameterToMultiMap("", "fullForm", fullForm));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.OpenFactSetPartnersDocuments.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = GetOzmosiEndpointsDailyResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<BeamEndpointsResponse>("/ozmosi/beam-endpoints/daily", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetOzmosiEndpointsDaily", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Returns the daily files of Intervention details from Open:FactSet Partner - Ozmosi. Returns the daily files of Intervention details from Open:FactSet Partner - Ozmosi.
        /// </summary>
        /// <exception cref="FactSet.SDK.OpenFactSetPartnersDocuments.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="paginationLimit">Specifies the maximum number of results to return per result. (optional, default to 20)</param>
        /// <param name="paginationOffset">Specifies the starting point for pagination. This parameter is used to identify the beginning of next set of results. Using this parameter can fetch maximum of first 10000 records. (optional, default to 0)</param>
        /// <param name="clinicalTrialId">This parameter specifies Ozmosi unique ID for each historical version of a trial. (optional)</param>
        /// <param name="beamInterventionName">This parameter specifies the name of intervention applied. (optional)</param>
        /// <param name="beamInterventionDesc">It specifies the description of intervention applied. (optional)</param>
        /// <returns>InterventionResponse</returns>
        public InterventionResponse GetOzmosiInterventionDaily(int? paginationLimit = default(int?), int? paginationOffset = default(int?), string clinicalTrialId = default(string), string beamInterventionName = default(string), string beamInterventionDesc = default(string))
        {
            var localVarResponse = GetOzmosiInterventionDailyWithHttpInfo(paginationLimit, paginationOffset, clinicalTrialId, beamInterventionName, beamInterventionDesc);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns the daily files of Intervention details from Open:FactSet Partner - Ozmosi. Returns the daily files of Intervention details from Open:FactSet Partner - Ozmosi.
        /// </summary>
        /// <exception cref="FactSet.SDK.OpenFactSetPartnersDocuments.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="paginationLimit">Specifies the maximum number of results to return per result. (optional, default to 20)</param>
        /// <param name="paginationOffset">Specifies the starting point for pagination. This parameter is used to identify the beginning of next set of results. Using this parameter can fetch maximum of first 10000 records. (optional, default to 0)</param>
        /// <param name="clinicalTrialId">This parameter specifies Ozmosi unique ID for each historical version of a trial. (optional)</param>
        /// <param name="beamInterventionName">This parameter specifies the name of intervention applied. (optional)</param>
        /// <param name="beamInterventionDesc">It specifies the description of intervention applied. (optional)</param>
        /// <returns>ApiResponse of InterventionResponse</returns>
        public ApiResponse<InterventionResponse> GetOzmosiInterventionDailyWithHttpInfo(int? paginationLimit = default(int?), int? paginationOffset = default(int?), string clinicalTrialId = default(string), string beamInterventionName = default(string), string beamInterventionDesc = default(string))
        {
            FactSet.SDK.OpenFactSetPartnersDocuments.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.OpenFactSetPartnersDocuments.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.OpenFactSetPartnersDocuments.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.OpenFactSetPartnersDocuments.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (paginationLimit != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.OpenFactSetPartnersDocuments.Client.ClientUtils.ParameterToMultiMap("", "_paginationLimit", paginationLimit));
            }
            if (paginationOffset != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.OpenFactSetPartnersDocuments.Client.ClientUtils.ParameterToMultiMap("", "_paginationOffset", paginationOffset));
            }
            if (clinicalTrialId != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.OpenFactSetPartnersDocuments.Client.ClientUtils.ParameterToMultiMap("", "clinicalTrialId", clinicalTrialId));
            }
            if (beamInterventionName != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.OpenFactSetPartnersDocuments.Client.ClientUtils.ParameterToMultiMap("", "beamInterventionName", beamInterventionName));
            }
            if (beamInterventionDesc != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.OpenFactSetPartnersDocuments.Client.ClientUtils.ParameterToMultiMap("", "beamInterventionDesc", beamInterventionDesc));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.OpenFactSetPartnersDocuments.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = GetOzmosiInterventionDailyResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Get<
            InterventionResponse>("/ozmosi/intervention/daily", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetOzmosiInterventionDaily", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// Returns the daily files of Intervention details from Open:FactSet Partner - Ozmosi. Returns the daily files of Intervention details from Open:FactSet Partner - Ozmosi.
        /// </summary>
        /// <exception cref="FactSet.SDK.OpenFactSetPartnersDocuments.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="paginationLimit">Specifies the maximum number of results to return per result. (optional, default to 20)</param>
        /// <param name="paginationOffset">Specifies the starting point for pagination. This parameter is used to identify the beginning of next set of results. Using this parameter can fetch maximum of first 10000 records. (optional, default to 0)</param>
        /// <param name="clinicalTrialId">This parameter specifies Ozmosi unique ID for each historical version of a trial. (optional)</param>
        /// <param name="beamInterventionName">This parameter specifies the name of intervention applied. (optional)</param>
        /// <param name="beamInterventionDesc">It specifies the description of intervention applied. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InterventionResponse</returns>
        public async System.Threading.Tasks.Task<InterventionResponse>GetOzmosiInterventionDailyAsync(int? paginationLimit = default(int?), int? paginationOffset = default(int?), string clinicalTrialId = default(string), string beamInterventionName = default(string), string beamInterventionDesc = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await GetOzmosiInterventionDailyWithHttpInfoAsync(paginationLimit, paginationOffset, clinicalTrialId, beamInterventionName, beamInterventionDesc, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns the daily files of Intervention details from Open:FactSet Partner - Ozmosi. Returns the daily files of Intervention details from Open:FactSet Partner - Ozmosi.
        /// </summary>
        /// <exception cref="FactSet.SDK.OpenFactSetPartnersDocuments.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="paginationLimit">Specifies the maximum number of results to return per result. (optional, default to 20)</param>
        /// <param name="paginationOffset">Specifies the starting point for pagination. This parameter is used to identify the beginning of next set of results. Using this parameter can fetch maximum of first 10000 records. (optional, default to 0)</param>
        /// <param name="clinicalTrialId">This parameter specifies Ozmosi unique ID for each historical version of a trial. (optional)</param>
        /// <param name="beamInterventionName">This parameter specifies the name of intervention applied. (optional)</param>
        /// <param name="beamInterventionDesc">It specifies the description of intervention applied. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InterventionResponse)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<InterventionResponse>> GetOzmosiInterventionDailyWithHttpInfoAsync(int? paginationLimit = default(int?), int? paginationOffset = default(int?), string clinicalTrialId = default(string), string beamInterventionName = default(string), string beamInterventionDesc = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            FactSet.SDK.OpenFactSetPartnersDocuments.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.OpenFactSetPartnersDocuments.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.OpenFactSetPartnersDocuments.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.OpenFactSetPartnersDocuments.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (paginationLimit != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.OpenFactSetPartnersDocuments.Client.ClientUtils.ParameterToMultiMap("", "_paginationLimit", paginationLimit));
            }
            if (paginationOffset != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.OpenFactSetPartnersDocuments.Client.ClientUtils.ParameterToMultiMap("", "_paginationOffset", paginationOffset));
            }
            if (clinicalTrialId != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.OpenFactSetPartnersDocuments.Client.ClientUtils.ParameterToMultiMap("", "clinicalTrialId", clinicalTrialId));
            }
            if (beamInterventionName != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.OpenFactSetPartnersDocuments.Client.ClientUtils.ParameterToMultiMap("", "beamInterventionName", beamInterventionName));
            }
            if (beamInterventionDesc != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.OpenFactSetPartnersDocuments.Client.ClientUtils.ParameterToMultiMap("", "beamInterventionDesc", beamInterventionDesc));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.OpenFactSetPartnersDocuments.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = GetOzmosiInterventionDailyResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<InterventionResponse>("/ozmosi/intervention/daily", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetOzmosiInterventionDaily", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Returns the daily files of OrangePurple Details from Open:FactSet Partner - Ozmosi. Returns the daily files of OrangePurple Details from Open:FaStset Partner - Ozmosi.
        /// </summary>
        /// <exception cref="FactSet.SDK.OpenFactSetPartnersDocuments.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="paginationLimit">Specifies the maximum number of results to return per result. (optional, default to 20)</param>
        /// <param name="paginationOffset">Specifies the starting point for pagination. This parameter is used to identify the beginning of next set of results. Using this parameter can fetch maximum of first 10000 records. (optional, default to 0)</param>
        /// <param name="clinicalTrialId">This parameter specifies Ozmosi unique ID for each historical version of a trial. (optional)</param>
        /// <param name="beamOpNovelDrug">This parameter identifies if the trial includes a drug that is not approved by the FDA. (optional)</param>
        /// <param name="beamOpNovelTarget">It lists the unapproved drug. (optional)</param>
        /// <returns>OrangePurpleResponse</returns>
        public OrangePurpleResponse GetOzmosiOrangepurpleDaily(int? paginationLimit = default(int?), int? paginationOffset = default(int?), string clinicalTrialId = default(string), string beamOpNovelDrug = default(string), string beamOpNovelTarget = default(string))
        {
            var localVarResponse = GetOzmosiOrangepurpleDailyWithHttpInfo(paginationLimit, paginationOffset, clinicalTrialId, beamOpNovelDrug, beamOpNovelTarget);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns the daily files of OrangePurple Details from Open:FactSet Partner - Ozmosi. Returns the daily files of OrangePurple Details from Open:FaStset Partner - Ozmosi.
        /// </summary>
        /// <exception cref="FactSet.SDK.OpenFactSetPartnersDocuments.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="paginationLimit">Specifies the maximum number of results to return per result. (optional, default to 20)</param>
        /// <param name="paginationOffset">Specifies the starting point for pagination. This parameter is used to identify the beginning of next set of results. Using this parameter can fetch maximum of first 10000 records. (optional, default to 0)</param>
        /// <param name="clinicalTrialId">This parameter specifies Ozmosi unique ID for each historical version of a trial. (optional)</param>
        /// <param name="beamOpNovelDrug">This parameter identifies if the trial includes a drug that is not approved by the FDA. (optional)</param>
        /// <param name="beamOpNovelTarget">It lists the unapproved drug. (optional)</param>
        /// <returns>ApiResponse of OrangePurpleResponse</returns>
        public ApiResponse<OrangePurpleResponse> GetOzmosiOrangepurpleDailyWithHttpInfo(int? paginationLimit = default(int?), int? paginationOffset = default(int?), string clinicalTrialId = default(string), string beamOpNovelDrug = default(string), string beamOpNovelTarget = default(string))
        {
            FactSet.SDK.OpenFactSetPartnersDocuments.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.OpenFactSetPartnersDocuments.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.OpenFactSetPartnersDocuments.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.OpenFactSetPartnersDocuments.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (paginationLimit != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.OpenFactSetPartnersDocuments.Client.ClientUtils.ParameterToMultiMap("", "_paginationLimit", paginationLimit));
            }
            if (paginationOffset != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.OpenFactSetPartnersDocuments.Client.ClientUtils.ParameterToMultiMap("", "_paginationOffset", paginationOffset));
            }
            if (clinicalTrialId != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.OpenFactSetPartnersDocuments.Client.ClientUtils.ParameterToMultiMap("", "clinicalTrialId", clinicalTrialId));
            }
            if (beamOpNovelDrug != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.OpenFactSetPartnersDocuments.Client.ClientUtils.ParameterToMultiMap("", "beamOpNovelDrug", beamOpNovelDrug));
            }
            if (beamOpNovelTarget != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.OpenFactSetPartnersDocuments.Client.ClientUtils.ParameterToMultiMap("", "beamOpNovelTarget", beamOpNovelTarget));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.OpenFactSetPartnersDocuments.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = GetOzmosiOrangepurpleDailyResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Get<
            OrangePurpleResponse>("/ozmosi/orangepurple/daily", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetOzmosiOrangepurpleDaily", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// Returns the daily files of OrangePurple Details from Open:FactSet Partner - Ozmosi. Returns the daily files of OrangePurple Details from Open:FaStset Partner - Ozmosi.
        /// </summary>
        /// <exception cref="FactSet.SDK.OpenFactSetPartnersDocuments.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="paginationLimit">Specifies the maximum number of results to return per result. (optional, default to 20)</param>
        /// <param name="paginationOffset">Specifies the starting point for pagination. This parameter is used to identify the beginning of next set of results. Using this parameter can fetch maximum of first 10000 records. (optional, default to 0)</param>
        /// <param name="clinicalTrialId">This parameter specifies Ozmosi unique ID for each historical version of a trial. (optional)</param>
        /// <param name="beamOpNovelDrug">This parameter identifies if the trial includes a drug that is not approved by the FDA. (optional)</param>
        /// <param name="beamOpNovelTarget">It lists the unapproved drug. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of OrangePurpleResponse</returns>
        public async System.Threading.Tasks.Task<OrangePurpleResponse>GetOzmosiOrangepurpleDailyAsync(int? paginationLimit = default(int?), int? paginationOffset = default(int?), string clinicalTrialId = default(string), string beamOpNovelDrug = default(string), string beamOpNovelTarget = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await GetOzmosiOrangepurpleDailyWithHttpInfoAsync(paginationLimit, paginationOffset, clinicalTrialId, beamOpNovelDrug, beamOpNovelTarget, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns the daily files of OrangePurple Details from Open:FactSet Partner - Ozmosi. Returns the daily files of OrangePurple Details from Open:FaStset Partner - Ozmosi.
        /// </summary>
        /// <exception cref="FactSet.SDK.OpenFactSetPartnersDocuments.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="paginationLimit">Specifies the maximum number of results to return per result. (optional, default to 20)</param>
        /// <param name="paginationOffset">Specifies the starting point for pagination. This parameter is used to identify the beginning of next set of results. Using this parameter can fetch maximum of first 10000 records. (optional, default to 0)</param>
        /// <param name="clinicalTrialId">This parameter specifies Ozmosi unique ID for each historical version of a trial. (optional)</param>
        /// <param name="beamOpNovelDrug">This parameter identifies if the trial includes a drug that is not approved by the FDA. (optional)</param>
        /// <param name="beamOpNovelTarget">It lists the unapproved drug. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (OrangePurpleResponse)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<OrangePurpleResponse>> GetOzmosiOrangepurpleDailyWithHttpInfoAsync(int? paginationLimit = default(int?), int? paginationOffset = default(int?), string clinicalTrialId = default(string), string beamOpNovelDrug = default(string), string beamOpNovelTarget = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            FactSet.SDK.OpenFactSetPartnersDocuments.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.OpenFactSetPartnersDocuments.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.OpenFactSetPartnersDocuments.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.OpenFactSetPartnersDocuments.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (paginationLimit != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.OpenFactSetPartnersDocuments.Client.ClientUtils.ParameterToMultiMap("", "_paginationLimit", paginationLimit));
            }
            if (paginationOffset != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.OpenFactSetPartnersDocuments.Client.ClientUtils.ParameterToMultiMap("", "_paginationOffset", paginationOffset));
            }
            if (clinicalTrialId != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.OpenFactSetPartnersDocuments.Client.ClientUtils.ParameterToMultiMap("", "clinicalTrialId", clinicalTrialId));
            }
            if (beamOpNovelDrug != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.OpenFactSetPartnersDocuments.Client.ClientUtils.ParameterToMultiMap("", "beamOpNovelDrug", beamOpNovelDrug));
            }
            if (beamOpNovelTarget != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.OpenFactSetPartnersDocuments.Client.ClientUtils.ParameterToMultiMap("", "beamOpNovelTarget", beamOpNovelTarget));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.OpenFactSetPartnersDocuments.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = GetOzmosiOrangepurpleDailyResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<OrangePurpleResponse>("/ozmosi/orangepurple/daily", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetOzmosiOrangepurpleDaily", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Returns the daily files of PrimaryOutcome Details from Open:FactSet Partner - Ozmosi. Returns the daily files of PrimaryOutcome Details from Open:FactSet Partner - Ozmosi.
        /// </summary>
        /// <exception cref="FactSet.SDK.OpenFactSetPartnersDocuments.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="paginationLimit">Specifies the maximum number of results to return per result. (optional, default to 20)</param>
        /// <param name="paginationOffset">Specifies the starting point for pagination. This parameter is used to identify the beginning of next set of results. Using this parameter can fetch maximum of first 10000 records. (optional, default to 0)</param>
        /// <param name="clinicalTrialId">This parameter specifies Ozmosi unique ID for each historical version of a trial. (optional)</param>
        /// <param name="primaryOutcomeMeasure">It specifies the description of each primary outcome measure (or for observational studies, specific key measurement[s] or observation[s] used to describe patterns of diseases or traits or associations with exposures, risk factors or treatment). (optional)</param>
        /// <param name="primaryOutcomeDesc">It describes the metric used to characterize the specific primary outcome measure, if not included in the primary outcome measure title. (optional)</param>
        /// <returns>PrimaryOutcomeResponse</returns>
        public PrimaryOutcomeResponse GetOzmosiPrimaryoutcomeDaily(int? paginationLimit = default(int?), int? paginationOffset = default(int?), string clinicalTrialId = default(string), string primaryOutcomeMeasure = default(string), string primaryOutcomeDesc = default(string))
        {
            var localVarResponse = GetOzmosiPrimaryoutcomeDailyWithHttpInfo(paginationLimit, paginationOffset, clinicalTrialId, primaryOutcomeMeasure, primaryOutcomeDesc);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns the daily files of PrimaryOutcome Details from Open:FactSet Partner - Ozmosi. Returns the daily files of PrimaryOutcome Details from Open:FactSet Partner - Ozmosi.
        /// </summary>
        /// <exception cref="FactSet.SDK.OpenFactSetPartnersDocuments.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="paginationLimit">Specifies the maximum number of results to return per result. (optional, default to 20)</param>
        /// <param name="paginationOffset">Specifies the starting point for pagination. This parameter is used to identify the beginning of next set of results. Using this parameter can fetch maximum of first 10000 records. (optional, default to 0)</param>
        /// <param name="clinicalTrialId">This parameter specifies Ozmosi unique ID for each historical version of a trial. (optional)</param>
        /// <param name="primaryOutcomeMeasure">It specifies the description of each primary outcome measure (or for observational studies, specific key measurement[s] or observation[s] used to describe patterns of diseases or traits or associations with exposures, risk factors or treatment). (optional)</param>
        /// <param name="primaryOutcomeDesc">It describes the metric used to characterize the specific primary outcome measure, if not included in the primary outcome measure title. (optional)</param>
        /// <returns>ApiResponse of PrimaryOutcomeResponse</returns>
        public ApiResponse<PrimaryOutcomeResponse> GetOzmosiPrimaryoutcomeDailyWithHttpInfo(int? paginationLimit = default(int?), int? paginationOffset = default(int?), string clinicalTrialId = default(string), string primaryOutcomeMeasure = default(string), string primaryOutcomeDesc = default(string))
        {
            FactSet.SDK.OpenFactSetPartnersDocuments.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.OpenFactSetPartnersDocuments.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.OpenFactSetPartnersDocuments.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.OpenFactSetPartnersDocuments.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (paginationLimit != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.OpenFactSetPartnersDocuments.Client.ClientUtils.ParameterToMultiMap("", "_paginationLimit", paginationLimit));
            }
            if (paginationOffset != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.OpenFactSetPartnersDocuments.Client.ClientUtils.ParameterToMultiMap("", "_paginationOffset", paginationOffset));
            }
            if (clinicalTrialId != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.OpenFactSetPartnersDocuments.Client.ClientUtils.ParameterToMultiMap("", "clinicalTrialId", clinicalTrialId));
            }
            if (primaryOutcomeMeasure != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.OpenFactSetPartnersDocuments.Client.ClientUtils.ParameterToMultiMap("", "primaryOutcomeMeasure", primaryOutcomeMeasure));
            }
            if (primaryOutcomeDesc != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.OpenFactSetPartnersDocuments.Client.ClientUtils.ParameterToMultiMap("", "primaryOutcomeDesc", primaryOutcomeDesc));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.OpenFactSetPartnersDocuments.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = GetOzmosiPrimaryoutcomeDailyResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Get<
            PrimaryOutcomeResponse>("/ozmosi/primaryoutcome/daily", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetOzmosiPrimaryoutcomeDaily", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// Returns the daily files of PrimaryOutcome Details from Open:FactSet Partner - Ozmosi. Returns the daily files of PrimaryOutcome Details from Open:FactSet Partner - Ozmosi.
        /// </summary>
        /// <exception cref="FactSet.SDK.OpenFactSetPartnersDocuments.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="paginationLimit">Specifies the maximum number of results to return per result. (optional, default to 20)</param>
        /// <param name="paginationOffset">Specifies the starting point for pagination. This parameter is used to identify the beginning of next set of results. Using this parameter can fetch maximum of first 10000 records. (optional, default to 0)</param>
        /// <param name="clinicalTrialId">This parameter specifies Ozmosi unique ID for each historical version of a trial. (optional)</param>
        /// <param name="primaryOutcomeMeasure">It specifies the description of each primary outcome measure (or for observational studies, specific key measurement[s] or observation[s] used to describe patterns of diseases or traits or associations with exposures, risk factors or treatment). (optional)</param>
        /// <param name="primaryOutcomeDesc">It describes the metric used to characterize the specific primary outcome measure, if not included in the primary outcome measure title. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PrimaryOutcomeResponse</returns>
        public async System.Threading.Tasks.Task<PrimaryOutcomeResponse>GetOzmosiPrimaryoutcomeDailyAsync(int? paginationLimit = default(int?), int? paginationOffset = default(int?), string clinicalTrialId = default(string), string primaryOutcomeMeasure = default(string), string primaryOutcomeDesc = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await GetOzmosiPrimaryoutcomeDailyWithHttpInfoAsync(paginationLimit, paginationOffset, clinicalTrialId, primaryOutcomeMeasure, primaryOutcomeDesc, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns the daily files of PrimaryOutcome Details from Open:FactSet Partner - Ozmosi. Returns the daily files of PrimaryOutcome Details from Open:FactSet Partner - Ozmosi.
        /// </summary>
        /// <exception cref="FactSet.SDK.OpenFactSetPartnersDocuments.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="paginationLimit">Specifies the maximum number of results to return per result. (optional, default to 20)</param>
        /// <param name="paginationOffset">Specifies the starting point for pagination. This parameter is used to identify the beginning of next set of results. Using this parameter can fetch maximum of first 10000 records. (optional, default to 0)</param>
        /// <param name="clinicalTrialId">This parameter specifies Ozmosi unique ID for each historical version of a trial. (optional)</param>
        /// <param name="primaryOutcomeMeasure">It specifies the description of each primary outcome measure (or for observational studies, specific key measurement[s] or observation[s] used to describe patterns of diseases or traits or associations with exposures, risk factors or treatment). (optional)</param>
        /// <param name="primaryOutcomeDesc">It describes the metric used to characterize the specific primary outcome measure, if not included in the primary outcome measure title. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PrimaryOutcomeResponse)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<PrimaryOutcomeResponse>> GetOzmosiPrimaryoutcomeDailyWithHttpInfoAsync(int? paginationLimit = default(int?), int? paginationOffset = default(int?), string clinicalTrialId = default(string), string primaryOutcomeMeasure = default(string), string primaryOutcomeDesc = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            FactSet.SDK.OpenFactSetPartnersDocuments.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.OpenFactSetPartnersDocuments.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.OpenFactSetPartnersDocuments.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.OpenFactSetPartnersDocuments.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (paginationLimit != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.OpenFactSetPartnersDocuments.Client.ClientUtils.ParameterToMultiMap("", "_paginationLimit", paginationLimit));
            }
            if (paginationOffset != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.OpenFactSetPartnersDocuments.Client.ClientUtils.ParameterToMultiMap("", "_paginationOffset", paginationOffset));
            }
            if (clinicalTrialId != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.OpenFactSetPartnersDocuments.Client.ClientUtils.ParameterToMultiMap("", "clinicalTrialId", clinicalTrialId));
            }
            if (primaryOutcomeMeasure != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.OpenFactSetPartnersDocuments.Client.ClientUtils.ParameterToMultiMap("", "primaryOutcomeMeasure", primaryOutcomeMeasure));
            }
            if (primaryOutcomeDesc != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.OpenFactSetPartnersDocuments.Client.ClientUtils.ParameterToMultiMap("", "primaryOutcomeDesc", primaryOutcomeDesc));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.OpenFactSetPartnersDocuments.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = GetOzmosiPrimaryoutcomeDailyResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<PrimaryOutcomeResponse>("/ozmosi/primaryoutcome/daily", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetOzmosiPrimaryoutcomeDaily", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Returns the daily files of Sponsors Details from Open:FactSet Partner - Ozmosi. Returns the daily files of Sponsors Details from Open:FactSet Partner - Ozmosi.
        /// </summary>
        /// <exception cref="FactSet.SDK.OpenFactSetPartnersDocuments.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="paginationLimit">Specifies the maximum number of results to return per result. (optional, default to 20)</param>
        /// <param name="paginationOffset">Specifies the starting point for pagination. This parameter is used to identify the beginning of next set of results. Using this parameter can fetch maximum of first 10000 records. (optional, default to 0)</param>
        /// <param name="clinicalTrialId">This parameter specifies Ozmosi unique ID for each historical version of a trial. (optional)</param>
        /// <param name="beamSponsorsName">It specifies the cleaned name of the Sponsor. (optional)</param>
        /// <param name="beamSponsorsTicker">It specifies the stock ticker for primary sponsor. (optional)</param>
        /// <returns>SponsorsResponse</returns>
        public SponsorsResponse GetOzmosiSponsorsDaily(int? paginationLimit = default(int?), int? paginationOffset = default(int?), string clinicalTrialId = default(string), string beamSponsorsName = default(string), string beamSponsorsTicker = default(string))
        {
            var localVarResponse = GetOzmosiSponsorsDailyWithHttpInfo(paginationLimit, paginationOffset, clinicalTrialId, beamSponsorsName, beamSponsorsTicker);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns the daily files of Sponsors Details from Open:FactSet Partner - Ozmosi. Returns the daily files of Sponsors Details from Open:FactSet Partner - Ozmosi.
        /// </summary>
        /// <exception cref="FactSet.SDK.OpenFactSetPartnersDocuments.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="paginationLimit">Specifies the maximum number of results to return per result. (optional, default to 20)</param>
        /// <param name="paginationOffset">Specifies the starting point for pagination. This parameter is used to identify the beginning of next set of results. Using this parameter can fetch maximum of first 10000 records. (optional, default to 0)</param>
        /// <param name="clinicalTrialId">This parameter specifies Ozmosi unique ID for each historical version of a trial. (optional)</param>
        /// <param name="beamSponsorsName">It specifies the cleaned name of the Sponsor. (optional)</param>
        /// <param name="beamSponsorsTicker">It specifies the stock ticker for primary sponsor. (optional)</param>
        /// <returns>ApiResponse of SponsorsResponse</returns>
        public ApiResponse<SponsorsResponse> GetOzmosiSponsorsDailyWithHttpInfo(int? paginationLimit = default(int?), int? paginationOffset = default(int?), string clinicalTrialId = default(string), string beamSponsorsName = default(string), string beamSponsorsTicker = default(string))
        {
            FactSet.SDK.OpenFactSetPartnersDocuments.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.OpenFactSetPartnersDocuments.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.OpenFactSetPartnersDocuments.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.OpenFactSetPartnersDocuments.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (paginationLimit != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.OpenFactSetPartnersDocuments.Client.ClientUtils.ParameterToMultiMap("", "_paginationLimit", paginationLimit));
            }
            if (paginationOffset != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.OpenFactSetPartnersDocuments.Client.ClientUtils.ParameterToMultiMap("", "_paginationOffset", paginationOffset));
            }
            if (clinicalTrialId != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.OpenFactSetPartnersDocuments.Client.ClientUtils.ParameterToMultiMap("", "clinicalTrialId", clinicalTrialId));
            }
            if (beamSponsorsName != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.OpenFactSetPartnersDocuments.Client.ClientUtils.ParameterToMultiMap("", "beamSponsorsName", beamSponsorsName));
            }
            if (beamSponsorsTicker != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.OpenFactSetPartnersDocuments.Client.ClientUtils.ParameterToMultiMap("", "beamSponsorsTicker", beamSponsorsTicker));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.OpenFactSetPartnersDocuments.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = GetOzmosiSponsorsDailyResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Get<
            SponsorsResponse>("/ozmosi/sponsors/daily", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetOzmosiSponsorsDaily", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// Returns the daily files of Sponsors Details from Open:FactSet Partner - Ozmosi. Returns the daily files of Sponsors Details from Open:FactSet Partner - Ozmosi.
        /// </summary>
        /// <exception cref="FactSet.SDK.OpenFactSetPartnersDocuments.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="paginationLimit">Specifies the maximum number of results to return per result. (optional, default to 20)</param>
        /// <param name="paginationOffset">Specifies the starting point for pagination. This parameter is used to identify the beginning of next set of results. Using this parameter can fetch maximum of first 10000 records. (optional, default to 0)</param>
        /// <param name="clinicalTrialId">This parameter specifies Ozmosi unique ID for each historical version of a trial. (optional)</param>
        /// <param name="beamSponsorsName">It specifies the cleaned name of the Sponsor. (optional)</param>
        /// <param name="beamSponsorsTicker">It specifies the stock ticker for primary sponsor. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SponsorsResponse</returns>
        public async System.Threading.Tasks.Task<SponsorsResponse>GetOzmosiSponsorsDailyAsync(int? paginationLimit = default(int?), int? paginationOffset = default(int?), string clinicalTrialId = default(string), string beamSponsorsName = default(string), string beamSponsorsTicker = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await GetOzmosiSponsorsDailyWithHttpInfoAsync(paginationLimit, paginationOffset, clinicalTrialId, beamSponsorsName, beamSponsorsTicker, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns the daily files of Sponsors Details from Open:FactSet Partner - Ozmosi. Returns the daily files of Sponsors Details from Open:FactSet Partner - Ozmosi.
        /// </summary>
        /// <exception cref="FactSet.SDK.OpenFactSetPartnersDocuments.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="paginationLimit">Specifies the maximum number of results to return per result. (optional, default to 20)</param>
        /// <param name="paginationOffset">Specifies the starting point for pagination. This parameter is used to identify the beginning of next set of results. Using this parameter can fetch maximum of first 10000 records. (optional, default to 0)</param>
        /// <param name="clinicalTrialId">This parameter specifies Ozmosi unique ID for each historical version of a trial. (optional)</param>
        /// <param name="beamSponsorsName">It specifies the cleaned name of the Sponsor. (optional)</param>
        /// <param name="beamSponsorsTicker">It specifies the stock ticker for primary sponsor. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SponsorsResponse)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<SponsorsResponse>> GetOzmosiSponsorsDailyWithHttpInfoAsync(int? paginationLimit = default(int?), int? paginationOffset = default(int?), string clinicalTrialId = default(string), string beamSponsorsName = default(string), string beamSponsorsTicker = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            FactSet.SDK.OpenFactSetPartnersDocuments.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.OpenFactSetPartnersDocuments.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.OpenFactSetPartnersDocuments.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.OpenFactSetPartnersDocuments.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (paginationLimit != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.OpenFactSetPartnersDocuments.Client.ClientUtils.ParameterToMultiMap("", "_paginationLimit", paginationLimit));
            }
            if (paginationOffset != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.OpenFactSetPartnersDocuments.Client.ClientUtils.ParameterToMultiMap("", "_paginationOffset", paginationOffset));
            }
            if (clinicalTrialId != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.OpenFactSetPartnersDocuments.Client.ClientUtils.ParameterToMultiMap("", "clinicalTrialId", clinicalTrialId));
            }
            if (beamSponsorsName != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.OpenFactSetPartnersDocuments.Client.ClientUtils.ParameterToMultiMap("", "beamSponsorsName", beamSponsorsName));
            }
            if (beamSponsorsTicker != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.OpenFactSetPartnersDocuments.Client.ClientUtils.ParameterToMultiMap("", "beamSponsorsTicker", beamSponsorsTicker));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.OpenFactSetPartnersDocuments.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = GetOzmosiSponsorsDailyResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<SponsorsResponse>("/ozmosi/sponsors/daily", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetOzmosiSponsorsDaily", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
