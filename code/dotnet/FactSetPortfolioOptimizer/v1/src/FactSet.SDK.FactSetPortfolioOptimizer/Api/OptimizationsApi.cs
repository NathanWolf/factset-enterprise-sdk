/*
 * Engines API
 *
 * Allow clients to fetch Engines Analytics through APIs.
 *
 * The version of the OpenAPI document: 1
 * Contact: analytics.api.support@factset.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using FactSet.SDK.FactSetPortfolioOptimizer.Client;
using FactSet.SDK.FactSetPortfolioOptimizer.Model;
using FactSet.SDK.Utils.Authentication;

namespace FactSet.SDK.FactSetPortfolioOptimizer.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IOptimizationsApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Cancel FPO optimization by id
        /// </summary>
        /// <remarks>
        /// This is the endpoint to cancel a previously submitted optimization. Instead of doing a GET on the polling URL, cancel the request by doing a DELETE.
        /// </remarks>
        /// <exception cref="FactSet.SDK.FactSetPortfolioOptimizer.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">from url, provided from the location header in the Run Optimization endpoint</param>
        /// <returns>void</returns>
        void CancelFPOOptimizationById(string id);

        /// <summary>
        /// Cancel FPO optimization by id
        /// </summary>
        /// <remarks>
        /// This is the endpoint to cancel a previously submitted optimization. Instead of doing a GET on the polling URL, cancel the request by doing a DELETE.
        /// </remarks>
        /// <exception cref="FactSet.SDK.FactSetPortfolioOptimizer.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">from url, provided from the location header in the Run Optimization endpoint</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> CancelFPOOptimizationByIdWithHttpInfo(string id);
        /// <summary>
        /// Get FPO optimization by id
        /// </summary>
        /// <remarks>
        /// This is the endpoint to check on the progress of a previously requested optimization.  If the optimization has finished computing, the body of the response will contain result in JSON.  Otherwise, the optimization is still running and the X-FactSet-Api-PickUp-Progress header will contain a progress percentage.
        /// </remarks>
        /// <exception cref="FactSet.SDK.FactSetPortfolioOptimizer.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">from url, provided from the location header in the Run Optimization endpoint</param>
        /// <returns>void</returns>
        void GetFPOOptimizationById(string id);

        /// <summary>
        /// Get FPO optimization by id
        /// </summary>
        /// <remarks>
        /// This is the endpoint to check on the progress of a previously requested optimization.  If the optimization has finished computing, the body of the response will contain result in JSON.  Otherwise, the optimization is still running and the X-FactSet-Api-PickUp-Progress header will contain a progress percentage.
        /// </remarks>
        /// <exception cref="FactSet.SDK.FactSetPortfolioOptimizer.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">from url, provided from the location header in the Run Optimization endpoint</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetFPOOptimizationByIdWithHttpInfo(string id);
        /// <summary>
        /// Run FPO optimization
        /// </summary>
        /// <remarks>
        /// This endpoint runs FPO optimization specified in the POST body parameters.  It must be used first before polling or cancelling endpoints.  A successful response will contain the URL to poll for the result of the optimization.                Remarks:                * Any settings in POST body will act as a one-time override over the settings saved in the strategy document.
        /// </remarks>
        /// <exception cref="FactSet.SDK.FactSetPortfolioOptimizer.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fPOOptimizationParameters"> (optional)</param>
        /// <returns>void</returns>
        void RunFPOOptimization(FPOOptimizationParameters fPOOptimizationParameters = default(FPOOptimizationParameters));

        /// <summary>
        /// Run FPO optimization
        /// </summary>
        /// <remarks>
        /// This endpoint runs FPO optimization specified in the POST body parameters.  It must be used first before polling or cancelling endpoints.  A successful response will contain the URL to poll for the result of the optimization.                Remarks:                * Any settings in POST body will act as a one-time override over the settings saved in the strategy document.
        /// </remarks>
        /// <exception cref="FactSet.SDK.FactSetPortfolioOptimizer.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fPOOptimizationParameters"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> RunFPOOptimizationWithHttpInfo(FPOOptimizationParameters fPOOptimizationParameters = default(FPOOptimizationParameters));
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IOptimizationsApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Cancel FPO optimization by id
        /// </summary>
        /// <remarks>
        /// This is the endpoint to cancel a previously submitted optimization. Instead of doing a GET on the polling URL, cancel the request by doing a DELETE.
        /// </remarks>
        /// <exception cref="FactSet.SDK.FactSetPortfolioOptimizer.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">from url, provided from the location header in the Run Optimization endpoint</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task CancelFPOOptimizationByIdAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Cancel FPO optimization by id
        /// </summary>
        /// <remarks>
        /// This is the endpoint to cancel a previously submitted optimization. Instead of doing a GET on the polling URL, cancel the request by doing a DELETE.
        /// </remarks>
        /// <exception cref="FactSet.SDK.FactSetPortfolioOptimizer.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">from url, provided from the location header in the Run Optimization endpoint</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> CancelFPOOptimizationByIdWithHttpInfoAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get FPO optimization by id
        /// </summary>
        /// <remarks>
        /// This is the endpoint to check on the progress of a previously requested optimization.  If the optimization has finished computing, the body of the response will contain result in JSON.  Otherwise, the optimization is still running and the X-FactSet-Api-PickUp-Progress header will contain a progress percentage.
        /// </remarks>
        /// <exception cref="FactSet.SDK.FactSetPortfolioOptimizer.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">from url, provided from the location header in the Run Optimization endpoint</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task GetFPOOptimizationByIdAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get FPO optimization by id
        /// </summary>
        /// <remarks>
        /// This is the endpoint to check on the progress of a previously requested optimization.  If the optimization has finished computing, the body of the response will contain result in JSON.  Otherwise, the optimization is still running and the X-FactSet-Api-PickUp-Progress header will contain a progress percentage.
        /// </remarks>
        /// <exception cref="FactSet.SDK.FactSetPortfolioOptimizer.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">from url, provided from the location header in the Run Optimization endpoint</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GetFPOOptimizationByIdWithHttpInfoAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Run FPO optimization
        /// </summary>
        /// <remarks>
        /// This endpoint runs FPO optimization specified in the POST body parameters.  It must be used first before polling or cancelling endpoints.  A successful response will contain the URL to poll for the result of the optimization.                Remarks:                * Any settings in POST body will act as a one-time override over the settings saved in the strategy document.
        /// </remarks>
        /// <exception cref="FactSet.SDK.FactSetPortfolioOptimizer.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fPOOptimizationParameters"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task RunFPOOptimizationAsync(FPOOptimizationParameters fPOOptimizationParameters = default(FPOOptimizationParameters), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Run FPO optimization
        /// </summary>
        /// <remarks>
        /// This endpoint runs FPO optimization specified in the POST body parameters.  It must be used first before polling or cancelling endpoints.  A successful response will contain the URL to poll for the result of the optimization.                Remarks:                * Any settings in POST body will act as a one-time override over the settings saved in the strategy document.
        /// </remarks>
        /// <exception cref="FactSet.SDK.FactSetPortfolioOptimizer.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fPOOptimizationParameters"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> RunFPOOptimizationWithHttpInfoAsync(FPOOptimizationParameters fPOOptimizationParameters = default(FPOOptimizationParameters), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IOptimizationsApi : IOptimizationsApiSync, IOptimizationsApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class OptimizationsApi : IOptimizationsApi
    {
        private FactSet.SDK.FactSetPortfolioOptimizer.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        # region Response Type Disctionaries
                private static readonly Dictionary<HttpStatusCode, System.Type> CancelFPOOptimizationByIdResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
        };
        private static readonly Dictionary<HttpStatusCode, System.Type> GetFPOOptimizationByIdResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
        };
        private static readonly Dictionary<HttpStatusCode, System.Type> RunFPOOptimizationResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
        };

        # endregion Response Type Disctionaries

        # region Api Response Objects
         

        # endregion Api Response Objects

        /// <summary>
        /// Initializes a new instance of the <see cref="OptimizationsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public OptimizationsApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="OptimizationsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public OptimizationsApi(string basePath)
        {
            this.Configuration = FactSet.SDK.FactSetPortfolioOptimizer.Client.Configuration.MergeConfigurations(
                FactSet.SDK.FactSetPortfolioOptimizer.Client.GlobalConfiguration.Instance,
                new FactSet.SDK.FactSetPortfolioOptimizer.Client.Configuration { BasePath = basePath }
            );
            this.Client = new FactSet.SDK.FactSetPortfolioOptimizer.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new FactSet.SDK.FactSetPortfolioOptimizer.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = FactSet.SDK.FactSetPortfolioOptimizer.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="OptimizationsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public OptimizationsApi(FactSet.SDK.FactSetPortfolioOptimizer.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = FactSet.SDK.FactSetPortfolioOptimizer.Client.Configuration.MergeConfigurations(
                FactSet.SDK.FactSetPortfolioOptimizer.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new FactSet.SDK.FactSetPortfolioOptimizer.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new FactSet.SDK.FactSetPortfolioOptimizer.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = FactSet.SDK.FactSetPortfolioOptimizer.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="OptimizationsApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public OptimizationsApi(FactSet.SDK.FactSetPortfolioOptimizer.Client.ISynchronousClient client, FactSet.SDK.FactSetPortfolioOptimizer.Client.IAsynchronousClient asyncClient, FactSet.SDK.FactSetPortfolioOptimizer.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = FactSet.SDK.FactSetPortfolioOptimizer.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public FactSet.SDK.FactSetPortfolioOptimizer.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public FactSet.SDK.FactSetPortfolioOptimizer.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public FactSet.SDK.FactSetPortfolioOptimizer.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public FactSet.SDK.FactSetPortfolioOptimizer.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Cancel FPO optimization by id This is the endpoint to cancel a previously submitted optimization. Instead of doing a GET on the polling URL, cancel the request by doing a DELETE.
        /// </summary>
        /// <exception cref="FactSet.SDK.FactSetPortfolioOptimizer.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">from url, provided from the location header in the Run Optimization endpoint</param>
        /// <returns>void</returns>
        public void CancelFPOOptimizationById(string id)
        {
            CancelFPOOptimizationByIdWithHttpInfo(id);
        }

        /// <summary>
        /// Cancel FPO optimization by id This is the endpoint to cancel a previously submitted optimization. Instead of doing a GET on the polling URL, cancel the request by doing a DELETE.
        /// </summary>
        /// <exception cref="FactSet.SDK.FactSetPortfolioOptimizer.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">from url, provided from the location header in the Run Optimization endpoint</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> CancelFPOOptimizationByIdWithHttpInfo(string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new FactSet.SDK.FactSetPortfolioOptimizer.Client.ApiException(400, "Missing required parameter 'id' when calling OptimizationsApi->CancelFPOOptimizationById");
            }

            FactSet.SDK.FactSetPortfolioOptimizer.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.FactSetPortfolioOptimizer.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = FactSet.SDK.FactSetPortfolioOptimizer.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.FactSetPortfolioOptimizer.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", FactSet.SDK.FactSetPortfolioOptimizer.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.FactSetPortfolioOptimizer.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = CancelFPOOptimizationByIdResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Delete<
            Object>("/analytics/engines/fpo/v1/optimizations/{id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CancelFPOOptimizationById", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// Cancel FPO optimization by id This is the endpoint to cancel a previously submitted optimization. Instead of doing a GET on the polling URL, cancel the request by doing a DELETE.
        /// </summary>
        /// <exception cref="FactSet.SDK.FactSetPortfolioOptimizer.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">from url, provided from the location header in the Run Optimization endpoint</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task CancelFPOOptimizationByIdAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await CancelFPOOptimizationByIdWithHttpInfoAsync(id, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Cancel FPO optimization by id This is the endpoint to cancel a previously submitted optimization. Instead of doing a GET on the polling URL, cancel the request by doing a DELETE.
        /// </summary>
        /// <exception cref="FactSet.SDK.FactSetPortfolioOptimizer.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">from url, provided from the location header in the Run Optimization endpoint</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>

        public async System.Threading.Tasks.Task<ApiResponse<Object>> CancelFPOOptimizationByIdWithHttpInfoAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new FactSet.SDK.FactSetPortfolioOptimizer.Client.ApiException(400, "Missing required parameter 'id' when calling OptimizationsApi->CancelFPOOptimizationById");
            }


            FactSet.SDK.FactSetPortfolioOptimizer.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.FactSetPortfolioOptimizer.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = FactSet.SDK.FactSetPortfolioOptimizer.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.FactSetPortfolioOptimizer.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", FactSet.SDK.FactSetPortfolioOptimizer.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.FactSetPortfolioOptimizer.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = CancelFPOOptimizationByIdResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/analytics/engines/fpo/v1/optimizations/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CancelFPOOptimizationById", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get FPO optimization by id This is the endpoint to check on the progress of a previously requested optimization.  If the optimization has finished computing, the body of the response will contain result in JSON.  Otherwise, the optimization is still running and the X-FactSet-Api-PickUp-Progress header will contain a progress percentage.
        /// </summary>
        /// <exception cref="FactSet.SDK.FactSetPortfolioOptimizer.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">from url, provided from the location header in the Run Optimization endpoint</param>
        /// <returns>void</returns>
        public void GetFPOOptimizationById(string id)
        {
            GetFPOOptimizationByIdWithHttpInfo(id);
        }

        /// <summary>
        /// Get FPO optimization by id This is the endpoint to check on the progress of a previously requested optimization.  If the optimization has finished computing, the body of the response will contain result in JSON.  Otherwise, the optimization is still running and the X-FactSet-Api-PickUp-Progress header will contain a progress percentage.
        /// </summary>
        /// <exception cref="FactSet.SDK.FactSetPortfolioOptimizer.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">from url, provided from the location header in the Run Optimization endpoint</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> GetFPOOptimizationByIdWithHttpInfo(string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new FactSet.SDK.FactSetPortfolioOptimizer.Client.ApiException(400, "Missing required parameter 'id' when calling OptimizationsApi->GetFPOOptimizationById");
            }

            FactSet.SDK.FactSetPortfolioOptimizer.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.FactSetPortfolioOptimizer.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = FactSet.SDK.FactSetPortfolioOptimizer.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.FactSetPortfolioOptimizer.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", FactSet.SDK.FactSetPortfolioOptimizer.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.FactSetPortfolioOptimizer.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = GetFPOOptimizationByIdResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Get<
            Object>("/analytics/engines/fpo/v1/optimizations/{id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetFPOOptimizationById", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// Get FPO optimization by id This is the endpoint to check on the progress of a previously requested optimization.  If the optimization has finished computing, the body of the response will contain result in JSON.  Otherwise, the optimization is still running and the X-FactSet-Api-PickUp-Progress header will contain a progress percentage.
        /// </summary>
        /// <exception cref="FactSet.SDK.FactSetPortfolioOptimizer.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">from url, provided from the location header in the Run Optimization endpoint</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task GetFPOOptimizationByIdAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await GetFPOOptimizationByIdWithHttpInfoAsync(id, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Get FPO optimization by id This is the endpoint to check on the progress of a previously requested optimization.  If the optimization has finished computing, the body of the response will contain result in JSON.  Otherwise, the optimization is still running and the X-FactSet-Api-PickUp-Progress header will contain a progress percentage.
        /// </summary>
        /// <exception cref="FactSet.SDK.FactSetPortfolioOptimizer.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">from url, provided from the location header in the Run Optimization endpoint</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>

        public async System.Threading.Tasks.Task<ApiResponse<Object>> GetFPOOptimizationByIdWithHttpInfoAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new FactSet.SDK.FactSetPortfolioOptimizer.Client.ApiException(400, "Missing required parameter 'id' when calling OptimizationsApi->GetFPOOptimizationById");
            }


            FactSet.SDK.FactSetPortfolioOptimizer.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.FactSetPortfolioOptimizer.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = FactSet.SDK.FactSetPortfolioOptimizer.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.FactSetPortfolioOptimizer.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", FactSet.SDK.FactSetPortfolioOptimizer.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.FactSetPortfolioOptimizer.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = GetFPOOptimizationByIdResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/analytics/engines/fpo/v1/optimizations/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetFPOOptimizationById", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Run FPO optimization This endpoint runs FPO optimization specified in the POST body parameters.  It must be used first before polling or cancelling endpoints.  A successful response will contain the URL to poll for the result of the optimization.                Remarks:                * Any settings in POST body will act as a one-time override over the settings saved in the strategy document.
        /// </summary>
        /// <exception cref="FactSet.SDK.FactSetPortfolioOptimizer.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fPOOptimizationParameters"> (optional)</param>
        /// <returns>void</returns>
        public void RunFPOOptimization(FPOOptimizationParameters fPOOptimizationParameters = default(FPOOptimizationParameters))
        {
            RunFPOOptimizationWithHttpInfo(fPOOptimizationParameters);
        }

        /// <summary>
        /// Run FPO optimization This endpoint runs FPO optimization specified in the POST body parameters.  It must be used first before polling or cancelling endpoints.  A successful response will contain the URL to poll for the result of the optimization.                Remarks:                * Any settings in POST body will act as a one-time override over the settings saved in the strategy document.
        /// </summary>
        /// <exception cref="FactSet.SDK.FactSetPortfolioOptimizer.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fPOOptimizationParameters"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> RunFPOOptimizationWithHttpInfo(FPOOptimizationParameters fPOOptimizationParameters = default(FPOOptimizationParameters))
        {
            FactSet.SDK.FactSetPortfolioOptimizer.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.FactSetPortfolioOptimizer.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = FactSet.SDK.FactSetPortfolioOptimizer.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.FactSetPortfolioOptimizer.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = fPOOptimizationParameters;

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.FactSetPortfolioOptimizer.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = RunFPOOptimizationResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Post<
            Object>("/analytics/engines/fpo/v1/optimizations", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RunFPOOptimization", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// Run FPO optimization This endpoint runs FPO optimization specified in the POST body parameters.  It must be used first before polling or cancelling endpoints.  A successful response will contain the URL to poll for the result of the optimization.                Remarks:                * Any settings in POST body will act as a one-time override over the settings saved in the strategy document.
        /// </summary>
        /// <exception cref="FactSet.SDK.FactSetPortfolioOptimizer.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fPOOptimizationParameters"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task RunFPOOptimizationAsync(FPOOptimizationParameters fPOOptimizationParameters = default(FPOOptimizationParameters), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await RunFPOOptimizationWithHttpInfoAsync(fPOOptimizationParameters, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Run FPO optimization This endpoint runs FPO optimization specified in the POST body parameters.  It must be used first before polling or cancelling endpoints.  A successful response will contain the URL to poll for the result of the optimization.                Remarks:                * Any settings in POST body will act as a one-time override over the settings saved in the strategy document.
        /// </summary>
        /// <exception cref="FactSet.SDK.FactSetPortfolioOptimizer.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fPOOptimizationParameters"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>

        public async System.Threading.Tasks.Task<ApiResponse<Object>> RunFPOOptimizationWithHttpInfoAsync(FPOOptimizationParameters fPOOptimizationParameters = default(FPOOptimizationParameters), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            FactSet.SDK.FactSetPortfolioOptimizer.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.FactSetPortfolioOptimizer.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = FactSet.SDK.FactSetPortfolioOptimizer.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.FactSetPortfolioOptimizer.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = fPOOptimizationParameters;

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.FactSetPortfolioOptimizer.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = RunFPOOptimizationResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/analytics/engines/fpo/v1/optimizations", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RunFPOOptimization", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
