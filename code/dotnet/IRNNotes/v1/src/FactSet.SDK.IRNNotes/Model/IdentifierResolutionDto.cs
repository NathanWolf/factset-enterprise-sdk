/*
 * IRN API v1
 *
 * Allows users to extract, create, update and configure IRN data.
 *
 * The version of the OpenAPI document: 1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = FactSet.SDK.IRNNotes.Client.OpenAPIDateConverter;

namespace FactSet.SDK.IRNNotes.Model
{
    /// <summary>
    /// IdentifierResolutionDto
    /// </summary>
    [DataContract(Name = "IdentifierResolutionDto")]
    public partial class IdentifierResolutionDto : IEquatable<IdentifierResolutionDto>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="IdentifierResolutionDto" /> class.
        /// </summary>
        /// <param name="instrumentMetadata">instrumentMetadata.</param>
        /// <param name="query">query.</param>
        public IdentifierResolutionDto(ResolvedInstrumentDto instrumentMetadata = default(ResolvedInstrumentDto), string query = default(string))
        {
            this.InstrumentMetadata = instrumentMetadata;
            this.Query = query;
        }

        /// <summary>
        /// Gets or Sets InstrumentMetadata
        /// </summary>
        [DataMember(Name = "instrumentMetadata", EmitDefaultValue = false)]
        public ResolvedInstrumentDto InstrumentMetadata { get; set; }

        /// <summary>
        /// Gets or Sets Query
        /// </summary>
        [DataMember(Name = "query", EmitDefaultValue = true)]
        public string Query { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class IdentifierResolutionDto {\n");
            sb.Append("  InstrumentMetadata: ").Append(InstrumentMetadata).Append("\n");
            sb.Append("  Query: ").Append(Query).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as IdentifierResolutionDto);
        }

        /// <summary>
        /// Returns true if IdentifierResolutionDto instances are equal
        /// </summary>
        /// <param name="input">Instance of IdentifierResolutionDto to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(IdentifierResolutionDto input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.InstrumentMetadata == input.InstrumentMetadata ||
                    (this.InstrumentMetadata != null &&
                    this.InstrumentMetadata.Equals(input.InstrumentMetadata))
                ) && 
                (
                    this.Query == input.Query ||
                    (this.Query != null &&
                    this.Query.Equals(input.Query))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.InstrumentMetadata != null)
                    hashCode = hashCode * 59 + this.InstrumentMetadata.GetHashCode();
                if (this.Query != null)
                    hashCode = hashCode * 59 + this.Query.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
