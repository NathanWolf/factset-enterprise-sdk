/*
 * Natural Language Processing API
 *
 * APIs that leverage Natural Language Processing to help extract meaningful data from unstructured text
 *
 * The version of the OpenAPI document: 1.3.0
 * Contact: api@factset.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using FactSet.SDK.NaturalLanguageProcessing.Client;
using FactSet.SDK.NaturalLanguageProcessing.Model;
using FactSet.SDK.Utils.Authentication;

namespace FactSet.SDK.NaturalLanguageProcessing.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IAIThemesApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Endpoint to begin theme extraction job
        /// </summary>
        /// <remarks>
        /// Endpoint to extract themes from provided text. Optionally, can include sentiment for each theme extracted. Please check the schema(s) for each of the status codes for more details.
        /// </remarks>
        /// <exception cref="FactSet.SDK.NaturalLanguageProcessing.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="themesParametersRoot"></param>
        /// <returns>TaskRoot</returns>
        TaskRoot ThemesExtractThemes(ThemesParametersRoot themesParametersRoot);

        /// <summary>
        /// Endpoint to begin theme extraction job
        /// </summary>
        /// <remarks>
        /// Endpoint to extract themes from provided text. Optionally, can include sentiment for each theme extracted. Please check the schema(s) for each of the status codes for more details.
        /// </remarks>
        /// <exception cref="FactSet.SDK.NaturalLanguageProcessing.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="themesParametersRoot"></param>
        /// <returns>ApiResponse of TaskRoot</returns>
        ApiResponse<TaskRoot> ThemesExtractThemesWithHttpInfo(ThemesParametersRoot themesParametersRoot);
        /// <summary>
        /// Endpoint to get the completion status of a themes job
        /// </summary>
        /// <remarks>
        /// Endpoint to obtain the completion status of the themes task request. The &#x60;id&#x60; parameter represents the task.
        /// </remarks>
        /// <exception cref="FactSet.SDK.NaturalLanguageProcessing.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Long running task identifier</param>
        /// <returns>TaskRoot</returns>
        TaskRoot ThemesGetStatus(string id);

        /// <summary>
        /// Endpoint to get the completion status of a themes job
        /// </summary>
        /// <remarks>
        /// Endpoint to obtain the completion status of the themes task request. The &#x60;id&#x60; parameter represents the task.
        /// </remarks>
        /// <exception cref="FactSet.SDK.NaturalLanguageProcessing.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Long running task identifier</param>
        /// <returns>ApiResponse of TaskRoot</returns>
        ApiResponse<TaskRoot> ThemesGetStatusWithHttpInfo(string id);
        /// <summary>
        /// Endpoint to get a theme (and sentiments if requested) job result
        /// </summary>
        /// <remarks>
        /// Endpoint to obtain the results from the original themes task request. The &#x60;id&#x60; parameter represents the identifier of the task generated from the POST request which created the task. Once the task is complete, the result can be fetched with this endpoint.
        /// </remarks>
        /// <exception cref="FactSet.SDK.NaturalLanguageProcessing.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Long running task identifier</param>
        /// <returns>ThemeSentimentsRoot</returns>
        ThemeSentimentsRoot ThemesGetThemes(string id);

        /// <summary>
        /// Endpoint to get a theme (and sentiments if requested) job result
        /// </summary>
        /// <remarks>
        /// Endpoint to obtain the results from the original themes task request. The &#x60;id&#x60; parameter represents the identifier of the task generated from the POST request which created the task. Once the task is complete, the result can be fetched with this endpoint.
        /// </remarks>
        /// <exception cref="FactSet.SDK.NaturalLanguageProcessing.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Long running task identifier</param>
        /// <returns>ApiResponse of ThemeSentimentsRoot</returns>
        ApiResponse<ThemeSentimentsRoot> ThemesGetThemesWithHttpInfo(string id);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IAIThemesApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Endpoint to begin theme extraction job
        /// </summary>
        /// <remarks>
        /// Endpoint to extract themes from provided text. Optionally, can include sentiment for each theme extracted. Please check the schema(s) for each of the status codes for more details.
        /// </remarks>
        /// <exception cref="FactSet.SDK.NaturalLanguageProcessing.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="themesParametersRoot"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TaskRoot</returns>
        System.Threading.Tasks.Task<TaskRoot> ThemesExtractThemesAsync(ThemesParametersRoot themesParametersRoot, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Endpoint to begin theme extraction job
        /// </summary>
        /// <remarks>
        /// Endpoint to extract themes from provided text. Optionally, can include sentiment for each theme extracted. Please check the schema(s) for each of the status codes for more details.
        /// </remarks>
        /// <exception cref="FactSet.SDK.NaturalLanguageProcessing.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="themesParametersRoot"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TaskRoot)</returns>
        System.Threading.Tasks.Task<ApiResponse<TaskRoot>> ThemesExtractThemesWithHttpInfoAsync(ThemesParametersRoot themesParametersRoot, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Endpoint to get the completion status of a themes job
        /// </summary>
        /// <remarks>
        /// Endpoint to obtain the completion status of the themes task request. The &#x60;id&#x60; parameter represents the task.
        /// </remarks>
        /// <exception cref="FactSet.SDK.NaturalLanguageProcessing.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Long running task identifier</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TaskRoot</returns>
        System.Threading.Tasks.Task<TaskRoot> ThemesGetStatusAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Endpoint to get the completion status of a themes job
        /// </summary>
        /// <remarks>
        /// Endpoint to obtain the completion status of the themes task request. The &#x60;id&#x60; parameter represents the task.
        /// </remarks>
        /// <exception cref="FactSet.SDK.NaturalLanguageProcessing.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Long running task identifier</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TaskRoot)</returns>
        System.Threading.Tasks.Task<ApiResponse<TaskRoot>> ThemesGetStatusWithHttpInfoAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Endpoint to get a theme (and sentiments if requested) job result
        /// </summary>
        /// <remarks>
        /// Endpoint to obtain the results from the original themes task request. The &#x60;id&#x60; parameter represents the identifier of the task generated from the POST request which created the task. Once the task is complete, the result can be fetched with this endpoint.
        /// </remarks>
        /// <exception cref="FactSet.SDK.NaturalLanguageProcessing.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Long running task identifier</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ThemeSentimentsRoot</returns>
        System.Threading.Tasks.Task<ThemeSentimentsRoot> ThemesGetThemesAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Endpoint to get a theme (and sentiments if requested) job result
        /// </summary>
        /// <remarks>
        /// Endpoint to obtain the results from the original themes task request. The &#x60;id&#x60; parameter represents the identifier of the task generated from the POST request which created the task. Once the task is complete, the result can be fetched with this endpoint.
        /// </remarks>
        /// <exception cref="FactSet.SDK.NaturalLanguageProcessing.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Long running task identifier</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ThemeSentimentsRoot)</returns>
        System.Threading.Tasks.Task<ApiResponse<ThemeSentimentsRoot>> ThemesGetThemesWithHttpInfoAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IAIThemesApi : IAIThemesApiSync, IAIThemesApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class AIThemesApi : IAIThemesApi
    {
        private FactSet.SDK.NaturalLanguageProcessing.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        # region Response Type Disctionaries
        
        private static readonly Dictionary<HttpStatusCode, System.Type> ThemesExtractThemesResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)202, typeof(TaskRoot) },
            { (HttpStatusCode)400, typeof(HTTPErrorRoot) },
            { (HttpStatusCode)401, typeof(HTTPErrorRoot) },
            { (HttpStatusCode)500, typeof(HTTPErrorRoot) },
        };

        private static readonly Dictionary<HttpStatusCode, System.Type> ThemesGetStatusResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)201, typeof(TaskRoot) },
            { (HttpStatusCode)202, typeof(TaskRoot) },
            { (HttpStatusCode)404, typeof(HTTPErrorRoot) },
            { (HttpStatusCode)500, typeof(HTTPErrorRoot) },
        };

        private static readonly Dictionary<HttpStatusCode, System.Type> ThemesGetThemesResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)200, typeof(ThemeSentimentsRoot) },
            { (HttpStatusCode)202, typeof(TaskRoot) },
            { (HttpStatusCode)404, typeof(HTTPErrorRoot) },
            { (HttpStatusCode)500, typeof(HTTPErrorRoot) },
        };

        # endregion Response Type Disctionaries

        # region Api Response Objects
        

        # endregion Api Response Objects

        /// <summary>
        /// Initializes a new instance of the <see cref="AIThemesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public AIThemesApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AIThemesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public AIThemesApi(string basePath)
        {
            this.Configuration = FactSet.SDK.NaturalLanguageProcessing.Client.Configuration.MergeConfigurations(
                FactSet.SDK.NaturalLanguageProcessing.Client.GlobalConfiguration.Instance,
                new FactSet.SDK.NaturalLanguageProcessing.Client.Configuration { BasePath = basePath }
            );
            this.Client = new FactSet.SDK.NaturalLanguageProcessing.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new FactSet.SDK.NaturalLanguageProcessing.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = FactSet.SDK.NaturalLanguageProcessing.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AIThemesApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public AIThemesApi(FactSet.SDK.NaturalLanguageProcessing.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = FactSet.SDK.NaturalLanguageProcessing.Client.Configuration.MergeConfigurations(
                FactSet.SDK.NaturalLanguageProcessing.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new FactSet.SDK.NaturalLanguageProcessing.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new FactSet.SDK.NaturalLanguageProcessing.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = FactSet.SDK.NaturalLanguageProcessing.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AIThemesApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public AIThemesApi(FactSet.SDK.NaturalLanguageProcessing.Client.ISynchronousClient client, FactSet.SDK.NaturalLanguageProcessing.Client.IAsynchronousClient asyncClient, FactSet.SDK.NaturalLanguageProcessing.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = FactSet.SDK.NaturalLanguageProcessing.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public FactSet.SDK.NaturalLanguageProcessing.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public FactSet.SDK.NaturalLanguageProcessing.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public FactSet.SDK.NaturalLanguageProcessing.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public FactSet.SDK.NaturalLanguageProcessing.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Endpoint to begin theme extraction job Endpoint to extract themes from provided text. Optionally, can include sentiment for each theme extracted. Please check the schema(s) for each of the status codes for more details.
        /// </summary>
        /// <exception cref="FactSet.SDK.NaturalLanguageProcessing.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="themesParametersRoot"></param>
        /// <returns>TaskRoot</returns>
        public TaskRoot ThemesExtractThemes(ThemesParametersRoot themesParametersRoot)
        {
            var localVarResponse = ThemesExtractThemesWithHttpInfo(themesParametersRoot);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Endpoint to begin theme extraction job Endpoint to extract themes from provided text. Optionally, can include sentiment for each theme extracted. Please check the schema(s) for each of the status codes for more details.
        /// </summary>
        /// <exception cref="FactSet.SDK.NaturalLanguageProcessing.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="themesParametersRoot"></param>
        /// <returns>ApiResponse of TaskRoot</returns>
        public ApiResponse<TaskRoot> ThemesExtractThemesWithHttpInfo(ThemesParametersRoot themesParametersRoot)
        {
            // verify the required parameter 'themesParametersRoot' is set
            if (themesParametersRoot == null)
            {
                throw new FactSet.SDK.NaturalLanguageProcessing.Client.ApiException(400, "Missing required parameter 'themesParametersRoot' when calling AIThemesApi->ThemesExtractThemes");
            }

            FactSet.SDK.NaturalLanguageProcessing.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.NaturalLanguageProcessing.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.NaturalLanguageProcessing.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.NaturalLanguageProcessing.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = themesParametersRoot;

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.NaturalLanguageProcessing.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = ThemesExtractThemesResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Post<
            TaskRoot>("/themes", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ThemesExtractThemes", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// Endpoint to begin theme extraction job Endpoint to extract themes from provided text. Optionally, can include sentiment for each theme extracted. Please check the schema(s) for each of the status codes for more details.
        /// </summary>
        /// <exception cref="FactSet.SDK.NaturalLanguageProcessing.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="themesParametersRoot"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TaskRoot</returns>
        public async System.Threading.Tasks.Task<TaskRoot>ThemesExtractThemesAsync(ThemesParametersRoot themesParametersRoot, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await ThemesExtractThemesWithHttpInfoAsync(themesParametersRoot, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Endpoint to begin theme extraction job Endpoint to extract themes from provided text. Optionally, can include sentiment for each theme extracted. Please check the schema(s) for each of the status codes for more details.
        /// </summary>
        /// <exception cref="FactSet.SDK.NaturalLanguageProcessing.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="themesParametersRoot"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TaskRoot)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<TaskRoot>> ThemesExtractThemesWithHttpInfoAsync(ThemesParametersRoot themesParametersRoot, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'themesParametersRoot' is set
            if (themesParametersRoot == null)
            {
                throw new FactSet.SDK.NaturalLanguageProcessing.Client.ApiException(400, "Missing required parameter 'themesParametersRoot' when calling AIThemesApi->ThemesExtractThemes");
            }


            FactSet.SDK.NaturalLanguageProcessing.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.NaturalLanguageProcessing.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.NaturalLanguageProcessing.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.NaturalLanguageProcessing.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = themesParametersRoot;

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.NaturalLanguageProcessing.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = ThemesExtractThemesResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<TaskRoot>("/themes", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ThemesExtractThemes", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Endpoint to get the completion status of a themes job Endpoint to obtain the completion status of the themes task request. The &#x60;id&#x60; parameter represents the task.
        /// </summary>
        /// <exception cref="FactSet.SDK.NaturalLanguageProcessing.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Long running task identifier</param>
        /// <returns>TaskRoot</returns>
        public TaskRoot ThemesGetStatus(string id)
        {
            var localVarResponse = ThemesGetStatusWithHttpInfo(id);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Endpoint to get the completion status of a themes job Endpoint to obtain the completion status of the themes task request. The &#x60;id&#x60; parameter represents the task.
        /// </summary>
        /// <exception cref="FactSet.SDK.NaturalLanguageProcessing.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Long running task identifier</param>
        /// <returns>ApiResponse of TaskRoot</returns>
        public ApiResponse<TaskRoot> ThemesGetStatusWithHttpInfo(string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new FactSet.SDK.NaturalLanguageProcessing.Client.ApiException(400, "Missing required parameter 'id' when calling AIThemesApi->ThemesGetStatus");
            }

            FactSet.SDK.NaturalLanguageProcessing.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.NaturalLanguageProcessing.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.NaturalLanguageProcessing.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.NaturalLanguageProcessing.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", FactSet.SDK.NaturalLanguageProcessing.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.NaturalLanguageProcessing.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = ThemesGetStatusResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Get<
            TaskRoot>("/themes/{id}/status", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ThemesGetStatus", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// Endpoint to get the completion status of a themes job Endpoint to obtain the completion status of the themes task request. The &#x60;id&#x60; parameter represents the task.
        /// </summary>
        /// <exception cref="FactSet.SDK.NaturalLanguageProcessing.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Long running task identifier</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TaskRoot</returns>
        public async System.Threading.Tasks.Task<TaskRoot>ThemesGetStatusAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await ThemesGetStatusWithHttpInfoAsync(id, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Endpoint to get the completion status of a themes job Endpoint to obtain the completion status of the themes task request. The &#x60;id&#x60; parameter represents the task.
        /// </summary>
        /// <exception cref="FactSet.SDK.NaturalLanguageProcessing.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Long running task identifier</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TaskRoot)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<TaskRoot>> ThemesGetStatusWithHttpInfoAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new FactSet.SDK.NaturalLanguageProcessing.Client.ApiException(400, "Missing required parameter 'id' when calling AIThemesApi->ThemesGetStatus");
            }


            FactSet.SDK.NaturalLanguageProcessing.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.NaturalLanguageProcessing.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.NaturalLanguageProcessing.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.NaturalLanguageProcessing.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", FactSet.SDK.NaturalLanguageProcessing.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.NaturalLanguageProcessing.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = ThemesGetStatusResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<TaskRoot>("/themes/{id}/status", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ThemesGetStatus", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Endpoint to get a theme (and sentiments if requested) job result Endpoint to obtain the results from the original themes task request. The &#x60;id&#x60; parameter represents the identifier of the task generated from the POST request which created the task. Once the task is complete, the result can be fetched with this endpoint.
        /// </summary>
        /// <exception cref="FactSet.SDK.NaturalLanguageProcessing.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Long running task identifier</param>
        /// <returns>ThemeSentimentsRoot</returns>
        public ThemeSentimentsRoot ThemesGetThemes(string id)
        {
            var localVarResponse = ThemesGetThemesWithHttpInfo(id);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Endpoint to get a theme (and sentiments if requested) job result Endpoint to obtain the results from the original themes task request. The &#x60;id&#x60; parameter represents the identifier of the task generated from the POST request which created the task. Once the task is complete, the result can be fetched with this endpoint.
        /// </summary>
        /// <exception cref="FactSet.SDK.NaturalLanguageProcessing.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Long running task identifier</param>
        /// <returns>ApiResponse of ThemeSentimentsRoot</returns>
        public ApiResponse<ThemeSentimentsRoot> ThemesGetThemesWithHttpInfo(string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new FactSet.SDK.NaturalLanguageProcessing.Client.ApiException(400, "Missing required parameter 'id' when calling AIThemesApi->ThemesGetThemes");
            }

            FactSet.SDK.NaturalLanguageProcessing.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.NaturalLanguageProcessing.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.NaturalLanguageProcessing.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.NaturalLanguageProcessing.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", FactSet.SDK.NaturalLanguageProcessing.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.NaturalLanguageProcessing.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = ThemesGetThemesResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Get<
            ThemeSentimentsRoot>("/themes/{id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ThemesGetThemes", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// Endpoint to get a theme (and sentiments if requested) job result Endpoint to obtain the results from the original themes task request. The &#x60;id&#x60; parameter represents the identifier of the task generated from the POST request which created the task. Once the task is complete, the result can be fetched with this endpoint.
        /// </summary>
        /// <exception cref="FactSet.SDK.NaturalLanguageProcessing.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Long running task identifier</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ThemeSentimentsRoot</returns>
        public async System.Threading.Tasks.Task<ThemeSentimentsRoot>ThemesGetThemesAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await ThemesGetThemesWithHttpInfoAsync(id, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Endpoint to get a theme (and sentiments if requested) job result Endpoint to obtain the results from the original themes task request. The &#x60;id&#x60; parameter represents the identifier of the task generated from the POST request which created the task. Once the task is complete, the result can be fetched with this endpoint.
        /// </summary>
        /// <exception cref="FactSet.SDK.NaturalLanguageProcessing.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Long running task identifier</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ThemeSentimentsRoot)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<ThemeSentimentsRoot>> ThemesGetThemesWithHttpInfoAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new FactSet.SDK.NaturalLanguageProcessing.Client.ApiException(400, "Missing required parameter 'id' when calling AIThemesApi->ThemesGetThemes");
            }


            FactSet.SDK.NaturalLanguageProcessing.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.NaturalLanguageProcessing.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.NaturalLanguageProcessing.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.NaturalLanguageProcessing.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", FactSet.SDK.NaturalLanguageProcessing.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.NaturalLanguageProcessing.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = ThemesGetThemesResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ThemeSentimentsRoot>("/themes/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ThemesGetThemes", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
