/*
 * Natural Language Processing API
 *
 * APIs that leverage Natural Language Processing to help extract meaningful data from unstructured text
 *
 * The version of the OpenAPI document: 1.3.0
 * Contact: api@factset.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using FactSet.SDK.NaturalLanguageProcessing.Client;
using FactSet.SDK.NaturalLanguageProcessing.Model;
using FactSet.SDK.Utils.Authentication;

namespace FactSet.SDK.NaturalLanguageProcessing.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IQuestionAnswerApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Get the answer(s)
        /// </summary>
        /// <remarks>
        /// Obtain the results from the original task request. The &#x60;id&#x60; parameter represents the identifier from the task and comes from the POST request which created the task. Once the task is complete, the result can be fetched with this endpoint.
        /// </remarks>
        /// <exception cref="FactSet.SDK.NaturalLanguageProcessing.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier from the Question &amp; Answer task and comes from the POST request which created the task</param>
        /// <returns>QuestionAnswerApi.QnaGetAnswersResponseWrapper</returns>
        QuestionAnswerApi.QnaGetAnswersResponseWrapper QnaGetAnswers(string id);

        /// <summary>
        /// Get the answer(s)
        /// </summary>
        /// <remarks>
        /// Obtain the results from the original task request. The &#x60;id&#x60; parameter represents the identifier from the task and comes from the POST request which created the task. Once the task is complete, the result can be fetched with this endpoint.
        /// </remarks>
        /// <exception cref="FactSet.SDK.NaturalLanguageProcessing.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier from the Question &amp; Answer task and comes from the POST request which created the task</param>
        /// <returns>ApiResponse of QuestionAnswerApi.QnaGetAnswersResponseWrapper</returns>
        ApiResponse<QuestionAnswerApi.QnaGetAnswersResponseWrapper> QnaGetAnswersWithHttpInfo(string id);
        /// <summary>
        /// Get the completion status
        /// </summary>
        /// <remarks>
        /// Endpoint to obtain the status of the task request. The &#x60;id&#x60; parameter represents the identifier of the task created and comes from the POST request which created the task.
        /// </remarks>
        /// <exception cref="FactSet.SDK.NaturalLanguageProcessing.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier from the Question &amp; Answer task and comes from the POST request which created the task</param>
        /// <returns>QnATaskRoot</returns>
        QnATaskRoot QnaGetStatus(string id);

        /// <summary>
        /// Get the completion status
        /// </summary>
        /// <remarks>
        /// Endpoint to obtain the status of the task request. The &#x60;id&#x60; parameter represents the identifier of the task created and comes from the POST request which created the task.
        /// </remarks>
        /// <exception cref="FactSet.SDK.NaturalLanguageProcessing.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier from the Question &amp; Answer task and comes from the POST request which created the task</param>
        /// <returns>ApiResponse of QnATaskRoot</returns>
        ApiResponse<QnATaskRoot> QnaGetStatusWithHttpInfo(string id);
        /// <summary>
        /// Post a question for answer(s)
        /// </summary>
        /// <remarks>
        /// Create a task submission by providing plain text and question(s). The underlying model will answer the question. The created task needs to be polled to obtain the results. Please check the schema(s) for each of the status codes for more details about the task.
        /// </remarks>
        /// <exception cref="FactSet.SDK.NaturalLanguageProcessing.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="qnAAnswerParametersRoot"></param>
        /// <returns>QnATaskRoot</returns>
        QnATaskRoot QnaPostQuestion(QnAAnswerParametersRoot qnAAnswerParametersRoot);

        /// <summary>
        /// Post a question for answer(s)
        /// </summary>
        /// <remarks>
        /// Create a task submission by providing plain text and question(s). The underlying model will answer the question. The created task needs to be polled to obtain the results. Please check the schema(s) for each of the status codes for more details about the task.
        /// </remarks>
        /// <exception cref="FactSet.SDK.NaturalLanguageProcessing.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="qnAAnswerParametersRoot"></param>
        /// <returns>ApiResponse of QnATaskRoot</returns>
        ApiResponse<QnATaskRoot> QnaPostQuestionWithHttpInfo(QnAAnswerParametersRoot qnAAnswerParametersRoot);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IQuestionAnswerApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Get the answer(s)
        /// </summary>
        /// <remarks>
        /// Obtain the results from the original task request. The &#x60;id&#x60; parameter represents the identifier from the task and comes from the POST request which created the task. Once the task is complete, the result can be fetched with this endpoint.
        /// </remarks>
        /// <exception cref="FactSet.SDK.NaturalLanguageProcessing.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier from the Question &amp; Answer task and comes from the POST request which created the task</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of QnAAnswerRoot</returns>
        System.Threading.Tasks.Task<QuestionAnswerApi.QnaGetAnswersResponseWrapper> QnaGetAnswersAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get the answer(s)
        /// </summary>
        /// <remarks>
        /// Obtain the results from the original task request. The &#x60;id&#x60; parameter represents the identifier from the task and comes from the POST request which created the task. Once the task is complete, the result can be fetched with this endpoint.
        /// </remarks>
        /// <exception cref="FactSet.SDK.NaturalLanguageProcessing.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier from the Question &amp; Answer task and comes from the POST request which created the task</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (QuestionAnswerApi.QnaGetAnswersResponseWrapper)</returns>
        System.Threading.Tasks.Task<ApiResponse<QuestionAnswerApi.QnaGetAnswersResponseWrapper>> QnaGetAnswersWithHttpInfoAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get the completion status
        /// </summary>
        /// <remarks>
        /// Endpoint to obtain the status of the task request. The &#x60;id&#x60; parameter represents the identifier of the task created and comes from the POST request which created the task.
        /// </remarks>
        /// <exception cref="FactSet.SDK.NaturalLanguageProcessing.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier from the Question &amp; Answer task and comes from the POST request which created the task</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of QnATaskRoot</returns>
        System.Threading.Tasks.Task<QnATaskRoot> QnaGetStatusAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get the completion status
        /// </summary>
        /// <remarks>
        /// Endpoint to obtain the status of the task request. The &#x60;id&#x60; parameter represents the identifier of the task created and comes from the POST request which created the task.
        /// </remarks>
        /// <exception cref="FactSet.SDK.NaturalLanguageProcessing.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier from the Question &amp; Answer task and comes from the POST request which created the task</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (QnATaskRoot)</returns>
        System.Threading.Tasks.Task<ApiResponse<QnATaskRoot>> QnaGetStatusWithHttpInfoAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Post a question for answer(s)
        /// </summary>
        /// <remarks>
        /// Create a task submission by providing plain text and question(s). The underlying model will answer the question. The created task needs to be polled to obtain the results. Please check the schema(s) for each of the status codes for more details about the task.
        /// </remarks>
        /// <exception cref="FactSet.SDK.NaturalLanguageProcessing.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="qnAAnswerParametersRoot"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of QnATaskRoot</returns>
        System.Threading.Tasks.Task<QnATaskRoot> QnaPostQuestionAsync(QnAAnswerParametersRoot qnAAnswerParametersRoot, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Post a question for answer(s)
        /// </summary>
        /// <remarks>
        /// Create a task submission by providing plain text and question(s). The underlying model will answer the question. The created task needs to be polled to obtain the results. Please check the schema(s) for each of the status codes for more details about the task.
        /// </remarks>
        /// <exception cref="FactSet.SDK.NaturalLanguageProcessing.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="qnAAnswerParametersRoot"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (QnATaskRoot)</returns>
        System.Threading.Tasks.Task<ApiResponse<QnATaskRoot>> QnaPostQuestionWithHttpInfoAsync(QnAAnswerParametersRoot qnAAnswerParametersRoot, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IQuestionAnswerApi : IQuestionAnswerApiSync, IQuestionAnswerApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class QuestionAnswerApi : IQuestionAnswerApi
    {
        private FactSet.SDK.NaturalLanguageProcessing.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        # region Response Type Disctionaries
        
        private static readonly Dictionary<HttpStatusCode, System.Type> QnaGetAnswersResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)200, typeof(QnAAnswerRoot) },
            { (HttpStatusCode)202, typeof(QnATaskRoot) },
            { (HttpStatusCode)401, typeof(QnAHTTPErrorRoot) },
            { (HttpStatusCode)404, typeof(QnAHTTPErrorRoot) },
            { (HttpStatusCode)500, typeof(QnAHTTPErrorRoot) },
        };

        private static readonly Dictionary<HttpStatusCode, System.Type> QnaGetStatusResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)201, typeof(QnATaskRoot) },
            { (HttpStatusCode)202, typeof(QnATaskRoot) },
            { (HttpStatusCode)401, typeof(QnAHTTPErrorRoot) },
            { (HttpStatusCode)404, typeof(QnAHTTPErrorRoot) },
            { (HttpStatusCode)500, typeof(QnAHTTPErrorRoot) },
        };

        private static readonly Dictionary<HttpStatusCode, System.Type> QnaPostQuestionResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)202, typeof(QnATaskRoot) },
            { (HttpStatusCode)400, typeof(QnAHTTPErrorRoot) },
            { (HttpStatusCode)401, typeof(QnAHTTPErrorRoot) },
            { (HttpStatusCode)500, typeof(QnAHTTPErrorRoot) },
        };

        # endregion Response Type Disctionaries

        # region Api Response Objects
        
        /// <summary>
        /// Wrapper to support GET /qna/answers/{id} returning different types
        /// per status code.
        ///
        /// <list>
        /// <item>
        /// <description>
        /// 200 : QnAAnswerRoot<br />
        /// OK
        /// </description>
        /// </item>
        /// 
        /// <item>
        /// <description>
        /// 202 : QnATaskRoot<br />
        /// Accepted
        /// </description>
        /// </item>
        /// </list>
        ///
        /// <example>
        /// <code>
        /// QnaGetAnswersResponseWrapper response = ...;
        /// switch (response.statusCode)
        /// {
        ///   case 200:
        ///     QnAAnswerRoot data200 = response.getResponse200();
        ///     break;
        ///   case 202:
        ///     QnATaskRoot data202 = response.getResponse202();
        ///     break;
        ///  }
        /// </code>
        /// </example>
        /// </summary>
        public class QnaGetAnswersResponseWrapper {

            /// <summary>This constructor initializes the new QnaGetAnswersResponseWrapper to
            /// (<paramref name="statusCode"/>,<paramref name="response"/>).
            /// </summary>
            /// <param name="statusCode">Http status code of the response</param>
            /// <param name="response">Raw response</param>
            public QnaGetAnswersResponseWrapper(HttpStatusCode statusCode, object response)
            {
                StatusCode = statusCode;
                Response = response;
            }

            /// <summary>
            /// Http status code of the response
            /// </summary>
            public HttpStatusCode StatusCode { get; }

            /// <summary>
            /// Raw Object response
            /// </summary>
            public object Response { get; }

            
            /// <summary>
            /// OK
            /// </summary>
            public QnAAnswerRoot Response200
            {
                get
                {
                    if (StatusCode != (HttpStatusCode) 200)
                    {
                        throw new FactSet.SDK.NaturalLanguageProcessing.Client.ApiException(500, "Invalid response getter called. Response200 can't return a " + StatusCode + " response");
                    }
                    return (QnAAnswerRoot) Response;
                }
            }
            
            /// <summary>
            /// Accepted
            /// </summary>
            public QnATaskRoot Response202
            {
                get
                {
                    if (StatusCode != (HttpStatusCode) 202)
                    {
                        throw new FactSet.SDK.NaturalLanguageProcessing.Client.ApiException(500, "Invalid response getter called. Response202 can't return a " + StatusCode + " response");
                    }
                    return (QnATaskRoot) Response;
                }
            }
            
        }



        # endregion Api Response Objects

        /// <summary>
        /// Initializes a new instance of the <see cref="QuestionAnswerApi"/> class.
        /// </summary>
        /// <returns></returns>
        public QuestionAnswerApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="QuestionAnswerApi"/> class.
        /// </summary>
        /// <returns></returns>
        public QuestionAnswerApi(string basePath)
        {
            this.Configuration = FactSet.SDK.NaturalLanguageProcessing.Client.Configuration.MergeConfigurations(
                FactSet.SDK.NaturalLanguageProcessing.Client.GlobalConfiguration.Instance,
                new FactSet.SDK.NaturalLanguageProcessing.Client.Configuration { BasePath = basePath }
            );
            this.Client = new FactSet.SDK.NaturalLanguageProcessing.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new FactSet.SDK.NaturalLanguageProcessing.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = FactSet.SDK.NaturalLanguageProcessing.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="QuestionAnswerApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public QuestionAnswerApi(FactSet.SDK.NaturalLanguageProcessing.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = FactSet.SDK.NaturalLanguageProcessing.Client.Configuration.MergeConfigurations(
                FactSet.SDK.NaturalLanguageProcessing.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new FactSet.SDK.NaturalLanguageProcessing.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new FactSet.SDK.NaturalLanguageProcessing.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = FactSet.SDK.NaturalLanguageProcessing.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="QuestionAnswerApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public QuestionAnswerApi(FactSet.SDK.NaturalLanguageProcessing.Client.ISynchronousClient client, FactSet.SDK.NaturalLanguageProcessing.Client.IAsynchronousClient asyncClient, FactSet.SDK.NaturalLanguageProcessing.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = FactSet.SDK.NaturalLanguageProcessing.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public FactSet.SDK.NaturalLanguageProcessing.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public FactSet.SDK.NaturalLanguageProcessing.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public FactSet.SDK.NaturalLanguageProcessing.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public FactSet.SDK.NaturalLanguageProcessing.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Get the answer(s) Obtain the results from the original task request. The &#x60;id&#x60; parameter represents the identifier from the task and comes from the POST request which created the task. Once the task is complete, the result can be fetched with this endpoint.
        /// </summary>
        /// <exception cref="FactSet.SDK.NaturalLanguageProcessing.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier from the Question &amp; Answer task and comes from the POST request which created the task</param>
        /// <returns>QuestionAnswerApi.QnaGetAnswersResponseWrapper</returns>
        public QuestionAnswerApi.QnaGetAnswersResponseWrapper QnaGetAnswers(string id)
        {
            var localVarResponse = QnaGetAnswersWithHttpInfo(id);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get the answer(s) Obtain the results from the original task request. The &#x60;id&#x60; parameter represents the identifier from the task and comes from the POST request which created the task. Once the task is complete, the result can be fetched with this endpoint.
        /// </summary>
        /// <exception cref="FactSet.SDK.NaturalLanguageProcessing.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier from the Question &amp; Answer task and comes from the POST request which created the task</param>
        /// <returns>ApiResponse of QnAAnswerRoot</returns>
        public ApiResponse<QuestionAnswerApi.QnaGetAnswersResponseWrapper> QnaGetAnswersWithHttpInfo(string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new FactSet.SDK.NaturalLanguageProcessing.Client.ApiException(400, "Missing required parameter 'id' when calling QuestionAnswerApi->QnaGetAnswers");
            }

            FactSet.SDK.NaturalLanguageProcessing.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.NaturalLanguageProcessing.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.NaturalLanguageProcessing.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.NaturalLanguageProcessing.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", FactSet.SDK.NaturalLanguageProcessing.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.NaturalLanguageProcessing.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = QnaGetAnswersResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Get<
            Object>("/qna/answers/{id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("QnaGetAnswers", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            var qnagetanswersResponse = new QnaGetAnswersResponseWrapper(localVarResponse.StatusCode, localVarResponse.Data);
            return new ApiResponse<QnaGetAnswersResponseWrapper>(localVarResponse.StatusCode, qnagetanswersResponse);
        }

        /// <summary>
        /// Get the answer(s) Obtain the results from the original task request. The &#x60;id&#x60; parameter represents the identifier from the task and comes from the POST request which created the task. Once the task is complete, the result can be fetched with this endpoint.
        /// </summary>
        /// <exception cref="FactSet.SDK.NaturalLanguageProcessing.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier from the Question &amp; Answer task and comes from the POST request which created the task</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of QnAAnswerRoot</returns>
        public async System.Threading.Tasks.Task<QuestionAnswerApi.QnaGetAnswersResponseWrapper>QnaGetAnswersAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await QnaGetAnswersWithHttpInfoAsync(id, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get the answer(s) Obtain the results from the original task request. The &#x60;id&#x60; parameter represents the identifier from the task and comes from the POST request which created the task. Once the task is complete, the result can be fetched with this endpoint.
        /// </summary>
        /// <exception cref="FactSet.SDK.NaturalLanguageProcessing.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier from the Question &amp; Answer task and comes from the POST request which created the task</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (QnAAnswerRoot)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<QuestionAnswerApi.QnaGetAnswersResponseWrapper>> QnaGetAnswersWithHttpInfoAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new FactSet.SDK.NaturalLanguageProcessing.Client.ApiException(400, "Missing required parameter 'id' when calling QuestionAnswerApi->QnaGetAnswers");
            }


            FactSet.SDK.NaturalLanguageProcessing.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.NaturalLanguageProcessing.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.NaturalLanguageProcessing.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.NaturalLanguageProcessing.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", FactSet.SDK.NaturalLanguageProcessing.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.NaturalLanguageProcessing.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = QnaGetAnswersResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/qna/answers/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("QnaGetAnswers", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            var qnagetanswersResponse = new QnaGetAnswersResponseWrapper(localVarResponse.StatusCode, localVarResponse.Data);
            return new ApiResponse<QnaGetAnswersResponseWrapper>(localVarResponse.StatusCode, qnagetanswersResponse);
        }

        /// <summary>
        /// Get the completion status Endpoint to obtain the status of the task request. The &#x60;id&#x60; parameter represents the identifier of the task created and comes from the POST request which created the task.
        /// </summary>
        /// <exception cref="FactSet.SDK.NaturalLanguageProcessing.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier from the Question &amp; Answer task and comes from the POST request which created the task</param>
        /// <returns>QnATaskRoot</returns>
        public QnATaskRoot QnaGetStatus(string id)
        {
            var localVarResponse = QnaGetStatusWithHttpInfo(id);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get the completion status Endpoint to obtain the status of the task request. The &#x60;id&#x60; parameter represents the identifier of the task created and comes from the POST request which created the task.
        /// </summary>
        /// <exception cref="FactSet.SDK.NaturalLanguageProcessing.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier from the Question &amp; Answer task and comes from the POST request which created the task</param>
        /// <returns>ApiResponse of QnATaskRoot</returns>
        public ApiResponse<QnATaskRoot> QnaGetStatusWithHttpInfo(string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new FactSet.SDK.NaturalLanguageProcessing.Client.ApiException(400, "Missing required parameter 'id' when calling QuestionAnswerApi->QnaGetStatus");
            }

            FactSet.SDK.NaturalLanguageProcessing.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.NaturalLanguageProcessing.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.NaturalLanguageProcessing.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.NaturalLanguageProcessing.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", FactSet.SDK.NaturalLanguageProcessing.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.NaturalLanguageProcessing.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = QnaGetStatusResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Get<
            QnATaskRoot>("/qna/answers/{id}/status", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("QnaGetStatus", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// Get the completion status Endpoint to obtain the status of the task request. The &#x60;id&#x60; parameter represents the identifier of the task created and comes from the POST request which created the task.
        /// </summary>
        /// <exception cref="FactSet.SDK.NaturalLanguageProcessing.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier from the Question &amp; Answer task and comes from the POST request which created the task</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of QnATaskRoot</returns>
        public async System.Threading.Tasks.Task<QnATaskRoot>QnaGetStatusAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await QnaGetStatusWithHttpInfoAsync(id, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get the completion status Endpoint to obtain the status of the task request. The &#x60;id&#x60; parameter represents the identifier of the task created and comes from the POST request which created the task.
        /// </summary>
        /// <exception cref="FactSet.SDK.NaturalLanguageProcessing.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier from the Question &amp; Answer task and comes from the POST request which created the task</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (QnATaskRoot)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<QnATaskRoot>> QnaGetStatusWithHttpInfoAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new FactSet.SDK.NaturalLanguageProcessing.Client.ApiException(400, "Missing required parameter 'id' when calling QuestionAnswerApi->QnaGetStatus");
            }


            FactSet.SDK.NaturalLanguageProcessing.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.NaturalLanguageProcessing.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.NaturalLanguageProcessing.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.NaturalLanguageProcessing.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", FactSet.SDK.NaturalLanguageProcessing.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.NaturalLanguageProcessing.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = QnaGetStatusResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<QnATaskRoot>("/qna/answers/{id}/status", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("QnaGetStatus", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Post a question for answer(s) Create a task submission by providing plain text and question(s). The underlying model will answer the question. The created task needs to be polled to obtain the results. Please check the schema(s) for each of the status codes for more details about the task.
        /// </summary>
        /// <exception cref="FactSet.SDK.NaturalLanguageProcessing.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="qnAAnswerParametersRoot"></param>
        /// <returns>QnATaskRoot</returns>
        public QnATaskRoot QnaPostQuestion(QnAAnswerParametersRoot qnAAnswerParametersRoot)
        {
            var localVarResponse = QnaPostQuestionWithHttpInfo(qnAAnswerParametersRoot);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Post a question for answer(s) Create a task submission by providing plain text and question(s). The underlying model will answer the question. The created task needs to be polled to obtain the results. Please check the schema(s) for each of the status codes for more details about the task.
        /// </summary>
        /// <exception cref="FactSet.SDK.NaturalLanguageProcessing.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="qnAAnswerParametersRoot"></param>
        /// <returns>ApiResponse of QnATaskRoot</returns>
        public ApiResponse<QnATaskRoot> QnaPostQuestionWithHttpInfo(QnAAnswerParametersRoot qnAAnswerParametersRoot)
        {
            // verify the required parameter 'qnAAnswerParametersRoot' is set
            if (qnAAnswerParametersRoot == null)
            {
                throw new FactSet.SDK.NaturalLanguageProcessing.Client.ApiException(400, "Missing required parameter 'qnAAnswerParametersRoot' when calling QuestionAnswerApi->QnaPostQuestion");
            }

            FactSet.SDK.NaturalLanguageProcessing.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.NaturalLanguageProcessing.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.NaturalLanguageProcessing.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.NaturalLanguageProcessing.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = qnAAnswerParametersRoot;

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.NaturalLanguageProcessing.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = QnaPostQuestionResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Post<
            QnATaskRoot>("/qna/answers", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("QnaPostQuestion", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// Post a question for answer(s) Create a task submission by providing plain text and question(s). The underlying model will answer the question. The created task needs to be polled to obtain the results. Please check the schema(s) for each of the status codes for more details about the task.
        /// </summary>
        /// <exception cref="FactSet.SDK.NaturalLanguageProcessing.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="qnAAnswerParametersRoot"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of QnATaskRoot</returns>
        public async System.Threading.Tasks.Task<QnATaskRoot>QnaPostQuestionAsync(QnAAnswerParametersRoot qnAAnswerParametersRoot, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await QnaPostQuestionWithHttpInfoAsync(qnAAnswerParametersRoot, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Post a question for answer(s) Create a task submission by providing plain text and question(s). The underlying model will answer the question. The created task needs to be polled to obtain the results. Please check the schema(s) for each of the status codes for more details about the task.
        /// </summary>
        /// <exception cref="FactSet.SDK.NaturalLanguageProcessing.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="qnAAnswerParametersRoot"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (QnATaskRoot)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<QnATaskRoot>> QnaPostQuestionWithHttpInfoAsync(QnAAnswerParametersRoot qnAAnswerParametersRoot, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'qnAAnswerParametersRoot' is set
            if (qnAAnswerParametersRoot == null)
            {
                throw new FactSet.SDK.NaturalLanguageProcessing.Client.ApiException(400, "Missing required parameter 'qnAAnswerParametersRoot' when calling QuestionAnswerApi->QnaPostQuestion");
            }


            FactSet.SDK.NaturalLanguageProcessing.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.NaturalLanguageProcessing.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.NaturalLanguageProcessing.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.NaturalLanguageProcessing.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = qnAAnswerParametersRoot;

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.NaturalLanguageProcessing.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = QnaPostQuestionResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<QnATaskRoot>("/qna/answers", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("QnaPostQuestion", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
