/*
 * Natural Language Processing API
 *
 * APIs that leverage Natural Language Processing to help extract meaningful data from unstructured text
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: ai@factset.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using FactSet.SDK.NaturalLanguageProcessing.Client;
using FactSet.SDK.NaturalLanguageProcessing.Model;
using FactSet.SDK.Utils.Authentication;

namespace FactSet.SDK.NaturalLanguageProcessing.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IAITextSummarizationApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// POST request for summarizing an input text
        /// </summary>
        /// <exception cref="FactSet.SDK.NaturalLanguageProcessing.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="summarizationRequest"> (optional)</param>
        /// <returns>SummarizationResultID</returns>
        SummarizationResultID CognitiveNlpV1SummarizationHeadlineAndSummaryPost(SummarizationRequest summarizationRequest = default(SummarizationRequest));

        /// <summary>
        /// POST request for summarizing an input text
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FactSet.SDK.NaturalLanguageProcessing.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="summarizationRequest"> (optional)</param>
        /// <returns>ApiResponse of SummarizationResultID</returns>
        ApiResponse<SummarizationResultID> CognitiveNlpV1SummarizationHeadlineAndSummaryPostWithHttpInfo(SummarizationRequest summarizationRequest = default(SummarizationRequest));
        /// <summary>
        /// POST request for summarizing an input text
        /// </summary>
        /// <exception cref="FactSet.SDK.NaturalLanguageProcessing.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="summarizationRequest"> (optional)</param>
        /// <returns>SummarizationResultID</returns>
        SummarizationResultID CognitiveNlpV1SummarizationHeadlinePost(SummarizationRequest summarizationRequest = default(SummarizationRequest));

        /// <summary>
        /// POST request for summarizing an input text
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FactSet.SDK.NaturalLanguageProcessing.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="summarizationRequest"> (optional)</param>
        /// <returns>ApiResponse of SummarizationResultID</returns>
        ApiResponse<SummarizationResultID> CognitiveNlpV1SummarizationHeadlinePostWithHttpInfo(SummarizationRequest summarizationRequest = default(SummarizationRequest));
        /// <summary>
        /// GET request for obtaining response of a particular processing job
        /// </summary>
        /// <exception cref="FactSet.SDK.NaturalLanguageProcessing.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="resultId"></param>
        /// <returns>SummarizationResult</returns>
        SummarizationResult CognitiveNlpV1SummarizationResultResultIdGet(string resultId);

        /// <summary>
        /// GET request for obtaining response of a particular processing job
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FactSet.SDK.NaturalLanguageProcessing.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="resultId"></param>
        /// <returns>ApiResponse of SummarizationResult</returns>
        ApiResponse<SummarizationResult> CognitiveNlpV1SummarizationResultResultIdGetWithHttpInfo(string resultId);
        /// <summary>
        /// POST request for summarizing an input text
        /// </summary>
        /// <exception cref="FactSet.SDK.NaturalLanguageProcessing.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="summarizationRequest"> (optional)</param>
        /// <returns>SummarizationResultID</returns>
        SummarizationResultID CognitiveNlpV1SummarizationSummaryPost(SummarizationRequest summarizationRequest = default(SummarizationRequest));

        /// <summary>
        /// POST request for summarizing an input text
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FactSet.SDK.NaturalLanguageProcessing.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="summarizationRequest"> (optional)</param>
        /// <returns>ApiResponse of SummarizationResultID</returns>
        ApiResponse<SummarizationResultID> CognitiveNlpV1SummarizationSummaryPostWithHttpInfo(SummarizationRequest summarizationRequest = default(SummarizationRequest));
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IAITextSummarizationApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// POST request for summarizing an input text
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FactSet.SDK.NaturalLanguageProcessing.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="summarizationRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SummarizationResultID</returns>
        System.Threading.Tasks.Task<SummarizationResultID> CognitiveNlpV1SummarizationHeadlineAndSummaryPostAsync(SummarizationRequest summarizationRequest = default(SummarizationRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// POST request for summarizing an input text
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FactSet.SDK.NaturalLanguageProcessing.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="summarizationRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SummarizationResultID)</returns>
        System.Threading.Tasks.Task<ApiResponse<SummarizationResultID>> CognitiveNlpV1SummarizationHeadlineAndSummaryPostWithHttpInfoAsync(SummarizationRequest summarizationRequest = default(SummarizationRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// POST request for summarizing an input text
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FactSet.SDK.NaturalLanguageProcessing.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="summarizationRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SummarizationResultID</returns>
        System.Threading.Tasks.Task<SummarizationResultID> CognitiveNlpV1SummarizationHeadlinePostAsync(SummarizationRequest summarizationRequest = default(SummarizationRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// POST request for summarizing an input text
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FactSet.SDK.NaturalLanguageProcessing.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="summarizationRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SummarizationResultID)</returns>
        System.Threading.Tasks.Task<ApiResponse<SummarizationResultID>> CognitiveNlpV1SummarizationHeadlinePostWithHttpInfoAsync(SummarizationRequest summarizationRequest = default(SummarizationRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// GET request for obtaining response of a particular processing job
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FactSet.SDK.NaturalLanguageProcessing.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="resultId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SummarizationResult</returns>
        System.Threading.Tasks.Task<SummarizationResult> CognitiveNlpV1SummarizationResultResultIdGetAsync(string resultId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// GET request for obtaining response of a particular processing job
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FactSet.SDK.NaturalLanguageProcessing.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="resultId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SummarizationResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<SummarizationResult>> CognitiveNlpV1SummarizationResultResultIdGetWithHttpInfoAsync(string resultId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// POST request for summarizing an input text
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FactSet.SDK.NaturalLanguageProcessing.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="summarizationRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SummarizationResultID</returns>
        System.Threading.Tasks.Task<SummarizationResultID> CognitiveNlpV1SummarizationSummaryPostAsync(SummarizationRequest summarizationRequest = default(SummarizationRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// POST request for summarizing an input text
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FactSet.SDK.NaturalLanguageProcessing.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="summarizationRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SummarizationResultID)</returns>
        System.Threading.Tasks.Task<ApiResponse<SummarizationResultID>> CognitiveNlpV1SummarizationSummaryPostWithHttpInfoAsync(SummarizationRequest summarizationRequest = default(SummarizationRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IAITextSummarizationApi : IAITextSummarizationApiSync, IAITextSummarizationApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class AITextSummarizationApi : IAITextSummarizationApi
    {
        private FactSet.SDK.NaturalLanguageProcessing.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        # region Response Type Disctionaries
                private static readonly Dictionary<HttpStatusCode, System.Type> CognitiveNlpV1SummarizationHeadlineAndSummaryPostResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)201, typeof(SummarizationResultID) },
            { (HttpStatusCode)400, typeof(ValidationError) },
            { (HttpStatusCode)401, typeof(HTTPError) },
            { (HttpStatusCode)500, typeof(HTTPError) },
        };
        private static readonly Dictionary<HttpStatusCode, System.Type> CognitiveNlpV1SummarizationHeadlinePostResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)201, typeof(SummarizationResultID) },
            { (HttpStatusCode)400, typeof(ValidationError) },
            { (HttpStatusCode)401, typeof(HTTPError) },
            { (HttpStatusCode)500, typeof(HTTPError) },
        };
        private static readonly Dictionary<HttpStatusCode, System.Type> CognitiveNlpV1SummarizationResultResultIdGetResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)200, typeof(SummarizationResult) },
            { (HttpStatusCode)400, typeof(HTTPError) },
            { (HttpStatusCode)401, typeof(HTTPError) },
            { (HttpStatusCode)404, typeof(HTTPError) },
            { (HttpStatusCode)500, typeof(HTTPError) },
        };
        private static readonly Dictionary<HttpStatusCode, System.Type> CognitiveNlpV1SummarizationSummaryPostResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)201, typeof(SummarizationResultID) },
            { (HttpStatusCode)400, typeof(ValidationError) },
            { (HttpStatusCode)401, typeof(HTTPError) },
            { (HttpStatusCode)500, typeof(HTTPError) },
        };

        # endregion Response Type Disctionaries

        # region Api Response Objects
         

        # endregion Api Response Objects

        /// <summary>
        /// Initializes a new instance of the <see cref="AITextSummarizationApi"/> class.
        /// </summary>
        /// <returns></returns>
        public AITextSummarizationApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AITextSummarizationApi"/> class.
        /// </summary>
        /// <returns></returns>
        public AITextSummarizationApi(string basePath)
        {
            this.Configuration = FactSet.SDK.NaturalLanguageProcessing.Client.Configuration.MergeConfigurations(
                FactSet.SDK.NaturalLanguageProcessing.Client.GlobalConfiguration.Instance,
                new FactSet.SDK.NaturalLanguageProcessing.Client.Configuration { BasePath = basePath }
            );
            this.Client = new FactSet.SDK.NaturalLanguageProcessing.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new FactSet.SDK.NaturalLanguageProcessing.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = FactSet.SDK.NaturalLanguageProcessing.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AITextSummarizationApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public AITextSummarizationApi(FactSet.SDK.NaturalLanguageProcessing.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = FactSet.SDK.NaturalLanguageProcessing.Client.Configuration.MergeConfigurations(
                FactSet.SDK.NaturalLanguageProcessing.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new FactSet.SDK.NaturalLanguageProcessing.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new FactSet.SDK.NaturalLanguageProcessing.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = FactSet.SDK.NaturalLanguageProcessing.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AITextSummarizationApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public AITextSummarizationApi(FactSet.SDK.NaturalLanguageProcessing.Client.ISynchronousClient client, FactSet.SDK.NaturalLanguageProcessing.Client.IAsynchronousClient asyncClient, FactSet.SDK.NaturalLanguageProcessing.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = FactSet.SDK.NaturalLanguageProcessing.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public FactSet.SDK.NaturalLanguageProcessing.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public FactSet.SDK.NaturalLanguageProcessing.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public FactSet.SDK.NaturalLanguageProcessing.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public FactSet.SDK.NaturalLanguageProcessing.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// POST request for summarizing an input text 
        /// </summary>
        /// <exception cref="FactSet.SDK.NaturalLanguageProcessing.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="summarizationRequest"> (optional)</param>
        /// <returns>SummarizationResultID</returns>
        public SummarizationResultID CognitiveNlpV1SummarizationHeadlineAndSummaryPost(SummarizationRequest summarizationRequest = default(SummarizationRequest))
        {
            var localVarResponse = CognitiveNlpV1SummarizationHeadlineAndSummaryPostWithHttpInfo(summarizationRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// POST request for summarizing an input text 
        /// </summary>
        /// <exception cref="FactSet.SDK.NaturalLanguageProcessing.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="summarizationRequest"> (optional)</param>
        /// <returns>ApiResponse of SummarizationResultID</returns>
        public ApiResponse<SummarizationResultID> CognitiveNlpV1SummarizationHeadlineAndSummaryPostWithHttpInfo(SummarizationRequest summarizationRequest = default(SummarizationRequest))
        {
            FactSet.SDK.NaturalLanguageProcessing.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.NaturalLanguageProcessing.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.NaturalLanguageProcessing.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.NaturalLanguageProcessing.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = summarizationRequest;

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.NaturalLanguageProcessing.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = CognitiveNlpV1SummarizationHeadlineAndSummaryPostResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Post<
            SummarizationResultID>("/cognitive/nlp/v1/summarization/headline-and-summary", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CognitiveNlpV1SummarizationHeadlineAndSummaryPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// POST request for summarizing an input text 
        /// </summary>
        /// <exception cref="FactSet.SDK.NaturalLanguageProcessing.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="summarizationRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SummarizationResultID</returns>
        public async System.Threading.Tasks.Task<SummarizationResultID>CognitiveNlpV1SummarizationHeadlineAndSummaryPostAsync(SummarizationRequest summarizationRequest = default(SummarizationRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await CognitiveNlpV1SummarizationHeadlineAndSummaryPostWithHttpInfoAsync(summarizationRequest, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// POST request for summarizing an input text 
        /// </summary>
        /// <exception cref="FactSet.SDK.NaturalLanguageProcessing.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="summarizationRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SummarizationResultID)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<SummarizationResultID>> CognitiveNlpV1SummarizationHeadlineAndSummaryPostWithHttpInfoAsync(SummarizationRequest summarizationRequest = default(SummarizationRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            FactSet.SDK.NaturalLanguageProcessing.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.NaturalLanguageProcessing.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.NaturalLanguageProcessing.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.NaturalLanguageProcessing.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = summarizationRequest;

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.NaturalLanguageProcessing.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = CognitiveNlpV1SummarizationHeadlineAndSummaryPostResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<SummarizationResultID>("/cognitive/nlp/v1/summarization/headline-and-summary", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CognitiveNlpV1SummarizationHeadlineAndSummaryPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// POST request for summarizing an input text 
        /// </summary>
        /// <exception cref="FactSet.SDK.NaturalLanguageProcessing.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="summarizationRequest"> (optional)</param>
        /// <returns>SummarizationResultID</returns>
        public SummarizationResultID CognitiveNlpV1SummarizationHeadlinePost(SummarizationRequest summarizationRequest = default(SummarizationRequest))
        {
            var localVarResponse = CognitiveNlpV1SummarizationHeadlinePostWithHttpInfo(summarizationRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// POST request for summarizing an input text 
        /// </summary>
        /// <exception cref="FactSet.SDK.NaturalLanguageProcessing.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="summarizationRequest"> (optional)</param>
        /// <returns>ApiResponse of SummarizationResultID</returns>
        public ApiResponse<SummarizationResultID> CognitiveNlpV1SummarizationHeadlinePostWithHttpInfo(SummarizationRequest summarizationRequest = default(SummarizationRequest))
        {
            FactSet.SDK.NaturalLanguageProcessing.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.NaturalLanguageProcessing.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.NaturalLanguageProcessing.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.NaturalLanguageProcessing.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = summarizationRequest;

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.NaturalLanguageProcessing.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = CognitiveNlpV1SummarizationHeadlinePostResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Post<
            SummarizationResultID>("/cognitive/nlp/v1/summarization/headline", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CognitiveNlpV1SummarizationHeadlinePost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// POST request for summarizing an input text 
        /// </summary>
        /// <exception cref="FactSet.SDK.NaturalLanguageProcessing.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="summarizationRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SummarizationResultID</returns>
        public async System.Threading.Tasks.Task<SummarizationResultID>CognitiveNlpV1SummarizationHeadlinePostAsync(SummarizationRequest summarizationRequest = default(SummarizationRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await CognitiveNlpV1SummarizationHeadlinePostWithHttpInfoAsync(summarizationRequest, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// POST request for summarizing an input text 
        /// </summary>
        /// <exception cref="FactSet.SDK.NaturalLanguageProcessing.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="summarizationRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SummarizationResultID)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<SummarizationResultID>> CognitiveNlpV1SummarizationHeadlinePostWithHttpInfoAsync(SummarizationRequest summarizationRequest = default(SummarizationRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            FactSet.SDK.NaturalLanguageProcessing.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.NaturalLanguageProcessing.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.NaturalLanguageProcessing.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.NaturalLanguageProcessing.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = summarizationRequest;

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.NaturalLanguageProcessing.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = CognitiveNlpV1SummarizationHeadlinePostResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<SummarizationResultID>("/cognitive/nlp/v1/summarization/headline", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CognitiveNlpV1SummarizationHeadlinePost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// GET request for obtaining response of a particular processing job 
        /// </summary>
        /// <exception cref="FactSet.SDK.NaturalLanguageProcessing.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="resultId"></param>
        /// <returns>SummarizationResult</returns>
        public SummarizationResult CognitiveNlpV1SummarizationResultResultIdGet(string resultId)
        {
            var localVarResponse = CognitiveNlpV1SummarizationResultResultIdGetWithHttpInfo(resultId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// GET request for obtaining response of a particular processing job 
        /// </summary>
        /// <exception cref="FactSet.SDK.NaturalLanguageProcessing.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="resultId"></param>
        /// <returns>ApiResponse of SummarizationResult</returns>
        public ApiResponse<SummarizationResult> CognitiveNlpV1SummarizationResultResultIdGetWithHttpInfo(string resultId)
        {
            // verify the required parameter 'resultId' is set
            if (resultId == null)
            {
                throw new FactSet.SDK.NaturalLanguageProcessing.Client.ApiException(400, "Missing required parameter 'resultId' when calling AITextSummarizationApi->CognitiveNlpV1SummarizationResultResultIdGet");
            }

            FactSet.SDK.NaturalLanguageProcessing.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.NaturalLanguageProcessing.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.NaturalLanguageProcessing.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.NaturalLanguageProcessing.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("result_id", FactSet.SDK.NaturalLanguageProcessing.Client.ClientUtils.ParameterToString(resultId)); // path parameter

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.NaturalLanguageProcessing.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = CognitiveNlpV1SummarizationResultResultIdGetResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Get<
            SummarizationResult>("/cognitive/nlp/v1/summarization/result/{result_id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CognitiveNlpV1SummarizationResultResultIdGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// GET request for obtaining response of a particular processing job 
        /// </summary>
        /// <exception cref="FactSet.SDK.NaturalLanguageProcessing.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="resultId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SummarizationResult</returns>
        public async System.Threading.Tasks.Task<SummarizationResult>CognitiveNlpV1SummarizationResultResultIdGetAsync(string resultId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await CognitiveNlpV1SummarizationResultResultIdGetWithHttpInfoAsync(resultId, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// GET request for obtaining response of a particular processing job 
        /// </summary>
        /// <exception cref="FactSet.SDK.NaturalLanguageProcessing.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="resultId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SummarizationResult)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<SummarizationResult>> CognitiveNlpV1SummarizationResultResultIdGetWithHttpInfoAsync(string resultId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'resultId' is set
            if (resultId == null)
            {
                throw new FactSet.SDK.NaturalLanguageProcessing.Client.ApiException(400, "Missing required parameter 'resultId' when calling AITextSummarizationApi->CognitiveNlpV1SummarizationResultResultIdGet");
            }


            FactSet.SDK.NaturalLanguageProcessing.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.NaturalLanguageProcessing.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.NaturalLanguageProcessing.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.NaturalLanguageProcessing.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("result_id", FactSet.SDK.NaturalLanguageProcessing.Client.ClientUtils.ParameterToString(resultId)); // path parameter

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.NaturalLanguageProcessing.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = CognitiveNlpV1SummarizationResultResultIdGetResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<SummarizationResult>("/cognitive/nlp/v1/summarization/result/{result_id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CognitiveNlpV1SummarizationResultResultIdGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// POST request for summarizing an input text 
        /// </summary>
        /// <exception cref="FactSet.SDK.NaturalLanguageProcessing.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="summarizationRequest"> (optional)</param>
        /// <returns>SummarizationResultID</returns>
        public SummarizationResultID CognitiveNlpV1SummarizationSummaryPost(SummarizationRequest summarizationRequest = default(SummarizationRequest))
        {
            var localVarResponse = CognitiveNlpV1SummarizationSummaryPostWithHttpInfo(summarizationRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// POST request for summarizing an input text 
        /// </summary>
        /// <exception cref="FactSet.SDK.NaturalLanguageProcessing.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="summarizationRequest"> (optional)</param>
        /// <returns>ApiResponse of SummarizationResultID</returns>
        public ApiResponse<SummarizationResultID> CognitiveNlpV1SummarizationSummaryPostWithHttpInfo(SummarizationRequest summarizationRequest = default(SummarizationRequest))
        {
            FactSet.SDK.NaturalLanguageProcessing.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.NaturalLanguageProcessing.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.NaturalLanguageProcessing.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.NaturalLanguageProcessing.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = summarizationRequest;

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.NaturalLanguageProcessing.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = CognitiveNlpV1SummarizationSummaryPostResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Post<
            SummarizationResultID>("/cognitive/nlp/v1/summarization/summary", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CognitiveNlpV1SummarizationSummaryPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// POST request for summarizing an input text 
        /// </summary>
        /// <exception cref="FactSet.SDK.NaturalLanguageProcessing.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="summarizationRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SummarizationResultID</returns>
        public async System.Threading.Tasks.Task<SummarizationResultID>CognitiveNlpV1SummarizationSummaryPostAsync(SummarizationRequest summarizationRequest = default(SummarizationRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await CognitiveNlpV1SummarizationSummaryPostWithHttpInfoAsync(summarizationRequest, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// POST request for summarizing an input text 
        /// </summary>
        /// <exception cref="FactSet.SDK.NaturalLanguageProcessing.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="summarizationRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SummarizationResultID)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<SummarizationResultID>> CognitiveNlpV1SummarizationSummaryPostWithHttpInfoAsync(SummarizationRequest summarizationRequest = default(SummarizationRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            FactSet.SDK.NaturalLanguageProcessing.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.NaturalLanguageProcessing.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.NaturalLanguageProcessing.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.NaturalLanguageProcessing.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = summarizationRequest;

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.NaturalLanguageProcessing.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = CognitiveNlpV1SummarizationSummaryPostResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<SummarizationResultID>("/cognitive/nlp/v1/summarization/summary", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CognitiveNlpV1SummarizationSummaryPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
