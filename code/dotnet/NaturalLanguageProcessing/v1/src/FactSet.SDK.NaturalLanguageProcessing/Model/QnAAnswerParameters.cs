/*
 * Natural Language Processing API
 *
 * APIs that leverage Natural Language Processing to help extract meaningful data from unstructured text
 *
 * The version of the OpenAPI document: 1.3.0
 * Contact: api@factset.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = FactSet.SDK.NaturalLanguageProcessing.Client.OpenAPIDateConverter;

namespace FactSet.SDK.NaturalLanguageProcessing.Model
{
    /// <summary>
    /// Schema that defines the parameters needed to be supplied for generating answer(s).
    /// </summary>
    [DataContract(Name = "QnAAnswerParameters")]
    public partial class QnAAnswerParameters : IEquatable<QnAAnswerParameters>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="QnAAnswerParameters" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected QnAAnswerParameters() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="QnAAnswerParameters" /> class.
        /// </summary>
        /// <param name="input">The text input that provides the context (required).</param>
        /// <param name="numberOfAnswers">Number of answers for the question (default to 2).</param>
        /// <param name="question">Question associated to the provided context (required).</param>
        public QnAAnswerParameters(string input, string question,int numberOfAnswers = 2)
        {
            // to ensure "input" is required (not null)
            if (input == null) {
                throw new ArgumentNullException("input is a required property for QnAAnswerParameters and cannot be null");
            }
            this.Input = input;
            // to ensure "question" is required (not null)
            if (question == null) {
                throw new ArgumentNullException("question is a required property for QnAAnswerParameters and cannot be null");
            }
            this.Question = question;
            this.NumberOfAnswers = numberOfAnswers;
        }

        /// <summary>
        /// The text input that provides the context
        /// </summary>
        /// <value>The text input that provides the context</value>
        [DataMember(Name = "input", IsRequired = true, EmitDefaultValue = false)]
        public string Input { get; set; }

        /// <summary>
        /// Number of answers for the question
        /// </summary>
        /// <value>Number of answers for the question</value>
        [DataMember(Name = "numberOfAnswers", EmitDefaultValue = false)]
        public int NumberOfAnswers { get; set; }

        /// <summary>
        /// Question associated to the provided context
        /// </summary>
        /// <value>Question associated to the provided context</value>
        [DataMember(Name = "question", IsRequired = true, EmitDefaultValue = false)]
        public string Question { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class QnAAnswerParameters {\n");
            sb.Append("  Input: ").Append(Input).Append("\n");
            sb.Append("  NumberOfAnswers: ").Append(NumberOfAnswers).Append("\n");
            sb.Append("  Question: ").Append(Question).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as QnAAnswerParameters);
        }

        /// <summary>
        /// Returns true if QnAAnswerParameters instances are equal
        /// </summary>
        /// <param name="input">Instance of QnAAnswerParameters to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(QnAAnswerParameters input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Input == input.Input ||
                    (this.Input != null &&
                    this.Input.Equals(input.Input))
                ) && 
                (
                    this.NumberOfAnswers == input.NumberOfAnswers ||
                    this.NumberOfAnswers.Equals(input.NumberOfAnswers)
                ) && 
                (
                    this.Question == input.Question ||
                    (this.Question != null &&
                    this.Question.Equals(input.Question))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Input != null)
                {
                    hashCode = (hashCode * 59) + this.Input.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.NumberOfAnswers.GetHashCode();
                if (this.Question != null)
                {
                    hashCode = (hashCode * 59) + this.Question.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            // Input (string) maxLength
            if (this.Input != null && this.Input.Length > 10000)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Input, length must be less than 10000.", new [] { "Input" });
            }

            // Input (string) minLength
            if (this.Input != null && this.Input.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Input, length must be greater than 1.", new [] { "Input" });
            }

            // NumberOfAnswers (int) maximum
            if (this.NumberOfAnswers > (int)10)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for NumberOfAnswers, must be a value less than or equal to 10.", new [] { "NumberOfAnswers" });
            }

            // NumberOfAnswers (int) minimum
            if (this.NumberOfAnswers < (int)1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for NumberOfAnswers, must be a value greater than or equal to 1.", new [] { "NumberOfAnswers" });
            }

            // Question (string) maxLength
            if (this.Question != null && this.Question.Length > 1000)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Question, length must be less than 1000.", new [] { "Question" });
            }

            // Question (string) minLength
            if (this.Question != null && this.Question.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Question, length must be greater than 1.", new [] { "Question" });
            }

            yield break;
        }
    }

}
