/*
 * Natural Language Processing API
 *
 * APIs that leverage Natural Language Processing to help extract meaningful data from unstructured text
 *
 * The version of the OpenAPI document: 1.3.0
 * Contact: api@factset.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = FactSet.SDK.NaturalLanguageProcessing.Client.OpenAPIDateConverter;

namespace FactSet.SDK.NaturalLanguageProcessing.Model
{
    /// <summary>
    /// Schema that defines the answer with a confidence score.
    /// </summary>
    [DataContract(Name = "QnAAnswer")]
    public partial class QnAAnswer : IEquatable<QnAAnswer>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="QnAAnswer" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected QnAAnswer() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="QnAAnswer" /> class.
        /// </summary>
        /// <param name="answer">The machine-generated answer to the question (required).</param>
        /// <param name="score">The confidence score associated to the answer (required).</param>
        public QnAAnswer(string answer, decimal score)
        {
            // to ensure "answer" is required (not null)
            if (answer == null) {
                throw new ArgumentNullException("answer is a required property for QnAAnswer and cannot be null");
            }
            this.Answer = answer;
            this.Score = score;
        }

        /// <summary>
        /// The machine-generated answer to the question
        /// </summary>
        /// <value>The machine-generated answer to the question</value>
        [DataMember(Name = "answer", IsRequired = true, EmitDefaultValue = false)]
        public string Answer { get; set; }

        /// <summary>
        /// The confidence score associated to the answer
        /// </summary>
        /// <value>The confidence score associated to the answer</value>
        [DataMember(Name = "score", IsRequired = true, EmitDefaultValue = false)]
        public decimal Score { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class QnAAnswer {\n");
            sb.Append("  Answer: ").Append(Answer).Append("\n");
            sb.Append("  Score: ").Append(Score).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as QnAAnswer);
        }

        /// <summary>
        /// Returns true if QnAAnswer instances are equal
        /// </summary>
        /// <param name="input">Instance of QnAAnswer to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(QnAAnswer input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Answer == input.Answer ||
                    (this.Answer != null &&
                    this.Answer.Equals(input.Answer))
                ) && 
                (
                    this.Score == input.Score ||
                    this.Score.Equals(input.Score)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Answer != null)
                {
                    hashCode = (hashCode * 59) + this.Answer.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Score.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
