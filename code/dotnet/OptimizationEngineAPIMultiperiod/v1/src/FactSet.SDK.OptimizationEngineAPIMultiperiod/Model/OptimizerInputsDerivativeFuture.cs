/*
 * fpo_mp_input
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = FactSet.SDK.OptimizationEngineAPIMultiperiod.Client.OpenAPIDateConverter;

namespace FactSet.SDK.OptimizationEngineAPIMultiperiod.Model
{
    /// <summary>
    /// OptimizerInputsDerivativeFuture
    /// </summary>
    [DataContract(Name = "optimizer.inputs.Derivative.Future")]
    public partial class OptimizerInputsDerivativeFuture : IEquatable<OptimizerInputsDerivativeFuture>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="OptimizerInputsDerivativeFuture" /> class.
        /// </summary>
        /// <param name="contractSize">contractSize.</param>
        /// <param name="method">method.</param>
        /// <param name="usingPaMultiply">usingPaMultiply.</param>
        public OptimizerInputsDerivativeFuture(double contractSize = default(double), OptimizerInputsDerivativeFutureEComputationMethodEnum method = default(OptimizerInputsDerivativeFutureEComputationMethodEnum), bool usingPaMultiply = default(bool))
        {
            this.ContractSize = contractSize;
            this.Method = method;
            this.UsingPaMultiply = usingPaMultiply;
        }

        /// <summary>
        /// Gets or Sets ContractSize
        /// </summary>
        [DataMember(Name = "contract_size", EmitDefaultValue = false)]
        public double ContractSize { get; set; }

        /// <summary>
        /// Gets or Sets Method
        /// </summary>
        [DataMember(Name = "method", EmitDefaultValue = false)]
        public OptimizerInputsDerivativeFutureEComputationMethodEnum Method { get; set; }

        /// <summary>
        /// Gets or Sets UsingPaMultiply
        /// </summary>
        [DataMember(Name = "using_pa_multiply", EmitDefaultValue = true)]
        public bool UsingPaMultiply { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class OptimizerInputsDerivativeFuture {\n");
            sb.Append("  ContractSize: ").Append(ContractSize).Append("\n");
            sb.Append("  Method: ").Append(Method).Append("\n");
            sb.Append("  UsingPaMultiply: ").Append(UsingPaMultiply).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as OptimizerInputsDerivativeFuture);
        }

        /// <summary>
        /// Returns true if OptimizerInputsDerivativeFuture instances are equal
        /// </summary>
        /// <param name="input">Instance of OptimizerInputsDerivativeFuture to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(OptimizerInputsDerivativeFuture input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.ContractSize == input.ContractSize ||
                    this.ContractSize.Equals(input.ContractSize)
                ) && 
                (
                    this.Method == input.Method ||
                    (this.Method != null &&
                    this.Method.Equals(input.Method))
                ) && 
                (
                    this.UsingPaMultiply == input.UsingPaMultiply ||
                    this.UsingPaMultiply.Equals(input.UsingPaMultiply)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.ContractSize.GetHashCode();
                if (this.Method != null)
                {
                    hashCode = (hashCode * 59) + this.Method.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.UsingPaMultiply.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
