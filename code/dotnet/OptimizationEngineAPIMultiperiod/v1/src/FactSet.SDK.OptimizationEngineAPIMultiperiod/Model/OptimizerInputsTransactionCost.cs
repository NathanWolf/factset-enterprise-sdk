/*
 * fpo_mp_input
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = FactSet.SDK.OptimizationEngineAPIMultiperiod.Client.OpenAPIDateConverter;

namespace FactSet.SDK.OptimizationEngineAPIMultiperiod.Model
{
    /// <summary>
    /// OptimizerInputsTransactionCost
    /// </summary>
    [DataContract(Name = "optimizer.inputs.TransactionCost")]
    public partial class OptimizerInputsTransactionCost : IEquatable<OptimizerInputsTransactionCost>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="OptimizerInputsTransactionCost" /> class.
        /// </summary>
        /// <param name="unitType">unitType.</param>
        /// <param name="buyCost">buyCost.</param>
        /// <param name="sellCost">sellCost.</param>
        public OptimizerInputsTransactionCost(OptimizerInputsETransactionCostUnitTypeEnum unitType = default(OptimizerInputsETransactionCostUnitTypeEnum), OptimizerInputsValue buyCost = default(OptimizerInputsValue), OptimizerInputsValue sellCost = default(OptimizerInputsValue))
        {
            this.UnitType = unitType;
            this.BuyCost = buyCost;
            this.SellCost = sellCost;
        }

        /// <summary>
        /// Gets or Sets UnitType
        /// </summary>
        [DataMember(Name = "unit_type", EmitDefaultValue = false)]
        public OptimizerInputsETransactionCostUnitTypeEnum UnitType { get; set; }

        /// <summary>
        /// Gets or Sets BuyCost
        /// </summary>
        [DataMember(Name = "buy_cost", EmitDefaultValue = false)]
        public OptimizerInputsValue BuyCost { get; set; }

        /// <summary>
        /// Gets or Sets SellCost
        /// </summary>
        [DataMember(Name = "sell_cost", EmitDefaultValue = false)]
        public OptimizerInputsValue SellCost { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class OptimizerInputsTransactionCost {\n");
            sb.Append("  UnitType: ").Append(UnitType).Append("\n");
            sb.Append("  BuyCost: ").Append(BuyCost).Append("\n");
            sb.Append("  SellCost: ").Append(SellCost).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as OptimizerInputsTransactionCost);
        }

        /// <summary>
        /// Returns true if OptimizerInputsTransactionCost instances are equal
        /// </summary>
        /// <param name="input">Instance of OptimizerInputsTransactionCost to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(OptimizerInputsTransactionCost input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.UnitType == input.UnitType ||
                    (this.UnitType != null &&
                    this.UnitType.Equals(input.UnitType))
                ) && 
                (
                    this.BuyCost == input.BuyCost ||
                    (this.BuyCost != null &&
                    this.BuyCost.Equals(input.BuyCost))
                ) && 
                (
                    this.SellCost == input.SellCost ||
                    (this.SellCost != null &&
                    this.SellCost.Equals(input.SellCost))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.UnitType != null)
                {
                    hashCode = (hashCode * 59) + this.UnitType.GetHashCode();
                }
                if (this.BuyCost != null)
                {
                    hashCode = (hashCode * 59) + this.BuyCost.GetHashCode();
                }
                if (this.SellCost != null)
                {
                    hashCode = (hashCode * 59) + this.SellCost.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
