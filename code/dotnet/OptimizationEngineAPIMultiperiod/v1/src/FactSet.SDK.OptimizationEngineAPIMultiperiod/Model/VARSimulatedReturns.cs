/*
 * fpo_mp_input
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = FactSet.SDK.OptimizationEngineAPIMultiperiod.Client.OpenAPIDateConverter;

namespace FactSet.SDK.OptimizationEngineAPIMultiperiod.Model
{
    /// <summary>
    /// VARSimulatedReturns
    /// </summary>
    [DataContract(Name = "VAR.SimulatedReturns")]
    public partial class VARSimulatedReturns : IEquatable<VARSimulatedReturns>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="VARSimulatedReturns" /> class.
        /// </summary>
        /// <param name="entity">entity.</param>
        /// <param name="returns">returns.</param>
        public VARSimulatedReturns(string entity = default(string), List<float> returns = default(List<float>))
        {
            this.Entity = entity;
            this.Returns = returns;
        }

        /// <summary>
        /// Gets or Sets Entity
        /// </summary>
        [DataMember(Name = "entity", EmitDefaultValue = false)]
        public string Entity { get; set; }

        /// <summary>
        /// Gets or Sets Returns
        /// </summary>
        [DataMember(Name = "returns", EmitDefaultValue = false)]
        public List<float> Returns { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class VARSimulatedReturns {\n");
            sb.Append("  Entity: ").Append(Entity).Append("\n");
            sb.Append("  Returns: ").Append(Returns).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as VARSimulatedReturns);
        }

        /// <summary>
        /// Returns true if VARSimulatedReturns instances are equal
        /// </summary>
        /// <param name="input">Instance of VARSimulatedReturns to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(VARSimulatedReturns input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Entity == input.Entity ||
                    (this.Entity != null &&
                    this.Entity.Equals(input.Entity))
                ) && 
                (
                    this.Returns == input.Returns ||
                    this.Returns != null &&
                    input.Returns != null &&
                    this.Returns.SequenceEqual(input.Returns)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Entity != null)
                {
                    hashCode = (hashCode * 59) + this.Entity.GetHashCode();
                }
                if (this.Returns != null)
                {
                    hashCode = (hashCode * 59) + this.Returns.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
