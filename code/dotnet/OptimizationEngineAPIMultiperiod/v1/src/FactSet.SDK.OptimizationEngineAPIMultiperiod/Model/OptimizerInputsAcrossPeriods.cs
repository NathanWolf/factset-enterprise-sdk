/*
 * fpo_mp_input
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = FactSet.SDK.OptimizationEngineAPIMultiperiod.Client.OpenAPIDateConverter;

namespace FactSet.SDK.OptimizationEngineAPIMultiperiod.Model
{
    /// <summary>
    /// OptimizerInputsAcrossPeriods
    /// </summary>
    [DataContract(Name = "optimizer.inputs.AcrossPeriods")]
    public partial class OptimizerInputsAcrossPeriods : IEquatable<OptimizerInputsAcrossPeriods>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="OptimizerInputsAcrossPeriods" /> class.
        /// </summary>
        /// <param name="startPeriod">startPeriod.</param>
        /// <param name="endPeriod">endPeriod.</param>
        /// <param name="rolling">rolling.</param>
        public OptimizerInputsAcrossPeriods(int startPeriod = default(int), int endPeriod = default(int), OptimizerInputsAcrossPeriodsRollingPeriods rolling = default(OptimizerInputsAcrossPeriodsRollingPeriods))
        {
            this.StartPeriod = startPeriod;
            this.EndPeriod = endPeriod;
            this.Rolling = rolling;
        }

        /// <summary>
        /// Gets or Sets StartPeriod
        /// </summary>
        [DataMember(Name = "start_period", EmitDefaultValue = false)]
        public int StartPeriod { get; set; }

        /// <summary>
        /// Gets or Sets EndPeriod
        /// </summary>
        [DataMember(Name = "end_period", EmitDefaultValue = false)]
        public int EndPeriod { get; set; }

        /// <summary>
        /// Gets or Sets Rolling
        /// </summary>
        [DataMember(Name = "rolling", EmitDefaultValue = false)]
        public OptimizerInputsAcrossPeriodsRollingPeriods Rolling { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class OptimizerInputsAcrossPeriods {\n");
            sb.Append("  StartPeriod: ").Append(StartPeriod).Append("\n");
            sb.Append("  EndPeriod: ").Append(EndPeriod).Append("\n");
            sb.Append("  Rolling: ").Append(Rolling).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as OptimizerInputsAcrossPeriods);
        }

        /// <summary>
        /// Returns true if OptimizerInputsAcrossPeriods instances are equal
        /// </summary>
        /// <param name="input">Instance of OptimizerInputsAcrossPeriods to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(OptimizerInputsAcrossPeriods input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.StartPeriod == input.StartPeriod ||
                    this.StartPeriod.Equals(input.StartPeriod)
                ) && 
                (
                    this.EndPeriod == input.EndPeriod ||
                    this.EndPeriod.Equals(input.EndPeriod)
                ) && 
                (
                    this.Rolling == input.Rolling ||
                    (this.Rolling != null &&
                    this.Rolling.Equals(input.Rolling))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.StartPeriod.GetHashCode();
                hashCode = (hashCode * 59) + this.EndPeriod.GetHashCode();
                if (this.Rolling != null)
                {
                    hashCode = (hashCode * 59) + this.Rolling.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
