/*
 * fpo_mp_input
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = FactSet.SDK.OptimizationEngineAPIMultiperiod.Client.OpenAPIDateConverter;

namespace FactSet.SDK.OptimizationEngineAPIMultiperiod.Model
{
    /// <summary>
    /// OptimizerInputsLimitTailRiskConstraint
    /// </summary>
    [DataContract(Name = "optimizer.inputs.LimitTailRiskConstraint")]
    public partial class OptimizerInputsLimitTailRiskConstraint : IEquatable<OptimizerInputsLimitTailRiskConstraint>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="OptimizerInputsLimitTailRiskConstraint" /> class.
        /// </summary>
        /// <param name="name">name.</param>
        /// <param name="riskMeasure">riskMeasure.</param>
        /// <param name="maxRisk">maxRisk.</param>
        /// <param name="confidenceLevel">confidenceLevel.</param>
        /// <param name="penalty">penalty.</param>
        /// <param name="activeRisk">activeRisk.</param>
        /// <param name="benchmarkIndex">benchmarkIndex.</param>
        /// <param name="hierarchy">hierarchy.</param>
        public OptimizerInputsLimitTailRiskConstraint(string name = default(string), OptimizerInputsTailRiskMeasureEnum riskMeasure = default(OptimizerInputsTailRiskMeasureEnum), OptimizerInputsValue maxRisk = default(OptimizerInputsValue), OptimizerInputsValue confidenceLevel = default(OptimizerInputsValue), OptimizerInputsPenalty penalty = default(OptimizerInputsPenalty), bool activeRisk = default(bool), int benchmarkIndex = default(int), int hierarchy = default(int))
        {
            this.Name = name;
            this.RiskMeasure = riskMeasure;
            this.MaxRisk = maxRisk;
            this.ConfidenceLevel = confidenceLevel;
            this.Penalty = penalty;
            this.ActiveRisk = activeRisk;
            this.BenchmarkIndex = benchmarkIndex;
            this.Hierarchy = hierarchy;
        }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name = "name", EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets RiskMeasure
        /// </summary>
        [DataMember(Name = "risk_measure", EmitDefaultValue = false)]
        public OptimizerInputsTailRiskMeasureEnum RiskMeasure { get; set; }

        /// <summary>
        /// Gets or Sets MaxRisk
        /// </summary>
        [DataMember(Name = "max_risk", EmitDefaultValue = false)]
        public OptimizerInputsValue MaxRisk { get; set; }

        /// <summary>
        /// Gets or Sets ConfidenceLevel
        /// </summary>
        [DataMember(Name = "confidence_level", EmitDefaultValue = false)]
        public OptimizerInputsValue ConfidenceLevel { get; set; }

        /// <summary>
        /// Gets or Sets Penalty
        /// </summary>
        [DataMember(Name = "penalty", EmitDefaultValue = false)]
        public OptimizerInputsPenalty Penalty { get; set; }

        /// <summary>
        /// Gets or Sets ActiveRisk
        /// </summary>
        [DataMember(Name = "active_risk", EmitDefaultValue = true)]
        public bool ActiveRisk { get; set; }

        /// <summary>
        /// Gets or Sets BenchmarkIndex
        /// </summary>
        [DataMember(Name = "benchmark_index", EmitDefaultValue = false)]
        public int BenchmarkIndex { get; set; }

        /// <summary>
        /// Gets or Sets Hierarchy
        /// </summary>
        [DataMember(Name = "hierarchy", EmitDefaultValue = false)]
        public int Hierarchy { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class OptimizerInputsLimitTailRiskConstraint {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  RiskMeasure: ").Append(RiskMeasure).Append("\n");
            sb.Append("  MaxRisk: ").Append(MaxRisk).Append("\n");
            sb.Append("  ConfidenceLevel: ").Append(ConfidenceLevel).Append("\n");
            sb.Append("  Penalty: ").Append(Penalty).Append("\n");
            sb.Append("  ActiveRisk: ").Append(ActiveRisk).Append("\n");
            sb.Append("  BenchmarkIndex: ").Append(BenchmarkIndex).Append("\n");
            sb.Append("  Hierarchy: ").Append(Hierarchy).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as OptimizerInputsLimitTailRiskConstraint);
        }

        /// <summary>
        /// Returns true if OptimizerInputsLimitTailRiskConstraint instances are equal
        /// </summary>
        /// <param name="input">Instance of OptimizerInputsLimitTailRiskConstraint to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(OptimizerInputsLimitTailRiskConstraint input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.RiskMeasure == input.RiskMeasure ||
                    (this.RiskMeasure != null &&
                    this.RiskMeasure.Equals(input.RiskMeasure))
                ) && 
                (
                    this.MaxRisk == input.MaxRisk ||
                    (this.MaxRisk != null &&
                    this.MaxRisk.Equals(input.MaxRisk))
                ) && 
                (
                    this.ConfidenceLevel == input.ConfidenceLevel ||
                    (this.ConfidenceLevel != null &&
                    this.ConfidenceLevel.Equals(input.ConfidenceLevel))
                ) && 
                (
                    this.Penalty == input.Penalty ||
                    (this.Penalty != null &&
                    this.Penalty.Equals(input.Penalty))
                ) && 
                (
                    this.ActiveRisk == input.ActiveRisk ||
                    this.ActiveRisk.Equals(input.ActiveRisk)
                ) && 
                (
                    this.BenchmarkIndex == input.BenchmarkIndex ||
                    this.BenchmarkIndex.Equals(input.BenchmarkIndex)
                ) && 
                (
                    this.Hierarchy == input.Hierarchy ||
                    this.Hierarchy.Equals(input.Hierarchy)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                if (this.RiskMeasure != null)
                {
                    hashCode = (hashCode * 59) + this.RiskMeasure.GetHashCode();
                }
                if (this.MaxRisk != null)
                {
                    hashCode = (hashCode * 59) + this.MaxRisk.GetHashCode();
                }
                if (this.ConfidenceLevel != null)
                {
                    hashCode = (hashCode * 59) + this.ConfidenceLevel.GetHashCode();
                }
                if (this.Penalty != null)
                {
                    hashCode = (hashCode * 59) + this.Penalty.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.ActiveRisk.GetHashCode();
                hashCode = (hashCode * 59) + this.BenchmarkIndex.GetHashCode();
                hashCode = (hashCode * 59) + this.Hierarchy.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
