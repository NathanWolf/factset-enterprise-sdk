/*
 * fpo_mp_input
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = FactSet.SDK.OptimizationEngineAPIMultiperiod.Client.OpenAPIDateConverter;

namespace FactSet.SDK.OptimizationEngineAPIMultiperiod.Model
{
    /// <summary>
    /// OptimizerInputsExpectedTailLossTerm
    /// </summary>
    [DataContract(Name = "optimizer.inputs.ExpectedTailLossTerm")]
    public partial class OptimizerInputsExpectedTailLossTerm : IEquatable<OptimizerInputsExpectedTailLossTerm>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="OptimizerInputsExpectedTailLossTerm" /> class.
        /// </summary>
        /// <param name="name">name.</param>
        /// <param name="multiplier">multiplier.</param>
        /// <param name="direction">direction.</param>
        /// <param name="confidenceLevel">confidenceLevel.</param>
        /// <param name="useCenteredEtl">useCenteredEtl.</param>
        /// <param name="activeRisk">activeRisk.</param>
        /// <param name="benchmarkIndex">benchmarkIndex.</param>
        public OptimizerInputsExpectedTailLossTerm(string name = default(string), OptimizerInputsValue multiplier = default(OptimizerInputsValue), OptimizerInputsEObjectiveTermDirectionEnum direction = default(OptimizerInputsEObjectiveTermDirectionEnum), double confidenceLevel = default(double), bool useCenteredEtl = default(bool), bool activeRisk = default(bool), int benchmarkIndex = default(int))
        {
            this.Name = name;
            this.Multiplier = multiplier;
            this.Direction = direction;
            this.ConfidenceLevel = confidenceLevel;
            this.UseCenteredEtl = useCenteredEtl;
            this.ActiveRisk = activeRisk;
            this.BenchmarkIndex = benchmarkIndex;
        }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name = "name", EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets Multiplier
        /// </summary>
        [DataMember(Name = "multiplier", EmitDefaultValue = false)]
        public OptimizerInputsValue Multiplier { get; set; }

        /// <summary>
        /// Gets or Sets Direction
        /// </summary>
        [DataMember(Name = "direction", EmitDefaultValue = false)]
        public OptimizerInputsEObjectiveTermDirectionEnum Direction { get; set; }

        /// <summary>
        /// Gets or Sets ConfidenceLevel
        /// </summary>
        [DataMember(Name = "confidence_level", EmitDefaultValue = false)]
        public double ConfidenceLevel { get; set; }

        /// <summary>
        /// Gets or Sets UseCenteredEtl
        /// </summary>
        [DataMember(Name = "use_centered_etl", EmitDefaultValue = true)]
        public bool UseCenteredEtl { get; set; }

        /// <summary>
        /// Gets or Sets ActiveRisk
        /// </summary>
        [DataMember(Name = "active_risk", EmitDefaultValue = true)]
        public bool ActiveRisk { get; set; }

        /// <summary>
        /// Gets or Sets BenchmarkIndex
        /// </summary>
        [DataMember(Name = "benchmark_index", EmitDefaultValue = false)]
        public int BenchmarkIndex { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class OptimizerInputsExpectedTailLossTerm {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Multiplier: ").Append(Multiplier).Append("\n");
            sb.Append("  Direction: ").Append(Direction).Append("\n");
            sb.Append("  ConfidenceLevel: ").Append(ConfidenceLevel).Append("\n");
            sb.Append("  UseCenteredEtl: ").Append(UseCenteredEtl).Append("\n");
            sb.Append("  ActiveRisk: ").Append(ActiveRisk).Append("\n");
            sb.Append("  BenchmarkIndex: ").Append(BenchmarkIndex).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as OptimizerInputsExpectedTailLossTerm);
        }

        /// <summary>
        /// Returns true if OptimizerInputsExpectedTailLossTerm instances are equal
        /// </summary>
        /// <param name="input">Instance of OptimizerInputsExpectedTailLossTerm to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(OptimizerInputsExpectedTailLossTerm input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Multiplier == input.Multiplier ||
                    (this.Multiplier != null &&
                    this.Multiplier.Equals(input.Multiplier))
                ) && 
                (
                    this.Direction == input.Direction ||
                    (this.Direction != null &&
                    this.Direction.Equals(input.Direction))
                ) && 
                (
                    this.ConfidenceLevel == input.ConfidenceLevel ||
                    this.ConfidenceLevel.Equals(input.ConfidenceLevel)
                ) && 
                (
                    this.UseCenteredEtl == input.UseCenteredEtl ||
                    this.UseCenteredEtl.Equals(input.UseCenteredEtl)
                ) && 
                (
                    this.ActiveRisk == input.ActiveRisk ||
                    this.ActiveRisk.Equals(input.ActiveRisk)
                ) && 
                (
                    this.BenchmarkIndex == input.BenchmarkIndex ||
                    this.BenchmarkIndex.Equals(input.BenchmarkIndex)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                if (this.Multiplier != null)
                {
                    hashCode = (hashCode * 59) + this.Multiplier.GetHashCode();
                }
                if (this.Direction != null)
                {
                    hashCode = (hashCode * 59) + this.Direction.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.ConfidenceLevel.GetHashCode();
                hashCode = (hashCode * 59) + this.UseCenteredEtl.GetHashCode();
                hashCode = (hashCode * 59) + this.ActiveRisk.GetHashCode();
                hashCode = (hashCode * 59) + this.BenchmarkIndex.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
