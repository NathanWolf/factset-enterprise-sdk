/*
 * fpo_mp_input
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = FactSet.SDK.OptimizationEngineAPIMultiperiod.Client.OpenAPIDateConverter;

namespace FactSet.SDK.OptimizationEngineAPIMultiperiod.Model
{
    /// <summary>
    /// OptimizerInputsRiskModel
    /// </summary>
    [DataContract(Name = "optimizer.inputs.RiskModel")]
    public partial class OptimizerInputsRiskModel : IEquatable<OptimizerInputsRiskModel>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="OptimizerInputsRiskModel" /> class.
        /// </summary>
        /// <param name="simulatedRiskModel">simulatedRiskModel.</param>
        /// <param name="quantRiskModel">quantRiskModel.</param>
        /// <param name="rawModel">rawModel.</param>
        public OptimizerInputsRiskModel(OptimizerInputsSimulatedRiskModel simulatedRiskModel = default(OptimizerInputsSimulatedRiskModel), OptimizerInputsQuantRiskModel quantRiskModel = default(OptimizerInputsQuantRiskModel), OptimizerInputsRawRiskModel rawModel = default(OptimizerInputsRawRiskModel))
        {
            this.SimulatedRiskModel = simulatedRiskModel;
            this.QuantRiskModel = quantRiskModel;
            this.RawModel = rawModel;
        }

        /// <summary>
        /// Gets or Sets SimulatedRiskModel
        /// </summary>
        [DataMember(Name = "simulated_risk_model", EmitDefaultValue = false)]
        public OptimizerInputsSimulatedRiskModel SimulatedRiskModel { get; set; }

        /// <summary>
        /// Gets or Sets QuantRiskModel
        /// </summary>
        [DataMember(Name = "quant_risk_model", EmitDefaultValue = false)]
        public OptimizerInputsQuantRiskModel QuantRiskModel { get; set; }

        /// <summary>
        /// Gets or Sets RawModel
        /// </summary>
        [DataMember(Name = "raw_model", EmitDefaultValue = false)]
        public OptimizerInputsRawRiskModel RawModel { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class OptimizerInputsRiskModel {\n");
            sb.Append("  SimulatedRiskModel: ").Append(SimulatedRiskModel).Append("\n");
            sb.Append("  QuantRiskModel: ").Append(QuantRiskModel).Append("\n");
            sb.Append("  RawModel: ").Append(RawModel).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as OptimizerInputsRiskModel);
        }

        /// <summary>
        /// Returns true if OptimizerInputsRiskModel instances are equal
        /// </summary>
        /// <param name="input">Instance of OptimizerInputsRiskModel to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(OptimizerInputsRiskModel input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.SimulatedRiskModel == input.SimulatedRiskModel ||
                    (this.SimulatedRiskModel != null &&
                    this.SimulatedRiskModel.Equals(input.SimulatedRiskModel))
                ) && 
                (
                    this.QuantRiskModel == input.QuantRiskModel ||
                    (this.QuantRiskModel != null &&
                    this.QuantRiskModel.Equals(input.QuantRiskModel))
                ) && 
                (
                    this.RawModel == input.RawModel ||
                    (this.RawModel != null &&
                    this.RawModel.Equals(input.RawModel))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.SimulatedRiskModel != null)
                {
                    hashCode = (hashCode * 59) + this.SimulatedRiskModel.GetHashCode();
                }
                if (this.QuantRiskModel != null)
                {
                    hashCode = (hashCode * 59) + this.QuantRiskModel.GetHashCode();
                }
                if (this.RawModel != null)
                {
                    hashCode = (hashCode * 59) + this.RawModel.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
