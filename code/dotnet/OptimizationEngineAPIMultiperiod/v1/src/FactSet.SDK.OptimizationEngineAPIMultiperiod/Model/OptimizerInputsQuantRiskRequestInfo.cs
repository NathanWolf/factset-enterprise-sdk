/*
 * fpo_mp_input
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = FactSet.SDK.OptimizationEngineAPIMultiperiod.Client.OpenAPIDateConverter;

namespace FactSet.SDK.OptimizationEngineAPIMultiperiod.Model
{
    /// <summary>
    /// OptimizerInputsQuantRiskRequestInfo
    /// </summary>
    [DataContract(Name = "optimizer.inputs.QuantRiskRequestInfo")]
    public partial class OptimizerInputsQuantRiskRequestInfo : IEquatable<OptimizerInputsQuantRiskRequestInfo>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="OptimizerInputsQuantRiskRequestInfo" /> class.
        /// </summary>
        /// <param name="serviceUrl">POST.</param>
        /// <param name="jsonPostBody">jsonPostBody.</param>
        /// <param name="limaHeader">limaHeader.</param>
        /// <param name="pickupBaseUrl">pickupBaseUrl.</param>
        public OptimizerInputsQuantRiskRequestInfo(string serviceUrl = default(string), string jsonPostBody = default(string), string limaHeader = default(string), string pickupBaseUrl = default(string))
        {
            this.ServiceUrl = serviceUrl;
            this.JsonPostBody = jsonPostBody;
            this.LimaHeader = limaHeader;
            this.PickupBaseUrl = pickupBaseUrl;
        }

        /// <summary>
        /// POST
        /// </summary>
        /// <value>POST</value>
        [DataMember(Name = "service_url", EmitDefaultValue = false)]
        public string ServiceUrl { get; set; }

        /// <summary>
        /// Gets or Sets JsonPostBody
        /// </summary>
        [DataMember(Name = "json_post_body", EmitDefaultValue = false)]
        public string JsonPostBody { get; set; }

        /// <summary>
        /// Gets or Sets LimaHeader
        /// </summary>
        [DataMember(Name = "lima_header", EmitDefaultValue = false)]
        public string LimaHeader { get; set; }

        /// <summary>
        /// Gets or Sets PickupBaseUrl
        /// </summary>
        [DataMember(Name = "pickup_base_url", EmitDefaultValue = false)]
        public string PickupBaseUrl { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class OptimizerInputsQuantRiskRequestInfo {\n");
            sb.Append("  ServiceUrl: ").Append(ServiceUrl).Append("\n");
            sb.Append("  JsonPostBody: ").Append(JsonPostBody).Append("\n");
            sb.Append("  LimaHeader: ").Append(LimaHeader).Append("\n");
            sb.Append("  PickupBaseUrl: ").Append(PickupBaseUrl).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as OptimizerInputsQuantRiskRequestInfo);
        }

        /// <summary>
        /// Returns true if OptimizerInputsQuantRiskRequestInfo instances are equal
        /// </summary>
        /// <param name="input">Instance of OptimizerInputsQuantRiskRequestInfo to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(OptimizerInputsQuantRiskRequestInfo input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.ServiceUrl == input.ServiceUrl ||
                    (this.ServiceUrl != null &&
                    this.ServiceUrl.Equals(input.ServiceUrl))
                ) && 
                (
                    this.JsonPostBody == input.JsonPostBody ||
                    (this.JsonPostBody != null &&
                    this.JsonPostBody.Equals(input.JsonPostBody))
                ) && 
                (
                    this.LimaHeader == input.LimaHeader ||
                    (this.LimaHeader != null &&
                    this.LimaHeader.Equals(input.LimaHeader))
                ) && 
                (
                    this.PickupBaseUrl == input.PickupBaseUrl ||
                    (this.PickupBaseUrl != null &&
                    this.PickupBaseUrl.Equals(input.PickupBaseUrl))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ServiceUrl != null)
                {
                    hashCode = (hashCode * 59) + this.ServiceUrl.GetHashCode();
                }
                if (this.JsonPostBody != null)
                {
                    hashCode = (hashCode * 59) + this.JsonPostBody.GetHashCode();
                }
                if (this.LimaHeader != null)
                {
                    hashCode = (hashCode * 59) + this.LimaHeader.GetHashCode();
                }
                if (this.PickupBaseUrl != null)
                {
                    hashCode = (hashCode * 59) + this.PickupBaseUrl.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
