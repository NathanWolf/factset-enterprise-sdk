/*
 * fpo_mp_input
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = FactSet.SDK.OptimizationEngineAPIMultiperiod.Client.OpenAPIDateConverter;

namespace FactSet.SDK.OptimizationEngineAPIMultiperiod.Model
{
    /// <summary>
    /// OptimizerInputsPortfolios
    /// </summary>
    [DataContract(Name = "optimizer.inputs.Portfolios")]
    public partial class OptimizerInputsPortfolios : IEquatable<OptimizerInputsPortfolios>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="OptimizerInputsPortfolios" /> class.
        /// </summary>
        /// <param name="initial">initial.</param>
        /// <param name="benchmarks">index 0 is always the \&quot;Primary Benchmark\&quot;.</param>
        /// <param name="buylist">buylist.</param>
        /// <param name="cashUnivIndex">cashUnivIndex.</param>
        public OptimizerInputsPortfolios(OptimizerInputsPortfolio initial = default(OptimizerInputsPortfolio), List<OptimizerInputsPortfolio> benchmarks = default(List<OptimizerInputsPortfolio>), List<OptimizerInputsBuyListItem> buylist = default(List<OptimizerInputsBuyListItem>), int cashUnivIndex = default(int))
        {
            this.Initial = initial;
            this.Benchmarks = benchmarks;
            this.Buylist = buylist;
            this.CashUnivIndex = cashUnivIndex;
        }

        /// <summary>
        /// Gets or Sets Initial
        /// </summary>
        [DataMember(Name = "initial", EmitDefaultValue = false)]
        public OptimizerInputsPortfolio Initial { get; set; }

        /// <summary>
        /// index 0 is always the \&quot;Primary Benchmark\&quot;
        /// </summary>
        /// <value>index 0 is always the \&quot;Primary Benchmark\&quot;</value>
        [DataMember(Name = "benchmarks", EmitDefaultValue = false)]
        public List<OptimizerInputsPortfolio> Benchmarks { get; set; }

        /// <summary>
        /// Gets or Sets Buylist
        /// </summary>
        [DataMember(Name = "buylist", EmitDefaultValue = false)]
        public List<OptimizerInputsBuyListItem> Buylist { get; set; }

        /// <summary>
        /// Gets or Sets CashUnivIndex
        /// </summary>
        [DataMember(Name = "cash_univ_index", EmitDefaultValue = false)]
        public int CashUnivIndex { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class OptimizerInputsPortfolios {\n");
            sb.Append("  Initial: ").Append(Initial).Append("\n");
            sb.Append("  Benchmarks: ").Append(Benchmarks).Append("\n");
            sb.Append("  Buylist: ").Append(Buylist).Append("\n");
            sb.Append("  CashUnivIndex: ").Append(CashUnivIndex).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as OptimizerInputsPortfolios);
        }

        /// <summary>
        /// Returns true if OptimizerInputsPortfolios instances are equal
        /// </summary>
        /// <param name="input">Instance of OptimizerInputsPortfolios to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(OptimizerInputsPortfolios input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Initial == input.Initial ||
                    (this.Initial != null &&
                    this.Initial.Equals(input.Initial))
                ) && 
                (
                    this.Benchmarks == input.Benchmarks ||
                    this.Benchmarks != null &&
                    input.Benchmarks != null &&
                    this.Benchmarks.SequenceEqual(input.Benchmarks)
                ) && 
                (
                    this.Buylist == input.Buylist ||
                    this.Buylist != null &&
                    input.Buylist != null &&
                    this.Buylist.SequenceEqual(input.Buylist)
                ) && 
                (
                    this.CashUnivIndex == input.CashUnivIndex ||
                    this.CashUnivIndex.Equals(input.CashUnivIndex)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Initial != null)
                {
                    hashCode = (hashCode * 59) + this.Initial.GetHashCode();
                }
                if (this.Benchmarks != null)
                {
                    hashCode = (hashCode * 59) + this.Benchmarks.GetHashCode();
                }
                if (this.Buylist != null)
                {
                    hashCode = (hashCode * 59) + this.Buylist.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.CashUnivIndex.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
