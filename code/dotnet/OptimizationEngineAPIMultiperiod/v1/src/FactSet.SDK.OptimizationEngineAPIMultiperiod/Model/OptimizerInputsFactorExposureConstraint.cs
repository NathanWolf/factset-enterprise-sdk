/*
 * fpo_mp_input
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = FactSet.SDK.OptimizationEngineAPIMultiperiod.Client.OpenAPIDateConverter;

namespace FactSet.SDK.OptimizationEngineAPIMultiperiod.Model
{
    /// <summary>
    /// 3
    /// </summary>
    [DataContract(Name = "optimizer.inputs.FactorExposureConstraint")]
    public partial class OptimizerInputsFactorExposureConstraint : IEquatable<OptimizerInputsFactorExposureConstraint>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="OptimizerInputsFactorExposureConstraint" /> class.
        /// </summary>
        /// <param name="name">name.</param>
        /// <param name="penalty">penalty.</param>
        /// <param name="relToBenchmark">relToBenchmark.</param>
        /// <param name="benchmarkIndex">benchmarkIndex.</param>
        /// <param name="factors">factors.</param>
        /// <param name="hierarchy">hierarchy.</param>
        /// <param name="groups">groups.</param>
        public OptimizerInputsFactorExposureConstraint(string name = default(string), OptimizerInputsPenalty penalty = default(OptimizerInputsPenalty), bool relToBenchmark = default(bool), int benchmarkIndex = default(int), OptimizerInputsFactorExposureAttributes factors = default(OptimizerInputsFactorExposureAttributes), int hierarchy = default(int), List<OptimizerInputsConstraintGroup> groups = default(List<OptimizerInputsConstraintGroup>))
        {
            this.Name = name;
            this.Penalty = penalty;
            this.RelToBenchmark = relToBenchmark;
            this.BenchmarkIndex = benchmarkIndex;
            this.Factors = factors;
            this.Hierarchy = hierarchy;
            this.Groups = groups;
        }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name = "name", EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets Penalty
        /// </summary>
        [DataMember(Name = "penalty", EmitDefaultValue = false)]
        public OptimizerInputsPenalty Penalty { get; set; }

        /// <summary>
        /// Gets or Sets RelToBenchmark
        /// </summary>
        [DataMember(Name = "rel_to_benchmark", EmitDefaultValue = true)]
        public bool RelToBenchmark { get; set; }

        /// <summary>
        /// Gets or Sets BenchmarkIndex
        /// </summary>
        [DataMember(Name = "benchmark_index", EmitDefaultValue = false)]
        public int BenchmarkIndex { get; set; }

        /// <summary>
        /// Gets or Sets Factors
        /// </summary>
        [DataMember(Name = "factors", EmitDefaultValue = false)]
        public OptimizerInputsFactorExposureAttributes Factors { get; set; }

        /// <summary>
        /// Gets or Sets Hierarchy
        /// </summary>
        [DataMember(Name = "hierarchy", EmitDefaultValue = false)]
        public int Hierarchy { get; set; }

        /// <summary>
        /// Gets or Sets Groups
        /// </summary>
        [DataMember(Name = "groups", EmitDefaultValue = false)]
        public List<OptimizerInputsConstraintGroup> Groups { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class OptimizerInputsFactorExposureConstraint {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Penalty: ").Append(Penalty).Append("\n");
            sb.Append("  RelToBenchmark: ").Append(RelToBenchmark).Append("\n");
            sb.Append("  BenchmarkIndex: ").Append(BenchmarkIndex).Append("\n");
            sb.Append("  Factors: ").Append(Factors).Append("\n");
            sb.Append("  Hierarchy: ").Append(Hierarchy).Append("\n");
            sb.Append("  Groups: ").Append(Groups).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as OptimizerInputsFactorExposureConstraint);
        }

        /// <summary>
        /// Returns true if OptimizerInputsFactorExposureConstraint instances are equal
        /// </summary>
        /// <param name="input">Instance of OptimizerInputsFactorExposureConstraint to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(OptimizerInputsFactorExposureConstraint input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Penalty == input.Penalty ||
                    (this.Penalty != null &&
                    this.Penalty.Equals(input.Penalty))
                ) && 
                (
                    this.RelToBenchmark == input.RelToBenchmark ||
                    this.RelToBenchmark.Equals(input.RelToBenchmark)
                ) && 
                (
                    this.BenchmarkIndex == input.BenchmarkIndex ||
                    this.BenchmarkIndex.Equals(input.BenchmarkIndex)
                ) && 
                (
                    this.Factors == input.Factors ||
                    (this.Factors != null &&
                    this.Factors.Equals(input.Factors))
                ) && 
                (
                    this.Hierarchy == input.Hierarchy ||
                    this.Hierarchy.Equals(input.Hierarchy)
                ) && 
                (
                    this.Groups == input.Groups ||
                    this.Groups != null &&
                    input.Groups != null &&
                    this.Groups.SequenceEqual(input.Groups)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                if (this.Penalty != null)
                {
                    hashCode = (hashCode * 59) + this.Penalty.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.RelToBenchmark.GetHashCode();
                hashCode = (hashCode * 59) + this.BenchmarkIndex.GetHashCode();
                if (this.Factors != null)
                {
                    hashCode = (hashCode * 59) + this.Factors.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Hierarchy.GetHashCode();
                if (this.Groups != null)
                {
                    hashCode = (hashCode * 59) + this.Groups.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
