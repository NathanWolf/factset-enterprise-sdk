/*
 * fpo_mp_input
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = FactSet.SDK.OptimizationEngineAPIMultiperiod.Client.OpenAPIDateConverter;

namespace FactSet.SDK.OptimizationEngineAPIMultiperiod.Model
{
    /// <summary>
    /// ToDo :Note to circle back to this when we have more info on factors
    /// </summary>
    [DataContract(Name = "optimizer.inputs.Objective")]
    public partial class OptimizerInputsObjective : IEquatable<OptimizerInputsObjective>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="OptimizerInputsObjective" /> class.
        /// </summary>
        /// <param name="factorExposure">factorExposure.</param>
        /// <param name="expectedTailLoss">expectedTailLoss.</param>
        /// <param name="volatility">volatility.</param>
        /// <param name="drawdown">drawdown.</param>
        /// <param name="generalLinear">generalLinear.</param>
        /// <param name="expectedReturn">expectedReturn.</param>
        /// <param name="sensitivity">sensitivity.</param>
        /// <param name="sharpeRatio">sharpeRatio.</param>
        /// <param name="starr">starr.</param>
        /// <param name="diversificationRatio">diversificationRatio.</param>
        /// <param name="nullRiskParity">This is true when there is no risk_parity.</param>
        /// <param name="riskParity">riskParity.</param>
        /// <param name="transactionCost">transactionCost.</param>
        public OptimizerInputsObjective(List<OptimizerInputsFactorExposureTerm> factorExposure = default(List<OptimizerInputsFactorExposureTerm>), List<OptimizerInputsExpectedTailLossTerm> expectedTailLoss = default(List<OptimizerInputsExpectedTailLossTerm>), List<OptimizerInputsVolatilityTerm> volatility = default(List<OptimizerInputsVolatilityTerm>), List<OptimizerInputsDrawdownTerm> drawdown = default(List<OptimizerInputsDrawdownTerm>), List<OptimizerInputsGeneralLinearTerm> generalLinear = default(List<OptimizerInputsGeneralLinearTerm>), List<OptimizerInputsExpectedReturnTerm> expectedReturn = default(List<OptimizerInputsExpectedReturnTerm>), List<OptimizerInputsSensitivityTerm> sensitivity = default(List<OptimizerInputsSensitivityTerm>), OptimizerInputsSharpeRatioTerm sharpeRatio = default(OptimizerInputsSharpeRatioTerm), OptimizerInputsSTARRTerm starr = default(OptimizerInputsSTARRTerm), OptimizerInputsDiversificationRatioTerm diversificationRatio = default(OptimizerInputsDiversificationRatioTerm), bool nullRiskParity = default(bool), OptimizerInputsRiskParityTerm riskParity = default(OptimizerInputsRiskParityTerm), List<OptimizerInputsTransactionCostTerm> transactionCost = default(List<OptimizerInputsTransactionCostTerm>))
        {
            this.FactorExposure = factorExposure;
            this.ExpectedTailLoss = expectedTailLoss;
            this.Volatility = volatility;
            this.Drawdown = drawdown;
            this.GeneralLinear = generalLinear;
            this.ExpectedReturn = expectedReturn;
            this.Sensitivity = sensitivity;
            this.SharpeRatio = sharpeRatio;
            this.Starr = starr;
            this.DiversificationRatio = diversificationRatio;
            this.NullRiskParity = nullRiskParity;
            this.RiskParity = riskParity;
            this.TransactionCost = transactionCost;
        }

        /// <summary>
        /// Gets or Sets FactorExposure
        /// </summary>
        [DataMember(Name = "factor_exposure", EmitDefaultValue = false)]
        public List<OptimizerInputsFactorExposureTerm> FactorExposure { get; set; }

        /// <summary>
        /// Gets or Sets ExpectedTailLoss
        /// </summary>
        [DataMember(Name = "expected_tail_loss", EmitDefaultValue = false)]
        public List<OptimizerInputsExpectedTailLossTerm> ExpectedTailLoss { get; set; }

        /// <summary>
        /// Gets or Sets Volatility
        /// </summary>
        [DataMember(Name = "volatility", EmitDefaultValue = false)]
        public List<OptimizerInputsVolatilityTerm> Volatility { get; set; }

        /// <summary>
        /// Gets or Sets Drawdown
        /// </summary>
        [DataMember(Name = "drawdown", EmitDefaultValue = false)]
        public List<OptimizerInputsDrawdownTerm> Drawdown { get; set; }

        /// <summary>
        /// Gets or Sets GeneralLinear
        /// </summary>
        [DataMember(Name = "general_linear", EmitDefaultValue = false)]
        public List<OptimizerInputsGeneralLinearTerm> GeneralLinear { get; set; }

        /// <summary>
        /// Gets or Sets ExpectedReturn
        /// </summary>
        [DataMember(Name = "expected_return", EmitDefaultValue = false)]
        public List<OptimizerInputsExpectedReturnTerm> ExpectedReturn { get; set; }

        /// <summary>
        /// Gets or Sets Sensitivity
        /// </summary>
        [DataMember(Name = "sensitivity", EmitDefaultValue = false)]
        public List<OptimizerInputsSensitivityTerm> Sensitivity { get; set; }

        /// <summary>
        /// Gets or Sets SharpeRatio
        /// </summary>
        [DataMember(Name = "sharpe_ratio", EmitDefaultValue = false)]
        public OptimizerInputsSharpeRatioTerm SharpeRatio { get; set; }

        /// <summary>
        /// Gets or Sets Starr
        /// </summary>
        [DataMember(Name = "starr", EmitDefaultValue = false)]
        public OptimizerInputsSTARRTerm Starr { get; set; }

        /// <summary>
        /// Gets or Sets DiversificationRatio
        /// </summary>
        [DataMember(Name = "diversification_ratio", EmitDefaultValue = false)]
        public OptimizerInputsDiversificationRatioTerm DiversificationRatio { get; set; }

        /// <summary>
        /// This is true when there is no risk_parity
        /// </summary>
        /// <value>This is true when there is no risk_parity</value>
        [DataMember(Name = "null_risk_parity", EmitDefaultValue = true)]
        public bool NullRiskParity { get; set; }

        /// <summary>
        /// Gets or Sets RiskParity
        /// </summary>
        [DataMember(Name = "risk_parity", EmitDefaultValue = false)]
        public OptimizerInputsRiskParityTerm RiskParity { get; set; }

        /// <summary>
        /// Gets or Sets TransactionCost
        /// </summary>
        [DataMember(Name = "transaction_cost", EmitDefaultValue = false)]
        public List<OptimizerInputsTransactionCostTerm> TransactionCost { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class OptimizerInputsObjective {\n");
            sb.Append("  FactorExposure: ").Append(FactorExposure).Append("\n");
            sb.Append("  ExpectedTailLoss: ").Append(ExpectedTailLoss).Append("\n");
            sb.Append("  Volatility: ").Append(Volatility).Append("\n");
            sb.Append("  Drawdown: ").Append(Drawdown).Append("\n");
            sb.Append("  GeneralLinear: ").Append(GeneralLinear).Append("\n");
            sb.Append("  ExpectedReturn: ").Append(ExpectedReturn).Append("\n");
            sb.Append("  Sensitivity: ").Append(Sensitivity).Append("\n");
            sb.Append("  SharpeRatio: ").Append(SharpeRatio).Append("\n");
            sb.Append("  Starr: ").Append(Starr).Append("\n");
            sb.Append("  DiversificationRatio: ").Append(DiversificationRatio).Append("\n");
            sb.Append("  NullRiskParity: ").Append(NullRiskParity).Append("\n");
            sb.Append("  RiskParity: ").Append(RiskParity).Append("\n");
            sb.Append("  TransactionCost: ").Append(TransactionCost).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as OptimizerInputsObjective);
        }

        /// <summary>
        /// Returns true if OptimizerInputsObjective instances are equal
        /// </summary>
        /// <param name="input">Instance of OptimizerInputsObjective to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(OptimizerInputsObjective input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.FactorExposure == input.FactorExposure ||
                    this.FactorExposure != null &&
                    input.FactorExposure != null &&
                    this.FactorExposure.SequenceEqual(input.FactorExposure)
                ) && 
                (
                    this.ExpectedTailLoss == input.ExpectedTailLoss ||
                    this.ExpectedTailLoss != null &&
                    input.ExpectedTailLoss != null &&
                    this.ExpectedTailLoss.SequenceEqual(input.ExpectedTailLoss)
                ) && 
                (
                    this.Volatility == input.Volatility ||
                    this.Volatility != null &&
                    input.Volatility != null &&
                    this.Volatility.SequenceEqual(input.Volatility)
                ) && 
                (
                    this.Drawdown == input.Drawdown ||
                    this.Drawdown != null &&
                    input.Drawdown != null &&
                    this.Drawdown.SequenceEqual(input.Drawdown)
                ) && 
                (
                    this.GeneralLinear == input.GeneralLinear ||
                    this.GeneralLinear != null &&
                    input.GeneralLinear != null &&
                    this.GeneralLinear.SequenceEqual(input.GeneralLinear)
                ) && 
                (
                    this.ExpectedReturn == input.ExpectedReturn ||
                    this.ExpectedReturn != null &&
                    input.ExpectedReturn != null &&
                    this.ExpectedReturn.SequenceEqual(input.ExpectedReturn)
                ) && 
                (
                    this.Sensitivity == input.Sensitivity ||
                    this.Sensitivity != null &&
                    input.Sensitivity != null &&
                    this.Sensitivity.SequenceEqual(input.Sensitivity)
                ) && 
                (
                    this.SharpeRatio == input.SharpeRatio ||
                    (this.SharpeRatio != null &&
                    this.SharpeRatio.Equals(input.SharpeRatio))
                ) && 
                (
                    this.Starr == input.Starr ||
                    (this.Starr != null &&
                    this.Starr.Equals(input.Starr))
                ) && 
                (
                    this.DiversificationRatio == input.DiversificationRatio ||
                    (this.DiversificationRatio != null &&
                    this.DiversificationRatio.Equals(input.DiversificationRatio))
                ) && 
                (
                    this.NullRiskParity == input.NullRiskParity ||
                    this.NullRiskParity.Equals(input.NullRiskParity)
                ) && 
                (
                    this.RiskParity == input.RiskParity ||
                    (this.RiskParity != null &&
                    this.RiskParity.Equals(input.RiskParity))
                ) && 
                (
                    this.TransactionCost == input.TransactionCost ||
                    this.TransactionCost != null &&
                    input.TransactionCost != null &&
                    this.TransactionCost.SequenceEqual(input.TransactionCost)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.FactorExposure != null)
                {
                    hashCode = (hashCode * 59) + this.FactorExposure.GetHashCode();
                }
                if (this.ExpectedTailLoss != null)
                {
                    hashCode = (hashCode * 59) + this.ExpectedTailLoss.GetHashCode();
                }
                if (this.Volatility != null)
                {
                    hashCode = (hashCode * 59) + this.Volatility.GetHashCode();
                }
                if (this.Drawdown != null)
                {
                    hashCode = (hashCode * 59) + this.Drawdown.GetHashCode();
                }
                if (this.GeneralLinear != null)
                {
                    hashCode = (hashCode * 59) + this.GeneralLinear.GetHashCode();
                }
                if (this.ExpectedReturn != null)
                {
                    hashCode = (hashCode * 59) + this.ExpectedReturn.GetHashCode();
                }
                if (this.Sensitivity != null)
                {
                    hashCode = (hashCode * 59) + this.Sensitivity.GetHashCode();
                }
                if (this.SharpeRatio != null)
                {
                    hashCode = (hashCode * 59) + this.SharpeRatio.GetHashCode();
                }
                if (this.Starr != null)
                {
                    hashCode = (hashCode * 59) + this.Starr.GetHashCode();
                }
                if (this.DiversificationRatio != null)
                {
                    hashCode = (hashCode * 59) + this.DiversificationRatio.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.NullRiskParity.GetHashCode();
                if (this.RiskParity != null)
                {
                    hashCode = (hashCode * 59) + this.RiskParity.GetHashCode();
                }
                if (this.TransactionCost != null)
                {
                    hashCode = (hashCode * 59) + this.TransactionCost.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
