/*
 * fpo_mp_input
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = FactSet.SDK.OptimizationEngineAPIMultiperiod.Client.OpenAPIDateConverter;

namespace FactSet.SDK.OptimizationEngineAPIMultiperiod.Model
{
    /// <summary>
    /// OptimizerInputsConstraintGroup
    /// </summary>
    [DataContract(Name = "optimizer.inputs.ConstraintGroup")]
    public partial class OptimizerInputsConstraintGroup : IEquatable<OptimizerInputsConstraintGroup>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="OptimizerInputsConstraintGroup" /> class.
        /// </summary>
        /// <param name="min">min.</param>
        /// <param name="max">max.</param>
        /// <param name="id">id.</param>
        /// <param name="nestedGroups">nestedGroups.</param>
        /// <param name="groupLookupIndex">groupLookupIndex.</param>
        public OptimizerInputsConstraintGroup(OptimizerInputsValue min = default(OptimizerInputsValue), OptimizerInputsValue max = default(OptimizerInputsValue), string id = default(string), List<OptimizerInputsConstraintGroup> nestedGroups = default(List<OptimizerInputsConstraintGroup>), int groupLookupIndex = default(int))
        {
            this.Min = min;
            this.Max = max;
            this.Id = id;
            this.NestedGroups = nestedGroups;
            this.GroupLookupIndex = groupLookupIndex;
        }

        /// <summary>
        /// Gets or Sets Min
        /// </summary>
        [DataMember(Name = "min", EmitDefaultValue = false)]
        public OptimizerInputsValue Min { get; set; }

        /// <summary>
        /// Gets or Sets Max
        /// </summary>
        [DataMember(Name = "max", EmitDefaultValue = false)]
        public OptimizerInputsValue Max { get; set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets NestedGroups
        /// </summary>
        [DataMember(Name = "nested_groups", EmitDefaultValue = false)]
        public List<OptimizerInputsConstraintGroup> NestedGroups { get; set; }

        /// <summary>
        /// Gets or Sets GroupLookupIndex
        /// </summary>
        [DataMember(Name = "group_lookup_index", EmitDefaultValue = false)]
        public int GroupLookupIndex { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class OptimizerInputsConstraintGroup {\n");
            sb.Append("  Min: ").Append(Min).Append("\n");
            sb.Append("  Max: ").Append(Max).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  NestedGroups: ").Append(NestedGroups).Append("\n");
            sb.Append("  GroupLookupIndex: ").Append(GroupLookupIndex).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as OptimizerInputsConstraintGroup);
        }

        /// <summary>
        /// Returns true if OptimizerInputsConstraintGroup instances are equal
        /// </summary>
        /// <param name="input">Instance of OptimizerInputsConstraintGroup to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(OptimizerInputsConstraintGroup input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Min == input.Min ||
                    (this.Min != null &&
                    this.Min.Equals(input.Min))
                ) && 
                (
                    this.Max == input.Max ||
                    (this.Max != null &&
                    this.Max.Equals(input.Max))
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.NestedGroups == input.NestedGroups ||
                    this.NestedGroups != null &&
                    input.NestedGroups != null &&
                    this.NestedGroups.SequenceEqual(input.NestedGroups)
                ) && 
                (
                    this.GroupLookupIndex == input.GroupLookupIndex ||
                    this.GroupLookupIndex.Equals(input.GroupLookupIndex)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Min != null)
                {
                    hashCode = (hashCode * 59) + this.Min.GetHashCode();
                }
                if (this.Max != null)
                {
                    hashCode = (hashCode * 59) + this.Max.GetHashCode();
                }
                if (this.Id != null)
                {
                    hashCode = (hashCode * 59) + this.Id.GetHashCode();
                }
                if (this.NestedGroups != null)
                {
                    hashCode = (hashCode * 59) + this.NestedGroups.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.GroupLookupIndex.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
