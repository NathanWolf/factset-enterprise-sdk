/*
 * fpo_mp_input
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = FactSet.SDK.OptimizationEngineAPIMultiperiod.Client.OpenAPIDateConverter;

namespace FactSet.SDK.OptimizationEngineAPIMultiperiod.Model
{
    /// <summary>
    /// OptimizerInputsExpectedReturnTerm
    /// </summary>
    [DataContract(Name = "optimizer.inputs.ExpectedReturnTerm")]
    public partial class OptimizerInputsExpectedReturnTerm : IEquatable<OptimizerInputsExpectedReturnTerm>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="OptimizerInputsExpectedReturnTerm" /> class.
        /// </summary>
        /// <param name="name">name.</param>
        /// <param name="multiplier">multiplier.</param>
        /// <param name="returnValues">returnValues.</param>
        /// <param name="direction">direction.</param>
        /// <param name="useAlpha">useAlpha.</param>
        /// <param name="relToBenchmark">relToBenchmark.</param>
        /// <param name="benchmarkIndex">benchmarkIndex.</param>
        public OptimizerInputsExpectedReturnTerm(string name = default(string), OptimizerInputsValue multiplier = default(OptimizerInputsValue), OptimizerInputsValue returnValues = default(OptimizerInputsValue), OptimizerInputsEObjectiveTermDirectionEnum direction = default(OptimizerInputsEObjectiveTermDirectionEnum), bool useAlpha = default(bool), bool relToBenchmark = default(bool), int benchmarkIndex = default(int))
        {
            this.Name = name;
            this.Multiplier = multiplier;
            this.ReturnValues = returnValues;
            this.Direction = direction;
            this.UseAlpha = useAlpha;
            this.RelToBenchmark = relToBenchmark;
            this.BenchmarkIndex = benchmarkIndex;
        }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name = "name", EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets Multiplier
        /// </summary>
        [DataMember(Name = "multiplier", EmitDefaultValue = false)]
        public OptimizerInputsValue Multiplier { get; set; }

        /// <summary>
        /// Gets or Sets ReturnValues
        /// </summary>
        [DataMember(Name = "return_values", EmitDefaultValue = false)]
        public OptimizerInputsValue ReturnValues { get; set; }

        /// <summary>
        /// Gets or Sets Direction
        /// </summary>
        [DataMember(Name = "direction", EmitDefaultValue = false)]
        public OptimizerInputsEObjectiveTermDirectionEnum Direction { get; set; }

        /// <summary>
        /// Gets or Sets UseAlpha
        /// </summary>
        [DataMember(Name = "use_alpha", EmitDefaultValue = true)]
        public bool UseAlpha { get; set; }

        /// <summary>
        /// Gets or Sets RelToBenchmark
        /// </summary>
        [DataMember(Name = "rel_to_benchmark", EmitDefaultValue = true)]
        public bool RelToBenchmark { get; set; }

        /// <summary>
        /// Gets or Sets BenchmarkIndex
        /// </summary>
        [DataMember(Name = "benchmark_index", EmitDefaultValue = false)]
        public int BenchmarkIndex { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class OptimizerInputsExpectedReturnTerm {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Multiplier: ").Append(Multiplier).Append("\n");
            sb.Append("  ReturnValues: ").Append(ReturnValues).Append("\n");
            sb.Append("  Direction: ").Append(Direction).Append("\n");
            sb.Append("  UseAlpha: ").Append(UseAlpha).Append("\n");
            sb.Append("  RelToBenchmark: ").Append(RelToBenchmark).Append("\n");
            sb.Append("  BenchmarkIndex: ").Append(BenchmarkIndex).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as OptimizerInputsExpectedReturnTerm);
        }

        /// <summary>
        /// Returns true if OptimizerInputsExpectedReturnTerm instances are equal
        /// </summary>
        /// <param name="input">Instance of OptimizerInputsExpectedReturnTerm to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(OptimizerInputsExpectedReturnTerm input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Multiplier == input.Multiplier ||
                    (this.Multiplier != null &&
                    this.Multiplier.Equals(input.Multiplier))
                ) && 
                (
                    this.ReturnValues == input.ReturnValues ||
                    (this.ReturnValues != null &&
                    this.ReturnValues.Equals(input.ReturnValues))
                ) && 
                (
                    this.Direction == input.Direction ||
                    (this.Direction != null &&
                    this.Direction.Equals(input.Direction))
                ) && 
                (
                    this.UseAlpha == input.UseAlpha ||
                    this.UseAlpha.Equals(input.UseAlpha)
                ) && 
                (
                    this.RelToBenchmark == input.RelToBenchmark ||
                    this.RelToBenchmark.Equals(input.RelToBenchmark)
                ) && 
                (
                    this.BenchmarkIndex == input.BenchmarkIndex ||
                    this.BenchmarkIndex.Equals(input.BenchmarkIndex)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                if (this.Multiplier != null)
                {
                    hashCode = (hashCode * 59) + this.Multiplier.GetHashCode();
                }
                if (this.ReturnValues != null)
                {
                    hashCode = (hashCode * 59) + this.ReturnValues.GetHashCode();
                }
                if (this.Direction != null)
                {
                    hashCode = (hashCode * 59) + this.Direction.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.UseAlpha.GetHashCode();
                hashCode = (hashCode * 59) + this.RelToBenchmark.GetHashCode();
                hashCode = (hashCode * 59) + this.BenchmarkIndex.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
