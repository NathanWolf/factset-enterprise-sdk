/*
 * fpo_mp_input
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = FactSet.SDK.OptimizationEngineAPIMultiperiod.Client.OpenAPIDateConverter;

namespace FactSet.SDK.OptimizationEngineAPIMultiperiod.Model
{
    /// <summary>
    /// OptimizerInputsMultiPeriodStrategy
    /// </summary>
    [DataContract(Name = "optimizer.inputs.MultiPeriodStrategy")]
    public partial class OptimizerInputsMultiPeriodStrategy : IEquatable<OptimizerInputsMultiPeriodStrategy>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="OptimizerInputsMultiPeriodStrategy" /> class.
        /// </summary>
        /// <param name="objective">objective.</param>
        /// <param name="constraints">constraints.</param>
        /// <param name="transactionCost">transactionCost.</param>
        /// <param name="options">options.</param>
        /// <param name="expectedReturn">expectedReturn.</param>
        public OptimizerInputsMultiPeriodStrategy(OptimizerInputsMultiPeriodObjective objective = default(OptimizerInputsMultiPeriodObjective), OptimizerInputsMultiPeriodConstraints constraints = default(OptimizerInputsMultiPeriodConstraints), OptimizerInputsTransactionCost transactionCost = default(OptimizerInputsTransactionCost), OptimizerInputsMultiPeriodOptions options = default(OptimizerInputsMultiPeriodOptions), OptimizerInputsExpectedReturn expectedReturn = default(OptimizerInputsExpectedReturn))
        {
            this.Objective = objective;
            this.Constraints = constraints;
            this.TransactionCost = transactionCost;
            this.Options = options;
            this.ExpectedReturn = expectedReturn;
        }

        /// <summary>
        /// Gets or Sets Objective
        /// </summary>
        [DataMember(Name = "objective", EmitDefaultValue = false)]
        public OptimizerInputsMultiPeriodObjective Objective { get; set; }

        /// <summary>
        /// Gets or Sets Constraints
        /// </summary>
        [DataMember(Name = "constraints", EmitDefaultValue = false)]
        public OptimizerInputsMultiPeriodConstraints Constraints { get; set; }

        /// <summary>
        /// Gets or Sets TransactionCost
        /// </summary>
        [DataMember(Name = "transaction_cost", EmitDefaultValue = false)]
        public OptimizerInputsTransactionCost TransactionCost { get; set; }

        /// <summary>
        /// Gets or Sets Options
        /// </summary>
        [DataMember(Name = "options", EmitDefaultValue = false)]
        public OptimizerInputsMultiPeriodOptions Options { get; set; }

        /// <summary>
        /// Gets or Sets ExpectedReturn
        /// </summary>
        [DataMember(Name = "expected_return", EmitDefaultValue = false)]
        public OptimizerInputsExpectedReturn ExpectedReturn { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class OptimizerInputsMultiPeriodStrategy {\n");
            sb.Append("  Objective: ").Append(Objective).Append("\n");
            sb.Append("  Constraints: ").Append(Constraints).Append("\n");
            sb.Append("  TransactionCost: ").Append(TransactionCost).Append("\n");
            sb.Append("  Options: ").Append(Options).Append("\n");
            sb.Append("  ExpectedReturn: ").Append(ExpectedReturn).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as OptimizerInputsMultiPeriodStrategy);
        }

        /// <summary>
        /// Returns true if OptimizerInputsMultiPeriodStrategy instances are equal
        /// </summary>
        /// <param name="input">Instance of OptimizerInputsMultiPeriodStrategy to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(OptimizerInputsMultiPeriodStrategy input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Objective == input.Objective ||
                    (this.Objective != null &&
                    this.Objective.Equals(input.Objective))
                ) && 
                (
                    this.Constraints == input.Constraints ||
                    (this.Constraints != null &&
                    this.Constraints.Equals(input.Constraints))
                ) && 
                (
                    this.TransactionCost == input.TransactionCost ||
                    (this.TransactionCost != null &&
                    this.TransactionCost.Equals(input.TransactionCost))
                ) && 
                (
                    this.Options == input.Options ||
                    (this.Options != null &&
                    this.Options.Equals(input.Options))
                ) && 
                (
                    this.ExpectedReturn == input.ExpectedReturn ||
                    (this.ExpectedReturn != null &&
                    this.ExpectedReturn.Equals(input.ExpectedReturn))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Objective != null)
                {
                    hashCode = (hashCode * 59) + this.Objective.GetHashCode();
                }
                if (this.Constraints != null)
                {
                    hashCode = (hashCode * 59) + this.Constraints.GetHashCode();
                }
                if (this.TransactionCost != null)
                {
                    hashCode = (hashCode * 59) + this.TransactionCost.GetHashCode();
                }
                if (this.Options != null)
                {
                    hashCode = (hashCode * 59) + this.Options.GetHashCode();
                }
                if (this.ExpectedReturn != null)
                {
                    hashCode = (hashCode * 59) + this.ExpectedReturn.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
