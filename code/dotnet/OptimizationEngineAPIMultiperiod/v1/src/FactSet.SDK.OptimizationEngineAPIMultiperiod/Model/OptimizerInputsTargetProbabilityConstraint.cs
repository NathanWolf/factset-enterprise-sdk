/*
 * fpo_mp_input
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = FactSet.SDK.OptimizationEngineAPIMultiperiod.Client.OpenAPIDateConverter;

namespace FactSet.SDK.OptimizationEngineAPIMultiperiod.Model
{
    /// <summary>
    /// OptimizerInputsTargetProbabilityConstraint
    /// </summary>
    [DataContract(Name = "optimizer.inputs.TargetProbabilityConstraint")]
    public partial class OptimizerInputsTargetProbabilityConstraint : IEquatable<OptimizerInputsTargetProbabilityConstraint>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="OptimizerInputsTargetProbabilityConstraint" /> class.
        /// </summary>
        /// <param name="name">name.</param>
        /// <param name="thresholdMin">thresholdMin.</param>
        /// <param name="thresholdMax">thresholdMax.</param>
        /// <param name="minProbability">minProbability.</param>
        /// <param name="maxProbability">maxProbability.</param>
        /// <param name="hierarchy">hierarchy.</param>
        public OptimizerInputsTargetProbabilityConstraint(string name = default(string), OptimizerInputsValue thresholdMin = default(OptimizerInputsValue), OptimizerInputsValue thresholdMax = default(OptimizerInputsValue), OptimizerInputsValue minProbability = default(OptimizerInputsValue), OptimizerInputsValue maxProbability = default(OptimizerInputsValue), int hierarchy = default(int))
        {
            this.Name = name;
            this.ThresholdMin = thresholdMin;
            this.ThresholdMax = thresholdMax;
            this.MinProbability = minProbability;
            this.MaxProbability = maxProbability;
            this.Hierarchy = hierarchy;
        }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name = "name", EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets ThresholdMin
        /// </summary>
        [DataMember(Name = "threshold_min", EmitDefaultValue = false)]
        public OptimizerInputsValue ThresholdMin { get; set; }

        /// <summary>
        /// Gets or Sets ThresholdMax
        /// </summary>
        [DataMember(Name = "threshold_max", EmitDefaultValue = false)]
        public OptimizerInputsValue ThresholdMax { get; set; }

        /// <summary>
        /// Gets or Sets MinProbability
        /// </summary>
        [DataMember(Name = "min_probability", EmitDefaultValue = false)]
        public OptimizerInputsValue MinProbability { get; set; }

        /// <summary>
        /// Gets or Sets MaxProbability
        /// </summary>
        [DataMember(Name = "max_probability", EmitDefaultValue = false)]
        public OptimizerInputsValue MaxProbability { get; set; }

        /// <summary>
        /// Gets or Sets Hierarchy
        /// </summary>
        [DataMember(Name = "hierarchy", EmitDefaultValue = false)]
        public int Hierarchy { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class OptimizerInputsTargetProbabilityConstraint {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  ThresholdMin: ").Append(ThresholdMin).Append("\n");
            sb.Append("  ThresholdMax: ").Append(ThresholdMax).Append("\n");
            sb.Append("  MinProbability: ").Append(MinProbability).Append("\n");
            sb.Append("  MaxProbability: ").Append(MaxProbability).Append("\n");
            sb.Append("  Hierarchy: ").Append(Hierarchy).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as OptimizerInputsTargetProbabilityConstraint);
        }

        /// <summary>
        /// Returns true if OptimizerInputsTargetProbabilityConstraint instances are equal
        /// </summary>
        /// <param name="input">Instance of OptimizerInputsTargetProbabilityConstraint to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(OptimizerInputsTargetProbabilityConstraint input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.ThresholdMin == input.ThresholdMin ||
                    (this.ThresholdMin != null &&
                    this.ThresholdMin.Equals(input.ThresholdMin))
                ) && 
                (
                    this.ThresholdMax == input.ThresholdMax ||
                    (this.ThresholdMax != null &&
                    this.ThresholdMax.Equals(input.ThresholdMax))
                ) && 
                (
                    this.MinProbability == input.MinProbability ||
                    (this.MinProbability != null &&
                    this.MinProbability.Equals(input.MinProbability))
                ) && 
                (
                    this.MaxProbability == input.MaxProbability ||
                    (this.MaxProbability != null &&
                    this.MaxProbability.Equals(input.MaxProbability))
                ) && 
                (
                    this.Hierarchy == input.Hierarchy ||
                    this.Hierarchy.Equals(input.Hierarchy)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                if (this.ThresholdMin != null)
                {
                    hashCode = (hashCode * 59) + this.ThresholdMin.GetHashCode();
                }
                if (this.ThresholdMax != null)
                {
                    hashCode = (hashCode * 59) + this.ThresholdMax.GetHashCode();
                }
                if (this.MinProbability != null)
                {
                    hashCode = (hashCode * 59) + this.MinProbability.GetHashCode();
                }
                if (this.MaxProbability != null)
                {
                    hashCode = (hashCode * 59) + this.MaxProbability.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Hierarchy.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
