/*
 * fpo_mp_input
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = FactSet.SDK.OptimizationEngineAPIMultiperiod.Client.OpenAPIDateConverter;

namespace FactSet.SDK.OptimizationEngineAPIMultiperiod.Model
{
    /// <summary>
    /// OptimizerInputsMultiPeriodObjective
    /// </summary>
    [DataContract(Name = "optimizer.inputs.MultiPeriodObjective")]
    public partial class OptimizerInputsMultiPeriodObjective : IEquatable<OptimizerInputsMultiPeriodObjective>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="OptimizerInputsMultiPeriodObjective" /> class.
        /// </summary>
        /// <param name="factorExposure">factorExposure.</param>
        /// <param name="volatility">volatility.</param>
        /// <param name="generalLinear">generalLinear.</param>
        /// <param name="expectedReturn">expectedReturn.</param>
        /// <param name="sensitivity">sensitivity.</param>
        /// <param name="objectiveRatio">objectiveRatio.</param>
        /// <param name="tailRisk">MultiPeriod-Specific.</param>
        /// <param name="targetProbability">targetProbability.</param>
        public OptimizerInputsMultiPeriodObjective(List<OptimizerInputsMPFactorExposureTerm> factorExposure = default(List<OptimizerInputsMPFactorExposureTerm>), List<OptimizerInputsMPVolatilityTerm> volatility = default(List<OptimizerInputsMPVolatilityTerm>), List<OptimizerInputsMPGeneralLinearTerm> generalLinear = default(List<OptimizerInputsMPGeneralLinearTerm>), List<OptimizerInputsMPExpectedReturnTerm> expectedReturn = default(List<OptimizerInputsMPExpectedReturnTerm>), List<OptimizerInputsMPSensitivityTerm> sensitivity = default(List<OptimizerInputsMPSensitivityTerm>), OptimizerInputsMPObjectiveRatioTerm objectiveRatio = default(OptimizerInputsMPObjectiveRatioTerm), List<OptimizerInputsMPTailRiskTerm> tailRisk = default(List<OptimizerInputsMPTailRiskTerm>), List<OptimizerInputsMPTargetProbabilityTerm> targetProbability = default(List<OptimizerInputsMPTargetProbabilityTerm>))
        {
            this.FactorExposure = factorExposure;
            this.Volatility = volatility;
            this.GeneralLinear = generalLinear;
            this.ExpectedReturn = expectedReturn;
            this.Sensitivity = sensitivity;
            this.ObjectiveRatio = objectiveRatio;
            this.TailRisk = tailRisk;
            this.TargetProbability = targetProbability;
        }

        /// <summary>
        /// Gets or Sets FactorExposure
        /// </summary>
        [DataMember(Name = "factor_exposure", EmitDefaultValue = false)]
        public List<OptimizerInputsMPFactorExposureTerm> FactorExposure { get; set; }

        /// <summary>
        /// Gets or Sets Volatility
        /// </summary>
        [DataMember(Name = "volatility", EmitDefaultValue = false)]
        public List<OptimizerInputsMPVolatilityTerm> Volatility { get; set; }

        /// <summary>
        /// Gets or Sets GeneralLinear
        /// </summary>
        [DataMember(Name = "general_linear", EmitDefaultValue = false)]
        public List<OptimizerInputsMPGeneralLinearTerm> GeneralLinear { get; set; }

        /// <summary>
        /// Gets or Sets ExpectedReturn
        /// </summary>
        [DataMember(Name = "expected_return", EmitDefaultValue = false)]
        public List<OptimizerInputsMPExpectedReturnTerm> ExpectedReturn { get; set; }

        /// <summary>
        /// Gets or Sets Sensitivity
        /// </summary>
        [DataMember(Name = "sensitivity", EmitDefaultValue = false)]
        public List<OptimizerInputsMPSensitivityTerm> Sensitivity { get; set; }

        /// <summary>
        /// Gets or Sets ObjectiveRatio
        /// </summary>
        [DataMember(Name = "objective_ratio", EmitDefaultValue = false)]
        public OptimizerInputsMPObjectiveRatioTerm ObjectiveRatio { get; set; }

        /// <summary>
        /// MultiPeriod-Specific
        /// </summary>
        /// <value>MultiPeriod-Specific</value>
        [DataMember(Name = "tail_risk", EmitDefaultValue = false)]
        public List<OptimizerInputsMPTailRiskTerm> TailRisk { get; set; }

        /// <summary>
        /// Gets or Sets TargetProbability
        /// </summary>
        [DataMember(Name = "target_probability", EmitDefaultValue = false)]
        public List<OptimizerInputsMPTargetProbabilityTerm> TargetProbability { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class OptimizerInputsMultiPeriodObjective {\n");
            sb.Append("  FactorExposure: ").Append(FactorExposure).Append("\n");
            sb.Append("  Volatility: ").Append(Volatility).Append("\n");
            sb.Append("  GeneralLinear: ").Append(GeneralLinear).Append("\n");
            sb.Append("  ExpectedReturn: ").Append(ExpectedReturn).Append("\n");
            sb.Append("  Sensitivity: ").Append(Sensitivity).Append("\n");
            sb.Append("  ObjectiveRatio: ").Append(ObjectiveRatio).Append("\n");
            sb.Append("  TailRisk: ").Append(TailRisk).Append("\n");
            sb.Append("  TargetProbability: ").Append(TargetProbability).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as OptimizerInputsMultiPeriodObjective);
        }

        /// <summary>
        /// Returns true if OptimizerInputsMultiPeriodObjective instances are equal
        /// </summary>
        /// <param name="input">Instance of OptimizerInputsMultiPeriodObjective to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(OptimizerInputsMultiPeriodObjective input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.FactorExposure == input.FactorExposure ||
                    this.FactorExposure != null &&
                    input.FactorExposure != null &&
                    this.FactorExposure.SequenceEqual(input.FactorExposure)
                ) && 
                (
                    this.Volatility == input.Volatility ||
                    this.Volatility != null &&
                    input.Volatility != null &&
                    this.Volatility.SequenceEqual(input.Volatility)
                ) && 
                (
                    this.GeneralLinear == input.GeneralLinear ||
                    this.GeneralLinear != null &&
                    input.GeneralLinear != null &&
                    this.GeneralLinear.SequenceEqual(input.GeneralLinear)
                ) && 
                (
                    this.ExpectedReturn == input.ExpectedReturn ||
                    this.ExpectedReturn != null &&
                    input.ExpectedReturn != null &&
                    this.ExpectedReturn.SequenceEqual(input.ExpectedReturn)
                ) && 
                (
                    this.Sensitivity == input.Sensitivity ||
                    this.Sensitivity != null &&
                    input.Sensitivity != null &&
                    this.Sensitivity.SequenceEqual(input.Sensitivity)
                ) && 
                (
                    this.ObjectiveRatio == input.ObjectiveRatio ||
                    (this.ObjectiveRatio != null &&
                    this.ObjectiveRatio.Equals(input.ObjectiveRatio))
                ) && 
                (
                    this.TailRisk == input.TailRisk ||
                    this.TailRisk != null &&
                    input.TailRisk != null &&
                    this.TailRisk.SequenceEqual(input.TailRisk)
                ) && 
                (
                    this.TargetProbability == input.TargetProbability ||
                    this.TargetProbability != null &&
                    input.TargetProbability != null &&
                    this.TargetProbability.SequenceEqual(input.TargetProbability)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.FactorExposure != null)
                {
                    hashCode = (hashCode * 59) + this.FactorExposure.GetHashCode();
                }
                if (this.Volatility != null)
                {
                    hashCode = (hashCode * 59) + this.Volatility.GetHashCode();
                }
                if (this.GeneralLinear != null)
                {
                    hashCode = (hashCode * 59) + this.GeneralLinear.GetHashCode();
                }
                if (this.ExpectedReturn != null)
                {
                    hashCode = (hashCode * 59) + this.ExpectedReturn.GetHashCode();
                }
                if (this.Sensitivity != null)
                {
                    hashCode = (hashCode * 59) + this.Sensitivity.GetHashCode();
                }
                if (this.ObjectiveRatio != null)
                {
                    hashCode = (hashCode * 59) + this.ObjectiveRatio.GetHashCode();
                }
                if (this.TailRisk != null)
                {
                    hashCode = (hashCode * 59) + this.TailRisk.GetHashCode();
                }
                if (this.TargetProbability != null)
                {
                    hashCode = (hashCode * 59) + this.TargetProbability.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
