/*
 * fpo_mp_input
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = FactSet.SDK.OptimizationEngineAPIMultiperiod.Client.OpenAPIDateConverter;

namespace FactSet.SDK.OptimizationEngineAPIMultiperiod.Model
{
    /// <summary>
    /// Contains the results of an asset-level formula from FPO, mapping the TotalUniverse asset index to resulting value. The list of ValueReferences in the LookupTables should provide results for ALL formulae referenced throughout the FPO strategy. When the optimizer encounters a \&quot;reference\&quot; value in the strategy, it will come here to resolve the value for each asset within the scope of that reference.
    /// </summary>
    [DataContract(Name = "optimizer.inputs.ValueReference")]
    public partial class OptimizerInputsValueReference : IEquatable<OptimizerInputsValueReference>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="OptimizerInputsValueReference" /> class.
        /// </summary>
        /// <param name="assetValues">assetValues.</param>
        public OptimizerInputsValueReference(double assetValues = default(double))
        {
            this.AssetValues = assetValues;
        }

        /// <summary>
        /// Gets or Sets AssetValues
        /// </summary>
        [DataMember(Name = "asset_values", EmitDefaultValue = false)]
        public double AssetValues { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class OptimizerInputsValueReference {\n");
            sb.Append("  AssetValues: ").Append(AssetValues).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as OptimizerInputsValueReference);
        }

        /// <summary>
        /// Returns true if OptimizerInputsValueReference instances are equal
        /// </summary>
        /// <param name="input">Instance of OptimizerInputsValueReference to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(OptimizerInputsValueReference input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.AssetValues == input.AssetValues ||
                    this.AssetValues.Equals(input.AssetValues)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.AssetValues.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
