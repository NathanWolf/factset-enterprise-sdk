/*
 * fpo_mp_input
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = FactSet.SDK.OptimizationEngineAPIMultiperiod.Client.OpenAPIDateConverter;

namespace FactSet.SDK.OptimizationEngineAPIMultiperiod.Model
{
    /// <summary>
    /// OptimizerInputsMultiPeriodInput
    /// </summary>
    [DataContract(Name = "optimizer.inputs.MultiPeriodInput")]
    public partial class OptimizerInputsMultiPeriodInput : IEquatable<OptimizerInputsMultiPeriodInput>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="OptimizerInputsMultiPeriodInput" /> class.
        /// </summary>
        /// <param name="strategy">strategy.</param>
        /// <param name="universe">universe.</param>
        /// <param name="portfolios">portfolios.</param>
        /// <param name="riskmodels">riskmodels.</param>
        /// <param name="lookupTables">lookupTables.</param>
        /// <param name="outputStatistics">outputStatistics.</param>
        public OptimizerInputsMultiPeriodInput(OptimizerInputsMultiPeriodStrategy strategy = default(OptimizerInputsMultiPeriodStrategy), OptimizerInputsTotalUniverse universe = default(OptimizerInputsTotalUniverse), OptimizerInputsPortfolios portfolios = default(OptimizerInputsPortfolios), OptimizerInputsMultiPeriodRiskModels riskmodels = default(OptimizerInputsMultiPeriodRiskModels), OptimizerInputsLookupTables lookupTables = default(OptimizerInputsLookupTables), bool outputStatistics = default(bool))
        {
            this.Strategy = strategy;
            this.Universe = universe;
            this.Portfolios = portfolios;
            this.Riskmodels = riskmodels;
            this.LookupTables = lookupTables;
            this.OutputStatistics = outputStatistics;
        }

        /// <summary>
        /// Gets or Sets Strategy
        /// </summary>
        [DataMember(Name = "strategy", EmitDefaultValue = false)]
        public OptimizerInputsMultiPeriodStrategy Strategy { get; set; }

        /// <summary>
        /// Gets or Sets Universe
        /// </summary>
        [DataMember(Name = "universe", EmitDefaultValue = false)]
        public OptimizerInputsTotalUniverse Universe { get; set; }

        /// <summary>
        /// Gets or Sets Portfolios
        /// </summary>
        [DataMember(Name = "portfolios", EmitDefaultValue = false)]
        public OptimizerInputsPortfolios Portfolios { get; set; }

        /// <summary>
        /// Gets or Sets Riskmodels
        /// </summary>
        [DataMember(Name = "riskmodels", EmitDefaultValue = false)]
        public OptimizerInputsMultiPeriodRiskModels Riskmodels { get; set; }

        /// <summary>
        /// Gets or Sets LookupTables
        /// </summary>
        [DataMember(Name = "lookup_tables", EmitDefaultValue = false)]
        public OptimizerInputsLookupTables LookupTables { get; set; }

        /// <summary>
        /// Gets or Sets OutputStatistics
        /// </summary>
        [DataMember(Name = "output_statistics", EmitDefaultValue = true)]
        public bool OutputStatistics { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class OptimizerInputsMultiPeriodInput {\n");
            sb.Append("  Strategy: ").Append(Strategy).Append("\n");
            sb.Append("  Universe: ").Append(Universe).Append("\n");
            sb.Append("  Portfolios: ").Append(Portfolios).Append("\n");
            sb.Append("  Riskmodels: ").Append(Riskmodels).Append("\n");
            sb.Append("  LookupTables: ").Append(LookupTables).Append("\n");
            sb.Append("  OutputStatistics: ").Append(OutputStatistics).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as OptimizerInputsMultiPeriodInput);
        }

        /// <summary>
        /// Returns true if OptimizerInputsMultiPeriodInput instances are equal
        /// </summary>
        /// <param name="input">Instance of OptimizerInputsMultiPeriodInput to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(OptimizerInputsMultiPeriodInput input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Strategy == input.Strategy ||
                    (this.Strategy != null &&
                    this.Strategy.Equals(input.Strategy))
                ) && 
                (
                    this.Universe == input.Universe ||
                    (this.Universe != null &&
                    this.Universe.Equals(input.Universe))
                ) && 
                (
                    this.Portfolios == input.Portfolios ||
                    (this.Portfolios != null &&
                    this.Portfolios.Equals(input.Portfolios))
                ) && 
                (
                    this.Riskmodels == input.Riskmodels ||
                    (this.Riskmodels != null &&
                    this.Riskmodels.Equals(input.Riskmodels))
                ) && 
                (
                    this.LookupTables == input.LookupTables ||
                    (this.LookupTables != null &&
                    this.LookupTables.Equals(input.LookupTables))
                ) && 
                (
                    this.OutputStatistics == input.OutputStatistics ||
                    this.OutputStatistics.Equals(input.OutputStatistics)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Strategy != null)
                {
                    hashCode = (hashCode * 59) + this.Strategy.GetHashCode();
                }
                if (this.Universe != null)
                {
                    hashCode = (hashCode * 59) + this.Universe.GetHashCode();
                }
                if (this.Portfolios != null)
                {
                    hashCode = (hashCode * 59) + this.Portfolios.GetHashCode();
                }
                if (this.Riskmodels != null)
                {
                    hashCode = (hashCode * 59) + this.Riskmodels.GetHashCode();
                }
                if (this.LookupTables != null)
                {
                    hashCode = (hashCode * 59) + this.LookupTables.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.OutputStatistics.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
