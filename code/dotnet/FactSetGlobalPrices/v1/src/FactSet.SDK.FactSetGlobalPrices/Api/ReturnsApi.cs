/*
 * FactSet Global Prices API
 *
 * The FactSet Global Prices API provides end of day market pricing content using cloud and microservices technology, encompassing both pricing as well as corporate actions and events data.</p> 
 *
 * The version of the OpenAPI document: 1.5.0
 * Contact: api@factset.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using FactSet.SDK.FactSetGlobalPrices.Client;
using FactSet.SDK.FactSetGlobalPrices.Model;
using FactSet.SDK.Utils.Authentication;

namespace FactSet.SDK.FactSetGlobalPrices.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IReturnsApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Gets Returns for a list of &#x60;ids&#x60; as of given date range.
        /// </summary>
        /// <remarks>
        /// Returns for the requested ids and currency for the given dates. Depending on the input parameters the return data is provided.  
        /// </remarks>
        /// <exception cref="FactSet.SDK.FactSetGlobalPrices.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">The requested list of security identifiers. Accepted ID types include Market Tickers, SEDOL, ISINs, CUSIPs, or FactSet Permanent Ids. &lt;p&gt;***ids limit** &#x3D;  50 per request*&lt;/p&gt; *&lt;p&gt;Make note, GET Method URL request lines are also limited to a total length of 8192 bytes (8KB). In cases where the service allows for thousands of ids, which may lead to exceeding this request line limit of 8KB, its advised for any requests with large request lines to be requested through the respective \&quot;POST\&quot; method.&lt;/p&gt;*</param>
        /// <param name="startDate">The start date requested for a given date range in **YYYY-MM-DD** format. The input start date must be before the input end date. Future dates (T+1) are not accepted in this endpoint. </param>
        /// <param name="endDate">The end date requested for a given date range in **YYYY-MM-DD** format. The input end date must be after the input start date. Future dates (T+1) are not accepted in this endpoint.  (optional)</param>
        /// <param name="currency">Currency code for adjusting prices. Default is Local. For a list of currency ISO codes, visit [Online Assistant Page 1470](https://oa.apps.factset.com/pages/1470). (optional)</param>
        /// <param name="frequency">Controls the display frequency of the data returned.   * **D** &#x3D; Daily   * **AD** &#x3D; Actual Daily   * **W** &#x3D; Weekly, based on the last day of the week of the start date.   * **M** &#x3D; Monthly, based on the last trading day of the month.   * **AM** &#x3D; Monthly, based on the start date (e.g., if the start date is June 16, data is displayed for June 16, May 16, April 16 etc.).   * **AQ** &#x3D;  Actual Quarterly   * **CQ** &#x3D; Quarterly based on the last trading day of the calendar quarter (March, June, September, or December).   * **ASA** &#x3D; Actual Semi-annual   * **CSA** &#x3D; Calendar Semi-annual   * **AY** &#x3D; Actual Annual, based on the start date.   * **CY** &#x3D; Calendar Annual, based on the last trading day of the calendar year.     (optional, default to D)</param>
        /// <param name="dividendAdjust">Controls the dividend reinvestment for the returns calculation.   * **PRICE** &#x3D; Price Change - Dividends Excluded.   * **EXDATE** &#x3D; Simple Return - Dividends Received on exdate but not reinvested.   * **PAYDATE** &#x3D; Simple Return - Dividends Received on paydate but not reinvested.   * **EXDATE_C** &#x3D; Compound Return - Dividends reinvested on exdate.   * **PAYDATE_C** &#x3D; Compound Return - Dividends reinvested on paydate.      (optional, default to EXDATE_C)</param>
        /// <returns>ReturnsResponse</returns>
        ReturnsResponse GetReturns(List<string> ids, string startDate, string endDate = default(string), string currency = default(string), string frequency = default(string), string dividendAdjust = default(string));

        /// <summary>
        /// Gets Returns for a list of &#x60;ids&#x60; as of given date range.
        /// </summary>
        /// <remarks>
        /// Returns for the requested ids and currency for the given dates. Depending on the input parameters the return data is provided.  
        /// </remarks>
        /// <exception cref="FactSet.SDK.FactSetGlobalPrices.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">The requested list of security identifiers. Accepted ID types include Market Tickers, SEDOL, ISINs, CUSIPs, or FactSet Permanent Ids. &lt;p&gt;***ids limit** &#x3D;  50 per request*&lt;/p&gt; *&lt;p&gt;Make note, GET Method URL request lines are also limited to a total length of 8192 bytes (8KB). In cases where the service allows for thousands of ids, which may lead to exceeding this request line limit of 8KB, its advised for any requests with large request lines to be requested through the respective \&quot;POST\&quot; method.&lt;/p&gt;*</param>
        /// <param name="startDate">The start date requested for a given date range in **YYYY-MM-DD** format. The input start date must be before the input end date. Future dates (T+1) are not accepted in this endpoint. </param>
        /// <param name="endDate">The end date requested for a given date range in **YYYY-MM-DD** format. The input end date must be after the input start date. Future dates (T+1) are not accepted in this endpoint.  (optional)</param>
        /// <param name="currency">Currency code for adjusting prices. Default is Local. For a list of currency ISO codes, visit [Online Assistant Page 1470](https://oa.apps.factset.com/pages/1470). (optional)</param>
        /// <param name="frequency">Controls the display frequency of the data returned.   * **D** &#x3D; Daily   * **AD** &#x3D; Actual Daily   * **W** &#x3D; Weekly, based on the last day of the week of the start date.   * **M** &#x3D; Monthly, based on the last trading day of the month.   * **AM** &#x3D; Monthly, based on the start date (e.g., if the start date is June 16, data is displayed for June 16, May 16, April 16 etc.).   * **AQ** &#x3D;  Actual Quarterly   * **CQ** &#x3D; Quarterly based on the last trading day of the calendar quarter (March, June, September, or December).   * **ASA** &#x3D; Actual Semi-annual   * **CSA** &#x3D; Calendar Semi-annual   * **AY** &#x3D; Actual Annual, based on the start date.   * **CY** &#x3D; Calendar Annual, based on the last trading day of the calendar year.     (optional, default to D)</param>
        /// <param name="dividendAdjust">Controls the dividend reinvestment for the returns calculation.   * **PRICE** &#x3D; Price Change - Dividends Excluded.   * **EXDATE** &#x3D; Simple Return - Dividends Received on exdate but not reinvested.   * **PAYDATE** &#x3D; Simple Return - Dividends Received on paydate but not reinvested.   * **EXDATE_C** &#x3D; Compound Return - Dividends reinvested on exdate.   * **PAYDATE_C** &#x3D; Compound Return - Dividends reinvested on paydate.      (optional, default to EXDATE_C)</param>
        /// <returns>ApiResponse of ReturnsResponse</returns>
        ApiResponse<ReturnsResponse> GetReturnsWithHttpInfo(List<string> ids, string startDate, string endDate = default(string), string currency = default(string), string frequency = default(string), string dividendAdjust = default(string));
        /// <summary>
        /// Gets Returns for a list of &#x60;ids&#x60; as of given date range.
        /// </summary>
        /// <remarks>
        /// Returns for the requested ids and currency for the given dates. Depending on the input parameters the return data is provided.
        /// </remarks>
        /// <exception cref="FactSet.SDK.FactSetGlobalPrices.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="returnsRequest">Request object for &#x60;Returns&#x60;.</param>
        /// <returns>ReturnsResponse</returns>
        ReturnsResponse GetReturnsForList(ReturnsRequest returnsRequest);

        /// <summary>
        /// Gets Returns for a list of &#x60;ids&#x60; as of given date range.
        /// </summary>
        /// <remarks>
        /// Returns for the requested ids and currency for the given dates. Depending on the input parameters the return data is provided.
        /// </remarks>
        /// <exception cref="FactSet.SDK.FactSetGlobalPrices.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="returnsRequest">Request object for &#x60;Returns&#x60;.</param>
        /// <returns>ApiResponse of ReturnsResponse</returns>
        ApiResponse<ReturnsResponse> GetReturnsForListWithHttpInfo(ReturnsRequest returnsRequest);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IReturnsApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Gets Returns for a list of &#x60;ids&#x60; as of given date range.
        /// </summary>
        /// <remarks>
        /// Returns for the requested ids and currency for the given dates. Depending on the input parameters the return data is provided.  
        /// </remarks>
        /// <exception cref="FactSet.SDK.FactSetGlobalPrices.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">The requested list of security identifiers. Accepted ID types include Market Tickers, SEDOL, ISINs, CUSIPs, or FactSet Permanent Ids. &lt;p&gt;***ids limit** &#x3D;  50 per request*&lt;/p&gt; *&lt;p&gt;Make note, GET Method URL request lines are also limited to a total length of 8192 bytes (8KB). In cases where the service allows for thousands of ids, which may lead to exceeding this request line limit of 8KB, its advised for any requests with large request lines to be requested through the respective \&quot;POST\&quot; method.&lt;/p&gt;*</param>
        /// <param name="startDate">The start date requested for a given date range in **YYYY-MM-DD** format. The input start date must be before the input end date. Future dates (T+1) are not accepted in this endpoint. </param>
        /// <param name="endDate">The end date requested for a given date range in **YYYY-MM-DD** format. The input end date must be after the input start date. Future dates (T+1) are not accepted in this endpoint.  (optional)</param>
        /// <param name="currency">Currency code for adjusting prices. Default is Local. For a list of currency ISO codes, visit [Online Assistant Page 1470](https://oa.apps.factset.com/pages/1470). (optional)</param>
        /// <param name="frequency">Controls the display frequency of the data returned.   * **D** &#x3D; Daily   * **AD** &#x3D; Actual Daily   * **W** &#x3D; Weekly, based on the last day of the week of the start date.   * **M** &#x3D; Monthly, based on the last trading day of the month.   * **AM** &#x3D; Monthly, based on the start date (e.g., if the start date is June 16, data is displayed for June 16, May 16, April 16 etc.).   * **AQ** &#x3D;  Actual Quarterly   * **CQ** &#x3D; Quarterly based on the last trading day of the calendar quarter (March, June, September, or December).   * **ASA** &#x3D; Actual Semi-annual   * **CSA** &#x3D; Calendar Semi-annual   * **AY** &#x3D; Actual Annual, based on the start date.   * **CY** &#x3D; Calendar Annual, based on the last trading day of the calendar year.     (optional, default to D)</param>
        /// <param name="dividendAdjust">Controls the dividend reinvestment for the returns calculation.   * **PRICE** &#x3D; Price Change - Dividends Excluded.   * **EXDATE** &#x3D; Simple Return - Dividends Received on exdate but not reinvested.   * **PAYDATE** &#x3D; Simple Return - Dividends Received on paydate but not reinvested.   * **EXDATE_C** &#x3D; Compound Return - Dividends reinvested on exdate.   * **PAYDATE_C** &#x3D; Compound Return - Dividends reinvested on paydate.      (optional, default to EXDATE_C)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ReturnsResponse</returns>
        System.Threading.Tasks.Task<ReturnsResponse> GetReturnsAsync(List<string> ids, string startDate, string endDate = default(string), string currency = default(string), string frequency = default(string), string dividendAdjust = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Gets Returns for a list of &#x60;ids&#x60; as of given date range.
        /// </summary>
        /// <remarks>
        /// Returns for the requested ids and currency for the given dates. Depending on the input parameters the return data is provided.  
        /// </remarks>
        /// <exception cref="FactSet.SDK.FactSetGlobalPrices.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">The requested list of security identifiers. Accepted ID types include Market Tickers, SEDOL, ISINs, CUSIPs, or FactSet Permanent Ids. &lt;p&gt;***ids limit** &#x3D;  50 per request*&lt;/p&gt; *&lt;p&gt;Make note, GET Method URL request lines are also limited to a total length of 8192 bytes (8KB). In cases where the service allows for thousands of ids, which may lead to exceeding this request line limit of 8KB, its advised for any requests with large request lines to be requested through the respective \&quot;POST\&quot; method.&lt;/p&gt;*</param>
        /// <param name="startDate">The start date requested for a given date range in **YYYY-MM-DD** format. The input start date must be before the input end date. Future dates (T+1) are not accepted in this endpoint. </param>
        /// <param name="endDate">The end date requested for a given date range in **YYYY-MM-DD** format. The input end date must be after the input start date. Future dates (T+1) are not accepted in this endpoint.  (optional)</param>
        /// <param name="currency">Currency code for adjusting prices. Default is Local. For a list of currency ISO codes, visit [Online Assistant Page 1470](https://oa.apps.factset.com/pages/1470). (optional)</param>
        /// <param name="frequency">Controls the display frequency of the data returned.   * **D** &#x3D; Daily   * **AD** &#x3D; Actual Daily   * **W** &#x3D; Weekly, based on the last day of the week of the start date.   * **M** &#x3D; Monthly, based on the last trading day of the month.   * **AM** &#x3D; Monthly, based on the start date (e.g., if the start date is June 16, data is displayed for June 16, May 16, April 16 etc.).   * **AQ** &#x3D;  Actual Quarterly   * **CQ** &#x3D; Quarterly based on the last trading day of the calendar quarter (March, June, September, or December).   * **ASA** &#x3D; Actual Semi-annual   * **CSA** &#x3D; Calendar Semi-annual   * **AY** &#x3D; Actual Annual, based on the start date.   * **CY** &#x3D; Calendar Annual, based on the last trading day of the calendar year.     (optional, default to D)</param>
        /// <param name="dividendAdjust">Controls the dividend reinvestment for the returns calculation.   * **PRICE** &#x3D; Price Change - Dividends Excluded.   * **EXDATE** &#x3D; Simple Return - Dividends Received on exdate but not reinvested.   * **PAYDATE** &#x3D; Simple Return - Dividends Received on paydate but not reinvested.   * **EXDATE_C** &#x3D; Compound Return - Dividends reinvested on exdate.   * **PAYDATE_C** &#x3D; Compound Return - Dividends reinvested on paydate.      (optional, default to EXDATE_C)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ReturnsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ReturnsResponse>> GetReturnsWithHttpInfoAsync(List<string> ids, string startDate, string endDate = default(string), string currency = default(string), string frequency = default(string), string dividendAdjust = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Gets Returns for a list of &#x60;ids&#x60; as of given date range.
        /// </summary>
        /// <remarks>
        /// Returns for the requested ids and currency for the given dates. Depending on the input parameters the return data is provided.
        /// </remarks>
        /// <exception cref="FactSet.SDK.FactSetGlobalPrices.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="returnsRequest">Request object for &#x60;Returns&#x60;.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ReturnsResponse</returns>
        System.Threading.Tasks.Task<ReturnsResponse> GetReturnsForListAsync(ReturnsRequest returnsRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Gets Returns for a list of &#x60;ids&#x60; as of given date range.
        /// </summary>
        /// <remarks>
        /// Returns for the requested ids and currency for the given dates. Depending on the input parameters the return data is provided.
        /// </remarks>
        /// <exception cref="FactSet.SDK.FactSetGlobalPrices.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="returnsRequest">Request object for &#x60;Returns&#x60;.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ReturnsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ReturnsResponse>> GetReturnsForListWithHttpInfoAsync(ReturnsRequest returnsRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IReturnsApi : IReturnsApiSync, IReturnsApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ReturnsApi : IReturnsApi
    {
        private FactSet.SDK.FactSetGlobalPrices.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        # region Response Type Disctionaries
        
        private static readonly Dictionary<HttpStatusCode, System.Type> GetReturnsResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)200, typeof(ReturnsResponse) },
            { (HttpStatusCode)400, typeof(ErrorResponse) },
            { (HttpStatusCode)401, typeof(ErrorResponse) },
            { (HttpStatusCode)403, typeof(ErrorResponse) },
            { (HttpStatusCode)415, typeof(ErrorResponse) },
            { (HttpStatusCode)500, typeof(ErrorResponse) },
        };

        private static readonly Dictionary<HttpStatusCode, System.Type> GetReturnsForListResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)200, typeof(ReturnsResponse) },
        };

        # endregion Response Type Disctionaries

        # region Api Response Objects
        

        # endregion Api Response Objects

        /// <summary>
        /// Initializes a new instance of the <see cref="ReturnsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ReturnsApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ReturnsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ReturnsApi(string basePath)
        {
            this.Configuration = FactSet.SDK.FactSetGlobalPrices.Client.Configuration.MergeConfigurations(
                FactSet.SDK.FactSetGlobalPrices.Client.GlobalConfiguration.Instance,
                new FactSet.SDK.FactSetGlobalPrices.Client.Configuration { BasePath = basePath }
            );
            this.Client = new FactSet.SDK.FactSetGlobalPrices.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new FactSet.SDK.FactSetGlobalPrices.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = FactSet.SDK.FactSetGlobalPrices.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ReturnsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ReturnsApi(FactSet.SDK.FactSetGlobalPrices.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = FactSet.SDK.FactSetGlobalPrices.Client.Configuration.MergeConfigurations(
                FactSet.SDK.FactSetGlobalPrices.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new FactSet.SDK.FactSetGlobalPrices.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new FactSet.SDK.FactSetGlobalPrices.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = FactSet.SDK.FactSetGlobalPrices.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ReturnsApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public ReturnsApi(FactSet.SDK.FactSetGlobalPrices.Client.ISynchronousClient client, FactSet.SDK.FactSetGlobalPrices.Client.IAsynchronousClient asyncClient, FactSet.SDK.FactSetGlobalPrices.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = FactSet.SDK.FactSetGlobalPrices.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public FactSet.SDK.FactSetGlobalPrices.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public FactSet.SDK.FactSetGlobalPrices.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public FactSet.SDK.FactSetGlobalPrices.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public FactSet.SDK.FactSetGlobalPrices.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets Returns for a list of &#x60;ids&#x60; as of given date range. Returns for the requested ids and currency for the given dates. Depending on the input parameters the return data is provided.  
        /// </summary>
        /// <exception cref="FactSet.SDK.FactSetGlobalPrices.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">The requested list of security identifiers. Accepted ID types include Market Tickers, SEDOL, ISINs, CUSIPs, or FactSet Permanent Ids. &lt;p&gt;***ids limit** &#x3D;  50 per request*&lt;/p&gt; *&lt;p&gt;Make note, GET Method URL request lines are also limited to a total length of 8192 bytes (8KB). In cases where the service allows for thousands of ids, which may lead to exceeding this request line limit of 8KB, its advised for any requests with large request lines to be requested through the respective \&quot;POST\&quot; method.&lt;/p&gt;*</param>
        /// <param name="startDate">The start date requested for a given date range in **YYYY-MM-DD** format. The input start date must be before the input end date. Future dates (T+1) are not accepted in this endpoint. </param>
        /// <param name="endDate">The end date requested for a given date range in **YYYY-MM-DD** format. The input end date must be after the input start date. Future dates (T+1) are not accepted in this endpoint.  (optional)</param>
        /// <param name="currency">Currency code for adjusting prices. Default is Local. For a list of currency ISO codes, visit [Online Assistant Page 1470](https://oa.apps.factset.com/pages/1470). (optional)</param>
        /// <param name="frequency">Controls the display frequency of the data returned.   * **D** &#x3D; Daily   * **AD** &#x3D; Actual Daily   * **W** &#x3D; Weekly, based on the last day of the week of the start date.   * **M** &#x3D; Monthly, based on the last trading day of the month.   * **AM** &#x3D; Monthly, based on the start date (e.g., if the start date is June 16, data is displayed for June 16, May 16, April 16 etc.).   * **AQ** &#x3D;  Actual Quarterly   * **CQ** &#x3D; Quarterly based on the last trading day of the calendar quarter (March, June, September, or December).   * **ASA** &#x3D; Actual Semi-annual   * **CSA** &#x3D; Calendar Semi-annual   * **AY** &#x3D; Actual Annual, based on the start date.   * **CY** &#x3D; Calendar Annual, based on the last trading day of the calendar year.     (optional, default to D)</param>
        /// <param name="dividendAdjust">Controls the dividend reinvestment for the returns calculation.   * **PRICE** &#x3D; Price Change - Dividends Excluded.   * **EXDATE** &#x3D; Simple Return - Dividends Received on exdate but not reinvested.   * **PAYDATE** &#x3D; Simple Return - Dividends Received on paydate but not reinvested.   * **EXDATE_C** &#x3D; Compound Return - Dividends reinvested on exdate.   * **PAYDATE_C** &#x3D; Compound Return - Dividends reinvested on paydate.      (optional, default to EXDATE_C)</param>
        /// <returns>ReturnsResponse</returns>
        public ReturnsResponse GetReturns(List<string> ids, string startDate, string endDate = default(string), string currency = default(string), string frequency = default(string), string dividendAdjust = default(string))
        {
            var localVarResponse = GetReturnsWithHttpInfo(ids, startDate, endDate, currency, frequency, dividendAdjust);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Gets Returns for a list of &#x60;ids&#x60; as of given date range. Returns for the requested ids and currency for the given dates. Depending on the input parameters the return data is provided.  
        /// </summary>
        /// <exception cref="FactSet.SDK.FactSetGlobalPrices.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">The requested list of security identifiers. Accepted ID types include Market Tickers, SEDOL, ISINs, CUSIPs, or FactSet Permanent Ids. &lt;p&gt;***ids limit** &#x3D;  50 per request*&lt;/p&gt; *&lt;p&gt;Make note, GET Method URL request lines are also limited to a total length of 8192 bytes (8KB). In cases where the service allows for thousands of ids, which may lead to exceeding this request line limit of 8KB, its advised for any requests with large request lines to be requested through the respective \&quot;POST\&quot; method.&lt;/p&gt;*</param>
        /// <param name="startDate">The start date requested for a given date range in **YYYY-MM-DD** format. The input start date must be before the input end date. Future dates (T+1) are not accepted in this endpoint. </param>
        /// <param name="endDate">The end date requested for a given date range in **YYYY-MM-DD** format. The input end date must be after the input start date. Future dates (T+1) are not accepted in this endpoint.  (optional)</param>
        /// <param name="currency">Currency code for adjusting prices. Default is Local. For a list of currency ISO codes, visit [Online Assistant Page 1470](https://oa.apps.factset.com/pages/1470). (optional)</param>
        /// <param name="frequency">Controls the display frequency of the data returned.   * **D** &#x3D; Daily   * **AD** &#x3D; Actual Daily   * **W** &#x3D; Weekly, based on the last day of the week of the start date.   * **M** &#x3D; Monthly, based on the last trading day of the month.   * **AM** &#x3D; Monthly, based on the start date (e.g., if the start date is June 16, data is displayed for June 16, May 16, April 16 etc.).   * **AQ** &#x3D;  Actual Quarterly   * **CQ** &#x3D; Quarterly based on the last trading day of the calendar quarter (March, June, September, or December).   * **ASA** &#x3D; Actual Semi-annual   * **CSA** &#x3D; Calendar Semi-annual   * **AY** &#x3D; Actual Annual, based on the start date.   * **CY** &#x3D; Calendar Annual, based on the last trading day of the calendar year.     (optional, default to D)</param>
        /// <param name="dividendAdjust">Controls the dividend reinvestment for the returns calculation.   * **PRICE** &#x3D; Price Change - Dividends Excluded.   * **EXDATE** &#x3D; Simple Return - Dividends Received on exdate but not reinvested.   * **PAYDATE** &#x3D; Simple Return - Dividends Received on paydate but not reinvested.   * **EXDATE_C** &#x3D; Compound Return - Dividends reinvested on exdate.   * **PAYDATE_C** &#x3D; Compound Return - Dividends reinvested on paydate.      (optional, default to EXDATE_C)</param>
        /// <returns>ApiResponse of ReturnsResponse</returns>
        public ApiResponse<ReturnsResponse> GetReturnsWithHttpInfo(List<string> ids, string startDate, string endDate = default(string), string currency = default(string), string frequency = default(string), string dividendAdjust = default(string))
        {
            // verify the required parameter 'ids' is set
            if (ids == null)
            {
                throw new FactSet.SDK.FactSetGlobalPrices.Client.ApiException(400, "Missing required parameter 'ids' when calling ReturnsApi->GetReturns");
            }

            // verify the required parameter 'startDate' is set
            if (startDate == null)
            {
                throw new FactSet.SDK.FactSetGlobalPrices.Client.ApiException(400, "Missing required parameter 'startDate' when calling ReturnsApi->GetReturns");
            }

            FactSet.SDK.FactSetGlobalPrices.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.FactSetGlobalPrices.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.FactSetGlobalPrices.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.FactSetGlobalPrices.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.FactSetGlobalPrices.Client.ClientUtils.ParameterToMultiMap("csv", "ids", ids));
            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.FactSetGlobalPrices.Client.ClientUtils.ParameterToMultiMap("", "startDate", startDate));
            if (endDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.FactSetGlobalPrices.Client.ClientUtils.ParameterToMultiMap("", "endDate", endDate));
            }
            if (currency != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.FactSetGlobalPrices.Client.ClientUtils.ParameterToMultiMap("", "currency", currency));
            }
            if (frequency != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.FactSetGlobalPrices.Client.ClientUtils.ParameterToMultiMap("", "frequency", frequency));
            }
            if (dividendAdjust != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.FactSetGlobalPrices.Client.ClientUtils.ParameterToMultiMap("", "dividendAdjust", dividendAdjust));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.FactSetGlobalPrices.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = GetReturnsResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Get<
            ReturnsResponse>("/factset-global-prices/v1/returns", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetReturns", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// Gets Returns for a list of &#x60;ids&#x60; as of given date range. Returns for the requested ids and currency for the given dates. Depending on the input parameters the return data is provided.  
        /// </summary>
        /// <exception cref="FactSet.SDK.FactSetGlobalPrices.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">The requested list of security identifiers. Accepted ID types include Market Tickers, SEDOL, ISINs, CUSIPs, or FactSet Permanent Ids. &lt;p&gt;***ids limit** &#x3D;  50 per request*&lt;/p&gt; *&lt;p&gt;Make note, GET Method URL request lines are also limited to a total length of 8192 bytes (8KB). In cases where the service allows for thousands of ids, which may lead to exceeding this request line limit of 8KB, its advised for any requests with large request lines to be requested through the respective \&quot;POST\&quot; method.&lt;/p&gt;*</param>
        /// <param name="startDate">The start date requested for a given date range in **YYYY-MM-DD** format. The input start date must be before the input end date. Future dates (T+1) are not accepted in this endpoint. </param>
        /// <param name="endDate">The end date requested for a given date range in **YYYY-MM-DD** format. The input end date must be after the input start date. Future dates (T+1) are not accepted in this endpoint.  (optional)</param>
        /// <param name="currency">Currency code for adjusting prices. Default is Local. For a list of currency ISO codes, visit [Online Assistant Page 1470](https://oa.apps.factset.com/pages/1470). (optional)</param>
        /// <param name="frequency">Controls the display frequency of the data returned.   * **D** &#x3D; Daily   * **AD** &#x3D; Actual Daily   * **W** &#x3D; Weekly, based on the last day of the week of the start date.   * **M** &#x3D; Monthly, based on the last trading day of the month.   * **AM** &#x3D; Monthly, based on the start date (e.g., if the start date is June 16, data is displayed for June 16, May 16, April 16 etc.).   * **AQ** &#x3D;  Actual Quarterly   * **CQ** &#x3D; Quarterly based on the last trading day of the calendar quarter (March, June, September, or December).   * **ASA** &#x3D; Actual Semi-annual   * **CSA** &#x3D; Calendar Semi-annual   * **AY** &#x3D; Actual Annual, based on the start date.   * **CY** &#x3D; Calendar Annual, based on the last trading day of the calendar year.     (optional, default to D)</param>
        /// <param name="dividendAdjust">Controls the dividend reinvestment for the returns calculation.   * **PRICE** &#x3D; Price Change - Dividends Excluded.   * **EXDATE** &#x3D; Simple Return - Dividends Received on exdate but not reinvested.   * **PAYDATE** &#x3D; Simple Return - Dividends Received on paydate but not reinvested.   * **EXDATE_C** &#x3D; Compound Return - Dividends reinvested on exdate.   * **PAYDATE_C** &#x3D; Compound Return - Dividends reinvested on paydate.      (optional, default to EXDATE_C)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ReturnsResponse</returns>
        public async System.Threading.Tasks.Task<ReturnsResponse>GetReturnsAsync(List<string> ids, string startDate, string endDate = default(string), string currency = default(string), string frequency = default(string), string dividendAdjust = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await GetReturnsWithHttpInfoAsync(ids, startDate, endDate, currency, frequency, dividendAdjust, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Gets Returns for a list of &#x60;ids&#x60; as of given date range. Returns for the requested ids and currency for the given dates. Depending on the input parameters the return data is provided.  
        /// </summary>
        /// <exception cref="FactSet.SDK.FactSetGlobalPrices.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">The requested list of security identifiers. Accepted ID types include Market Tickers, SEDOL, ISINs, CUSIPs, or FactSet Permanent Ids. &lt;p&gt;***ids limit** &#x3D;  50 per request*&lt;/p&gt; *&lt;p&gt;Make note, GET Method URL request lines are also limited to a total length of 8192 bytes (8KB). In cases where the service allows for thousands of ids, which may lead to exceeding this request line limit of 8KB, its advised for any requests with large request lines to be requested through the respective \&quot;POST\&quot; method.&lt;/p&gt;*</param>
        /// <param name="startDate">The start date requested for a given date range in **YYYY-MM-DD** format. The input start date must be before the input end date. Future dates (T+1) are not accepted in this endpoint. </param>
        /// <param name="endDate">The end date requested for a given date range in **YYYY-MM-DD** format. The input end date must be after the input start date. Future dates (T+1) are not accepted in this endpoint.  (optional)</param>
        /// <param name="currency">Currency code for adjusting prices. Default is Local. For a list of currency ISO codes, visit [Online Assistant Page 1470](https://oa.apps.factset.com/pages/1470). (optional)</param>
        /// <param name="frequency">Controls the display frequency of the data returned.   * **D** &#x3D; Daily   * **AD** &#x3D; Actual Daily   * **W** &#x3D; Weekly, based on the last day of the week of the start date.   * **M** &#x3D; Monthly, based on the last trading day of the month.   * **AM** &#x3D; Monthly, based on the start date (e.g., if the start date is June 16, data is displayed for June 16, May 16, April 16 etc.).   * **AQ** &#x3D;  Actual Quarterly   * **CQ** &#x3D; Quarterly based on the last trading day of the calendar quarter (March, June, September, or December).   * **ASA** &#x3D; Actual Semi-annual   * **CSA** &#x3D; Calendar Semi-annual   * **AY** &#x3D; Actual Annual, based on the start date.   * **CY** &#x3D; Calendar Annual, based on the last trading day of the calendar year.     (optional, default to D)</param>
        /// <param name="dividendAdjust">Controls the dividend reinvestment for the returns calculation.   * **PRICE** &#x3D; Price Change - Dividends Excluded.   * **EXDATE** &#x3D; Simple Return - Dividends Received on exdate but not reinvested.   * **PAYDATE** &#x3D; Simple Return - Dividends Received on paydate but not reinvested.   * **EXDATE_C** &#x3D; Compound Return - Dividends reinvested on exdate.   * **PAYDATE_C** &#x3D; Compound Return - Dividends reinvested on paydate.      (optional, default to EXDATE_C)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ReturnsResponse)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<ReturnsResponse>> GetReturnsWithHttpInfoAsync(List<string> ids, string startDate, string endDate = default(string), string currency = default(string), string frequency = default(string), string dividendAdjust = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'ids' is set
            if (ids == null)
            {
                throw new FactSet.SDK.FactSetGlobalPrices.Client.ApiException(400, "Missing required parameter 'ids' when calling ReturnsApi->GetReturns");
            }

            // verify the required parameter 'startDate' is set
            if (startDate == null)
            {
                throw new FactSet.SDK.FactSetGlobalPrices.Client.ApiException(400, "Missing required parameter 'startDate' when calling ReturnsApi->GetReturns");
            }


            FactSet.SDK.FactSetGlobalPrices.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.FactSetGlobalPrices.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.FactSetGlobalPrices.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.FactSetGlobalPrices.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.FactSetGlobalPrices.Client.ClientUtils.ParameterToMultiMap("csv", "ids", ids));
            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.FactSetGlobalPrices.Client.ClientUtils.ParameterToMultiMap("", "startDate", startDate));
            if (endDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.FactSetGlobalPrices.Client.ClientUtils.ParameterToMultiMap("", "endDate", endDate));
            }
            if (currency != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.FactSetGlobalPrices.Client.ClientUtils.ParameterToMultiMap("", "currency", currency));
            }
            if (frequency != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.FactSetGlobalPrices.Client.ClientUtils.ParameterToMultiMap("", "frequency", frequency));
            }
            if (dividendAdjust != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.FactSetGlobalPrices.Client.ClientUtils.ParameterToMultiMap("", "dividendAdjust", dividendAdjust));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.FactSetGlobalPrices.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = GetReturnsResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ReturnsResponse>("/factset-global-prices/v1/returns", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetReturns", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Gets Returns for a list of &#x60;ids&#x60; as of given date range. Returns for the requested ids and currency for the given dates. Depending on the input parameters the return data is provided.
        /// </summary>
        /// <exception cref="FactSet.SDK.FactSetGlobalPrices.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="returnsRequest">Request object for &#x60;Returns&#x60;.</param>
        /// <returns>ReturnsResponse</returns>
        public ReturnsResponse GetReturnsForList(ReturnsRequest returnsRequest)
        {
            var localVarResponse = GetReturnsForListWithHttpInfo(returnsRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Gets Returns for a list of &#x60;ids&#x60; as of given date range. Returns for the requested ids and currency for the given dates. Depending on the input parameters the return data is provided.
        /// </summary>
        /// <exception cref="FactSet.SDK.FactSetGlobalPrices.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="returnsRequest">Request object for &#x60;Returns&#x60;.</param>
        /// <returns>ApiResponse of ReturnsResponse</returns>
        public ApiResponse<ReturnsResponse> GetReturnsForListWithHttpInfo(ReturnsRequest returnsRequest)
        {
            // verify the required parameter 'returnsRequest' is set
            if (returnsRequest == null)
            {
                throw new FactSet.SDK.FactSetGlobalPrices.Client.ApiException(400, "Missing required parameter 'returnsRequest' when calling ReturnsApi->GetReturnsForList");
            }

            FactSet.SDK.FactSetGlobalPrices.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.FactSetGlobalPrices.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.FactSetGlobalPrices.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.FactSetGlobalPrices.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = returnsRequest;

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.FactSetGlobalPrices.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = GetReturnsForListResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Post<
            ReturnsResponse>("/factset-global-prices/v1/returns", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetReturnsForList", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// Gets Returns for a list of &#x60;ids&#x60; as of given date range. Returns for the requested ids and currency for the given dates. Depending on the input parameters the return data is provided.
        /// </summary>
        /// <exception cref="FactSet.SDK.FactSetGlobalPrices.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="returnsRequest">Request object for &#x60;Returns&#x60;.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ReturnsResponse</returns>
        public async System.Threading.Tasks.Task<ReturnsResponse>GetReturnsForListAsync(ReturnsRequest returnsRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await GetReturnsForListWithHttpInfoAsync(returnsRequest, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Gets Returns for a list of &#x60;ids&#x60; as of given date range. Returns for the requested ids and currency for the given dates. Depending on the input parameters the return data is provided.
        /// </summary>
        /// <exception cref="FactSet.SDK.FactSetGlobalPrices.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="returnsRequest">Request object for &#x60;Returns&#x60;.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ReturnsResponse)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<ReturnsResponse>> GetReturnsForListWithHttpInfoAsync(ReturnsRequest returnsRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'returnsRequest' is set
            if (returnsRequest == null)
            {
                throw new FactSet.SDK.FactSetGlobalPrices.Client.ApiException(400, "Missing required parameter 'returnsRequest' when calling ReturnsApi->GetReturnsForList");
            }


            FactSet.SDK.FactSetGlobalPrices.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.FactSetGlobalPrices.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.FactSetGlobalPrices.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.FactSetGlobalPrices.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = returnsRequest;

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.FactSetGlobalPrices.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = GetReturnsForListResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ReturnsResponse>("/factset-global-prices/v1/returns", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetReturnsForList", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
