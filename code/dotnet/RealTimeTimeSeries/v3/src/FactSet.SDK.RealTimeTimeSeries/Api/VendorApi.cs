/*
 * Time Series API For Digital Portals
 *
 * Time series data, end-of-day or intraday, tick-by-tick or subsampled. Additional vendor-specific endpoints provide a modified interface for seamless integration with the ChartIQ chart library.  This API is focused on high-performance applications that are  * serving millions of end-users, * accessible by client browsers via the internet, * integrated into complex infrastructures such as existing frontend frameworks or authentication services.  This API has been designed for direct use by client web applications and feature extreme low latency: The average response time across all endpoints is 30 ms whereas 99% of all requests are answered in close to under 300ms.  See the [Real-Time Quotes API for Digital Portals](https://developer.factset.com/api-catalog/real-time-quotes-api) for access to detailed price information. 
 *
 * The version of the OpenAPI document: 3.0.0
 * Contact: api@factset.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using FactSet.SDK.RealTimeTimeSeries.Client;
using FactSet.SDK.RealTimeTimeSeries.Model;
using FactSet.SDK.Utils.Authentication;

namespace FactSet.SDK.RealTimeTimeSeries.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IVendorApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// End-of-day time series data for a notation.
        /// </summary>
        /// <remarks>
        /// End-of-day time series data for a notation. The resulting time series is always adjusted for currency changes.&lt;br&gt;&lt;br&gt;Pagination to a previous page is not supported and &#x60;pagination.previous&#x60; is always &#x60;null&#x60;.
        /// </remarks>
        /// <exception cref="FactSet.SDK.RealTimeTimeSeries.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postVendorChartIQTimeSeriesEodListRequest">Request Body</param>
        /// <returns>InlineResponse200</returns>
        InlineResponse200 PostVendorChartIQTimeSeriesEodList(PostVendorChartIQTimeSeriesEodListRequest postVendorChartIQTimeSeriesEodListRequest);

        /// <summary>
        /// End-of-day time series data for a notation.
        /// </summary>
        /// <remarks>
        /// End-of-day time series data for a notation. The resulting time series is always adjusted for currency changes.&lt;br&gt;&lt;br&gt;Pagination to a previous page is not supported and &#x60;pagination.previous&#x60; is always &#x60;null&#x60;.
        /// </remarks>
        /// <exception cref="FactSet.SDK.RealTimeTimeSeries.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postVendorChartIQTimeSeriesEodListRequest">Request Body</param>
        /// <returns>ApiResponse of InlineResponse200</returns>
        ApiResponse<InlineResponse200> PostVendorChartIQTimeSeriesEodListWithHttpInfo(PostVendorChartIQTimeSeriesEodListRequest postVendorChartIQTimeSeriesEodListRequest);
        /// <summary>
        /// Single subsample end-of-day data for a notation.
        /// </summary>
        /// <remarks>
        /// Single subsample end-of-day data for a notation. The sample is always adjusted for currency changes. The subsample may exceed the entitled date range, but will be based only on days that are in the entitled range.
        /// </remarks>
        /// <exception cref="FactSet.SDK.RealTimeTimeSeries.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postVendorChartIQTimeSeriesEodSubsampleGetRequest">Request Body</param>
        /// <returns>InlineResponse2001</returns>
        InlineResponse2001 PostVendorChartIQTimeSeriesEodSubsampleGet(PostVendorChartIQTimeSeriesEodSubsampleGetRequest postVendorChartIQTimeSeriesEodSubsampleGetRequest);

        /// <summary>
        /// Single subsample end-of-day data for a notation.
        /// </summary>
        /// <remarks>
        /// Single subsample end-of-day data for a notation. The sample is always adjusted for currency changes. The subsample may exceed the entitled date range, but will be based only on days that are in the entitled range.
        /// </remarks>
        /// <exception cref="FactSet.SDK.RealTimeTimeSeries.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postVendorChartIQTimeSeriesEodSubsampleGetRequest">Request Body</param>
        /// <returns>ApiResponse of InlineResponse2001</returns>
        ApiResponse<InlineResponse2001> PostVendorChartIQTimeSeriesEodSubsampleGetWithHttpInfo(PostVendorChartIQTimeSeriesEodSubsampleGetRequest postVendorChartIQTimeSeriesEodSubsampleGetRequest);
        /// <summary>
        /// Subsampled end-of-day time series data for a notation.
        /// </summary>
        /// <remarks>
        /// Subsampled end-of-day time series data for a notation. The resulting time series is always adjusted for currency changes. If a subsample&#39;s date range is not entirely within the maximally entitled date range, the subsample is excluded from the response.&lt;br&gt;&lt;br&gt;Pagination to a previous page is not supported and &#x60;pagination.previous&#x60; is always &#x60;null&#x60;.
        /// </remarks>
        /// <exception cref="FactSet.SDK.RealTimeTimeSeries.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postVendorChartIQTimeSeriesEodSubsampleListRequest">Request Body</param>
        /// <returns>InlineResponse2002</returns>
        InlineResponse2002 PostVendorChartIQTimeSeriesEodSubsampleList(PostVendorChartIQTimeSeriesEodSubsampleListRequest postVendorChartIQTimeSeriesEodSubsampleListRequest);

        /// <summary>
        /// Subsampled end-of-day time series data for a notation.
        /// </summary>
        /// <remarks>
        /// Subsampled end-of-day time series data for a notation. The resulting time series is always adjusted for currency changes. If a subsample&#39;s date range is not entirely within the maximally entitled date range, the subsample is excluded from the response.&lt;br&gt;&lt;br&gt;Pagination to a previous page is not supported and &#x60;pagination.previous&#x60; is always &#x60;null&#x60;.
        /// </remarks>
        /// <exception cref="FactSet.SDK.RealTimeTimeSeries.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postVendorChartIQTimeSeriesEodSubsampleListRequest">Request Body</param>
        /// <returns>ApiResponse of InlineResponse2002</returns>
        ApiResponse<InlineResponse2002> PostVendorChartIQTimeSeriesEodSubsampleListWithHttpInfo(PostVendorChartIQTimeSeriesEodSubsampleListRequest postVendorChartIQTimeSeriesEodSubsampleListRequest);
        /// <summary>
        /// Single subsample intraday data for a notation.
        /// </summary>
        /// <remarks>
        /// Single subsample intraday data for a notation. The subsample may exceed the entitled time range, but will be based only on ticks that are in the entitled range.
        /// </remarks>
        /// <exception cref="FactSet.SDK.RealTimeTimeSeries.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postVendorChartIQTimeSeriesIntradaySubsampleGetRequest">Request Body</param>
        /// <returns>InlineResponse2003</returns>
        InlineResponse2003 PostVendorChartIQTimeSeriesIntradaySubsampleGet(PostVendorChartIQTimeSeriesIntradaySubsampleGetRequest postVendorChartIQTimeSeriesIntradaySubsampleGetRequest);

        /// <summary>
        /// Single subsample intraday data for a notation.
        /// </summary>
        /// <remarks>
        /// Single subsample intraday data for a notation. The subsample may exceed the entitled time range, but will be based only on ticks that are in the entitled range.
        /// </remarks>
        /// <exception cref="FactSet.SDK.RealTimeTimeSeries.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postVendorChartIQTimeSeriesIntradaySubsampleGetRequest">Request Body</param>
        /// <returns>ApiResponse of InlineResponse2003</returns>
        ApiResponse<InlineResponse2003> PostVendorChartIQTimeSeriesIntradaySubsampleGetWithHttpInfo(PostVendorChartIQTimeSeriesIntradaySubsampleGetRequest postVendorChartIQTimeSeriesIntradaySubsampleGetRequest);
        /// <summary>
        /// Subsampled intraday time series data for a notation.
        /// </summary>
        /// <remarks>
        /// Subsampled intraday time series data for a notation. If a subsample&#39;s time range is not entirely within the maximally entitled time range, the subsample is excluded from the response.&lt;br&gt;&lt;br&gt;Pagination to a previous page is not supported and &#x60;pagination.previous&#x60; is always &#x60;null&#x60;.
        /// </remarks>
        /// <exception cref="FactSet.SDK.RealTimeTimeSeries.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postVendorChartIQTimeSeriesIntradaySubsampleListRequest">Request Body</param>
        /// <returns>InlineResponse2004</returns>
        InlineResponse2004 PostVendorChartIQTimeSeriesIntradaySubsampleList(PostVendorChartIQTimeSeriesIntradaySubsampleListRequest postVendorChartIQTimeSeriesIntradaySubsampleListRequest);

        /// <summary>
        /// Subsampled intraday time series data for a notation.
        /// </summary>
        /// <remarks>
        /// Subsampled intraday time series data for a notation. If a subsample&#39;s time range is not entirely within the maximally entitled time range, the subsample is excluded from the response.&lt;br&gt;&lt;br&gt;Pagination to a previous page is not supported and &#x60;pagination.previous&#x60; is always &#x60;null&#x60;.
        /// </remarks>
        /// <exception cref="FactSet.SDK.RealTimeTimeSeries.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postVendorChartIQTimeSeriesIntradaySubsampleListRequest">Request Body</param>
        /// <returns>ApiResponse of InlineResponse2004</returns>
        ApiResponse<InlineResponse2004> PostVendorChartIQTimeSeriesIntradaySubsampleListWithHttpInfo(PostVendorChartIQTimeSeriesIntradaySubsampleListRequest postVendorChartIQTimeSeriesIntradaySubsampleListRequest);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IVendorApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// End-of-day time series data for a notation.
        /// </summary>
        /// <remarks>
        /// End-of-day time series data for a notation. The resulting time series is always adjusted for currency changes.&lt;br&gt;&lt;br&gt;Pagination to a previous page is not supported and &#x60;pagination.previous&#x60; is always &#x60;null&#x60;.
        /// </remarks>
        /// <exception cref="FactSet.SDK.RealTimeTimeSeries.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postVendorChartIQTimeSeriesEodListRequest">Request Body</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse200</returns>
        System.Threading.Tasks.Task<InlineResponse200> PostVendorChartIQTimeSeriesEodListAsync(PostVendorChartIQTimeSeriesEodListRequest postVendorChartIQTimeSeriesEodListRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// End-of-day time series data for a notation.
        /// </summary>
        /// <remarks>
        /// End-of-day time series data for a notation. The resulting time series is always adjusted for currency changes.&lt;br&gt;&lt;br&gt;Pagination to a previous page is not supported and &#x60;pagination.previous&#x60; is always &#x60;null&#x60;.
        /// </remarks>
        /// <exception cref="FactSet.SDK.RealTimeTimeSeries.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postVendorChartIQTimeSeriesEodListRequest">Request Body</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse200)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse200>> PostVendorChartIQTimeSeriesEodListWithHttpInfoAsync(PostVendorChartIQTimeSeriesEodListRequest postVendorChartIQTimeSeriesEodListRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Single subsample end-of-day data for a notation.
        /// </summary>
        /// <remarks>
        /// Single subsample end-of-day data for a notation. The sample is always adjusted for currency changes. The subsample may exceed the entitled date range, but will be based only on days that are in the entitled range.
        /// </remarks>
        /// <exception cref="FactSet.SDK.RealTimeTimeSeries.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postVendorChartIQTimeSeriesEodSubsampleGetRequest">Request Body</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse2001</returns>
        System.Threading.Tasks.Task<InlineResponse2001> PostVendorChartIQTimeSeriesEodSubsampleGetAsync(PostVendorChartIQTimeSeriesEodSubsampleGetRequest postVendorChartIQTimeSeriesEodSubsampleGetRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Single subsample end-of-day data for a notation.
        /// </summary>
        /// <remarks>
        /// Single subsample end-of-day data for a notation. The sample is always adjusted for currency changes. The subsample may exceed the entitled date range, but will be based only on days that are in the entitled range.
        /// </remarks>
        /// <exception cref="FactSet.SDK.RealTimeTimeSeries.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postVendorChartIQTimeSeriesEodSubsampleGetRequest">Request Body</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse2001)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse2001>> PostVendorChartIQTimeSeriesEodSubsampleGetWithHttpInfoAsync(PostVendorChartIQTimeSeriesEodSubsampleGetRequest postVendorChartIQTimeSeriesEodSubsampleGetRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Subsampled end-of-day time series data for a notation.
        /// </summary>
        /// <remarks>
        /// Subsampled end-of-day time series data for a notation. The resulting time series is always adjusted for currency changes. If a subsample&#39;s date range is not entirely within the maximally entitled date range, the subsample is excluded from the response.&lt;br&gt;&lt;br&gt;Pagination to a previous page is not supported and &#x60;pagination.previous&#x60; is always &#x60;null&#x60;.
        /// </remarks>
        /// <exception cref="FactSet.SDK.RealTimeTimeSeries.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postVendorChartIQTimeSeriesEodSubsampleListRequest">Request Body</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse2002</returns>
        System.Threading.Tasks.Task<InlineResponse2002> PostVendorChartIQTimeSeriesEodSubsampleListAsync(PostVendorChartIQTimeSeriesEodSubsampleListRequest postVendorChartIQTimeSeriesEodSubsampleListRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Subsampled end-of-day time series data for a notation.
        /// </summary>
        /// <remarks>
        /// Subsampled end-of-day time series data for a notation. The resulting time series is always adjusted for currency changes. If a subsample&#39;s date range is not entirely within the maximally entitled date range, the subsample is excluded from the response.&lt;br&gt;&lt;br&gt;Pagination to a previous page is not supported and &#x60;pagination.previous&#x60; is always &#x60;null&#x60;.
        /// </remarks>
        /// <exception cref="FactSet.SDK.RealTimeTimeSeries.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postVendorChartIQTimeSeriesEodSubsampleListRequest">Request Body</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse2002)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse2002>> PostVendorChartIQTimeSeriesEodSubsampleListWithHttpInfoAsync(PostVendorChartIQTimeSeriesEodSubsampleListRequest postVendorChartIQTimeSeriesEodSubsampleListRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Single subsample intraday data for a notation.
        /// </summary>
        /// <remarks>
        /// Single subsample intraday data for a notation. The subsample may exceed the entitled time range, but will be based only on ticks that are in the entitled range.
        /// </remarks>
        /// <exception cref="FactSet.SDK.RealTimeTimeSeries.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postVendorChartIQTimeSeriesIntradaySubsampleGetRequest">Request Body</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse2003</returns>
        System.Threading.Tasks.Task<InlineResponse2003> PostVendorChartIQTimeSeriesIntradaySubsampleGetAsync(PostVendorChartIQTimeSeriesIntradaySubsampleGetRequest postVendorChartIQTimeSeriesIntradaySubsampleGetRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Single subsample intraday data for a notation.
        /// </summary>
        /// <remarks>
        /// Single subsample intraday data for a notation. The subsample may exceed the entitled time range, but will be based only on ticks that are in the entitled range.
        /// </remarks>
        /// <exception cref="FactSet.SDK.RealTimeTimeSeries.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postVendorChartIQTimeSeriesIntradaySubsampleGetRequest">Request Body</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse2003)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse2003>> PostVendorChartIQTimeSeriesIntradaySubsampleGetWithHttpInfoAsync(PostVendorChartIQTimeSeriesIntradaySubsampleGetRequest postVendorChartIQTimeSeriesIntradaySubsampleGetRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Subsampled intraday time series data for a notation.
        /// </summary>
        /// <remarks>
        /// Subsampled intraday time series data for a notation. If a subsample&#39;s time range is not entirely within the maximally entitled time range, the subsample is excluded from the response.&lt;br&gt;&lt;br&gt;Pagination to a previous page is not supported and &#x60;pagination.previous&#x60; is always &#x60;null&#x60;.
        /// </remarks>
        /// <exception cref="FactSet.SDK.RealTimeTimeSeries.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postVendorChartIQTimeSeriesIntradaySubsampleListRequest">Request Body</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse2004</returns>
        System.Threading.Tasks.Task<InlineResponse2004> PostVendorChartIQTimeSeriesIntradaySubsampleListAsync(PostVendorChartIQTimeSeriesIntradaySubsampleListRequest postVendorChartIQTimeSeriesIntradaySubsampleListRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Subsampled intraday time series data for a notation.
        /// </summary>
        /// <remarks>
        /// Subsampled intraday time series data for a notation. If a subsample&#39;s time range is not entirely within the maximally entitled time range, the subsample is excluded from the response.&lt;br&gt;&lt;br&gt;Pagination to a previous page is not supported and &#x60;pagination.previous&#x60; is always &#x60;null&#x60;.
        /// </remarks>
        /// <exception cref="FactSet.SDK.RealTimeTimeSeries.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postVendorChartIQTimeSeriesIntradaySubsampleListRequest">Request Body</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse2004)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse2004>> PostVendorChartIQTimeSeriesIntradaySubsampleListWithHttpInfoAsync(PostVendorChartIQTimeSeriesIntradaySubsampleListRequest postVendorChartIQTimeSeriesIntradaySubsampleListRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IVendorApi : IVendorApiSync, IVendorApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class VendorApi : IVendorApi
    {
        private FactSet.SDK.RealTimeTimeSeries.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        # region Response Type Disctionaries
        
        private static readonly Dictionary<HttpStatusCode, System.Type> PostVendorChartIQTimeSeriesEodListResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)200, typeof(InlineResponse200) },
        };

        private static readonly Dictionary<HttpStatusCode, System.Type> PostVendorChartIQTimeSeriesEodSubsampleGetResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)200, typeof(InlineResponse2001) },
        };

        private static readonly Dictionary<HttpStatusCode, System.Type> PostVendorChartIQTimeSeriesEodSubsampleListResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)200, typeof(InlineResponse2002) },
        };

        private static readonly Dictionary<HttpStatusCode, System.Type> PostVendorChartIQTimeSeriesIntradaySubsampleGetResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)200, typeof(InlineResponse2003) },
        };

        private static readonly Dictionary<HttpStatusCode, System.Type> PostVendorChartIQTimeSeriesIntradaySubsampleListResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)200, typeof(InlineResponse2004) },
        };

        # endregion Response Type Disctionaries

        # region Api Response Objects
        

        # endregion Api Response Objects

        /// <summary>
        /// Initializes a new instance of the <see cref="VendorApi"/> class.
        /// </summary>
        /// <returns></returns>
        public VendorApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="VendorApi"/> class.
        /// </summary>
        /// <returns></returns>
        public VendorApi(string basePath)
        {
            this.Configuration = FactSet.SDK.RealTimeTimeSeries.Client.Configuration.MergeConfigurations(
                FactSet.SDK.RealTimeTimeSeries.Client.GlobalConfiguration.Instance,
                new FactSet.SDK.RealTimeTimeSeries.Client.Configuration { BasePath = basePath }
            );
            this.Client = new FactSet.SDK.RealTimeTimeSeries.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new FactSet.SDK.RealTimeTimeSeries.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = FactSet.SDK.RealTimeTimeSeries.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="VendorApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public VendorApi(FactSet.SDK.RealTimeTimeSeries.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = FactSet.SDK.RealTimeTimeSeries.Client.Configuration.MergeConfigurations(
                FactSet.SDK.RealTimeTimeSeries.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new FactSet.SDK.RealTimeTimeSeries.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new FactSet.SDK.RealTimeTimeSeries.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = FactSet.SDK.RealTimeTimeSeries.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="VendorApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public VendorApi(FactSet.SDK.RealTimeTimeSeries.Client.ISynchronousClient client, FactSet.SDK.RealTimeTimeSeries.Client.IAsynchronousClient asyncClient, FactSet.SDK.RealTimeTimeSeries.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = FactSet.SDK.RealTimeTimeSeries.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public FactSet.SDK.RealTimeTimeSeries.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public FactSet.SDK.RealTimeTimeSeries.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public FactSet.SDK.RealTimeTimeSeries.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public FactSet.SDK.RealTimeTimeSeries.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// End-of-day time series data for a notation. End-of-day time series data for a notation. The resulting time series is always adjusted for currency changes.&lt;br&gt;&lt;br&gt;Pagination to a previous page is not supported and &#x60;pagination.previous&#x60; is always &#x60;null&#x60;.
        /// </summary>
        /// <exception cref="FactSet.SDK.RealTimeTimeSeries.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postVendorChartIQTimeSeriesEodListRequest">Request Body</param>
        /// <returns>InlineResponse200</returns>
        public InlineResponse200 PostVendorChartIQTimeSeriesEodList(PostVendorChartIQTimeSeriesEodListRequest postVendorChartIQTimeSeriesEodListRequest)
        {
            var localVarResponse = PostVendorChartIQTimeSeriesEodListWithHttpInfo(postVendorChartIQTimeSeriesEodListRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// End-of-day time series data for a notation. End-of-day time series data for a notation. The resulting time series is always adjusted for currency changes.&lt;br&gt;&lt;br&gt;Pagination to a previous page is not supported and &#x60;pagination.previous&#x60; is always &#x60;null&#x60;.
        /// </summary>
        /// <exception cref="FactSet.SDK.RealTimeTimeSeries.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postVendorChartIQTimeSeriesEodListRequest">Request Body</param>
        /// <returns>ApiResponse of InlineResponse200</returns>
        public ApiResponse<InlineResponse200> PostVendorChartIQTimeSeriesEodListWithHttpInfo(PostVendorChartIQTimeSeriesEodListRequest postVendorChartIQTimeSeriesEodListRequest)
        {
            // verify the required parameter 'postVendorChartIQTimeSeriesEodListRequest' is set
            if (postVendorChartIQTimeSeriesEodListRequest == null)
            {
                throw new FactSet.SDK.RealTimeTimeSeries.Client.ApiException(400, "Missing required parameter 'postVendorChartIQTimeSeriesEodListRequest' when calling VendorApi->PostVendorChartIQTimeSeriesEodList");
            }

            FactSet.SDK.RealTimeTimeSeries.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.RealTimeTimeSeries.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.RealTimeTimeSeries.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.RealTimeTimeSeries.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = postVendorChartIQTimeSeriesEodListRequest;

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.RealTimeTimeSeries.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = PostVendorChartIQTimeSeriesEodListResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Post<
            InlineResponse200>("/vendor/chartIQ/timeSeries/eod/list", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostVendorChartIQTimeSeriesEodList", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// End-of-day time series data for a notation. End-of-day time series data for a notation. The resulting time series is always adjusted for currency changes.&lt;br&gt;&lt;br&gt;Pagination to a previous page is not supported and &#x60;pagination.previous&#x60; is always &#x60;null&#x60;.
        /// </summary>
        /// <exception cref="FactSet.SDK.RealTimeTimeSeries.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postVendorChartIQTimeSeriesEodListRequest">Request Body</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse200</returns>
        public async System.Threading.Tasks.Task<InlineResponse200>PostVendorChartIQTimeSeriesEodListAsync(PostVendorChartIQTimeSeriesEodListRequest postVendorChartIQTimeSeriesEodListRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await PostVendorChartIQTimeSeriesEodListWithHttpInfoAsync(postVendorChartIQTimeSeriesEodListRequest, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// End-of-day time series data for a notation. End-of-day time series data for a notation. The resulting time series is always adjusted for currency changes.&lt;br&gt;&lt;br&gt;Pagination to a previous page is not supported and &#x60;pagination.previous&#x60; is always &#x60;null&#x60;.
        /// </summary>
        /// <exception cref="FactSet.SDK.RealTimeTimeSeries.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postVendorChartIQTimeSeriesEodListRequest">Request Body</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse200)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse200>> PostVendorChartIQTimeSeriesEodListWithHttpInfoAsync(PostVendorChartIQTimeSeriesEodListRequest postVendorChartIQTimeSeriesEodListRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'postVendorChartIQTimeSeriesEodListRequest' is set
            if (postVendorChartIQTimeSeriesEodListRequest == null)
            {
                throw new FactSet.SDK.RealTimeTimeSeries.Client.ApiException(400, "Missing required parameter 'postVendorChartIQTimeSeriesEodListRequest' when calling VendorApi->PostVendorChartIQTimeSeriesEodList");
            }


            FactSet.SDK.RealTimeTimeSeries.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.RealTimeTimeSeries.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.RealTimeTimeSeries.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.RealTimeTimeSeries.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = postVendorChartIQTimeSeriesEodListRequest;

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.RealTimeTimeSeries.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = PostVendorChartIQTimeSeriesEodListResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<InlineResponse200>("/vendor/chartIQ/timeSeries/eod/list", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostVendorChartIQTimeSeriesEodList", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Single subsample end-of-day data for a notation. Single subsample end-of-day data for a notation. The sample is always adjusted for currency changes. The subsample may exceed the entitled date range, but will be based only on days that are in the entitled range.
        /// </summary>
        /// <exception cref="FactSet.SDK.RealTimeTimeSeries.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postVendorChartIQTimeSeriesEodSubsampleGetRequest">Request Body</param>
        /// <returns>InlineResponse2001</returns>
        public InlineResponse2001 PostVendorChartIQTimeSeriesEodSubsampleGet(PostVendorChartIQTimeSeriesEodSubsampleGetRequest postVendorChartIQTimeSeriesEodSubsampleGetRequest)
        {
            var localVarResponse = PostVendorChartIQTimeSeriesEodSubsampleGetWithHttpInfo(postVendorChartIQTimeSeriesEodSubsampleGetRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Single subsample end-of-day data for a notation. Single subsample end-of-day data for a notation. The sample is always adjusted for currency changes. The subsample may exceed the entitled date range, but will be based only on days that are in the entitled range.
        /// </summary>
        /// <exception cref="FactSet.SDK.RealTimeTimeSeries.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postVendorChartIQTimeSeriesEodSubsampleGetRequest">Request Body</param>
        /// <returns>ApiResponse of InlineResponse2001</returns>
        public ApiResponse<InlineResponse2001> PostVendorChartIQTimeSeriesEodSubsampleGetWithHttpInfo(PostVendorChartIQTimeSeriesEodSubsampleGetRequest postVendorChartIQTimeSeriesEodSubsampleGetRequest)
        {
            // verify the required parameter 'postVendorChartIQTimeSeriesEodSubsampleGetRequest' is set
            if (postVendorChartIQTimeSeriesEodSubsampleGetRequest == null)
            {
                throw new FactSet.SDK.RealTimeTimeSeries.Client.ApiException(400, "Missing required parameter 'postVendorChartIQTimeSeriesEodSubsampleGetRequest' when calling VendorApi->PostVendorChartIQTimeSeriesEodSubsampleGet");
            }

            FactSet.SDK.RealTimeTimeSeries.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.RealTimeTimeSeries.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.RealTimeTimeSeries.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.RealTimeTimeSeries.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = postVendorChartIQTimeSeriesEodSubsampleGetRequest;

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.RealTimeTimeSeries.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = PostVendorChartIQTimeSeriesEodSubsampleGetResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Post<
            InlineResponse2001>("/vendor/chartIQ/timeSeries/eod/subsample/get", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostVendorChartIQTimeSeriesEodSubsampleGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// Single subsample end-of-day data for a notation. Single subsample end-of-day data for a notation. The sample is always adjusted for currency changes. The subsample may exceed the entitled date range, but will be based only on days that are in the entitled range.
        /// </summary>
        /// <exception cref="FactSet.SDK.RealTimeTimeSeries.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postVendorChartIQTimeSeriesEodSubsampleGetRequest">Request Body</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse2001</returns>
        public async System.Threading.Tasks.Task<InlineResponse2001>PostVendorChartIQTimeSeriesEodSubsampleGetAsync(PostVendorChartIQTimeSeriesEodSubsampleGetRequest postVendorChartIQTimeSeriesEodSubsampleGetRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await PostVendorChartIQTimeSeriesEodSubsampleGetWithHttpInfoAsync(postVendorChartIQTimeSeriesEodSubsampleGetRequest, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Single subsample end-of-day data for a notation. Single subsample end-of-day data for a notation. The sample is always adjusted for currency changes. The subsample may exceed the entitled date range, but will be based only on days that are in the entitled range.
        /// </summary>
        /// <exception cref="FactSet.SDK.RealTimeTimeSeries.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postVendorChartIQTimeSeriesEodSubsampleGetRequest">Request Body</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse2001)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse2001>> PostVendorChartIQTimeSeriesEodSubsampleGetWithHttpInfoAsync(PostVendorChartIQTimeSeriesEodSubsampleGetRequest postVendorChartIQTimeSeriesEodSubsampleGetRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'postVendorChartIQTimeSeriesEodSubsampleGetRequest' is set
            if (postVendorChartIQTimeSeriesEodSubsampleGetRequest == null)
            {
                throw new FactSet.SDK.RealTimeTimeSeries.Client.ApiException(400, "Missing required parameter 'postVendorChartIQTimeSeriesEodSubsampleGetRequest' when calling VendorApi->PostVendorChartIQTimeSeriesEodSubsampleGet");
            }


            FactSet.SDK.RealTimeTimeSeries.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.RealTimeTimeSeries.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.RealTimeTimeSeries.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.RealTimeTimeSeries.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = postVendorChartIQTimeSeriesEodSubsampleGetRequest;

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.RealTimeTimeSeries.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = PostVendorChartIQTimeSeriesEodSubsampleGetResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<InlineResponse2001>("/vendor/chartIQ/timeSeries/eod/subsample/get", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostVendorChartIQTimeSeriesEodSubsampleGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Subsampled end-of-day time series data for a notation. Subsampled end-of-day time series data for a notation. The resulting time series is always adjusted for currency changes. If a subsample&#39;s date range is not entirely within the maximally entitled date range, the subsample is excluded from the response.&lt;br&gt;&lt;br&gt;Pagination to a previous page is not supported and &#x60;pagination.previous&#x60; is always &#x60;null&#x60;.
        /// </summary>
        /// <exception cref="FactSet.SDK.RealTimeTimeSeries.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postVendorChartIQTimeSeriesEodSubsampleListRequest">Request Body</param>
        /// <returns>InlineResponse2002</returns>
        public InlineResponse2002 PostVendorChartIQTimeSeriesEodSubsampleList(PostVendorChartIQTimeSeriesEodSubsampleListRequest postVendorChartIQTimeSeriesEodSubsampleListRequest)
        {
            var localVarResponse = PostVendorChartIQTimeSeriesEodSubsampleListWithHttpInfo(postVendorChartIQTimeSeriesEodSubsampleListRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Subsampled end-of-day time series data for a notation. Subsampled end-of-day time series data for a notation. The resulting time series is always adjusted for currency changes. If a subsample&#39;s date range is not entirely within the maximally entitled date range, the subsample is excluded from the response.&lt;br&gt;&lt;br&gt;Pagination to a previous page is not supported and &#x60;pagination.previous&#x60; is always &#x60;null&#x60;.
        /// </summary>
        /// <exception cref="FactSet.SDK.RealTimeTimeSeries.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postVendorChartIQTimeSeriesEodSubsampleListRequest">Request Body</param>
        /// <returns>ApiResponse of InlineResponse2002</returns>
        public ApiResponse<InlineResponse2002> PostVendorChartIQTimeSeriesEodSubsampleListWithHttpInfo(PostVendorChartIQTimeSeriesEodSubsampleListRequest postVendorChartIQTimeSeriesEodSubsampleListRequest)
        {
            // verify the required parameter 'postVendorChartIQTimeSeriesEodSubsampleListRequest' is set
            if (postVendorChartIQTimeSeriesEodSubsampleListRequest == null)
            {
                throw new FactSet.SDK.RealTimeTimeSeries.Client.ApiException(400, "Missing required parameter 'postVendorChartIQTimeSeriesEodSubsampleListRequest' when calling VendorApi->PostVendorChartIQTimeSeriesEodSubsampleList");
            }

            FactSet.SDK.RealTimeTimeSeries.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.RealTimeTimeSeries.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.RealTimeTimeSeries.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.RealTimeTimeSeries.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = postVendorChartIQTimeSeriesEodSubsampleListRequest;

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.RealTimeTimeSeries.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = PostVendorChartIQTimeSeriesEodSubsampleListResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Post<
            InlineResponse2002>("/vendor/chartIQ/timeSeries/eod/subsample/list", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostVendorChartIQTimeSeriesEodSubsampleList", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// Subsampled end-of-day time series data for a notation. Subsampled end-of-day time series data for a notation. The resulting time series is always adjusted for currency changes. If a subsample&#39;s date range is not entirely within the maximally entitled date range, the subsample is excluded from the response.&lt;br&gt;&lt;br&gt;Pagination to a previous page is not supported and &#x60;pagination.previous&#x60; is always &#x60;null&#x60;.
        /// </summary>
        /// <exception cref="FactSet.SDK.RealTimeTimeSeries.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postVendorChartIQTimeSeriesEodSubsampleListRequest">Request Body</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse2002</returns>
        public async System.Threading.Tasks.Task<InlineResponse2002>PostVendorChartIQTimeSeriesEodSubsampleListAsync(PostVendorChartIQTimeSeriesEodSubsampleListRequest postVendorChartIQTimeSeriesEodSubsampleListRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await PostVendorChartIQTimeSeriesEodSubsampleListWithHttpInfoAsync(postVendorChartIQTimeSeriesEodSubsampleListRequest, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Subsampled end-of-day time series data for a notation. Subsampled end-of-day time series data for a notation. The resulting time series is always adjusted for currency changes. If a subsample&#39;s date range is not entirely within the maximally entitled date range, the subsample is excluded from the response.&lt;br&gt;&lt;br&gt;Pagination to a previous page is not supported and &#x60;pagination.previous&#x60; is always &#x60;null&#x60;.
        /// </summary>
        /// <exception cref="FactSet.SDK.RealTimeTimeSeries.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postVendorChartIQTimeSeriesEodSubsampleListRequest">Request Body</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse2002)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse2002>> PostVendorChartIQTimeSeriesEodSubsampleListWithHttpInfoAsync(PostVendorChartIQTimeSeriesEodSubsampleListRequest postVendorChartIQTimeSeriesEodSubsampleListRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'postVendorChartIQTimeSeriesEodSubsampleListRequest' is set
            if (postVendorChartIQTimeSeriesEodSubsampleListRequest == null)
            {
                throw new FactSet.SDK.RealTimeTimeSeries.Client.ApiException(400, "Missing required parameter 'postVendorChartIQTimeSeriesEodSubsampleListRequest' when calling VendorApi->PostVendorChartIQTimeSeriesEodSubsampleList");
            }


            FactSet.SDK.RealTimeTimeSeries.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.RealTimeTimeSeries.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.RealTimeTimeSeries.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.RealTimeTimeSeries.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = postVendorChartIQTimeSeriesEodSubsampleListRequest;

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.RealTimeTimeSeries.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = PostVendorChartIQTimeSeriesEodSubsampleListResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<InlineResponse2002>("/vendor/chartIQ/timeSeries/eod/subsample/list", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostVendorChartIQTimeSeriesEodSubsampleList", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Single subsample intraday data for a notation. Single subsample intraday data for a notation. The subsample may exceed the entitled time range, but will be based only on ticks that are in the entitled range.
        /// </summary>
        /// <exception cref="FactSet.SDK.RealTimeTimeSeries.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postVendorChartIQTimeSeriesIntradaySubsampleGetRequest">Request Body</param>
        /// <returns>InlineResponse2003</returns>
        public InlineResponse2003 PostVendorChartIQTimeSeriesIntradaySubsampleGet(PostVendorChartIQTimeSeriesIntradaySubsampleGetRequest postVendorChartIQTimeSeriesIntradaySubsampleGetRequest)
        {
            var localVarResponse = PostVendorChartIQTimeSeriesIntradaySubsampleGetWithHttpInfo(postVendorChartIQTimeSeriesIntradaySubsampleGetRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Single subsample intraday data for a notation. Single subsample intraday data for a notation. The subsample may exceed the entitled time range, but will be based only on ticks that are in the entitled range.
        /// </summary>
        /// <exception cref="FactSet.SDK.RealTimeTimeSeries.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postVendorChartIQTimeSeriesIntradaySubsampleGetRequest">Request Body</param>
        /// <returns>ApiResponse of InlineResponse2003</returns>
        public ApiResponse<InlineResponse2003> PostVendorChartIQTimeSeriesIntradaySubsampleGetWithHttpInfo(PostVendorChartIQTimeSeriesIntradaySubsampleGetRequest postVendorChartIQTimeSeriesIntradaySubsampleGetRequest)
        {
            // verify the required parameter 'postVendorChartIQTimeSeriesIntradaySubsampleGetRequest' is set
            if (postVendorChartIQTimeSeriesIntradaySubsampleGetRequest == null)
            {
                throw new FactSet.SDK.RealTimeTimeSeries.Client.ApiException(400, "Missing required parameter 'postVendorChartIQTimeSeriesIntradaySubsampleGetRequest' when calling VendorApi->PostVendorChartIQTimeSeriesIntradaySubsampleGet");
            }

            FactSet.SDK.RealTimeTimeSeries.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.RealTimeTimeSeries.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.RealTimeTimeSeries.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.RealTimeTimeSeries.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = postVendorChartIQTimeSeriesIntradaySubsampleGetRequest;

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.RealTimeTimeSeries.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = PostVendorChartIQTimeSeriesIntradaySubsampleGetResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Post<
            InlineResponse2003>("/vendor/chartIQ/timeSeries/intraday/subsample/get", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostVendorChartIQTimeSeriesIntradaySubsampleGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// Single subsample intraday data for a notation. Single subsample intraday data for a notation. The subsample may exceed the entitled time range, but will be based only on ticks that are in the entitled range.
        /// </summary>
        /// <exception cref="FactSet.SDK.RealTimeTimeSeries.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postVendorChartIQTimeSeriesIntradaySubsampleGetRequest">Request Body</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse2003</returns>
        public async System.Threading.Tasks.Task<InlineResponse2003>PostVendorChartIQTimeSeriesIntradaySubsampleGetAsync(PostVendorChartIQTimeSeriesIntradaySubsampleGetRequest postVendorChartIQTimeSeriesIntradaySubsampleGetRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await PostVendorChartIQTimeSeriesIntradaySubsampleGetWithHttpInfoAsync(postVendorChartIQTimeSeriesIntradaySubsampleGetRequest, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Single subsample intraday data for a notation. Single subsample intraday data for a notation. The subsample may exceed the entitled time range, but will be based only on ticks that are in the entitled range.
        /// </summary>
        /// <exception cref="FactSet.SDK.RealTimeTimeSeries.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postVendorChartIQTimeSeriesIntradaySubsampleGetRequest">Request Body</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse2003)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse2003>> PostVendorChartIQTimeSeriesIntradaySubsampleGetWithHttpInfoAsync(PostVendorChartIQTimeSeriesIntradaySubsampleGetRequest postVendorChartIQTimeSeriesIntradaySubsampleGetRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'postVendorChartIQTimeSeriesIntradaySubsampleGetRequest' is set
            if (postVendorChartIQTimeSeriesIntradaySubsampleGetRequest == null)
            {
                throw new FactSet.SDK.RealTimeTimeSeries.Client.ApiException(400, "Missing required parameter 'postVendorChartIQTimeSeriesIntradaySubsampleGetRequest' when calling VendorApi->PostVendorChartIQTimeSeriesIntradaySubsampleGet");
            }


            FactSet.SDK.RealTimeTimeSeries.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.RealTimeTimeSeries.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.RealTimeTimeSeries.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.RealTimeTimeSeries.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = postVendorChartIQTimeSeriesIntradaySubsampleGetRequest;

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.RealTimeTimeSeries.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = PostVendorChartIQTimeSeriesIntradaySubsampleGetResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<InlineResponse2003>("/vendor/chartIQ/timeSeries/intraday/subsample/get", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostVendorChartIQTimeSeriesIntradaySubsampleGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Subsampled intraday time series data for a notation. Subsampled intraday time series data for a notation. If a subsample&#39;s time range is not entirely within the maximally entitled time range, the subsample is excluded from the response.&lt;br&gt;&lt;br&gt;Pagination to a previous page is not supported and &#x60;pagination.previous&#x60; is always &#x60;null&#x60;.
        /// </summary>
        /// <exception cref="FactSet.SDK.RealTimeTimeSeries.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postVendorChartIQTimeSeriesIntradaySubsampleListRequest">Request Body</param>
        /// <returns>InlineResponse2004</returns>
        public InlineResponse2004 PostVendorChartIQTimeSeriesIntradaySubsampleList(PostVendorChartIQTimeSeriesIntradaySubsampleListRequest postVendorChartIQTimeSeriesIntradaySubsampleListRequest)
        {
            var localVarResponse = PostVendorChartIQTimeSeriesIntradaySubsampleListWithHttpInfo(postVendorChartIQTimeSeriesIntradaySubsampleListRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Subsampled intraday time series data for a notation. Subsampled intraday time series data for a notation. If a subsample&#39;s time range is not entirely within the maximally entitled time range, the subsample is excluded from the response.&lt;br&gt;&lt;br&gt;Pagination to a previous page is not supported and &#x60;pagination.previous&#x60; is always &#x60;null&#x60;.
        /// </summary>
        /// <exception cref="FactSet.SDK.RealTimeTimeSeries.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postVendorChartIQTimeSeriesIntradaySubsampleListRequest">Request Body</param>
        /// <returns>ApiResponse of InlineResponse2004</returns>
        public ApiResponse<InlineResponse2004> PostVendorChartIQTimeSeriesIntradaySubsampleListWithHttpInfo(PostVendorChartIQTimeSeriesIntradaySubsampleListRequest postVendorChartIQTimeSeriesIntradaySubsampleListRequest)
        {
            // verify the required parameter 'postVendorChartIQTimeSeriesIntradaySubsampleListRequest' is set
            if (postVendorChartIQTimeSeriesIntradaySubsampleListRequest == null)
            {
                throw new FactSet.SDK.RealTimeTimeSeries.Client.ApiException(400, "Missing required parameter 'postVendorChartIQTimeSeriesIntradaySubsampleListRequest' when calling VendorApi->PostVendorChartIQTimeSeriesIntradaySubsampleList");
            }

            FactSet.SDK.RealTimeTimeSeries.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.RealTimeTimeSeries.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.RealTimeTimeSeries.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.RealTimeTimeSeries.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = postVendorChartIQTimeSeriesIntradaySubsampleListRequest;

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.RealTimeTimeSeries.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = PostVendorChartIQTimeSeriesIntradaySubsampleListResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Post<
            InlineResponse2004>("/vendor/chartIQ/timeSeries/intraday/subsample/list", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostVendorChartIQTimeSeriesIntradaySubsampleList", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// Subsampled intraday time series data for a notation. Subsampled intraday time series data for a notation. If a subsample&#39;s time range is not entirely within the maximally entitled time range, the subsample is excluded from the response.&lt;br&gt;&lt;br&gt;Pagination to a previous page is not supported and &#x60;pagination.previous&#x60; is always &#x60;null&#x60;.
        /// </summary>
        /// <exception cref="FactSet.SDK.RealTimeTimeSeries.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postVendorChartIQTimeSeriesIntradaySubsampleListRequest">Request Body</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse2004</returns>
        public async System.Threading.Tasks.Task<InlineResponse2004>PostVendorChartIQTimeSeriesIntradaySubsampleListAsync(PostVendorChartIQTimeSeriesIntradaySubsampleListRequest postVendorChartIQTimeSeriesIntradaySubsampleListRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await PostVendorChartIQTimeSeriesIntradaySubsampleListWithHttpInfoAsync(postVendorChartIQTimeSeriesIntradaySubsampleListRequest, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Subsampled intraday time series data for a notation. Subsampled intraday time series data for a notation. If a subsample&#39;s time range is not entirely within the maximally entitled time range, the subsample is excluded from the response.&lt;br&gt;&lt;br&gt;Pagination to a previous page is not supported and &#x60;pagination.previous&#x60; is always &#x60;null&#x60;.
        /// </summary>
        /// <exception cref="FactSet.SDK.RealTimeTimeSeries.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postVendorChartIQTimeSeriesIntradaySubsampleListRequest">Request Body</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse2004)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse2004>> PostVendorChartIQTimeSeriesIntradaySubsampleListWithHttpInfoAsync(PostVendorChartIQTimeSeriesIntradaySubsampleListRequest postVendorChartIQTimeSeriesIntradaySubsampleListRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'postVendorChartIQTimeSeriesIntradaySubsampleListRequest' is set
            if (postVendorChartIQTimeSeriesIntradaySubsampleListRequest == null)
            {
                throw new FactSet.SDK.RealTimeTimeSeries.Client.ApiException(400, "Missing required parameter 'postVendorChartIQTimeSeriesIntradaySubsampleListRequest' when calling VendorApi->PostVendorChartIQTimeSeriesIntradaySubsampleList");
            }


            FactSet.SDK.RealTimeTimeSeries.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.RealTimeTimeSeries.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.RealTimeTimeSeries.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.RealTimeTimeSeries.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = postVendorChartIQTimeSeriesIntradaySubsampleListRequest;

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.RealTimeTimeSeries.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = PostVendorChartIQTimeSeriesIntradaySubsampleListResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<InlineResponse2004>("/vendor/chartIQ/timeSeries/intraday/subsample/list", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostVendorChartIQTimeSeriesIntradaySubsampleList", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
