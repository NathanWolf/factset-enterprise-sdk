/*
 * Quotes API For Digital Portals
 *
 * The Quotes API combines endpoints for retrieving security end-of-day, delayed, and realtime prices with performance key figures and basic reference data on the security and market level.  The API supports over 20 different price types for each quote and comes with basic search endpoints based on security identifiers and instrument names. Market coverage is included in the *Sample Use Cases* section below.  The Digital Portal use case is focused on high-performance applications that are  * serving millions of end-users, * accessible by client browsers via the internet, * supporting subscriptions for streamed updates out-of-the-box, * typically combining a wide variety of *for Digital Portals*-APIs into a highly use-case specific solution for customers, * integrated into complex infrastructures such as existing frontend frameworks, authentication services.  All APIs labelled *for Digital Portals* have been designed for direct use by client web applications and feature extreme low latency: The average response time across all endpoints is 30 ms whereas 99% of all requests are answered in close to under 300ms.  See the [Time Series API for Digital Portals](https://developer.factset.com/api-catalog/time-series-api-digital-portals) for direct access to price histories, and the [News API for Digital Portals](https://developer.factset.com/api-catalog/news-api-digital-portals) for searching and fetching related news. 
 *
 * The version of the OpenAPI document: 3.0.0
 * Contact: api@factset.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = FactSet.SDK.RealTimeQuotes.Client.OpenAPIDateConverter;

namespace FactSet.SDK.RealTimeQuotes.Model
{
    /// <summary>
    /// Disclosure on costs and charges at the point of sale based on reasonable estimations.
    /// </summary>
    [DataContract(Name = "inline_response_200_62_data_costsAndCharges_exAnte")]
    public partial class InlineResponse20062DataCostsAndChargesExAnte : IEquatable<InlineResponse20062DataCostsAndChargesExAnte>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="InlineResponse20062DataCostsAndChargesExAnte" /> class.
        /// </summary>
        /// <param name="oneOffEntryCost">oneOffEntryCost.</param>
        /// <param name="italy">italy.</param>
        /// <param name="oneOffMaximumAcquiredEntryCost">oneOffMaximumAcquiredEntryCost.</param>
        /// <param name="oneOffMaximumExitCost">oneOffMaximumExitCost.</param>
        /// <param name="oneOffMaximumAcquiredExitCost">oneOffMaximumAcquiredExitCost.</param>
        /// <param name="oneOffTypicalExitCost">oneOffTypicalExitCost.</param>
        /// <param name="oneOffPriorRHPExitCost">oneOffPriorRHPExitCost.</param>
        /// <param name="ongoingCosts">ongoingCosts.</param>
        /// <param name="managementFee">managementFee.</param>
        /// <param name="distributionFee">distributionFee.</param>
        /// <param name="transactionCosts">transactionCosts.</param>
        /// <param name="incidentalCosts">incidentalCosts.</param>
        public InlineResponse20062DataCostsAndChargesExAnte(InlineResponse20062DataCostsAndChargesExAnteOneOffEntryCost oneOffEntryCost = default(InlineResponse20062DataCostsAndChargesExAnteOneOffEntryCost), InlineResponse20062DataCostsAndChargesExAnteItaly italy = default(InlineResponse20062DataCostsAndChargesExAnteItaly), InlineResponse20062DataCostsAndChargesExAnteOneOffMaximumAcquiredEntryCost oneOffMaximumAcquiredEntryCost = default(InlineResponse20062DataCostsAndChargesExAnteOneOffMaximumAcquiredEntryCost), InlineResponse20062DataCostsAndChargesExAnteOneOffMaximumExitCost oneOffMaximumExitCost = default(InlineResponse20062DataCostsAndChargesExAnteOneOffMaximumExitCost), InlineResponse20062DataCostsAndChargesExAnteOneOffMaximumAcquiredExitCost oneOffMaximumAcquiredExitCost = default(InlineResponse20062DataCostsAndChargesExAnteOneOffMaximumAcquiredExitCost), InlineResponse20062DataCostsAndChargesExAnteOneOffTypicalExitCost oneOffTypicalExitCost = default(InlineResponse20062DataCostsAndChargesExAnteOneOffTypicalExitCost), InlineResponse20062DataCostsAndChargesExAnteOneOffPriorRHPExitCost oneOffPriorRHPExitCost = default(InlineResponse20062DataCostsAndChargesExAnteOneOffPriorRHPExitCost), InlineResponse20062DataCostsAndChargesExAnteOngoingCosts ongoingCosts = default(InlineResponse20062DataCostsAndChargesExAnteOngoingCosts), InlineResponse20062DataCostsAndChargesExAnteManagementFee managementFee = default(InlineResponse20062DataCostsAndChargesExAnteManagementFee), InlineResponse20062DataCostsAndChargesExAnteDistributionFee distributionFee = default(InlineResponse20062DataCostsAndChargesExAnteDistributionFee), InlineResponse20062DataCostsAndChargesExAnteTransactionCosts transactionCosts = default(InlineResponse20062DataCostsAndChargesExAnteTransactionCosts), InlineResponse20062DataCostsAndChargesExAnteIncidentalCosts incidentalCosts = default(InlineResponse20062DataCostsAndChargesExAnteIncidentalCosts))
        {
            this.OneOffEntryCost = oneOffEntryCost;
            this.Italy = italy;
            this.OneOffMaximumAcquiredEntryCost = oneOffMaximumAcquiredEntryCost;
            this.OneOffMaximumExitCost = oneOffMaximumExitCost;
            this.OneOffMaximumAcquiredExitCost = oneOffMaximumAcquiredExitCost;
            this.OneOffTypicalExitCost = oneOffTypicalExitCost;
            this.OneOffPriorRHPExitCost = oneOffPriorRHPExitCost;
            this.OngoingCosts = ongoingCosts;
            this.ManagementFee = managementFee;
            this.DistributionFee = distributionFee;
            this.TransactionCosts = transactionCosts;
            this.IncidentalCosts = incidentalCosts;
        }

        /// <summary>
        /// Gets or Sets OneOffEntryCost
        /// </summary>
        [DataMember(Name = "oneOffEntryCost", EmitDefaultValue = false)]
        public InlineResponse20062DataCostsAndChargesExAnteOneOffEntryCost OneOffEntryCost { get; set; }

        /// <summary>
        /// Gets or Sets Italy
        /// </summary>
        [DataMember(Name = "italy", EmitDefaultValue = false)]
        public InlineResponse20062DataCostsAndChargesExAnteItaly Italy { get; set; }

        /// <summary>
        /// Gets or Sets OneOffMaximumAcquiredEntryCost
        /// </summary>
        [DataMember(Name = "oneOffMaximumAcquiredEntryCost", EmitDefaultValue = false)]
        public InlineResponse20062DataCostsAndChargesExAnteOneOffMaximumAcquiredEntryCost OneOffMaximumAcquiredEntryCost { get; set; }

        /// <summary>
        /// Gets or Sets OneOffMaximumExitCost
        /// </summary>
        [DataMember(Name = "oneOffMaximumExitCost", EmitDefaultValue = false)]
        public InlineResponse20062DataCostsAndChargesExAnteOneOffMaximumExitCost OneOffMaximumExitCost { get; set; }

        /// <summary>
        /// Gets or Sets OneOffMaximumAcquiredExitCost
        /// </summary>
        [DataMember(Name = "oneOffMaximumAcquiredExitCost", EmitDefaultValue = false)]
        public InlineResponse20062DataCostsAndChargesExAnteOneOffMaximumAcquiredExitCost OneOffMaximumAcquiredExitCost { get; set; }

        /// <summary>
        /// Gets or Sets OneOffTypicalExitCost
        /// </summary>
        [DataMember(Name = "oneOffTypicalExitCost", EmitDefaultValue = false)]
        public InlineResponse20062DataCostsAndChargesExAnteOneOffTypicalExitCost OneOffTypicalExitCost { get; set; }

        /// <summary>
        /// Gets or Sets OneOffPriorRHPExitCost
        /// </summary>
        [DataMember(Name = "oneOffPriorRHPExitCost", EmitDefaultValue = false)]
        public InlineResponse20062DataCostsAndChargesExAnteOneOffPriorRHPExitCost OneOffPriorRHPExitCost { get; set; }

        /// <summary>
        /// Gets or Sets OngoingCosts
        /// </summary>
        [DataMember(Name = "ongoingCosts", EmitDefaultValue = false)]
        public InlineResponse20062DataCostsAndChargesExAnteOngoingCosts OngoingCosts { get; set; }

        /// <summary>
        /// Gets or Sets ManagementFee
        /// </summary>
        [DataMember(Name = "managementFee", EmitDefaultValue = false)]
        public InlineResponse20062DataCostsAndChargesExAnteManagementFee ManagementFee { get; set; }

        /// <summary>
        /// Gets or Sets DistributionFee
        /// </summary>
        [DataMember(Name = "distributionFee", EmitDefaultValue = false)]
        public InlineResponse20062DataCostsAndChargesExAnteDistributionFee DistributionFee { get; set; }

        /// <summary>
        /// Gets or Sets TransactionCosts
        /// </summary>
        [DataMember(Name = "transactionCosts", EmitDefaultValue = false)]
        public InlineResponse20062DataCostsAndChargesExAnteTransactionCosts TransactionCosts { get; set; }

        /// <summary>
        /// Gets or Sets IncidentalCosts
        /// </summary>
        [DataMember(Name = "incidentalCosts", EmitDefaultValue = false)]
        public InlineResponse20062DataCostsAndChargesExAnteIncidentalCosts IncidentalCosts { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class InlineResponse20062DataCostsAndChargesExAnte {\n");
            sb.Append("  OneOffEntryCost: ").Append(OneOffEntryCost).Append("\n");
            sb.Append("  Italy: ").Append(Italy).Append("\n");
            sb.Append("  OneOffMaximumAcquiredEntryCost: ").Append(OneOffMaximumAcquiredEntryCost).Append("\n");
            sb.Append("  OneOffMaximumExitCost: ").Append(OneOffMaximumExitCost).Append("\n");
            sb.Append("  OneOffMaximumAcquiredExitCost: ").Append(OneOffMaximumAcquiredExitCost).Append("\n");
            sb.Append("  OneOffTypicalExitCost: ").Append(OneOffTypicalExitCost).Append("\n");
            sb.Append("  OneOffPriorRHPExitCost: ").Append(OneOffPriorRHPExitCost).Append("\n");
            sb.Append("  OngoingCosts: ").Append(OngoingCosts).Append("\n");
            sb.Append("  ManagementFee: ").Append(ManagementFee).Append("\n");
            sb.Append("  DistributionFee: ").Append(DistributionFee).Append("\n");
            sb.Append("  TransactionCosts: ").Append(TransactionCosts).Append("\n");
            sb.Append("  IncidentalCosts: ").Append(IncidentalCosts).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as InlineResponse20062DataCostsAndChargesExAnte);
        }

        /// <summary>
        /// Returns true if InlineResponse20062DataCostsAndChargesExAnte instances are equal
        /// </summary>
        /// <param name="input">Instance of InlineResponse20062DataCostsAndChargesExAnte to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(InlineResponse20062DataCostsAndChargesExAnte input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.OneOffEntryCost == input.OneOffEntryCost ||
                    (this.OneOffEntryCost != null &&
                    this.OneOffEntryCost.Equals(input.OneOffEntryCost))
                ) && 
                (
                    this.Italy == input.Italy ||
                    (this.Italy != null &&
                    this.Italy.Equals(input.Italy))
                ) && 
                (
                    this.OneOffMaximumAcquiredEntryCost == input.OneOffMaximumAcquiredEntryCost ||
                    (this.OneOffMaximumAcquiredEntryCost != null &&
                    this.OneOffMaximumAcquiredEntryCost.Equals(input.OneOffMaximumAcquiredEntryCost))
                ) && 
                (
                    this.OneOffMaximumExitCost == input.OneOffMaximumExitCost ||
                    (this.OneOffMaximumExitCost != null &&
                    this.OneOffMaximumExitCost.Equals(input.OneOffMaximumExitCost))
                ) && 
                (
                    this.OneOffMaximumAcquiredExitCost == input.OneOffMaximumAcquiredExitCost ||
                    (this.OneOffMaximumAcquiredExitCost != null &&
                    this.OneOffMaximumAcquiredExitCost.Equals(input.OneOffMaximumAcquiredExitCost))
                ) && 
                (
                    this.OneOffTypicalExitCost == input.OneOffTypicalExitCost ||
                    (this.OneOffTypicalExitCost != null &&
                    this.OneOffTypicalExitCost.Equals(input.OneOffTypicalExitCost))
                ) && 
                (
                    this.OneOffPriorRHPExitCost == input.OneOffPriorRHPExitCost ||
                    (this.OneOffPriorRHPExitCost != null &&
                    this.OneOffPriorRHPExitCost.Equals(input.OneOffPriorRHPExitCost))
                ) && 
                (
                    this.OngoingCosts == input.OngoingCosts ||
                    (this.OngoingCosts != null &&
                    this.OngoingCosts.Equals(input.OngoingCosts))
                ) && 
                (
                    this.ManagementFee == input.ManagementFee ||
                    (this.ManagementFee != null &&
                    this.ManagementFee.Equals(input.ManagementFee))
                ) && 
                (
                    this.DistributionFee == input.DistributionFee ||
                    (this.DistributionFee != null &&
                    this.DistributionFee.Equals(input.DistributionFee))
                ) && 
                (
                    this.TransactionCosts == input.TransactionCosts ||
                    (this.TransactionCosts != null &&
                    this.TransactionCosts.Equals(input.TransactionCosts))
                ) && 
                (
                    this.IncidentalCosts == input.IncidentalCosts ||
                    (this.IncidentalCosts != null &&
                    this.IncidentalCosts.Equals(input.IncidentalCosts))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.OneOffEntryCost != null)
                {
                    hashCode = (hashCode * 59) + this.OneOffEntryCost.GetHashCode();
                }
                if (this.Italy != null)
                {
                    hashCode = (hashCode * 59) + this.Italy.GetHashCode();
                }
                if (this.OneOffMaximumAcquiredEntryCost != null)
                {
                    hashCode = (hashCode * 59) + this.OneOffMaximumAcquiredEntryCost.GetHashCode();
                }
                if (this.OneOffMaximumExitCost != null)
                {
                    hashCode = (hashCode * 59) + this.OneOffMaximumExitCost.GetHashCode();
                }
                if (this.OneOffMaximumAcquiredExitCost != null)
                {
                    hashCode = (hashCode * 59) + this.OneOffMaximumAcquiredExitCost.GetHashCode();
                }
                if (this.OneOffTypicalExitCost != null)
                {
                    hashCode = (hashCode * 59) + this.OneOffTypicalExitCost.GetHashCode();
                }
                if (this.OneOffPriorRHPExitCost != null)
                {
                    hashCode = (hashCode * 59) + this.OneOffPriorRHPExitCost.GetHashCode();
                }
                if (this.OngoingCosts != null)
                {
                    hashCode = (hashCode * 59) + this.OngoingCosts.GetHashCode();
                }
                if (this.ManagementFee != null)
                {
                    hashCode = (hashCode * 59) + this.ManagementFee.GetHashCode();
                }
                if (this.DistributionFee != null)
                {
                    hashCode = (hashCode * 59) + this.DistributionFee.GetHashCode();
                }
                if (this.TransactionCosts != null)
                {
                    hashCode = (hashCode * 59) + this.TransactionCosts.GetHashCode();
                }
                if (this.IncidentalCosts != null)
                {
                    hashCode = (hashCode * 59) + this.IncidentalCosts.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
