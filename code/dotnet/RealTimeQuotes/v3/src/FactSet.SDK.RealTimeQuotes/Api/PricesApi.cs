/*
 * Quotes API For Digital Portals
 *
 * The Quotes API combines endpoints for retrieving security end-of-day, delayed, and realtime prices with performance key figures and basic reference data on the security and market level.  The API supports over 20 different price types for each quote and comes with basic search endpoints based on security identifiers and instrument names. Market coverage is included in the *Sample Use Cases* section below.  The Digital Portal use case is focused on high-performance applications that are  * serving millions of end-users, * accessible by client browsers via the internet, * supporting subscriptions for streamed updates out-of-the-box, * typically combining a wide variety of *for Digital Portals*-APIs into a highly use-case specific solution for customers, * integrated into complex infrastructures such as existing frontend frameworks, authentication services.  All APIs labelled *for Digital Portals* have been designed for direct use by client web applications and feature extreme low latency: The average response time across all endpoints is 30 ms whereas 99% of all requests are answered in close to under 300ms.  See the [Time Series API for Digital Portals](https://developer.factset.com/api-catalog/time-series-api-digital-portals) for direct access to price histories, and the [News API for Digital Portals](https://developer.factset.com/api-catalog/news-api-digital-portals) for searching and fetching related news. 
 *
 * The version of the OpenAPI document: 3.0.0
 * Contact: api@factset.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using FactSet.SDK.RealTimeQuotes.Client;
using FactSet.SDK.RealTimeQuotes.Model;
using FactSet.SDK.Utils.Authentication;

namespace FactSet.SDK.RealTimeQuotes.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IPricesApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Most recent bid and ask prices (best bid / offer) for a notation.
        /// </summary>
        /// <remarks>
        /// Most recent bid and ask prices (best bid / offer) for a notation.  The endpoint is subscribable to provide push updates. See attribute &#x60;_subscriptionMinimalInterval&#x60; for valid update rates.
        /// </remarks>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifier"></param>
        /// <param name="identifierType"></param>
        /// <param name="quality"> (optional, default to DLY)</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="subscriptionMinimumInterval">Minimum number of milliseconds at which updates are send. (optional, default to 5000M)</param>
        /// <returns>InlineResponse20091</returns>
        InlineResponse20091 GetPricesBidAskGet(string identifier, string identifierType, string quality = default(string), List<string> attributes = default(List<string>), decimal? subscriptionMinimumInterval = default(decimal?));

        /// <summary>
        /// Most recent bid and ask prices (best bid / offer) for a notation.
        /// </summary>
        /// <remarks>
        /// Most recent bid and ask prices (best bid / offer) for a notation.  The endpoint is subscribable to provide push updates. See attribute &#x60;_subscriptionMinimalInterval&#x60; for valid update rates.
        /// </remarks>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifier"></param>
        /// <param name="identifierType"></param>
        /// <param name="quality"> (optional, default to DLY)</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="subscriptionMinimumInterval">Minimum number of milliseconds at which updates are send. (optional, default to 5000M)</param>
        /// <returns>ApiResponse of InlineResponse20091</returns>
        ApiResponse<InlineResponse20091> GetPricesBidAskGetWithHttpInfo(string identifier, string identifierType, string quality = default(string), List<string> attributes = default(List<string>), decimal? subscriptionMinimumInterval = default(decimal?));
        /// <summary>
        /// Most recent bid and ask prices (best bid / offer) for a list of notations.
        /// </summary>
        /// <remarks>
        /// Most recent bid and ask prices (best bid / offer) for a list of notations.
        /// </remarks>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifiers"></param>
        /// <param name="identifierType"></param>
        /// <param name="quality"> (optional, default to DLY)</param>
        /// <param name="sameQuality"> (optional, default to true)</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <returns>InlineResponse20092</returns>
        InlineResponse20092 GetPricesBidAskList(List<string> identifiers, string identifierType, string quality = default(string), bool? sameQuality = default(bool?), List<string> attributes = default(List<string>));

        /// <summary>
        /// Most recent bid and ask prices (best bid / offer) for a list of notations.
        /// </summary>
        /// <remarks>
        /// Most recent bid and ask prices (best bid / offer) for a list of notations.
        /// </remarks>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifiers"></param>
        /// <param name="identifierType"></param>
        /// <param name="quality"> (optional, default to DLY)</param>
        /// <param name="sameQuality"> (optional, default to true)</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <returns>ApiResponse of InlineResponse20092</returns>
        ApiResponse<InlineResponse20092> GetPricesBidAskListWithHttpInfo(List<string> identifiers, string identifierType, string quality = default(string), bool? sameQuality = default(bool?), List<string> attributes = default(List<string>));
        /// <summary>
        /// Overview of trading on the most recent trading day, including the latest price, for a notation.
        /// </summary>
        /// <remarks>
        /// Overview of trading on the most recent trading day, including the latest price, for a notation.  The endpoint is subscribable to provide push updates. See attribute &#x60;_subscriptionMinimalInterval&#x60; for valid update rates.
        /// </remarks>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifier"></param>
        /// <param name="identifierType"></param>
        /// <param name="quality"> (optional, default to DLY)</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="subscriptionMinimumInterval">Minimum number of milliseconds at which updates are sent. (optional, default to 5000M)</param>
        /// <returns>InlineResponse20089</returns>
        InlineResponse20089 GetPricesGet(string identifier, string identifierType, string quality = default(string), List<string> attributes = default(List<string>), decimal? subscriptionMinimumInterval = default(decimal?));

        /// <summary>
        /// Overview of trading on the most recent trading day, including the latest price, for a notation.
        /// </summary>
        /// <remarks>
        /// Overview of trading on the most recent trading day, including the latest price, for a notation.  The endpoint is subscribable to provide push updates. See attribute &#x60;_subscriptionMinimalInterval&#x60; for valid update rates.
        /// </remarks>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifier"></param>
        /// <param name="identifierType"></param>
        /// <param name="quality"> (optional, default to DLY)</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="subscriptionMinimumInterval">Minimum number of milliseconds at which updates are sent. (optional, default to 5000M)</param>
        /// <returns>ApiResponse of InlineResponse20089</returns>
        ApiResponse<InlineResponse20089> GetPricesGetWithHttpInfo(string identifier, string identifierType, string quality = default(string), List<string> attributes = default(List<string>), decimal? subscriptionMinimumInterval = default(decimal?));
        /// <summary>
        /// Overview of trading on the most recent trading day, including the latest price, for a list of notations.
        /// </summary>
        /// <remarks>
        /// Overview of trading on the most recent trading day, including the latest price, for a list of notations.
        /// </remarks>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifiers"></param>
        /// <param name="identifierType"></param>
        /// <param name="quality"> (optional, default to DLY)</param>
        /// <param name="sameQuality"> (optional, default to true)</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <returns>InlineResponse20090</returns>
        InlineResponse20090 GetPricesList(List<string> identifiers, string identifierType, string quality = default(string), bool? sameQuality = default(bool?), List<string> attributes = default(List<string>));

        /// <summary>
        /// Overview of trading on the most recent trading day, including the latest price, for a list of notations.
        /// </summary>
        /// <remarks>
        /// Overview of trading on the most recent trading day, including the latest price, for a list of notations.
        /// </remarks>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifiers"></param>
        /// <param name="identifierType"></param>
        /// <param name="quality"> (optional, default to DLY)</param>
        /// <param name="sameQuality"> (optional, default to true)</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <returns>ApiResponse of InlineResponse20090</returns>
        ApiResponse<InlineResponse20090> GetPricesListWithHttpInfo(List<string> identifiers, string identifierType, string quality = default(string), bool? sameQuality = default(bool?), List<string> attributes = default(List<string>));
        /// <summary>
        /// Orderbook aggregated by price.
        /// </summary>
        /// <remarks>
        /// Orderbook aggregated by price.
        /// </remarks>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifier"></param>
        /// <param name="identifierType"></param>
        /// <param name="quality"> (optional, default to RLT)</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="subscriptionMinimumInterval">Non-negative number of milliseconds to throttle the update rate. (optional, default to 5000M)</param>
        /// <returns>InlineResponse20093</returns>
        InlineResponse20093 GetPricesOrderbookAggregatedGet(string identifier, string identifierType, string quality = default(string), List<string> attributes = default(List<string>), decimal? subscriptionMinimumInterval = default(decimal?));

        /// <summary>
        /// Orderbook aggregated by price.
        /// </summary>
        /// <remarks>
        /// Orderbook aggregated by price.
        /// </remarks>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifier"></param>
        /// <param name="identifierType"></param>
        /// <param name="quality"> (optional, default to RLT)</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="subscriptionMinimumInterval">Non-negative number of milliseconds to throttle the update rate. (optional, default to 5000M)</param>
        /// <returns>ApiResponse of InlineResponse20093</returns>
        ApiResponse<InlineResponse20093> GetPricesOrderbookAggregatedGetWithHttpInfo(string identifier, string identifierType, string quality = default(string), List<string> attributes = default(List<string>), decimal? subscriptionMinimumInterval = default(decimal?));
        /// <summary>
        /// Full orderbook
        /// </summary>
        /// <remarks>
        /// Full orderbook
        /// </remarks>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifier"></param>
        /// <param name="identifierType"></param>
        /// <param name="quality"> (optional, default to RLT)</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="subscriptionMinimumInterval">Non-negative number of milliseconds to throttle the update rate. (optional, default to 5000M)</param>
        /// <returns>InlineResponse20094</returns>
        InlineResponse20094 GetPricesOrderbookFullGet(string identifier, string identifierType, string quality = default(string), List<string> attributes = default(List<string>), decimal? subscriptionMinimumInterval = default(decimal?));

        /// <summary>
        /// Full orderbook
        /// </summary>
        /// <remarks>
        /// Full orderbook
        /// </remarks>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifier"></param>
        /// <param name="identifierType"></param>
        /// <param name="quality"> (optional, default to RLT)</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="subscriptionMinimumInterval">Non-negative number of milliseconds to throttle the update rate. (optional, default to 5000M)</param>
        /// <returns>ApiResponse of InlineResponse20094</returns>
        ApiResponse<InlineResponse20094> GetPricesOrderbookFullGetWithHttpInfo(string identifier, string identifierType, string quality = default(string), List<string> attributes = default(List<string>), decimal? subscriptionMinimumInterval = default(decimal?));
        /// <summary>
        /// Trading schedule event types.
        /// </summary>
        /// <remarks>
        /// Trading schedule event types define the events which may occur during any period of trading. Types of trading schedule events are for instance OPEN, CLOSE, END_OF_DAY.
        /// </remarks>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <returns>InlineResponse20096</returns>
        InlineResponse20096 GetPricesTradingScheduleEventTypeList(List<string> attributes = default(List<string>));

        /// <summary>
        /// Trading schedule event types.
        /// </summary>
        /// <remarks>
        /// Trading schedule event types define the events which may occur during any period of trading. Types of trading schedule events are for instance OPEN, CLOSE, END_OF_DAY.
        /// </remarks>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <returns>ApiResponse of InlineResponse20096</returns>
        ApiResponse<InlineResponse20096> GetPricesTradingScheduleEventTypeListWithHttpInfo(List<string> attributes = default(List<string>));
        /// <summary>
        /// Sequence of market-related events.
        /// </summary>
        /// <remarks>
        /// Sequence of market-related events like the opening time or closing time of a market of a specific notation.&lt;br&gt;&lt;br&gt;Pagination to a previous page is not supported and &#x60;pagination.previous&#x60; is always &#x60;null&#x60;.
        /// </remarks>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postPricesTradingScheduleEventListRequest">Request Body</param>
        /// <returns>InlineResponse20095</returns>
        InlineResponse20095 PostPricesTradingScheduleEventList(PostPricesTradingScheduleEventListRequest postPricesTradingScheduleEventListRequest);

        /// <summary>
        /// Sequence of market-related events.
        /// </summary>
        /// <remarks>
        /// Sequence of market-related events like the opening time or closing time of a market of a specific notation.&lt;br&gt;&lt;br&gt;Pagination to a previous page is not supported and &#x60;pagination.previous&#x60; is always &#x60;null&#x60;.
        /// </remarks>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postPricesTradingScheduleEventListRequest">Request Body</param>
        /// <returns>ApiResponse of InlineResponse20095</returns>
        ApiResponse<InlineResponse20095> PostPricesTradingScheduleEventListWithHttpInfo(PostPricesTradingScheduleEventListRequest postPricesTradingScheduleEventListRequest);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IPricesApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Most recent bid and ask prices (best bid / offer) for a notation.
        /// </summary>
        /// <remarks>
        /// Most recent bid and ask prices (best bid / offer) for a notation.  The endpoint is subscribable to provide push updates. See attribute &#x60;_subscriptionMinimalInterval&#x60; for valid update rates.
        /// </remarks>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifier"></param>
        /// <param name="identifierType"></param>
        /// <param name="quality"> (optional, default to DLY)</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="subscriptionMinimumInterval">Minimum number of milliseconds at which updates are send. (optional, default to 5000M)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse20091</returns>
        System.Threading.Tasks.Task<InlineResponse20091> GetPricesBidAskGetAsync(string identifier, string identifierType, string quality = default(string), List<string> attributes = default(List<string>), decimal? subscriptionMinimumInterval = default(decimal?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Most recent bid and ask prices (best bid / offer) for a notation.
        /// </summary>
        /// <remarks>
        /// Most recent bid and ask prices (best bid / offer) for a notation.  The endpoint is subscribable to provide push updates. See attribute &#x60;_subscriptionMinimalInterval&#x60; for valid update rates.
        /// </remarks>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifier"></param>
        /// <param name="identifierType"></param>
        /// <param name="quality"> (optional, default to DLY)</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="subscriptionMinimumInterval">Minimum number of milliseconds at which updates are send. (optional, default to 5000M)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse20091)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20091>> GetPricesBidAskGetWithHttpInfoAsync(string identifier, string identifierType, string quality = default(string), List<string> attributes = default(List<string>), decimal? subscriptionMinimumInterval = default(decimal?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Most recent bid and ask prices (best bid / offer) for a list of notations.
        /// </summary>
        /// <remarks>
        /// Most recent bid and ask prices (best bid / offer) for a list of notations.
        /// </remarks>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifiers"></param>
        /// <param name="identifierType"></param>
        /// <param name="quality"> (optional, default to DLY)</param>
        /// <param name="sameQuality"> (optional, default to true)</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse20092</returns>
        System.Threading.Tasks.Task<InlineResponse20092> GetPricesBidAskListAsync(List<string> identifiers, string identifierType, string quality = default(string), bool? sameQuality = default(bool?), List<string> attributes = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Most recent bid and ask prices (best bid / offer) for a list of notations.
        /// </summary>
        /// <remarks>
        /// Most recent bid and ask prices (best bid / offer) for a list of notations.
        /// </remarks>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifiers"></param>
        /// <param name="identifierType"></param>
        /// <param name="quality"> (optional, default to DLY)</param>
        /// <param name="sameQuality"> (optional, default to true)</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse20092)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20092>> GetPricesBidAskListWithHttpInfoAsync(List<string> identifiers, string identifierType, string quality = default(string), bool? sameQuality = default(bool?), List<string> attributes = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Overview of trading on the most recent trading day, including the latest price, for a notation.
        /// </summary>
        /// <remarks>
        /// Overview of trading on the most recent trading day, including the latest price, for a notation.  The endpoint is subscribable to provide push updates. See attribute &#x60;_subscriptionMinimalInterval&#x60; for valid update rates.
        /// </remarks>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifier"></param>
        /// <param name="identifierType"></param>
        /// <param name="quality"> (optional, default to DLY)</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="subscriptionMinimumInterval">Minimum number of milliseconds at which updates are sent. (optional, default to 5000M)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse20089</returns>
        System.Threading.Tasks.Task<InlineResponse20089> GetPricesGetAsync(string identifier, string identifierType, string quality = default(string), List<string> attributes = default(List<string>), decimal? subscriptionMinimumInterval = default(decimal?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Overview of trading on the most recent trading day, including the latest price, for a notation.
        /// </summary>
        /// <remarks>
        /// Overview of trading on the most recent trading day, including the latest price, for a notation.  The endpoint is subscribable to provide push updates. See attribute &#x60;_subscriptionMinimalInterval&#x60; for valid update rates.
        /// </remarks>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifier"></param>
        /// <param name="identifierType"></param>
        /// <param name="quality"> (optional, default to DLY)</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="subscriptionMinimumInterval">Minimum number of milliseconds at which updates are sent. (optional, default to 5000M)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse20089)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20089>> GetPricesGetWithHttpInfoAsync(string identifier, string identifierType, string quality = default(string), List<string> attributes = default(List<string>), decimal? subscriptionMinimumInterval = default(decimal?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Overview of trading on the most recent trading day, including the latest price, for a list of notations.
        /// </summary>
        /// <remarks>
        /// Overview of trading on the most recent trading day, including the latest price, for a list of notations.
        /// </remarks>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifiers"></param>
        /// <param name="identifierType"></param>
        /// <param name="quality"> (optional, default to DLY)</param>
        /// <param name="sameQuality"> (optional, default to true)</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse20090</returns>
        System.Threading.Tasks.Task<InlineResponse20090> GetPricesListAsync(List<string> identifiers, string identifierType, string quality = default(string), bool? sameQuality = default(bool?), List<string> attributes = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Overview of trading on the most recent trading day, including the latest price, for a list of notations.
        /// </summary>
        /// <remarks>
        /// Overview of trading on the most recent trading day, including the latest price, for a list of notations.
        /// </remarks>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifiers"></param>
        /// <param name="identifierType"></param>
        /// <param name="quality"> (optional, default to DLY)</param>
        /// <param name="sameQuality"> (optional, default to true)</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse20090)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20090>> GetPricesListWithHttpInfoAsync(List<string> identifiers, string identifierType, string quality = default(string), bool? sameQuality = default(bool?), List<string> attributes = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Orderbook aggregated by price.
        /// </summary>
        /// <remarks>
        /// Orderbook aggregated by price.
        /// </remarks>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifier"></param>
        /// <param name="identifierType"></param>
        /// <param name="quality"> (optional, default to RLT)</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="subscriptionMinimumInterval">Non-negative number of milliseconds to throttle the update rate. (optional, default to 5000M)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse20093</returns>
        System.Threading.Tasks.Task<InlineResponse20093> GetPricesOrderbookAggregatedGetAsync(string identifier, string identifierType, string quality = default(string), List<string> attributes = default(List<string>), decimal? subscriptionMinimumInterval = default(decimal?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Orderbook aggregated by price.
        /// </summary>
        /// <remarks>
        /// Orderbook aggregated by price.
        /// </remarks>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifier"></param>
        /// <param name="identifierType"></param>
        /// <param name="quality"> (optional, default to RLT)</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="subscriptionMinimumInterval">Non-negative number of milliseconds to throttle the update rate. (optional, default to 5000M)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse20093)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20093>> GetPricesOrderbookAggregatedGetWithHttpInfoAsync(string identifier, string identifierType, string quality = default(string), List<string> attributes = default(List<string>), decimal? subscriptionMinimumInterval = default(decimal?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Full orderbook
        /// </summary>
        /// <remarks>
        /// Full orderbook
        /// </remarks>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifier"></param>
        /// <param name="identifierType"></param>
        /// <param name="quality"> (optional, default to RLT)</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="subscriptionMinimumInterval">Non-negative number of milliseconds to throttle the update rate. (optional, default to 5000M)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse20094</returns>
        System.Threading.Tasks.Task<InlineResponse20094> GetPricesOrderbookFullGetAsync(string identifier, string identifierType, string quality = default(string), List<string> attributes = default(List<string>), decimal? subscriptionMinimumInterval = default(decimal?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Full orderbook
        /// </summary>
        /// <remarks>
        /// Full orderbook
        /// </remarks>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifier"></param>
        /// <param name="identifierType"></param>
        /// <param name="quality"> (optional, default to RLT)</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="subscriptionMinimumInterval">Non-negative number of milliseconds to throttle the update rate. (optional, default to 5000M)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse20094)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20094>> GetPricesOrderbookFullGetWithHttpInfoAsync(string identifier, string identifierType, string quality = default(string), List<string> attributes = default(List<string>), decimal? subscriptionMinimumInterval = default(decimal?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Trading schedule event types.
        /// </summary>
        /// <remarks>
        /// Trading schedule event types define the events which may occur during any period of trading. Types of trading schedule events are for instance OPEN, CLOSE, END_OF_DAY.
        /// </remarks>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse20096</returns>
        System.Threading.Tasks.Task<InlineResponse20096> GetPricesTradingScheduleEventTypeListAsync(List<string> attributes = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Trading schedule event types.
        /// </summary>
        /// <remarks>
        /// Trading schedule event types define the events which may occur during any period of trading. Types of trading schedule events are for instance OPEN, CLOSE, END_OF_DAY.
        /// </remarks>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse20096)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20096>> GetPricesTradingScheduleEventTypeListWithHttpInfoAsync(List<string> attributes = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Sequence of market-related events.
        /// </summary>
        /// <remarks>
        /// Sequence of market-related events like the opening time or closing time of a market of a specific notation.&lt;br&gt;&lt;br&gt;Pagination to a previous page is not supported and &#x60;pagination.previous&#x60; is always &#x60;null&#x60;.
        /// </remarks>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postPricesTradingScheduleEventListRequest">Request Body</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse20095</returns>
        System.Threading.Tasks.Task<InlineResponse20095> PostPricesTradingScheduleEventListAsync(PostPricesTradingScheduleEventListRequest postPricesTradingScheduleEventListRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Sequence of market-related events.
        /// </summary>
        /// <remarks>
        /// Sequence of market-related events like the opening time or closing time of a market of a specific notation.&lt;br&gt;&lt;br&gt;Pagination to a previous page is not supported and &#x60;pagination.previous&#x60; is always &#x60;null&#x60;.
        /// </remarks>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postPricesTradingScheduleEventListRequest">Request Body</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse20095)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20095>> PostPricesTradingScheduleEventListWithHttpInfoAsync(PostPricesTradingScheduleEventListRequest postPricesTradingScheduleEventListRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IPricesApi : IPricesApiSync, IPricesApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class PricesApi : IPricesApi
    {
        private FactSet.SDK.RealTimeQuotes.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        # region Response Type Disctionaries
        
        private static readonly Dictionary<HttpStatusCode, System.Type> GetPricesBidAskGetResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)200, typeof(InlineResponse20091) },
        };

        private static readonly Dictionary<HttpStatusCode, System.Type> GetPricesBidAskListResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)200, typeof(InlineResponse20092) },
        };

        private static readonly Dictionary<HttpStatusCode, System.Type> GetPricesGetResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)200, typeof(InlineResponse20089) },
        };

        private static readonly Dictionary<HttpStatusCode, System.Type> GetPricesListResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)200, typeof(InlineResponse20090) },
        };

        private static readonly Dictionary<HttpStatusCode, System.Type> GetPricesOrderbookAggregatedGetResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)200, typeof(InlineResponse20093) },
        };

        private static readonly Dictionary<HttpStatusCode, System.Type> GetPricesOrderbookFullGetResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)200, typeof(InlineResponse20094) },
        };

        private static readonly Dictionary<HttpStatusCode, System.Type> GetPricesTradingScheduleEventTypeListResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)200, typeof(InlineResponse20096) },
        };

        private static readonly Dictionary<HttpStatusCode, System.Type> PostPricesTradingScheduleEventListResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)200, typeof(InlineResponse20095) },
        };

        # endregion Response Type Disctionaries

        # region Api Response Objects
        

        # endregion Api Response Objects

        /// <summary>
        /// Initializes a new instance of the <see cref="PricesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public PricesApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PricesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public PricesApi(string basePath)
        {
            this.Configuration = FactSet.SDK.RealTimeQuotes.Client.Configuration.MergeConfigurations(
                FactSet.SDK.RealTimeQuotes.Client.GlobalConfiguration.Instance,
                new FactSet.SDK.RealTimeQuotes.Client.Configuration { BasePath = basePath }
            );
            this.Client = new FactSet.SDK.RealTimeQuotes.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new FactSet.SDK.RealTimeQuotes.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = FactSet.SDK.RealTimeQuotes.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PricesApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public PricesApi(FactSet.SDK.RealTimeQuotes.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = FactSet.SDK.RealTimeQuotes.Client.Configuration.MergeConfigurations(
                FactSet.SDK.RealTimeQuotes.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new FactSet.SDK.RealTimeQuotes.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new FactSet.SDK.RealTimeQuotes.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = FactSet.SDK.RealTimeQuotes.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PricesApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public PricesApi(FactSet.SDK.RealTimeQuotes.Client.ISynchronousClient client, FactSet.SDK.RealTimeQuotes.Client.IAsynchronousClient asyncClient, FactSet.SDK.RealTimeQuotes.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = FactSet.SDK.RealTimeQuotes.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public FactSet.SDK.RealTimeQuotes.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public FactSet.SDK.RealTimeQuotes.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public FactSet.SDK.RealTimeQuotes.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public FactSet.SDK.RealTimeQuotes.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Most recent bid and ask prices (best bid / offer) for a notation. Most recent bid and ask prices (best bid / offer) for a notation.  The endpoint is subscribable to provide push updates. See attribute &#x60;_subscriptionMinimalInterval&#x60; for valid update rates.
        /// </summary>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifier"></param>
        /// <param name="identifierType"></param>
        /// <param name="quality"> (optional, default to DLY)</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="subscriptionMinimumInterval">Minimum number of milliseconds at which updates are send. (optional, default to 5000M)</param>
        /// <returns>InlineResponse20091</returns>
        public InlineResponse20091 GetPricesBidAskGet(string identifier, string identifierType, string quality = default(string), List<string> attributes = default(List<string>), decimal? subscriptionMinimumInterval = default(decimal?))
        {
            var localVarResponse = GetPricesBidAskGetWithHttpInfo(identifier, identifierType, quality, attributes, subscriptionMinimumInterval);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Most recent bid and ask prices (best bid / offer) for a notation. Most recent bid and ask prices (best bid / offer) for a notation.  The endpoint is subscribable to provide push updates. See attribute &#x60;_subscriptionMinimalInterval&#x60; for valid update rates.
        /// </summary>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifier"></param>
        /// <param name="identifierType"></param>
        /// <param name="quality"> (optional, default to DLY)</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="subscriptionMinimumInterval">Minimum number of milliseconds at which updates are send. (optional, default to 5000M)</param>
        /// <returns>ApiResponse of InlineResponse20091</returns>
        public ApiResponse<InlineResponse20091> GetPricesBidAskGetWithHttpInfo(string identifier, string identifierType, string quality = default(string), List<string> attributes = default(List<string>), decimal? subscriptionMinimumInterval = default(decimal?))
        {
            // verify the required parameter 'identifier' is set
            if (identifier == null)
            {
                throw new FactSet.SDK.RealTimeQuotes.Client.ApiException(400, "Missing required parameter 'identifier' when calling PricesApi->GetPricesBidAskGet");
            }

            // verify the required parameter 'identifierType' is set
            if (identifierType == null)
            {
                throw new FactSet.SDK.RealTimeQuotes.Client.ApiException(400, "Missing required parameter 'identifierType' when calling PricesApi->GetPricesBidAskGet");
            }

            FactSet.SDK.RealTimeQuotes.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.RealTimeQuotes.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.RealTimeQuotes.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.RealTimeQuotes.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeQuotes.Client.ClientUtils.ParameterToMultiMap("", "identifier", identifier));
            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeQuotes.Client.ClientUtils.ParameterToMultiMap("", "identifierType", identifierType));
            if (quality != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeQuotes.Client.ClientUtils.ParameterToMultiMap("", "quality", quality));
            }
            if (attributes != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeQuotes.Client.ClientUtils.ParameterToMultiMap("csv", "_attributes", attributes));
            }
            if (subscriptionMinimumInterval != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeQuotes.Client.ClientUtils.ParameterToMultiMap("", "_subscriptionMinimumInterval", subscriptionMinimumInterval));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.RealTimeQuotes.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = GetPricesBidAskGetResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Get<
            InlineResponse20091>("/prices/bidAsk/get", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetPricesBidAskGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// Most recent bid and ask prices (best bid / offer) for a notation. Most recent bid and ask prices (best bid / offer) for a notation.  The endpoint is subscribable to provide push updates. See attribute &#x60;_subscriptionMinimalInterval&#x60; for valid update rates.
        /// </summary>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifier"></param>
        /// <param name="identifierType"></param>
        /// <param name="quality"> (optional, default to DLY)</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="subscriptionMinimumInterval">Minimum number of milliseconds at which updates are send. (optional, default to 5000M)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse20091</returns>
        public async System.Threading.Tasks.Task<InlineResponse20091>GetPricesBidAskGetAsync(string identifier, string identifierType, string quality = default(string), List<string> attributes = default(List<string>), decimal? subscriptionMinimumInterval = default(decimal?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await GetPricesBidAskGetWithHttpInfoAsync(identifier, identifierType, quality, attributes, subscriptionMinimumInterval, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Most recent bid and ask prices (best bid / offer) for a notation. Most recent bid and ask prices (best bid / offer) for a notation.  The endpoint is subscribable to provide push updates. See attribute &#x60;_subscriptionMinimalInterval&#x60; for valid update rates.
        /// </summary>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifier"></param>
        /// <param name="identifierType"></param>
        /// <param name="quality"> (optional, default to DLY)</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="subscriptionMinimumInterval">Minimum number of milliseconds at which updates are send. (optional, default to 5000M)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse20091)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20091>> GetPricesBidAskGetWithHttpInfoAsync(string identifier, string identifierType, string quality = default(string), List<string> attributes = default(List<string>), decimal? subscriptionMinimumInterval = default(decimal?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'identifier' is set
            if (identifier == null)
            {
                throw new FactSet.SDK.RealTimeQuotes.Client.ApiException(400, "Missing required parameter 'identifier' when calling PricesApi->GetPricesBidAskGet");
            }

            // verify the required parameter 'identifierType' is set
            if (identifierType == null)
            {
                throw new FactSet.SDK.RealTimeQuotes.Client.ApiException(400, "Missing required parameter 'identifierType' when calling PricesApi->GetPricesBidAskGet");
            }


            FactSet.SDK.RealTimeQuotes.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.RealTimeQuotes.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.RealTimeQuotes.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.RealTimeQuotes.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeQuotes.Client.ClientUtils.ParameterToMultiMap("", "identifier", identifier));
            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeQuotes.Client.ClientUtils.ParameterToMultiMap("", "identifierType", identifierType));
            if (quality != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeQuotes.Client.ClientUtils.ParameterToMultiMap("", "quality", quality));
            }
            if (attributes != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeQuotes.Client.ClientUtils.ParameterToMultiMap("csv", "_attributes", attributes));
            }
            if (subscriptionMinimumInterval != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeQuotes.Client.ClientUtils.ParameterToMultiMap("", "_subscriptionMinimumInterval", subscriptionMinimumInterval));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.RealTimeQuotes.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = GetPricesBidAskGetResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<InlineResponse20091>("/prices/bidAsk/get", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetPricesBidAskGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Most recent bid and ask prices (best bid / offer) for a list of notations. Most recent bid and ask prices (best bid / offer) for a list of notations.
        /// </summary>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifiers"></param>
        /// <param name="identifierType"></param>
        /// <param name="quality"> (optional, default to DLY)</param>
        /// <param name="sameQuality"> (optional, default to true)</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <returns>InlineResponse20092</returns>
        public InlineResponse20092 GetPricesBidAskList(List<string> identifiers, string identifierType, string quality = default(string), bool? sameQuality = default(bool?), List<string> attributes = default(List<string>))
        {
            var localVarResponse = GetPricesBidAskListWithHttpInfo(identifiers, identifierType, quality, sameQuality, attributes);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Most recent bid and ask prices (best bid / offer) for a list of notations. Most recent bid and ask prices (best bid / offer) for a list of notations.
        /// </summary>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifiers"></param>
        /// <param name="identifierType"></param>
        /// <param name="quality"> (optional, default to DLY)</param>
        /// <param name="sameQuality"> (optional, default to true)</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <returns>ApiResponse of InlineResponse20092</returns>
        public ApiResponse<InlineResponse20092> GetPricesBidAskListWithHttpInfo(List<string> identifiers, string identifierType, string quality = default(string), bool? sameQuality = default(bool?), List<string> attributes = default(List<string>))
        {
            // verify the required parameter 'identifiers' is set
            if (identifiers == null)
            {
                throw new FactSet.SDK.RealTimeQuotes.Client.ApiException(400, "Missing required parameter 'identifiers' when calling PricesApi->GetPricesBidAskList");
            }

            // verify the required parameter 'identifierType' is set
            if (identifierType == null)
            {
                throw new FactSet.SDK.RealTimeQuotes.Client.ApiException(400, "Missing required parameter 'identifierType' when calling PricesApi->GetPricesBidAskList");
            }

            FactSet.SDK.RealTimeQuotes.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.RealTimeQuotes.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.RealTimeQuotes.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.RealTimeQuotes.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeQuotes.Client.ClientUtils.ParameterToMultiMap("csv", "identifiers", identifiers));
            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeQuotes.Client.ClientUtils.ParameterToMultiMap("", "identifierType", identifierType));
            if (quality != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeQuotes.Client.ClientUtils.ParameterToMultiMap("", "quality", quality));
            }
            if (sameQuality != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeQuotes.Client.ClientUtils.ParameterToMultiMap("", "sameQuality", sameQuality));
            }
            if (attributes != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeQuotes.Client.ClientUtils.ParameterToMultiMap("csv", "_attributes", attributes));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.RealTimeQuotes.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = GetPricesBidAskListResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Get<
            InlineResponse20092>("/prices/bidAsk/list", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetPricesBidAskList", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// Most recent bid and ask prices (best bid / offer) for a list of notations. Most recent bid and ask prices (best bid / offer) for a list of notations.
        /// </summary>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifiers"></param>
        /// <param name="identifierType"></param>
        /// <param name="quality"> (optional, default to DLY)</param>
        /// <param name="sameQuality"> (optional, default to true)</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse20092</returns>
        public async System.Threading.Tasks.Task<InlineResponse20092>GetPricesBidAskListAsync(List<string> identifiers, string identifierType, string quality = default(string), bool? sameQuality = default(bool?), List<string> attributes = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await GetPricesBidAskListWithHttpInfoAsync(identifiers, identifierType, quality, sameQuality, attributes, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Most recent bid and ask prices (best bid / offer) for a list of notations. Most recent bid and ask prices (best bid / offer) for a list of notations.
        /// </summary>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifiers"></param>
        /// <param name="identifierType"></param>
        /// <param name="quality"> (optional, default to DLY)</param>
        /// <param name="sameQuality"> (optional, default to true)</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse20092)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20092>> GetPricesBidAskListWithHttpInfoAsync(List<string> identifiers, string identifierType, string quality = default(string), bool? sameQuality = default(bool?), List<string> attributes = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'identifiers' is set
            if (identifiers == null)
            {
                throw new FactSet.SDK.RealTimeQuotes.Client.ApiException(400, "Missing required parameter 'identifiers' when calling PricesApi->GetPricesBidAskList");
            }

            // verify the required parameter 'identifierType' is set
            if (identifierType == null)
            {
                throw new FactSet.SDK.RealTimeQuotes.Client.ApiException(400, "Missing required parameter 'identifierType' when calling PricesApi->GetPricesBidAskList");
            }


            FactSet.SDK.RealTimeQuotes.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.RealTimeQuotes.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.RealTimeQuotes.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.RealTimeQuotes.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeQuotes.Client.ClientUtils.ParameterToMultiMap("csv", "identifiers", identifiers));
            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeQuotes.Client.ClientUtils.ParameterToMultiMap("", "identifierType", identifierType));
            if (quality != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeQuotes.Client.ClientUtils.ParameterToMultiMap("", "quality", quality));
            }
            if (sameQuality != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeQuotes.Client.ClientUtils.ParameterToMultiMap("", "sameQuality", sameQuality));
            }
            if (attributes != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeQuotes.Client.ClientUtils.ParameterToMultiMap("csv", "_attributes", attributes));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.RealTimeQuotes.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = GetPricesBidAskListResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<InlineResponse20092>("/prices/bidAsk/list", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetPricesBidAskList", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Overview of trading on the most recent trading day, including the latest price, for a notation. Overview of trading on the most recent trading day, including the latest price, for a notation.  The endpoint is subscribable to provide push updates. See attribute &#x60;_subscriptionMinimalInterval&#x60; for valid update rates.
        /// </summary>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifier"></param>
        /// <param name="identifierType"></param>
        /// <param name="quality"> (optional, default to DLY)</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="subscriptionMinimumInterval">Minimum number of milliseconds at which updates are sent. (optional, default to 5000M)</param>
        /// <returns>InlineResponse20089</returns>
        public InlineResponse20089 GetPricesGet(string identifier, string identifierType, string quality = default(string), List<string> attributes = default(List<string>), decimal? subscriptionMinimumInterval = default(decimal?))
        {
            var localVarResponse = GetPricesGetWithHttpInfo(identifier, identifierType, quality, attributes, subscriptionMinimumInterval);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Overview of trading on the most recent trading day, including the latest price, for a notation. Overview of trading on the most recent trading day, including the latest price, for a notation.  The endpoint is subscribable to provide push updates. See attribute &#x60;_subscriptionMinimalInterval&#x60; for valid update rates.
        /// </summary>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifier"></param>
        /// <param name="identifierType"></param>
        /// <param name="quality"> (optional, default to DLY)</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="subscriptionMinimumInterval">Minimum number of milliseconds at which updates are sent. (optional, default to 5000M)</param>
        /// <returns>ApiResponse of InlineResponse20089</returns>
        public ApiResponse<InlineResponse20089> GetPricesGetWithHttpInfo(string identifier, string identifierType, string quality = default(string), List<string> attributes = default(List<string>), decimal? subscriptionMinimumInterval = default(decimal?))
        {
            // verify the required parameter 'identifier' is set
            if (identifier == null)
            {
                throw new FactSet.SDK.RealTimeQuotes.Client.ApiException(400, "Missing required parameter 'identifier' when calling PricesApi->GetPricesGet");
            }

            // verify the required parameter 'identifierType' is set
            if (identifierType == null)
            {
                throw new FactSet.SDK.RealTimeQuotes.Client.ApiException(400, "Missing required parameter 'identifierType' when calling PricesApi->GetPricesGet");
            }

            FactSet.SDK.RealTimeQuotes.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.RealTimeQuotes.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.RealTimeQuotes.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.RealTimeQuotes.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeQuotes.Client.ClientUtils.ParameterToMultiMap("", "identifier", identifier));
            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeQuotes.Client.ClientUtils.ParameterToMultiMap("", "identifierType", identifierType));
            if (quality != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeQuotes.Client.ClientUtils.ParameterToMultiMap("", "quality", quality));
            }
            if (attributes != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeQuotes.Client.ClientUtils.ParameterToMultiMap("csv", "_attributes", attributes));
            }
            if (subscriptionMinimumInterval != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeQuotes.Client.ClientUtils.ParameterToMultiMap("", "_subscriptionMinimumInterval", subscriptionMinimumInterval));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.RealTimeQuotes.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = GetPricesGetResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Get<
            InlineResponse20089>("/prices/get", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetPricesGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// Overview of trading on the most recent trading day, including the latest price, for a notation. Overview of trading on the most recent trading day, including the latest price, for a notation.  The endpoint is subscribable to provide push updates. See attribute &#x60;_subscriptionMinimalInterval&#x60; for valid update rates.
        /// </summary>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifier"></param>
        /// <param name="identifierType"></param>
        /// <param name="quality"> (optional, default to DLY)</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="subscriptionMinimumInterval">Minimum number of milliseconds at which updates are sent. (optional, default to 5000M)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse20089</returns>
        public async System.Threading.Tasks.Task<InlineResponse20089>GetPricesGetAsync(string identifier, string identifierType, string quality = default(string), List<string> attributes = default(List<string>), decimal? subscriptionMinimumInterval = default(decimal?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await GetPricesGetWithHttpInfoAsync(identifier, identifierType, quality, attributes, subscriptionMinimumInterval, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Overview of trading on the most recent trading day, including the latest price, for a notation. Overview of trading on the most recent trading day, including the latest price, for a notation.  The endpoint is subscribable to provide push updates. See attribute &#x60;_subscriptionMinimalInterval&#x60; for valid update rates.
        /// </summary>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifier"></param>
        /// <param name="identifierType"></param>
        /// <param name="quality"> (optional, default to DLY)</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="subscriptionMinimumInterval">Minimum number of milliseconds at which updates are sent. (optional, default to 5000M)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse20089)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20089>> GetPricesGetWithHttpInfoAsync(string identifier, string identifierType, string quality = default(string), List<string> attributes = default(List<string>), decimal? subscriptionMinimumInterval = default(decimal?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'identifier' is set
            if (identifier == null)
            {
                throw new FactSet.SDK.RealTimeQuotes.Client.ApiException(400, "Missing required parameter 'identifier' when calling PricesApi->GetPricesGet");
            }

            // verify the required parameter 'identifierType' is set
            if (identifierType == null)
            {
                throw new FactSet.SDK.RealTimeQuotes.Client.ApiException(400, "Missing required parameter 'identifierType' when calling PricesApi->GetPricesGet");
            }


            FactSet.SDK.RealTimeQuotes.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.RealTimeQuotes.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.RealTimeQuotes.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.RealTimeQuotes.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeQuotes.Client.ClientUtils.ParameterToMultiMap("", "identifier", identifier));
            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeQuotes.Client.ClientUtils.ParameterToMultiMap("", "identifierType", identifierType));
            if (quality != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeQuotes.Client.ClientUtils.ParameterToMultiMap("", "quality", quality));
            }
            if (attributes != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeQuotes.Client.ClientUtils.ParameterToMultiMap("csv", "_attributes", attributes));
            }
            if (subscriptionMinimumInterval != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeQuotes.Client.ClientUtils.ParameterToMultiMap("", "_subscriptionMinimumInterval", subscriptionMinimumInterval));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.RealTimeQuotes.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = GetPricesGetResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<InlineResponse20089>("/prices/get", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetPricesGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Overview of trading on the most recent trading day, including the latest price, for a list of notations. Overview of trading on the most recent trading day, including the latest price, for a list of notations.
        /// </summary>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifiers"></param>
        /// <param name="identifierType"></param>
        /// <param name="quality"> (optional, default to DLY)</param>
        /// <param name="sameQuality"> (optional, default to true)</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <returns>InlineResponse20090</returns>
        public InlineResponse20090 GetPricesList(List<string> identifiers, string identifierType, string quality = default(string), bool? sameQuality = default(bool?), List<string> attributes = default(List<string>))
        {
            var localVarResponse = GetPricesListWithHttpInfo(identifiers, identifierType, quality, sameQuality, attributes);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Overview of trading on the most recent trading day, including the latest price, for a list of notations. Overview of trading on the most recent trading day, including the latest price, for a list of notations.
        /// </summary>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifiers"></param>
        /// <param name="identifierType"></param>
        /// <param name="quality"> (optional, default to DLY)</param>
        /// <param name="sameQuality"> (optional, default to true)</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <returns>ApiResponse of InlineResponse20090</returns>
        public ApiResponse<InlineResponse20090> GetPricesListWithHttpInfo(List<string> identifiers, string identifierType, string quality = default(string), bool? sameQuality = default(bool?), List<string> attributes = default(List<string>))
        {
            // verify the required parameter 'identifiers' is set
            if (identifiers == null)
            {
                throw new FactSet.SDK.RealTimeQuotes.Client.ApiException(400, "Missing required parameter 'identifiers' when calling PricesApi->GetPricesList");
            }

            // verify the required parameter 'identifierType' is set
            if (identifierType == null)
            {
                throw new FactSet.SDK.RealTimeQuotes.Client.ApiException(400, "Missing required parameter 'identifierType' when calling PricesApi->GetPricesList");
            }

            FactSet.SDK.RealTimeQuotes.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.RealTimeQuotes.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.RealTimeQuotes.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.RealTimeQuotes.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeQuotes.Client.ClientUtils.ParameterToMultiMap("csv", "identifiers", identifiers));
            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeQuotes.Client.ClientUtils.ParameterToMultiMap("", "identifierType", identifierType));
            if (quality != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeQuotes.Client.ClientUtils.ParameterToMultiMap("", "quality", quality));
            }
            if (sameQuality != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeQuotes.Client.ClientUtils.ParameterToMultiMap("", "sameQuality", sameQuality));
            }
            if (attributes != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeQuotes.Client.ClientUtils.ParameterToMultiMap("csv", "_attributes", attributes));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.RealTimeQuotes.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = GetPricesListResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Get<
            InlineResponse20090>("/prices/list", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetPricesList", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// Overview of trading on the most recent trading day, including the latest price, for a list of notations. Overview of trading on the most recent trading day, including the latest price, for a list of notations.
        /// </summary>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifiers"></param>
        /// <param name="identifierType"></param>
        /// <param name="quality"> (optional, default to DLY)</param>
        /// <param name="sameQuality"> (optional, default to true)</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse20090</returns>
        public async System.Threading.Tasks.Task<InlineResponse20090>GetPricesListAsync(List<string> identifiers, string identifierType, string quality = default(string), bool? sameQuality = default(bool?), List<string> attributes = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await GetPricesListWithHttpInfoAsync(identifiers, identifierType, quality, sameQuality, attributes, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Overview of trading on the most recent trading day, including the latest price, for a list of notations. Overview of trading on the most recent trading day, including the latest price, for a list of notations.
        /// </summary>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifiers"></param>
        /// <param name="identifierType"></param>
        /// <param name="quality"> (optional, default to DLY)</param>
        /// <param name="sameQuality"> (optional, default to true)</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse20090)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20090>> GetPricesListWithHttpInfoAsync(List<string> identifiers, string identifierType, string quality = default(string), bool? sameQuality = default(bool?), List<string> attributes = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'identifiers' is set
            if (identifiers == null)
            {
                throw new FactSet.SDK.RealTimeQuotes.Client.ApiException(400, "Missing required parameter 'identifiers' when calling PricesApi->GetPricesList");
            }

            // verify the required parameter 'identifierType' is set
            if (identifierType == null)
            {
                throw new FactSet.SDK.RealTimeQuotes.Client.ApiException(400, "Missing required parameter 'identifierType' when calling PricesApi->GetPricesList");
            }


            FactSet.SDK.RealTimeQuotes.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.RealTimeQuotes.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.RealTimeQuotes.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.RealTimeQuotes.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeQuotes.Client.ClientUtils.ParameterToMultiMap("csv", "identifiers", identifiers));
            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeQuotes.Client.ClientUtils.ParameterToMultiMap("", "identifierType", identifierType));
            if (quality != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeQuotes.Client.ClientUtils.ParameterToMultiMap("", "quality", quality));
            }
            if (sameQuality != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeQuotes.Client.ClientUtils.ParameterToMultiMap("", "sameQuality", sameQuality));
            }
            if (attributes != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeQuotes.Client.ClientUtils.ParameterToMultiMap("csv", "_attributes", attributes));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.RealTimeQuotes.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = GetPricesListResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<InlineResponse20090>("/prices/list", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetPricesList", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Orderbook aggregated by price. Orderbook aggregated by price.
        /// </summary>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifier"></param>
        /// <param name="identifierType"></param>
        /// <param name="quality"> (optional, default to RLT)</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="subscriptionMinimumInterval">Non-negative number of milliseconds to throttle the update rate. (optional, default to 5000M)</param>
        /// <returns>InlineResponse20093</returns>
        public InlineResponse20093 GetPricesOrderbookAggregatedGet(string identifier, string identifierType, string quality = default(string), List<string> attributes = default(List<string>), decimal? subscriptionMinimumInterval = default(decimal?))
        {
            var localVarResponse = GetPricesOrderbookAggregatedGetWithHttpInfo(identifier, identifierType, quality, attributes, subscriptionMinimumInterval);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Orderbook aggregated by price. Orderbook aggregated by price.
        /// </summary>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifier"></param>
        /// <param name="identifierType"></param>
        /// <param name="quality"> (optional, default to RLT)</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="subscriptionMinimumInterval">Non-negative number of milliseconds to throttle the update rate. (optional, default to 5000M)</param>
        /// <returns>ApiResponse of InlineResponse20093</returns>
        public ApiResponse<InlineResponse20093> GetPricesOrderbookAggregatedGetWithHttpInfo(string identifier, string identifierType, string quality = default(string), List<string> attributes = default(List<string>), decimal? subscriptionMinimumInterval = default(decimal?))
        {
            // verify the required parameter 'identifier' is set
            if (identifier == null)
            {
                throw new FactSet.SDK.RealTimeQuotes.Client.ApiException(400, "Missing required parameter 'identifier' when calling PricesApi->GetPricesOrderbookAggregatedGet");
            }

            // verify the required parameter 'identifierType' is set
            if (identifierType == null)
            {
                throw new FactSet.SDK.RealTimeQuotes.Client.ApiException(400, "Missing required parameter 'identifierType' when calling PricesApi->GetPricesOrderbookAggregatedGet");
            }

            FactSet.SDK.RealTimeQuotes.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.RealTimeQuotes.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.RealTimeQuotes.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.RealTimeQuotes.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeQuotes.Client.ClientUtils.ParameterToMultiMap("", "identifier", identifier));
            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeQuotes.Client.ClientUtils.ParameterToMultiMap("", "identifierType", identifierType));
            if (quality != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeQuotes.Client.ClientUtils.ParameterToMultiMap("", "quality", quality));
            }
            if (attributes != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeQuotes.Client.ClientUtils.ParameterToMultiMap("csv", "_attributes", attributes));
            }
            if (subscriptionMinimumInterval != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeQuotes.Client.ClientUtils.ParameterToMultiMap("", "_subscriptionMinimumInterval", subscriptionMinimumInterval));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.RealTimeQuotes.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = GetPricesOrderbookAggregatedGetResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Get<
            InlineResponse20093>("/prices/orderbook/aggregated/get", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetPricesOrderbookAggregatedGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// Orderbook aggregated by price. Orderbook aggregated by price.
        /// </summary>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifier"></param>
        /// <param name="identifierType"></param>
        /// <param name="quality"> (optional, default to RLT)</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="subscriptionMinimumInterval">Non-negative number of milliseconds to throttle the update rate. (optional, default to 5000M)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse20093</returns>
        public async System.Threading.Tasks.Task<InlineResponse20093>GetPricesOrderbookAggregatedGetAsync(string identifier, string identifierType, string quality = default(string), List<string> attributes = default(List<string>), decimal? subscriptionMinimumInterval = default(decimal?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await GetPricesOrderbookAggregatedGetWithHttpInfoAsync(identifier, identifierType, quality, attributes, subscriptionMinimumInterval, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Orderbook aggregated by price. Orderbook aggregated by price.
        /// </summary>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifier"></param>
        /// <param name="identifierType"></param>
        /// <param name="quality"> (optional, default to RLT)</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="subscriptionMinimumInterval">Non-negative number of milliseconds to throttle the update rate. (optional, default to 5000M)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse20093)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20093>> GetPricesOrderbookAggregatedGetWithHttpInfoAsync(string identifier, string identifierType, string quality = default(string), List<string> attributes = default(List<string>), decimal? subscriptionMinimumInterval = default(decimal?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'identifier' is set
            if (identifier == null)
            {
                throw new FactSet.SDK.RealTimeQuotes.Client.ApiException(400, "Missing required parameter 'identifier' when calling PricesApi->GetPricesOrderbookAggregatedGet");
            }

            // verify the required parameter 'identifierType' is set
            if (identifierType == null)
            {
                throw new FactSet.SDK.RealTimeQuotes.Client.ApiException(400, "Missing required parameter 'identifierType' when calling PricesApi->GetPricesOrderbookAggregatedGet");
            }


            FactSet.SDK.RealTimeQuotes.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.RealTimeQuotes.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.RealTimeQuotes.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.RealTimeQuotes.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeQuotes.Client.ClientUtils.ParameterToMultiMap("", "identifier", identifier));
            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeQuotes.Client.ClientUtils.ParameterToMultiMap("", "identifierType", identifierType));
            if (quality != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeQuotes.Client.ClientUtils.ParameterToMultiMap("", "quality", quality));
            }
            if (attributes != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeQuotes.Client.ClientUtils.ParameterToMultiMap("csv", "_attributes", attributes));
            }
            if (subscriptionMinimumInterval != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeQuotes.Client.ClientUtils.ParameterToMultiMap("", "_subscriptionMinimumInterval", subscriptionMinimumInterval));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.RealTimeQuotes.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = GetPricesOrderbookAggregatedGetResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<InlineResponse20093>("/prices/orderbook/aggregated/get", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetPricesOrderbookAggregatedGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Full orderbook Full orderbook
        /// </summary>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifier"></param>
        /// <param name="identifierType"></param>
        /// <param name="quality"> (optional, default to RLT)</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="subscriptionMinimumInterval">Non-negative number of milliseconds to throttle the update rate. (optional, default to 5000M)</param>
        /// <returns>InlineResponse20094</returns>
        public InlineResponse20094 GetPricesOrderbookFullGet(string identifier, string identifierType, string quality = default(string), List<string> attributes = default(List<string>), decimal? subscriptionMinimumInterval = default(decimal?))
        {
            var localVarResponse = GetPricesOrderbookFullGetWithHttpInfo(identifier, identifierType, quality, attributes, subscriptionMinimumInterval);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Full orderbook Full orderbook
        /// </summary>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifier"></param>
        /// <param name="identifierType"></param>
        /// <param name="quality"> (optional, default to RLT)</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="subscriptionMinimumInterval">Non-negative number of milliseconds to throttle the update rate. (optional, default to 5000M)</param>
        /// <returns>ApiResponse of InlineResponse20094</returns>
        public ApiResponse<InlineResponse20094> GetPricesOrderbookFullGetWithHttpInfo(string identifier, string identifierType, string quality = default(string), List<string> attributes = default(List<string>), decimal? subscriptionMinimumInterval = default(decimal?))
        {
            // verify the required parameter 'identifier' is set
            if (identifier == null)
            {
                throw new FactSet.SDK.RealTimeQuotes.Client.ApiException(400, "Missing required parameter 'identifier' when calling PricesApi->GetPricesOrderbookFullGet");
            }

            // verify the required parameter 'identifierType' is set
            if (identifierType == null)
            {
                throw new FactSet.SDK.RealTimeQuotes.Client.ApiException(400, "Missing required parameter 'identifierType' when calling PricesApi->GetPricesOrderbookFullGet");
            }

            FactSet.SDK.RealTimeQuotes.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.RealTimeQuotes.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.RealTimeQuotes.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.RealTimeQuotes.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeQuotes.Client.ClientUtils.ParameterToMultiMap("", "identifier", identifier));
            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeQuotes.Client.ClientUtils.ParameterToMultiMap("", "identifierType", identifierType));
            if (quality != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeQuotes.Client.ClientUtils.ParameterToMultiMap("", "quality", quality));
            }
            if (attributes != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeQuotes.Client.ClientUtils.ParameterToMultiMap("csv", "_attributes", attributes));
            }
            if (subscriptionMinimumInterval != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeQuotes.Client.ClientUtils.ParameterToMultiMap("", "_subscriptionMinimumInterval", subscriptionMinimumInterval));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.RealTimeQuotes.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = GetPricesOrderbookFullGetResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Get<
            InlineResponse20094>("/prices/orderbook/full/get", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetPricesOrderbookFullGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// Full orderbook Full orderbook
        /// </summary>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifier"></param>
        /// <param name="identifierType"></param>
        /// <param name="quality"> (optional, default to RLT)</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="subscriptionMinimumInterval">Non-negative number of milliseconds to throttle the update rate. (optional, default to 5000M)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse20094</returns>
        public async System.Threading.Tasks.Task<InlineResponse20094>GetPricesOrderbookFullGetAsync(string identifier, string identifierType, string quality = default(string), List<string> attributes = default(List<string>), decimal? subscriptionMinimumInterval = default(decimal?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await GetPricesOrderbookFullGetWithHttpInfoAsync(identifier, identifierType, quality, attributes, subscriptionMinimumInterval, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Full orderbook Full orderbook
        /// </summary>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifier"></param>
        /// <param name="identifierType"></param>
        /// <param name="quality"> (optional, default to RLT)</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="subscriptionMinimumInterval">Non-negative number of milliseconds to throttle the update rate. (optional, default to 5000M)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse20094)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20094>> GetPricesOrderbookFullGetWithHttpInfoAsync(string identifier, string identifierType, string quality = default(string), List<string> attributes = default(List<string>), decimal? subscriptionMinimumInterval = default(decimal?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'identifier' is set
            if (identifier == null)
            {
                throw new FactSet.SDK.RealTimeQuotes.Client.ApiException(400, "Missing required parameter 'identifier' when calling PricesApi->GetPricesOrderbookFullGet");
            }

            // verify the required parameter 'identifierType' is set
            if (identifierType == null)
            {
                throw new FactSet.SDK.RealTimeQuotes.Client.ApiException(400, "Missing required parameter 'identifierType' when calling PricesApi->GetPricesOrderbookFullGet");
            }


            FactSet.SDK.RealTimeQuotes.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.RealTimeQuotes.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.RealTimeQuotes.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.RealTimeQuotes.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeQuotes.Client.ClientUtils.ParameterToMultiMap("", "identifier", identifier));
            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeQuotes.Client.ClientUtils.ParameterToMultiMap("", "identifierType", identifierType));
            if (quality != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeQuotes.Client.ClientUtils.ParameterToMultiMap("", "quality", quality));
            }
            if (attributes != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeQuotes.Client.ClientUtils.ParameterToMultiMap("csv", "_attributes", attributes));
            }
            if (subscriptionMinimumInterval != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeQuotes.Client.ClientUtils.ParameterToMultiMap("", "_subscriptionMinimumInterval", subscriptionMinimumInterval));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.RealTimeQuotes.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = GetPricesOrderbookFullGetResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<InlineResponse20094>("/prices/orderbook/full/get", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetPricesOrderbookFullGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Trading schedule event types. Trading schedule event types define the events which may occur during any period of trading. Types of trading schedule events are for instance OPEN, CLOSE, END_OF_DAY.
        /// </summary>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <returns>InlineResponse20096</returns>
        public InlineResponse20096 GetPricesTradingScheduleEventTypeList(List<string> attributes = default(List<string>))
        {
            var localVarResponse = GetPricesTradingScheduleEventTypeListWithHttpInfo(attributes);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Trading schedule event types. Trading schedule event types define the events which may occur during any period of trading. Types of trading schedule events are for instance OPEN, CLOSE, END_OF_DAY.
        /// </summary>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <returns>ApiResponse of InlineResponse20096</returns>
        public ApiResponse<InlineResponse20096> GetPricesTradingScheduleEventTypeListWithHttpInfo(List<string> attributes = default(List<string>))
        {
            FactSet.SDK.RealTimeQuotes.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.RealTimeQuotes.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.RealTimeQuotes.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.RealTimeQuotes.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (attributes != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeQuotes.Client.ClientUtils.ParameterToMultiMap("csv", "_attributes", attributes));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.RealTimeQuotes.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = GetPricesTradingScheduleEventTypeListResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Get<
            InlineResponse20096>("/prices/tradingSchedule/event/type/list", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetPricesTradingScheduleEventTypeList", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// Trading schedule event types. Trading schedule event types define the events which may occur during any period of trading. Types of trading schedule events are for instance OPEN, CLOSE, END_OF_DAY.
        /// </summary>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse20096</returns>
        public async System.Threading.Tasks.Task<InlineResponse20096>GetPricesTradingScheduleEventTypeListAsync(List<string> attributes = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await GetPricesTradingScheduleEventTypeListWithHttpInfoAsync(attributes, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Trading schedule event types. Trading schedule event types define the events which may occur during any period of trading. Types of trading schedule events are for instance OPEN, CLOSE, END_OF_DAY.
        /// </summary>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse20096)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20096>> GetPricesTradingScheduleEventTypeListWithHttpInfoAsync(List<string> attributes = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            FactSet.SDK.RealTimeQuotes.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.RealTimeQuotes.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.RealTimeQuotes.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.RealTimeQuotes.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (attributes != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeQuotes.Client.ClientUtils.ParameterToMultiMap("csv", "_attributes", attributes));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.RealTimeQuotes.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = GetPricesTradingScheduleEventTypeListResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<InlineResponse20096>("/prices/tradingSchedule/event/type/list", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetPricesTradingScheduleEventTypeList", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Sequence of market-related events. Sequence of market-related events like the opening time or closing time of a market of a specific notation.&lt;br&gt;&lt;br&gt;Pagination to a previous page is not supported and &#x60;pagination.previous&#x60; is always &#x60;null&#x60;.
        /// </summary>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postPricesTradingScheduleEventListRequest">Request Body</param>
        /// <returns>InlineResponse20095</returns>
        public InlineResponse20095 PostPricesTradingScheduleEventList(PostPricesTradingScheduleEventListRequest postPricesTradingScheduleEventListRequest)
        {
            var localVarResponse = PostPricesTradingScheduleEventListWithHttpInfo(postPricesTradingScheduleEventListRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Sequence of market-related events. Sequence of market-related events like the opening time or closing time of a market of a specific notation.&lt;br&gt;&lt;br&gt;Pagination to a previous page is not supported and &#x60;pagination.previous&#x60; is always &#x60;null&#x60;.
        /// </summary>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postPricesTradingScheduleEventListRequest">Request Body</param>
        /// <returns>ApiResponse of InlineResponse20095</returns>
        public ApiResponse<InlineResponse20095> PostPricesTradingScheduleEventListWithHttpInfo(PostPricesTradingScheduleEventListRequest postPricesTradingScheduleEventListRequest)
        {
            // verify the required parameter 'postPricesTradingScheduleEventListRequest' is set
            if (postPricesTradingScheduleEventListRequest == null)
            {
                throw new FactSet.SDK.RealTimeQuotes.Client.ApiException(400, "Missing required parameter 'postPricesTradingScheduleEventListRequest' when calling PricesApi->PostPricesTradingScheduleEventList");
            }

            FactSet.SDK.RealTimeQuotes.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.RealTimeQuotes.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.RealTimeQuotes.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.RealTimeQuotes.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = postPricesTradingScheduleEventListRequest;

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.RealTimeQuotes.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = PostPricesTradingScheduleEventListResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Post<
            InlineResponse20095>("/prices/tradingSchedule/event/list", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostPricesTradingScheduleEventList", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// Sequence of market-related events. Sequence of market-related events like the opening time or closing time of a market of a specific notation.&lt;br&gt;&lt;br&gt;Pagination to a previous page is not supported and &#x60;pagination.previous&#x60; is always &#x60;null&#x60;.
        /// </summary>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postPricesTradingScheduleEventListRequest">Request Body</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse20095</returns>
        public async System.Threading.Tasks.Task<InlineResponse20095>PostPricesTradingScheduleEventListAsync(PostPricesTradingScheduleEventListRequest postPricesTradingScheduleEventListRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await PostPricesTradingScheduleEventListWithHttpInfoAsync(postPricesTradingScheduleEventListRequest, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Sequence of market-related events. Sequence of market-related events like the opening time or closing time of a market of a specific notation.&lt;br&gt;&lt;br&gt;Pagination to a previous page is not supported and &#x60;pagination.previous&#x60; is always &#x60;null&#x60;.
        /// </summary>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postPricesTradingScheduleEventListRequest">Request Body</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse20095)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20095>> PostPricesTradingScheduleEventListWithHttpInfoAsync(PostPricesTradingScheduleEventListRequest postPricesTradingScheduleEventListRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'postPricesTradingScheduleEventListRequest' is set
            if (postPricesTradingScheduleEventListRequest == null)
            {
                throw new FactSet.SDK.RealTimeQuotes.Client.ApiException(400, "Missing required parameter 'postPricesTradingScheduleEventListRequest' when calling PricesApi->PostPricesTradingScheduleEventList");
            }


            FactSet.SDK.RealTimeQuotes.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.RealTimeQuotes.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.RealTimeQuotes.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.RealTimeQuotes.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = postPricesTradingScheduleEventListRequest;

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.RealTimeQuotes.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = PostPricesTradingScheduleEventListResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<InlineResponse20095>("/prices/tradingSchedule/event/list", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostPricesTradingScheduleEventList", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
