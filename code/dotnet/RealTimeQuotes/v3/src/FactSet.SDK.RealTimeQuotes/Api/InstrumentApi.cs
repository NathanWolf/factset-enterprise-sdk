/*
 * Quotes API For Digital Portals
 *
 * The Quotes API combines endpoints for retrieving security end-of-day, delayed, and realtime prices with performance key figures and basic reference data on the security and market level.  The API supports over 20 different price types for each quote and comes with basic search endpoints based on security identifiers and instrument names. Market coverage is included in the *Sample Use Cases* section below.  The Digital Portal use case is focused on high-performance applications that are  * serving millions of end-users, * accessible by client browsers via the internet, * supporting subscriptions for streamed updates out-of-the-box, * typically combining a wide variety of *for Digital Portals*-APIs into a highly use-case specific solution for customers, * integrated into complex infrastructures such as existing frontend frameworks, authentication services.  All APIs labelled *for Digital Portals* have been designed for direct use by client web applications and feature extreme low latency: The average response time across all endpoints is 30 ms whereas 99% of all requests are answered in close to under 300ms.  See the [Time Series API for Digital Portals](https://developer.factset.com/api-catalog/time-series-api-digital-portals) for direct access to price histories, and the [News API for Digital Portals](https://developer.factset.com/api-catalog/news-api-digital-portals) for searching and fetching related news. 
 *
 * The version of the OpenAPI document: 3.0.0
 * Contact: api@factset.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using FactSet.SDK.RealTimeQuotes.Client;
using FactSet.SDK.RealTimeQuotes.Model;
using FactSet.SDK.Utils.Authentication;

namespace FactSet.SDK.RealTimeQuotes.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IInstrumentApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Background texts of an instrument.
        /// </summary>
        /// <remarks>
        /// Background texts of an instrument.
        /// </remarks>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifier"></param>
        /// <param name="identifierType"></param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="language"> (optional)</param>
        /// <returns>InlineResponse20044</returns>
        InlineResponse20044 GetInstrumentBackgroundTextList(string identifier, string identifierType, List<string> attributes = default(List<string>), string language = default(string));

        /// <summary>
        /// Background texts of an instrument.
        /// </summary>
        /// <remarks>
        /// Background texts of an instrument.
        /// </remarks>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifier"></param>
        /// <param name="identifierType"></param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="language"> (optional)</param>
        /// <returns>ApiResponse of InlineResponse20044</returns>
        ApiResponse<InlineResponse20044> GetInstrumentBackgroundTextListWithHttpInfo(string identifier, string identifierType, List<string> attributes = default(List<string>), string language = default(string));
        /// <summary>
        /// Compliance properties of an instrument.
        /// </summary>
        /// <remarks>
        /// Compliance properties of an instrument.
        /// </remarks>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifier"></param>
        /// <param name="identifierType"></param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="language"> (optional)</param>
        /// <returns>InlineResponse20049</returns>
        InlineResponse20049 GetInstrumentCompliancePropertyListByInstrument(string identifier, string identifierType, List<string> attributes = default(List<string>), string language = default(string));

        /// <summary>
        /// Compliance properties of an instrument.
        /// </summary>
        /// <remarks>
        /// Compliance properties of an instrument.
        /// </remarks>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifier"></param>
        /// <param name="identifierType"></param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="language"> (optional)</param>
        /// <returns>ApiResponse of InlineResponse20049</returns>
        ApiResponse<InlineResponse20049> GetInstrumentCompliancePropertyListByInstrumentWithHttpInfo(string identifier, string identifierType, List<string> attributes = default(List<string>), string language = default(string));
        /// <summary>
        /// Composite instrument and its components.
        /// </summary>
        /// <remarks>
        /// Composite instrument and its components.
        /// </remarks>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifier"></param>
        /// <param name="identifierType"></param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="language"> (optional)</param>
        /// <returns>InlineResponse20050</returns>
        InlineResponse20050 GetInstrumentCompositeGet(string identifier, string identifierType, List<string> attributes = default(List<string>), string language = default(string));

        /// <summary>
        /// Composite instrument and its components.
        /// </summary>
        /// <remarks>
        /// Composite instrument and its components.
        /// </remarks>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifier"></param>
        /// <param name="identifierType"></param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="language"> (optional)</param>
        /// <returns>ApiResponse of InlineResponse20050</returns>
        ApiResponse<InlineResponse20050> GetInstrumentCompositeGetWithHttpInfo(string identifier, string identifierType, List<string> attributes = default(List<string>), string language = default(string));
        /// <summary>
        /// List of day count convention types.
        /// </summary>
        /// <remarks>
        /// List of day count convention types.
        /// </remarks>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="language"> (optional)</param>
        /// <returns>InlineResponse20052</returns>
        InlineResponse20052 GetInstrumentCouponDayCountConventionTypeList(List<string> attributes = default(List<string>), string language = default(string));

        /// <summary>
        /// List of day count convention types.
        /// </summary>
        /// <remarks>
        /// List of day count convention types.
        /// </remarks>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="language"> (optional)</param>
        /// <returns>ApiResponse of InlineResponse20052</returns>
        ApiResponse<InlineResponse20052> GetInstrumentCouponDayCountConventionTypeListWithHttpInfo(List<string> attributes = default(List<string>), string language = default(string));
        /// <summary>
        /// List of interest rate types.
        /// </summary>
        /// <remarks>
        /// List of interest rate types.
        /// </remarks>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="language"> (optional)</param>
        /// <returns>InlineResponse20053</returns>
        InlineResponse20053 GetInstrumentCouponInterestRateTypeList(List<string> attributes = default(List<string>), string language = default(string));

        /// <summary>
        /// List of interest rate types.
        /// </summary>
        /// <remarks>
        /// List of interest rate types.
        /// </remarks>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="language"> (optional)</param>
        /// <returns>ApiResponse of InlineResponse20053</returns>
        ApiResponse<InlineResponse20053> GetInstrumentCouponInterestRateTypeListWithHttpInfo(List<string> attributes = default(List<string>), string language = default(string));
        /// <summary>
        /// Interest rate details for selected periods of an interest-bearing instrument.
        /// </summary>
        /// <remarks>
        /// Interest rate details for selected periods of an interest-bearing instrument; any other instrument yields empty values.
        /// </remarks>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifier"></param>
        /// <param name="identifierType"></param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="language"> (optional)</param>
        /// <returns>InlineResponse20054</returns>
        InlineResponse20054 GetInstrumentCouponKeyDataGet(string identifier, string identifierType, List<string> attributes = default(List<string>), string language = default(string));

        /// <summary>
        /// Interest rate details for selected periods of an interest-bearing instrument.
        /// </summary>
        /// <remarks>
        /// Interest rate details for selected periods of an interest-bearing instrument; any other instrument yields empty values.
        /// </remarks>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifier"></param>
        /// <param name="identifierType"></param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="language"> (optional)</param>
        /// <returns>ApiResponse of InlineResponse20054</returns>
        ApiResponse<InlineResponse20054> GetInstrumentCouponKeyDataGetWithHttpInfo(string identifier, string identifierType, List<string> attributes = default(List<string>), string language = default(string));
        /// <summary>
        /// List of coupons for an interest-bearing instrument.
        /// </summary>
        /// <remarks>
        /// List of coupons for an interest-bearing instrument; any other instrument yields empty values. The endpoint provides details regarding the coupon period, the respective interest rate, and payable amount (the latter only for instruments with a fixed nominal value). The list of coupons is generally not available for a perpetual, i.e. without a predefined maturity date, interst-bearing instrument.   If there is no entitled provider supplying a full list of coupons, the list will be synthesized from summary data available from entitled suppliers (if any). Since the exact product terms are not known, e.g. the handling of holidays and weekends, the list may be imprecise.
        /// </remarks>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifier"></param>
        /// <param name="identifierType"></param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="language"> (optional)</param>
        /// <returns>InlineResponse20051</returns>
        InlineResponse20051 GetInstrumentCouponList(string identifier, string identifierType, List<string> attributes = default(List<string>), string language = default(string));

        /// <summary>
        /// List of coupons for an interest-bearing instrument.
        /// </summary>
        /// <remarks>
        /// List of coupons for an interest-bearing instrument; any other instrument yields empty values. The endpoint provides details regarding the coupon period, the respective interest rate, and payable amount (the latter only for instruments with a fixed nominal value). The list of coupons is generally not available for a perpetual, i.e. without a predefined maturity date, interst-bearing instrument.   If there is no entitled provider supplying a full list of coupons, the list will be synthesized from summary data available from entitled suppliers (if any). Since the exact product terms are not known, e.g. the handling of holidays and weekends, the list may be imprecise.
        /// </remarks>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifier"></param>
        /// <param name="identifierType"></param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="language"> (optional)</param>
        /// <returns>ApiResponse of InlineResponse20051</returns>
        ApiResponse<InlineResponse20051> GetInstrumentCouponListWithHttpInfo(string identifier, string identifierType, List<string> attributes = default(List<string>), string language = default(string));
        /// <summary>
        /// Translate ISIN to instrument.
        /// </summary>
        /// <remarks>
        /// Translate a given ISIN to the respective most recent instrument identifier, retrieved from the Cross Reference Service.
        /// </remarks>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="isin"></param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <returns>InlineResponse20055</returns>
        InlineResponse20055 GetInstrumentCrossReferenceGetByISIN(string isin, List<string> attributes = default(List<string>));

        /// <summary>
        /// Translate ISIN to instrument.
        /// </summary>
        /// <remarks>
        /// Translate a given ISIN to the respective most recent instrument identifier, retrieved from the Cross Reference Service.
        /// </remarks>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="isin"></param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <returns>ApiResponse of InlineResponse20055</returns>
        ApiResponse<InlineResponse20055> GetInstrumentCrossReferenceGetByISINWithHttpInfo(string isin, List<string> attributes = default(List<string>));
        /// <summary>
        /// Translate WKN to instrument.
        /// </summary>
        /// <remarks>
        /// Translate a given WKN to the respective most recent instrument identifier, retrieved from the Cross Reference Service.
        /// </remarks>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="wkn"></param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <returns>InlineResponse20055</returns>
        InlineResponse20055 GetInstrumentCrossReferenceGetByWKN(string wkn, List<string> attributes = default(List<string>));

        /// <summary>
        /// Translate WKN to instrument.
        /// </summary>
        /// <remarks>
        /// Translate a given WKN to the respective most recent instrument identifier, retrieved from the Cross Reference Service.
        /// </remarks>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="wkn"></param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <returns>ApiResponse of InlineResponse20055</returns>
        ApiResponse<InlineResponse20055> GetInstrumentCrossReferenceGetByWKNWithHttpInfo(string wkn, List<string> attributes = default(List<string>));
        /// <summary>
        /// ISIN to instrument translation history.
        /// </summary>
        /// <remarks>
        /// Retrieve the complete translation history of a given ISIN to the respective instrument association from the Cross Reference Service. The results are sorted in descending order, starting with the most recent.
        /// </remarks>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="isin"></param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="paginationOffset">Non-negative number of entries to skip, or 0 (default). (optional, default to 0M)</param>
        /// <param name="paginationLimit">Non-negative maximum number of entries to return. (optional, default to 10M)</param>
        /// <returns>InlineResponse20058</returns>
        InlineResponse20058 GetInstrumentCrossReferenceHistoryGetByISIN(string isin, List<string> attributes = default(List<string>), decimal? paginationOffset = default(decimal?), decimal? paginationLimit = default(decimal?));

        /// <summary>
        /// ISIN to instrument translation history.
        /// </summary>
        /// <remarks>
        /// Retrieve the complete translation history of a given ISIN to the respective instrument association from the Cross Reference Service. The results are sorted in descending order, starting with the most recent.
        /// </remarks>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="isin"></param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="paginationOffset">Non-negative number of entries to skip, or 0 (default). (optional, default to 0M)</param>
        /// <param name="paginationLimit">Non-negative maximum number of entries to return. (optional, default to 10M)</param>
        /// <returns>ApiResponse of InlineResponse20058</returns>
        ApiResponse<InlineResponse20058> GetInstrumentCrossReferenceHistoryGetByISINWithHttpInfo(string isin, List<string> attributes = default(List<string>), decimal? paginationOffset = default(decimal?), decimal? paginationLimit = default(decimal?));
        /// <summary>
        /// WKN to instrument translation history.
        /// </summary>
        /// <remarks>
        /// Retrieve the complete translation history of a given WKN to the respective instrument association from the Cross Reference Service. The results are sorted in descending order, starting with the most recent.
        /// </remarks>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="wkn"></param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="paginationOffset">Non-negative number of entries to skip, or 0 (default). (optional, default to 0M)</param>
        /// <param name="paginationLimit">Non-negative maximum number of entries to return. (optional, default to 10M)</param>
        /// <returns>InlineResponse20058</returns>
        InlineResponse20058 GetInstrumentCrossReferenceHistoryGetByWKN(string wkn, List<string> attributes = default(List<string>), decimal? paginationOffset = default(decimal?), decimal? paginationLimit = default(decimal?));

        /// <summary>
        /// WKN to instrument translation history.
        /// </summary>
        /// <remarks>
        /// Retrieve the complete translation history of a given WKN to the respective instrument association from the Cross Reference Service. The results are sorted in descending order, starting with the most recent.
        /// </remarks>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="wkn"></param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="paginationOffset">Non-negative number of entries to skip, or 0 (default). (optional, default to 0M)</param>
        /// <param name="paginationLimit">Non-negative maximum number of entries to return. (optional, default to 10M)</param>
        /// <returns>ApiResponse of InlineResponse20058</returns>
        ApiResponse<InlineResponse20058> GetInstrumentCrossReferenceHistoryGetByWKNWithHttpInfo(string wkn, List<string> attributes = default(List<string>), decimal? paginationOffset = default(decimal?), decimal? paginationLimit = default(decimal?));
        /// <summary>
        /// Retrieve an exchange rate instrument identifier.
        /// </summary>
        /// <remarks>
        /// Retrieve an exchange rate instrument identifier using the identifier of the main currencies represented by that exchange rate.    An error is returned if one of the provided parameters is invalid or if no instrument is associated with the given combination of parameters.
        /// </remarks>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="target"></param>
        /// <param name="source"></param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="language"> (optional)</param>
        /// <returns>InlineResponse20059</returns>
        InlineResponse20059 GetInstrumentExchangeRateGet(decimal target, decimal source, List<string> attributes = default(List<string>), string language = default(string));

        /// <summary>
        /// Retrieve an exchange rate instrument identifier.
        /// </summary>
        /// <remarks>
        /// Retrieve an exchange rate instrument identifier using the identifier of the main currencies represented by that exchange rate.    An error is returned if one of the provided parameters is invalid or if no instrument is associated with the given combination of parameters.
        /// </remarks>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="target"></param>
        /// <param name="source"></param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="language"> (optional)</param>
        /// <returns>ApiResponse of InlineResponse20059</returns>
        ApiResponse<InlineResponse20059> GetInstrumentExchangeRateGetWithHttpInfo(decimal target, decimal source, List<string> attributes = default(List<string>), string language = default(string));
        /// <summary>
        /// Retrieve an exchange rate instrument identifier.
        /// </summary>
        /// <remarks>
        /// Retrieve an exchange rate instrument identifier using the ISO 4217 code of the main currencies represented by that exchange rate.   An error is returned if one of the provided parameters is invalid or if no instrument is associated with the given combination of parameters.
        /// </remarks>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="target"></param>
        /// <param name="source"></param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="language"> (optional)</param>
        /// <returns>InlineResponse20059</returns>
        InlineResponse20059 GetInstrumentExchangeRateGetByISOCode(string target, string source, List<string> attributes = default(List<string>), string language = default(string));

        /// <summary>
        /// Retrieve an exchange rate instrument identifier.
        /// </summary>
        /// <remarks>
        /// Retrieve an exchange rate instrument identifier using the ISO 4217 code of the main currencies represented by that exchange rate.   An error is returned if one of the provided parameters is invalid or if no instrument is associated with the given combination of parameters.
        /// </remarks>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="target"></param>
        /// <param name="source"></param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="language"> (optional)</param>
        /// <returns>ApiResponse of InlineResponse20059</returns>
        ApiResponse<InlineResponse20059> GetInstrumentExchangeRateGetByISOCodeWithHttpInfo(string target, string source, List<string> attributes = default(List<string>), string language = default(string));
        /// <summary>
        /// Basic data for an instrument.
        /// </summary>
        /// <remarks>
        /// Basic data for an instrument.
        /// </remarks>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifier"></param>
        /// <param name="identifierType"></param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="language"> (optional)</param>
        /// <returns>InlineResponse20042</returns>
        InlineResponse20042 GetInstrumentGet(string identifier, string identifierType, List<string> attributes = default(List<string>), string language = default(string));

        /// <summary>
        /// Basic data for an instrument.
        /// </summary>
        /// <remarks>
        /// Basic data for an instrument.
        /// </remarks>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifier"></param>
        /// <param name="identifierType"></param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="language"> (optional)</param>
        /// <returns>ApiResponse of InlineResponse20042</returns>
        ApiResponse<InlineResponse20042> GetInstrumentGetWithHttpInfo(string identifier, string identifierType, List<string> attributes = default(List<string>), string language = default(string));
        /// <summary>
        /// Basic data for an instrument.
        /// </summary>
        /// <remarks>
        /// Basic data for an instrument.
        /// </remarks>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="language"> (optional)</param>
        /// <returns>InlineResponse20043</returns>
        InlineResponse20043 GetInstrumentGetByNotation(string id, List<string> attributes = default(List<string>), string language = default(string));

        /// <summary>
        /// Basic data for an instrument.
        /// </summary>
        /// <remarks>
        /// Basic data for an instrument.
        /// </remarks>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="language"> (optional)</param>
        /// <returns>ApiResponse of InlineResponse20043</returns>
        ApiResponse<InlineResponse20043> GetInstrumentGetByNotationWithHttpInfo(string id, List<string> attributes = default(List<string>), string language = default(string));
        /// <summary>
        /// Role-specific background texts of legal entities related to an instrument.
        /// </summary>
        /// <remarks>
        /// Role-specific background texts of legal entities related to an instrument.
        /// </remarks>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifier"></param>
        /// <param name="identifierType"></param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="language"> (optional)</param>
        /// <returns>InlineResponse20060</returns>
        InlineResponse20060 GetInstrumentLegalEntityBackgroundTextList(string identifier, string identifierType, List<string> attributes = default(List<string>), string language = default(string));

        /// <summary>
        /// Role-specific background texts of legal entities related to an instrument.
        /// </summary>
        /// <remarks>
        /// Role-specific background texts of legal entities related to an instrument.
        /// </remarks>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifier"></param>
        /// <param name="identifierType"></param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="language"> (optional)</param>
        /// <returns>ApiResponse of InlineResponse20060</returns>
        ApiResponse<InlineResponse20060> GetInstrumentLegalEntityBackgroundTextListWithHttpInfo(string identifier, string identifierType, List<string> attributes = default(List<string>), string language = default(string));
        /// <summary>
        /// Role-specific compliance properties of legal entities related to an instrument.
        /// </summary>
        /// <remarks>
        /// Role-specic compliance properties of legal entities related to an instrument.
        /// </remarks>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifier"></param>
        /// <param name="identifierType"></param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="language"> (optional)</param>
        /// <returns>InlineResponse20061</returns>
        InlineResponse20061 GetInstrumentLegalEntityCompliancePropertyList(string identifier, string identifierType, List<string> attributes = default(List<string>), string language = default(string));

        /// <summary>
        /// Role-specific compliance properties of legal entities related to an instrument.
        /// </summary>
        /// <remarks>
        /// Role-specic compliance properties of legal entities related to an instrument.
        /// </remarks>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifier"></param>
        /// <param name="identifierType"></param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="language"> (optional)</param>
        /// <returns>ApiResponse of InlineResponse20061</returns>
        ApiResponse<InlineResponse20061> GetInstrumentLegalEntityCompliancePropertyListWithHttpInfo(string identifier, string identifierType, List<string> attributes = default(List<string>), string language = default(string));
        /// <summary>
        /// MiFID II data for a financial instrument.
        /// </summary>
        /// <remarks>
        /// MiFID II data for a specified financial instrument. The instruments governed by MiFID II are called \&quot;investment products\&quot;.
        /// </remarks>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifier"></param>
        /// <param name="identifierType"></param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="language"> (optional)</param>
        /// <returns>InlineResponse20062</returns>
        InlineResponse20062 GetInstrumentMifidGet(string identifier, string identifierType, List<string> attributes = default(List<string>), string language = default(string));

        /// <summary>
        /// MiFID II data for a financial instrument.
        /// </summary>
        /// <remarks>
        /// MiFID II data for a specified financial instrument. The instruments governed by MiFID II are called \&quot;investment products\&quot;.
        /// </remarks>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifier"></param>
        /// <param name="identifierType"></param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="language"> (optional)</param>
        /// <returns>ApiResponse of InlineResponse20062</returns>
        ApiResponse<InlineResponse20062> GetInstrumentMifidGetWithHttpInfo(string identifier, string identifierType, List<string> attributes = default(List<string>), string language = default(string));
        /// <summary>
        /// Basic search for instruments.
        /// </summary>
        /// <remarks>
        /// Search for instruments whose ISIN, specified NSINs, or name match the search value according to a tolerant full-text match algorithm. Better matching results appear in the response before less relevant matches.
        /// </remarks>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="searchValue"></param>
        /// <param name="nsins"> (optional)</param>
        /// <param name="assetClass"> (optional)</param>
        /// <param name="onlyActive"> (optional, default to true)</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="language"> (optional)</param>
        /// <param name="paginationOffset">Non-negative number of entries to skip, or 0 (default). (optional, default to 0M)</param>
        /// <param name="paginationLimit">Non-negative maximum number of entries to return. (optional, default to 20M)</param>
        /// <returns>InlineResponse20097</returns>
        InlineResponse20097 GetInstrumentSearchBasic(string searchValue, List<string> nsins = default(List<string>), string assetClass = default(string), bool? onlyActive = default(bool?), List<string> attributes = default(List<string>), string language = default(string), decimal? paginationOffset = default(decimal?), decimal? paginationLimit = default(decimal?));

        /// <summary>
        /// Basic search for instruments.
        /// </summary>
        /// <remarks>
        /// Search for instruments whose ISIN, specified NSINs, or name match the search value according to a tolerant full-text match algorithm. Better matching results appear in the response before less relevant matches.
        /// </remarks>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="searchValue"></param>
        /// <param name="nsins"> (optional)</param>
        /// <param name="assetClass"> (optional)</param>
        /// <param name="onlyActive"> (optional, default to true)</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="language"> (optional)</param>
        /// <param name="paginationOffset">Non-negative number of entries to skip, or 0 (default). (optional, default to 0M)</param>
        /// <param name="paginationLimit">Non-negative maximum number of entries to return. (optional, default to 20M)</param>
        /// <returns>ApiResponse of InlineResponse20097</returns>
        ApiResponse<InlineResponse20097> GetInstrumentSearchBasicWithHttpInfo(string searchValue, List<string> nsins = default(List<string>), string assetClass = default(string), bool? onlyActive = default(bool?), List<string> attributes = default(List<string>), string language = default(string), decimal? paginationOffset = default(decimal?), decimal? paginationLimit = default(decimal?));
        /// <summary>
        /// Set of custom instrument-level selection lists.
        /// </summary>
        /// <remarks>
        /// Set of custom instrument-level selection lists.
        /// </remarks>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <returns>InlineResponse20065</returns>
        InlineResponse20065 GetInstrumentSelectionListList(List<string> attributes = default(List<string>));

        /// <summary>
        /// Set of custom instrument-level selection lists.
        /// </summary>
        /// <remarks>
        /// Set of custom instrument-level selection lists.
        /// </remarks>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <returns>ApiResponse of InlineResponse20065</returns>
        ApiResponse<InlineResponse20065> GetInstrumentSelectionListListWithHttpInfo(List<string> attributes = default(List<string>));
        /// <summary>
        /// For each given instrument, returns the instrument-level selection lists of which the instrument is a member.
        /// </summary>
        /// <remarks>
        /// For each given instrument, returns the instrument-level selection lists of which the instrument is a member.
        /// </remarks>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifiers"></param>
        /// <param name="identifierType"></param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <returns>InlineResponse20066</returns>
        InlineResponse20066 GetInstrumentSelectionListListByInstrument(List<string> identifiers, string identifierType, List<string> attributes = default(List<string>));

        /// <summary>
        /// For each given instrument, returns the instrument-level selection lists of which the instrument is a member.
        /// </summary>
        /// <remarks>
        /// For each given instrument, returns the instrument-level selection lists of which the instrument is a member.
        /// </remarks>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifiers"></param>
        /// <param name="identifierType"></param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <returns>ApiResponse of InlineResponse20066</returns>
        ApiResponse<InlineResponse20066> GetInstrumentSelectionListListByInstrumentWithHttpInfo(List<string> identifiers, string identifierType, List<string> attributes = default(List<string>));
        /// <summary>
        /// List of background text types for instruments.
        /// </summary>
        /// <remarks>
        /// List of background text types for instruments.
        /// </remarks>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postInstrumentBackgroundTextTypeListRequest">Request Body (optional)</param>
        /// <returns>InlineResponse20045</returns>
        InlineResponse20045 PostInstrumentBackgroundTextTypeList(PostInstrumentBackgroundTextTypeListRequest postInstrumentBackgroundTextTypeListRequest = default(PostInstrumentBackgroundTextTypeListRequest));

        /// <summary>
        /// List of background text types for instruments.
        /// </summary>
        /// <remarks>
        /// List of background text types for instruments.
        /// </remarks>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postInstrumentBackgroundTextTypeListRequest">Request Body (optional)</param>
        /// <returns>ApiResponse of InlineResponse20045</returns>
        ApiResponse<InlineResponse20045> PostInstrumentBackgroundTextTypeListWithHttpInfo(PostInstrumentBackgroundTextTypeListRequest postInstrumentBackgroundTextTypeListRequest = default(PostInstrumentBackgroundTextTypeListRequest));
        /// <summary>
        /// List of benchmarks of a financial instrument.
        /// </summary>
        /// <remarks>
        /// Provides a list of benchmark notations for a selected financial instrument, optionally restricted to specific benchmark types.
        /// </remarks>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postInstrumentBenchmarkListRequest">Request Body (optional)</param>
        /// <returns>InlineResponse20046</returns>
        InlineResponse20046 PostInstrumentBenchmarkList(PostInstrumentBenchmarkListRequest postInstrumentBenchmarkListRequest = default(PostInstrumentBenchmarkListRequest));

        /// <summary>
        /// List of benchmarks of a financial instrument.
        /// </summary>
        /// <remarks>
        /// Provides a list of benchmark notations for a selected financial instrument, optionally restricted to specific benchmark types.
        /// </remarks>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postInstrumentBenchmarkListRequest">Request Body (optional)</param>
        /// <returns>ApiResponse of InlineResponse20046</returns>
        ApiResponse<InlineResponse20046> PostInstrumentBenchmarkListWithHttpInfo(PostInstrumentBenchmarkListRequest postInstrumentBenchmarkListRequest = default(PostInstrumentBenchmarkListRequest));
        /// <summary>
        /// List of categories assigned to a specific instrument the application is entitled to see.
        /// </summary>
        /// <remarks>
        /// List of categories assigned to a specific instrument the application is entitled to see. Optionally it is possible to restrict the output to only list those for a specific category dataset.
        /// </remarks>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postInstrumentCategoryListRequest">Request Body (optional)</param>
        /// <returns>InlineResponse20047</returns>
        InlineResponse20047 PostInstrumentCategoryList(PostInstrumentCategoryListRequest postInstrumentCategoryListRequest = default(PostInstrumentCategoryListRequest));

        /// <summary>
        /// List of categories assigned to a specific instrument the application is entitled to see.
        /// </summary>
        /// <remarks>
        /// List of categories assigned to a specific instrument the application is entitled to see. Optionally it is possible to restrict the output to only list those for a specific category dataset.
        /// </remarks>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postInstrumentCategoryListRequest">Request Body (optional)</param>
        /// <returns>ApiResponse of InlineResponse20047</returns>
        ApiResponse<InlineResponse20047> PostInstrumentCategoryListWithHttpInfo(PostInstrumentCategoryListRequest postInstrumentCategoryListRequest = default(PostInstrumentCategoryListRequest));
        /// <summary>
        /// List of compliance properties for instruments.
        /// </summary>
        /// <remarks>
        /// List of compliance properties for instruments.
        /// </remarks>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postInstrumentCompliancePropertyListRequest">Request Body (optional)</param>
        /// <returns>InlineResponse20048</returns>
        InlineResponse20048 PostInstrumentCompliancePropertyList(PostInstrumentCompliancePropertyListRequest postInstrumentCompliancePropertyListRequest = default(PostInstrumentCompliancePropertyListRequest));

        /// <summary>
        /// List of compliance properties for instruments.
        /// </summary>
        /// <remarks>
        /// List of compliance properties for instruments.
        /// </remarks>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postInstrumentCompliancePropertyListRequest">Request Body (optional)</param>
        /// <returns>ApiResponse of InlineResponse20048</returns>
        ApiResponse<InlineResponse20048> PostInstrumentCompliancePropertyListWithHttpInfo(PostInstrumentCompliancePropertyListRequest postInstrumentCompliancePropertyListRequest = default(PostInstrumentCompliancePropertyListRequest));
        /// <summary>
        /// Translate a list of ISINs to instruments.
        /// </summary>
        /// <remarks>
        /// Translate a given list of ISINs to the respective most recent instrument identifiers, retrieved from the Cross Reference Service.
        /// </remarks>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postInstrumentCrossReferenceListByISINRequest">Request Body</param>
        /// <returns>InlineResponse20056</returns>
        InlineResponse20056 PostInstrumentCrossReferenceListByISIN(PostInstrumentCrossReferenceListByISINRequest postInstrumentCrossReferenceListByISINRequest);

        /// <summary>
        /// Translate a list of ISINs to instruments.
        /// </summary>
        /// <remarks>
        /// Translate a given list of ISINs to the respective most recent instrument identifiers, retrieved from the Cross Reference Service.
        /// </remarks>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postInstrumentCrossReferenceListByISINRequest">Request Body</param>
        /// <returns>ApiResponse of InlineResponse20056</returns>
        ApiResponse<InlineResponse20056> PostInstrumentCrossReferenceListByISINWithHttpInfo(PostInstrumentCrossReferenceListByISINRequest postInstrumentCrossReferenceListByISINRequest);
        /// <summary>
        /// Translate a list of WKNs to instruments.
        /// </summary>
        /// <remarks>
        /// Translate a given list of WKNs to the respective most recent instrument identifiers, retrieved from the Cross Reference Service.
        /// </remarks>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postInstrumentCrossReferenceListByWKNRequest">Request Body</param>
        /// <returns>InlineResponse20057</returns>
        InlineResponse20057 PostInstrumentCrossReferenceListByWKN(PostInstrumentCrossReferenceListByWKNRequest postInstrumentCrossReferenceListByWKNRequest);

        /// <summary>
        /// Translate a list of WKNs to instruments.
        /// </summary>
        /// <remarks>
        /// Translate a given list of WKNs to the respective most recent instrument identifiers, retrieved from the Cross Reference Service.
        /// </remarks>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postInstrumentCrossReferenceListByWKNRequest">Request Body</param>
        /// <returns>ApiResponse of InlineResponse20057</returns>
        ApiResponse<InlineResponse20057> PostInstrumentCrossReferenceListByWKNWithHttpInfo(PostInstrumentCrossReferenceListByWKNRequest postInstrumentCrossReferenceListByWKNRequest);
        /// <summary>
        /// List of active, entitled notations for a set of instruments.
        /// </summary>
        /// <remarks>
        /// List of active, entitled notations for a set of instruments. By default the list of notations (per instrument) is sorted descending by the trading volume, averaged over one month. All identifiers used as parameters must be valid and entitled.
        /// </remarks>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postInstrumentNotationListRequest">Request Body (optional)</param>
        /// <returns>InlineResponse20063</returns>
        InlineResponse20063 PostInstrumentNotationList(PostInstrumentNotationListRequest postInstrumentNotationListRequest = default(PostInstrumentNotationListRequest));

        /// <summary>
        /// List of active, entitled notations for a set of instruments.
        /// </summary>
        /// <remarks>
        /// List of active, entitled notations for a set of instruments. By default the list of notations (per instrument) is sorted descending by the trading volume, averaged over one month. All identifiers used as parameters must be valid and entitled.
        /// </remarks>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postInstrumentNotationListRequest">Request Body (optional)</param>
        /// <returns>ApiResponse of InlineResponse20063</returns>
        ApiResponse<InlineResponse20063> PostInstrumentNotationListWithHttpInfo(PostInstrumentNotationListRequest postInstrumentNotationListRequest = default(PostInstrumentNotationListRequest));
        /// <summary>
        /// List of rating grades for a list of instruments.
        /// </summary>
        /// <remarks>
        /// List of rating grades for a list of instruments. The list can be restricted to rating grades belonging to particular rating systems.
        /// </remarks>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postInstrumentRatingGradeListRequest">Request Body (optional)</param>
        /// <returns>InlineResponse20064</returns>
        InlineResponse20064 PostInstrumentRatingGradeList(PostInstrumentRatingGradeListRequest postInstrumentRatingGradeListRequest = default(PostInstrumentRatingGradeListRequest));

        /// <summary>
        /// List of rating grades for a list of instruments.
        /// </summary>
        /// <remarks>
        /// List of rating grades for a list of instruments. The list can be restricted to rating grades belonging to particular rating systems.
        /// </remarks>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postInstrumentRatingGradeListRequest">Request Body (optional)</param>
        /// <returns>ApiResponse of InlineResponse20064</returns>
        ApiResponse<InlineResponse20064> PostInstrumentRatingGradeListWithHttpInfo(PostInstrumentRatingGradeListRequest postInstrumentRatingGradeListRequest = default(PostInstrumentRatingGradeListRequest));
        /// <summary>
        /// List of instruments belonging to an instrument-level selection list.
        /// </summary>
        /// <remarks>
        /// List of instruments belonging to an instrument-level selection list.
        /// </remarks>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postInstrumentSelectionListMembersListRequest">Request Body (optional)</param>
        /// <returns>InlineResponse20067</returns>
        InlineResponse20067 PostInstrumentSelectionListMembersList(PostInstrumentSelectionListMembersListRequest postInstrumentSelectionListMembersListRequest = default(PostInstrumentSelectionListMembersListRequest));

        /// <summary>
        /// List of instruments belonging to an instrument-level selection list.
        /// </summary>
        /// <remarks>
        /// List of instruments belonging to an instrument-level selection list.
        /// </remarks>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postInstrumentSelectionListMembersListRequest">Request Body (optional)</param>
        /// <returns>ApiResponse of InlineResponse20067</returns>
        ApiResponse<InlineResponse20067> PostInstrumentSelectionListMembersListWithHttpInfo(PostInstrumentSelectionListMembersListRequest postInstrumentSelectionListMembersListRequest = default(PostInstrumentSelectionListMembersListRequest));
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IInstrumentApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Background texts of an instrument.
        /// </summary>
        /// <remarks>
        /// Background texts of an instrument.
        /// </remarks>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifier"></param>
        /// <param name="identifierType"></param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="language"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse20044</returns>
        System.Threading.Tasks.Task<InlineResponse20044> GetInstrumentBackgroundTextListAsync(string identifier, string identifierType, List<string> attributes = default(List<string>), string language = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Background texts of an instrument.
        /// </summary>
        /// <remarks>
        /// Background texts of an instrument.
        /// </remarks>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifier"></param>
        /// <param name="identifierType"></param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="language"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse20044)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20044>> GetInstrumentBackgroundTextListWithHttpInfoAsync(string identifier, string identifierType, List<string> attributes = default(List<string>), string language = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Compliance properties of an instrument.
        /// </summary>
        /// <remarks>
        /// Compliance properties of an instrument.
        /// </remarks>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifier"></param>
        /// <param name="identifierType"></param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="language"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse20049</returns>
        System.Threading.Tasks.Task<InlineResponse20049> GetInstrumentCompliancePropertyListByInstrumentAsync(string identifier, string identifierType, List<string> attributes = default(List<string>), string language = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Compliance properties of an instrument.
        /// </summary>
        /// <remarks>
        /// Compliance properties of an instrument.
        /// </remarks>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifier"></param>
        /// <param name="identifierType"></param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="language"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse20049)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20049>> GetInstrumentCompliancePropertyListByInstrumentWithHttpInfoAsync(string identifier, string identifierType, List<string> attributes = default(List<string>), string language = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Composite instrument and its components.
        /// </summary>
        /// <remarks>
        /// Composite instrument and its components.
        /// </remarks>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifier"></param>
        /// <param name="identifierType"></param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="language"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse20050</returns>
        System.Threading.Tasks.Task<InlineResponse20050> GetInstrumentCompositeGetAsync(string identifier, string identifierType, List<string> attributes = default(List<string>), string language = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Composite instrument and its components.
        /// </summary>
        /// <remarks>
        /// Composite instrument and its components.
        /// </remarks>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifier"></param>
        /// <param name="identifierType"></param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="language"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse20050)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20050>> GetInstrumentCompositeGetWithHttpInfoAsync(string identifier, string identifierType, List<string> attributes = default(List<string>), string language = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// List of day count convention types.
        /// </summary>
        /// <remarks>
        /// List of day count convention types.
        /// </remarks>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="language"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse20052</returns>
        System.Threading.Tasks.Task<InlineResponse20052> GetInstrumentCouponDayCountConventionTypeListAsync(List<string> attributes = default(List<string>), string language = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// List of day count convention types.
        /// </summary>
        /// <remarks>
        /// List of day count convention types.
        /// </remarks>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="language"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse20052)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20052>> GetInstrumentCouponDayCountConventionTypeListWithHttpInfoAsync(List<string> attributes = default(List<string>), string language = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// List of interest rate types.
        /// </summary>
        /// <remarks>
        /// List of interest rate types.
        /// </remarks>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="language"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse20053</returns>
        System.Threading.Tasks.Task<InlineResponse20053> GetInstrumentCouponInterestRateTypeListAsync(List<string> attributes = default(List<string>), string language = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// List of interest rate types.
        /// </summary>
        /// <remarks>
        /// List of interest rate types.
        /// </remarks>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="language"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse20053)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20053>> GetInstrumentCouponInterestRateTypeListWithHttpInfoAsync(List<string> attributes = default(List<string>), string language = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Interest rate details for selected periods of an interest-bearing instrument.
        /// </summary>
        /// <remarks>
        /// Interest rate details for selected periods of an interest-bearing instrument; any other instrument yields empty values.
        /// </remarks>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifier"></param>
        /// <param name="identifierType"></param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="language"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse20054</returns>
        System.Threading.Tasks.Task<InlineResponse20054> GetInstrumentCouponKeyDataGetAsync(string identifier, string identifierType, List<string> attributes = default(List<string>), string language = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Interest rate details for selected periods of an interest-bearing instrument.
        /// </summary>
        /// <remarks>
        /// Interest rate details for selected periods of an interest-bearing instrument; any other instrument yields empty values.
        /// </remarks>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifier"></param>
        /// <param name="identifierType"></param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="language"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse20054)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20054>> GetInstrumentCouponKeyDataGetWithHttpInfoAsync(string identifier, string identifierType, List<string> attributes = default(List<string>), string language = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// List of coupons for an interest-bearing instrument.
        /// </summary>
        /// <remarks>
        /// List of coupons for an interest-bearing instrument; any other instrument yields empty values. The endpoint provides details regarding the coupon period, the respective interest rate, and payable amount (the latter only for instruments with a fixed nominal value). The list of coupons is generally not available for a perpetual, i.e. without a predefined maturity date, interst-bearing instrument.   If there is no entitled provider supplying a full list of coupons, the list will be synthesized from summary data available from entitled suppliers (if any). Since the exact product terms are not known, e.g. the handling of holidays and weekends, the list may be imprecise.
        /// </remarks>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifier"></param>
        /// <param name="identifierType"></param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="language"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse20051</returns>
        System.Threading.Tasks.Task<InlineResponse20051> GetInstrumentCouponListAsync(string identifier, string identifierType, List<string> attributes = default(List<string>), string language = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// List of coupons for an interest-bearing instrument.
        /// </summary>
        /// <remarks>
        /// List of coupons for an interest-bearing instrument; any other instrument yields empty values. The endpoint provides details regarding the coupon period, the respective interest rate, and payable amount (the latter only for instruments with a fixed nominal value). The list of coupons is generally not available for a perpetual, i.e. without a predefined maturity date, interst-bearing instrument.   If there is no entitled provider supplying a full list of coupons, the list will be synthesized from summary data available from entitled suppliers (if any). Since the exact product terms are not known, e.g. the handling of holidays and weekends, the list may be imprecise.
        /// </remarks>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifier"></param>
        /// <param name="identifierType"></param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="language"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse20051)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20051>> GetInstrumentCouponListWithHttpInfoAsync(string identifier, string identifierType, List<string> attributes = default(List<string>), string language = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Translate ISIN to instrument.
        /// </summary>
        /// <remarks>
        /// Translate a given ISIN to the respective most recent instrument identifier, retrieved from the Cross Reference Service.
        /// </remarks>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="isin"></param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse20055</returns>
        System.Threading.Tasks.Task<InlineResponse20055> GetInstrumentCrossReferenceGetByISINAsync(string isin, List<string> attributes = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Translate ISIN to instrument.
        /// </summary>
        /// <remarks>
        /// Translate a given ISIN to the respective most recent instrument identifier, retrieved from the Cross Reference Service.
        /// </remarks>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="isin"></param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse20055)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20055>> GetInstrumentCrossReferenceGetByISINWithHttpInfoAsync(string isin, List<string> attributes = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Translate WKN to instrument.
        /// </summary>
        /// <remarks>
        /// Translate a given WKN to the respective most recent instrument identifier, retrieved from the Cross Reference Service.
        /// </remarks>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="wkn"></param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse20055</returns>
        System.Threading.Tasks.Task<InlineResponse20055> GetInstrumentCrossReferenceGetByWKNAsync(string wkn, List<string> attributes = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Translate WKN to instrument.
        /// </summary>
        /// <remarks>
        /// Translate a given WKN to the respective most recent instrument identifier, retrieved from the Cross Reference Service.
        /// </remarks>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="wkn"></param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse20055)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20055>> GetInstrumentCrossReferenceGetByWKNWithHttpInfoAsync(string wkn, List<string> attributes = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// ISIN to instrument translation history.
        /// </summary>
        /// <remarks>
        /// Retrieve the complete translation history of a given ISIN to the respective instrument association from the Cross Reference Service. The results are sorted in descending order, starting with the most recent.
        /// </remarks>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="isin"></param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="paginationOffset">Non-negative number of entries to skip, or 0 (default). (optional, default to 0M)</param>
        /// <param name="paginationLimit">Non-negative maximum number of entries to return. (optional, default to 10M)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse20058</returns>
        System.Threading.Tasks.Task<InlineResponse20058> GetInstrumentCrossReferenceHistoryGetByISINAsync(string isin, List<string> attributes = default(List<string>), decimal? paginationOffset = default(decimal?), decimal? paginationLimit = default(decimal?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// ISIN to instrument translation history.
        /// </summary>
        /// <remarks>
        /// Retrieve the complete translation history of a given ISIN to the respective instrument association from the Cross Reference Service. The results are sorted in descending order, starting with the most recent.
        /// </remarks>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="isin"></param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="paginationOffset">Non-negative number of entries to skip, or 0 (default). (optional, default to 0M)</param>
        /// <param name="paginationLimit">Non-negative maximum number of entries to return. (optional, default to 10M)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse20058)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20058>> GetInstrumentCrossReferenceHistoryGetByISINWithHttpInfoAsync(string isin, List<string> attributes = default(List<string>), decimal? paginationOffset = default(decimal?), decimal? paginationLimit = default(decimal?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// WKN to instrument translation history.
        /// </summary>
        /// <remarks>
        /// Retrieve the complete translation history of a given WKN to the respective instrument association from the Cross Reference Service. The results are sorted in descending order, starting with the most recent.
        /// </remarks>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="wkn"></param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="paginationOffset">Non-negative number of entries to skip, or 0 (default). (optional, default to 0M)</param>
        /// <param name="paginationLimit">Non-negative maximum number of entries to return. (optional, default to 10M)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse20058</returns>
        System.Threading.Tasks.Task<InlineResponse20058> GetInstrumentCrossReferenceHistoryGetByWKNAsync(string wkn, List<string> attributes = default(List<string>), decimal? paginationOffset = default(decimal?), decimal? paginationLimit = default(decimal?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// WKN to instrument translation history.
        /// </summary>
        /// <remarks>
        /// Retrieve the complete translation history of a given WKN to the respective instrument association from the Cross Reference Service. The results are sorted in descending order, starting with the most recent.
        /// </remarks>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="wkn"></param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="paginationOffset">Non-negative number of entries to skip, or 0 (default). (optional, default to 0M)</param>
        /// <param name="paginationLimit">Non-negative maximum number of entries to return. (optional, default to 10M)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse20058)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20058>> GetInstrumentCrossReferenceHistoryGetByWKNWithHttpInfoAsync(string wkn, List<string> attributes = default(List<string>), decimal? paginationOffset = default(decimal?), decimal? paginationLimit = default(decimal?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieve an exchange rate instrument identifier.
        /// </summary>
        /// <remarks>
        /// Retrieve an exchange rate instrument identifier using the identifier of the main currencies represented by that exchange rate.    An error is returned if one of the provided parameters is invalid or if no instrument is associated with the given combination of parameters.
        /// </remarks>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="target"></param>
        /// <param name="source"></param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="language"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse20059</returns>
        System.Threading.Tasks.Task<InlineResponse20059> GetInstrumentExchangeRateGetAsync(decimal target, decimal source, List<string> attributes = default(List<string>), string language = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieve an exchange rate instrument identifier.
        /// </summary>
        /// <remarks>
        /// Retrieve an exchange rate instrument identifier using the identifier of the main currencies represented by that exchange rate.    An error is returned if one of the provided parameters is invalid or if no instrument is associated with the given combination of parameters.
        /// </remarks>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="target"></param>
        /// <param name="source"></param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="language"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse20059)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20059>> GetInstrumentExchangeRateGetWithHttpInfoAsync(decimal target, decimal source, List<string> attributes = default(List<string>), string language = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieve an exchange rate instrument identifier.
        /// </summary>
        /// <remarks>
        /// Retrieve an exchange rate instrument identifier using the ISO 4217 code of the main currencies represented by that exchange rate.   An error is returned if one of the provided parameters is invalid or if no instrument is associated with the given combination of parameters.
        /// </remarks>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="target"></param>
        /// <param name="source"></param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="language"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse20059</returns>
        System.Threading.Tasks.Task<InlineResponse20059> GetInstrumentExchangeRateGetByISOCodeAsync(string target, string source, List<string> attributes = default(List<string>), string language = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieve an exchange rate instrument identifier.
        /// </summary>
        /// <remarks>
        /// Retrieve an exchange rate instrument identifier using the ISO 4217 code of the main currencies represented by that exchange rate.   An error is returned if one of the provided parameters is invalid or if no instrument is associated with the given combination of parameters.
        /// </remarks>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="target"></param>
        /// <param name="source"></param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="language"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse20059)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20059>> GetInstrumentExchangeRateGetByISOCodeWithHttpInfoAsync(string target, string source, List<string> attributes = default(List<string>), string language = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Basic data for an instrument.
        /// </summary>
        /// <remarks>
        /// Basic data for an instrument.
        /// </remarks>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifier"></param>
        /// <param name="identifierType"></param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="language"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse20042</returns>
        System.Threading.Tasks.Task<InlineResponse20042> GetInstrumentGetAsync(string identifier, string identifierType, List<string> attributes = default(List<string>), string language = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Basic data for an instrument.
        /// </summary>
        /// <remarks>
        /// Basic data for an instrument.
        /// </remarks>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifier"></param>
        /// <param name="identifierType"></param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="language"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse20042)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20042>> GetInstrumentGetWithHttpInfoAsync(string identifier, string identifierType, List<string> attributes = default(List<string>), string language = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Basic data for an instrument.
        /// </summary>
        /// <remarks>
        /// Basic data for an instrument.
        /// </remarks>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="language"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse20043</returns>
        System.Threading.Tasks.Task<InlineResponse20043> GetInstrumentGetByNotationAsync(string id, List<string> attributes = default(List<string>), string language = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Basic data for an instrument.
        /// </summary>
        /// <remarks>
        /// Basic data for an instrument.
        /// </remarks>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="language"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse20043)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20043>> GetInstrumentGetByNotationWithHttpInfoAsync(string id, List<string> attributes = default(List<string>), string language = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Role-specific background texts of legal entities related to an instrument.
        /// </summary>
        /// <remarks>
        /// Role-specific background texts of legal entities related to an instrument.
        /// </remarks>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifier"></param>
        /// <param name="identifierType"></param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="language"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse20060</returns>
        System.Threading.Tasks.Task<InlineResponse20060> GetInstrumentLegalEntityBackgroundTextListAsync(string identifier, string identifierType, List<string> attributes = default(List<string>), string language = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Role-specific background texts of legal entities related to an instrument.
        /// </summary>
        /// <remarks>
        /// Role-specific background texts of legal entities related to an instrument.
        /// </remarks>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifier"></param>
        /// <param name="identifierType"></param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="language"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse20060)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20060>> GetInstrumentLegalEntityBackgroundTextListWithHttpInfoAsync(string identifier, string identifierType, List<string> attributes = default(List<string>), string language = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Role-specific compliance properties of legal entities related to an instrument.
        /// </summary>
        /// <remarks>
        /// Role-specic compliance properties of legal entities related to an instrument.
        /// </remarks>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifier"></param>
        /// <param name="identifierType"></param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="language"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse20061</returns>
        System.Threading.Tasks.Task<InlineResponse20061> GetInstrumentLegalEntityCompliancePropertyListAsync(string identifier, string identifierType, List<string> attributes = default(List<string>), string language = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Role-specific compliance properties of legal entities related to an instrument.
        /// </summary>
        /// <remarks>
        /// Role-specic compliance properties of legal entities related to an instrument.
        /// </remarks>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifier"></param>
        /// <param name="identifierType"></param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="language"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse20061)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20061>> GetInstrumentLegalEntityCompliancePropertyListWithHttpInfoAsync(string identifier, string identifierType, List<string> attributes = default(List<string>), string language = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// MiFID II data for a financial instrument.
        /// </summary>
        /// <remarks>
        /// MiFID II data for a specified financial instrument. The instruments governed by MiFID II are called \&quot;investment products\&quot;.
        /// </remarks>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifier"></param>
        /// <param name="identifierType"></param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="language"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse20062</returns>
        System.Threading.Tasks.Task<InlineResponse20062> GetInstrumentMifidGetAsync(string identifier, string identifierType, List<string> attributes = default(List<string>), string language = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// MiFID II data for a financial instrument.
        /// </summary>
        /// <remarks>
        /// MiFID II data for a specified financial instrument. The instruments governed by MiFID II are called \&quot;investment products\&quot;.
        /// </remarks>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifier"></param>
        /// <param name="identifierType"></param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="language"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse20062)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20062>> GetInstrumentMifidGetWithHttpInfoAsync(string identifier, string identifierType, List<string> attributes = default(List<string>), string language = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Basic search for instruments.
        /// </summary>
        /// <remarks>
        /// Search for instruments whose ISIN, specified NSINs, or name match the search value according to a tolerant full-text match algorithm. Better matching results appear in the response before less relevant matches.
        /// </remarks>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="searchValue"></param>
        /// <param name="nsins"> (optional)</param>
        /// <param name="assetClass"> (optional)</param>
        /// <param name="onlyActive"> (optional, default to true)</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="language"> (optional)</param>
        /// <param name="paginationOffset">Non-negative number of entries to skip, or 0 (default). (optional, default to 0M)</param>
        /// <param name="paginationLimit">Non-negative maximum number of entries to return. (optional, default to 20M)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse20097</returns>
        System.Threading.Tasks.Task<InlineResponse20097> GetInstrumentSearchBasicAsync(string searchValue, List<string> nsins = default(List<string>), string assetClass = default(string), bool? onlyActive = default(bool?), List<string> attributes = default(List<string>), string language = default(string), decimal? paginationOffset = default(decimal?), decimal? paginationLimit = default(decimal?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Basic search for instruments.
        /// </summary>
        /// <remarks>
        /// Search for instruments whose ISIN, specified NSINs, or name match the search value according to a tolerant full-text match algorithm. Better matching results appear in the response before less relevant matches.
        /// </remarks>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="searchValue"></param>
        /// <param name="nsins"> (optional)</param>
        /// <param name="assetClass"> (optional)</param>
        /// <param name="onlyActive"> (optional, default to true)</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="language"> (optional)</param>
        /// <param name="paginationOffset">Non-negative number of entries to skip, or 0 (default). (optional, default to 0M)</param>
        /// <param name="paginationLimit">Non-negative maximum number of entries to return. (optional, default to 20M)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse20097)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20097>> GetInstrumentSearchBasicWithHttpInfoAsync(string searchValue, List<string> nsins = default(List<string>), string assetClass = default(string), bool? onlyActive = default(bool?), List<string> attributes = default(List<string>), string language = default(string), decimal? paginationOffset = default(decimal?), decimal? paginationLimit = default(decimal?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Set of custom instrument-level selection lists.
        /// </summary>
        /// <remarks>
        /// Set of custom instrument-level selection lists.
        /// </remarks>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse20065</returns>
        System.Threading.Tasks.Task<InlineResponse20065> GetInstrumentSelectionListListAsync(List<string> attributes = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Set of custom instrument-level selection lists.
        /// </summary>
        /// <remarks>
        /// Set of custom instrument-level selection lists.
        /// </remarks>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse20065)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20065>> GetInstrumentSelectionListListWithHttpInfoAsync(List<string> attributes = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// For each given instrument, returns the instrument-level selection lists of which the instrument is a member.
        /// </summary>
        /// <remarks>
        /// For each given instrument, returns the instrument-level selection lists of which the instrument is a member.
        /// </remarks>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifiers"></param>
        /// <param name="identifierType"></param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse20066</returns>
        System.Threading.Tasks.Task<InlineResponse20066> GetInstrumentSelectionListListByInstrumentAsync(List<string> identifiers, string identifierType, List<string> attributes = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// For each given instrument, returns the instrument-level selection lists of which the instrument is a member.
        /// </summary>
        /// <remarks>
        /// For each given instrument, returns the instrument-level selection lists of which the instrument is a member.
        /// </remarks>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifiers"></param>
        /// <param name="identifierType"></param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse20066)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20066>> GetInstrumentSelectionListListByInstrumentWithHttpInfoAsync(List<string> identifiers, string identifierType, List<string> attributes = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// List of background text types for instruments.
        /// </summary>
        /// <remarks>
        /// List of background text types for instruments.
        /// </remarks>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postInstrumentBackgroundTextTypeListRequest">Request Body (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse20045</returns>
        System.Threading.Tasks.Task<InlineResponse20045> PostInstrumentBackgroundTextTypeListAsync(PostInstrumentBackgroundTextTypeListRequest postInstrumentBackgroundTextTypeListRequest = default(PostInstrumentBackgroundTextTypeListRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// List of background text types for instruments.
        /// </summary>
        /// <remarks>
        /// List of background text types for instruments.
        /// </remarks>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postInstrumentBackgroundTextTypeListRequest">Request Body (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse20045)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20045>> PostInstrumentBackgroundTextTypeListWithHttpInfoAsync(PostInstrumentBackgroundTextTypeListRequest postInstrumentBackgroundTextTypeListRequest = default(PostInstrumentBackgroundTextTypeListRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// List of benchmarks of a financial instrument.
        /// </summary>
        /// <remarks>
        /// Provides a list of benchmark notations for a selected financial instrument, optionally restricted to specific benchmark types.
        /// </remarks>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postInstrumentBenchmarkListRequest">Request Body (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse20046</returns>
        System.Threading.Tasks.Task<InlineResponse20046> PostInstrumentBenchmarkListAsync(PostInstrumentBenchmarkListRequest postInstrumentBenchmarkListRequest = default(PostInstrumentBenchmarkListRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// List of benchmarks of a financial instrument.
        /// </summary>
        /// <remarks>
        /// Provides a list of benchmark notations for a selected financial instrument, optionally restricted to specific benchmark types.
        /// </remarks>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postInstrumentBenchmarkListRequest">Request Body (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse20046)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20046>> PostInstrumentBenchmarkListWithHttpInfoAsync(PostInstrumentBenchmarkListRequest postInstrumentBenchmarkListRequest = default(PostInstrumentBenchmarkListRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// List of categories assigned to a specific instrument the application is entitled to see.
        /// </summary>
        /// <remarks>
        /// List of categories assigned to a specific instrument the application is entitled to see. Optionally it is possible to restrict the output to only list those for a specific category dataset.
        /// </remarks>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postInstrumentCategoryListRequest">Request Body (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse20047</returns>
        System.Threading.Tasks.Task<InlineResponse20047> PostInstrumentCategoryListAsync(PostInstrumentCategoryListRequest postInstrumentCategoryListRequest = default(PostInstrumentCategoryListRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// List of categories assigned to a specific instrument the application is entitled to see.
        /// </summary>
        /// <remarks>
        /// List of categories assigned to a specific instrument the application is entitled to see. Optionally it is possible to restrict the output to only list those for a specific category dataset.
        /// </remarks>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postInstrumentCategoryListRequest">Request Body (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse20047)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20047>> PostInstrumentCategoryListWithHttpInfoAsync(PostInstrumentCategoryListRequest postInstrumentCategoryListRequest = default(PostInstrumentCategoryListRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// List of compliance properties for instruments.
        /// </summary>
        /// <remarks>
        /// List of compliance properties for instruments.
        /// </remarks>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postInstrumentCompliancePropertyListRequest">Request Body (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse20048</returns>
        System.Threading.Tasks.Task<InlineResponse20048> PostInstrumentCompliancePropertyListAsync(PostInstrumentCompliancePropertyListRequest postInstrumentCompliancePropertyListRequest = default(PostInstrumentCompliancePropertyListRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// List of compliance properties for instruments.
        /// </summary>
        /// <remarks>
        /// List of compliance properties for instruments.
        /// </remarks>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postInstrumentCompliancePropertyListRequest">Request Body (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse20048)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20048>> PostInstrumentCompliancePropertyListWithHttpInfoAsync(PostInstrumentCompliancePropertyListRequest postInstrumentCompliancePropertyListRequest = default(PostInstrumentCompliancePropertyListRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Translate a list of ISINs to instruments.
        /// </summary>
        /// <remarks>
        /// Translate a given list of ISINs to the respective most recent instrument identifiers, retrieved from the Cross Reference Service.
        /// </remarks>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postInstrumentCrossReferenceListByISINRequest">Request Body</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse20056</returns>
        System.Threading.Tasks.Task<InlineResponse20056> PostInstrumentCrossReferenceListByISINAsync(PostInstrumentCrossReferenceListByISINRequest postInstrumentCrossReferenceListByISINRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Translate a list of ISINs to instruments.
        /// </summary>
        /// <remarks>
        /// Translate a given list of ISINs to the respective most recent instrument identifiers, retrieved from the Cross Reference Service.
        /// </remarks>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postInstrumentCrossReferenceListByISINRequest">Request Body</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse20056)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20056>> PostInstrumentCrossReferenceListByISINWithHttpInfoAsync(PostInstrumentCrossReferenceListByISINRequest postInstrumentCrossReferenceListByISINRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Translate a list of WKNs to instruments.
        /// </summary>
        /// <remarks>
        /// Translate a given list of WKNs to the respective most recent instrument identifiers, retrieved from the Cross Reference Service.
        /// </remarks>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postInstrumentCrossReferenceListByWKNRequest">Request Body</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse20057</returns>
        System.Threading.Tasks.Task<InlineResponse20057> PostInstrumentCrossReferenceListByWKNAsync(PostInstrumentCrossReferenceListByWKNRequest postInstrumentCrossReferenceListByWKNRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Translate a list of WKNs to instruments.
        /// </summary>
        /// <remarks>
        /// Translate a given list of WKNs to the respective most recent instrument identifiers, retrieved from the Cross Reference Service.
        /// </remarks>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postInstrumentCrossReferenceListByWKNRequest">Request Body</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse20057)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20057>> PostInstrumentCrossReferenceListByWKNWithHttpInfoAsync(PostInstrumentCrossReferenceListByWKNRequest postInstrumentCrossReferenceListByWKNRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// List of active, entitled notations for a set of instruments.
        /// </summary>
        /// <remarks>
        /// List of active, entitled notations for a set of instruments. By default the list of notations (per instrument) is sorted descending by the trading volume, averaged over one month. All identifiers used as parameters must be valid and entitled.
        /// </remarks>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postInstrumentNotationListRequest">Request Body (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse20063</returns>
        System.Threading.Tasks.Task<InlineResponse20063> PostInstrumentNotationListAsync(PostInstrumentNotationListRequest postInstrumentNotationListRequest = default(PostInstrumentNotationListRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// List of active, entitled notations for a set of instruments.
        /// </summary>
        /// <remarks>
        /// List of active, entitled notations for a set of instruments. By default the list of notations (per instrument) is sorted descending by the trading volume, averaged over one month. All identifiers used as parameters must be valid and entitled.
        /// </remarks>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postInstrumentNotationListRequest">Request Body (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse20063)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20063>> PostInstrumentNotationListWithHttpInfoAsync(PostInstrumentNotationListRequest postInstrumentNotationListRequest = default(PostInstrumentNotationListRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// List of rating grades for a list of instruments.
        /// </summary>
        /// <remarks>
        /// List of rating grades for a list of instruments. The list can be restricted to rating grades belonging to particular rating systems.
        /// </remarks>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postInstrumentRatingGradeListRequest">Request Body (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse20064</returns>
        System.Threading.Tasks.Task<InlineResponse20064> PostInstrumentRatingGradeListAsync(PostInstrumentRatingGradeListRequest postInstrumentRatingGradeListRequest = default(PostInstrumentRatingGradeListRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// List of rating grades for a list of instruments.
        /// </summary>
        /// <remarks>
        /// List of rating grades for a list of instruments. The list can be restricted to rating grades belonging to particular rating systems.
        /// </remarks>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postInstrumentRatingGradeListRequest">Request Body (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse20064)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20064>> PostInstrumentRatingGradeListWithHttpInfoAsync(PostInstrumentRatingGradeListRequest postInstrumentRatingGradeListRequest = default(PostInstrumentRatingGradeListRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// List of instruments belonging to an instrument-level selection list.
        /// </summary>
        /// <remarks>
        /// List of instruments belonging to an instrument-level selection list.
        /// </remarks>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postInstrumentSelectionListMembersListRequest">Request Body (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse20067</returns>
        System.Threading.Tasks.Task<InlineResponse20067> PostInstrumentSelectionListMembersListAsync(PostInstrumentSelectionListMembersListRequest postInstrumentSelectionListMembersListRequest = default(PostInstrumentSelectionListMembersListRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// List of instruments belonging to an instrument-level selection list.
        /// </summary>
        /// <remarks>
        /// List of instruments belonging to an instrument-level selection list.
        /// </remarks>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postInstrumentSelectionListMembersListRequest">Request Body (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse20067)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20067>> PostInstrumentSelectionListMembersListWithHttpInfoAsync(PostInstrumentSelectionListMembersListRequest postInstrumentSelectionListMembersListRequest = default(PostInstrumentSelectionListMembersListRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IInstrumentApi : IInstrumentApiSync, IInstrumentApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class InstrumentApi : IInstrumentApi
    {
        private FactSet.SDK.RealTimeQuotes.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        # region Response Type Disctionaries
        
        private static readonly Dictionary<HttpStatusCode, System.Type> GetInstrumentBackgroundTextListResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)200, typeof(InlineResponse20044) },
        };

        private static readonly Dictionary<HttpStatusCode, System.Type> GetInstrumentCompliancePropertyListByInstrumentResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)200, typeof(InlineResponse20049) },
        };

        private static readonly Dictionary<HttpStatusCode, System.Type> GetInstrumentCompositeGetResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)200, typeof(InlineResponse20050) },
        };

        private static readonly Dictionary<HttpStatusCode, System.Type> GetInstrumentCouponDayCountConventionTypeListResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)200, typeof(InlineResponse20052) },
        };

        private static readonly Dictionary<HttpStatusCode, System.Type> GetInstrumentCouponInterestRateTypeListResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)200, typeof(InlineResponse20053) },
        };

        private static readonly Dictionary<HttpStatusCode, System.Type> GetInstrumentCouponKeyDataGetResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)200, typeof(InlineResponse20054) },
        };

        private static readonly Dictionary<HttpStatusCode, System.Type> GetInstrumentCouponListResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)200, typeof(InlineResponse20051) },
        };

        private static readonly Dictionary<HttpStatusCode, System.Type> GetInstrumentCrossReferenceGetByISINResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)200, typeof(InlineResponse20055) },
        };

        private static readonly Dictionary<HttpStatusCode, System.Type> GetInstrumentCrossReferenceGetByWKNResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)200, typeof(InlineResponse20055) },
        };

        private static readonly Dictionary<HttpStatusCode, System.Type> GetInstrumentCrossReferenceHistoryGetByISINResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)200, typeof(InlineResponse20058) },
        };

        private static readonly Dictionary<HttpStatusCode, System.Type> GetInstrumentCrossReferenceHistoryGetByWKNResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)200, typeof(InlineResponse20058) },
        };

        private static readonly Dictionary<HttpStatusCode, System.Type> GetInstrumentExchangeRateGetResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)200, typeof(InlineResponse20059) },
        };

        private static readonly Dictionary<HttpStatusCode, System.Type> GetInstrumentExchangeRateGetByISOCodeResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)200, typeof(InlineResponse20059) },
        };

        private static readonly Dictionary<HttpStatusCode, System.Type> GetInstrumentGetResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)200, typeof(InlineResponse20042) },
        };

        private static readonly Dictionary<HttpStatusCode, System.Type> GetInstrumentGetByNotationResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)200, typeof(InlineResponse20043) },
        };

        private static readonly Dictionary<HttpStatusCode, System.Type> GetInstrumentLegalEntityBackgroundTextListResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)200, typeof(InlineResponse20060) },
        };

        private static readonly Dictionary<HttpStatusCode, System.Type> GetInstrumentLegalEntityCompliancePropertyListResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)200, typeof(InlineResponse20061) },
        };

        private static readonly Dictionary<HttpStatusCode, System.Type> GetInstrumentMifidGetResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)200, typeof(InlineResponse20062) },
        };

        private static readonly Dictionary<HttpStatusCode, System.Type> GetInstrumentSearchBasicResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)200, typeof(InlineResponse20097) },
        };

        private static readonly Dictionary<HttpStatusCode, System.Type> GetInstrumentSelectionListListResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)200, typeof(InlineResponse20065) },
        };

        private static readonly Dictionary<HttpStatusCode, System.Type> GetInstrumentSelectionListListByInstrumentResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)200, typeof(InlineResponse20066) },
        };

        private static readonly Dictionary<HttpStatusCode, System.Type> PostInstrumentBackgroundTextTypeListResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)200, typeof(InlineResponse20045) },
        };

        private static readonly Dictionary<HttpStatusCode, System.Type> PostInstrumentBenchmarkListResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)200, typeof(InlineResponse20046) },
        };

        private static readonly Dictionary<HttpStatusCode, System.Type> PostInstrumentCategoryListResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)200, typeof(InlineResponse20047) },
        };

        private static readonly Dictionary<HttpStatusCode, System.Type> PostInstrumentCompliancePropertyListResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)200, typeof(InlineResponse20048) },
        };

        private static readonly Dictionary<HttpStatusCode, System.Type> PostInstrumentCrossReferenceListByISINResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)200, typeof(InlineResponse20056) },
        };

        private static readonly Dictionary<HttpStatusCode, System.Type> PostInstrumentCrossReferenceListByWKNResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)200, typeof(InlineResponse20057) },
        };

        private static readonly Dictionary<HttpStatusCode, System.Type> PostInstrumentNotationListResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)200, typeof(InlineResponse20063) },
        };

        private static readonly Dictionary<HttpStatusCode, System.Type> PostInstrumentRatingGradeListResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)200, typeof(InlineResponse20064) },
        };

        private static readonly Dictionary<HttpStatusCode, System.Type> PostInstrumentSelectionListMembersListResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)200, typeof(InlineResponse20067) },
        };

        # endregion Response Type Disctionaries

        # region Api Response Objects
        

        # endregion Api Response Objects

        /// <summary>
        /// Initializes a new instance of the <see cref="InstrumentApi"/> class.
        /// </summary>
        /// <returns></returns>
        public InstrumentApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="InstrumentApi"/> class.
        /// </summary>
        /// <returns></returns>
        public InstrumentApi(string basePath)
        {
            this.Configuration = FactSet.SDK.RealTimeQuotes.Client.Configuration.MergeConfigurations(
                FactSet.SDK.RealTimeQuotes.Client.GlobalConfiguration.Instance,
                new FactSet.SDK.RealTimeQuotes.Client.Configuration { BasePath = basePath }
            );
            this.Client = new FactSet.SDK.RealTimeQuotes.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new FactSet.SDK.RealTimeQuotes.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = FactSet.SDK.RealTimeQuotes.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="InstrumentApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public InstrumentApi(FactSet.SDK.RealTimeQuotes.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = FactSet.SDK.RealTimeQuotes.Client.Configuration.MergeConfigurations(
                FactSet.SDK.RealTimeQuotes.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new FactSet.SDK.RealTimeQuotes.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new FactSet.SDK.RealTimeQuotes.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = FactSet.SDK.RealTimeQuotes.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="InstrumentApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public InstrumentApi(FactSet.SDK.RealTimeQuotes.Client.ISynchronousClient client, FactSet.SDK.RealTimeQuotes.Client.IAsynchronousClient asyncClient, FactSet.SDK.RealTimeQuotes.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = FactSet.SDK.RealTimeQuotes.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public FactSet.SDK.RealTimeQuotes.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public FactSet.SDK.RealTimeQuotes.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public FactSet.SDK.RealTimeQuotes.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public FactSet.SDK.RealTimeQuotes.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Background texts of an instrument. Background texts of an instrument.
        /// </summary>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifier"></param>
        /// <param name="identifierType"></param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="language"> (optional)</param>
        /// <returns>InlineResponse20044</returns>
        public InlineResponse20044 GetInstrumentBackgroundTextList(string identifier, string identifierType, List<string> attributes = default(List<string>), string language = default(string))
        {
            var localVarResponse = GetInstrumentBackgroundTextListWithHttpInfo(identifier, identifierType, attributes, language);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Background texts of an instrument. Background texts of an instrument.
        /// </summary>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifier"></param>
        /// <param name="identifierType"></param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="language"> (optional)</param>
        /// <returns>ApiResponse of InlineResponse20044</returns>
        public ApiResponse<InlineResponse20044> GetInstrumentBackgroundTextListWithHttpInfo(string identifier, string identifierType, List<string> attributes = default(List<string>), string language = default(string))
        {
            // verify the required parameter 'identifier' is set
            if (identifier == null)
            {
                throw new FactSet.SDK.RealTimeQuotes.Client.ApiException(400, "Missing required parameter 'identifier' when calling InstrumentApi->GetInstrumentBackgroundTextList");
            }

            // verify the required parameter 'identifierType' is set
            if (identifierType == null)
            {
                throw new FactSet.SDK.RealTimeQuotes.Client.ApiException(400, "Missing required parameter 'identifierType' when calling InstrumentApi->GetInstrumentBackgroundTextList");
            }

            FactSet.SDK.RealTimeQuotes.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.RealTimeQuotes.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.RealTimeQuotes.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.RealTimeQuotes.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeQuotes.Client.ClientUtils.ParameterToMultiMap("", "identifier", identifier));
            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeQuotes.Client.ClientUtils.ParameterToMultiMap("", "identifierType", identifierType));
            if (attributes != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeQuotes.Client.ClientUtils.ParameterToMultiMap("csv", "_attributes", attributes));
            }
            if (language != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeQuotes.Client.ClientUtils.ParameterToMultiMap("", "_language", language));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.RealTimeQuotes.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = GetInstrumentBackgroundTextListResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Get<
            InlineResponse20044>("/instrument/backgroundText/list", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetInstrumentBackgroundTextList", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// Background texts of an instrument. Background texts of an instrument.
        /// </summary>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifier"></param>
        /// <param name="identifierType"></param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="language"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse20044</returns>
        public async System.Threading.Tasks.Task<InlineResponse20044>GetInstrumentBackgroundTextListAsync(string identifier, string identifierType, List<string> attributes = default(List<string>), string language = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await GetInstrumentBackgroundTextListWithHttpInfoAsync(identifier, identifierType, attributes, language, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Background texts of an instrument. Background texts of an instrument.
        /// </summary>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifier"></param>
        /// <param name="identifierType"></param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="language"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse20044)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20044>> GetInstrumentBackgroundTextListWithHttpInfoAsync(string identifier, string identifierType, List<string> attributes = default(List<string>), string language = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'identifier' is set
            if (identifier == null)
            {
                throw new FactSet.SDK.RealTimeQuotes.Client.ApiException(400, "Missing required parameter 'identifier' when calling InstrumentApi->GetInstrumentBackgroundTextList");
            }

            // verify the required parameter 'identifierType' is set
            if (identifierType == null)
            {
                throw new FactSet.SDK.RealTimeQuotes.Client.ApiException(400, "Missing required parameter 'identifierType' when calling InstrumentApi->GetInstrumentBackgroundTextList");
            }


            FactSet.SDK.RealTimeQuotes.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.RealTimeQuotes.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.RealTimeQuotes.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.RealTimeQuotes.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeQuotes.Client.ClientUtils.ParameterToMultiMap("", "identifier", identifier));
            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeQuotes.Client.ClientUtils.ParameterToMultiMap("", "identifierType", identifierType));
            if (attributes != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeQuotes.Client.ClientUtils.ParameterToMultiMap("csv", "_attributes", attributes));
            }
            if (language != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeQuotes.Client.ClientUtils.ParameterToMultiMap("", "_language", language));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.RealTimeQuotes.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = GetInstrumentBackgroundTextListResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<InlineResponse20044>("/instrument/backgroundText/list", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetInstrumentBackgroundTextList", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Compliance properties of an instrument. Compliance properties of an instrument.
        /// </summary>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifier"></param>
        /// <param name="identifierType"></param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="language"> (optional)</param>
        /// <returns>InlineResponse20049</returns>
        public InlineResponse20049 GetInstrumentCompliancePropertyListByInstrument(string identifier, string identifierType, List<string> attributes = default(List<string>), string language = default(string))
        {
            var localVarResponse = GetInstrumentCompliancePropertyListByInstrumentWithHttpInfo(identifier, identifierType, attributes, language);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Compliance properties of an instrument. Compliance properties of an instrument.
        /// </summary>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifier"></param>
        /// <param name="identifierType"></param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="language"> (optional)</param>
        /// <returns>ApiResponse of InlineResponse20049</returns>
        public ApiResponse<InlineResponse20049> GetInstrumentCompliancePropertyListByInstrumentWithHttpInfo(string identifier, string identifierType, List<string> attributes = default(List<string>), string language = default(string))
        {
            // verify the required parameter 'identifier' is set
            if (identifier == null)
            {
                throw new FactSet.SDK.RealTimeQuotes.Client.ApiException(400, "Missing required parameter 'identifier' when calling InstrumentApi->GetInstrumentCompliancePropertyListByInstrument");
            }

            // verify the required parameter 'identifierType' is set
            if (identifierType == null)
            {
                throw new FactSet.SDK.RealTimeQuotes.Client.ApiException(400, "Missing required parameter 'identifierType' when calling InstrumentApi->GetInstrumentCompliancePropertyListByInstrument");
            }

            FactSet.SDK.RealTimeQuotes.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.RealTimeQuotes.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.RealTimeQuotes.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.RealTimeQuotes.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeQuotes.Client.ClientUtils.ParameterToMultiMap("", "identifier", identifier));
            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeQuotes.Client.ClientUtils.ParameterToMultiMap("", "identifierType", identifierType));
            if (attributes != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeQuotes.Client.ClientUtils.ParameterToMultiMap("csv", "_attributes", attributes));
            }
            if (language != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeQuotes.Client.ClientUtils.ParameterToMultiMap("", "_language", language));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.RealTimeQuotes.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = GetInstrumentCompliancePropertyListByInstrumentResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Get<
            InlineResponse20049>("/instrument/complianceProperty/listByInstrument", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetInstrumentCompliancePropertyListByInstrument", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// Compliance properties of an instrument. Compliance properties of an instrument.
        /// </summary>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifier"></param>
        /// <param name="identifierType"></param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="language"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse20049</returns>
        public async System.Threading.Tasks.Task<InlineResponse20049>GetInstrumentCompliancePropertyListByInstrumentAsync(string identifier, string identifierType, List<string> attributes = default(List<string>), string language = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await GetInstrumentCompliancePropertyListByInstrumentWithHttpInfoAsync(identifier, identifierType, attributes, language, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Compliance properties of an instrument. Compliance properties of an instrument.
        /// </summary>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifier"></param>
        /// <param name="identifierType"></param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="language"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse20049)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20049>> GetInstrumentCompliancePropertyListByInstrumentWithHttpInfoAsync(string identifier, string identifierType, List<string> attributes = default(List<string>), string language = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'identifier' is set
            if (identifier == null)
            {
                throw new FactSet.SDK.RealTimeQuotes.Client.ApiException(400, "Missing required parameter 'identifier' when calling InstrumentApi->GetInstrumentCompliancePropertyListByInstrument");
            }

            // verify the required parameter 'identifierType' is set
            if (identifierType == null)
            {
                throw new FactSet.SDK.RealTimeQuotes.Client.ApiException(400, "Missing required parameter 'identifierType' when calling InstrumentApi->GetInstrumentCompliancePropertyListByInstrument");
            }


            FactSet.SDK.RealTimeQuotes.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.RealTimeQuotes.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.RealTimeQuotes.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.RealTimeQuotes.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeQuotes.Client.ClientUtils.ParameterToMultiMap("", "identifier", identifier));
            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeQuotes.Client.ClientUtils.ParameterToMultiMap("", "identifierType", identifierType));
            if (attributes != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeQuotes.Client.ClientUtils.ParameterToMultiMap("csv", "_attributes", attributes));
            }
            if (language != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeQuotes.Client.ClientUtils.ParameterToMultiMap("", "_language", language));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.RealTimeQuotes.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = GetInstrumentCompliancePropertyListByInstrumentResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<InlineResponse20049>("/instrument/complianceProperty/listByInstrument", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetInstrumentCompliancePropertyListByInstrument", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Composite instrument and its components. Composite instrument and its components.
        /// </summary>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifier"></param>
        /// <param name="identifierType"></param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="language"> (optional)</param>
        /// <returns>InlineResponse20050</returns>
        public InlineResponse20050 GetInstrumentCompositeGet(string identifier, string identifierType, List<string> attributes = default(List<string>), string language = default(string))
        {
            var localVarResponse = GetInstrumentCompositeGetWithHttpInfo(identifier, identifierType, attributes, language);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Composite instrument and its components. Composite instrument and its components.
        /// </summary>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifier"></param>
        /// <param name="identifierType"></param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="language"> (optional)</param>
        /// <returns>ApiResponse of InlineResponse20050</returns>
        public ApiResponse<InlineResponse20050> GetInstrumentCompositeGetWithHttpInfo(string identifier, string identifierType, List<string> attributes = default(List<string>), string language = default(string))
        {
            // verify the required parameter 'identifier' is set
            if (identifier == null)
            {
                throw new FactSet.SDK.RealTimeQuotes.Client.ApiException(400, "Missing required parameter 'identifier' when calling InstrumentApi->GetInstrumentCompositeGet");
            }

            // verify the required parameter 'identifierType' is set
            if (identifierType == null)
            {
                throw new FactSet.SDK.RealTimeQuotes.Client.ApiException(400, "Missing required parameter 'identifierType' when calling InstrumentApi->GetInstrumentCompositeGet");
            }

            FactSet.SDK.RealTimeQuotes.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.RealTimeQuotes.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.RealTimeQuotes.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.RealTimeQuotes.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeQuotes.Client.ClientUtils.ParameterToMultiMap("", "identifier", identifier));
            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeQuotes.Client.ClientUtils.ParameterToMultiMap("", "identifierType", identifierType));
            if (attributes != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeQuotes.Client.ClientUtils.ParameterToMultiMap("csv", "_attributes", attributes));
            }
            if (language != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeQuotes.Client.ClientUtils.ParameterToMultiMap("", "_language", language));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.RealTimeQuotes.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = GetInstrumentCompositeGetResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Get<
            InlineResponse20050>("/instrument/composite/get", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetInstrumentCompositeGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// Composite instrument and its components. Composite instrument and its components.
        /// </summary>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifier"></param>
        /// <param name="identifierType"></param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="language"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse20050</returns>
        public async System.Threading.Tasks.Task<InlineResponse20050>GetInstrumentCompositeGetAsync(string identifier, string identifierType, List<string> attributes = default(List<string>), string language = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await GetInstrumentCompositeGetWithHttpInfoAsync(identifier, identifierType, attributes, language, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Composite instrument and its components. Composite instrument and its components.
        /// </summary>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifier"></param>
        /// <param name="identifierType"></param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="language"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse20050)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20050>> GetInstrumentCompositeGetWithHttpInfoAsync(string identifier, string identifierType, List<string> attributes = default(List<string>), string language = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'identifier' is set
            if (identifier == null)
            {
                throw new FactSet.SDK.RealTimeQuotes.Client.ApiException(400, "Missing required parameter 'identifier' when calling InstrumentApi->GetInstrumentCompositeGet");
            }

            // verify the required parameter 'identifierType' is set
            if (identifierType == null)
            {
                throw new FactSet.SDK.RealTimeQuotes.Client.ApiException(400, "Missing required parameter 'identifierType' when calling InstrumentApi->GetInstrumentCompositeGet");
            }


            FactSet.SDK.RealTimeQuotes.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.RealTimeQuotes.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.RealTimeQuotes.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.RealTimeQuotes.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeQuotes.Client.ClientUtils.ParameterToMultiMap("", "identifier", identifier));
            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeQuotes.Client.ClientUtils.ParameterToMultiMap("", "identifierType", identifierType));
            if (attributes != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeQuotes.Client.ClientUtils.ParameterToMultiMap("csv", "_attributes", attributes));
            }
            if (language != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeQuotes.Client.ClientUtils.ParameterToMultiMap("", "_language", language));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.RealTimeQuotes.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = GetInstrumentCompositeGetResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<InlineResponse20050>("/instrument/composite/get", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetInstrumentCompositeGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List of day count convention types. List of day count convention types.
        /// </summary>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="language"> (optional)</param>
        /// <returns>InlineResponse20052</returns>
        public InlineResponse20052 GetInstrumentCouponDayCountConventionTypeList(List<string> attributes = default(List<string>), string language = default(string))
        {
            var localVarResponse = GetInstrumentCouponDayCountConventionTypeListWithHttpInfo(attributes, language);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List of day count convention types. List of day count convention types.
        /// </summary>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="language"> (optional)</param>
        /// <returns>ApiResponse of InlineResponse20052</returns>
        public ApiResponse<InlineResponse20052> GetInstrumentCouponDayCountConventionTypeListWithHttpInfo(List<string> attributes = default(List<string>), string language = default(string))
        {
            FactSet.SDK.RealTimeQuotes.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.RealTimeQuotes.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.RealTimeQuotes.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.RealTimeQuotes.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (attributes != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeQuotes.Client.ClientUtils.ParameterToMultiMap("csv", "_attributes", attributes));
            }
            if (language != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeQuotes.Client.ClientUtils.ParameterToMultiMap("", "_language", language));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.RealTimeQuotes.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = GetInstrumentCouponDayCountConventionTypeListResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Get<
            InlineResponse20052>("/instrument/coupon/dayCountConvention/type/list", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetInstrumentCouponDayCountConventionTypeList", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// List of day count convention types. List of day count convention types.
        /// </summary>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="language"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse20052</returns>
        public async System.Threading.Tasks.Task<InlineResponse20052>GetInstrumentCouponDayCountConventionTypeListAsync(List<string> attributes = default(List<string>), string language = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await GetInstrumentCouponDayCountConventionTypeListWithHttpInfoAsync(attributes, language, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List of day count convention types. List of day count convention types.
        /// </summary>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="language"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse20052)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20052>> GetInstrumentCouponDayCountConventionTypeListWithHttpInfoAsync(List<string> attributes = default(List<string>), string language = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            FactSet.SDK.RealTimeQuotes.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.RealTimeQuotes.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.RealTimeQuotes.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.RealTimeQuotes.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (attributes != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeQuotes.Client.ClientUtils.ParameterToMultiMap("csv", "_attributes", attributes));
            }
            if (language != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeQuotes.Client.ClientUtils.ParameterToMultiMap("", "_language", language));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.RealTimeQuotes.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = GetInstrumentCouponDayCountConventionTypeListResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<InlineResponse20052>("/instrument/coupon/dayCountConvention/type/list", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetInstrumentCouponDayCountConventionTypeList", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List of interest rate types. List of interest rate types.
        /// </summary>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="language"> (optional)</param>
        /// <returns>InlineResponse20053</returns>
        public InlineResponse20053 GetInstrumentCouponInterestRateTypeList(List<string> attributes = default(List<string>), string language = default(string))
        {
            var localVarResponse = GetInstrumentCouponInterestRateTypeListWithHttpInfo(attributes, language);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List of interest rate types. List of interest rate types.
        /// </summary>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="language"> (optional)</param>
        /// <returns>ApiResponse of InlineResponse20053</returns>
        public ApiResponse<InlineResponse20053> GetInstrumentCouponInterestRateTypeListWithHttpInfo(List<string> attributes = default(List<string>), string language = default(string))
        {
            FactSet.SDK.RealTimeQuotes.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.RealTimeQuotes.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.RealTimeQuotes.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.RealTimeQuotes.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (attributes != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeQuotes.Client.ClientUtils.ParameterToMultiMap("csv", "_attributes", attributes));
            }
            if (language != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeQuotes.Client.ClientUtils.ParameterToMultiMap("", "_language", language));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.RealTimeQuotes.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = GetInstrumentCouponInterestRateTypeListResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Get<
            InlineResponse20053>("/instrument/coupon/interestRate/type/list", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetInstrumentCouponInterestRateTypeList", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// List of interest rate types. List of interest rate types.
        /// </summary>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="language"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse20053</returns>
        public async System.Threading.Tasks.Task<InlineResponse20053>GetInstrumentCouponInterestRateTypeListAsync(List<string> attributes = default(List<string>), string language = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await GetInstrumentCouponInterestRateTypeListWithHttpInfoAsync(attributes, language, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List of interest rate types. List of interest rate types.
        /// </summary>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="language"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse20053)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20053>> GetInstrumentCouponInterestRateTypeListWithHttpInfoAsync(List<string> attributes = default(List<string>), string language = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            FactSet.SDK.RealTimeQuotes.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.RealTimeQuotes.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.RealTimeQuotes.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.RealTimeQuotes.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (attributes != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeQuotes.Client.ClientUtils.ParameterToMultiMap("csv", "_attributes", attributes));
            }
            if (language != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeQuotes.Client.ClientUtils.ParameterToMultiMap("", "_language", language));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.RealTimeQuotes.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = GetInstrumentCouponInterestRateTypeListResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<InlineResponse20053>("/instrument/coupon/interestRate/type/list", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetInstrumentCouponInterestRateTypeList", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Interest rate details for selected periods of an interest-bearing instrument. Interest rate details for selected periods of an interest-bearing instrument; any other instrument yields empty values.
        /// </summary>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifier"></param>
        /// <param name="identifierType"></param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="language"> (optional)</param>
        /// <returns>InlineResponse20054</returns>
        public InlineResponse20054 GetInstrumentCouponKeyDataGet(string identifier, string identifierType, List<string> attributes = default(List<string>), string language = default(string))
        {
            var localVarResponse = GetInstrumentCouponKeyDataGetWithHttpInfo(identifier, identifierType, attributes, language);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Interest rate details for selected periods of an interest-bearing instrument. Interest rate details for selected periods of an interest-bearing instrument; any other instrument yields empty values.
        /// </summary>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifier"></param>
        /// <param name="identifierType"></param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="language"> (optional)</param>
        /// <returns>ApiResponse of InlineResponse20054</returns>
        public ApiResponse<InlineResponse20054> GetInstrumentCouponKeyDataGetWithHttpInfo(string identifier, string identifierType, List<string> attributes = default(List<string>), string language = default(string))
        {
            // verify the required parameter 'identifier' is set
            if (identifier == null)
            {
                throw new FactSet.SDK.RealTimeQuotes.Client.ApiException(400, "Missing required parameter 'identifier' when calling InstrumentApi->GetInstrumentCouponKeyDataGet");
            }

            // verify the required parameter 'identifierType' is set
            if (identifierType == null)
            {
                throw new FactSet.SDK.RealTimeQuotes.Client.ApiException(400, "Missing required parameter 'identifierType' when calling InstrumentApi->GetInstrumentCouponKeyDataGet");
            }

            FactSet.SDK.RealTimeQuotes.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.RealTimeQuotes.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.RealTimeQuotes.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.RealTimeQuotes.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeQuotes.Client.ClientUtils.ParameterToMultiMap("", "identifier", identifier));
            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeQuotes.Client.ClientUtils.ParameterToMultiMap("", "identifierType", identifierType));
            if (attributes != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeQuotes.Client.ClientUtils.ParameterToMultiMap("csv", "_attributes", attributes));
            }
            if (language != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeQuotes.Client.ClientUtils.ParameterToMultiMap("", "_language", language));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.RealTimeQuotes.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = GetInstrumentCouponKeyDataGetResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Get<
            InlineResponse20054>("/instrument/coupon/keyData/get", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetInstrumentCouponKeyDataGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// Interest rate details for selected periods of an interest-bearing instrument. Interest rate details for selected periods of an interest-bearing instrument; any other instrument yields empty values.
        /// </summary>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifier"></param>
        /// <param name="identifierType"></param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="language"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse20054</returns>
        public async System.Threading.Tasks.Task<InlineResponse20054>GetInstrumentCouponKeyDataGetAsync(string identifier, string identifierType, List<string> attributes = default(List<string>), string language = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await GetInstrumentCouponKeyDataGetWithHttpInfoAsync(identifier, identifierType, attributes, language, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Interest rate details for selected periods of an interest-bearing instrument. Interest rate details for selected periods of an interest-bearing instrument; any other instrument yields empty values.
        /// </summary>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifier"></param>
        /// <param name="identifierType"></param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="language"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse20054)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20054>> GetInstrumentCouponKeyDataGetWithHttpInfoAsync(string identifier, string identifierType, List<string> attributes = default(List<string>), string language = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'identifier' is set
            if (identifier == null)
            {
                throw new FactSet.SDK.RealTimeQuotes.Client.ApiException(400, "Missing required parameter 'identifier' when calling InstrumentApi->GetInstrumentCouponKeyDataGet");
            }

            // verify the required parameter 'identifierType' is set
            if (identifierType == null)
            {
                throw new FactSet.SDK.RealTimeQuotes.Client.ApiException(400, "Missing required parameter 'identifierType' when calling InstrumentApi->GetInstrumentCouponKeyDataGet");
            }


            FactSet.SDK.RealTimeQuotes.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.RealTimeQuotes.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.RealTimeQuotes.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.RealTimeQuotes.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeQuotes.Client.ClientUtils.ParameterToMultiMap("", "identifier", identifier));
            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeQuotes.Client.ClientUtils.ParameterToMultiMap("", "identifierType", identifierType));
            if (attributes != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeQuotes.Client.ClientUtils.ParameterToMultiMap("csv", "_attributes", attributes));
            }
            if (language != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeQuotes.Client.ClientUtils.ParameterToMultiMap("", "_language", language));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.RealTimeQuotes.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = GetInstrumentCouponKeyDataGetResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<InlineResponse20054>("/instrument/coupon/keyData/get", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetInstrumentCouponKeyDataGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List of coupons for an interest-bearing instrument. List of coupons for an interest-bearing instrument; any other instrument yields empty values. The endpoint provides details regarding the coupon period, the respective interest rate, and payable amount (the latter only for instruments with a fixed nominal value). The list of coupons is generally not available for a perpetual, i.e. without a predefined maturity date, interst-bearing instrument.   If there is no entitled provider supplying a full list of coupons, the list will be synthesized from summary data available from entitled suppliers (if any). Since the exact product terms are not known, e.g. the handling of holidays and weekends, the list may be imprecise.
        /// </summary>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifier"></param>
        /// <param name="identifierType"></param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="language"> (optional)</param>
        /// <returns>InlineResponse20051</returns>
        public InlineResponse20051 GetInstrumentCouponList(string identifier, string identifierType, List<string> attributes = default(List<string>), string language = default(string))
        {
            var localVarResponse = GetInstrumentCouponListWithHttpInfo(identifier, identifierType, attributes, language);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List of coupons for an interest-bearing instrument. List of coupons for an interest-bearing instrument; any other instrument yields empty values. The endpoint provides details regarding the coupon period, the respective interest rate, and payable amount (the latter only for instruments with a fixed nominal value). The list of coupons is generally not available for a perpetual, i.e. without a predefined maturity date, interst-bearing instrument.   If there is no entitled provider supplying a full list of coupons, the list will be synthesized from summary data available from entitled suppliers (if any). Since the exact product terms are not known, e.g. the handling of holidays and weekends, the list may be imprecise.
        /// </summary>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifier"></param>
        /// <param name="identifierType"></param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="language"> (optional)</param>
        /// <returns>ApiResponse of InlineResponse20051</returns>
        public ApiResponse<InlineResponse20051> GetInstrumentCouponListWithHttpInfo(string identifier, string identifierType, List<string> attributes = default(List<string>), string language = default(string))
        {
            // verify the required parameter 'identifier' is set
            if (identifier == null)
            {
                throw new FactSet.SDK.RealTimeQuotes.Client.ApiException(400, "Missing required parameter 'identifier' when calling InstrumentApi->GetInstrumentCouponList");
            }

            // verify the required parameter 'identifierType' is set
            if (identifierType == null)
            {
                throw new FactSet.SDK.RealTimeQuotes.Client.ApiException(400, "Missing required parameter 'identifierType' when calling InstrumentApi->GetInstrumentCouponList");
            }

            FactSet.SDK.RealTimeQuotes.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.RealTimeQuotes.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.RealTimeQuotes.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.RealTimeQuotes.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeQuotes.Client.ClientUtils.ParameterToMultiMap("", "identifier", identifier));
            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeQuotes.Client.ClientUtils.ParameterToMultiMap("", "identifierType", identifierType));
            if (attributes != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeQuotes.Client.ClientUtils.ParameterToMultiMap("csv", "_attributes", attributes));
            }
            if (language != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeQuotes.Client.ClientUtils.ParameterToMultiMap("", "_language", language));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.RealTimeQuotes.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = GetInstrumentCouponListResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Get<
            InlineResponse20051>("/instrument/coupon/list", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetInstrumentCouponList", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// List of coupons for an interest-bearing instrument. List of coupons for an interest-bearing instrument; any other instrument yields empty values. The endpoint provides details regarding the coupon period, the respective interest rate, and payable amount (the latter only for instruments with a fixed nominal value). The list of coupons is generally not available for a perpetual, i.e. without a predefined maturity date, interst-bearing instrument.   If there is no entitled provider supplying a full list of coupons, the list will be synthesized from summary data available from entitled suppliers (if any). Since the exact product terms are not known, e.g. the handling of holidays and weekends, the list may be imprecise.
        /// </summary>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifier"></param>
        /// <param name="identifierType"></param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="language"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse20051</returns>
        public async System.Threading.Tasks.Task<InlineResponse20051>GetInstrumentCouponListAsync(string identifier, string identifierType, List<string> attributes = default(List<string>), string language = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await GetInstrumentCouponListWithHttpInfoAsync(identifier, identifierType, attributes, language, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List of coupons for an interest-bearing instrument. List of coupons for an interest-bearing instrument; any other instrument yields empty values. The endpoint provides details regarding the coupon period, the respective interest rate, and payable amount (the latter only for instruments with a fixed nominal value). The list of coupons is generally not available for a perpetual, i.e. without a predefined maturity date, interst-bearing instrument.   If there is no entitled provider supplying a full list of coupons, the list will be synthesized from summary data available from entitled suppliers (if any). Since the exact product terms are not known, e.g. the handling of holidays and weekends, the list may be imprecise.
        /// </summary>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifier"></param>
        /// <param name="identifierType"></param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="language"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse20051)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20051>> GetInstrumentCouponListWithHttpInfoAsync(string identifier, string identifierType, List<string> attributes = default(List<string>), string language = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'identifier' is set
            if (identifier == null)
            {
                throw new FactSet.SDK.RealTimeQuotes.Client.ApiException(400, "Missing required parameter 'identifier' when calling InstrumentApi->GetInstrumentCouponList");
            }

            // verify the required parameter 'identifierType' is set
            if (identifierType == null)
            {
                throw new FactSet.SDK.RealTimeQuotes.Client.ApiException(400, "Missing required parameter 'identifierType' when calling InstrumentApi->GetInstrumentCouponList");
            }


            FactSet.SDK.RealTimeQuotes.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.RealTimeQuotes.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.RealTimeQuotes.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.RealTimeQuotes.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeQuotes.Client.ClientUtils.ParameterToMultiMap("", "identifier", identifier));
            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeQuotes.Client.ClientUtils.ParameterToMultiMap("", "identifierType", identifierType));
            if (attributes != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeQuotes.Client.ClientUtils.ParameterToMultiMap("csv", "_attributes", attributes));
            }
            if (language != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeQuotes.Client.ClientUtils.ParameterToMultiMap("", "_language", language));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.RealTimeQuotes.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = GetInstrumentCouponListResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<InlineResponse20051>("/instrument/coupon/list", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetInstrumentCouponList", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Translate ISIN to instrument. Translate a given ISIN to the respective most recent instrument identifier, retrieved from the Cross Reference Service.
        /// </summary>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="isin"></param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <returns>InlineResponse20055</returns>
        public InlineResponse20055 GetInstrumentCrossReferenceGetByISIN(string isin, List<string> attributes = default(List<string>))
        {
            var localVarResponse = GetInstrumentCrossReferenceGetByISINWithHttpInfo(isin, attributes);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Translate ISIN to instrument. Translate a given ISIN to the respective most recent instrument identifier, retrieved from the Cross Reference Service.
        /// </summary>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="isin"></param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <returns>ApiResponse of InlineResponse20055</returns>
        public ApiResponse<InlineResponse20055> GetInstrumentCrossReferenceGetByISINWithHttpInfo(string isin, List<string> attributes = default(List<string>))
        {
            // verify the required parameter 'isin' is set
            if (isin == null)
            {
                throw new FactSet.SDK.RealTimeQuotes.Client.ApiException(400, "Missing required parameter 'isin' when calling InstrumentApi->GetInstrumentCrossReferenceGetByISIN");
            }

            FactSet.SDK.RealTimeQuotes.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.RealTimeQuotes.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.RealTimeQuotes.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.RealTimeQuotes.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeQuotes.Client.ClientUtils.ParameterToMultiMap("", "isin", isin));
            if (attributes != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeQuotes.Client.ClientUtils.ParameterToMultiMap("csv", "_attributes", attributes));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.RealTimeQuotes.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = GetInstrumentCrossReferenceGetByISINResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Get<
            InlineResponse20055>("/instrument/crossReference/getByISIN", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetInstrumentCrossReferenceGetByISIN", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// Translate ISIN to instrument. Translate a given ISIN to the respective most recent instrument identifier, retrieved from the Cross Reference Service.
        /// </summary>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="isin"></param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse20055</returns>
        public async System.Threading.Tasks.Task<InlineResponse20055>GetInstrumentCrossReferenceGetByISINAsync(string isin, List<string> attributes = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await GetInstrumentCrossReferenceGetByISINWithHttpInfoAsync(isin, attributes, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Translate ISIN to instrument. Translate a given ISIN to the respective most recent instrument identifier, retrieved from the Cross Reference Service.
        /// </summary>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="isin"></param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse20055)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20055>> GetInstrumentCrossReferenceGetByISINWithHttpInfoAsync(string isin, List<string> attributes = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'isin' is set
            if (isin == null)
            {
                throw new FactSet.SDK.RealTimeQuotes.Client.ApiException(400, "Missing required parameter 'isin' when calling InstrumentApi->GetInstrumentCrossReferenceGetByISIN");
            }


            FactSet.SDK.RealTimeQuotes.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.RealTimeQuotes.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.RealTimeQuotes.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.RealTimeQuotes.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeQuotes.Client.ClientUtils.ParameterToMultiMap("", "isin", isin));
            if (attributes != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeQuotes.Client.ClientUtils.ParameterToMultiMap("csv", "_attributes", attributes));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.RealTimeQuotes.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = GetInstrumentCrossReferenceGetByISINResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<InlineResponse20055>("/instrument/crossReference/getByISIN", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetInstrumentCrossReferenceGetByISIN", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Translate WKN to instrument. Translate a given WKN to the respective most recent instrument identifier, retrieved from the Cross Reference Service.
        /// </summary>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="wkn"></param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <returns>InlineResponse20055</returns>
        public InlineResponse20055 GetInstrumentCrossReferenceGetByWKN(string wkn, List<string> attributes = default(List<string>))
        {
            var localVarResponse = GetInstrumentCrossReferenceGetByWKNWithHttpInfo(wkn, attributes);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Translate WKN to instrument. Translate a given WKN to the respective most recent instrument identifier, retrieved from the Cross Reference Service.
        /// </summary>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="wkn"></param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <returns>ApiResponse of InlineResponse20055</returns>
        public ApiResponse<InlineResponse20055> GetInstrumentCrossReferenceGetByWKNWithHttpInfo(string wkn, List<string> attributes = default(List<string>))
        {
            // verify the required parameter 'wkn' is set
            if (wkn == null)
            {
                throw new FactSet.SDK.RealTimeQuotes.Client.ApiException(400, "Missing required parameter 'wkn' when calling InstrumentApi->GetInstrumentCrossReferenceGetByWKN");
            }

            FactSet.SDK.RealTimeQuotes.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.RealTimeQuotes.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.RealTimeQuotes.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.RealTimeQuotes.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeQuotes.Client.ClientUtils.ParameterToMultiMap("", "wkn", wkn));
            if (attributes != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeQuotes.Client.ClientUtils.ParameterToMultiMap("csv", "_attributes", attributes));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.RealTimeQuotes.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = GetInstrumentCrossReferenceGetByWKNResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Get<
            InlineResponse20055>("/instrument/crossReference/getByWKN", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetInstrumentCrossReferenceGetByWKN", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// Translate WKN to instrument. Translate a given WKN to the respective most recent instrument identifier, retrieved from the Cross Reference Service.
        /// </summary>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="wkn"></param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse20055</returns>
        public async System.Threading.Tasks.Task<InlineResponse20055>GetInstrumentCrossReferenceGetByWKNAsync(string wkn, List<string> attributes = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await GetInstrumentCrossReferenceGetByWKNWithHttpInfoAsync(wkn, attributes, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Translate WKN to instrument. Translate a given WKN to the respective most recent instrument identifier, retrieved from the Cross Reference Service.
        /// </summary>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="wkn"></param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse20055)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20055>> GetInstrumentCrossReferenceGetByWKNWithHttpInfoAsync(string wkn, List<string> attributes = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'wkn' is set
            if (wkn == null)
            {
                throw new FactSet.SDK.RealTimeQuotes.Client.ApiException(400, "Missing required parameter 'wkn' when calling InstrumentApi->GetInstrumentCrossReferenceGetByWKN");
            }


            FactSet.SDK.RealTimeQuotes.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.RealTimeQuotes.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.RealTimeQuotes.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.RealTimeQuotes.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeQuotes.Client.ClientUtils.ParameterToMultiMap("", "wkn", wkn));
            if (attributes != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeQuotes.Client.ClientUtils.ParameterToMultiMap("csv", "_attributes", attributes));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.RealTimeQuotes.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = GetInstrumentCrossReferenceGetByWKNResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<InlineResponse20055>("/instrument/crossReference/getByWKN", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetInstrumentCrossReferenceGetByWKN", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// ISIN to instrument translation history. Retrieve the complete translation history of a given ISIN to the respective instrument association from the Cross Reference Service. The results are sorted in descending order, starting with the most recent.
        /// </summary>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="isin"></param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="paginationOffset">Non-negative number of entries to skip, or 0 (default). (optional, default to 0M)</param>
        /// <param name="paginationLimit">Non-negative maximum number of entries to return. (optional, default to 10M)</param>
        /// <returns>InlineResponse20058</returns>
        public InlineResponse20058 GetInstrumentCrossReferenceHistoryGetByISIN(string isin, List<string> attributes = default(List<string>), decimal? paginationOffset = default(decimal?), decimal? paginationLimit = default(decimal?))
        {
            var localVarResponse = GetInstrumentCrossReferenceHistoryGetByISINWithHttpInfo(isin, attributes, paginationOffset, paginationLimit);
            return localVarResponse.Data;
        }

        /// <summary>
        /// ISIN to instrument translation history. Retrieve the complete translation history of a given ISIN to the respective instrument association from the Cross Reference Service. The results are sorted in descending order, starting with the most recent.
        /// </summary>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="isin"></param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="paginationOffset">Non-negative number of entries to skip, or 0 (default). (optional, default to 0M)</param>
        /// <param name="paginationLimit">Non-negative maximum number of entries to return. (optional, default to 10M)</param>
        /// <returns>ApiResponse of InlineResponse20058</returns>
        public ApiResponse<InlineResponse20058> GetInstrumentCrossReferenceHistoryGetByISINWithHttpInfo(string isin, List<string> attributes = default(List<string>), decimal? paginationOffset = default(decimal?), decimal? paginationLimit = default(decimal?))
        {
            // verify the required parameter 'isin' is set
            if (isin == null)
            {
                throw new FactSet.SDK.RealTimeQuotes.Client.ApiException(400, "Missing required parameter 'isin' when calling InstrumentApi->GetInstrumentCrossReferenceHistoryGetByISIN");
            }

            FactSet.SDK.RealTimeQuotes.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.RealTimeQuotes.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.RealTimeQuotes.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.RealTimeQuotes.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeQuotes.Client.ClientUtils.ParameterToMultiMap("", "isin", isin));
            if (attributes != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeQuotes.Client.ClientUtils.ParameterToMultiMap("csv", "_attributes", attributes));
            }
            if (paginationOffset != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeQuotes.Client.ClientUtils.ParameterToMultiMap("", "_paginationOffset", paginationOffset));
            }
            if (paginationLimit != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeQuotes.Client.ClientUtils.ParameterToMultiMap("", "_paginationLimit", paginationLimit));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.RealTimeQuotes.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = GetInstrumentCrossReferenceHistoryGetByISINResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Get<
            InlineResponse20058>("/instrument/crossReference/history/getByISIN", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetInstrumentCrossReferenceHistoryGetByISIN", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// ISIN to instrument translation history. Retrieve the complete translation history of a given ISIN to the respective instrument association from the Cross Reference Service. The results are sorted in descending order, starting with the most recent.
        /// </summary>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="isin"></param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="paginationOffset">Non-negative number of entries to skip, or 0 (default). (optional, default to 0M)</param>
        /// <param name="paginationLimit">Non-negative maximum number of entries to return. (optional, default to 10M)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse20058</returns>
        public async System.Threading.Tasks.Task<InlineResponse20058>GetInstrumentCrossReferenceHistoryGetByISINAsync(string isin, List<string> attributes = default(List<string>), decimal? paginationOffset = default(decimal?), decimal? paginationLimit = default(decimal?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await GetInstrumentCrossReferenceHistoryGetByISINWithHttpInfoAsync(isin, attributes, paginationOffset, paginationLimit, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// ISIN to instrument translation history. Retrieve the complete translation history of a given ISIN to the respective instrument association from the Cross Reference Service. The results are sorted in descending order, starting with the most recent.
        /// </summary>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="isin"></param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="paginationOffset">Non-negative number of entries to skip, or 0 (default). (optional, default to 0M)</param>
        /// <param name="paginationLimit">Non-negative maximum number of entries to return. (optional, default to 10M)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse20058)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20058>> GetInstrumentCrossReferenceHistoryGetByISINWithHttpInfoAsync(string isin, List<string> attributes = default(List<string>), decimal? paginationOffset = default(decimal?), decimal? paginationLimit = default(decimal?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'isin' is set
            if (isin == null)
            {
                throw new FactSet.SDK.RealTimeQuotes.Client.ApiException(400, "Missing required parameter 'isin' when calling InstrumentApi->GetInstrumentCrossReferenceHistoryGetByISIN");
            }


            FactSet.SDK.RealTimeQuotes.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.RealTimeQuotes.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.RealTimeQuotes.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.RealTimeQuotes.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeQuotes.Client.ClientUtils.ParameterToMultiMap("", "isin", isin));
            if (attributes != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeQuotes.Client.ClientUtils.ParameterToMultiMap("csv", "_attributes", attributes));
            }
            if (paginationOffset != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeQuotes.Client.ClientUtils.ParameterToMultiMap("", "_paginationOffset", paginationOffset));
            }
            if (paginationLimit != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeQuotes.Client.ClientUtils.ParameterToMultiMap("", "_paginationLimit", paginationLimit));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.RealTimeQuotes.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = GetInstrumentCrossReferenceHistoryGetByISINResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<InlineResponse20058>("/instrument/crossReference/history/getByISIN", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetInstrumentCrossReferenceHistoryGetByISIN", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// WKN to instrument translation history. Retrieve the complete translation history of a given WKN to the respective instrument association from the Cross Reference Service. The results are sorted in descending order, starting with the most recent.
        /// </summary>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="wkn"></param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="paginationOffset">Non-negative number of entries to skip, or 0 (default). (optional, default to 0M)</param>
        /// <param name="paginationLimit">Non-negative maximum number of entries to return. (optional, default to 10M)</param>
        /// <returns>InlineResponse20058</returns>
        public InlineResponse20058 GetInstrumentCrossReferenceHistoryGetByWKN(string wkn, List<string> attributes = default(List<string>), decimal? paginationOffset = default(decimal?), decimal? paginationLimit = default(decimal?))
        {
            var localVarResponse = GetInstrumentCrossReferenceHistoryGetByWKNWithHttpInfo(wkn, attributes, paginationOffset, paginationLimit);
            return localVarResponse.Data;
        }

        /// <summary>
        /// WKN to instrument translation history. Retrieve the complete translation history of a given WKN to the respective instrument association from the Cross Reference Service. The results are sorted in descending order, starting with the most recent.
        /// </summary>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="wkn"></param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="paginationOffset">Non-negative number of entries to skip, or 0 (default). (optional, default to 0M)</param>
        /// <param name="paginationLimit">Non-negative maximum number of entries to return. (optional, default to 10M)</param>
        /// <returns>ApiResponse of InlineResponse20058</returns>
        public ApiResponse<InlineResponse20058> GetInstrumentCrossReferenceHistoryGetByWKNWithHttpInfo(string wkn, List<string> attributes = default(List<string>), decimal? paginationOffset = default(decimal?), decimal? paginationLimit = default(decimal?))
        {
            // verify the required parameter 'wkn' is set
            if (wkn == null)
            {
                throw new FactSet.SDK.RealTimeQuotes.Client.ApiException(400, "Missing required parameter 'wkn' when calling InstrumentApi->GetInstrumentCrossReferenceHistoryGetByWKN");
            }

            FactSet.SDK.RealTimeQuotes.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.RealTimeQuotes.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.RealTimeQuotes.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.RealTimeQuotes.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeQuotes.Client.ClientUtils.ParameterToMultiMap("", "wkn", wkn));
            if (attributes != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeQuotes.Client.ClientUtils.ParameterToMultiMap("csv", "_attributes", attributes));
            }
            if (paginationOffset != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeQuotes.Client.ClientUtils.ParameterToMultiMap("", "_paginationOffset", paginationOffset));
            }
            if (paginationLimit != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeQuotes.Client.ClientUtils.ParameterToMultiMap("", "_paginationLimit", paginationLimit));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.RealTimeQuotes.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = GetInstrumentCrossReferenceHistoryGetByWKNResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Get<
            InlineResponse20058>("/instrument/crossReference/history/getByWKN", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetInstrumentCrossReferenceHistoryGetByWKN", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// WKN to instrument translation history. Retrieve the complete translation history of a given WKN to the respective instrument association from the Cross Reference Service. The results are sorted in descending order, starting with the most recent.
        /// </summary>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="wkn"></param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="paginationOffset">Non-negative number of entries to skip, or 0 (default). (optional, default to 0M)</param>
        /// <param name="paginationLimit">Non-negative maximum number of entries to return. (optional, default to 10M)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse20058</returns>
        public async System.Threading.Tasks.Task<InlineResponse20058>GetInstrumentCrossReferenceHistoryGetByWKNAsync(string wkn, List<string> attributes = default(List<string>), decimal? paginationOffset = default(decimal?), decimal? paginationLimit = default(decimal?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await GetInstrumentCrossReferenceHistoryGetByWKNWithHttpInfoAsync(wkn, attributes, paginationOffset, paginationLimit, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// WKN to instrument translation history. Retrieve the complete translation history of a given WKN to the respective instrument association from the Cross Reference Service. The results are sorted in descending order, starting with the most recent.
        /// </summary>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="wkn"></param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="paginationOffset">Non-negative number of entries to skip, or 0 (default). (optional, default to 0M)</param>
        /// <param name="paginationLimit">Non-negative maximum number of entries to return. (optional, default to 10M)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse20058)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20058>> GetInstrumentCrossReferenceHistoryGetByWKNWithHttpInfoAsync(string wkn, List<string> attributes = default(List<string>), decimal? paginationOffset = default(decimal?), decimal? paginationLimit = default(decimal?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'wkn' is set
            if (wkn == null)
            {
                throw new FactSet.SDK.RealTimeQuotes.Client.ApiException(400, "Missing required parameter 'wkn' when calling InstrumentApi->GetInstrumentCrossReferenceHistoryGetByWKN");
            }


            FactSet.SDK.RealTimeQuotes.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.RealTimeQuotes.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.RealTimeQuotes.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.RealTimeQuotes.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeQuotes.Client.ClientUtils.ParameterToMultiMap("", "wkn", wkn));
            if (attributes != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeQuotes.Client.ClientUtils.ParameterToMultiMap("csv", "_attributes", attributes));
            }
            if (paginationOffset != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeQuotes.Client.ClientUtils.ParameterToMultiMap("", "_paginationOffset", paginationOffset));
            }
            if (paginationLimit != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeQuotes.Client.ClientUtils.ParameterToMultiMap("", "_paginationLimit", paginationLimit));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.RealTimeQuotes.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = GetInstrumentCrossReferenceHistoryGetByWKNResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<InlineResponse20058>("/instrument/crossReference/history/getByWKN", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetInstrumentCrossReferenceHistoryGetByWKN", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve an exchange rate instrument identifier. Retrieve an exchange rate instrument identifier using the identifier of the main currencies represented by that exchange rate.    An error is returned if one of the provided parameters is invalid or if no instrument is associated with the given combination of parameters.
        /// </summary>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="target"></param>
        /// <param name="source"></param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="language"> (optional)</param>
        /// <returns>InlineResponse20059</returns>
        public InlineResponse20059 GetInstrumentExchangeRateGet(decimal target, decimal source, List<string> attributes = default(List<string>), string language = default(string))
        {
            var localVarResponse = GetInstrumentExchangeRateGetWithHttpInfo(target, source, attributes, language);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve an exchange rate instrument identifier. Retrieve an exchange rate instrument identifier using the identifier of the main currencies represented by that exchange rate.    An error is returned if one of the provided parameters is invalid or if no instrument is associated with the given combination of parameters.
        /// </summary>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="target"></param>
        /// <param name="source"></param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="language"> (optional)</param>
        /// <returns>ApiResponse of InlineResponse20059</returns>
        public ApiResponse<InlineResponse20059> GetInstrumentExchangeRateGetWithHttpInfo(decimal target, decimal source, List<string> attributes = default(List<string>), string language = default(string))
        {
            FactSet.SDK.RealTimeQuotes.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.RealTimeQuotes.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.RealTimeQuotes.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.RealTimeQuotes.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeQuotes.Client.ClientUtils.ParameterToMultiMap("", "target", target));
            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeQuotes.Client.ClientUtils.ParameterToMultiMap("", "source", source));
            if (attributes != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeQuotes.Client.ClientUtils.ParameterToMultiMap("csv", "_attributes", attributes));
            }
            if (language != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeQuotes.Client.ClientUtils.ParameterToMultiMap("", "_language", language));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.RealTimeQuotes.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = GetInstrumentExchangeRateGetResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Get<
            InlineResponse20059>("/instrument/exchangeRate/get", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetInstrumentExchangeRateGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// Retrieve an exchange rate instrument identifier. Retrieve an exchange rate instrument identifier using the identifier of the main currencies represented by that exchange rate.    An error is returned if one of the provided parameters is invalid or if no instrument is associated with the given combination of parameters.
        /// </summary>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="target"></param>
        /// <param name="source"></param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="language"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse20059</returns>
        public async System.Threading.Tasks.Task<InlineResponse20059>GetInstrumentExchangeRateGetAsync(decimal target, decimal source, List<string> attributes = default(List<string>), string language = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await GetInstrumentExchangeRateGetWithHttpInfoAsync(target, source, attributes, language, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve an exchange rate instrument identifier. Retrieve an exchange rate instrument identifier using the identifier of the main currencies represented by that exchange rate.    An error is returned if one of the provided parameters is invalid or if no instrument is associated with the given combination of parameters.
        /// </summary>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="target"></param>
        /// <param name="source"></param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="language"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse20059)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20059>> GetInstrumentExchangeRateGetWithHttpInfoAsync(decimal target, decimal source, List<string> attributes = default(List<string>), string language = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            FactSet.SDK.RealTimeQuotes.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.RealTimeQuotes.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.RealTimeQuotes.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.RealTimeQuotes.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeQuotes.Client.ClientUtils.ParameterToMultiMap("", "target", target));
            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeQuotes.Client.ClientUtils.ParameterToMultiMap("", "source", source));
            if (attributes != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeQuotes.Client.ClientUtils.ParameterToMultiMap("csv", "_attributes", attributes));
            }
            if (language != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeQuotes.Client.ClientUtils.ParameterToMultiMap("", "_language", language));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.RealTimeQuotes.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = GetInstrumentExchangeRateGetResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<InlineResponse20059>("/instrument/exchangeRate/get", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetInstrumentExchangeRateGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve an exchange rate instrument identifier. Retrieve an exchange rate instrument identifier using the ISO 4217 code of the main currencies represented by that exchange rate.   An error is returned if one of the provided parameters is invalid or if no instrument is associated with the given combination of parameters.
        /// </summary>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="target"></param>
        /// <param name="source"></param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="language"> (optional)</param>
        /// <returns>InlineResponse20059</returns>
        public InlineResponse20059 GetInstrumentExchangeRateGetByISOCode(string target, string source, List<string> attributes = default(List<string>), string language = default(string))
        {
            var localVarResponse = GetInstrumentExchangeRateGetByISOCodeWithHttpInfo(target, source, attributes, language);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve an exchange rate instrument identifier. Retrieve an exchange rate instrument identifier using the ISO 4217 code of the main currencies represented by that exchange rate.   An error is returned if one of the provided parameters is invalid or if no instrument is associated with the given combination of parameters.
        /// </summary>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="target"></param>
        /// <param name="source"></param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="language"> (optional)</param>
        /// <returns>ApiResponse of InlineResponse20059</returns>
        public ApiResponse<InlineResponse20059> GetInstrumentExchangeRateGetByISOCodeWithHttpInfo(string target, string source, List<string> attributes = default(List<string>), string language = default(string))
        {
            // verify the required parameter 'target' is set
            if (target == null)
            {
                throw new FactSet.SDK.RealTimeQuotes.Client.ApiException(400, "Missing required parameter 'target' when calling InstrumentApi->GetInstrumentExchangeRateGetByISOCode");
            }

            // verify the required parameter 'source' is set
            if (source == null)
            {
                throw new FactSet.SDK.RealTimeQuotes.Client.ApiException(400, "Missing required parameter 'source' when calling InstrumentApi->GetInstrumentExchangeRateGetByISOCode");
            }

            FactSet.SDK.RealTimeQuotes.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.RealTimeQuotes.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.RealTimeQuotes.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.RealTimeQuotes.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeQuotes.Client.ClientUtils.ParameterToMultiMap("", "target", target));
            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeQuotes.Client.ClientUtils.ParameterToMultiMap("", "source", source));
            if (attributes != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeQuotes.Client.ClientUtils.ParameterToMultiMap("csv", "_attributes", attributes));
            }
            if (language != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeQuotes.Client.ClientUtils.ParameterToMultiMap("", "_language", language));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.RealTimeQuotes.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = GetInstrumentExchangeRateGetByISOCodeResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Get<
            InlineResponse20059>("/instrument/exchangeRate/getByISOCode", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetInstrumentExchangeRateGetByISOCode", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// Retrieve an exchange rate instrument identifier. Retrieve an exchange rate instrument identifier using the ISO 4217 code of the main currencies represented by that exchange rate.   An error is returned if one of the provided parameters is invalid or if no instrument is associated with the given combination of parameters.
        /// </summary>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="target"></param>
        /// <param name="source"></param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="language"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse20059</returns>
        public async System.Threading.Tasks.Task<InlineResponse20059>GetInstrumentExchangeRateGetByISOCodeAsync(string target, string source, List<string> attributes = default(List<string>), string language = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await GetInstrumentExchangeRateGetByISOCodeWithHttpInfoAsync(target, source, attributes, language, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve an exchange rate instrument identifier. Retrieve an exchange rate instrument identifier using the ISO 4217 code of the main currencies represented by that exchange rate.   An error is returned if one of the provided parameters is invalid or if no instrument is associated with the given combination of parameters.
        /// </summary>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="target"></param>
        /// <param name="source"></param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="language"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse20059)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20059>> GetInstrumentExchangeRateGetByISOCodeWithHttpInfoAsync(string target, string source, List<string> attributes = default(List<string>), string language = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'target' is set
            if (target == null)
            {
                throw new FactSet.SDK.RealTimeQuotes.Client.ApiException(400, "Missing required parameter 'target' when calling InstrumentApi->GetInstrumentExchangeRateGetByISOCode");
            }

            // verify the required parameter 'source' is set
            if (source == null)
            {
                throw new FactSet.SDK.RealTimeQuotes.Client.ApiException(400, "Missing required parameter 'source' when calling InstrumentApi->GetInstrumentExchangeRateGetByISOCode");
            }


            FactSet.SDK.RealTimeQuotes.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.RealTimeQuotes.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.RealTimeQuotes.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.RealTimeQuotes.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeQuotes.Client.ClientUtils.ParameterToMultiMap("", "target", target));
            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeQuotes.Client.ClientUtils.ParameterToMultiMap("", "source", source));
            if (attributes != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeQuotes.Client.ClientUtils.ParameterToMultiMap("csv", "_attributes", attributes));
            }
            if (language != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeQuotes.Client.ClientUtils.ParameterToMultiMap("", "_language", language));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.RealTimeQuotes.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = GetInstrumentExchangeRateGetByISOCodeResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<InlineResponse20059>("/instrument/exchangeRate/getByISOCode", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetInstrumentExchangeRateGetByISOCode", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Basic data for an instrument. Basic data for an instrument.
        /// </summary>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifier"></param>
        /// <param name="identifierType"></param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="language"> (optional)</param>
        /// <returns>InlineResponse20042</returns>
        public InlineResponse20042 GetInstrumentGet(string identifier, string identifierType, List<string> attributes = default(List<string>), string language = default(string))
        {
            var localVarResponse = GetInstrumentGetWithHttpInfo(identifier, identifierType, attributes, language);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Basic data for an instrument. Basic data for an instrument.
        /// </summary>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifier"></param>
        /// <param name="identifierType"></param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="language"> (optional)</param>
        /// <returns>ApiResponse of InlineResponse20042</returns>
        public ApiResponse<InlineResponse20042> GetInstrumentGetWithHttpInfo(string identifier, string identifierType, List<string> attributes = default(List<string>), string language = default(string))
        {
            // verify the required parameter 'identifier' is set
            if (identifier == null)
            {
                throw new FactSet.SDK.RealTimeQuotes.Client.ApiException(400, "Missing required parameter 'identifier' when calling InstrumentApi->GetInstrumentGet");
            }

            // verify the required parameter 'identifierType' is set
            if (identifierType == null)
            {
                throw new FactSet.SDK.RealTimeQuotes.Client.ApiException(400, "Missing required parameter 'identifierType' when calling InstrumentApi->GetInstrumentGet");
            }

            FactSet.SDK.RealTimeQuotes.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.RealTimeQuotes.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.RealTimeQuotes.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.RealTimeQuotes.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeQuotes.Client.ClientUtils.ParameterToMultiMap("", "identifier", identifier));
            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeQuotes.Client.ClientUtils.ParameterToMultiMap("", "identifierType", identifierType));
            if (attributes != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeQuotes.Client.ClientUtils.ParameterToMultiMap("csv", "_attributes", attributes));
            }
            if (language != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeQuotes.Client.ClientUtils.ParameterToMultiMap("", "_language", language));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.RealTimeQuotes.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = GetInstrumentGetResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Get<
            InlineResponse20042>("/instrument/get", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetInstrumentGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// Basic data for an instrument. Basic data for an instrument.
        /// </summary>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifier"></param>
        /// <param name="identifierType"></param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="language"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse20042</returns>
        public async System.Threading.Tasks.Task<InlineResponse20042>GetInstrumentGetAsync(string identifier, string identifierType, List<string> attributes = default(List<string>), string language = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await GetInstrumentGetWithHttpInfoAsync(identifier, identifierType, attributes, language, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Basic data for an instrument. Basic data for an instrument.
        /// </summary>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifier"></param>
        /// <param name="identifierType"></param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="language"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse20042)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20042>> GetInstrumentGetWithHttpInfoAsync(string identifier, string identifierType, List<string> attributes = default(List<string>), string language = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'identifier' is set
            if (identifier == null)
            {
                throw new FactSet.SDK.RealTimeQuotes.Client.ApiException(400, "Missing required parameter 'identifier' when calling InstrumentApi->GetInstrumentGet");
            }

            // verify the required parameter 'identifierType' is set
            if (identifierType == null)
            {
                throw new FactSet.SDK.RealTimeQuotes.Client.ApiException(400, "Missing required parameter 'identifierType' when calling InstrumentApi->GetInstrumentGet");
            }


            FactSet.SDK.RealTimeQuotes.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.RealTimeQuotes.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.RealTimeQuotes.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.RealTimeQuotes.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeQuotes.Client.ClientUtils.ParameterToMultiMap("", "identifier", identifier));
            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeQuotes.Client.ClientUtils.ParameterToMultiMap("", "identifierType", identifierType));
            if (attributes != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeQuotes.Client.ClientUtils.ParameterToMultiMap("csv", "_attributes", attributes));
            }
            if (language != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeQuotes.Client.ClientUtils.ParameterToMultiMap("", "_language", language));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.RealTimeQuotes.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = GetInstrumentGetResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<InlineResponse20042>("/instrument/get", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetInstrumentGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Basic data for an instrument. Basic data for an instrument.
        /// </summary>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="language"> (optional)</param>
        /// <returns>InlineResponse20043</returns>
        public InlineResponse20043 GetInstrumentGetByNotation(string id, List<string> attributes = default(List<string>), string language = default(string))
        {
            var localVarResponse = GetInstrumentGetByNotationWithHttpInfo(id, attributes, language);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Basic data for an instrument. Basic data for an instrument.
        /// </summary>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="language"> (optional)</param>
        /// <returns>ApiResponse of InlineResponse20043</returns>
        public ApiResponse<InlineResponse20043> GetInstrumentGetByNotationWithHttpInfo(string id, List<string> attributes = default(List<string>), string language = default(string))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new FactSet.SDK.RealTimeQuotes.Client.ApiException(400, "Missing required parameter 'id' when calling InstrumentApi->GetInstrumentGetByNotation");
            }

            FactSet.SDK.RealTimeQuotes.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.RealTimeQuotes.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.RealTimeQuotes.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.RealTimeQuotes.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeQuotes.Client.ClientUtils.ParameterToMultiMap("", "id", id));
            if (attributes != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeQuotes.Client.ClientUtils.ParameterToMultiMap("csv", "_attributes", attributes));
            }
            if (language != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeQuotes.Client.ClientUtils.ParameterToMultiMap("", "_language", language));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.RealTimeQuotes.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = GetInstrumentGetByNotationResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Get<
            InlineResponse20043>("/instrument/getByNotation", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetInstrumentGetByNotation", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// Basic data for an instrument. Basic data for an instrument.
        /// </summary>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="language"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse20043</returns>
        public async System.Threading.Tasks.Task<InlineResponse20043>GetInstrumentGetByNotationAsync(string id, List<string> attributes = default(List<string>), string language = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await GetInstrumentGetByNotationWithHttpInfoAsync(id, attributes, language, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Basic data for an instrument. Basic data for an instrument.
        /// </summary>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="language"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse20043)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20043>> GetInstrumentGetByNotationWithHttpInfoAsync(string id, List<string> attributes = default(List<string>), string language = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new FactSet.SDK.RealTimeQuotes.Client.ApiException(400, "Missing required parameter 'id' when calling InstrumentApi->GetInstrumentGetByNotation");
            }


            FactSet.SDK.RealTimeQuotes.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.RealTimeQuotes.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.RealTimeQuotes.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.RealTimeQuotes.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeQuotes.Client.ClientUtils.ParameterToMultiMap("", "id", id));
            if (attributes != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeQuotes.Client.ClientUtils.ParameterToMultiMap("csv", "_attributes", attributes));
            }
            if (language != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeQuotes.Client.ClientUtils.ParameterToMultiMap("", "_language", language));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.RealTimeQuotes.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = GetInstrumentGetByNotationResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<InlineResponse20043>("/instrument/getByNotation", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetInstrumentGetByNotation", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Role-specific background texts of legal entities related to an instrument. Role-specific background texts of legal entities related to an instrument.
        /// </summary>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifier"></param>
        /// <param name="identifierType"></param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="language"> (optional)</param>
        /// <returns>InlineResponse20060</returns>
        public InlineResponse20060 GetInstrumentLegalEntityBackgroundTextList(string identifier, string identifierType, List<string> attributes = default(List<string>), string language = default(string))
        {
            var localVarResponse = GetInstrumentLegalEntityBackgroundTextListWithHttpInfo(identifier, identifierType, attributes, language);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Role-specific background texts of legal entities related to an instrument. Role-specific background texts of legal entities related to an instrument.
        /// </summary>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifier"></param>
        /// <param name="identifierType"></param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="language"> (optional)</param>
        /// <returns>ApiResponse of InlineResponse20060</returns>
        public ApiResponse<InlineResponse20060> GetInstrumentLegalEntityBackgroundTextListWithHttpInfo(string identifier, string identifierType, List<string> attributes = default(List<string>), string language = default(string))
        {
            // verify the required parameter 'identifier' is set
            if (identifier == null)
            {
                throw new FactSet.SDK.RealTimeQuotes.Client.ApiException(400, "Missing required parameter 'identifier' when calling InstrumentApi->GetInstrumentLegalEntityBackgroundTextList");
            }

            // verify the required parameter 'identifierType' is set
            if (identifierType == null)
            {
                throw new FactSet.SDK.RealTimeQuotes.Client.ApiException(400, "Missing required parameter 'identifierType' when calling InstrumentApi->GetInstrumentLegalEntityBackgroundTextList");
            }

            FactSet.SDK.RealTimeQuotes.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.RealTimeQuotes.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.RealTimeQuotes.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.RealTimeQuotes.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeQuotes.Client.ClientUtils.ParameterToMultiMap("", "identifier", identifier));
            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeQuotes.Client.ClientUtils.ParameterToMultiMap("", "identifierType", identifierType));
            if (attributes != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeQuotes.Client.ClientUtils.ParameterToMultiMap("csv", "_attributes", attributes));
            }
            if (language != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeQuotes.Client.ClientUtils.ParameterToMultiMap("", "_language", language));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.RealTimeQuotes.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = GetInstrumentLegalEntityBackgroundTextListResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Get<
            InlineResponse20060>("/instrument/legalEntity/backgroundText/list", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetInstrumentLegalEntityBackgroundTextList", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// Role-specific background texts of legal entities related to an instrument. Role-specific background texts of legal entities related to an instrument.
        /// </summary>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifier"></param>
        /// <param name="identifierType"></param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="language"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse20060</returns>
        public async System.Threading.Tasks.Task<InlineResponse20060>GetInstrumentLegalEntityBackgroundTextListAsync(string identifier, string identifierType, List<string> attributes = default(List<string>), string language = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await GetInstrumentLegalEntityBackgroundTextListWithHttpInfoAsync(identifier, identifierType, attributes, language, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Role-specific background texts of legal entities related to an instrument. Role-specific background texts of legal entities related to an instrument.
        /// </summary>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifier"></param>
        /// <param name="identifierType"></param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="language"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse20060)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20060>> GetInstrumentLegalEntityBackgroundTextListWithHttpInfoAsync(string identifier, string identifierType, List<string> attributes = default(List<string>), string language = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'identifier' is set
            if (identifier == null)
            {
                throw new FactSet.SDK.RealTimeQuotes.Client.ApiException(400, "Missing required parameter 'identifier' when calling InstrumentApi->GetInstrumentLegalEntityBackgroundTextList");
            }

            // verify the required parameter 'identifierType' is set
            if (identifierType == null)
            {
                throw new FactSet.SDK.RealTimeQuotes.Client.ApiException(400, "Missing required parameter 'identifierType' when calling InstrumentApi->GetInstrumentLegalEntityBackgroundTextList");
            }


            FactSet.SDK.RealTimeQuotes.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.RealTimeQuotes.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.RealTimeQuotes.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.RealTimeQuotes.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeQuotes.Client.ClientUtils.ParameterToMultiMap("", "identifier", identifier));
            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeQuotes.Client.ClientUtils.ParameterToMultiMap("", "identifierType", identifierType));
            if (attributes != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeQuotes.Client.ClientUtils.ParameterToMultiMap("csv", "_attributes", attributes));
            }
            if (language != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeQuotes.Client.ClientUtils.ParameterToMultiMap("", "_language", language));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.RealTimeQuotes.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = GetInstrumentLegalEntityBackgroundTextListResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<InlineResponse20060>("/instrument/legalEntity/backgroundText/list", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetInstrumentLegalEntityBackgroundTextList", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Role-specific compliance properties of legal entities related to an instrument. Role-specic compliance properties of legal entities related to an instrument.
        /// </summary>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifier"></param>
        /// <param name="identifierType"></param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="language"> (optional)</param>
        /// <returns>InlineResponse20061</returns>
        public InlineResponse20061 GetInstrumentLegalEntityCompliancePropertyList(string identifier, string identifierType, List<string> attributes = default(List<string>), string language = default(string))
        {
            var localVarResponse = GetInstrumentLegalEntityCompliancePropertyListWithHttpInfo(identifier, identifierType, attributes, language);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Role-specific compliance properties of legal entities related to an instrument. Role-specic compliance properties of legal entities related to an instrument.
        /// </summary>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifier"></param>
        /// <param name="identifierType"></param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="language"> (optional)</param>
        /// <returns>ApiResponse of InlineResponse20061</returns>
        public ApiResponse<InlineResponse20061> GetInstrumentLegalEntityCompliancePropertyListWithHttpInfo(string identifier, string identifierType, List<string> attributes = default(List<string>), string language = default(string))
        {
            // verify the required parameter 'identifier' is set
            if (identifier == null)
            {
                throw new FactSet.SDK.RealTimeQuotes.Client.ApiException(400, "Missing required parameter 'identifier' when calling InstrumentApi->GetInstrumentLegalEntityCompliancePropertyList");
            }

            // verify the required parameter 'identifierType' is set
            if (identifierType == null)
            {
                throw new FactSet.SDK.RealTimeQuotes.Client.ApiException(400, "Missing required parameter 'identifierType' when calling InstrumentApi->GetInstrumentLegalEntityCompliancePropertyList");
            }

            FactSet.SDK.RealTimeQuotes.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.RealTimeQuotes.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.RealTimeQuotes.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.RealTimeQuotes.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeQuotes.Client.ClientUtils.ParameterToMultiMap("", "identifier", identifier));
            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeQuotes.Client.ClientUtils.ParameterToMultiMap("", "identifierType", identifierType));
            if (attributes != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeQuotes.Client.ClientUtils.ParameterToMultiMap("csv", "_attributes", attributes));
            }
            if (language != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeQuotes.Client.ClientUtils.ParameterToMultiMap("", "_language", language));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.RealTimeQuotes.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = GetInstrumentLegalEntityCompliancePropertyListResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Get<
            InlineResponse20061>("/instrument/legalEntity/complianceProperty/list", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetInstrumentLegalEntityCompliancePropertyList", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// Role-specific compliance properties of legal entities related to an instrument. Role-specic compliance properties of legal entities related to an instrument.
        /// </summary>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifier"></param>
        /// <param name="identifierType"></param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="language"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse20061</returns>
        public async System.Threading.Tasks.Task<InlineResponse20061>GetInstrumentLegalEntityCompliancePropertyListAsync(string identifier, string identifierType, List<string> attributes = default(List<string>), string language = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await GetInstrumentLegalEntityCompliancePropertyListWithHttpInfoAsync(identifier, identifierType, attributes, language, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Role-specific compliance properties of legal entities related to an instrument. Role-specic compliance properties of legal entities related to an instrument.
        /// </summary>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifier"></param>
        /// <param name="identifierType"></param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="language"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse20061)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20061>> GetInstrumentLegalEntityCompliancePropertyListWithHttpInfoAsync(string identifier, string identifierType, List<string> attributes = default(List<string>), string language = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'identifier' is set
            if (identifier == null)
            {
                throw new FactSet.SDK.RealTimeQuotes.Client.ApiException(400, "Missing required parameter 'identifier' when calling InstrumentApi->GetInstrumentLegalEntityCompliancePropertyList");
            }

            // verify the required parameter 'identifierType' is set
            if (identifierType == null)
            {
                throw new FactSet.SDK.RealTimeQuotes.Client.ApiException(400, "Missing required parameter 'identifierType' when calling InstrumentApi->GetInstrumentLegalEntityCompliancePropertyList");
            }


            FactSet.SDK.RealTimeQuotes.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.RealTimeQuotes.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.RealTimeQuotes.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.RealTimeQuotes.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeQuotes.Client.ClientUtils.ParameterToMultiMap("", "identifier", identifier));
            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeQuotes.Client.ClientUtils.ParameterToMultiMap("", "identifierType", identifierType));
            if (attributes != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeQuotes.Client.ClientUtils.ParameterToMultiMap("csv", "_attributes", attributes));
            }
            if (language != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeQuotes.Client.ClientUtils.ParameterToMultiMap("", "_language", language));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.RealTimeQuotes.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = GetInstrumentLegalEntityCompliancePropertyListResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<InlineResponse20061>("/instrument/legalEntity/complianceProperty/list", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetInstrumentLegalEntityCompliancePropertyList", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// MiFID II data for a financial instrument. MiFID II data for a specified financial instrument. The instruments governed by MiFID II are called \&quot;investment products\&quot;.
        /// </summary>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifier"></param>
        /// <param name="identifierType"></param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="language"> (optional)</param>
        /// <returns>InlineResponse20062</returns>
        public InlineResponse20062 GetInstrumentMifidGet(string identifier, string identifierType, List<string> attributes = default(List<string>), string language = default(string))
        {
            var localVarResponse = GetInstrumentMifidGetWithHttpInfo(identifier, identifierType, attributes, language);
            return localVarResponse.Data;
        }

        /// <summary>
        /// MiFID II data for a financial instrument. MiFID II data for a specified financial instrument. The instruments governed by MiFID II are called \&quot;investment products\&quot;.
        /// </summary>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifier"></param>
        /// <param name="identifierType"></param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="language"> (optional)</param>
        /// <returns>ApiResponse of InlineResponse20062</returns>
        public ApiResponse<InlineResponse20062> GetInstrumentMifidGetWithHttpInfo(string identifier, string identifierType, List<string> attributes = default(List<string>), string language = default(string))
        {
            // verify the required parameter 'identifier' is set
            if (identifier == null)
            {
                throw new FactSet.SDK.RealTimeQuotes.Client.ApiException(400, "Missing required parameter 'identifier' when calling InstrumentApi->GetInstrumentMifidGet");
            }

            // verify the required parameter 'identifierType' is set
            if (identifierType == null)
            {
                throw new FactSet.SDK.RealTimeQuotes.Client.ApiException(400, "Missing required parameter 'identifierType' when calling InstrumentApi->GetInstrumentMifidGet");
            }

            FactSet.SDK.RealTimeQuotes.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.RealTimeQuotes.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.RealTimeQuotes.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.RealTimeQuotes.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeQuotes.Client.ClientUtils.ParameterToMultiMap("", "identifier", identifier));
            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeQuotes.Client.ClientUtils.ParameterToMultiMap("", "identifierType", identifierType));
            if (attributes != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeQuotes.Client.ClientUtils.ParameterToMultiMap("csv", "_attributes", attributes));
            }
            if (language != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeQuotes.Client.ClientUtils.ParameterToMultiMap("", "_language", language));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.RealTimeQuotes.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = GetInstrumentMifidGetResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Get<
            InlineResponse20062>("/instrument/mifid/get", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetInstrumentMifidGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// MiFID II data for a financial instrument. MiFID II data for a specified financial instrument. The instruments governed by MiFID II are called \&quot;investment products\&quot;.
        /// </summary>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifier"></param>
        /// <param name="identifierType"></param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="language"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse20062</returns>
        public async System.Threading.Tasks.Task<InlineResponse20062>GetInstrumentMifidGetAsync(string identifier, string identifierType, List<string> attributes = default(List<string>), string language = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await GetInstrumentMifidGetWithHttpInfoAsync(identifier, identifierType, attributes, language, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// MiFID II data for a financial instrument. MiFID II data for a specified financial instrument. The instruments governed by MiFID II are called \&quot;investment products\&quot;.
        /// </summary>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifier"></param>
        /// <param name="identifierType"></param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="language"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse20062)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20062>> GetInstrumentMifidGetWithHttpInfoAsync(string identifier, string identifierType, List<string> attributes = default(List<string>), string language = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'identifier' is set
            if (identifier == null)
            {
                throw new FactSet.SDK.RealTimeQuotes.Client.ApiException(400, "Missing required parameter 'identifier' when calling InstrumentApi->GetInstrumentMifidGet");
            }

            // verify the required parameter 'identifierType' is set
            if (identifierType == null)
            {
                throw new FactSet.SDK.RealTimeQuotes.Client.ApiException(400, "Missing required parameter 'identifierType' when calling InstrumentApi->GetInstrumentMifidGet");
            }


            FactSet.SDK.RealTimeQuotes.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.RealTimeQuotes.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.RealTimeQuotes.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.RealTimeQuotes.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeQuotes.Client.ClientUtils.ParameterToMultiMap("", "identifier", identifier));
            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeQuotes.Client.ClientUtils.ParameterToMultiMap("", "identifierType", identifierType));
            if (attributes != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeQuotes.Client.ClientUtils.ParameterToMultiMap("csv", "_attributes", attributes));
            }
            if (language != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeQuotes.Client.ClientUtils.ParameterToMultiMap("", "_language", language));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.RealTimeQuotes.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = GetInstrumentMifidGetResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<InlineResponse20062>("/instrument/mifid/get", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetInstrumentMifidGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Basic search for instruments. Search for instruments whose ISIN, specified NSINs, or name match the search value according to a tolerant full-text match algorithm. Better matching results appear in the response before less relevant matches.
        /// </summary>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="searchValue"></param>
        /// <param name="nsins"> (optional)</param>
        /// <param name="assetClass"> (optional)</param>
        /// <param name="onlyActive"> (optional, default to true)</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="language"> (optional)</param>
        /// <param name="paginationOffset">Non-negative number of entries to skip, or 0 (default). (optional, default to 0M)</param>
        /// <param name="paginationLimit">Non-negative maximum number of entries to return. (optional, default to 20M)</param>
        /// <returns>InlineResponse20097</returns>
        public InlineResponse20097 GetInstrumentSearchBasic(string searchValue, List<string> nsins = default(List<string>), string assetClass = default(string), bool? onlyActive = default(bool?), List<string> attributes = default(List<string>), string language = default(string), decimal? paginationOffset = default(decimal?), decimal? paginationLimit = default(decimal?))
        {
            var localVarResponse = GetInstrumentSearchBasicWithHttpInfo(searchValue, nsins, assetClass, onlyActive, attributes, language, paginationOffset, paginationLimit);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Basic search for instruments. Search for instruments whose ISIN, specified NSINs, or name match the search value according to a tolerant full-text match algorithm. Better matching results appear in the response before less relevant matches.
        /// </summary>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="searchValue"></param>
        /// <param name="nsins"> (optional)</param>
        /// <param name="assetClass"> (optional)</param>
        /// <param name="onlyActive"> (optional, default to true)</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="language"> (optional)</param>
        /// <param name="paginationOffset">Non-negative number of entries to skip, or 0 (default). (optional, default to 0M)</param>
        /// <param name="paginationLimit">Non-negative maximum number of entries to return. (optional, default to 20M)</param>
        /// <returns>ApiResponse of InlineResponse20097</returns>
        public ApiResponse<InlineResponse20097> GetInstrumentSearchBasicWithHttpInfo(string searchValue, List<string> nsins = default(List<string>), string assetClass = default(string), bool? onlyActive = default(bool?), List<string> attributes = default(List<string>), string language = default(string), decimal? paginationOffset = default(decimal?), decimal? paginationLimit = default(decimal?))
        {
            // verify the required parameter 'searchValue' is set
            if (searchValue == null)
            {
                throw new FactSet.SDK.RealTimeQuotes.Client.ApiException(400, "Missing required parameter 'searchValue' when calling InstrumentApi->GetInstrumentSearchBasic");
            }

            FactSet.SDK.RealTimeQuotes.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.RealTimeQuotes.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.RealTimeQuotes.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.RealTimeQuotes.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeQuotes.Client.ClientUtils.ParameterToMultiMap("", "searchValue", searchValue));
            if (nsins != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeQuotes.Client.ClientUtils.ParameterToMultiMap("csv", "nsins", nsins));
            }
            if (assetClass != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeQuotes.Client.ClientUtils.ParameterToMultiMap("", "assetClass", assetClass));
            }
            if (onlyActive != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeQuotes.Client.ClientUtils.ParameterToMultiMap("", "onlyActive", onlyActive));
            }
            if (attributes != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeQuotes.Client.ClientUtils.ParameterToMultiMap("csv", "_attributes", attributes));
            }
            if (language != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeQuotes.Client.ClientUtils.ParameterToMultiMap("", "_language", language));
            }
            if (paginationOffset != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeQuotes.Client.ClientUtils.ParameterToMultiMap("", "_paginationOffset", paginationOffset));
            }
            if (paginationLimit != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeQuotes.Client.ClientUtils.ParameterToMultiMap("", "_paginationLimit", paginationLimit));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.RealTimeQuotes.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = GetInstrumentSearchBasicResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Get<
            InlineResponse20097>("/instrument/search/basic", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetInstrumentSearchBasic", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// Basic search for instruments. Search for instruments whose ISIN, specified NSINs, or name match the search value according to a tolerant full-text match algorithm. Better matching results appear in the response before less relevant matches.
        /// </summary>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="searchValue"></param>
        /// <param name="nsins"> (optional)</param>
        /// <param name="assetClass"> (optional)</param>
        /// <param name="onlyActive"> (optional, default to true)</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="language"> (optional)</param>
        /// <param name="paginationOffset">Non-negative number of entries to skip, or 0 (default). (optional, default to 0M)</param>
        /// <param name="paginationLimit">Non-negative maximum number of entries to return. (optional, default to 20M)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse20097</returns>
        public async System.Threading.Tasks.Task<InlineResponse20097>GetInstrumentSearchBasicAsync(string searchValue, List<string> nsins = default(List<string>), string assetClass = default(string), bool? onlyActive = default(bool?), List<string> attributes = default(List<string>), string language = default(string), decimal? paginationOffset = default(decimal?), decimal? paginationLimit = default(decimal?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await GetInstrumentSearchBasicWithHttpInfoAsync(searchValue, nsins, assetClass, onlyActive, attributes, language, paginationOffset, paginationLimit, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Basic search for instruments. Search for instruments whose ISIN, specified NSINs, or name match the search value according to a tolerant full-text match algorithm. Better matching results appear in the response before less relevant matches.
        /// </summary>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="searchValue"></param>
        /// <param name="nsins"> (optional)</param>
        /// <param name="assetClass"> (optional)</param>
        /// <param name="onlyActive"> (optional, default to true)</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="language"> (optional)</param>
        /// <param name="paginationOffset">Non-negative number of entries to skip, or 0 (default). (optional, default to 0M)</param>
        /// <param name="paginationLimit">Non-negative maximum number of entries to return. (optional, default to 20M)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse20097)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20097>> GetInstrumentSearchBasicWithHttpInfoAsync(string searchValue, List<string> nsins = default(List<string>), string assetClass = default(string), bool? onlyActive = default(bool?), List<string> attributes = default(List<string>), string language = default(string), decimal? paginationOffset = default(decimal?), decimal? paginationLimit = default(decimal?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'searchValue' is set
            if (searchValue == null)
            {
                throw new FactSet.SDK.RealTimeQuotes.Client.ApiException(400, "Missing required parameter 'searchValue' when calling InstrumentApi->GetInstrumentSearchBasic");
            }


            FactSet.SDK.RealTimeQuotes.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.RealTimeQuotes.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.RealTimeQuotes.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.RealTimeQuotes.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeQuotes.Client.ClientUtils.ParameterToMultiMap("", "searchValue", searchValue));
            if (nsins != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeQuotes.Client.ClientUtils.ParameterToMultiMap("csv", "nsins", nsins));
            }
            if (assetClass != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeQuotes.Client.ClientUtils.ParameterToMultiMap("", "assetClass", assetClass));
            }
            if (onlyActive != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeQuotes.Client.ClientUtils.ParameterToMultiMap("", "onlyActive", onlyActive));
            }
            if (attributes != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeQuotes.Client.ClientUtils.ParameterToMultiMap("csv", "_attributes", attributes));
            }
            if (language != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeQuotes.Client.ClientUtils.ParameterToMultiMap("", "_language", language));
            }
            if (paginationOffset != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeQuotes.Client.ClientUtils.ParameterToMultiMap("", "_paginationOffset", paginationOffset));
            }
            if (paginationLimit != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeQuotes.Client.ClientUtils.ParameterToMultiMap("", "_paginationLimit", paginationLimit));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.RealTimeQuotes.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = GetInstrumentSearchBasicResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<InlineResponse20097>("/instrument/search/basic", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetInstrumentSearchBasic", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Set of custom instrument-level selection lists. Set of custom instrument-level selection lists.
        /// </summary>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <returns>InlineResponse20065</returns>
        public InlineResponse20065 GetInstrumentSelectionListList(List<string> attributes = default(List<string>))
        {
            var localVarResponse = GetInstrumentSelectionListListWithHttpInfo(attributes);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Set of custom instrument-level selection lists. Set of custom instrument-level selection lists.
        /// </summary>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <returns>ApiResponse of InlineResponse20065</returns>
        public ApiResponse<InlineResponse20065> GetInstrumentSelectionListListWithHttpInfo(List<string> attributes = default(List<string>))
        {
            FactSet.SDK.RealTimeQuotes.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.RealTimeQuotes.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.RealTimeQuotes.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.RealTimeQuotes.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (attributes != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeQuotes.Client.ClientUtils.ParameterToMultiMap("csv", "_attributes", attributes));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.RealTimeQuotes.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = GetInstrumentSelectionListListResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Get<
            InlineResponse20065>("/instrument/selectionList/list", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetInstrumentSelectionListList", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// Set of custom instrument-level selection lists. Set of custom instrument-level selection lists.
        /// </summary>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse20065</returns>
        public async System.Threading.Tasks.Task<InlineResponse20065>GetInstrumentSelectionListListAsync(List<string> attributes = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await GetInstrumentSelectionListListWithHttpInfoAsync(attributes, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Set of custom instrument-level selection lists. Set of custom instrument-level selection lists.
        /// </summary>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse20065)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20065>> GetInstrumentSelectionListListWithHttpInfoAsync(List<string> attributes = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            FactSet.SDK.RealTimeQuotes.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.RealTimeQuotes.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.RealTimeQuotes.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.RealTimeQuotes.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (attributes != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeQuotes.Client.ClientUtils.ParameterToMultiMap("csv", "_attributes", attributes));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.RealTimeQuotes.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = GetInstrumentSelectionListListResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<InlineResponse20065>("/instrument/selectionList/list", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetInstrumentSelectionListList", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// For each given instrument, returns the instrument-level selection lists of which the instrument is a member. For each given instrument, returns the instrument-level selection lists of which the instrument is a member.
        /// </summary>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifiers"></param>
        /// <param name="identifierType"></param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <returns>InlineResponse20066</returns>
        public InlineResponse20066 GetInstrumentSelectionListListByInstrument(List<string> identifiers, string identifierType, List<string> attributes = default(List<string>))
        {
            var localVarResponse = GetInstrumentSelectionListListByInstrumentWithHttpInfo(identifiers, identifierType, attributes);
            return localVarResponse.Data;
        }

        /// <summary>
        /// For each given instrument, returns the instrument-level selection lists of which the instrument is a member. For each given instrument, returns the instrument-level selection lists of which the instrument is a member.
        /// </summary>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifiers"></param>
        /// <param name="identifierType"></param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <returns>ApiResponse of InlineResponse20066</returns>
        public ApiResponse<InlineResponse20066> GetInstrumentSelectionListListByInstrumentWithHttpInfo(List<string> identifiers, string identifierType, List<string> attributes = default(List<string>))
        {
            // verify the required parameter 'identifiers' is set
            if (identifiers == null)
            {
                throw new FactSet.SDK.RealTimeQuotes.Client.ApiException(400, "Missing required parameter 'identifiers' when calling InstrumentApi->GetInstrumentSelectionListListByInstrument");
            }

            // verify the required parameter 'identifierType' is set
            if (identifierType == null)
            {
                throw new FactSet.SDK.RealTimeQuotes.Client.ApiException(400, "Missing required parameter 'identifierType' when calling InstrumentApi->GetInstrumentSelectionListListByInstrument");
            }

            FactSet.SDK.RealTimeQuotes.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.RealTimeQuotes.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.RealTimeQuotes.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.RealTimeQuotes.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeQuotes.Client.ClientUtils.ParameterToMultiMap("csv", "identifiers", identifiers));
            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeQuotes.Client.ClientUtils.ParameterToMultiMap("", "identifierType", identifierType));
            if (attributes != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeQuotes.Client.ClientUtils.ParameterToMultiMap("csv", "_attributes", attributes));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.RealTimeQuotes.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = GetInstrumentSelectionListListByInstrumentResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Get<
            InlineResponse20066>("/instrument/selectionList/listByInstrument", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetInstrumentSelectionListListByInstrument", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// For each given instrument, returns the instrument-level selection lists of which the instrument is a member. For each given instrument, returns the instrument-level selection lists of which the instrument is a member.
        /// </summary>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifiers"></param>
        /// <param name="identifierType"></param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse20066</returns>
        public async System.Threading.Tasks.Task<InlineResponse20066>GetInstrumentSelectionListListByInstrumentAsync(List<string> identifiers, string identifierType, List<string> attributes = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await GetInstrumentSelectionListListByInstrumentWithHttpInfoAsync(identifiers, identifierType, attributes, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// For each given instrument, returns the instrument-level selection lists of which the instrument is a member. For each given instrument, returns the instrument-level selection lists of which the instrument is a member.
        /// </summary>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifiers"></param>
        /// <param name="identifierType"></param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse20066)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20066>> GetInstrumentSelectionListListByInstrumentWithHttpInfoAsync(List<string> identifiers, string identifierType, List<string> attributes = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'identifiers' is set
            if (identifiers == null)
            {
                throw new FactSet.SDK.RealTimeQuotes.Client.ApiException(400, "Missing required parameter 'identifiers' when calling InstrumentApi->GetInstrumentSelectionListListByInstrument");
            }

            // verify the required parameter 'identifierType' is set
            if (identifierType == null)
            {
                throw new FactSet.SDK.RealTimeQuotes.Client.ApiException(400, "Missing required parameter 'identifierType' when calling InstrumentApi->GetInstrumentSelectionListListByInstrument");
            }


            FactSet.SDK.RealTimeQuotes.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.RealTimeQuotes.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.RealTimeQuotes.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.RealTimeQuotes.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeQuotes.Client.ClientUtils.ParameterToMultiMap("csv", "identifiers", identifiers));
            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeQuotes.Client.ClientUtils.ParameterToMultiMap("", "identifierType", identifierType));
            if (attributes != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeQuotes.Client.ClientUtils.ParameterToMultiMap("csv", "_attributes", attributes));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.RealTimeQuotes.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = GetInstrumentSelectionListListByInstrumentResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<InlineResponse20066>("/instrument/selectionList/listByInstrument", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetInstrumentSelectionListListByInstrument", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List of background text types for instruments. List of background text types for instruments.
        /// </summary>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postInstrumentBackgroundTextTypeListRequest">Request Body (optional)</param>
        /// <returns>InlineResponse20045</returns>
        public InlineResponse20045 PostInstrumentBackgroundTextTypeList(PostInstrumentBackgroundTextTypeListRequest postInstrumentBackgroundTextTypeListRequest = default(PostInstrumentBackgroundTextTypeListRequest))
        {
            var localVarResponse = PostInstrumentBackgroundTextTypeListWithHttpInfo(postInstrumentBackgroundTextTypeListRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List of background text types for instruments. List of background text types for instruments.
        /// </summary>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postInstrumentBackgroundTextTypeListRequest">Request Body (optional)</param>
        /// <returns>ApiResponse of InlineResponse20045</returns>
        public ApiResponse<InlineResponse20045> PostInstrumentBackgroundTextTypeListWithHttpInfo(PostInstrumentBackgroundTextTypeListRequest postInstrumentBackgroundTextTypeListRequest = default(PostInstrumentBackgroundTextTypeListRequest))
        {
            FactSet.SDK.RealTimeQuotes.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.RealTimeQuotes.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.RealTimeQuotes.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.RealTimeQuotes.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = postInstrumentBackgroundTextTypeListRequest;

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.RealTimeQuotes.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = PostInstrumentBackgroundTextTypeListResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Post<
            InlineResponse20045>("/instrument/backgroundText/type/list", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostInstrumentBackgroundTextTypeList", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// List of background text types for instruments. List of background text types for instruments.
        /// </summary>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postInstrumentBackgroundTextTypeListRequest">Request Body (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse20045</returns>
        public async System.Threading.Tasks.Task<InlineResponse20045>PostInstrumentBackgroundTextTypeListAsync(PostInstrumentBackgroundTextTypeListRequest postInstrumentBackgroundTextTypeListRequest = default(PostInstrumentBackgroundTextTypeListRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await PostInstrumentBackgroundTextTypeListWithHttpInfoAsync(postInstrumentBackgroundTextTypeListRequest, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List of background text types for instruments. List of background text types for instruments.
        /// </summary>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postInstrumentBackgroundTextTypeListRequest">Request Body (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse20045)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20045>> PostInstrumentBackgroundTextTypeListWithHttpInfoAsync(PostInstrumentBackgroundTextTypeListRequest postInstrumentBackgroundTextTypeListRequest = default(PostInstrumentBackgroundTextTypeListRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            FactSet.SDK.RealTimeQuotes.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.RealTimeQuotes.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.RealTimeQuotes.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.RealTimeQuotes.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = postInstrumentBackgroundTextTypeListRequest;

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.RealTimeQuotes.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = PostInstrumentBackgroundTextTypeListResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<InlineResponse20045>("/instrument/backgroundText/type/list", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostInstrumentBackgroundTextTypeList", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List of benchmarks of a financial instrument. Provides a list of benchmark notations for a selected financial instrument, optionally restricted to specific benchmark types.
        /// </summary>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postInstrumentBenchmarkListRequest">Request Body (optional)</param>
        /// <returns>InlineResponse20046</returns>
        public InlineResponse20046 PostInstrumentBenchmarkList(PostInstrumentBenchmarkListRequest postInstrumentBenchmarkListRequest = default(PostInstrumentBenchmarkListRequest))
        {
            var localVarResponse = PostInstrumentBenchmarkListWithHttpInfo(postInstrumentBenchmarkListRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List of benchmarks of a financial instrument. Provides a list of benchmark notations for a selected financial instrument, optionally restricted to specific benchmark types.
        /// </summary>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postInstrumentBenchmarkListRequest">Request Body (optional)</param>
        /// <returns>ApiResponse of InlineResponse20046</returns>
        public ApiResponse<InlineResponse20046> PostInstrumentBenchmarkListWithHttpInfo(PostInstrumentBenchmarkListRequest postInstrumentBenchmarkListRequest = default(PostInstrumentBenchmarkListRequest))
        {
            FactSet.SDK.RealTimeQuotes.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.RealTimeQuotes.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.RealTimeQuotes.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.RealTimeQuotes.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = postInstrumentBenchmarkListRequest;

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.RealTimeQuotes.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = PostInstrumentBenchmarkListResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Post<
            InlineResponse20046>("/instrument/benchmark/list", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostInstrumentBenchmarkList", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// List of benchmarks of a financial instrument. Provides a list of benchmark notations for a selected financial instrument, optionally restricted to specific benchmark types.
        /// </summary>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postInstrumentBenchmarkListRequest">Request Body (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse20046</returns>
        public async System.Threading.Tasks.Task<InlineResponse20046>PostInstrumentBenchmarkListAsync(PostInstrumentBenchmarkListRequest postInstrumentBenchmarkListRequest = default(PostInstrumentBenchmarkListRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await PostInstrumentBenchmarkListWithHttpInfoAsync(postInstrumentBenchmarkListRequest, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List of benchmarks of a financial instrument. Provides a list of benchmark notations for a selected financial instrument, optionally restricted to specific benchmark types.
        /// </summary>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postInstrumentBenchmarkListRequest">Request Body (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse20046)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20046>> PostInstrumentBenchmarkListWithHttpInfoAsync(PostInstrumentBenchmarkListRequest postInstrumentBenchmarkListRequest = default(PostInstrumentBenchmarkListRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            FactSet.SDK.RealTimeQuotes.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.RealTimeQuotes.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.RealTimeQuotes.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.RealTimeQuotes.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = postInstrumentBenchmarkListRequest;

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.RealTimeQuotes.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = PostInstrumentBenchmarkListResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<InlineResponse20046>("/instrument/benchmark/list", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostInstrumentBenchmarkList", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List of categories assigned to a specific instrument the application is entitled to see. List of categories assigned to a specific instrument the application is entitled to see. Optionally it is possible to restrict the output to only list those for a specific category dataset.
        /// </summary>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postInstrumentCategoryListRequest">Request Body (optional)</param>
        /// <returns>InlineResponse20047</returns>
        public InlineResponse20047 PostInstrumentCategoryList(PostInstrumentCategoryListRequest postInstrumentCategoryListRequest = default(PostInstrumentCategoryListRequest))
        {
            var localVarResponse = PostInstrumentCategoryListWithHttpInfo(postInstrumentCategoryListRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List of categories assigned to a specific instrument the application is entitled to see. List of categories assigned to a specific instrument the application is entitled to see. Optionally it is possible to restrict the output to only list those for a specific category dataset.
        /// </summary>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postInstrumentCategoryListRequest">Request Body (optional)</param>
        /// <returns>ApiResponse of InlineResponse20047</returns>
        public ApiResponse<InlineResponse20047> PostInstrumentCategoryListWithHttpInfo(PostInstrumentCategoryListRequest postInstrumentCategoryListRequest = default(PostInstrumentCategoryListRequest))
        {
            FactSet.SDK.RealTimeQuotes.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.RealTimeQuotes.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.RealTimeQuotes.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.RealTimeQuotes.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = postInstrumentCategoryListRequest;

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.RealTimeQuotes.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = PostInstrumentCategoryListResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Post<
            InlineResponse20047>("/instrument/category/list", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostInstrumentCategoryList", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// List of categories assigned to a specific instrument the application is entitled to see. List of categories assigned to a specific instrument the application is entitled to see. Optionally it is possible to restrict the output to only list those for a specific category dataset.
        /// </summary>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postInstrumentCategoryListRequest">Request Body (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse20047</returns>
        public async System.Threading.Tasks.Task<InlineResponse20047>PostInstrumentCategoryListAsync(PostInstrumentCategoryListRequest postInstrumentCategoryListRequest = default(PostInstrumentCategoryListRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await PostInstrumentCategoryListWithHttpInfoAsync(postInstrumentCategoryListRequest, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List of categories assigned to a specific instrument the application is entitled to see. List of categories assigned to a specific instrument the application is entitled to see. Optionally it is possible to restrict the output to only list those for a specific category dataset.
        /// </summary>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postInstrumentCategoryListRequest">Request Body (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse20047)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20047>> PostInstrumentCategoryListWithHttpInfoAsync(PostInstrumentCategoryListRequest postInstrumentCategoryListRequest = default(PostInstrumentCategoryListRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            FactSet.SDK.RealTimeQuotes.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.RealTimeQuotes.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.RealTimeQuotes.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.RealTimeQuotes.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = postInstrumentCategoryListRequest;

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.RealTimeQuotes.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = PostInstrumentCategoryListResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<InlineResponse20047>("/instrument/category/list", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostInstrumentCategoryList", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List of compliance properties for instruments. List of compliance properties for instruments.
        /// </summary>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postInstrumentCompliancePropertyListRequest">Request Body (optional)</param>
        /// <returns>InlineResponse20048</returns>
        public InlineResponse20048 PostInstrumentCompliancePropertyList(PostInstrumentCompliancePropertyListRequest postInstrumentCompliancePropertyListRequest = default(PostInstrumentCompliancePropertyListRequest))
        {
            var localVarResponse = PostInstrumentCompliancePropertyListWithHttpInfo(postInstrumentCompliancePropertyListRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List of compliance properties for instruments. List of compliance properties for instruments.
        /// </summary>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postInstrumentCompliancePropertyListRequest">Request Body (optional)</param>
        /// <returns>ApiResponse of InlineResponse20048</returns>
        public ApiResponse<InlineResponse20048> PostInstrumentCompliancePropertyListWithHttpInfo(PostInstrumentCompliancePropertyListRequest postInstrumentCompliancePropertyListRequest = default(PostInstrumentCompliancePropertyListRequest))
        {
            FactSet.SDK.RealTimeQuotes.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.RealTimeQuotes.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.RealTimeQuotes.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.RealTimeQuotes.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = postInstrumentCompliancePropertyListRequest;

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.RealTimeQuotes.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = PostInstrumentCompliancePropertyListResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Post<
            InlineResponse20048>("/instrument/complianceProperty/list", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostInstrumentCompliancePropertyList", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// List of compliance properties for instruments. List of compliance properties for instruments.
        /// </summary>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postInstrumentCompliancePropertyListRequest">Request Body (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse20048</returns>
        public async System.Threading.Tasks.Task<InlineResponse20048>PostInstrumentCompliancePropertyListAsync(PostInstrumentCompliancePropertyListRequest postInstrumentCompliancePropertyListRequest = default(PostInstrumentCompliancePropertyListRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await PostInstrumentCompliancePropertyListWithHttpInfoAsync(postInstrumentCompliancePropertyListRequest, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List of compliance properties for instruments. List of compliance properties for instruments.
        /// </summary>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postInstrumentCompliancePropertyListRequest">Request Body (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse20048)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20048>> PostInstrumentCompliancePropertyListWithHttpInfoAsync(PostInstrumentCompliancePropertyListRequest postInstrumentCompliancePropertyListRequest = default(PostInstrumentCompliancePropertyListRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            FactSet.SDK.RealTimeQuotes.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.RealTimeQuotes.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.RealTimeQuotes.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.RealTimeQuotes.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = postInstrumentCompliancePropertyListRequest;

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.RealTimeQuotes.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = PostInstrumentCompliancePropertyListResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<InlineResponse20048>("/instrument/complianceProperty/list", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostInstrumentCompliancePropertyList", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Translate a list of ISINs to instruments. Translate a given list of ISINs to the respective most recent instrument identifiers, retrieved from the Cross Reference Service.
        /// </summary>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postInstrumentCrossReferenceListByISINRequest">Request Body</param>
        /// <returns>InlineResponse20056</returns>
        public InlineResponse20056 PostInstrumentCrossReferenceListByISIN(PostInstrumentCrossReferenceListByISINRequest postInstrumentCrossReferenceListByISINRequest)
        {
            var localVarResponse = PostInstrumentCrossReferenceListByISINWithHttpInfo(postInstrumentCrossReferenceListByISINRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Translate a list of ISINs to instruments. Translate a given list of ISINs to the respective most recent instrument identifiers, retrieved from the Cross Reference Service.
        /// </summary>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postInstrumentCrossReferenceListByISINRequest">Request Body</param>
        /// <returns>ApiResponse of InlineResponse20056</returns>
        public ApiResponse<InlineResponse20056> PostInstrumentCrossReferenceListByISINWithHttpInfo(PostInstrumentCrossReferenceListByISINRequest postInstrumentCrossReferenceListByISINRequest)
        {
            // verify the required parameter 'postInstrumentCrossReferenceListByISINRequest' is set
            if (postInstrumentCrossReferenceListByISINRequest == null)
            {
                throw new FactSet.SDK.RealTimeQuotes.Client.ApiException(400, "Missing required parameter 'postInstrumentCrossReferenceListByISINRequest' when calling InstrumentApi->PostInstrumentCrossReferenceListByISIN");
            }

            FactSet.SDK.RealTimeQuotes.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.RealTimeQuotes.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.RealTimeQuotes.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.RealTimeQuotes.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = postInstrumentCrossReferenceListByISINRequest;

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.RealTimeQuotes.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = PostInstrumentCrossReferenceListByISINResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Post<
            InlineResponse20056>("/instrument/crossReference/listByISIN", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostInstrumentCrossReferenceListByISIN", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// Translate a list of ISINs to instruments. Translate a given list of ISINs to the respective most recent instrument identifiers, retrieved from the Cross Reference Service.
        /// </summary>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postInstrumentCrossReferenceListByISINRequest">Request Body</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse20056</returns>
        public async System.Threading.Tasks.Task<InlineResponse20056>PostInstrumentCrossReferenceListByISINAsync(PostInstrumentCrossReferenceListByISINRequest postInstrumentCrossReferenceListByISINRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await PostInstrumentCrossReferenceListByISINWithHttpInfoAsync(postInstrumentCrossReferenceListByISINRequest, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Translate a list of ISINs to instruments. Translate a given list of ISINs to the respective most recent instrument identifiers, retrieved from the Cross Reference Service.
        /// </summary>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postInstrumentCrossReferenceListByISINRequest">Request Body</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse20056)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20056>> PostInstrumentCrossReferenceListByISINWithHttpInfoAsync(PostInstrumentCrossReferenceListByISINRequest postInstrumentCrossReferenceListByISINRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'postInstrumentCrossReferenceListByISINRequest' is set
            if (postInstrumentCrossReferenceListByISINRequest == null)
            {
                throw new FactSet.SDK.RealTimeQuotes.Client.ApiException(400, "Missing required parameter 'postInstrumentCrossReferenceListByISINRequest' when calling InstrumentApi->PostInstrumentCrossReferenceListByISIN");
            }


            FactSet.SDK.RealTimeQuotes.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.RealTimeQuotes.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.RealTimeQuotes.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.RealTimeQuotes.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = postInstrumentCrossReferenceListByISINRequest;

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.RealTimeQuotes.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = PostInstrumentCrossReferenceListByISINResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<InlineResponse20056>("/instrument/crossReference/listByISIN", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostInstrumentCrossReferenceListByISIN", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Translate a list of WKNs to instruments. Translate a given list of WKNs to the respective most recent instrument identifiers, retrieved from the Cross Reference Service.
        /// </summary>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postInstrumentCrossReferenceListByWKNRequest">Request Body</param>
        /// <returns>InlineResponse20057</returns>
        public InlineResponse20057 PostInstrumentCrossReferenceListByWKN(PostInstrumentCrossReferenceListByWKNRequest postInstrumentCrossReferenceListByWKNRequest)
        {
            var localVarResponse = PostInstrumentCrossReferenceListByWKNWithHttpInfo(postInstrumentCrossReferenceListByWKNRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Translate a list of WKNs to instruments. Translate a given list of WKNs to the respective most recent instrument identifiers, retrieved from the Cross Reference Service.
        /// </summary>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postInstrumentCrossReferenceListByWKNRequest">Request Body</param>
        /// <returns>ApiResponse of InlineResponse20057</returns>
        public ApiResponse<InlineResponse20057> PostInstrumentCrossReferenceListByWKNWithHttpInfo(PostInstrumentCrossReferenceListByWKNRequest postInstrumentCrossReferenceListByWKNRequest)
        {
            // verify the required parameter 'postInstrumentCrossReferenceListByWKNRequest' is set
            if (postInstrumentCrossReferenceListByWKNRequest == null)
            {
                throw new FactSet.SDK.RealTimeQuotes.Client.ApiException(400, "Missing required parameter 'postInstrumentCrossReferenceListByWKNRequest' when calling InstrumentApi->PostInstrumentCrossReferenceListByWKN");
            }

            FactSet.SDK.RealTimeQuotes.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.RealTimeQuotes.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.RealTimeQuotes.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.RealTimeQuotes.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = postInstrumentCrossReferenceListByWKNRequest;

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.RealTimeQuotes.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = PostInstrumentCrossReferenceListByWKNResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Post<
            InlineResponse20057>("/instrument/crossReference/listByWKN", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostInstrumentCrossReferenceListByWKN", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// Translate a list of WKNs to instruments. Translate a given list of WKNs to the respective most recent instrument identifiers, retrieved from the Cross Reference Service.
        /// </summary>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postInstrumentCrossReferenceListByWKNRequest">Request Body</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse20057</returns>
        public async System.Threading.Tasks.Task<InlineResponse20057>PostInstrumentCrossReferenceListByWKNAsync(PostInstrumentCrossReferenceListByWKNRequest postInstrumentCrossReferenceListByWKNRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await PostInstrumentCrossReferenceListByWKNWithHttpInfoAsync(postInstrumentCrossReferenceListByWKNRequest, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Translate a list of WKNs to instruments. Translate a given list of WKNs to the respective most recent instrument identifiers, retrieved from the Cross Reference Service.
        /// </summary>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postInstrumentCrossReferenceListByWKNRequest">Request Body</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse20057)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20057>> PostInstrumentCrossReferenceListByWKNWithHttpInfoAsync(PostInstrumentCrossReferenceListByWKNRequest postInstrumentCrossReferenceListByWKNRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'postInstrumentCrossReferenceListByWKNRequest' is set
            if (postInstrumentCrossReferenceListByWKNRequest == null)
            {
                throw new FactSet.SDK.RealTimeQuotes.Client.ApiException(400, "Missing required parameter 'postInstrumentCrossReferenceListByWKNRequest' when calling InstrumentApi->PostInstrumentCrossReferenceListByWKN");
            }


            FactSet.SDK.RealTimeQuotes.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.RealTimeQuotes.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.RealTimeQuotes.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.RealTimeQuotes.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = postInstrumentCrossReferenceListByWKNRequest;

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.RealTimeQuotes.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = PostInstrumentCrossReferenceListByWKNResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<InlineResponse20057>("/instrument/crossReference/listByWKN", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostInstrumentCrossReferenceListByWKN", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List of active, entitled notations for a set of instruments. List of active, entitled notations for a set of instruments. By default the list of notations (per instrument) is sorted descending by the trading volume, averaged over one month. All identifiers used as parameters must be valid and entitled.
        /// </summary>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postInstrumentNotationListRequest">Request Body (optional)</param>
        /// <returns>InlineResponse20063</returns>
        public InlineResponse20063 PostInstrumentNotationList(PostInstrumentNotationListRequest postInstrumentNotationListRequest = default(PostInstrumentNotationListRequest))
        {
            var localVarResponse = PostInstrumentNotationListWithHttpInfo(postInstrumentNotationListRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List of active, entitled notations for a set of instruments. List of active, entitled notations for a set of instruments. By default the list of notations (per instrument) is sorted descending by the trading volume, averaged over one month. All identifiers used as parameters must be valid and entitled.
        /// </summary>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postInstrumentNotationListRequest">Request Body (optional)</param>
        /// <returns>ApiResponse of InlineResponse20063</returns>
        public ApiResponse<InlineResponse20063> PostInstrumentNotationListWithHttpInfo(PostInstrumentNotationListRequest postInstrumentNotationListRequest = default(PostInstrumentNotationListRequest))
        {
            FactSet.SDK.RealTimeQuotes.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.RealTimeQuotes.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.RealTimeQuotes.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.RealTimeQuotes.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = postInstrumentNotationListRequest;

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.RealTimeQuotes.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = PostInstrumentNotationListResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Post<
            InlineResponse20063>("/instrument/notation/list", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostInstrumentNotationList", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// List of active, entitled notations for a set of instruments. List of active, entitled notations for a set of instruments. By default the list of notations (per instrument) is sorted descending by the trading volume, averaged over one month. All identifiers used as parameters must be valid and entitled.
        /// </summary>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postInstrumentNotationListRequest">Request Body (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse20063</returns>
        public async System.Threading.Tasks.Task<InlineResponse20063>PostInstrumentNotationListAsync(PostInstrumentNotationListRequest postInstrumentNotationListRequest = default(PostInstrumentNotationListRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await PostInstrumentNotationListWithHttpInfoAsync(postInstrumentNotationListRequest, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List of active, entitled notations for a set of instruments. List of active, entitled notations for a set of instruments. By default the list of notations (per instrument) is sorted descending by the trading volume, averaged over one month. All identifiers used as parameters must be valid and entitled.
        /// </summary>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postInstrumentNotationListRequest">Request Body (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse20063)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20063>> PostInstrumentNotationListWithHttpInfoAsync(PostInstrumentNotationListRequest postInstrumentNotationListRequest = default(PostInstrumentNotationListRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            FactSet.SDK.RealTimeQuotes.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.RealTimeQuotes.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.RealTimeQuotes.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.RealTimeQuotes.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = postInstrumentNotationListRequest;

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.RealTimeQuotes.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = PostInstrumentNotationListResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<InlineResponse20063>("/instrument/notation/list", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostInstrumentNotationList", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List of rating grades for a list of instruments. List of rating grades for a list of instruments. The list can be restricted to rating grades belonging to particular rating systems.
        /// </summary>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postInstrumentRatingGradeListRequest">Request Body (optional)</param>
        /// <returns>InlineResponse20064</returns>
        public InlineResponse20064 PostInstrumentRatingGradeList(PostInstrumentRatingGradeListRequest postInstrumentRatingGradeListRequest = default(PostInstrumentRatingGradeListRequest))
        {
            var localVarResponse = PostInstrumentRatingGradeListWithHttpInfo(postInstrumentRatingGradeListRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List of rating grades for a list of instruments. List of rating grades for a list of instruments. The list can be restricted to rating grades belonging to particular rating systems.
        /// </summary>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postInstrumentRatingGradeListRequest">Request Body (optional)</param>
        /// <returns>ApiResponse of InlineResponse20064</returns>
        public ApiResponse<InlineResponse20064> PostInstrumentRatingGradeListWithHttpInfo(PostInstrumentRatingGradeListRequest postInstrumentRatingGradeListRequest = default(PostInstrumentRatingGradeListRequest))
        {
            FactSet.SDK.RealTimeQuotes.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.RealTimeQuotes.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.RealTimeQuotes.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.RealTimeQuotes.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = postInstrumentRatingGradeListRequest;

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.RealTimeQuotes.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = PostInstrumentRatingGradeListResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Post<
            InlineResponse20064>("/instrument/rating/grade/list", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostInstrumentRatingGradeList", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// List of rating grades for a list of instruments. List of rating grades for a list of instruments. The list can be restricted to rating grades belonging to particular rating systems.
        /// </summary>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postInstrumentRatingGradeListRequest">Request Body (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse20064</returns>
        public async System.Threading.Tasks.Task<InlineResponse20064>PostInstrumentRatingGradeListAsync(PostInstrumentRatingGradeListRequest postInstrumentRatingGradeListRequest = default(PostInstrumentRatingGradeListRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await PostInstrumentRatingGradeListWithHttpInfoAsync(postInstrumentRatingGradeListRequest, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List of rating grades for a list of instruments. List of rating grades for a list of instruments. The list can be restricted to rating grades belonging to particular rating systems.
        /// </summary>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postInstrumentRatingGradeListRequest">Request Body (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse20064)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20064>> PostInstrumentRatingGradeListWithHttpInfoAsync(PostInstrumentRatingGradeListRequest postInstrumentRatingGradeListRequest = default(PostInstrumentRatingGradeListRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            FactSet.SDK.RealTimeQuotes.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.RealTimeQuotes.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.RealTimeQuotes.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.RealTimeQuotes.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = postInstrumentRatingGradeListRequest;

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.RealTimeQuotes.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = PostInstrumentRatingGradeListResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<InlineResponse20064>("/instrument/rating/grade/list", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostInstrumentRatingGradeList", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List of instruments belonging to an instrument-level selection list. List of instruments belonging to an instrument-level selection list.
        /// </summary>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postInstrumentSelectionListMembersListRequest">Request Body (optional)</param>
        /// <returns>InlineResponse20067</returns>
        public InlineResponse20067 PostInstrumentSelectionListMembersList(PostInstrumentSelectionListMembersListRequest postInstrumentSelectionListMembersListRequest = default(PostInstrumentSelectionListMembersListRequest))
        {
            var localVarResponse = PostInstrumentSelectionListMembersListWithHttpInfo(postInstrumentSelectionListMembersListRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List of instruments belonging to an instrument-level selection list. List of instruments belonging to an instrument-level selection list.
        /// </summary>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postInstrumentSelectionListMembersListRequest">Request Body (optional)</param>
        /// <returns>ApiResponse of InlineResponse20067</returns>
        public ApiResponse<InlineResponse20067> PostInstrumentSelectionListMembersListWithHttpInfo(PostInstrumentSelectionListMembersListRequest postInstrumentSelectionListMembersListRequest = default(PostInstrumentSelectionListMembersListRequest))
        {
            FactSet.SDK.RealTimeQuotes.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.RealTimeQuotes.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.RealTimeQuotes.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.RealTimeQuotes.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = postInstrumentSelectionListMembersListRequest;

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.RealTimeQuotes.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = PostInstrumentSelectionListMembersListResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Post<
            InlineResponse20067>("/instrument/selectionList/members/list", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostInstrumentSelectionListMembersList", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// List of instruments belonging to an instrument-level selection list. List of instruments belonging to an instrument-level selection list.
        /// </summary>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postInstrumentSelectionListMembersListRequest">Request Body (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse20067</returns>
        public async System.Threading.Tasks.Task<InlineResponse20067>PostInstrumentSelectionListMembersListAsync(PostInstrumentSelectionListMembersListRequest postInstrumentSelectionListMembersListRequest = default(PostInstrumentSelectionListMembersListRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await PostInstrumentSelectionListMembersListWithHttpInfoAsync(postInstrumentSelectionListMembersListRequest, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List of instruments belonging to an instrument-level selection list. List of instruments belonging to an instrument-level selection list.
        /// </summary>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postInstrumentSelectionListMembersListRequest">Request Body (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse20067)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20067>> PostInstrumentSelectionListMembersListWithHttpInfoAsync(PostInstrumentSelectionListMembersListRequest postInstrumentSelectionListMembersListRequest = default(PostInstrumentSelectionListMembersListRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            FactSet.SDK.RealTimeQuotes.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.RealTimeQuotes.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.RealTimeQuotes.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.RealTimeQuotes.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = postInstrumentSelectionListMembersListRequest;

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.RealTimeQuotes.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = PostInstrumentSelectionListMembersListResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<InlineResponse20067>("/instrument/selectionList/members/list", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostInstrumentSelectionListMembersList", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
