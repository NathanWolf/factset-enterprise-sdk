/*
 * Quotes API For Digital Portals
 *
 * The Quotes API combines endpoints for retrieving security end-of-day, delayed, and realtime prices with performance key figures and basic reference data on the security and market level.  The API supports over 20 different price types for each quote and comes with basic search endpoints based on security identifiers and instrument names. Market coverage is included in the *Sample Use Cases* section below.  The Digital Portal use case is focused on high-performance applications that are  * serving millions of end-users, * accessible by client browsers via the internet, * supporting subscriptions for streamed updates out-of-the-box, * typically combining a wide variety of *for Digital Portals*-APIs into a highly use-case specific solution for customers, * integrated into complex infrastructures such as existing frontend frameworks, authentication services.  All APIs labelled *for Digital Portals* have been designed for direct use by client web applications and feature extreme low latency: The average response time across all endpoints is 30 ms whereas 99% of all requests are answered in close to under 300ms.  See the [Time Series API for Digital Portals](https://developer.factset.com/api-catalog/time-series-api-digital-portals) for direct access to price histories, and the [News API for Digital Portals](https://developer.factset.com/api-catalog/news-api-digital-portals) for searching and fetching related news. 
 *
 * The version of the OpenAPI document: 3.0.0
 * Contact: api@factset.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using FactSet.SDK.RealTimeQuotes.Client;
using FactSet.SDK.RealTimeQuotes.Model;
using FactSet.SDK.Utils.Authentication;

namespace FactSet.SDK.RealTimeQuotes.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface INotationApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Retrieve FactSet identifiers for a given notation.
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Retrieve FactSet identifiers for a given notation. Security and listing-level identifiers are always included, regional level identifiers are included, if available.
        /// </remarks>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifier"></param>
        /// <param name="identifierType"></param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <returns>InlineResponse20075</returns>
        InlineResponse20075 GetNotationCrossReferenceFactSetIdentifierGet(string identifier, string identifierType, List<string> attributes = default(List<string>));

        /// <summary>
        /// Retrieve FactSet identifiers for a given notation.
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Retrieve FactSet identifiers for a given notation. Security and listing-level identifiers are always included, regional level identifiers are included, if available.
        /// </remarks>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifier"></param>
        /// <param name="identifierType"></param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <returns>ApiResponse of InlineResponse20075</returns>
        ApiResponse<InlineResponse20075> GetNotationCrossReferenceFactSetIdentifierGetWithHttpInfo(string identifier, string identifierType, List<string> attributes = default(List<string>));
        /// <summary>
        /// Translate a FactSet market symbol to a notation.
        /// </summary>
        /// <remarks>
        /// Translate a FactSet market symbol to a notation. This symbol is also known as TICKER_EXCHANGE.
        /// </remarks>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="factSetMarketSymbol"></param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="language"> (optional)</param>
        /// <returns>InlineResponse20071</returns>
        InlineResponse20071 GetNotationCrossReferenceGetByFactSetMarketSymbol(string factSetMarketSymbol, List<string> attributes = default(List<string>), string language = default(string));

        /// <summary>
        /// Translate a FactSet market symbol to a notation.
        /// </summary>
        /// <remarks>
        /// Translate a FactSet market symbol to a notation. This symbol is also known as TICKER_EXCHANGE.
        /// </remarks>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="factSetMarketSymbol"></param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="language"> (optional)</param>
        /// <returns>ApiResponse of InlineResponse20071</returns>
        ApiResponse<InlineResponse20071> GetNotationCrossReferenceGetByFactSetMarketSymbolWithHttpInfo(string factSetMarketSymbol, List<string> attributes = default(List<string>), string language = default(string));
        /// <summary>
        /// Basic data for a notation.
        /// </summary>
        /// <remarks>
        /// Basic data for a notation.
        /// </remarks>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifier"></param>
        /// <param name="identifierType"></param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="language"> (optional)</param>
        /// <returns>InlineResponse20068</returns>
        InlineResponse20068 GetNotationGet(string identifier, string identifierType, List<string> attributes = default(List<string>), string language = default(string));

        /// <summary>
        /// Basic data for a notation.
        /// </summary>
        /// <remarks>
        /// Basic data for a notation.
        /// </remarks>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifier"></param>
        /// <param name="identifierType"></param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="language"> (optional)</param>
        /// <returns>ApiResponse of InlineResponse20068</returns>
        ApiResponse<InlineResponse20068> GetNotationGetWithHttpInfo(string identifier, string identifierType, List<string> attributes = default(List<string>), string language = default(string));
        /// <summary>
        /// End-of-day (EOD) key figures for the time range of one month.
        /// </summary>
        /// <remarks>
        /// End-of-day (EOD) key figures for the time range of one month.
        /// </remarks>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifier"></param>
        /// <param name="identifierType"></param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <returns>InlineResponse20080</returns>
        InlineResponse20080 GetNotationKeyFiguresMonth1Get(string identifier, string identifierType, List<string> attributes = default(List<string>));

        /// <summary>
        /// End-of-day (EOD) key figures for the time range of one month.
        /// </summary>
        /// <remarks>
        /// End-of-day (EOD) key figures for the time range of one month.
        /// </remarks>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifier"></param>
        /// <param name="identifierType"></param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <returns>ApiResponse of InlineResponse20080</returns>
        ApiResponse<InlineResponse20080> GetNotationKeyFiguresMonth1GetWithHttpInfo(string identifier, string identifierType, List<string> attributes = default(List<string>));
        /// <summary>
        /// End-of-day (EOD) key figures for the time range of one month, for a list of notations.
        /// </summary>
        /// <remarks>
        /// End-of-day (EOD) key figures for the time range of one month, for a list of notations.
        /// </remarks>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifiers"></param>
        /// <param name="identifierType"></param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <returns>InlineResponse20081</returns>
        InlineResponse20081 GetNotationKeyFiguresMonth1List(List<string> identifiers, string identifierType, List<string> attributes = default(List<string>));

        /// <summary>
        /// End-of-day (EOD) key figures for the time range of one month, for a list of notations.
        /// </summary>
        /// <remarks>
        /// End-of-day (EOD) key figures for the time range of one month, for a list of notations.
        /// </remarks>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifiers"></param>
        /// <param name="identifierType"></param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <returns>ApiResponse of InlineResponse20081</returns>
        ApiResponse<InlineResponse20081> GetNotationKeyFiguresMonth1ListWithHttpInfo(List<string> identifiers, string identifierType, List<string> attributes = default(List<string>));
        /// <summary>
        /// End-of-day (EOD) key figures for the time range of three months.
        /// </summary>
        /// <remarks>
        /// End-of-day (EOD) key figures for the time range of three months.
        /// </remarks>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifier"></param>
        /// <param name="identifierType"></param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <returns>InlineResponse20078</returns>
        InlineResponse20078 GetNotationKeyFiguresMonth3Get(string identifier, string identifierType, List<string> attributes = default(List<string>));

        /// <summary>
        /// End-of-day (EOD) key figures for the time range of three months.
        /// </summary>
        /// <remarks>
        /// End-of-day (EOD) key figures for the time range of three months.
        /// </remarks>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifier"></param>
        /// <param name="identifierType"></param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <returns>ApiResponse of InlineResponse20078</returns>
        ApiResponse<InlineResponse20078> GetNotationKeyFiguresMonth3GetWithHttpInfo(string identifier, string identifierType, List<string> attributes = default(List<string>));
        /// <summary>
        /// End-of-day (EOD) key figures for the time range of three months, for a list of notations.
        /// </summary>
        /// <remarks>
        /// End-of-day (EOD) key figures for the time range of three months, for a list of notations.
        /// </remarks>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifiers"></param>
        /// <param name="identifierType"></param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <returns>InlineResponse20079</returns>
        InlineResponse20079 GetNotationKeyFiguresMonth3List(List<string> identifiers, string identifierType, List<string> attributes = default(List<string>));

        /// <summary>
        /// End-of-day (EOD) key figures for the time range of three months, for a list of notations.
        /// </summary>
        /// <remarks>
        /// End-of-day (EOD) key figures for the time range of three months, for a list of notations.
        /// </remarks>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifiers"></param>
        /// <param name="identifierType"></param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <returns>ApiResponse of InlineResponse20079</returns>
        ApiResponse<InlineResponse20079> GetNotationKeyFiguresMonth3ListWithHttpInfo(List<string> identifiers, string identifierType, List<string> attributes = default(List<string>));
        /// <summary>
        /// End-of-day (EOD) key figures for the time range of six months.
        /// </summary>
        /// <remarks>
        /// End-of-day (EOD) key figures for the time range of six months.
        /// </remarks>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifier"></param>
        /// <param name="identifierType"></param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <returns>InlineResponse20078</returns>
        InlineResponse20078 GetNotationKeyFiguresMonth6Get(string identifier, string identifierType, List<string> attributes = default(List<string>));

        /// <summary>
        /// End-of-day (EOD) key figures for the time range of six months.
        /// </summary>
        /// <remarks>
        /// End-of-day (EOD) key figures for the time range of six months.
        /// </remarks>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifier"></param>
        /// <param name="identifierType"></param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <returns>ApiResponse of InlineResponse20078</returns>
        ApiResponse<InlineResponse20078> GetNotationKeyFiguresMonth6GetWithHttpInfo(string identifier, string identifierType, List<string> attributes = default(List<string>));
        /// <summary>
        /// End-of-day (EOD) key figures for the time range of six months, for a list of notations.
        /// </summary>
        /// <remarks>
        /// End-of-day (EOD) key figures for the time range of six months, for a list of notations.
        /// </remarks>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifiers"></param>
        /// <param name="identifierType"></param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <returns>InlineResponse20079</returns>
        InlineResponse20079 GetNotationKeyFiguresMonth6List(List<string> identifiers, string identifierType, List<string> attributes = default(List<string>));

        /// <summary>
        /// End-of-day (EOD) key figures for the time range of six months, for a list of notations.
        /// </summary>
        /// <remarks>
        /// End-of-day (EOD) key figures for the time range of six months, for a list of notations.
        /// </remarks>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifiers"></param>
        /// <param name="identifierType"></param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <returns>ApiResponse of InlineResponse20079</returns>
        ApiResponse<InlineResponse20079> GetNotationKeyFiguresMonth6ListWithHttpInfo(List<string> identifiers, string identifierType, List<string> attributes = default(List<string>));
        /// <summary>
        /// Average end-of-day (EOD) key figures for different trading days periods.
        /// </summary>
        /// <remarks>
        /// Average end-of-day (EOD) key figures for different trading days periods. A trading day is a calendar day on that trading of the notation was possible.
        /// </remarks>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifier"></param>
        /// <param name="identifierType"></param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <returns>InlineResponse20084</returns>
        InlineResponse20084 GetNotationKeyFiguresTradingDayAverageGet(string identifier, string identifierType, List<string> attributes = default(List<string>));

        /// <summary>
        /// Average end-of-day (EOD) key figures for different trading days periods.
        /// </summary>
        /// <remarks>
        /// Average end-of-day (EOD) key figures for different trading days periods. A trading day is a calendar day on that trading of the notation was possible.
        /// </remarks>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifier"></param>
        /// <param name="identifierType"></param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <returns>ApiResponse of InlineResponse20084</returns>
        ApiResponse<InlineResponse20084> GetNotationKeyFiguresTradingDayAverageGetWithHttpInfo(string identifier, string identifierType, List<string> attributes = default(List<string>));
        /// <summary>
        /// End-of-day (EOD) key figures for the time range of one week.
        /// </summary>
        /// <remarks>
        /// End-of-day (EOD) key figures for the time range of one week.
        /// </remarks>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifier"></param>
        /// <param name="identifierType"></param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <returns>InlineResponse20080</returns>
        InlineResponse20080 GetNotationKeyFiguresWeek1Get(string identifier, string identifierType, List<string> attributes = default(List<string>));

        /// <summary>
        /// End-of-day (EOD) key figures for the time range of one week.
        /// </summary>
        /// <remarks>
        /// End-of-day (EOD) key figures for the time range of one week.
        /// </remarks>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifier"></param>
        /// <param name="identifierType"></param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <returns>ApiResponse of InlineResponse20080</returns>
        ApiResponse<InlineResponse20080> GetNotationKeyFiguresWeek1GetWithHttpInfo(string identifier, string identifierType, List<string> attributes = default(List<string>));
        /// <summary>
        /// End-of-day (EOD) key figures for the time range of one week, for a list of notations.
        /// </summary>
        /// <remarks>
        /// End-of-day (EOD) key figures for the time range of one week, for a list of notations.
        /// </remarks>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifiers"></param>
        /// <param name="identifierType"></param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <returns>InlineResponse20081</returns>
        InlineResponse20081 GetNotationKeyFiguresWeek1List(List<string> identifiers, string identifierType, List<string> attributes = default(List<string>));

        /// <summary>
        /// End-of-day (EOD) key figures for the time range of one week, for a list of notations.
        /// </summary>
        /// <remarks>
        /// End-of-day (EOD) key figures for the time range of one week, for a list of notations.
        /// </remarks>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifiers"></param>
        /// <param name="identifierType"></param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <returns>ApiResponse of InlineResponse20081</returns>
        ApiResponse<InlineResponse20081> GetNotationKeyFiguresWeek1ListWithHttpInfo(List<string> identifiers, string identifierType, List<string> attributes = default(List<string>));
        /// <summary>
        /// End-of-day (EOD) key figures for the time range of ten years.
        /// </summary>
        /// <remarks>
        /// End-of-day (EOD) key figures for the time range of ten years.
        /// </remarks>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifier"></param>
        /// <param name="identifierType"></param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <returns>InlineResponse20078</returns>
        InlineResponse20078 GetNotationKeyFiguresYear10Get(string identifier, string identifierType, List<string> attributes = default(List<string>));

        /// <summary>
        /// End-of-day (EOD) key figures for the time range of ten years.
        /// </summary>
        /// <remarks>
        /// End-of-day (EOD) key figures for the time range of ten years.
        /// </remarks>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifier"></param>
        /// <param name="identifierType"></param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <returns>ApiResponse of InlineResponse20078</returns>
        ApiResponse<InlineResponse20078> GetNotationKeyFiguresYear10GetWithHttpInfo(string identifier, string identifierType, List<string> attributes = default(List<string>));
        /// <summary>
        /// End-of-day (EOD) key figures for the time range of ten years, for a list of notations.
        /// </summary>
        /// <remarks>
        /// End-of-day (EOD) key figures for the time range of ten years, for a list of notations.
        /// </remarks>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifiers"></param>
        /// <param name="identifierType"></param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <returns>InlineResponse20079</returns>
        InlineResponse20079 GetNotationKeyFiguresYear10List(List<string> identifiers, string identifierType, List<string> attributes = default(List<string>));

        /// <summary>
        /// End-of-day (EOD) key figures for the time range of ten years, for a list of notations.
        /// </summary>
        /// <remarks>
        /// End-of-day (EOD) key figures for the time range of ten years, for a list of notations.
        /// </remarks>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifiers"></param>
        /// <param name="identifierType"></param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <returns>ApiResponse of InlineResponse20079</returns>
        ApiResponse<InlineResponse20079> GetNotationKeyFiguresYear10ListWithHttpInfo(List<string> identifiers, string identifierType, List<string> attributes = default(List<string>));
        /// <summary>
        /// End-of-day (EOD) key figures for the time range of one year.
        /// </summary>
        /// <remarks>
        /// End-of-day (EOD) key figures for the time range of one year.
        /// </remarks>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifier"></param>
        /// <param name="identifierType"></param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <returns>InlineResponse20080</returns>
        InlineResponse20080 GetNotationKeyFiguresYear1Get(string identifier, string identifierType, List<string> attributes = default(List<string>));

        /// <summary>
        /// End-of-day (EOD) key figures for the time range of one year.
        /// </summary>
        /// <remarks>
        /// End-of-day (EOD) key figures for the time range of one year.
        /// </remarks>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifier"></param>
        /// <param name="identifierType"></param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <returns>ApiResponse of InlineResponse20080</returns>
        ApiResponse<InlineResponse20080> GetNotationKeyFiguresYear1GetWithHttpInfo(string identifier, string identifierType, List<string> attributes = default(List<string>));
        /// <summary>
        /// End-of-day (EOD) key figures for the time range of one year, for a list of notations.
        /// </summary>
        /// <remarks>
        /// End-of-day (EOD) key figures for the time range of one year, for a list of notations.
        /// </remarks>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifiers"></param>
        /// <param name="identifierType"></param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <returns>InlineResponse20081</returns>
        InlineResponse20081 GetNotationKeyFiguresYear1List(List<string> identifiers, string identifierType, List<string> attributes = default(List<string>));

        /// <summary>
        /// End-of-day (EOD) key figures for the time range of one year, for a list of notations.
        /// </summary>
        /// <remarks>
        /// End-of-day (EOD) key figures for the time range of one year, for a list of notations.
        /// </remarks>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifiers"></param>
        /// <param name="identifierType"></param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <returns>ApiResponse of InlineResponse20081</returns>
        ApiResponse<InlineResponse20081> GetNotationKeyFiguresYear1ListWithHttpInfo(List<string> identifiers, string identifierType, List<string> attributes = default(List<string>));
        /// <summary>
        /// End-of-day (EOD) key figures for the time range of three years.
        /// </summary>
        /// <remarks>
        /// End-of-day (EOD) key figures for the time range of three years.
        /// </remarks>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifier"></param>
        /// <param name="identifierType"></param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <returns>InlineResponse20078</returns>
        InlineResponse20078 GetNotationKeyFiguresYear3Get(string identifier, string identifierType, List<string> attributes = default(List<string>));

        /// <summary>
        /// End-of-day (EOD) key figures for the time range of three years.
        /// </summary>
        /// <remarks>
        /// End-of-day (EOD) key figures for the time range of three years.
        /// </remarks>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifier"></param>
        /// <param name="identifierType"></param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <returns>ApiResponse of InlineResponse20078</returns>
        ApiResponse<InlineResponse20078> GetNotationKeyFiguresYear3GetWithHttpInfo(string identifier, string identifierType, List<string> attributes = default(List<string>));
        /// <summary>
        /// End-of-day (EOD) key figures for the time range of three years, for a list of notations.
        /// </summary>
        /// <remarks>
        /// End-of-day (EOD) key figures for the time range of three years, for a list of notations.
        /// </remarks>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifiers"></param>
        /// <param name="identifierType"></param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <returns>InlineResponse20079</returns>
        InlineResponse20079 GetNotationKeyFiguresYear3List(List<string> identifiers, string identifierType, List<string> attributes = default(List<string>));

        /// <summary>
        /// End-of-day (EOD) key figures for the time range of three years, for a list of notations.
        /// </summary>
        /// <remarks>
        /// End-of-day (EOD) key figures for the time range of three years, for a list of notations.
        /// </remarks>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifiers"></param>
        /// <param name="identifierType"></param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <returns>ApiResponse of InlineResponse20079</returns>
        ApiResponse<InlineResponse20079> GetNotationKeyFiguresYear3ListWithHttpInfo(List<string> identifiers, string identifierType, List<string> attributes = default(List<string>));
        /// <summary>
        /// End-of-day (EOD) key figures for the time range of five years.
        /// </summary>
        /// <remarks>
        /// End-of-day (EOD) key figures for the time range of five years.
        /// </remarks>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifier"></param>
        /// <param name="identifierType"></param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <returns>InlineResponse20078</returns>
        InlineResponse20078 GetNotationKeyFiguresYear5Get(string identifier, string identifierType, List<string> attributes = default(List<string>));

        /// <summary>
        /// End-of-day (EOD) key figures for the time range of five years.
        /// </summary>
        /// <remarks>
        /// End-of-day (EOD) key figures for the time range of five years.
        /// </remarks>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifier"></param>
        /// <param name="identifierType"></param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <returns>ApiResponse of InlineResponse20078</returns>
        ApiResponse<InlineResponse20078> GetNotationKeyFiguresYear5GetWithHttpInfo(string identifier, string identifierType, List<string> attributes = default(List<string>));
        /// <summary>
        /// End-of-day (EOD) key figures for the time range of five years, for a list of notations.
        /// </summary>
        /// <remarks>
        /// End-of-day (EOD) key figures for the time range of five years, for a list of notations.
        /// </remarks>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifiers"></param>
        /// <param name="identifierType"></param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <returns>InlineResponse20079</returns>
        InlineResponse20079 GetNotationKeyFiguresYear5List(List<string> identifiers, string identifierType, List<string> attributes = default(List<string>));

        /// <summary>
        /// End-of-day (EOD) key figures for the time range of five years, for a list of notations.
        /// </summary>
        /// <remarks>
        /// End-of-day (EOD) key figures for the time range of five years, for a list of notations.
        /// </remarks>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifiers"></param>
        /// <param name="identifierType"></param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <returns>ApiResponse of InlineResponse20079</returns>
        ApiResponse<InlineResponse20079> GetNotationKeyFiguresYear5ListWithHttpInfo(List<string> identifiers, string identifierType, List<string> attributes = default(List<string>));
        /// <summary>
        /// End-of-day (EOD) key figures for the time range of seven years.
        /// </summary>
        /// <remarks>
        /// End-of-day (EOD) key figures for the time range of seven years.
        /// </remarks>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifier"></param>
        /// <param name="identifierType"></param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <returns>InlineResponse20078</returns>
        InlineResponse20078 GetNotationKeyFiguresYear7Get(string identifier, string identifierType, List<string> attributes = default(List<string>));

        /// <summary>
        /// End-of-day (EOD) key figures for the time range of seven years.
        /// </summary>
        /// <remarks>
        /// End-of-day (EOD) key figures for the time range of seven years.
        /// </remarks>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifier"></param>
        /// <param name="identifierType"></param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <returns>ApiResponse of InlineResponse20078</returns>
        ApiResponse<InlineResponse20078> GetNotationKeyFiguresYear7GetWithHttpInfo(string identifier, string identifierType, List<string> attributes = default(List<string>));
        /// <summary>
        /// End-of-day (EOD) key figures for the time range of seven years, for a list of notations.
        /// </summary>
        /// <remarks>
        /// End-of-day (EOD) key figures for the time range of seven years, for a list of notations.
        /// </remarks>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifiers"></param>
        /// <param name="identifierType"></param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <returns>InlineResponse20079</returns>
        InlineResponse20079 GetNotationKeyFiguresYear7List(List<string> identifiers, string identifierType, List<string> attributes = default(List<string>));

        /// <summary>
        /// End-of-day (EOD) key figures for the time range of seven years, for a list of notations.
        /// </summary>
        /// <remarks>
        /// End-of-day (EOD) key figures for the time range of seven years, for a list of notations.
        /// </remarks>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifiers"></param>
        /// <param name="identifierType"></param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <returns>ApiResponse of InlineResponse20079</returns>
        ApiResponse<InlineResponse20079> GetNotationKeyFiguresYear7ListWithHttpInfo(List<string> identifiers, string identifierType, List<string> attributes = default(List<string>));
        /// <summary>
        /// End-of-day (EOD) key figures for the time range year-to-date (YTD)..
        /// </summary>
        /// <remarks>
        /// End-of-day (EOD) key figures for the time range year-to-date (YTD). The time range YTD begins with the last trading day of the previous calendar year for which EOD prices are available and ends with the most recent trading day of the current calendar year for which EOD prices are available..
        /// </remarks>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifier"></param>
        /// <param name="identifierType"></param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <returns>InlineResponse20082</returns>
        InlineResponse20082 GetNotationKeyFiguresYearToDateGet(string identifier, string identifierType, List<string> attributes = default(List<string>));

        /// <summary>
        /// End-of-day (EOD) key figures for the time range year-to-date (YTD)..
        /// </summary>
        /// <remarks>
        /// End-of-day (EOD) key figures for the time range year-to-date (YTD). The time range YTD begins with the last trading day of the previous calendar year for which EOD prices are available and ends with the most recent trading day of the current calendar year for which EOD prices are available..
        /// </remarks>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifier"></param>
        /// <param name="identifierType"></param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <returns>ApiResponse of InlineResponse20082</returns>
        ApiResponse<InlineResponse20082> GetNotationKeyFiguresYearToDateGetWithHttpInfo(string identifier, string identifierType, List<string> attributes = default(List<string>));
        /// <summary>
        /// End-of-day (EOD) key figures for the time range year-to-date (YTD), for a list of notations..
        /// </summary>
        /// <remarks>
        /// End-of-day (EOD) key figures for the time range year-to-date (YTD), for a list of notations. The time range YTD begins with the last trading day of the previous calendar year for which EOD prices are available and ends with the most recent tradingday of the current calendar year for which EOD prices are available..
        /// </remarks>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifiers"></param>
        /// <param name="identifierType"></param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <returns>InlineResponse20083</returns>
        InlineResponse20083 GetNotationKeyFiguresYearToDateList(List<string> identifiers, string identifierType, List<string> attributes = default(List<string>));

        /// <summary>
        /// End-of-day (EOD) key figures for the time range year-to-date (YTD), for a list of notations..
        /// </summary>
        /// <remarks>
        /// End-of-day (EOD) key figures for the time range year-to-date (YTD), for a list of notations. The time range YTD begins with the last trading day of the previous calendar year for which EOD prices are available and ends with the most recent tradingday of the current calendar year for which EOD prices are available..
        /// </remarks>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifiers"></param>
        /// <param name="identifierType"></param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <returns>ApiResponse of InlineResponse20083</returns>
        ApiResponse<InlineResponse20083> GetNotationKeyFiguresYearToDateListWithHttpInfo(List<string> identifiers, string identifierType, List<string> attributes = default(List<string>));
        /// <summary>
        /// Basic data for a list of notations.
        /// </summary>
        /// <remarks>
        /// Basic data for a list of notations.
        /// </remarks>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifiers"></param>
        /// <param name="identifierType"></param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="language"> (optional)</param>
        /// <returns>InlineResponse20069</returns>
        InlineResponse20069 GetNotationList(List<string> identifiers, string identifierType, List<string> attributes = default(List<string>), string language = default(string));

        /// <summary>
        /// Basic data for a list of notations.
        /// </summary>
        /// <remarks>
        /// Basic data for a list of notations.
        /// </remarks>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifiers"></param>
        /// <param name="identifierType"></param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="language"> (optional)</param>
        /// <returns>ApiResponse of InlineResponse20069</returns>
        ApiResponse<InlineResponse20069> GetNotationListWithHttpInfo(List<string> identifiers, string identifierType, List<string> attributes = default(List<string>), string language = default(string));
        /// <summary>
        /// Basic search for notations.
        /// </summary>
        /// <remarks>
        /// Search for a notation whose ISIN, specified NSINs, name, or symbol match the search value according to a tolerant full-text match algorithm. If more than one notation of an instrument matches, only the notation with the highest monetary trading volume, averaged over one month, is considered. Better matching results appear in the response before less relevant matches. If the parameter popularity is set to true, the popularity of the notation is the primary sort criterion. Popularity is affected mostly by the request frequency of the notation.
        /// </remarks>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="searchValue"></param>
        /// <param name="nsins"> (optional)</param>
        /// <param name="assetClass"> (optional)</param>
        /// <param name="onlyActive"> (optional, default to true)</param>
        /// <param name="popularity"> (optional, default to false)</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="language"> (optional)</param>
        /// <param name="paginationOffset">Non-negative number of entries to skip, or 0 (default). (optional, default to 0M)</param>
        /// <param name="paginationLimit">Non-negative maximum number of entries to return. (optional, default to 20M)</param>
        /// <returns>InlineResponse20098</returns>
        InlineResponse20098 GetNotationSearchBasic(string searchValue, List<string> nsins = default(List<string>), string assetClass = default(string), bool? onlyActive = default(bool?), bool? popularity = default(bool?), List<string> attributes = default(List<string>), string language = default(string), decimal? paginationOffset = default(decimal?), decimal? paginationLimit = default(decimal?));

        /// <summary>
        /// Basic search for notations.
        /// </summary>
        /// <remarks>
        /// Search for a notation whose ISIN, specified NSINs, name, or symbol match the search value according to a tolerant full-text match algorithm. If more than one notation of an instrument matches, only the notation with the highest monetary trading volume, averaged over one month, is considered. Better matching results appear in the response before less relevant matches. If the parameter popularity is set to true, the popularity of the notation is the primary sort criterion. Popularity is affected mostly by the request frequency of the notation.
        /// </remarks>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="searchValue"></param>
        /// <param name="nsins"> (optional)</param>
        /// <param name="assetClass"> (optional)</param>
        /// <param name="onlyActive"> (optional, default to true)</param>
        /// <param name="popularity"> (optional, default to false)</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="language"> (optional)</param>
        /// <param name="paginationOffset">Non-negative number of entries to skip, or 0 (default). (optional, default to 0M)</param>
        /// <param name="paginationLimit">Non-negative maximum number of entries to return. (optional, default to 20M)</param>
        /// <returns>ApiResponse of InlineResponse20098</returns>
        ApiResponse<InlineResponse20098> GetNotationSearchBasicWithHttpInfo(string searchValue, List<string> nsins = default(List<string>), string assetClass = default(string), bool? onlyActive = default(bool?), bool? popularity = default(bool?), List<string> attributes = default(List<string>), string language = default(string), decimal? paginationOffset = default(decimal?), decimal? paginationLimit = default(decimal?));
        /// <summary>
        /// Set of custom notation-level selection lists.
        /// </summary>
        /// <remarks>
        /// Set of custom notation-level selection lists.
        /// </remarks>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <returns>InlineResponse20065</returns>
        InlineResponse20065 GetNotationSelectionListList(List<string> attributes = default(List<string>));

        /// <summary>
        /// Set of custom notation-level selection lists.
        /// </summary>
        /// <remarks>
        /// Set of custom notation-level selection lists.
        /// </remarks>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <returns>ApiResponse of InlineResponse20065</returns>
        ApiResponse<InlineResponse20065> GetNotationSelectionListListWithHttpInfo(List<string> attributes = default(List<string>));
        /// <summary>
        /// For each given notation, returns the notation-level selection lists of which the notation is a member.
        /// </summary>
        /// <remarks>
        /// For each given notation, returns the notation-level selection lists of which the notation is a member.
        /// </remarks>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifiers"></param>
        /// <param name="identifierType"></param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <returns>InlineResponse20086</returns>
        InlineResponse20086 GetNotationSelectionListListByNotation(List<string> identifiers, string identifierType, List<string> attributes = default(List<string>));

        /// <summary>
        /// For each given notation, returns the notation-level selection lists of which the notation is a member.
        /// </summary>
        /// <remarks>
        /// For each given notation, returns the notation-level selection lists of which the notation is a member.
        /// </remarks>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifiers"></param>
        /// <param name="identifierType"></param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <returns>ApiResponse of InlineResponse20086</returns>
        ApiResponse<InlineResponse20086> GetNotationSelectionListListByNotationWithHttpInfo(List<string> identifiers, string identifierType, List<string> attributes = default(List<string>));
        /// <summary>
        /// Intraday trading status of a notation.
        /// </summary>
        /// <remarks>
        /// Intraday trading status of a notation.&lt;br&gt;The endpoint is subscribable to provide push updates. See attribute &#x60;_subscriptionMinimalInterval&#x60; for valid update rates.
        /// </remarks>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifier"></param>
        /// <param name="identifierType"></param>
        /// <param name="quality"> (optional, default to DLY)</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="subscriptionMinimumInterval">Minimum number of milliseconds at which updates are sent. (optional, default to 5000M)</param>
        /// <returns>InlineResponse20088</returns>
        InlineResponse20088 GetNotationStatusGet(string identifier, string identifierType, string quality = default(string), List<string> attributes = default(List<string>), decimal? subscriptionMinimumInterval = default(decimal?));

        /// <summary>
        /// Intraday trading status of a notation.
        /// </summary>
        /// <remarks>
        /// Intraday trading status of a notation.&lt;br&gt;The endpoint is subscribable to provide push updates. See attribute &#x60;_subscriptionMinimalInterval&#x60; for valid update rates.
        /// </remarks>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifier"></param>
        /// <param name="identifierType"></param>
        /// <param name="quality"> (optional, default to DLY)</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="subscriptionMinimumInterval">Minimum number of milliseconds at which updates are sent. (optional, default to 5000M)</param>
        /// <returns>ApiResponse of InlineResponse20088</returns>
        ApiResponse<InlineResponse20088> GetNotationStatusGetWithHttpInfo(string identifier, string identifierType, string quality = default(string), List<string> attributes = default(List<string>), decimal? subscriptionMinimumInterval = default(decimal?));
        /// <summary>
        /// List of categories assigned to a specific notation the application is entitled to see.
        /// </summary>
        /// <remarks>
        /// List of categories assigned to a specific notation the application is entitled to see. Optionally it is possible to restrict the output to only list those for a specific category dataset.
        /// </remarks>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postNotationCategoryListRequest">Request Body (optional)</param>
        /// <returns>InlineResponse20070</returns>
        InlineResponse20070 PostNotationCategoryList(PostNotationCategoryListRequest postNotationCategoryListRequest = default(PostNotationCategoryListRequest));

        /// <summary>
        /// List of categories assigned to a specific notation the application is entitled to see.
        /// </summary>
        /// <remarks>
        /// List of categories assigned to a specific notation the application is entitled to see. Optionally it is possible to restrict the output to only list those for a specific category dataset.
        /// </remarks>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postNotationCategoryListRequest">Request Body (optional)</param>
        /// <returns>ApiResponse of InlineResponse20070</returns>
        ApiResponse<InlineResponse20070> PostNotationCategoryListWithHttpInfo(PostNotationCategoryListRequest postNotationCategoryListRequest = default(PostNotationCategoryListRequest));
        /// <summary>
        /// Retrieve a list of notations for a given FactSet identifier.
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Retrieve a list of notations for a given FactSet identifier, grouped by regional identifiers, if available. Listings without a regional identifier are grouped at the end of the response.&lt;/p&gt;&lt;p&gt;The notation corresponding to the security&#39;s primary listing has the attributes &lt;big&gt;&lt;tt&gt;regional.isPrimary&lt;/tt&gt;&lt;/big&gt; and &lt;big&gt;&lt;tt&gt;regional.listing.isPrimary&lt;/tt&gt;&lt;/big&gt; both set to true.The security&#39;s primary listing might not be among the results depending on the entitlement.&lt;/p&gt;&lt;p&gt;See the group description for more information about the security&#39;s primary listing.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postNotationCrossReferenceFactSetIdentifierListByFactSetIdentifierRequest">Request Body</param>
        /// <returns>InlineResponse20076</returns>
        InlineResponse20076 PostNotationCrossReferenceFactSetIdentifierListByFactSetIdentifier(PostNotationCrossReferenceFactSetIdentifierListByFactSetIdentifierRequest postNotationCrossReferenceFactSetIdentifierListByFactSetIdentifierRequest);

        /// <summary>
        /// Retrieve a list of notations for a given FactSet identifier.
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Retrieve a list of notations for a given FactSet identifier, grouped by regional identifiers, if available. Listings without a regional identifier are grouped at the end of the response.&lt;/p&gt;&lt;p&gt;The notation corresponding to the security&#39;s primary listing has the attributes &lt;big&gt;&lt;tt&gt;regional.isPrimary&lt;/tt&gt;&lt;/big&gt; and &lt;big&gt;&lt;tt&gt;regional.listing.isPrimary&lt;/tt&gt;&lt;/big&gt; both set to true.The security&#39;s primary listing might not be among the results depending on the entitlement.&lt;/p&gt;&lt;p&gt;See the group description for more information about the security&#39;s primary listing.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postNotationCrossReferenceFactSetIdentifierListByFactSetIdentifierRequest">Request Body</param>
        /// <returns>ApiResponse of InlineResponse20076</returns>
        ApiResponse<InlineResponse20076> PostNotationCrossReferenceFactSetIdentifierListByFactSetIdentifierWithHttpInfo(PostNotationCrossReferenceFactSetIdentifierListByFactSetIdentifierRequest postNotationCrossReferenceFactSetIdentifierListByFactSetIdentifierRequest);
        /// <summary>
        /// Retrieve a list of FactSet identifiers for a given instrument.
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Retrieve a list of FactSet identifiers for a given instrument, grouped by regional identifiers, if available. Listings without a regional identifier are grouped at the end of the response.&lt;/p&gt;&lt;p&gt;The notation corresponding to the security&#39;s primary listing has the attributes &lt;big&gt;&lt;tt&gt;regional.isPrimary&lt;/tt&gt;&lt;/big&gt; and &lt;big&gt;&lt;tt&gt;regional.listing.isPrimary&lt;/tt&gt;&lt;/big&gt; both set to true.The security&#39;s primary listing might not be among the results depending on the entitlement.&lt;/p&gt;&lt;p&gt;The result contains only notations that have at least one FactSet identifier (see &lt;big&gt;&lt;tt&gt;listing.permanentIdentifier&lt;/tt&gt;&lt;/big&gt;, &lt;big&gt;&lt;tt&gt;listing.tickerExchange&lt;/tt&gt;&lt;/big&gt;).&lt;/p&gt;&lt;p&gt;See the group description for more information about the security&#39;s primary listing.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postNotationCrossReferenceFactSetIdentifierListByInstrumentRequest">Request Body</param>
        /// <returns>InlineResponse20077</returns>
        InlineResponse20077 PostNotationCrossReferenceFactSetIdentifierListByInstrument(PostNotationCrossReferenceFactSetIdentifierListByInstrumentRequest postNotationCrossReferenceFactSetIdentifierListByInstrumentRequest);

        /// <summary>
        /// Retrieve a list of FactSet identifiers for a given instrument.
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Retrieve a list of FactSet identifiers for a given instrument, grouped by regional identifiers, if available. Listings without a regional identifier are grouped at the end of the response.&lt;/p&gt;&lt;p&gt;The notation corresponding to the security&#39;s primary listing has the attributes &lt;big&gt;&lt;tt&gt;regional.isPrimary&lt;/tt&gt;&lt;/big&gt; and &lt;big&gt;&lt;tt&gt;regional.listing.isPrimary&lt;/tt&gt;&lt;/big&gt; both set to true.The security&#39;s primary listing might not be among the results depending on the entitlement.&lt;/p&gt;&lt;p&gt;The result contains only notations that have at least one FactSet identifier (see &lt;big&gt;&lt;tt&gt;listing.permanentIdentifier&lt;/tt&gt;&lt;/big&gt;, &lt;big&gt;&lt;tt&gt;listing.tickerExchange&lt;/tt&gt;&lt;/big&gt;).&lt;/p&gt;&lt;p&gt;See the group description for more information about the security&#39;s primary listing.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postNotationCrossReferenceFactSetIdentifierListByInstrumentRequest">Request Body</param>
        /// <returns>ApiResponse of InlineResponse20077</returns>
        ApiResponse<InlineResponse20077> PostNotationCrossReferenceFactSetIdentifierListByInstrumentWithHttpInfo(PostNotationCrossReferenceFactSetIdentifierListByInstrumentRequest postNotationCrossReferenceFactSetIdentifierListByInstrumentRequest);
        /// <summary>
        /// List of entitled notations.
        /// </summary>
        /// <remarks>
        /// List of entitled notations.
        /// </remarks>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postNotationCrossReferenceListByISINRequest">Request Body (optional)</param>
        /// <returns>InlineResponse20073</returns>
        InlineResponse20073 PostNotationCrossReferenceListByISIN(PostNotationCrossReferenceListByISINRequest postNotationCrossReferenceListByISINRequest = default(PostNotationCrossReferenceListByISINRequest));

        /// <summary>
        /// List of entitled notations.
        /// </summary>
        /// <remarks>
        /// List of entitled notations.
        /// </remarks>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postNotationCrossReferenceListByISINRequest">Request Body (optional)</param>
        /// <returns>ApiResponse of InlineResponse20073</returns>
        ApiResponse<InlineResponse20073> PostNotationCrossReferenceListByISINWithHttpInfo(PostNotationCrossReferenceListByISINRequest postNotationCrossReferenceListByISINRequest = default(PostNotationCrossReferenceListByISINRequest));
        /// <summary>
        /// List of entitled notations.
        /// </summary>
        /// <remarks>
        /// List of entitled notations.
        /// </remarks>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postNotationCrossReferenceListByInstrumentRequest">Request Body (optional)</param>
        /// <returns>InlineResponse20072</returns>
        InlineResponse20072 PostNotationCrossReferenceListByInstrument(PostNotationCrossReferenceListByInstrumentRequest postNotationCrossReferenceListByInstrumentRequest = default(PostNotationCrossReferenceListByInstrumentRequest));

        /// <summary>
        /// List of entitled notations.
        /// </summary>
        /// <remarks>
        /// List of entitled notations.
        /// </remarks>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postNotationCrossReferenceListByInstrumentRequest">Request Body (optional)</param>
        /// <returns>ApiResponse of InlineResponse20072</returns>
        ApiResponse<InlineResponse20072> PostNotationCrossReferenceListByInstrumentWithHttpInfo(PostNotationCrossReferenceListByInstrumentRequest postNotationCrossReferenceListByInstrumentRequest = default(PostNotationCrossReferenceListByInstrumentRequest));
        /// <summary>
        /// List of entitled notations.
        /// </summary>
        /// <remarks>
        /// List of entitled notations. Symbols are not globally unique; therefore, a given symbol interpreted in different markets might refer to different instruments.
        /// </remarks>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postNotationCrossReferenceListBySymbolRequest">Request Body (optional)</param>
        /// <returns>InlineResponse20074</returns>
        InlineResponse20074 PostNotationCrossReferenceListBySymbol(PostNotationCrossReferenceListBySymbolRequest postNotationCrossReferenceListBySymbolRequest = default(PostNotationCrossReferenceListBySymbolRequest));

        /// <summary>
        /// List of entitled notations.
        /// </summary>
        /// <remarks>
        /// List of entitled notations. Symbols are not globally unique; therefore, a given symbol interpreted in different markets might refer to different instruments.
        /// </remarks>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postNotationCrossReferenceListBySymbolRequest">Request Body (optional)</param>
        /// <returns>ApiResponse of InlineResponse20074</returns>
        ApiResponse<InlineResponse20074> PostNotationCrossReferenceListBySymbolWithHttpInfo(PostNotationCrossReferenceListBySymbolRequest postNotationCrossReferenceListBySymbolRequest = default(PostNotationCrossReferenceListBySymbolRequest));
        /// <summary>
        /// List of markets with entitled notations.
        /// </summary>
        /// <remarks>
        /// List of markets with entitled notations. The list contains only markets with at least one active and entitled notation.  All identifiers used as parameters must be valid and entitled.
        /// </remarks>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postNotationMarketListRequest">Request Body (optional)</param>
        /// <returns>InlineResponse20085</returns>
        InlineResponse20085 PostNotationMarketList(PostNotationMarketListRequest postNotationMarketListRequest = default(PostNotationMarketListRequest));

        /// <summary>
        /// List of markets with entitled notations.
        /// </summary>
        /// <remarks>
        /// List of markets with entitled notations. The list contains only markets with at least one active and entitled notation.  All identifiers used as parameters must be valid and entitled.
        /// </remarks>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postNotationMarketListRequest">Request Body (optional)</param>
        /// <returns>ApiResponse of InlineResponse20085</returns>
        ApiResponse<InlineResponse20085> PostNotationMarketListWithHttpInfo(PostNotationMarketListRequest postNotationMarketListRequest = default(PostNotationMarketListRequest));
        /// <summary>
        /// Text-based search for notations.
        /// </summary>
        /// <remarks>
        /// Text-based search for notations in selected identifier and name attributes according to a tolerant full-text match algorithm. The results satisfy all selected filters; sorting by various attributes is possible. If more than one notation of an instrument matches, only the notation with the best market priority (according to the parameter &#x60;market.priority&#x60;) or, in the absence of market priorities, only the notation with the highest trading volume, averaged over one month, is considered.       All identifiers used as parameters must be valid and entitled.
        /// </remarks>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postNotationSearchByTextRequest">Request Body</param>
        /// <returns>InlineResponse20099</returns>
        InlineResponse20099 PostNotationSearchByText(PostNotationSearchByTextRequest postNotationSearchByTextRequest);

        /// <summary>
        /// Text-based search for notations.
        /// </summary>
        /// <remarks>
        /// Text-based search for notations in selected identifier and name attributes according to a tolerant full-text match algorithm. The results satisfy all selected filters; sorting by various attributes is possible. If more than one notation of an instrument matches, only the notation with the best market priority (according to the parameter &#x60;market.priority&#x60;) or, in the absence of market priorities, only the notation with the highest trading volume, averaged over one month, is considered.       All identifiers used as parameters must be valid and entitled.
        /// </remarks>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postNotationSearchByTextRequest">Request Body</param>
        /// <returns>ApiResponse of InlineResponse20099</returns>
        ApiResponse<InlineResponse20099> PostNotationSearchByTextWithHttpInfo(PostNotationSearchByTextRequest postNotationSearchByTextRequest);
        /// <summary>
        /// List of notations belonging to a notation-level selection list.
        /// </summary>
        /// <remarks>
        /// List of notations belonging to a notation-level selection list.
        /// </remarks>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postNotationSelectionListMembersListRequest">Request Body (optional)</param>
        /// <returns>InlineResponse20087</returns>
        InlineResponse20087 PostNotationSelectionListMembersList(PostNotationSelectionListMembersListRequest postNotationSelectionListMembersListRequest = default(PostNotationSelectionListMembersListRequest));

        /// <summary>
        /// List of notations belonging to a notation-level selection list.
        /// </summary>
        /// <remarks>
        /// List of notations belonging to a notation-level selection list.
        /// </remarks>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postNotationSelectionListMembersListRequest">Request Body (optional)</param>
        /// <returns>ApiResponse of InlineResponse20087</returns>
        ApiResponse<InlineResponse20087> PostNotationSelectionListMembersListWithHttpInfo(PostNotationSelectionListMembersListRequest postNotationSelectionListMembersListRequest = default(PostNotationSelectionListMembersListRequest));
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface INotationApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Retrieve FactSet identifiers for a given notation.
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Retrieve FactSet identifiers for a given notation. Security and listing-level identifiers are always included, regional level identifiers are included, if available.
        /// </remarks>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifier"></param>
        /// <param name="identifierType"></param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse20075</returns>
        System.Threading.Tasks.Task<InlineResponse20075> GetNotationCrossReferenceFactSetIdentifierGetAsync(string identifier, string identifierType, List<string> attributes = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieve FactSet identifiers for a given notation.
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Retrieve FactSet identifiers for a given notation. Security and listing-level identifiers are always included, regional level identifiers are included, if available.
        /// </remarks>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifier"></param>
        /// <param name="identifierType"></param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse20075)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20075>> GetNotationCrossReferenceFactSetIdentifierGetWithHttpInfoAsync(string identifier, string identifierType, List<string> attributes = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Translate a FactSet market symbol to a notation.
        /// </summary>
        /// <remarks>
        /// Translate a FactSet market symbol to a notation. This symbol is also known as TICKER_EXCHANGE.
        /// </remarks>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="factSetMarketSymbol"></param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="language"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse20071</returns>
        System.Threading.Tasks.Task<InlineResponse20071> GetNotationCrossReferenceGetByFactSetMarketSymbolAsync(string factSetMarketSymbol, List<string> attributes = default(List<string>), string language = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Translate a FactSet market symbol to a notation.
        /// </summary>
        /// <remarks>
        /// Translate a FactSet market symbol to a notation. This symbol is also known as TICKER_EXCHANGE.
        /// </remarks>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="factSetMarketSymbol"></param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="language"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse20071)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20071>> GetNotationCrossReferenceGetByFactSetMarketSymbolWithHttpInfoAsync(string factSetMarketSymbol, List<string> attributes = default(List<string>), string language = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Basic data for a notation.
        /// </summary>
        /// <remarks>
        /// Basic data for a notation.
        /// </remarks>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifier"></param>
        /// <param name="identifierType"></param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="language"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse20068</returns>
        System.Threading.Tasks.Task<InlineResponse20068> GetNotationGetAsync(string identifier, string identifierType, List<string> attributes = default(List<string>), string language = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Basic data for a notation.
        /// </summary>
        /// <remarks>
        /// Basic data for a notation.
        /// </remarks>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifier"></param>
        /// <param name="identifierType"></param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="language"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse20068)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20068>> GetNotationGetWithHttpInfoAsync(string identifier, string identifierType, List<string> attributes = default(List<string>), string language = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// End-of-day (EOD) key figures for the time range of one month.
        /// </summary>
        /// <remarks>
        /// End-of-day (EOD) key figures for the time range of one month.
        /// </remarks>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifier"></param>
        /// <param name="identifierType"></param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse20080</returns>
        System.Threading.Tasks.Task<InlineResponse20080> GetNotationKeyFiguresMonth1GetAsync(string identifier, string identifierType, List<string> attributes = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// End-of-day (EOD) key figures for the time range of one month.
        /// </summary>
        /// <remarks>
        /// End-of-day (EOD) key figures for the time range of one month.
        /// </remarks>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifier"></param>
        /// <param name="identifierType"></param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse20080)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20080>> GetNotationKeyFiguresMonth1GetWithHttpInfoAsync(string identifier, string identifierType, List<string> attributes = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// End-of-day (EOD) key figures for the time range of one month, for a list of notations.
        /// </summary>
        /// <remarks>
        /// End-of-day (EOD) key figures for the time range of one month, for a list of notations.
        /// </remarks>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifiers"></param>
        /// <param name="identifierType"></param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse20081</returns>
        System.Threading.Tasks.Task<InlineResponse20081> GetNotationKeyFiguresMonth1ListAsync(List<string> identifiers, string identifierType, List<string> attributes = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// End-of-day (EOD) key figures for the time range of one month, for a list of notations.
        /// </summary>
        /// <remarks>
        /// End-of-day (EOD) key figures for the time range of one month, for a list of notations.
        /// </remarks>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifiers"></param>
        /// <param name="identifierType"></param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse20081)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20081>> GetNotationKeyFiguresMonth1ListWithHttpInfoAsync(List<string> identifiers, string identifierType, List<string> attributes = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// End-of-day (EOD) key figures for the time range of three months.
        /// </summary>
        /// <remarks>
        /// End-of-day (EOD) key figures for the time range of three months.
        /// </remarks>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifier"></param>
        /// <param name="identifierType"></param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse20078</returns>
        System.Threading.Tasks.Task<InlineResponse20078> GetNotationKeyFiguresMonth3GetAsync(string identifier, string identifierType, List<string> attributes = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// End-of-day (EOD) key figures for the time range of three months.
        /// </summary>
        /// <remarks>
        /// End-of-day (EOD) key figures for the time range of three months.
        /// </remarks>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifier"></param>
        /// <param name="identifierType"></param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse20078)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20078>> GetNotationKeyFiguresMonth3GetWithHttpInfoAsync(string identifier, string identifierType, List<string> attributes = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// End-of-day (EOD) key figures for the time range of three months, for a list of notations.
        /// </summary>
        /// <remarks>
        /// End-of-day (EOD) key figures for the time range of three months, for a list of notations.
        /// </remarks>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifiers"></param>
        /// <param name="identifierType"></param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse20079</returns>
        System.Threading.Tasks.Task<InlineResponse20079> GetNotationKeyFiguresMonth3ListAsync(List<string> identifiers, string identifierType, List<string> attributes = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// End-of-day (EOD) key figures for the time range of three months, for a list of notations.
        /// </summary>
        /// <remarks>
        /// End-of-day (EOD) key figures for the time range of three months, for a list of notations.
        /// </remarks>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifiers"></param>
        /// <param name="identifierType"></param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse20079)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20079>> GetNotationKeyFiguresMonth3ListWithHttpInfoAsync(List<string> identifiers, string identifierType, List<string> attributes = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// End-of-day (EOD) key figures for the time range of six months.
        /// </summary>
        /// <remarks>
        /// End-of-day (EOD) key figures for the time range of six months.
        /// </remarks>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifier"></param>
        /// <param name="identifierType"></param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse20078</returns>
        System.Threading.Tasks.Task<InlineResponse20078> GetNotationKeyFiguresMonth6GetAsync(string identifier, string identifierType, List<string> attributes = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// End-of-day (EOD) key figures for the time range of six months.
        /// </summary>
        /// <remarks>
        /// End-of-day (EOD) key figures for the time range of six months.
        /// </remarks>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifier"></param>
        /// <param name="identifierType"></param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse20078)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20078>> GetNotationKeyFiguresMonth6GetWithHttpInfoAsync(string identifier, string identifierType, List<string> attributes = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// End-of-day (EOD) key figures for the time range of six months, for a list of notations.
        /// </summary>
        /// <remarks>
        /// End-of-day (EOD) key figures for the time range of six months, for a list of notations.
        /// </remarks>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifiers"></param>
        /// <param name="identifierType"></param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse20079</returns>
        System.Threading.Tasks.Task<InlineResponse20079> GetNotationKeyFiguresMonth6ListAsync(List<string> identifiers, string identifierType, List<string> attributes = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// End-of-day (EOD) key figures for the time range of six months, for a list of notations.
        /// </summary>
        /// <remarks>
        /// End-of-day (EOD) key figures for the time range of six months, for a list of notations.
        /// </remarks>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifiers"></param>
        /// <param name="identifierType"></param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse20079)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20079>> GetNotationKeyFiguresMonth6ListWithHttpInfoAsync(List<string> identifiers, string identifierType, List<string> attributes = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Average end-of-day (EOD) key figures for different trading days periods.
        /// </summary>
        /// <remarks>
        /// Average end-of-day (EOD) key figures for different trading days periods. A trading day is a calendar day on that trading of the notation was possible.
        /// </remarks>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifier"></param>
        /// <param name="identifierType"></param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse20084</returns>
        System.Threading.Tasks.Task<InlineResponse20084> GetNotationKeyFiguresTradingDayAverageGetAsync(string identifier, string identifierType, List<string> attributes = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Average end-of-day (EOD) key figures for different trading days periods.
        /// </summary>
        /// <remarks>
        /// Average end-of-day (EOD) key figures for different trading days periods. A trading day is a calendar day on that trading of the notation was possible.
        /// </remarks>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifier"></param>
        /// <param name="identifierType"></param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse20084)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20084>> GetNotationKeyFiguresTradingDayAverageGetWithHttpInfoAsync(string identifier, string identifierType, List<string> attributes = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// End-of-day (EOD) key figures for the time range of one week.
        /// </summary>
        /// <remarks>
        /// End-of-day (EOD) key figures for the time range of one week.
        /// </remarks>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifier"></param>
        /// <param name="identifierType"></param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse20080</returns>
        System.Threading.Tasks.Task<InlineResponse20080> GetNotationKeyFiguresWeek1GetAsync(string identifier, string identifierType, List<string> attributes = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// End-of-day (EOD) key figures for the time range of one week.
        /// </summary>
        /// <remarks>
        /// End-of-day (EOD) key figures for the time range of one week.
        /// </remarks>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifier"></param>
        /// <param name="identifierType"></param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse20080)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20080>> GetNotationKeyFiguresWeek1GetWithHttpInfoAsync(string identifier, string identifierType, List<string> attributes = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// End-of-day (EOD) key figures for the time range of one week, for a list of notations.
        /// </summary>
        /// <remarks>
        /// End-of-day (EOD) key figures for the time range of one week, for a list of notations.
        /// </remarks>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifiers"></param>
        /// <param name="identifierType"></param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse20081</returns>
        System.Threading.Tasks.Task<InlineResponse20081> GetNotationKeyFiguresWeek1ListAsync(List<string> identifiers, string identifierType, List<string> attributes = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// End-of-day (EOD) key figures for the time range of one week, for a list of notations.
        /// </summary>
        /// <remarks>
        /// End-of-day (EOD) key figures for the time range of one week, for a list of notations.
        /// </remarks>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifiers"></param>
        /// <param name="identifierType"></param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse20081)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20081>> GetNotationKeyFiguresWeek1ListWithHttpInfoAsync(List<string> identifiers, string identifierType, List<string> attributes = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// End-of-day (EOD) key figures for the time range of ten years.
        /// </summary>
        /// <remarks>
        /// End-of-day (EOD) key figures for the time range of ten years.
        /// </remarks>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifier"></param>
        /// <param name="identifierType"></param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse20078</returns>
        System.Threading.Tasks.Task<InlineResponse20078> GetNotationKeyFiguresYear10GetAsync(string identifier, string identifierType, List<string> attributes = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// End-of-day (EOD) key figures for the time range of ten years.
        /// </summary>
        /// <remarks>
        /// End-of-day (EOD) key figures for the time range of ten years.
        /// </remarks>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifier"></param>
        /// <param name="identifierType"></param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse20078)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20078>> GetNotationKeyFiguresYear10GetWithHttpInfoAsync(string identifier, string identifierType, List<string> attributes = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// End-of-day (EOD) key figures for the time range of ten years, for a list of notations.
        /// </summary>
        /// <remarks>
        /// End-of-day (EOD) key figures for the time range of ten years, for a list of notations.
        /// </remarks>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifiers"></param>
        /// <param name="identifierType"></param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse20079</returns>
        System.Threading.Tasks.Task<InlineResponse20079> GetNotationKeyFiguresYear10ListAsync(List<string> identifiers, string identifierType, List<string> attributes = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// End-of-day (EOD) key figures for the time range of ten years, for a list of notations.
        /// </summary>
        /// <remarks>
        /// End-of-day (EOD) key figures for the time range of ten years, for a list of notations.
        /// </remarks>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifiers"></param>
        /// <param name="identifierType"></param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse20079)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20079>> GetNotationKeyFiguresYear10ListWithHttpInfoAsync(List<string> identifiers, string identifierType, List<string> attributes = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// End-of-day (EOD) key figures for the time range of one year.
        /// </summary>
        /// <remarks>
        /// End-of-day (EOD) key figures for the time range of one year.
        /// </remarks>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifier"></param>
        /// <param name="identifierType"></param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse20080</returns>
        System.Threading.Tasks.Task<InlineResponse20080> GetNotationKeyFiguresYear1GetAsync(string identifier, string identifierType, List<string> attributes = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// End-of-day (EOD) key figures for the time range of one year.
        /// </summary>
        /// <remarks>
        /// End-of-day (EOD) key figures for the time range of one year.
        /// </remarks>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifier"></param>
        /// <param name="identifierType"></param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse20080)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20080>> GetNotationKeyFiguresYear1GetWithHttpInfoAsync(string identifier, string identifierType, List<string> attributes = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// End-of-day (EOD) key figures for the time range of one year, for a list of notations.
        /// </summary>
        /// <remarks>
        /// End-of-day (EOD) key figures for the time range of one year, for a list of notations.
        /// </remarks>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifiers"></param>
        /// <param name="identifierType"></param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse20081</returns>
        System.Threading.Tasks.Task<InlineResponse20081> GetNotationKeyFiguresYear1ListAsync(List<string> identifiers, string identifierType, List<string> attributes = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// End-of-day (EOD) key figures for the time range of one year, for a list of notations.
        /// </summary>
        /// <remarks>
        /// End-of-day (EOD) key figures for the time range of one year, for a list of notations.
        /// </remarks>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifiers"></param>
        /// <param name="identifierType"></param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse20081)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20081>> GetNotationKeyFiguresYear1ListWithHttpInfoAsync(List<string> identifiers, string identifierType, List<string> attributes = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// End-of-day (EOD) key figures for the time range of three years.
        /// </summary>
        /// <remarks>
        /// End-of-day (EOD) key figures for the time range of three years.
        /// </remarks>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifier"></param>
        /// <param name="identifierType"></param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse20078</returns>
        System.Threading.Tasks.Task<InlineResponse20078> GetNotationKeyFiguresYear3GetAsync(string identifier, string identifierType, List<string> attributes = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// End-of-day (EOD) key figures for the time range of three years.
        /// </summary>
        /// <remarks>
        /// End-of-day (EOD) key figures for the time range of three years.
        /// </remarks>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifier"></param>
        /// <param name="identifierType"></param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse20078)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20078>> GetNotationKeyFiguresYear3GetWithHttpInfoAsync(string identifier, string identifierType, List<string> attributes = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// End-of-day (EOD) key figures for the time range of three years, for a list of notations.
        /// </summary>
        /// <remarks>
        /// End-of-day (EOD) key figures for the time range of three years, for a list of notations.
        /// </remarks>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifiers"></param>
        /// <param name="identifierType"></param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse20079</returns>
        System.Threading.Tasks.Task<InlineResponse20079> GetNotationKeyFiguresYear3ListAsync(List<string> identifiers, string identifierType, List<string> attributes = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// End-of-day (EOD) key figures for the time range of three years, for a list of notations.
        /// </summary>
        /// <remarks>
        /// End-of-day (EOD) key figures for the time range of three years, for a list of notations.
        /// </remarks>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifiers"></param>
        /// <param name="identifierType"></param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse20079)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20079>> GetNotationKeyFiguresYear3ListWithHttpInfoAsync(List<string> identifiers, string identifierType, List<string> attributes = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// End-of-day (EOD) key figures for the time range of five years.
        /// </summary>
        /// <remarks>
        /// End-of-day (EOD) key figures for the time range of five years.
        /// </remarks>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifier"></param>
        /// <param name="identifierType"></param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse20078</returns>
        System.Threading.Tasks.Task<InlineResponse20078> GetNotationKeyFiguresYear5GetAsync(string identifier, string identifierType, List<string> attributes = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// End-of-day (EOD) key figures for the time range of five years.
        /// </summary>
        /// <remarks>
        /// End-of-day (EOD) key figures for the time range of five years.
        /// </remarks>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifier"></param>
        /// <param name="identifierType"></param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse20078)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20078>> GetNotationKeyFiguresYear5GetWithHttpInfoAsync(string identifier, string identifierType, List<string> attributes = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// End-of-day (EOD) key figures for the time range of five years, for a list of notations.
        /// </summary>
        /// <remarks>
        /// End-of-day (EOD) key figures for the time range of five years, for a list of notations.
        /// </remarks>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifiers"></param>
        /// <param name="identifierType"></param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse20079</returns>
        System.Threading.Tasks.Task<InlineResponse20079> GetNotationKeyFiguresYear5ListAsync(List<string> identifiers, string identifierType, List<string> attributes = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// End-of-day (EOD) key figures for the time range of five years, for a list of notations.
        /// </summary>
        /// <remarks>
        /// End-of-day (EOD) key figures for the time range of five years, for a list of notations.
        /// </remarks>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifiers"></param>
        /// <param name="identifierType"></param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse20079)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20079>> GetNotationKeyFiguresYear5ListWithHttpInfoAsync(List<string> identifiers, string identifierType, List<string> attributes = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// End-of-day (EOD) key figures for the time range of seven years.
        /// </summary>
        /// <remarks>
        /// End-of-day (EOD) key figures for the time range of seven years.
        /// </remarks>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifier"></param>
        /// <param name="identifierType"></param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse20078</returns>
        System.Threading.Tasks.Task<InlineResponse20078> GetNotationKeyFiguresYear7GetAsync(string identifier, string identifierType, List<string> attributes = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// End-of-day (EOD) key figures for the time range of seven years.
        /// </summary>
        /// <remarks>
        /// End-of-day (EOD) key figures for the time range of seven years.
        /// </remarks>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifier"></param>
        /// <param name="identifierType"></param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse20078)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20078>> GetNotationKeyFiguresYear7GetWithHttpInfoAsync(string identifier, string identifierType, List<string> attributes = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// End-of-day (EOD) key figures for the time range of seven years, for a list of notations.
        /// </summary>
        /// <remarks>
        /// End-of-day (EOD) key figures for the time range of seven years, for a list of notations.
        /// </remarks>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifiers"></param>
        /// <param name="identifierType"></param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse20079</returns>
        System.Threading.Tasks.Task<InlineResponse20079> GetNotationKeyFiguresYear7ListAsync(List<string> identifiers, string identifierType, List<string> attributes = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// End-of-day (EOD) key figures for the time range of seven years, for a list of notations.
        /// </summary>
        /// <remarks>
        /// End-of-day (EOD) key figures for the time range of seven years, for a list of notations.
        /// </remarks>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifiers"></param>
        /// <param name="identifierType"></param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse20079)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20079>> GetNotationKeyFiguresYear7ListWithHttpInfoAsync(List<string> identifiers, string identifierType, List<string> attributes = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// End-of-day (EOD) key figures for the time range year-to-date (YTD)..
        /// </summary>
        /// <remarks>
        /// End-of-day (EOD) key figures for the time range year-to-date (YTD). The time range YTD begins with the last trading day of the previous calendar year for which EOD prices are available and ends with the most recent trading day of the current calendar year for which EOD prices are available..
        /// </remarks>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifier"></param>
        /// <param name="identifierType"></param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse20082</returns>
        System.Threading.Tasks.Task<InlineResponse20082> GetNotationKeyFiguresYearToDateGetAsync(string identifier, string identifierType, List<string> attributes = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// End-of-day (EOD) key figures for the time range year-to-date (YTD)..
        /// </summary>
        /// <remarks>
        /// End-of-day (EOD) key figures for the time range year-to-date (YTD). The time range YTD begins with the last trading day of the previous calendar year for which EOD prices are available and ends with the most recent trading day of the current calendar year for which EOD prices are available..
        /// </remarks>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifier"></param>
        /// <param name="identifierType"></param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse20082)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20082>> GetNotationKeyFiguresYearToDateGetWithHttpInfoAsync(string identifier, string identifierType, List<string> attributes = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// End-of-day (EOD) key figures for the time range year-to-date (YTD), for a list of notations..
        /// </summary>
        /// <remarks>
        /// End-of-day (EOD) key figures for the time range year-to-date (YTD), for a list of notations. The time range YTD begins with the last trading day of the previous calendar year for which EOD prices are available and ends with the most recent tradingday of the current calendar year for which EOD prices are available..
        /// </remarks>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifiers"></param>
        /// <param name="identifierType"></param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse20083</returns>
        System.Threading.Tasks.Task<InlineResponse20083> GetNotationKeyFiguresYearToDateListAsync(List<string> identifiers, string identifierType, List<string> attributes = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// End-of-day (EOD) key figures for the time range year-to-date (YTD), for a list of notations..
        /// </summary>
        /// <remarks>
        /// End-of-day (EOD) key figures for the time range year-to-date (YTD), for a list of notations. The time range YTD begins with the last trading day of the previous calendar year for which EOD prices are available and ends with the most recent tradingday of the current calendar year for which EOD prices are available..
        /// </remarks>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifiers"></param>
        /// <param name="identifierType"></param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse20083)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20083>> GetNotationKeyFiguresYearToDateListWithHttpInfoAsync(List<string> identifiers, string identifierType, List<string> attributes = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Basic data for a list of notations.
        /// </summary>
        /// <remarks>
        /// Basic data for a list of notations.
        /// </remarks>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifiers"></param>
        /// <param name="identifierType"></param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="language"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse20069</returns>
        System.Threading.Tasks.Task<InlineResponse20069> GetNotationListAsync(List<string> identifiers, string identifierType, List<string> attributes = default(List<string>), string language = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Basic data for a list of notations.
        /// </summary>
        /// <remarks>
        /// Basic data for a list of notations.
        /// </remarks>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifiers"></param>
        /// <param name="identifierType"></param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="language"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse20069)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20069>> GetNotationListWithHttpInfoAsync(List<string> identifiers, string identifierType, List<string> attributes = default(List<string>), string language = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Basic search for notations.
        /// </summary>
        /// <remarks>
        /// Search for a notation whose ISIN, specified NSINs, name, or symbol match the search value according to a tolerant full-text match algorithm. If more than one notation of an instrument matches, only the notation with the highest monetary trading volume, averaged over one month, is considered. Better matching results appear in the response before less relevant matches. If the parameter popularity is set to true, the popularity of the notation is the primary sort criterion. Popularity is affected mostly by the request frequency of the notation.
        /// </remarks>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="searchValue"></param>
        /// <param name="nsins"> (optional)</param>
        /// <param name="assetClass"> (optional)</param>
        /// <param name="onlyActive"> (optional, default to true)</param>
        /// <param name="popularity"> (optional, default to false)</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="language"> (optional)</param>
        /// <param name="paginationOffset">Non-negative number of entries to skip, or 0 (default). (optional, default to 0M)</param>
        /// <param name="paginationLimit">Non-negative maximum number of entries to return. (optional, default to 20M)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse20098</returns>
        System.Threading.Tasks.Task<InlineResponse20098> GetNotationSearchBasicAsync(string searchValue, List<string> nsins = default(List<string>), string assetClass = default(string), bool? onlyActive = default(bool?), bool? popularity = default(bool?), List<string> attributes = default(List<string>), string language = default(string), decimal? paginationOffset = default(decimal?), decimal? paginationLimit = default(decimal?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Basic search for notations.
        /// </summary>
        /// <remarks>
        /// Search for a notation whose ISIN, specified NSINs, name, or symbol match the search value according to a tolerant full-text match algorithm. If more than one notation of an instrument matches, only the notation with the highest monetary trading volume, averaged over one month, is considered. Better matching results appear in the response before less relevant matches. If the parameter popularity is set to true, the popularity of the notation is the primary sort criterion. Popularity is affected mostly by the request frequency of the notation.
        /// </remarks>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="searchValue"></param>
        /// <param name="nsins"> (optional)</param>
        /// <param name="assetClass"> (optional)</param>
        /// <param name="onlyActive"> (optional, default to true)</param>
        /// <param name="popularity"> (optional, default to false)</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="language"> (optional)</param>
        /// <param name="paginationOffset">Non-negative number of entries to skip, or 0 (default). (optional, default to 0M)</param>
        /// <param name="paginationLimit">Non-negative maximum number of entries to return. (optional, default to 20M)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse20098)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20098>> GetNotationSearchBasicWithHttpInfoAsync(string searchValue, List<string> nsins = default(List<string>), string assetClass = default(string), bool? onlyActive = default(bool?), bool? popularity = default(bool?), List<string> attributes = default(List<string>), string language = default(string), decimal? paginationOffset = default(decimal?), decimal? paginationLimit = default(decimal?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Set of custom notation-level selection lists.
        /// </summary>
        /// <remarks>
        /// Set of custom notation-level selection lists.
        /// </remarks>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse20065</returns>
        System.Threading.Tasks.Task<InlineResponse20065> GetNotationSelectionListListAsync(List<string> attributes = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Set of custom notation-level selection lists.
        /// </summary>
        /// <remarks>
        /// Set of custom notation-level selection lists.
        /// </remarks>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse20065)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20065>> GetNotationSelectionListListWithHttpInfoAsync(List<string> attributes = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// For each given notation, returns the notation-level selection lists of which the notation is a member.
        /// </summary>
        /// <remarks>
        /// For each given notation, returns the notation-level selection lists of which the notation is a member.
        /// </remarks>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifiers"></param>
        /// <param name="identifierType"></param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse20086</returns>
        System.Threading.Tasks.Task<InlineResponse20086> GetNotationSelectionListListByNotationAsync(List<string> identifiers, string identifierType, List<string> attributes = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// For each given notation, returns the notation-level selection lists of which the notation is a member.
        /// </summary>
        /// <remarks>
        /// For each given notation, returns the notation-level selection lists of which the notation is a member.
        /// </remarks>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifiers"></param>
        /// <param name="identifierType"></param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse20086)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20086>> GetNotationSelectionListListByNotationWithHttpInfoAsync(List<string> identifiers, string identifierType, List<string> attributes = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Intraday trading status of a notation.
        /// </summary>
        /// <remarks>
        /// Intraday trading status of a notation.&lt;br&gt;The endpoint is subscribable to provide push updates. See attribute &#x60;_subscriptionMinimalInterval&#x60; for valid update rates.
        /// </remarks>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifier"></param>
        /// <param name="identifierType"></param>
        /// <param name="quality"> (optional, default to DLY)</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="subscriptionMinimumInterval">Minimum number of milliseconds at which updates are sent. (optional, default to 5000M)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse20088</returns>
        System.Threading.Tasks.Task<InlineResponse20088> GetNotationStatusGetAsync(string identifier, string identifierType, string quality = default(string), List<string> attributes = default(List<string>), decimal? subscriptionMinimumInterval = default(decimal?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Intraday trading status of a notation.
        /// </summary>
        /// <remarks>
        /// Intraday trading status of a notation.&lt;br&gt;The endpoint is subscribable to provide push updates. See attribute &#x60;_subscriptionMinimalInterval&#x60; for valid update rates.
        /// </remarks>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifier"></param>
        /// <param name="identifierType"></param>
        /// <param name="quality"> (optional, default to DLY)</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="subscriptionMinimumInterval">Minimum number of milliseconds at which updates are sent. (optional, default to 5000M)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse20088)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20088>> GetNotationStatusGetWithHttpInfoAsync(string identifier, string identifierType, string quality = default(string), List<string> attributes = default(List<string>), decimal? subscriptionMinimumInterval = default(decimal?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// List of categories assigned to a specific notation the application is entitled to see.
        /// </summary>
        /// <remarks>
        /// List of categories assigned to a specific notation the application is entitled to see. Optionally it is possible to restrict the output to only list those for a specific category dataset.
        /// </remarks>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postNotationCategoryListRequest">Request Body (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse20070</returns>
        System.Threading.Tasks.Task<InlineResponse20070> PostNotationCategoryListAsync(PostNotationCategoryListRequest postNotationCategoryListRequest = default(PostNotationCategoryListRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// List of categories assigned to a specific notation the application is entitled to see.
        /// </summary>
        /// <remarks>
        /// List of categories assigned to a specific notation the application is entitled to see. Optionally it is possible to restrict the output to only list those for a specific category dataset.
        /// </remarks>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postNotationCategoryListRequest">Request Body (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse20070)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20070>> PostNotationCategoryListWithHttpInfoAsync(PostNotationCategoryListRequest postNotationCategoryListRequest = default(PostNotationCategoryListRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieve a list of notations for a given FactSet identifier.
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Retrieve a list of notations for a given FactSet identifier, grouped by regional identifiers, if available. Listings without a regional identifier are grouped at the end of the response.&lt;/p&gt;&lt;p&gt;The notation corresponding to the security&#39;s primary listing has the attributes &lt;big&gt;&lt;tt&gt;regional.isPrimary&lt;/tt&gt;&lt;/big&gt; and &lt;big&gt;&lt;tt&gt;regional.listing.isPrimary&lt;/tt&gt;&lt;/big&gt; both set to true.The security&#39;s primary listing might not be among the results depending on the entitlement.&lt;/p&gt;&lt;p&gt;See the group description for more information about the security&#39;s primary listing.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postNotationCrossReferenceFactSetIdentifierListByFactSetIdentifierRequest">Request Body</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse20076</returns>
        System.Threading.Tasks.Task<InlineResponse20076> PostNotationCrossReferenceFactSetIdentifierListByFactSetIdentifierAsync(PostNotationCrossReferenceFactSetIdentifierListByFactSetIdentifierRequest postNotationCrossReferenceFactSetIdentifierListByFactSetIdentifierRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieve a list of notations for a given FactSet identifier.
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Retrieve a list of notations for a given FactSet identifier, grouped by regional identifiers, if available. Listings without a regional identifier are grouped at the end of the response.&lt;/p&gt;&lt;p&gt;The notation corresponding to the security&#39;s primary listing has the attributes &lt;big&gt;&lt;tt&gt;regional.isPrimary&lt;/tt&gt;&lt;/big&gt; and &lt;big&gt;&lt;tt&gt;regional.listing.isPrimary&lt;/tt&gt;&lt;/big&gt; both set to true.The security&#39;s primary listing might not be among the results depending on the entitlement.&lt;/p&gt;&lt;p&gt;See the group description for more information about the security&#39;s primary listing.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postNotationCrossReferenceFactSetIdentifierListByFactSetIdentifierRequest">Request Body</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse20076)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20076>> PostNotationCrossReferenceFactSetIdentifierListByFactSetIdentifierWithHttpInfoAsync(PostNotationCrossReferenceFactSetIdentifierListByFactSetIdentifierRequest postNotationCrossReferenceFactSetIdentifierListByFactSetIdentifierRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieve a list of FactSet identifiers for a given instrument.
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Retrieve a list of FactSet identifiers for a given instrument, grouped by regional identifiers, if available. Listings without a regional identifier are grouped at the end of the response.&lt;/p&gt;&lt;p&gt;The notation corresponding to the security&#39;s primary listing has the attributes &lt;big&gt;&lt;tt&gt;regional.isPrimary&lt;/tt&gt;&lt;/big&gt; and &lt;big&gt;&lt;tt&gt;regional.listing.isPrimary&lt;/tt&gt;&lt;/big&gt; both set to true.The security&#39;s primary listing might not be among the results depending on the entitlement.&lt;/p&gt;&lt;p&gt;The result contains only notations that have at least one FactSet identifier (see &lt;big&gt;&lt;tt&gt;listing.permanentIdentifier&lt;/tt&gt;&lt;/big&gt;, &lt;big&gt;&lt;tt&gt;listing.tickerExchange&lt;/tt&gt;&lt;/big&gt;).&lt;/p&gt;&lt;p&gt;See the group description for more information about the security&#39;s primary listing.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postNotationCrossReferenceFactSetIdentifierListByInstrumentRequest">Request Body</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse20077</returns>
        System.Threading.Tasks.Task<InlineResponse20077> PostNotationCrossReferenceFactSetIdentifierListByInstrumentAsync(PostNotationCrossReferenceFactSetIdentifierListByInstrumentRequest postNotationCrossReferenceFactSetIdentifierListByInstrumentRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieve a list of FactSet identifiers for a given instrument.
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Retrieve a list of FactSet identifiers for a given instrument, grouped by regional identifiers, if available. Listings without a regional identifier are grouped at the end of the response.&lt;/p&gt;&lt;p&gt;The notation corresponding to the security&#39;s primary listing has the attributes &lt;big&gt;&lt;tt&gt;regional.isPrimary&lt;/tt&gt;&lt;/big&gt; and &lt;big&gt;&lt;tt&gt;regional.listing.isPrimary&lt;/tt&gt;&lt;/big&gt; both set to true.The security&#39;s primary listing might not be among the results depending on the entitlement.&lt;/p&gt;&lt;p&gt;The result contains only notations that have at least one FactSet identifier (see &lt;big&gt;&lt;tt&gt;listing.permanentIdentifier&lt;/tt&gt;&lt;/big&gt;, &lt;big&gt;&lt;tt&gt;listing.tickerExchange&lt;/tt&gt;&lt;/big&gt;).&lt;/p&gt;&lt;p&gt;See the group description for more information about the security&#39;s primary listing.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postNotationCrossReferenceFactSetIdentifierListByInstrumentRequest">Request Body</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse20077)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20077>> PostNotationCrossReferenceFactSetIdentifierListByInstrumentWithHttpInfoAsync(PostNotationCrossReferenceFactSetIdentifierListByInstrumentRequest postNotationCrossReferenceFactSetIdentifierListByInstrumentRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// List of entitled notations.
        /// </summary>
        /// <remarks>
        /// List of entitled notations.
        /// </remarks>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postNotationCrossReferenceListByISINRequest">Request Body (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse20073</returns>
        System.Threading.Tasks.Task<InlineResponse20073> PostNotationCrossReferenceListByISINAsync(PostNotationCrossReferenceListByISINRequest postNotationCrossReferenceListByISINRequest = default(PostNotationCrossReferenceListByISINRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// List of entitled notations.
        /// </summary>
        /// <remarks>
        /// List of entitled notations.
        /// </remarks>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postNotationCrossReferenceListByISINRequest">Request Body (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse20073)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20073>> PostNotationCrossReferenceListByISINWithHttpInfoAsync(PostNotationCrossReferenceListByISINRequest postNotationCrossReferenceListByISINRequest = default(PostNotationCrossReferenceListByISINRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// List of entitled notations.
        /// </summary>
        /// <remarks>
        /// List of entitled notations.
        /// </remarks>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postNotationCrossReferenceListByInstrumentRequest">Request Body (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse20072</returns>
        System.Threading.Tasks.Task<InlineResponse20072> PostNotationCrossReferenceListByInstrumentAsync(PostNotationCrossReferenceListByInstrumentRequest postNotationCrossReferenceListByInstrumentRequest = default(PostNotationCrossReferenceListByInstrumentRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// List of entitled notations.
        /// </summary>
        /// <remarks>
        /// List of entitled notations.
        /// </remarks>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postNotationCrossReferenceListByInstrumentRequest">Request Body (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse20072)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20072>> PostNotationCrossReferenceListByInstrumentWithHttpInfoAsync(PostNotationCrossReferenceListByInstrumentRequest postNotationCrossReferenceListByInstrumentRequest = default(PostNotationCrossReferenceListByInstrumentRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// List of entitled notations.
        /// </summary>
        /// <remarks>
        /// List of entitled notations. Symbols are not globally unique; therefore, a given symbol interpreted in different markets might refer to different instruments.
        /// </remarks>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postNotationCrossReferenceListBySymbolRequest">Request Body (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse20074</returns>
        System.Threading.Tasks.Task<InlineResponse20074> PostNotationCrossReferenceListBySymbolAsync(PostNotationCrossReferenceListBySymbolRequest postNotationCrossReferenceListBySymbolRequest = default(PostNotationCrossReferenceListBySymbolRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// List of entitled notations.
        /// </summary>
        /// <remarks>
        /// List of entitled notations. Symbols are not globally unique; therefore, a given symbol interpreted in different markets might refer to different instruments.
        /// </remarks>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postNotationCrossReferenceListBySymbolRequest">Request Body (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse20074)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20074>> PostNotationCrossReferenceListBySymbolWithHttpInfoAsync(PostNotationCrossReferenceListBySymbolRequest postNotationCrossReferenceListBySymbolRequest = default(PostNotationCrossReferenceListBySymbolRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// List of markets with entitled notations.
        /// </summary>
        /// <remarks>
        /// List of markets with entitled notations. The list contains only markets with at least one active and entitled notation.  All identifiers used as parameters must be valid and entitled.
        /// </remarks>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postNotationMarketListRequest">Request Body (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse20085</returns>
        System.Threading.Tasks.Task<InlineResponse20085> PostNotationMarketListAsync(PostNotationMarketListRequest postNotationMarketListRequest = default(PostNotationMarketListRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// List of markets with entitled notations.
        /// </summary>
        /// <remarks>
        /// List of markets with entitled notations. The list contains only markets with at least one active and entitled notation.  All identifiers used as parameters must be valid and entitled.
        /// </remarks>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postNotationMarketListRequest">Request Body (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse20085)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20085>> PostNotationMarketListWithHttpInfoAsync(PostNotationMarketListRequest postNotationMarketListRequest = default(PostNotationMarketListRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Text-based search for notations.
        /// </summary>
        /// <remarks>
        /// Text-based search for notations in selected identifier and name attributes according to a tolerant full-text match algorithm. The results satisfy all selected filters; sorting by various attributes is possible. If more than one notation of an instrument matches, only the notation with the best market priority (according to the parameter &#x60;market.priority&#x60;) or, in the absence of market priorities, only the notation with the highest trading volume, averaged over one month, is considered.       All identifiers used as parameters must be valid and entitled.
        /// </remarks>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postNotationSearchByTextRequest">Request Body</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse20099</returns>
        System.Threading.Tasks.Task<InlineResponse20099> PostNotationSearchByTextAsync(PostNotationSearchByTextRequest postNotationSearchByTextRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Text-based search for notations.
        /// </summary>
        /// <remarks>
        /// Text-based search for notations in selected identifier and name attributes according to a tolerant full-text match algorithm. The results satisfy all selected filters; sorting by various attributes is possible. If more than one notation of an instrument matches, only the notation with the best market priority (according to the parameter &#x60;market.priority&#x60;) or, in the absence of market priorities, only the notation with the highest trading volume, averaged over one month, is considered.       All identifiers used as parameters must be valid and entitled.
        /// </remarks>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postNotationSearchByTextRequest">Request Body</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse20099)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20099>> PostNotationSearchByTextWithHttpInfoAsync(PostNotationSearchByTextRequest postNotationSearchByTextRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// List of notations belonging to a notation-level selection list.
        /// </summary>
        /// <remarks>
        /// List of notations belonging to a notation-level selection list.
        /// </remarks>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postNotationSelectionListMembersListRequest">Request Body (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse20087</returns>
        System.Threading.Tasks.Task<InlineResponse20087> PostNotationSelectionListMembersListAsync(PostNotationSelectionListMembersListRequest postNotationSelectionListMembersListRequest = default(PostNotationSelectionListMembersListRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// List of notations belonging to a notation-level selection list.
        /// </summary>
        /// <remarks>
        /// List of notations belonging to a notation-level selection list.
        /// </remarks>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postNotationSelectionListMembersListRequest">Request Body (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse20087)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20087>> PostNotationSelectionListMembersListWithHttpInfoAsync(PostNotationSelectionListMembersListRequest postNotationSelectionListMembersListRequest = default(PostNotationSelectionListMembersListRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface INotationApi : INotationApiSync, INotationApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class NotationApi : INotationApi
    {
        private FactSet.SDK.RealTimeQuotes.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        # region Response Type Disctionaries
        
        private static readonly Dictionary<HttpStatusCode, System.Type> GetNotationCrossReferenceFactSetIdentifierGetResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)200, typeof(InlineResponse20075) },
        };

        private static readonly Dictionary<HttpStatusCode, System.Type> GetNotationCrossReferenceGetByFactSetMarketSymbolResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)200, typeof(InlineResponse20071) },
        };

        private static readonly Dictionary<HttpStatusCode, System.Type> GetNotationGetResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)200, typeof(InlineResponse20068) },
        };

        private static readonly Dictionary<HttpStatusCode, System.Type> GetNotationKeyFiguresMonth1GetResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)200, typeof(InlineResponse20080) },
        };

        private static readonly Dictionary<HttpStatusCode, System.Type> GetNotationKeyFiguresMonth1ListResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)200, typeof(InlineResponse20081) },
        };

        private static readonly Dictionary<HttpStatusCode, System.Type> GetNotationKeyFiguresMonth3GetResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)200, typeof(InlineResponse20078) },
        };

        private static readonly Dictionary<HttpStatusCode, System.Type> GetNotationKeyFiguresMonth3ListResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)200, typeof(InlineResponse20079) },
        };

        private static readonly Dictionary<HttpStatusCode, System.Type> GetNotationKeyFiguresMonth6GetResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)200, typeof(InlineResponse20078) },
        };

        private static readonly Dictionary<HttpStatusCode, System.Type> GetNotationKeyFiguresMonth6ListResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)200, typeof(InlineResponse20079) },
        };

        private static readonly Dictionary<HttpStatusCode, System.Type> GetNotationKeyFiguresTradingDayAverageGetResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)200, typeof(InlineResponse20084) },
        };

        private static readonly Dictionary<HttpStatusCode, System.Type> GetNotationKeyFiguresWeek1GetResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)200, typeof(InlineResponse20080) },
        };

        private static readonly Dictionary<HttpStatusCode, System.Type> GetNotationKeyFiguresWeek1ListResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)200, typeof(InlineResponse20081) },
        };

        private static readonly Dictionary<HttpStatusCode, System.Type> GetNotationKeyFiguresYear10GetResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)200, typeof(InlineResponse20078) },
        };

        private static readonly Dictionary<HttpStatusCode, System.Type> GetNotationKeyFiguresYear10ListResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)200, typeof(InlineResponse20079) },
        };

        private static readonly Dictionary<HttpStatusCode, System.Type> GetNotationKeyFiguresYear1GetResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)200, typeof(InlineResponse20080) },
        };

        private static readonly Dictionary<HttpStatusCode, System.Type> GetNotationKeyFiguresYear1ListResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)200, typeof(InlineResponse20081) },
        };

        private static readonly Dictionary<HttpStatusCode, System.Type> GetNotationKeyFiguresYear3GetResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)200, typeof(InlineResponse20078) },
        };

        private static readonly Dictionary<HttpStatusCode, System.Type> GetNotationKeyFiguresYear3ListResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)200, typeof(InlineResponse20079) },
        };

        private static readonly Dictionary<HttpStatusCode, System.Type> GetNotationKeyFiguresYear5GetResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)200, typeof(InlineResponse20078) },
        };

        private static readonly Dictionary<HttpStatusCode, System.Type> GetNotationKeyFiguresYear5ListResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)200, typeof(InlineResponse20079) },
        };

        private static readonly Dictionary<HttpStatusCode, System.Type> GetNotationKeyFiguresYear7GetResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)200, typeof(InlineResponse20078) },
        };

        private static readonly Dictionary<HttpStatusCode, System.Type> GetNotationKeyFiguresYear7ListResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)200, typeof(InlineResponse20079) },
        };

        private static readonly Dictionary<HttpStatusCode, System.Type> GetNotationKeyFiguresYearToDateGetResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)200, typeof(InlineResponse20082) },
        };

        private static readonly Dictionary<HttpStatusCode, System.Type> GetNotationKeyFiguresYearToDateListResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)200, typeof(InlineResponse20083) },
        };

        private static readonly Dictionary<HttpStatusCode, System.Type> GetNotationListResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)200, typeof(InlineResponse20069) },
        };

        private static readonly Dictionary<HttpStatusCode, System.Type> GetNotationSearchBasicResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)200, typeof(InlineResponse20098) },
        };

        private static readonly Dictionary<HttpStatusCode, System.Type> GetNotationSelectionListListResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)200, typeof(InlineResponse20065) },
        };

        private static readonly Dictionary<HttpStatusCode, System.Type> GetNotationSelectionListListByNotationResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)200, typeof(InlineResponse20086) },
        };

        private static readonly Dictionary<HttpStatusCode, System.Type> GetNotationStatusGetResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)200, typeof(InlineResponse20088) },
        };

        private static readonly Dictionary<HttpStatusCode, System.Type> PostNotationCategoryListResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)200, typeof(InlineResponse20070) },
        };

        private static readonly Dictionary<HttpStatusCode, System.Type> PostNotationCrossReferenceFactSetIdentifierListByFactSetIdentifierResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)200, typeof(InlineResponse20076) },
        };

        private static readonly Dictionary<HttpStatusCode, System.Type> PostNotationCrossReferenceFactSetIdentifierListByInstrumentResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)200, typeof(InlineResponse20077) },
        };

        private static readonly Dictionary<HttpStatusCode, System.Type> PostNotationCrossReferenceListByISINResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)200, typeof(InlineResponse20073) },
        };

        private static readonly Dictionary<HttpStatusCode, System.Type> PostNotationCrossReferenceListByInstrumentResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)200, typeof(InlineResponse20072) },
        };

        private static readonly Dictionary<HttpStatusCode, System.Type> PostNotationCrossReferenceListBySymbolResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)200, typeof(InlineResponse20074) },
        };

        private static readonly Dictionary<HttpStatusCode, System.Type> PostNotationMarketListResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)200, typeof(InlineResponse20085) },
        };

        private static readonly Dictionary<HttpStatusCode, System.Type> PostNotationSearchByTextResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)200, typeof(InlineResponse20099) },
        };

        private static readonly Dictionary<HttpStatusCode, System.Type> PostNotationSelectionListMembersListResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)200, typeof(InlineResponse20087) },
        };

        # endregion Response Type Disctionaries

        # region Api Response Objects
        

        # endregion Api Response Objects

        /// <summary>
        /// Initializes a new instance of the <see cref="NotationApi"/> class.
        /// </summary>
        /// <returns></returns>
        public NotationApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="NotationApi"/> class.
        /// </summary>
        /// <returns></returns>
        public NotationApi(string basePath)
        {
            this.Configuration = FactSet.SDK.RealTimeQuotes.Client.Configuration.MergeConfigurations(
                FactSet.SDK.RealTimeQuotes.Client.GlobalConfiguration.Instance,
                new FactSet.SDK.RealTimeQuotes.Client.Configuration { BasePath = basePath }
            );
            this.Client = new FactSet.SDK.RealTimeQuotes.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new FactSet.SDK.RealTimeQuotes.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = FactSet.SDK.RealTimeQuotes.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="NotationApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public NotationApi(FactSet.SDK.RealTimeQuotes.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = FactSet.SDK.RealTimeQuotes.Client.Configuration.MergeConfigurations(
                FactSet.SDK.RealTimeQuotes.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new FactSet.SDK.RealTimeQuotes.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new FactSet.SDK.RealTimeQuotes.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = FactSet.SDK.RealTimeQuotes.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="NotationApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public NotationApi(FactSet.SDK.RealTimeQuotes.Client.ISynchronousClient client, FactSet.SDK.RealTimeQuotes.Client.IAsynchronousClient asyncClient, FactSet.SDK.RealTimeQuotes.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = FactSet.SDK.RealTimeQuotes.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public FactSet.SDK.RealTimeQuotes.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public FactSet.SDK.RealTimeQuotes.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public FactSet.SDK.RealTimeQuotes.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public FactSet.SDK.RealTimeQuotes.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Retrieve FactSet identifiers for a given notation. &lt;p&gt;Retrieve FactSet identifiers for a given notation. Security and listing-level identifiers are always included, regional level identifiers are included, if available.
        /// </summary>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifier"></param>
        /// <param name="identifierType"></param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <returns>InlineResponse20075</returns>
        public InlineResponse20075 GetNotationCrossReferenceFactSetIdentifierGet(string identifier, string identifierType, List<string> attributes = default(List<string>))
        {
            var localVarResponse = GetNotationCrossReferenceFactSetIdentifierGetWithHttpInfo(identifier, identifierType, attributes);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve FactSet identifiers for a given notation. &lt;p&gt;Retrieve FactSet identifiers for a given notation. Security and listing-level identifiers are always included, regional level identifiers are included, if available.
        /// </summary>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifier"></param>
        /// <param name="identifierType"></param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <returns>ApiResponse of InlineResponse20075</returns>
        public ApiResponse<InlineResponse20075> GetNotationCrossReferenceFactSetIdentifierGetWithHttpInfo(string identifier, string identifierType, List<string> attributes = default(List<string>))
        {
            // verify the required parameter 'identifier' is set
            if (identifier == null)
            {
                throw new FactSet.SDK.RealTimeQuotes.Client.ApiException(400, "Missing required parameter 'identifier' when calling NotationApi->GetNotationCrossReferenceFactSetIdentifierGet");
            }

            // verify the required parameter 'identifierType' is set
            if (identifierType == null)
            {
                throw new FactSet.SDK.RealTimeQuotes.Client.ApiException(400, "Missing required parameter 'identifierType' when calling NotationApi->GetNotationCrossReferenceFactSetIdentifierGet");
            }

            FactSet.SDK.RealTimeQuotes.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.RealTimeQuotes.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.RealTimeQuotes.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.RealTimeQuotes.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeQuotes.Client.ClientUtils.ParameterToMultiMap("", "identifier", identifier));
            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeQuotes.Client.ClientUtils.ParameterToMultiMap("", "identifierType", identifierType));
            if (attributes != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeQuotes.Client.ClientUtils.ParameterToMultiMap("csv", "_attributes", attributes));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.RealTimeQuotes.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = GetNotationCrossReferenceFactSetIdentifierGetResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Get<
            InlineResponse20075>("/notation/crossReference/factSetIdentifier/get", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetNotationCrossReferenceFactSetIdentifierGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// Retrieve FactSet identifiers for a given notation. &lt;p&gt;Retrieve FactSet identifiers for a given notation. Security and listing-level identifiers are always included, regional level identifiers are included, if available.
        /// </summary>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifier"></param>
        /// <param name="identifierType"></param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse20075</returns>
        public async System.Threading.Tasks.Task<InlineResponse20075>GetNotationCrossReferenceFactSetIdentifierGetAsync(string identifier, string identifierType, List<string> attributes = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await GetNotationCrossReferenceFactSetIdentifierGetWithHttpInfoAsync(identifier, identifierType, attributes, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve FactSet identifiers for a given notation. &lt;p&gt;Retrieve FactSet identifiers for a given notation. Security and listing-level identifiers are always included, regional level identifiers are included, if available.
        /// </summary>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifier"></param>
        /// <param name="identifierType"></param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse20075)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20075>> GetNotationCrossReferenceFactSetIdentifierGetWithHttpInfoAsync(string identifier, string identifierType, List<string> attributes = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'identifier' is set
            if (identifier == null)
            {
                throw new FactSet.SDK.RealTimeQuotes.Client.ApiException(400, "Missing required parameter 'identifier' when calling NotationApi->GetNotationCrossReferenceFactSetIdentifierGet");
            }

            // verify the required parameter 'identifierType' is set
            if (identifierType == null)
            {
                throw new FactSet.SDK.RealTimeQuotes.Client.ApiException(400, "Missing required parameter 'identifierType' when calling NotationApi->GetNotationCrossReferenceFactSetIdentifierGet");
            }


            FactSet.SDK.RealTimeQuotes.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.RealTimeQuotes.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.RealTimeQuotes.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.RealTimeQuotes.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeQuotes.Client.ClientUtils.ParameterToMultiMap("", "identifier", identifier));
            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeQuotes.Client.ClientUtils.ParameterToMultiMap("", "identifierType", identifierType));
            if (attributes != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeQuotes.Client.ClientUtils.ParameterToMultiMap("csv", "_attributes", attributes));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.RealTimeQuotes.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = GetNotationCrossReferenceFactSetIdentifierGetResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<InlineResponse20075>("/notation/crossReference/factSetIdentifier/get", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetNotationCrossReferenceFactSetIdentifierGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Translate a FactSet market symbol to a notation. Translate a FactSet market symbol to a notation. This symbol is also known as TICKER_EXCHANGE.
        /// </summary>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="factSetMarketSymbol"></param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="language"> (optional)</param>
        /// <returns>InlineResponse20071</returns>
        public InlineResponse20071 GetNotationCrossReferenceGetByFactSetMarketSymbol(string factSetMarketSymbol, List<string> attributes = default(List<string>), string language = default(string))
        {
            var localVarResponse = GetNotationCrossReferenceGetByFactSetMarketSymbolWithHttpInfo(factSetMarketSymbol, attributes, language);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Translate a FactSet market symbol to a notation. Translate a FactSet market symbol to a notation. This symbol is also known as TICKER_EXCHANGE.
        /// </summary>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="factSetMarketSymbol"></param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="language"> (optional)</param>
        /// <returns>ApiResponse of InlineResponse20071</returns>
        public ApiResponse<InlineResponse20071> GetNotationCrossReferenceGetByFactSetMarketSymbolWithHttpInfo(string factSetMarketSymbol, List<string> attributes = default(List<string>), string language = default(string))
        {
            // verify the required parameter 'factSetMarketSymbol' is set
            if (factSetMarketSymbol == null)
            {
                throw new FactSet.SDK.RealTimeQuotes.Client.ApiException(400, "Missing required parameter 'factSetMarketSymbol' when calling NotationApi->GetNotationCrossReferenceGetByFactSetMarketSymbol");
            }

            FactSet.SDK.RealTimeQuotes.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.RealTimeQuotes.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.RealTimeQuotes.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.RealTimeQuotes.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeQuotes.Client.ClientUtils.ParameterToMultiMap("", "factSetMarketSymbol", factSetMarketSymbol));
            if (attributes != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeQuotes.Client.ClientUtils.ParameterToMultiMap("csv", "_attributes", attributes));
            }
            if (language != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeQuotes.Client.ClientUtils.ParameterToMultiMap("", "_language", language));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.RealTimeQuotes.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = GetNotationCrossReferenceGetByFactSetMarketSymbolResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Get<
            InlineResponse20071>("/notation/crossReference/getByFactSetMarketSymbol", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetNotationCrossReferenceGetByFactSetMarketSymbol", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// Translate a FactSet market symbol to a notation. Translate a FactSet market symbol to a notation. This symbol is also known as TICKER_EXCHANGE.
        /// </summary>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="factSetMarketSymbol"></param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="language"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse20071</returns>
        public async System.Threading.Tasks.Task<InlineResponse20071>GetNotationCrossReferenceGetByFactSetMarketSymbolAsync(string factSetMarketSymbol, List<string> attributes = default(List<string>), string language = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await GetNotationCrossReferenceGetByFactSetMarketSymbolWithHttpInfoAsync(factSetMarketSymbol, attributes, language, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Translate a FactSet market symbol to a notation. Translate a FactSet market symbol to a notation. This symbol is also known as TICKER_EXCHANGE.
        /// </summary>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="factSetMarketSymbol"></param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="language"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse20071)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20071>> GetNotationCrossReferenceGetByFactSetMarketSymbolWithHttpInfoAsync(string factSetMarketSymbol, List<string> attributes = default(List<string>), string language = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'factSetMarketSymbol' is set
            if (factSetMarketSymbol == null)
            {
                throw new FactSet.SDK.RealTimeQuotes.Client.ApiException(400, "Missing required parameter 'factSetMarketSymbol' when calling NotationApi->GetNotationCrossReferenceGetByFactSetMarketSymbol");
            }


            FactSet.SDK.RealTimeQuotes.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.RealTimeQuotes.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.RealTimeQuotes.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.RealTimeQuotes.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeQuotes.Client.ClientUtils.ParameterToMultiMap("", "factSetMarketSymbol", factSetMarketSymbol));
            if (attributes != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeQuotes.Client.ClientUtils.ParameterToMultiMap("csv", "_attributes", attributes));
            }
            if (language != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeQuotes.Client.ClientUtils.ParameterToMultiMap("", "_language", language));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.RealTimeQuotes.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = GetNotationCrossReferenceGetByFactSetMarketSymbolResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<InlineResponse20071>("/notation/crossReference/getByFactSetMarketSymbol", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetNotationCrossReferenceGetByFactSetMarketSymbol", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Basic data for a notation. Basic data for a notation.
        /// </summary>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifier"></param>
        /// <param name="identifierType"></param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="language"> (optional)</param>
        /// <returns>InlineResponse20068</returns>
        public InlineResponse20068 GetNotationGet(string identifier, string identifierType, List<string> attributes = default(List<string>), string language = default(string))
        {
            var localVarResponse = GetNotationGetWithHttpInfo(identifier, identifierType, attributes, language);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Basic data for a notation. Basic data for a notation.
        /// </summary>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifier"></param>
        /// <param name="identifierType"></param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="language"> (optional)</param>
        /// <returns>ApiResponse of InlineResponse20068</returns>
        public ApiResponse<InlineResponse20068> GetNotationGetWithHttpInfo(string identifier, string identifierType, List<string> attributes = default(List<string>), string language = default(string))
        {
            // verify the required parameter 'identifier' is set
            if (identifier == null)
            {
                throw new FactSet.SDK.RealTimeQuotes.Client.ApiException(400, "Missing required parameter 'identifier' when calling NotationApi->GetNotationGet");
            }

            // verify the required parameter 'identifierType' is set
            if (identifierType == null)
            {
                throw new FactSet.SDK.RealTimeQuotes.Client.ApiException(400, "Missing required parameter 'identifierType' when calling NotationApi->GetNotationGet");
            }

            FactSet.SDK.RealTimeQuotes.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.RealTimeQuotes.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.RealTimeQuotes.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.RealTimeQuotes.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeQuotes.Client.ClientUtils.ParameterToMultiMap("", "identifier", identifier));
            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeQuotes.Client.ClientUtils.ParameterToMultiMap("", "identifierType", identifierType));
            if (attributes != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeQuotes.Client.ClientUtils.ParameterToMultiMap("csv", "_attributes", attributes));
            }
            if (language != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeQuotes.Client.ClientUtils.ParameterToMultiMap("", "_language", language));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.RealTimeQuotes.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = GetNotationGetResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Get<
            InlineResponse20068>("/notation/get", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetNotationGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// Basic data for a notation. Basic data for a notation.
        /// </summary>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifier"></param>
        /// <param name="identifierType"></param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="language"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse20068</returns>
        public async System.Threading.Tasks.Task<InlineResponse20068>GetNotationGetAsync(string identifier, string identifierType, List<string> attributes = default(List<string>), string language = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await GetNotationGetWithHttpInfoAsync(identifier, identifierType, attributes, language, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Basic data for a notation. Basic data for a notation.
        /// </summary>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifier"></param>
        /// <param name="identifierType"></param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="language"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse20068)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20068>> GetNotationGetWithHttpInfoAsync(string identifier, string identifierType, List<string> attributes = default(List<string>), string language = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'identifier' is set
            if (identifier == null)
            {
                throw new FactSet.SDK.RealTimeQuotes.Client.ApiException(400, "Missing required parameter 'identifier' when calling NotationApi->GetNotationGet");
            }

            // verify the required parameter 'identifierType' is set
            if (identifierType == null)
            {
                throw new FactSet.SDK.RealTimeQuotes.Client.ApiException(400, "Missing required parameter 'identifierType' when calling NotationApi->GetNotationGet");
            }


            FactSet.SDK.RealTimeQuotes.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.RealTimeQuotes.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.RealTimeQuotes.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.RealTimeQuotes.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeQuotes.Client.ClientUtils.ParameterToMultiMap("", "identifier", identifier));
            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeQuotes.Client.ClientUtils.ParameterToMultiMap("", "identifierType", identifierType));
            if (attributes != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeQuotes.Client.ClientUtils.ParameterToMultiMap("csv", "_attributes", attributes));
            }
            if (language != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeQuotes.Client.ClientUtils.ParameterToMultiMap("", "_language", language));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.RealTimeQuotes.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = GetNotationGetResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<InlineResponse20068>("/notation/get", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetNotationGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// End-of-day (EOD) key figures for the time range of one month. End-of-day (EOD) key figures for the time range of one month.
        /// </summary>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifier"></param>
        /// <param name="identifierType"></param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <returns>InlineResponse20080</returns>
        public InlineResponse20080 GetNotationKeyFiguresMonth1Get(string identifier, string identifierType, List<string> attributes = default(List<string>))
        {
            var localVarResponse = GetNotationKeyFiguresMonth1GetWithHttpInfo(identifier, identifierType, attributes);
            return localVarResponse.Data;
        }

        /// <summary>
        /// End-of-day (EOD) key figures for the time range of one month. End-of-day (EOD) key figures for the time range of one month.
        /// </summary>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifier"></param>
        /// <param name="identifierType"></param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <returns>ApiResponse of InlineResponse20080</returns>
        public ApiResponse<InlineResponse20080> GetNotationKeyFiguresMonth1GetWithHttpInfo(string identifier, string identifierType, List<string> attributes = default(List<string>))
        {
            // verify the required parameter 'identifier' is set
            if (identifier == null)
            {
                throw new FactSet.SDK.RealTimeQuotes.Client.ApiException(400, "Missing required parameter 'identifier' when calling NotationApi->GetNotationKeyFiguresMonth1Get");
            }

            // verify the required parameter 'identifierType' is set
            if (identifierType == null)
            {
                throw new FactSet.SDK.RealTimeQuotes.Client.ApiException(400, "Missing required parameter 'identifierType' when calling NotationApi->GetNotationKeyFiguresMonth1Get");
            }

            FactSet.SDK.RealTimeQuotes.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.RealTimeQuotes.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.RealTimeQuotes.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.RealTimeQuotes.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeQuotes.Client.ClientUtils.ParameterToMultiMap("", "identifier", identifier));
            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeQuotes.Client.ClientUtils.ParameterToMultiMap("", "identifierType", identifierType));
            if (attributes != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeQuotes.Client.ClientUtils.ParameterToMultiMap("csv", "_attributes", attributes));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.RealTimeQuotes.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = GetNotationKeyFiguresMonth1GetResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Get<
            InlineResponse20080>("/notation/keyFigures/month/1/get", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetNotationKeyFiguresMonth1Get", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// End-of-day (EOD) key figures for the time range of one month. End-of-day (EOD) key figures for the time range of one month.
        /// </summary>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifier"></param>
        /// <param name="identifierType"></param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse20080</returns>
        public async System.Threading.Tasks.Task<InlineResponse20080>GetNotationKeyFiguresMonth1GetAsync(string identifier, string identifierType, List<string> attributes = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await GetNotationKeyFiguresMonth1GetWithHttpInfoAsync(identifier, identifierType, attributes, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// End-of-day (EOD) key figures for the time range of one month. End-of-day (EOD) key figures for the time range of one month.
        /// </summary>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifier"></param>
        /// <param name="identifierType"></param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse20080)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20080>> GetNotationKeyFiguresMonth1GetWithHttpInfoAsync(string identifier, string identifierType, List<string> attributes = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'identifier' is set
            if (identifier == null)
            {
                throw new FactSet.SDK.RealTimeQuotes.Client.ApiException(400, "Missing required parameter 'identifier' when calling NotationApi->GetNotationKeyFiguresMonth1Get");
            }

            // verify the required parameter 'identifierType' is set
            if (identifierType == null)
            {
                throw new FactSet.SDK.RealTimeQuotes.Client.ApiException(400, "Missing required parameter 'identifierType' when calling NotationApi->GetNotationKeyFiguresMonth1Get");
            }


            FactSet.SDK.RealTimeQuotes.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.RealTimeQuotes.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.RealTimeQuotes.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.RealTimeQuotes.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeQuotes.Client.ClientUtils.ParameterToMultiMap("", "identifier", identifier));
            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeQuotes.Client.ClientUtils.ParameterToMultiMap("", "identifierType", identifierType));
            if (attributes != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeQuotes.Client.ClientUtils.ParameterToMultiMap("csv", "_attributes", attributes));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.RealTimeQuotes.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = GetNotationKeyFiguresMonth1GetResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<InlineResponse20080>("/notation/keyFigures/month/1/get", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetNotationKeyFiguresMonth1Get", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// End-of-day (EOD) key figures for the time range of one month, for a list of notations. End-of-day (EOD) key figures for the time range of one month, for a list of notations.
        /// </summary>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifiers"></param>
        /// <param name="identifierType"></param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <returns>InlineResponse20081</returns>
        public InlineResponse20081 GetNotationKeyFiguresMonth1List(List<string> identifiers, string identifierType, List<string> attributes = default(List<string>))
        {
            var localVarResponse = GetNotationKeyFiguresMonth1ListWithHttpInfo(identifiers, identifierType, attributes);
            return localVarResponse.Data;
        }

        /// <summary>
        /// End-of-day (EOD) key figures for the time range of one month, for a list of notations. End-of-day (EOD) key figures for the time range of one month, for a list of notations.
        /// </summary>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifiers"></param>
        /// <param name="identifierType"></param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <returns>ApiResponse of InlineResponse20081</returns>
        public ApiResponse<InlineResponse20081> GetNotationKeyFiguresMonth1ListWithHttpInfo(List<string> identifiers, string identifierType, List<string> attributes = default(List<string>))
        {
            // verify the required parameter 'identifiers' is set
            if (identifiers == null)
            {
                throw new FactSet.SDK.RealTimeQuotes.Client.ApiException(400, "Missing required parameter 'identifiers' when calling NotationApi->GetNotationKeyFiguresMonth1List");
            }

            // verify the required parameter 'identifierType' is set
            if (identifierType == null)
            {
                throw new FactSet.SDK.RealTimeQuotes.Client.ApiException(400, "Missing required parameter 'identifierType' when calling NotationApi->GetNotationKeyFiguresMonth1List");
            }

            FactSet.SDK.RealTimeQuotes.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.RealTimeQuotes.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.RealTimeQuotes.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.RealTimeQuotes.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeQuotes.Client.ClientUtils.ParameterToMultiMap("csv", "identifiers", identifiers));
            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeQuotes.Client.ClientUtils.ParameterToMultiMap("", "identifierType", identifierType));
            if (attributes != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeQuotes.Client.ClientUtils.ParameterToMultiMap("csv", "_attributes", attributes));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.RealTimeQuotes.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = GetNotationKeyFiguresMonth1ListResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Get<
            InlineResponse20081>("/notation/keyFigures/month/1/list", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetNotationKeyFiguresMonth1List", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// End-of-day (EOD) key figures for the time range of one month, for a list of notations. End-of-day (EOD) key figures for the time range of one month, for a list of notations.
        /// </summary>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifiers"></param>
        /// <param name="identifierType"></param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse20081</returns>
        public async System.Threading.Tasks.Task<InlineResponse20081>GetNotationKeyFiguresMonth1ListAsync(List<string> identifiers, string identifierType, List<string> attributes = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await GetNotationKeyFiguresMonth1ListWithHttpInfoAsync(identifiers, identifierType, attributes, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// End-of-day (EOD) key figures for the time range of one month, for a list of notations. End-of-day (EOD) key figures for the time range of one month, for a list of notations.
        /// </summary>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifiers"></param>
        /// <param name="identifierType"></param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse20081)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20081>> GetNotationKeyFiguresMonth1ListWithHttpInfoAsync(List<string> identifiers, string identifierType, List<string> attributes = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'identifiers' is set
            if (identifiers == null)
            {
                throw new FactSet.SDK.RealTimeQuotes.Client.ApiException(400, "Missing required parameter 'identifiers' when calling NotationApi->GetNotationKeyFiguresMonth1List");
            }

            // verify the required parameter 'identifierType' is set
            if (identifierType == null)
            {
                throw new FactSet.SDK.RealTimeQuotes.Client.ApiException(400, "Missing required parameter 'identifierType' when calling NotationApi->GetNotationKeyFiguresMonth1List");
            }


            FactSet.SDK.RealTimeQuotes.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.RealTimeQuotes.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.RealTimeQuotes.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.RealTimeQuotes.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeQuotes.Client.ClientUtils.ParameterToMultiMap("csv", "identifiers", identifiers));
            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeQuotes.Client.ClientUtils.ParameterToMultiMap("", "identifierType", identifierType));
            if (attributes != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeQuotes.Client.ClientUtils.ParameterToMultiMap("csv", "_attributes", attributes));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.RealTimeQuotes.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = GetNotationKeyFiguresMonth1ListResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<InlineResponse20081>("/notation/keyFigures/month/1/list", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetNotationKeyFiguresMonth1List", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// End-of-day (EOD) key figures for the time range of three months. End-of-day (EOD) key figures for the time range of three months.
        /// </summary>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifier"></param>
        /// <param name="identifierType"></param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <returns>InlineResponse20078</returns>
        public InlineResponse20078 GetNotationKeyFiguresMonth3Get(string identifier, string identifierType, List<string> attributes = default(List<string>))
        {
            var localVarResponse = GetNotationKeyFiguresMonth3GetWithHttpInfo(identifier, identifierType, attributes);
            return localVarResponse.Data;
        }

        /// <summary>
        /// End-of-day (EOD) key figures for the time range of three months. End-of-day (EOD) key figures for the time range of three months.
        /// </summary>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifier"></param>
        /// <param name="identifierType"></param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <returns>ApiResponse of InlineResponse20078</returns>
        public ApiResponse<InlineResponse20078> GetNotationKeyFiguresMonth3GetWithHttpInfo(string identifier, string identifierType, List<string> attributes = default(List<string>))
        {
            // verify the required parameter 'identifier' is set
            if (identifier == null)
            {
                throw new FactSet.SDK.RealTimeQuotes.Client.ApiException(400, "Missing required parameter 'identifier' when calling NotationApi->GetNotationKeyFiguresMonth3Get");
            }

            // verify the required parameter 'identifierType' is set
            if (identifierType == null)
            {
                throw new FactSet.SDK.RealTimeQuotes.Client.ApiException(400, "Missing required parameter 'identifierType' when calling NotationApi->GetNotationKeyFiguresMonth3Get");
            }

            FactSet.SDK.RealTimeQuotes.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.RealTimeQuotes.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.RealTimeQuotes.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.RealTimeQuotes.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeQuotes.Client.ClientUtils.ParameterToMultiMap("", "identifier", identifier));
            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeQuotes.Client.ClientUtils.ParameterToMultiMap("", "identifierType", identifierType));
            if (attributes != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeQuotes.Client.ClientUtils.ParameterToMultiMap("csv", "_attributes", attributes));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.RealTimeQuotes.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = GetNotationKeyFiguresMonth3GetResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Get<
            InlineResponse20078>("/notation/keyFigures/month/3/get", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetNotationKeyFiguresMonth3Get", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// End-of-day (EOD) key figures for the time range of three months. End-of-day (EOD) key figures for the time range of three months.
        /// </summary>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifier"></param>
        /// <param name="identifierType"></param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse20078</returns>
        public async System.Threading.Tasks.Task<InlineResponse20078>GetNotationKeyFiguresMonth3GetAsync(string identifier, string identifierType, List<string> attributes = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await GetNotationKeyFiguresMonth3GetWithHttpInfoAsync(identifier, identifierType, attributes, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// End-of-day (EOD) key figures for the time range of three months. End-of-day (EOD) key figures for the time range of three months.
        /// </summary>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifier"></param>
        /// <param name="identifierType"></param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse20078)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20078>> GetNotationKeyFiguresMonth3GetWithHttpInfoAsync(string identifier, string identifierType, List<string> attributes = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'identifier' is set
            if (identifier == null)
            {
                throw new FactSet.SDK.RealTimeQuotes.Client.ApiException(400, "Missing required parameter 'identifier' when calling NotationApi->GetNotationKeyFiguresMonth3Get");
            }

            // verify the required parameter 'identifierType' is set
            if (identifierType == null)
            {
                throw new FactSet.SDK.RealTimeQuotes.Client.ApiException(400, "Missing required parameter 'identifierType' when calling NotationApi->GetNotationKeyFiguresMonth3Get");
            }


            FactSet.SDK.RealTimeQuotes.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.RealTimeQuotes.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.RealTimeQuotes.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.RealTimeQuotes.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeQuotes.Client.ClientUtils.ParameterToMultiMap("", "identifier", identifier));
            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeQuotes.Client.ClientUtils.ParameterToMultiMap("", "identifierType", identifierType));
            if (attributes != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeQuotes.Client.ClientUtils.ParameterToMultiMap("csv", "_attributes", attributes));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.RealTimeQuotes.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = GetNotationKeyFiguresMonth3GetResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<InlineResponse20078>("/notation/keyFigures/month/3/get", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetNotationKeyFiguresMonth3Get", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// End-of-day (EOD) key figures for the time range of three months, for a list of notations. End-of-day (EOD) key figures for the time range of three months, for a list of notations.
        /// </summary>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifiers"></param>
        /// <param name="identifierType"></param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <returns>InlineResponse20079</returns>
        public InlineResponse20079 GetNotationKeyFiguresMonth3List(List<string> identifiers, string identifierType, List<string> attributes = default(List<string>))
        {
            var localVarResponse = GetNotationKeyFiguresMonth3ListWithHttpInfo(identifiers, identifierType, attributes);
            return localVarResponse.Data;
        }

        /// <summary>
        /// End-of-day (EOD) key figures for the time range of three months, for a list of notations. End-of-day (EOD) key figures for the time range of three months, for a list of notations.
        /// </summary>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifiers"></param>
        /// <param name="identifierType"></param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <returns>ApiResponse of InlineResponse20079</returns>
        public ApiResponse<InlineResponse20079> GetNotationKeyFiguresMonth3ListWithHttpInfo(List<string> identifiers, string identifierType, List<string> attributes = default(List<string>))
        {
            // verify the required parameter 'identifiers' is set
            if (identifiers == null)
            {
                throw new FactSet.SDK.RealTimeQuotes.Client.ApiException(400, "Missing required parameter 'identifiers' when calling NotationApi->GetNotationKeyFiguresMonth3List");
            }

            // verify the required parameter 'identifierType' is set
            if (identifierType == null)
            {
                throw new FactSet.SDK.RealTimeQuotes.Client.ApiException(400, "Missing required parameter 'identifierType' when calling NotationApi->GetNotationKeyFiguresMonth3List");
            }

            FactSet.SDK.RealTimeQuotes.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.RealTimeQuotes.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.RealTimeQuotes.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.RealTimeQuotes.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeQuotes.Client.ClientUtils.ParameterToMultiMap("csv", "identifiers", identifiers));
            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeQuotes.Client.ClientUtils.ParameterToMultiMap("", "identifierType", identifierType));
            if (attributes != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeQuotes.Client.ClientUtils.ParameterToMultiMap("csv", "_attributes", attributes));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.RealTimeQuotes.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = GetNotationKeyFiguresMonth3ListResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Get<
            InlineResponse20079>("/notation/keyFigures/month/3/list", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetNotationKeyFiguresMonth3List", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// End-of-day (EOD) key figures for the time range of three months, for a list of notations. End-of-day (EOD) key figures for the time range of three months, for a list of notations.
        /// </summary>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifiers"></param>
        /// <param name="identifierType"></param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse20079</returns>
        public async System.Threading.Tasks.Task<InlineResponse20079>GetNotationKeyFiguresMonth3ListAsync(List<string> identifiers, string identifierType, List<string> attributes = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await GetNotationKeyFiguresMonth3ListWithHttpInfoAsync(identifiers, identifierType, attributes, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// End-of-day (EOD) key figures for the time range of three months, for a list of notations. End-of-day (EOD) key figures for the time range of three months, for a list of notations.
        /// </summary>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifiers"></param>
        /// <param name="identifierType"></param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse20079)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20079>> GetNotationKeyFiguresMonth3ListWithHttpInfoAsync(List<string> identifiers, string identifierType, List<string> attributes = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'identifiers' is set
            if (identifiers == null)
            {
                throw new FactSet.SDK.RealTimeQuotes.Client.ApiException(400, "Missing required parameter 'identifiers' when calling NotationApi->GetNotationKeyFiguresMonth3List");
            }

            // verify the required parameter 'identifierType' is set
            if (identifierType == null)
            {
                throw new FactSet.SDK.RealTimeQuotes.Client.ApiException(400, "Missing required parameter 'identifierType' when calling NotationApi->GetNotationKeyFiguresMonth3List");
            }


            FactSet.SDK.RealTimeQuotes.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.RealTimeQuotes.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.RealTimeQuotes.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.RealTimeQuotes.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeQuotes.Client.ClientUtils.ParameterToMultiMap("csv", "identifiers", identifiers));
            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeQuotes.Client.ClientUtils.ParameterToMultiMap("", "identifierType", identifierType));
            if (attributes != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeQuotes.Client.ClientUtils.ParameterToMultiMap("csv", "_attributes", attributes));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.RealTimeQuotes.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = GetNotationKeyFiguresMonth3ListResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<InlineResponse20079>("/notation/keyFigures/month/3/list", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetNotationKeyFiguresMonth3List", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// End-of-day (EOD) key figures for the time range of six months. End-of-day (EOD) key figures for the time range of six months.
        /// </summary>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifier"></param>
        /// <param name="identifierType"></param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <returns>InlineResponse20078</returns>
        public InlineResponse20078 GetNotationKeyFiguresMonth6Get(string identifier, string identifierType, List<string> attributes = default(List<string>))
        {
            var localVarResponse = GetNotationKeyFiguresMonth6GetWithHttpInfo(identifier, identifierType, attributes);
            return localVarResponse.Data;
        }

        /// <summary>
        /// End-of-day (EOD) key figures for the time range of six months. End-of-day (EOD) key figures for the time range of six months.
        /// </summary>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifier"></param>
        /// <param name="identifierType"></param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <returns>ApiResponse of InlineResponse20078</returns>
        public ApiResponse<InlineResponse20078> GetNotationKeyFiguresMonth6GetWithHttpInfo(string identifier, string identifierType, List<string> attributes = default(List<string>))
        {
            // verify the required parameter 'identifier' is set
            if (identifier == null)
            {
                throw new FactSet.SDK.RealTimeQuotes.Client.ApiException(400, "Missing required parameter 'identifier' when calling NotationApi->GetNotationKeyFiguresMonth6Get");
            }

            // verify the required parameter 'identifierType' is set
            if (identifierType == null)
            {
                throw new FactSet.SDK.RealTimeQuotes.Client.ApiException(400, "Missing required parameter 'identifierType' when calling NotationApi->GetNotationKeyFiguresMonth6Get");
            }

            FactSet.SDK.RealTimeQuotes.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.RealTimeQuotes.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.RealTimeQuotes.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.RealTimeQuotes.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeQuotes.Client.ClientUtils.ParameterToMultiMap("", "identifier", identifier));
            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeQuotes.Client.ClientUtils.ParameterToMultiMap("", "identifierType", identifierType));
            if (attributes != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeQuotes.Client.ClientUtils.ParameterToMultiMap("csv", "_attributes", attributes));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.RealTimeQuotes.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = GetNotationKeyFiguresMonth6GetResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Get<
            InlineResponse20078>("/notation/keyFigures/month/6/get", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetNotationKeyFiguresMonth6Get", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// End-of-day (EOD) key figures for the time range of six months. End-of-day (EOD) key figures for the time range of six months.
        /// </summary>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifier"></param>
        /// <param name="identifierType"></param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse20078</returns>
        public async System.Threading.Tasks.Task<InlineResponse20078>GetNotationKeyFiguresMonth6GetAsync(string identifier, string identifierType, List<string> attributes = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await GetNotationKeyFiguresMonth6GetWithHttpInfoAsync(identifier, identifierType, attributes, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// End-of-day (EOD) key figures for the time range of six months. End-of-day (EOD) key figures for the time range of six months.
        /// </summary>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifier"></param>
        /// <param name="identifierType"></param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse20078)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20078>> GetNotationKeyFiguresMonth6GetWithHttpInfoAsync(string identifier, string identifierType, List<string> attributes = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'identifier' is set
            if (identifier == null)
            {
                throw new FactSet.SDK.RealTimeQuotes.Client.ApiException(400, "Missing required parameter 'identifier' when calling NotationApi->GetNotationKeyFiguresMonth6Get");
            }

            // verify the required parameter 'identifierType' is set
            if (identifierType == null)
            {
                throw new FactSet.SDK.RealTimeQuotes.Client.ApiException(400, "Missing required parameter 'identifierType' when calling NotationApi->GetNotationKeyFiguresMonth6Get");
            }


            FactSet.SDK.RealTimeQuotes.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.RealTimeQuotes.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.RealTimeQuotes.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.RealTimeQuotes.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeQuotes.Client.ClientUtils.ParameterToMultiMap("", "identifier", identifier));
            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeQuotes.Client.ClientUtils.ParameterToMultiMap("", "identifierType", identifierType));
            if (attributes != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeQuotes.Client.ClientUtils.ParameterToMultiMap("csv", "_attributes", attributes));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.RealTimeQuotes.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = GetNotationKeyFiguresMonth6GetResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<InlineResponse20078>("/notation/keyFigures/month/6/get", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetNotationKeyFiguresMonth6Get", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// End-of-day (EOD) key figures for the time range of six months, for a list of notations. End-of-day (EOD) key figures for the time range of six months, for a list of notations.
        /// </summary>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifiers"></param>
        /// <param name="identifierType"></param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <returns>InlineResponse20079</returns>
        public InlineResponse20079 GetNotationKeyFiguresMonth6List(List<string> identifiers, string identifierType, List<string> attributes = default(List<string>))
        {
            var localVarResponse = GetNotationKeyFiguresMonth6ListWithHttpInfo(identifiers, identifierType, attributes);
            return localVarResponse.Data;
        }

        /// <summary>
        /// End-of-day (EOD) key figures for the time range of six months, for a list of notations. End-of-day (EOD) key figures for the time range of six months, for a list of notations.
        /// </summary>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifiers"></param>
        /// <param name="identifierType"></param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <returns>ApiResponse of InlineResponse20079</returns>
        public ApiResponse<InlineResponse20079> GetNotationKeyFiguresMonth6ListWithHttpInfo(List<string> identifiers, string identifierType, List<string> attributes = default(List<string>))
        {
            // verify the required parameter 'identifiers' is set
            if (identifiers == null)
            {
                throw new FactSet.SDK.RealTimeQuotes.Client.ApiException(400, "Missing required parameter 'identifiers' when calling NotationApi->GetNotationKeyFiguresMonth6List");
            }

            // verify the required parameter 'identifierType' is set
            if (identifierType == null)
            {
                throw new FactSet.SDK.RealTimeQuotes.Client.ApiException(400, "Missing required parameter 'identifierType' when calling NotationApi->GetNotationKeyFiguresMonth6List");
            }

            FactSet.SDK.RealTimeQuotes.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.RealTimeQuotes.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.RealTimeQuotes.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.RealTimeQuotes.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeQuotes.Client.ClientUtils.ParameterToMultiMap("csv", "identifiers", identifiers));
            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeQuotes.Client.ClientUtils.ParameterToMultiMap("", "identifierType", identifierType));
            if (attributes != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeQuotes.Client.ClientUtils.ParameterToMultiMap("csv", "_attributes", attributes));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.RealTimeQuotes.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = GetNotationKeyFiguresMonth6ListResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Get<
            InlineResponse20079>("/notation/keyFigures/month/6/list", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetNotationKeyFiguresMonth6List", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// End-of-day (EOD) key figures for the time range of six months, for a list of notations. End-of-day (EOD) key figures for the time range of six months, for a list of notations.
        /// </summary>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifiers"></param>
        /// <param name="identifierType"></param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse20079</returns>
        public async System.Threading.Tasks.Task<InlineResponse20079>GetNotationKeyFiguresMonth6ListAsync(List<string> identifiers, string identifierType, List<string> attributes = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await GetNotationKeyFiguresMonth6ListWithHttpInfoAsync(identifiers, identifierType, attributes, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// End-of-day (EOD) key figures for the time range of six months, for a list of notations. End-of-day (EOD) key figures for the time range of six months, for a list of notations.
        /// </summary>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifiers"></param>
        /// <param name="identifierType"></param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse20079)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20079>> GetNotationKeyFiguresMonth6ListWithHttpInfoAsync(List<string> identifiers, string identifierType, List<string> attributes = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'identifiers' is set
            if (identifiers == null)
            {
                throw new FactSet.SDK.RealTimeQuotes.Client.ApiException(400, "Missing required parameter 'identifiers' when calling NotationApi->GetNotationKeyFiguresMonth6List");
            }

            // verify the required parameter 'identifierType' is set
            if (identifierType == null)
            {
                throw new FactSet.SDK.RealTimeQuotes.Client.ApiException(400, "Missing required parameter 'identifierType' when calling NotationApi->GetNotationKeyFiguresMonth6List");
            }


            FactSet.SDK.RealTimeQuotes.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.RealTimeQuotes.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.RealTimeQuotes.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.RealTimeQuotes.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeQuotes.Client.ClientUtils.ParameterToMultiMap("csv", "identifiers", identifiers));
            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeQuotes.Client.ClientUtils.ParameterToMultiMap("", "identifierType", identifierType));
            if (attributes != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeQuotes.Client.ClientUtils.ParameterToMultiMap("csv", "_attributes", attributes));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.RealTimeQuotes.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = GetNotationKeyFiguresMonth6ListResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<InlineResponse20079>("/notation/keyFigures/month/6/list", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetNotationKeyFiguresMonth6List", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Average end-of-day (EOD) key figures for different trading days periods. Average end-of-day (EOD) key figures for different trading days periods. A trading day is a calendar day on that trading of the notation was possible.
        /// </summary>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifier"></param>
        /// <param name="identifierType"></param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <returns>InlineResponse20084</returns>
        public InlineResponse20084 GetNotationKeyFiguresTradingDayAverageGet(string identifier, string identifierType, List<string> attributes = default(List<string>))
        {
            var localVarResponse = GetNotationKeyFiguresTradingDayAverageGetWithHttpInfo(identifier, identifierType, attributes);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Average end-of-day (EOD) key figures for different trading days periods. Average end-of-day (EOD) key figures for different trading days periods. A trading day is a calendar day on that trading of the notation was possible.
        /// </summary>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifier"></param>
        /// <param name="identifierType"></param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <returns>ApiResponse of InlineResponse20084</returns>
        public ApiResponse<InlineResponse20084> GetNotationKeyFiguresTradingDayAverageGetWithHttpInfo(string identifier, string identifierType, List<string> attributes = default(List<string>))
        {
            // verify the required parameter 'identifier' is set
            if (identifier == null)
            {
                throw new FactSet.SDK.RealTimeQuotes.Client.ApiException(400, "Missing required parameter 'identifier' when calling NotationApi->GetNotationKeyFiguresTradingDayAverageGet");
            }

            // verify the required parameter 'identifierType' is set
            if (identifierType == null)
            {
                throw new FactSet.SDK.RealTimeQuotes.Client.ApiException(400, "Missing required parameter 'identifierType' when calling NotationApi->GetNotationKeyFiguresTradingDayAverageGet");
            }

            FactSet.SDK.RealTimeQuotes.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.RealTimeQuotes.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.RealTimeQuotes.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.RealTimeQuotes.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeQuotes.Client.ClientUtils.ParameterToMultiMap("", "identifier", identifier));
            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeQuotes.Client.ClientUtils.ParameterToMultiMap("", "identifierType", identifierType));
            if (attributes != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeQuotes.Client.ClientUtils.ParameterToMultiMap("csv", "_attributes", attributes));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.RealTimeQuotes.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = GetNotationKeyFiguresTradingDayAverageGetResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Get<
            InlineResponse20084>("/notation/keyFigures/tradingDay/average/get", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetNotationKeyFiguresTradingDayAverageGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// Average end-of-day (EOD) key figures for different trading days periods. Average end-of-day (EOD) key figures for different trading days periods. A trading day is a calendar day on that trading of the notation was possible.
        /// </summary>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifier"></param>
        /// <param name="identifierType"></param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse20084</returns>
        public async System.Threading.Tasks.Task<InlineResponse20084>GetNotationKeyFiguresTradingDayAverageGetAsync(string identifier, string identifierType, List<string> attributes = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await GetNotationKeyFiguresTradingDayAverageGetWithHttpInfoAsync(identifier, identifierType, attributes, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Average end-of-day (EOD) key figures for different trading days periods. Average end-of-day (EOD) key figures for different trading days periods. A trading day is a calendar day on that trading of the notation was possible.
        /// </summary>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifier"></param>
        /// <param name="identifierType"></param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse20084)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20084>> GetNotationKeyFiguresTradingDayAverageGetWithHttpInfoAsync(string identifier, string identifierType, List<string> attributes = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'identifier' is set
            if (identifier == null)
            {
                throw new FactSet.SDK.RealTimeQuotes.Client.ApiException(400, "Missing required parameter 'identifier' when calling NotationApi->GetNotationKeyFiguresTradingDayAverageGet");
            }

            // verify the required parameter 'identifierType' is set
            if (identifierType == null)
            {
                throw new FactSet.SDK.RealTimeQuotes.Client.ApiException(400, "Missing required parameter 'identifierType' when calling NotationApi->GetNotationKeyFiguresTradingDayAverageGet");
            }


            FactSet.SDK.RealTimeQuotes.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.RealTimeQuotes.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.RealTimeQuotes.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.RealTimeQuotes.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeQuotes.Client.ClientUtils.ParameterToMultiMap("", "identifier", identifier));
            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeQuotes.Client.ClientUtils.ParameterToMultiMap("", "identifierType", identifierType));
            if (attributes != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeQuotes.Client.ClientUtils.ParameterToMultiMap("csv", "_attributes", attributes));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.RealTimeQuotes.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = GetNotationKeyFiguresTradingDayAverageGetResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<InlineResponse20084>("/notation/keyFigures/tradingDay/average/get", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetNotationKeyFiguresTradingDayAverageGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// End-of-day (EOD) key figures for the time range of one week. End-of-day (EOD) key figures for the time range of one week.
        /// </summary>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifier"></param>
        /// <param name="identifierType"></param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <returns>InlineResponse20080</returns>
        public InlineResponse20080 GetNotationKeyFiguresWeek1Get(string identifier, string identifierType, List<string> attributes = default(List<string>))
        {
            var localVarResponse = GetNotationKeyFiguresWeek1GetWithHttpInfo(identifier, identifierType, attributes);
            return localVarResponse.Data;
        }

        /// <summary>
        /// End-of-day (EOD) key figures for the time range of one week. End-of-day (EOD) key figures for the time range of one week.
        /// </summary>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifier"></param>
        /// <param name="identifierType"></param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <returns>ApiResponse of InlineResponse20080</returns>
        public ApiResponse<InlineResponse20080> GetNotationKeyFiguresWeek1GetWithHttpInfo(string identifier, string identifierType, List<string> attributes = default(List<string>))
        {
            // verify the required parameter 'identifier' is set
            if (identifier == null)
            {
                throw new FactSet.SDK.RealTimeQuotes.Client.ApiException(400, "Missing required parameter 'identifier' when calling NotationApi->GetNotationKeyFiguresWeek1Get");
            }

            // verify the required parameter 'identifierType' is set
            if (identifierType == null)
            {
                throw new FactSet.SDK.RealTimeQuotes.Client.ApiException(400, "Missing required parameter 'identifierType' when calling NotationApi->GetNotationKeyFiguresWeek1Get");
            }

            FactSet.SDK.RealTimeQuotes.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.RealTimeQuotes.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.RealTimeQuotes.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.RealTimeQuotes.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeQuotes.Client.ClientUtils.ParameterToMultiMap("", "identifier", identifier));
            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeQuotes.Client.ClientUtils.ParameterToMultiMap("", "identifierType", identifierType));
            if (attributes != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeQuotes.Client.ClientUtils.ParameterToMultiMap("csv", "_attributes", attributes));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.RealTimeQuotes.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = GetNotationKeyFiguresWeek1GetResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Get<
            InlineResponse20080>("/notation/keyFigures/week/1/get", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetNotationKeyFiguresWeek1Get", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// End-of-day (EOD) key figures for the time range of one week. End-of-day (EOD) key figures for the time range of one week.
        /// </summary>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifier"></param>
        /// <param name="identifierType"></param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse20080</returns>
        public async System.Threading.Tasks.Task<InlineResponse20080>GetNotationKeyFiguresWeek1GetAsync(string identifier, string identifierType, List<string> attributes = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await GetNotationKeyFiguresWeek1GetWithHttpInfoAsync(identifier, identifierType, attributes, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// End-of-day (EOD) key figures for the time range of one week. End-of-day (EOD) key figures for the time range of one week.
        /// </summary>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifier"></param>
        /// <param name="identifierType"></param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse20080)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20080>> GetNotationKeyFiguresWeek1GetWithHttpInfoAsync(string identifier, string identifierType, List<string> attributes = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'identifier' is set
            if (identifier == null)
            {
                throw new FactSet.SDK.RealTimeQuotes.Client.ApiException(400, "Missing required parameter 'identifier' when calling NotationApi->GetNotationKeyFiguresWeek1Get");
            }

            // verify the required parameter 'identifierType' is set
            if (identifierType == null)
            {
                throw new FactSet.SDK.RealTimeQuotes.Client.ApiException(400, "Missing required parameter 'identifierType' when calling NotationApi->GetNotationKeyFiguresWeek1Get");
            }


            FactSet.SDK.RealTimeQuotes.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.RealTimeQuotes.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.RealTimeQuotes.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.RealTimeQuotes.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeQuotes.Client.ClientUtils.ParameterToMultiMap("", "identifier", identifier));
            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeQuotes.Client.ClientUtils.ParameterToMultiMap("", "identifierType", identifierType));
            if (attributes != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeQuotes.Client.ClientUtils.ParameterToMultiMap("csv", "_attributes", attributes));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.RealTimeQuotes.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = GetNotationKeyFiguresWeek1GetResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<InlineResponse20080>("/notation/keyFigures/week/1/get", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetNotationKeyFiguresWeek1Get", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// End-of-day (EOD) key figures for the time range of one week, for a list of notations. End-of-day (EOD) key figures for the time range of one week, for a list of notations.
        /// </summary>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifiers"></param>
        /// <param name="identifierType"></param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <returns>InlineResponse20081</returns>
        public InlineResponse20081 GetNotationKeyFiguresWeek1List(List<string> identifiers, string identifierType, List<string> attributes = default(List<string>))
        {
            var localVarResponse = GetNotationKeyFiguresWeek1ListWithHttpInfo(identifiers, identifierType, attributes);
            return localVarResponse.Data;
        }

        /// <summary>
        /// End-of-day (EOD) key figures for the time range of one week, for a list of notations. End-of-day (EOD) key figures for the time range of one week, for a list of notations.
        /// </summary>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifiers"></param>
        /// <param name="identifierType"></param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <returns>ApiResponse of InlineResponse20081</returns>
        public ApiResponse<InlineResponse20081> GetNotationKeyFiguresWeek1ListWithHttpInfo(List<string> identifiers, string identifierType, List<string> attributes = default(List<string>))
        {
            // verify the required parameter 'identifiers' is set
            if (identifiers == null)
            {
                throw new FactSet.SDK.RealTimeQuotes.Client.ApiException(400, "Missing required parameter 'identifiers' when calling NotationApi->GetNotationKeyFiguresWeek1List");
            }

            // verify the required parameter 'identifierType' is set
            if (identifierType == null)
            {
                throw new FactSet.SDK.RealTimeQuotes.Client.ApiException(400, "Missing required parameter 'identifierType' when calling NotationApi->GetNotationKeyFiguresWeek1List");
            }

            FactSet.SDK.RealTimeQuotes.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.RealTimeQuotes.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.RealTimeQuotes.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.RealTimeQuotes.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeQuotes.Client.ClientUtils.ParameterToMultiMap("csv", "identifiers", identifiers));
            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeQuotes.Client.ClientUtils.ParameterToMultiMap("", "identifierType", identifierType));
            if (attributes != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeQuotes.Client.ClientUtils.ParameterToMultiMap("csv", "_attributes", attributes));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.RealTimeQuotes.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = GetNotationKeyFiguresWeek1ListResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Get<
            InlineResponse20081>("/notation/keyFigures/week/1/list", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetNotationKeyFiguresWeek1List", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// End-of-day (EOD) key figures for the time range of one week, for a list of notations. End-of-day (EOD) key figures for the time range of one week, for a list of notations.
        /// </summary>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifiers"></param>
        /// <param name="identifierType"></param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse20081</returns>
        public async System.Threading.Tasks.Task<InlineResponse20081>GetNotationKeyFiguresWeek1ListAsync(List<string> identifiers, string identifierType, List<string> attributes = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await GetNotationKeyFiguresWeek1ListWithHttpInfoAsync(identifiers, identifierType, attributes, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// End-of-day (EOD) key figures for the time range of one week, for a list of notations. End-of-day (EOD) key figures for the time range of one week, for a list of notations.
        /// </summary>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifiers"></param>
        /// <param name="identifierType"></param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse20081)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20081>> GetNotationKeyFiguresWeek1ListWithHttpInfoAsync(List<string> identifiers, string identifierType, List<string> attributes = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'identifiers' is set
            if (identifiers == null)
            {
                throw new FactSet.SDK.RealTimeQuotes.Client.ApiException(400, "Missing required parameter 'identifiers' when calling NotationApi->GetNotationKeyFiguresWeek1List");
            }

            // verify the required parameter 'identifierType' is set
            if (identifierType == null)
            {
                throw new FactSet.SDK.RealTimeQuotes.Client.ApiException(400, "Missing required parameter 'identifierType' when calling NotationApi->GetNotationKeyFiguresWeek1List");
            }


            FactSet.SDK.RealTimeQuotes.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.RealTimeQuotes.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.RealTimeQuotes.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.RealTimeQuotes.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeQuotes.Client.ClientUtils.ParameterToMultiMap("csv", "identifiers", identifiers));
            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeQuotes.Client.ClientUtils.ParameterToMultiMap("", "identifierType", identifierType));
            if (attributes != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeQuotes.Client.ClientUtils.ParameterToMultiMap("csv", "_attributes", attributes));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.RealTimeQuotes.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = GetNotationKeyFiguresWeek1ListResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<InlineResponse20081>("/notation/keyFigures/week/1/list", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetNotationKeyFiguresWeek1List", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// End-of-day (EOD) key figures for the time range of ten years. End-of-day (EOD) key figures for the time range of ten years.
        /// </summary>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifier"></param>
        /// <param name="identifierType"></param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <returns>InlineResponse20078</returns>
        public InlineResponse20078 GetNotationKeyFiguresYear10Get(string identifier, string identifierType, List<string> attributes = default(List<string>))
        {
            var localVarResponse = GetNotationKeyFiguresYear10GetWithHttpInfo(identifier, identifierType, attributes);
            return localVarResponse.Data;
        }

        /// <summary>
        /// End-of-day (EOD) key figures for the time range of ten years. End-of-day (EOD) key figures for the time range of ten years.
        /// </summary>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifier"></param>
        /// <param name="identifierType"></param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <returns>ApiResponse of InlineResponse20078</returns>
        public ApiResponse<InlineResponse20078> GetNotationKeyFiguresYear10GetWithHttpInfo(string identifier, string identifierType, List<string> attributes = default(List<string>))
        {
            // verify the required parameter 'identifier' is set
            if (identifier == null)
            {
                throw new FactSet.SDK.RealTimeQuotes.Client.ApiException(400, "Missing required parameter 'identifier' when calling NotationApi->GetNotationKeyFiguresYear10Get");
            }

            // verify the required parameter 'identifierType' is set
            if (identifierType == null)
            {
                throw new FactSet.SDK.RealTimeQuotes.Client.ApiException(400, "Missing required parameter 'identifierType' when calling NotationApi->GetNotationKeyFiguresYear10Get");
            }

            FactSet.SDK.RealTimeQuotes.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.RealTimeQuotes.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.RealTimeQuotes.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.RealTimeQuotes.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeQuotes.Client.ClientUtils.ParameterToMultiMap("", "identifier", identifier));
            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeQuotes.Client.ClientUtils.ParameterToMultiMap("", "identifierType", identifierType));
            if (attributes != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeQuotes.Client.ClientUtils.ParameterToMultiMap("csv", "_attributes", attributes));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.RealTimeQuotes.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = GetNotationKeyFiguresYear10GetResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Get<
            InlineResponse20078>("/notation/keyFigures/year/10/get", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetNotationKeyFiguresYear10Get", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// End-of-day (EOD) key figures for the time range of ten years. End-of-day (EOD) key figures for the time range of ten years.
        /// </summary>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifier"></param>
        /// <param name="identifierType"></param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse20078</returns>
        public async System.Threading.Tasks.Task<InlineResponse20078>GetNotationKeyFiguresYear10GetAsync(string identifier, string identifierType, List<string> attributes = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await GetNotationKeyFiguresYear10GetWithHttpInfoAsync(identifier, identifierType, attributes, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// End-of-day (EOD) key figures for the time range of ten years. End-of-day (EOD) key figures for the time range of ten years.
        /// </summary>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifier"></param>
        /// <param name="identifierType"></param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse20078)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20078>> GetNotationKeyFiguresYear10GetWithHttpInfoAsync(string identifier, string identifierType, List<string> attributes = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'identifier' is set
            if (identifier == null)
            {
                throw new FactSet.SDK.RealTimeQuotes.Client.ApiException(400, "Missing required parameter 'identifier' when calling NotationApi->GetNotationKeyFiguresYear10Get");
            }

            // verify the required parameter 'identifierType' is set
            if (identifierType == null)
            {
                throw new FactSet.SDK.RealTimeQuotes.Client.ApiException(400, "Missing required parameter 'identifierType' when calling NotationApi->GetNotationKeyFiguresYear10Get");
            }


            FactSet.SDK.RealTimeQuotes.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.RealTimeQuotes.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.RealTimeQuotes.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.RealTimeQuotes.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeQuotes.Client.ClientUtils.ParameterToMultiMap("", "identifier", identifier));
            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeQuotes.Client.ClientUtils.ParameterToMultiMap("", "identifierType", identifierType));
            if (attributes != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeQuotes.Client.ClientUtils.ParameterToMultiMap("csv", "_attributes", attributes));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.RealTimeQuotes.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = GetNotationKeyFiguresYear10GetResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<InlineResponse20078>("/notation/keyFigures/year/10/get", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetNotationKeyFiguresYear10Get", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// End-of-day (EOD) key figures for the time range of ten years, for a list of notations. End-of-day (EOD) key figures for the time range of ten years, for a list of notations.
        /// </summary>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifiers"></param>
        /// <param name="identifierType"></param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <returns>InlineResponse20079</returns>
        public InlineResponse20079 GetNotationKeyFiguresYear10List(List<string> identifiers, string identifierType, List<string> attributes = default(List<string>))
        {
            var localVarResponse = GetNotationKeyFiguresYear10ListWithHttpInfo(identifiers, identifierType, attributes);
            return localVarResponse.Data;
        }

        /// <summary>
        /// End-of-day (EOD) key figures for the time range of ten years, for a list of notations. End-of-day (EOD) key figures for the time range of ten years, for a list of notations.
        /// </summary>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifiers"></param>
        /// <param name="identifierType"></param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <returns>ApiResponse of InlineResponse20079</returns>
        public ApiResponse<InlineResponse20079> GetNotationKeyFiguresYear10ListWithHttpInfo(List<string> identifiers, string identifierType, List<string> attributes = default(List<string>))
        {
            // verify the required parameter 'identifiers' is set
            if (identifiers == null)
            {
                throw new FactSet.SDK.RealTimeQuotes.Client.ApiException(400, "Missing required parameter 'identifiers' when calling NotationApi->GetNotationKeyFiguresYear10List");
            }

            // verify the required parameter 'identifierType' is set
            if (identifierType == null)
            {
                throw new FactSet.SDK.RealTimeQuotes.Client.ApiException(400, "Missing required parameter 'identifierType' when calling NotationApi->GetNotationKeyFiguresYear10List");
            }

            FactSet.SDK.RealTimeQuotes.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.RealTimeQuotes.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.RealTimeQuotes.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.RealTimeQuotes.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeQuotes.Client.ClientUtils.ParameterToMultiMap("csv", "identifiers", identifiers));
            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeQuotes.Client.ClientUtils.ParameterToMultiMap("", "identifierType", identifierType));
            if (attributes != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeQuotes.Client.ClientUtils.ParameterToMultiMap("csv", "_attributes", attributes));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.RealTimeQuotes.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = GetNotationKeyFiguresYear10ListResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Get<
            InlineResponse20079>("/notation/keyFigures/year/10/list", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetNotationKeyFiguresYear10List", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// End-of-day (EOD) key figures for the time range of ten years, for a list of notations. End-of-day (EOD) key figures for the time range of ten years, for a list of notations.
        /// </summary>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifiers"></param>
        /// <param name="identifierType"></param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse20079</returns>
        public async System.Threading.Tasks.Task<InlineResponse20079>GetNotationKeyFiguresYear10ListAsync(List<string> identifiers, string identifierType, List<string> attributes = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await GetNotationKeyFiguresYear10ListWithHttpInfoAsync(identifiers, identifierType, attributes, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// End-of-day (EOD) key figures for the time range of ten years, for a list of notations. End-of-day (EOD) key figures for the time range of ten years, for a list of notations.
        /// </summary>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifiers"></param>
        /// <param name="identifierType"></param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse20079)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20079>> GetNotationKeyFiguresYear10ListWithHttpInfoAsync(List<string> identifiers, string identifierType, List<string> attributes = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'identifiers' is set
            if (identifiers == null)
            {
                throw new FactSet.SDK.RealTimeQuotes.Client.ApiException(400, "Missing required parameter 'identifiers' when calling NotationApi->GetNotationKeyFiguresYear10List");
            }

            // verify the required parameter 'identifierType' is set
            if (identifierType == null)
            {
                throw new FactSet.SDK.RealTimeQuotes.Client.ApiException(400, "Missing required parameter 'identifierType' when calling NotationApi->GetNotationKeyFiguresYear10List");
            }


            FactSet.SDK.RealTimeQuotes.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.RealTimeQuotes.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.RealTimeQuotes.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.RealTimeQuotes.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeQuotes.Client.ClientUtils.ParameterToMultiMap("csv", "identifiers", identifiers));
            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeQuotes.Client.ClientUtils.ParameterToMultiMap("", "identifierType", identifierType));
            if (attributes != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeQuotes.Client.ClientUtils.ParameterToMultiMap("csv", "_attributes", attributes));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.RealTimeQuotes.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = GetNotationKeyFiguresYear10ListResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<InlineResponse20079>("/notation/keyFigures/year/10/list", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetNotationKeyFiguresYear10List", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// End-of-day (EOD) key figures for the time range of one year. End-of-day (EOD) key figures for the time range of one year.
        /// </summary>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifier"></param>
        /// <param name="identifierType"></param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <returns>InlineResponse20080</returns>
        public InlineResponse20080 GetNotationKeyFiguresYear1Get(string identifier, string identifierType, List<string> attributes = default(List<string>))
        {
            var localVarResponse = GetNotationKeyFiguresYear1GetWithHttpInfo(identifier, identifierType, attributes);
            return localVarResponse.Data;
        }

        /// <summary>
        /// End-of-day (EOD) key figures for the time range of one year. End-of-day (EOD) key figures for the time range of one year.
        /// </summary>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifier"></param>
        /// <param name="identifierType"></param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <returns>ApiResponse of InlineResponse20080</returns>
        public ApiResponse<InlineResponse20080> GetNotationKeyFiguresYear1GetWithHttpInfo(string identifier, string identifierType, List<string> attributes = default(List<string>))
        {
            // verify the required parameter 'identifier' is set
            if (identifier == null)
            {
                throw new FactSet.SDK.RealTimeQuotes.Client.ApiException(400, "Missing required parameter 'identifier' when calling NotationApi->GetNotationKeyFiguresYear1Get");
            }

            // verify the required parameter 'identifierType' is set
            if (identifierType == null)
            {
                throw new FactSet.SDK.RealTimeQuotes.Client.ApiException(400, "Missing required parameter 'identifierType' when calling NotationApi->GetNotationKeyFiguresYear1Get");
            }

            FactSet.SDK.RealTimeQuotes.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.RealTimeQuotes.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.RealTimeQuotes.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.RealTimeQuotes.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeQuotes.Client.ClientUtils.ParameterToMultiMap("", "identifier", identifier));
            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeQuotes.Client.ClientUtils.ParameterToMultiMap("", "identifierType", identifierType));
            if (attributes != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeQuotes.Client.ClientUtils.ParameterToMultiMap("csv", "_attributes", attributes));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.RealTimeQuotes.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = GetNotationKeyFiguresYear1GetResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Get<
            InlineResponse20080>("/notation/keyFigures/year/1/get", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetNotationKeyFiguresYear1Get", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// End-of-day (EOD) key figures for the time range of one year. End-of-day (EOD) key figures for the time range of one year.
        /// </summary>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifier"></param>
        /// <param name="identifierType"></param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse20080</returns>
        public async System.Threading.Tasks.Task<InlineResponse20080>GetNotationKeyFiguresYear1GetAsync(string identifier, string identifierType, List<string> attributes = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await GetNotationKeyFiguresYear1GetWithHttpInfoAsync(identifier, identifierType, attributes, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// End-of-day (EOD) key figures for the time range of one year. End-of-day (EOD) key figures for the time range of one year.
        /// </summary>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifier"></param>
        /// <param name="identifierType"></param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse20080)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20080>> GetNotationKeyFiguresYear1GetWithHttpInfoAsync(string identifier, string identifierType, List<string> attributes = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'identifier' is set
            if (identifier == null)
            {
                throw new FactSet.SDK.RealTimeQuotes.Client.ApiException(400, "Missing required parameter 'identifier' when calling NotationApi->GetNotationKeyFiguresYear1Get");
            }

            // verify the required parameter 'identifierType' is set
            if (identifierType == null)
            {
                throw new FactSet.SDK.RealTimeQuotes.Client.ApiException(400, "Missing required parameter 'identifierType' when calling NotationApi->GetNotationKeyFiguresYear1Get");
            }


            FactSet.SDK.RealTimeQuotes.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.RealTimeQuotes.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.RealTimeQuotes.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.RealTimeQuotes.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeQuotes.Client.ClientUtils.ParameterToMultiMap("", "identifier", identifier));
            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeQuotes.Client.ClientUtils.ParameterToMultiMap("", "identifierType", identifierType));
            if (attributes != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeQuotes.Client.ClientUtils.ParameterToMultiMap("csv", "_attributes", attributes));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.RealTimeQuotes.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = GetNotationKeyFiguresYear1GetResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<InlineResponse20080>("/notation/keyFigures/year/1/get", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetNotationKeyFiguresYear1Get", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// End-of-day (EOD) key figures for the time range of one year, for a list of notations. End-of-day (EOD) key figures for the time range of one year, for a list of notations.
        /// </summary>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifiers"></param>
        /// <param name="identifierType"></param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <returns>InlineResponse20081</returns>
        public InlineResponse20081 GetNotationKeyFiguresYear1List(List<string> identifiers, string identifierType, List<string> attributes = default(List<string>))
        {
            var localVarResponse = GetNotationKeyFiguresYear1ListWithHttpInfo(identifiers, identifierType, attributes);
            return localVarResponse.Data;
        }

        /// <summary>
        /// End-of-day (EOD) key figures for the time range of one year, for a list of notations. End-of-day (EOD) key figures for the time range of one year, for a list of notations.
        /// </summary>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifiers"></param>
        /// <param name="identifierType"></param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <returns>ApiResponse of InlineResponse20081</returns>
        public ApiResponse<InlineResponse20081> GetNotationKeyFiguresYear1ListWithHttpInfo(List<string> identifiers, string identifierType, List<string> attributes = default(List<string>))
        {
            // verify the required parameter 'identifiers' is set
            if (identifiers == null)
            {
                throw new FactSet.SDK.RealTimeQuotes.Client.ApiException(400, "Missing required parameter 'identifiers' when calling NotationApi->GetNotationKeyFiguresYear1List");
            }

            // verify the required parameter 'identifierType' is set
            if (identifierType == null)
            {
                throw new FactSet.SDK.RealTimeQuotes.Client.ApiException(400, "Missing required parameter 'identifierType' when calling NotationApi->GetNotationKeyFiguresYear1List");
            }

            FactSet.SDK.RealTimeQuotes.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.RealTimeQuotes.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.RealTimeQuotes.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.RealTimeQuotes.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeQuotes.Client.ClientUtils.ParameterToMultiMap("csv", "identifiers", identifiers));
            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeQuotes.Client.ClientUtils.ParameterToMultiMap("", "identifierType", identifierType));
            if (attributes != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeQuotes.Client.ClientUtils.ParameterToMultiMap("csv", "_attributes", attributes));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.RealTimeQuotes.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = GetNotationKeyFiguresYear1ListResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Get<
            InlineResponse20081>("/notation/keyFigures/year/1/list", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetNotationKeyFiguresYear1List", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// End-of-day (EOD) key figures for the time range of one year, for a list of notations. End-of-day (EOD) key figures for the time range of one year, for a list of notations.
        /// </summary>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifiers"></param>
        /// <param name="identifierType"></param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse20081</returns>
        public async System.Threading.Tasks.Task<InlineResponse20081>GetNotationKeyFiguresYear1ListAsync(List<string> identifiers, string identifierType, List<string> attributes = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await GetNotationKeyFiguresYear1ListWithHttpInfoAsync(identifiers, identifierType, attributes, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// End-of-day (EOD) key figures for the time range of one year, for a list of notations. End-of-day (EOD) key figures for the time range of one year, for a list of notations.
        /// </summary>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifiers"></param>
        /// <param name="identifierType"></param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse20081)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20081>> GetNotationKeyFiguresYear1ListWithHttpInfoAsync(List<string> identifiers, string identifierType, List<string> attributes = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'identifiers' is set
            if (identifiers == null)
            {
                throw new FactSet.SDK.RealTimeQuotes.Client.ApiException(400, "Missing required parameter 'identifiers' when calling NotationApi->GetNotationKeyFiguresYear1List");
            }

            // verify the required parameter 'identifierType' is set
            if (identifierType == null)
            {
                throw new FactSet.SDK.RealTimeQuotes.Client.ApiException(400, "Missing required parameter 'identifierType' when calling NotationApi->GetNotationKeyFiguresYear1List");
            }


            FactSet.SDK.RealTimeQuotes.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.RealTimeQuotes.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.RealTimeQuotes.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.RealTimeQuotes.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeQuotes.Client.ClientUtils.ParameterToMultiMap("csv", "identifiers", identifiers));
            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeQuotes.Client.ClientUtils.ParameterToMultiMap("", "identifierType", identifierType));
            if (attributes != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeQuotes.Client.ClientUtils.ParameterToMultiMap("csv", "_attributes", attributes));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.RealTimeQuotes.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = GetNotationKeyFiguresYear1ListResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<InlineResponse20081>("/notation/keyFigures/year/1/list", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetNotationKeyFiguresYear1List", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// End-of-day (EOD) key figures for the time range of three years. End-of-day (EOD) key figures for the time range of three years.
        /// </summary>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifier"></param>
        /// <param name="identifierType"></param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <returns>InlineResponse20078</returns>
        public InlineResponse20078 GetNotationKeyFiguresYear3Get(string identifier, string identifierType, List<string> attributes = default(List<string>))
        {
            var localVarResponse = GetNotationKeyFiguresYear3GetWithHttpInfo(identifier, identifierType, attributes);
            return localVarResponse.Data;
        }

        /// <summary>
        /// End-of-day (EOD) key figures for the time range of three years. End-of-day (EOD) key figures for the time range of three years.
        /// </summary>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifier"></param>
        /// <param name="identifierType"></param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <returns>ApiResponse of InlineResponse20078</returns>
        public ApiResponse<InlineResponse20078> GetNotationKeyFiguresYear3GetWithHttpInfo(string identifier, string identifierType, List<string> attributes = default(List<string>))
        {
            // verify the required parameter 'identifier' is set
            if (identifier == null)
            {
                throw new FactSet.SDK.RealTimeQuotes.Client.ApiException(400, "Missing required parameter 'identifier' when calling NotationApi->GetNotationKeyFiguresYear3Get");
            }

            // verify the required parameter 'identifierType' is set
            if (identifierType == null)
            {
                throw new FactSet.SDK.RealTimeQuotes.Client.ApiException(400, "Missing required parameter 'identifierType' when calling NotationApi->GetNotationKeyFiguresYear3Get");
            }

            FactSet.SDK.RealTimeQuotes.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.RealTimeQuotes.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.RealTimeQuotes.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.RealTimeQuotes.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeQuotes.Client.ClientUtils.ParameterToMultiMap("", "identifier", identifier));
            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeQuotes.Client.ClientUtils.ParameterToMultiMap("", "identifierType", identifierType));
            if (attributes != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeQuotes.Client.ClientUtils.ParameterToMultiMap("csv", "_attributes", attributes));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.RealTimeQuotes.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = GetNotationKeyFiguresYear3GetResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Get<
            InlineResponse20078>("/notation/keyFigures/year/3/get", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetNotationKeyFiguresYear3Get", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// End-of-day (EOD) key figures for the time range of three years. End-of-day (EOD) key figures for the time range of three years.
        /// </summary>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifier"></param>
        /// <param name="identifierType"></param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse20078</returns>
        public async System.Threading.Tasks.Task<InlineResponse20078>GetNotationKeyFiguresYear3GetAsync(string identifier, string identifierType, List<string> attributes = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await GetNotationKeyFiguresYear3GetWithHttpInfoAsync(identifier, identifierType, attributes, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// End-of-day (EOD) key figures for the time range of three years. End-of-day (EOD) key figures for the time range of three years.
        /// </summary>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifier"></param>
        /// <param name="identifierType"></param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse20078)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20078>> GetNotationKeyFiguresYear3GetWithHttpInfoAsync(string identifier, string identifierType, List<string> attributes = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'identifier' is set
            if (identifier == null)
            {
                throw new FactSet.SDK.RealTimeQuotes.Client.ApiException(400, "Missing required parameter 'identifier' when calling NotationApi->GetNotationKeyFiguresYear3Get");
            }

            // verify the required parameter 'identifierType' is set
            if (identifierType == null)
            {
                throw new FactSet.SDK.RealTimeQuotes.Client.ApiException(400, "Missing required parameter 'identifierType' when calling NotationApi->GetNotationKeyFiguresYear3Get");
            }


            FactSet.SDK.RealTimeQuotes.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.RealTimeQuotes.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.RealTimeQuotes.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.RealTimeQuotes.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeQuotes.Client.ClientUtils.ParameterToMultiMap("", "identifier", identifier));
            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeQuotes.Client.ClientUtils.ParameterToMultiMap("", "identifierType", identifierType));
            if (attributes != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeQuotes.Client.ClientUtils.ParameterToMultiMap("csv", "_attributes", attributes));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.RealTimeQuotes.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = GetNotationKeyFiguresYear3GetResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<InlineResponse20078>("/notation/keyFigures/year/3/get", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetNotationKeyFiguresYear3Get", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// End-of-day (EOD) key figures for the time range of three years, for a list of notations. End-of-day (EOD) key figures for the time range of three years, for a list of notations.
        /// </summary>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifiers"></param>
        /// <param name="identifierType"></param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <returns>InlineResponse20079</returns>
        public InlineResponse20079 GetNotationKeyFiguresYear3List(List<string> identifiers, string identifierType, List<string> attributes = default(List<string>))
        {
            var localVarResponse = GetNotationKeyFiguresYear3ListWithHttpInfo(identifiers, identifierType, attributes);
            return localVarResponse.Data;
        }

        /// <summary>
        /// End-of-day (EOD) key figures for the time range of three years, for a list of notations. End-of-day (EOD) key figures for the time range of three years, for a list of notations.
        /// </summary>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifiers"></param>
        /// <param name="identifierType"></param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <returns>ApiResponse of InlineResponse20079</returns>
        public ApiResponse<InlineResponse20079> GetNotationKeyFiguresYear3ListWithHttpInfo(List<string> identifiers, string identifierType, List<string> attributes = default(List<string>))
        {
            // verify the required parameter 'identifiers' is set
            if (identifiers == null)
            {
                throw new FactSet.SDK.RealTimeQuotes.Client.ApiException(400, "Missing required parameter 'identifiers' when calling NotationApi->GetNotationKeyFiguresYear3List");
            }

            // verify the required parameter 'identifierType' is set
            if (identifierType == null)
            {
                throw new FactSet.SDK.RealTimeQuotes.Client.ApiException(400, "Missing required parameter 'identifierType' when calling NotationApi->GetNotationKeyFiguresYear3List");
            }

            FactSet.SDK.RealTimeQuotes.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.RealTimeQuotes.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.RealTimeQuotes.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.RealTimeQuotes.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeQuotes.Client.ClientUtils.ParameterToMultiMap("csv", "identifiers", identifiers));
            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeQuotes.Client.ClientUtils.ParameterToMultiMap("", "identifierType", identifierType));
            if (attributes != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeQuotes.Client.ClientUtils.ParameterToMultiMap("csv", "_attributes", attributes));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.RealTimeQuotes.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = GetNotationKeyFiguresYear3ListResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Get<
            InlineResponse20079>("/notation/keyFigures/year/3/list", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetNotationKeyFiguresYear3List", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// End-of-day (EOD) key figures for the time range of three years, for a list of notations. End-of-day (EOD) key figures for the time range of three years, for a list of notations.
        /// </summary>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifiers"></param>
        /// <param name="identifierType"></param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse20079</returns>
        public async System.Threading.Tasks.Task<InlineResponse20079>GetNotationKeyFiguresYear3ListAsync(List<string> identifiers, string identifierType, List<string> attributes = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await GetNotationKeyFiguresYear3ListWithHttpInfoAsync(identifiers, identifierType, attributes, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// End-of-day (EOD) key figures for the time range of three years, for a list of notations. End-of-day (EOD) key figures for the time range of three years, for a list of notations.
        /// </summary>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifiers"></param>
        /// <param name="identifierType"></param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse20079)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20079>> GetNotationKeyFiguresYear3ListWithHttpInfoAsync(List<string> identifiers, string identifierType, List<string> attributes = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'identifiers' is set
            if (identifiers == null)
            {
                throw new FactSet.SDK.RealTimeQuotes.Client.ApiException(400, "Missing required parameter 'identifiers' when calling NotationApi->GetNotationKeyFiguresYear3List");
            }

            // verify the required parameter 'identifierType' is set
            if (identifierType == null)
            {
                throw new FactSet.SDK.RealTimeQuotes.Client.ApiException(400, "Missing required parameter 'identifierType' when calling NotationApi->GetNotationKeyFiguresYear3List");
            }


            FactSet.SDK.RealTimeQuotes.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.RealTimeQuotes.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.RealTimeQuotes.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.RealTimeQuotes.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeQuotes.Client.ClientUtils.ParameterToMultiMap("csv", "identifiers", identifiers));
            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeQuotes.Client.ClientUtils.ParameterToMultiMap("", "identifierType", identifierType));
            if (attributes != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeQuotes.Client.ClientUtils.ParameterToMultiMap("csv", "_attributes", attributes));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.RealTimeQuotes.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = GetNotationKeyFiguresYear3ListResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<InlineResponse20079>("/notation/keyFigures/year/3/list", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetNotationKeyFiguresYear3List", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// End-of-day (EOD) key figures for the time range of five years. End-of-day (EOD) key figures for the time range of five years.
        /// </summary>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifier"></param>
        /// <param name="identifierType"></param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <returns>InlineResponse20078</returns>
        public InlineResponse20078 GetNotationKeyFiguresYear5Get(string identifier, string identifierType, List<string> attributes = default(List<string>))
        {
            var localVarResponse = GetNotationKeyFiguresYear5GetWithHttpInfo(identifier, identifierType, attributes);
            return localVarResponse.Data;
        }

        /// <summary>
        /// End-of-day (EOD) key figures for the time range of five years. End-of-day (EOD) key figures for the time range of five years.
        /// </summary>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifier"></param>
        /// <param name="identifierType"></param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <returns>ApiResponse of InlineResponse20078</returns>
        public ApiResponse<InlineResponse20078> GetNotationKeyFiguresYear5GetWithHttpInfo(string identifier, string identifierType, List<string> attributes = default(List<string>))
        {
            // verify the required parameter 'identifier' is set
            if (identifier == null)
            {
                throw new FactSet.SDK.RealTimeQuotes.Client.ApiException(400, "Missing required parameter 'identifier' when calling NotationApi->GetNotationKeyFiguresYear5Get");
            }

            // verify the required parameter 'identifierType' is set
            if (identifierType == null)
            {
                throw new FactSet.SDK.RealTimeQuotes.Client.ApiException(400, "Missing required parameter 'identifierType' when calling NotationApi->GetNotationKeyFiguresYear5Get");
            }

            FactSet.SDK.RealTimeQuotes.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.RealTimeQuotes.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.RealTimeQuotes.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.RealTimeQuotes.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeQuotes.Client.ClientUtils.ParameterToMultiMap("", "identifier", identifier));
            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeQuotes.Client.ClientUtils.ParameterToMultiMap("", "identifierType", identifierType));
            if (attributes != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeQuotes.Client.ClientUtils.ParameterToMultiMap("csv", "_attributes", attributes));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.RealTimeQuotes.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = GetNotationKeyFiguresYear5GetResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Get<
            InlineResponse20078>("/notation/keyFigures/year/5/get", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetNotationKeyFiguresYear5Get", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// End-of-day (EOD) key figures for the time range of five years. End-of-day (EOD) key figures for the time range of five years.
        /// </summary>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifier"></param>
        /// <param name="identifierType"></param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse20078</returns>
        public async System.Threading.Tasks.Task<InlineResponse20078>GetNotationKeyFiguresYear5GetAsync(string identifier, string identifierType, List<string> attributes = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await GetNotationKeyFiguresYear5GetWithHttpInfoAsync(identifier, identifierType, attributes, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// End-of-day (EOD) key figures for the time range of five years. End-of-day (EOD) key figures for the time range of five years.
        /// </summary>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifier"></param>
        /// <param name="identifierType"></param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse20078)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20078>> GetNotationKeyFiguresYear5GetWithHttpInfoAsync(string identifier, string identifierType, List<string> attributes = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'identifier' is set
            if (identifier == null)
            {
                throw new FactSet.SDK.RealTimeQuotes.Client.ApiException(400, "Missing required parameter 'identifier' when calling NotationApi->GetNotationKeyFiguresYear5Get");
            }

            // verify the required parameter 'identifierType' is set
            if (identifierType == null)
            {
                throw new FactSet.SDK.RealTimeQuotes.Client.ApiException(400, "Missing required parameter 'identifierType' when calling NotationApi->GetNotationKeyFiguresYear5Get");
            }


            FactSet.SDK.RealTimeQuotes.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.RealTimeQuotes.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.RealTimeQuotes.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.RealTimeQuotes.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeQuotes.Client.ClientUtils.ParameterToMultiMap("", "identifier", identifier));
            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeQuotes.Client.ClientUtils.ParameterToMultiMap("", "identifierType", identifierType));
            if (attributes != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeQuotes.Client.ClientUtils.ParameterToMultiMap("csv", "_attributes", attributes));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.RealTimeQuotes.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = GetNotationKeyFiguresYear5GetResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<InlineResponse20078>("/notation/keyFigures/year/5/get", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetNotationKeyFiguresYear5Get", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// End-of-day (EOD) key figures for the time range of five years, for a list of notations. End-of-day (EOD) key figures for the time range of five years, for a list of notations.
        /// </summary>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifiers"></param>
        /// <param name="identifierType"></param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <returns>InlineResponse20079</returns>
        public InlineResponse20079 GetNotationKeyFiguresYear5List(List<string> identifiers, string identifierType, List<string> attributes = default(List<string>))
        {
            var localVarResponse = GetNotationKeyFiguresYear5ListWithHttpInfo(identifiers, identifierType, attributes);
            return localVarResponse.Data;
        }

        /// <summary>
        /// End-of-day (EOD) key figures for the time range of five years, for a list of notations. End-of-day (EOD) key figures for the time range of five years, for a list of notations.
        /// </summary>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifiers"></param>
        /// <param name="identifierType"></param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <returns>ApiResponse of InlineResponse20079</returns>
        public ApiResponse<InlineResponse20079> GetNotationKeyFiguresYear5ListWithHttpInfo(List<string> identifiers, string identifierType, List<string> attributes = default(List<string>))
        {
            // verify the required parameter 'identifiers' is set
            if (identifiers == null)
            {
                throw new FactSet.SDK.RealTimeQuotes.Client.ApiException(400, "Missing required parameter 'identifiers' when calling NotationApi->GetNotationKeyFiguresYear5List");
            }

            // verify the required parameter 'identifierType' is set
            if (identifierType == null)
            {
                throw new FactSet.SDK.RealTimeQuotes.Client.ApiException(400, "Missing required parameter 'identifierType' when calling NotationApi->GetNotationKeyFiguresYear5List");
            }

            FactSet.SDK.RealTimeQuotes.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.RealTimeQuotes.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.RealTimeQuotes.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.RealTimeQuotes.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeQuotes.Client.ClientUtils.ParameterToMultiMap("csv", "identifiers", identifiers));
            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeQuotes.Client.ClientUtils.ParameterToMultiMap("", "identifierType", identifierType));
            if (attributes != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeQuotes.Client.ClientUtils.ParameterToMultiMap("csv", "_attributes", attributes));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.RealTimeQuotes.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = GetNotationKeyFiguresYear5ListResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Get<
            InlineResponse20079>("/notation/keyFigures/year/5/list", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetNotationKeyFiguresYear5List", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// End-of-day (EOD) key figures for the time range of five years, for a list of notations. End-of-day (EOD) key figures for the time range of five years, for a list of notations.
        /// </summary>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifiers"></param>
        /// <param name="identifierType"></param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse20079</returns>
        public async System.Threading.Tasks.Task<InlineResponse20079>GetNotationKeyFiguresYear5ListAsync(List<string> identifiers, string identifierType, List<string> attributes = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await GetNotationKeyFiguresYear5ListWithHttpInfoAsync(identifiers, identifierType, attributes, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// End-of-day (EOD) key figures for the time range of five years, for a list of notations. End-of-day (EOD) key figures for the time range of five years, for a list of notations.
        /// </summary>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifiers"></param>
        /// <param name="identifierType"></param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse20079)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20079>> GetNotationKeyFiguresYear5ListWithHttpInfoAsync(List<string> identifiers, string identifierType, List<string> attributes = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'identifiers' is set
            if (identifiers == null)
            {
                throw new FactSet.SDK.RealTimeQuotes.Client.ApiException(400, "Missing required parameter 'identifiers' when calling NotationApi->GetNotationKeyFiguresYear5List");
            }

            // verify the required parameter 'identifierType' is set
            if (identifierType == null)
            {
                throw new FactSet.SDK.RealTimeQuotes.Client.ApiException(400, "Missing required parameter 'identifierType' when calling NotationApi->GetNotationKeyFiguresYear5List");
            }


            FactSet.SDK.RealTimeQuotes.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.RealTimeQuotes.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.RealTimeQuotes.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.RealTimeQuotes.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeQuotes.Client.ClientUtils.ParameterToMultiMap("csv", "identifiers", identifiers));
            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeQuotes.Client.ClientUtils.ParameterToMultiMap("", "identifierType", identifierType));
            if (attributes != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeQuotes.Client.ClientUtils.ParameterToMultiMap("csv", "_attributes", attributes));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.RealTimeQuotes.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = GetNotationKeyFiguresYear5ListResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<InlineResponse20079>("/notation/keyFigures/year/5/list", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetNotationKeyFiguresYear5List", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// End-of-day (EOD) key figures for the time range of seven years. End-of-day (EOD) key figures for the time range of seven years.
        /// </summary>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifier"></param>
        /// <param name="identifierType"></param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <returns>InlineResponse20078</returns>
        public InlineResponse20078 GetNotationKeyFiguresYear7Get(string identifier, string identifierType, List<string> attributes = default(List<string>))
        {
            var localVarResponse = GetNotationKeyFiguresYear7GetWithHttpInfo(identifier, identifierType, attributes);
            return localVarResponse.Data;
        }

        /// <summary>
        /// End-of-day (EOD) key figures for the time range of seven years. End-of-day (EOD) key figures for the time range of seven years.
        /// </summary>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifier"></param>
        /// <param name="identifierType"></param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <returns>ApiResponse of InlineResponse20078</returns>
        public ApiResponse<InlineResponse20078> GetNotationKeyFiguresYear7GetWithHttpInfo(string identifier, string identifierType, List<string> attributes = default(List<string>))
        {
            // verify the required parameter 'identifier' is set
            if (identifier == null)
            {
                throw new FactSet.SDK.RealTimeQuotes.Client.ApiException(400, "Missing required parameter 'identifier' when calling NotationApi->GetNotationKeyFiguresYear7Get");
            }

            // verify the required parameter 'identifierType' is set
            if (identifierType == null)
            {
                throw new FactSet.SDK.RealTimeQuotes.Client.ApiException(400, "Missing required parameter 'identifierType' when calling NotationApi->GetNotationKeyFiguresYear7Get");
            }

            FactSet.SDK.RealTimeQuotes.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.RealTimeQuotes.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.RealTimeQuotes.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.RealTimeQuotes.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeQuotes.Client.ClientUtils.ParameterToMultiMap("", "identifier", identifier));
            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeQuotes.Client.ClientUtils.ParameterToMultiMap("", "identifierType", identifierType));
            if (attributes != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeQuotes.Client.ClientUtils.ParameterToMultiMap("csv", "_attributes", attributes));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.RealTimeQuotes.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = GetNotationKeyFiguresYear7GetResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Get<
            InlineResponse20078>("/notation/keyFigures/year/7/get", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetNotationKeyFiguresYear7Get", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// End-of-day (EOD) key figures for the time range of seven years. End-of-day (EOD) key figures for the time range of seven years.
        /// </summary>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifier"></param>
        /// <param name="identifierType"></param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse20078</returns>
        public async System.Threading.Tasks.Task<InlineResponse20078>GetNotationKeyFiguresYear7GetAsync(string identifier, string identifierType, List<string> attributes = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await GetNotationKeyFiguresYear7GetWithHttpInfoAsync(identifier, identifierType, attributes, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// End-of-day (EOD) key figures for the time range of seven years. End-of-day (EOD) key figures for the time range of seven years.
        /// </summary>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifier"></param>
        /// <param name="identifierType"></param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse20078)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20078>> GetNotationKeyFiguresYear7GetWithHttpInfoAsync(string identifier, string identifierType, List<string> attributes = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'identifier' is set
            if (identifier == null)
            {
                throw new FactSet.SDK.RealTimeQuotes.Client.ApiException(400, "Missing required parameter 'identifier' when calling NotationApi->GetNotationKeyFiguresYear7Get");
            }

            // verify the required parameter 'identifierType' is set
            if (identifierType == null)
            {
                throw new FactSet.SDK.RealTimeQuotes.Client.ApiException(400, "Missing required parameter 'identifierType' when calling NotationApi->GetNotationKeyFiguresYear7Get");
            }


            FactSet.SDK.RealTimeQuotes.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.RealTimeQuotes.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.RealTimeQuotes.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.RealTimeQuotes.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeQuotes.Client.ClientUtils.ParameterToMultiMap("", "identifier", identifier));
            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeQuotes.Client.ClientUtils.ParameterToMultiMap("", "identifierType", identifierType));
            if (attributes != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeQuotes.Client.ClientUtils.ParameterToMultiMap("csv", "_attributes", attributes));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.RealTimeQuotes.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = GetNotationKeyFiguresYear7GetResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<InlineResponse20078>("/notation/keyFigures/year/7/get", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetNotationKeyFiguresYear7Get", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// End-of-day (EOD) key figures for the time range of seven years, for a list of notations. End-of-day (EOD) key figures for the time range of seven years, for a list of notations.
        /// </summary>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifiers"></param>
        /// <param name="identifierType"></param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <returns>InlineResponse20079</returns>
        public InlineResponse20079 GetNotationKeyFiguresYear7List(List<string> identifiers, string identifierType, List<string> attributes = default(List<string>))
        {
            var localVarResponse = GetNotationKeyFiguresYear7ListWithHttpInfo(identifiers, identifierType, attributes);
            return localVarResponse.Data;
        }

        /// <summary>
        /// End-of-day (EOD) key figures for the time range of seven years, for a list of notations. End-of-day (EOD) key figures for the time range of seven years, for a list of notations.
        /// </summary>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifiers"></param>
        /// <param name="identifierType"></param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <returns>ApiResponse of InlineResponse20079</returns>
        public ApiResponse<InlineResponse20079> GetNotationKeyFiguresYear7ListWithHttpInfo(List<string> identifiers, string identifierType, List<string> attributes = default(List<string>))
        {
            // verify the required parameter 'identifiers' is set
            if (identifiers == null)
            {
                throw new FactSet.SDK.RealTimeQuotes.Client.ApiException(400, "Missing required parameter 'identifiers' when calling NotationApi->GetNotationKeyFiguresYear7List");
            }

            // verify the required parameter 'identifierType' is set
            if (identifierType == null)
            {
                throw new FactSet.SDK.RealTimeQuotes.Client.ApiException(400, "Missing required parameter 'identifierType' when calling NotationApi->GetNotationKeyFiguresYear7List");
            }

            FactSet.SDK.RealTimeQuotes.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.RealTimeQuotes.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.RealTimeQuotes.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.RealTimeQuotes.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeQuotes.Client.ClientUtils.ParameterToMultiMap("csv", "identifiers", identifiers));
            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeQuotes.Client.ClientUtils.ParameterToMultiMap("", "identifierType", identifierType));
            if (attributes != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeQuotes.Client.ClientUtils.ParameterToMultiMap("csv", "_attributes", attributes));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.RealTimeQuotes.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = GetNotationKeyFiguresYear7ListResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Get<
            InlineResponse20079>("/notation/keyFigures/year/7/list", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetNotationKeyFiguresYear7List", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// End-of-day (EOD) key figures for the time range of seven years, for a list of notations. End-of-day (EOD) key figures for the time range of seven years, for a list of notations.
        /// </summary>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifiers"></param>
        /// <param name="identifierType"></param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse20079</returns>
        public async System.Threading.Tasks.Task<InlineResponse20079>GetNotationKeyFiguresYear7ListAsync(List<string> identifiers, string identifierType, List<string> attributes = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await GetNotationKeyFiguresYear7ListWithHttpInfoAsync(identifiers, identifierType, attributes, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// End-of-day (EOD) key figures for the time range of seven years, for a list of notations. End-of-day (EOD) key figures for the time range of seven years, for a list of notations.
        /// </summary>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifiers"></param>
        /// <param name="identifierType"></param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse20079)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20079>> GetNotationKeyFiguresYear7ListWithHttpInfoAsync(List<string> identifiers, string identifierType, List<string> attributes = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'identifiers' is set
            if (identifiers == null)
            {
                throw new FactSet.SDK.RealTimeQuotes.Client.ApiException(400, "Missing required parameter 'identifiers' when calling NotationApi->GetNotationKeyFiguresYear7List");
            }

            // verify the required parameter 'identifierType' is set
            if (identifierType == null)
            {
                throw new FactSet.SDK.RealTimeQuotes.Client.ApiException(400, "Missing required parameter 'identifierType' when calling NotationApi->GetNotationKeyFiguresYear7List");
            }


            FactSet.SDK.RealTimeQuotes.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.RealTimeQuotes.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.RealTimeQuotes.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.RealTimeQuotes.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeQuotes.Client.ClientUtils.ParameterToMultiMap("csv", "identifiers", identifiers));
            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeQuotes.Client.ClientUtils.ParameterToMultiMap("", "identifierType", identifierType));
            if (attributes != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeQuotes.Client.ClientUtils.ParameterToMultiMap("csv", "_attributes", attributes));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.RealTimeQuotes.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = GetNotationKeyFiguresYear7ListResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<InlineResponse20079>("/notation/keyFigures/year/7/list", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetNotationKeyFiguresYear7List", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// End-of-day (EOD) key figures for the time range year-to-date (YTD).. End-of-day (EOD) key figures for the time range year-to-date (YTD). The time range YTD begins with the last trading day of the previous calendar year for which EOD prices are available and ends with the most recent trading day of the current calendar year for which EOD prices are available..
        /// </summary>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifier"></param>
        /// <param name="identifierType"></param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <returns>InlineResponse20082</returns>
        public InlineResponse20082 GetNotationKeyFiguresYearToDateGet(string identifier, string identifierType, List<string> attributes = default(List<string>))
        {
            var localVarResponse = GetNotationKeyFiguresYearToDateGetWithHttpInfo(identifier, identifierType, attributes);
            return localVarResponse.Data;
        }

        /// <summary>
        /// End-of-day (EOD) key figures for the time range year-to-date (YTD).. End-of-day (EOD) key figures for the time range year-to-date (YTD). The time range YTD begins with the last trading day of the previous calendar year for which EOD prices are available and ends with the most recent trading day of the current calendar year for which EOD prices are available..
        /// </summary>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifier"></param>
        /// <param name="identifierType"></param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <returns>ApiResponse of InlineResponse20082</returns>
        public ApiResponse<InlineResponse20082> GetNotationKeyFiguresYearToDateGetWithHttpInfo(string identifier, string identifierType, List<string> attributes = default(List<string>))
        {
            // verify the required parameter 'identifier' is set
            if (identifier == null)
            {
                throw new FactSet.SDK.RealTimeQuotes.Client.ApiException(400, "Missing required parameter 'identifier' when calling NotationApi->GetNotationKeyFiguresYearToDateGet");
            }

            // verify the required parameter 'identifierType' is set
            if (identifierType == null)
            {
                throw new FactSet.SDK.RealTimeQuotes.Client.ApiException(400, "Missing required parameter 'identifierType' when calling NotationApi->GetNotationKeyFiguresYearToDateGet");
            }

            FactSet.SDK.RealTimeQuotes.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.RealTimeQuotes.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.RealTimeQuotes.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.RealTimeQuotes.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeQuotes.Client.ClientUtils.ParameterToMultiMap("", "identifier", identifier));
            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeQuotes.Client.ClientUtils.ParameterToMultiMap("", "identifierType", identifierType));
            if (attributes != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeQuotes.Client.ClientUtils.ParameterToMultiMap("csv", "_attributes", attributes));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.RealTimeQuotes.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = GetNotationKeyFiguresYearToDateGetResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Get<
            InlineResponse20082>("/notation/keyFigures/yearToDate/get", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetNotationKeyFiguresYearToDateGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// End-of-day (EOD) key figures for the time range year-to-date (YTD).. End-of-day (EOD) key figures for the time range year-to-date (YTD). The time range YTD begins with the last trading day of the previous calendar year for which EOD prices are available and ends with the most recent trading day of the current calendar year for which EOD prices are available..
        /// </summary>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifier"></param>
        /// <param name="identifierType"></param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse20082</returns>
        public async System.Threading.Tasks.Task<InlineResponse20082>GetNotationKeyFiguresYearToDateGetAsync(string identifier, string identifierType, List<string> attributes = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await GetNotationKeyFiguresYearToDateGetWithHttpInfoAsync(identifier, identifierType, attributes, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// End-of-day (EOD) key figures for the time range year-to-date (YTD).. End-of-day (EOD) key figures for the time range year-to-date (YTD). The time range YTD begins with the last trading day of the previous calendar year for which EOD prices are available and ends with the most recent trading day of the current calendar year for which EOD prices are available..
        /// </summary>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifier"></param>
        /// <param name="identifierType"></param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse20082)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20082>> GetNotationKeyFiguresYearToDateGetWithHttpInfoAsync(string identifier, string identifierType, List<string> attributes = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'identifier' is set
            if (identifier == null)
            {
                throw new FactSet.SDK.RealTimeQuotes.Client.ApiException(400, "Missing required parameter 'identifier' when calling NotationApi->GetNotationKeyFiguresYearToDateGet");
            }

            // verify the required parameter 'identifierType' is set
            if (identifierType == null)
            {
                throw new FactSet.SDK.RealTimeQuotes.Client.ApiException(400, "Missing required parameter 'identifierType' when calling NotationApi->GetNotationKeyFiguresYearToDateGet");
            }


            FactSet.SDK.RealTimeQuotes.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.RealTimeQuotes.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.RealTimeQuotes.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.RealTimeQuotes.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeQuotes.Client.ClientUtils.ParameterToMultiMap("", "identifier", identifier));
            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeQuotes.Client.ClientUtils.ParameterToMultiMap("", "identifierType", identifierType));
            if (attributes != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeQuotes.Client.ClientUtils.ParameterToMultiMap("csv", "_attributes", attributes));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.RealTimeQuotes.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = GetNotationKeyFiguresYearToDateGetResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<InlineResponse20082>("/notation/keyFigures/yearToDate/get", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetNotationKeyFiguresYearToDateGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// End-of-day (EOD) key figures for the time range year-to-date (YTD), for a list of notations.. End-of-day (EOD) key figures for the time range year-to-date (YTD), for a list of notations. The time range YTD begins with the last trading day of the previous calendar year for which EOD prices are available and ends with the most recent tradingday of the current calendar year for which EOD prices are available..
        /// </summary>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifiers"></param>
        /// <param name="identifierType"></param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <returns>InlineResponse20083</returns>
        public InlineResponse20083 GetNotationKeyFiguresYearToDateList(List<string> identifiers, string identifierType, List<string> attributes = default(List<string>))
        {
            var localVarResponse = GetNotationKeyFiguresYearToDateListWithHttpInfo(identifiers, identifierType, attributes);
            return localVarResponse.Data;
        }

        /// <summary>
        /// End-of-day (EOD) key figures for the time range year-to-date (YTD), for a list of notations.. End-of-day (EOD) key figures for the time range year-to-date (YTD), for a list of notations. The time range YTD begins with the last trading day of the previous calendar year for which EOD prices are available and ends with the most recent tradingday of the current calendar year for which EOD prices are available..
        /// </summary>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifiers"></param>
        /// <param name="identifierType"></param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <returns>ApiResponse of InlineResponse20083</returns>
        public ApiResponse<InlineResponse20083> GetNotationKeyFiguresYearToDateListWithHttpInfo(List<string> identifiers, string identifierType, List<string> attributes = default(List<string>))
        {
            // verify the required parameter 'identifiers' is set
            if (identifiers == null)
            {
                throw new FactSet.SDK.RealTimeQuotes.Client.ApiException(400, "Missing required parameter 'identifiers' when calling NotationApi->GetNotationKeyFiguresYearToDateList");
            }

            // verify the required parameter 'identifierType' is set
            if (identifierType == null)
            {
                throw new FactSet.SDK.RealTimeQuotes.Client.ApiException(400, "Missing required parameter 'identifierType' when calling NotationApi->GetNotationKeyFiguresYearToDateList");
            }

            FactSet.SDK.RealTimeQuotes.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.RealTimeQuotes.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.RealTimeQuotes.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.RealTimeQuotes.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeQuotes.Client.ClientUtils.ParameterToMultiMap("csv", "identifiers", identifiers));
            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeQuotes.Client.ClientUtils.ParameterToMultiMap("", "identifierType", identifierType));
            if (attributes != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeQuotes.Client.ClientUtils.ParameterToMultiMap("csv", "_attributes", attributes));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.RealTimeQuotes.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = GetNotationKeyFiguresYearToDateListResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Get<
            InlineResponse20083>("/notation/keyFigures/yearToDate/list", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetNotationKeyFiguresYearToDateList", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// End-of-day (EOD) key figures for the time range year-to-date (YTD), for a list of notations.. End-of-day (EOD) key figures for the time range year-to-date (YTD), for a list of notations. The time range YTD begins with the last trading day of the previous calendar year for which EOD prices are available and ends with the most recent tradingday of the current calendar year for which EOD prices are available..
        /// </summary>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifiers"></param>
        /// <param name="identifierType"></param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse20083</returns>
        public async System.Threading.Tasks.Task<InlineResponse20083>GetNotationKeyFiguresYearToDateListAsync(List<string> identifiers, string identifierType, List<string> attributes = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await GetNotationKeyFiguresYearToDateListWithHttpInfoAsync(identifiers, identifierType, attributes, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// End-of-day (EOD) key figures for the time range year-to-date (YTD), for a list of notations.. End-of-day (EOD) key figures for the time range year-to-date (YTD), for a list of notations. The time range YTD begins with the last trading day of the previous calendar year for which EOD prices are available and ends with the most recent tradingday of the current calendar year for which EOD prices are available..
        /// </summary>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifiers"></param>
        /// <param name="identifierType"></param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse20083)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20083>> GetNotationKeyFiguresYearToDateListWithHttpInfoAsync(List<string> identifiers, string identifierType, List<string> attributes = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'identifiers' is set
            if (identifiers == null)
            {
                throw new FactSet.SDK.RealTimeQuotes.Client.ApiException(400, "Missing required parameter 'identifiers' when calling NotationApi->GetNotationKeyFiguresYearToDateList");
            }

            // verify the required parameter 'identifierType' is set
            if (identifierType == null)
            {
                throw new FactSet.SDK.RealTimeQuotes.Client.ApiException(400, "Missing required parameter 'identifierType' when calling NotationApi->GetNotationKeyFiguresYearToDateList");
            }


            FactSet.SDK.RealTimeQuotes.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.RealTimeQuotes.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.RealTimeQuotes.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.RealTimeQuotes.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeQuotes.Client.ClientUtils.ParameterToMultiMap("csv", "identifiers", identifiers));
            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeQuotes.Client.ClientUtils.ParameterToMultiMap("", "identifierType", identifierType));
            if (attributes != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeQuotes.Client.ClientUtils.ParameterToMultiMap("csv", "_attributes", attributes));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.RealTimeQuotes.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = GetNotationKeyFiguresYearToDateListResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<InlineResponse20083>("/notation/keyFigures/yearToDate/list", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetNotationKeyFiguresYearToDateList", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Basic data for a list of notations. Basic data for a list of notations.
        /// </summary>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifiers"></param>
        /// <param name="identifierType"></param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="language"> (optional)</param>
        /// <returns>InlineResponse20069</returns>
        public InlineResponse20069 GetNotationList(List<string> identifiers, string identifierType, List<string> attributes = default(List<string>), string language = default(string))
        {
            var localVarResponse = GetNotationListWithHttpInfo(identifiers, identifierType, attributes, language);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Basic data for a list of notations. Basic data for a list of notations.
        /// </summary>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifiers"></param>
        /// <param name="identifierType"></param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="language"> (optional)</param>
        /// <returns>ApiResponse of InlineResponse20069</returns>
        public ApiResponse<InlineResponse20069> GetNotationListWithHttpInfo(List<string> identifiers, string identifierType, List<string> attributes = default(List<string>), string language = default(string))
        {
            // verify the required parameter 'identifiers' is set
            if (identifiers == null)
            {
                throw new FactSet.SDK.RealTimeQuotes.Client.ApiException(400, "Missing required parameter 'identifiers' when calling NotationApi->GetNotationList");
            }

            // verify the required parameter 'identifierType' is set
            if (identifierType == null)
            {
                throw new FactSet.SDK.RealTimeQuotes.Client.ApiException(400, "Missing required parameter 'identifierType' when calling NotationApi->GetNotationList");
            }

            FactSet.SDK.RealTimeQuotes.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.RealTimeQuotes.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.RealTimeQuotes.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.RealTimeQuotes.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeQuotes.Client.ClientUtils.ParameterToMultiMap("csv", "identifiers", identifiers));
            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeQuotes.Client.ClientUtils.ParameterToMultiMap("", "identifierType", identifierType));
            if (attributes != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeQuotes.Client.ClientUtils.ParameterToMultiMap("csv", "_attributes", attributes));
            }
            if (language != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeQuotes.Client.ClientUtils.ParameterToMultiMap("", "_language", language));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.RealTimeQuotes.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = GetNotationListResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Get<
            InlineResponse20069>("/notation/list", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetNotationList", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// Basic data for a list of notations. Basic data for a list of notations.
        /// </summary>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifiers"></param>
        /// <param name="identifierType"></param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="language"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse20069</returns>
        public async System.Threading.Tasks.Task<InlineResponse20069>GetNotationListAsync(List<string> identifiers, string identifierType, List<string> attributes = default(List<string>), string language = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await GetNotationListWithHttpInfoAsync(identifiers, identifierType, attributes, language, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Basic data for a list of notations. Basic data for a list of notations.
        /// </summary>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifiers"></param>
        /// <param name="identifierType"></param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="language"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse20069)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20069>> GetNotationListWithHttpInfoAsync(List<string> identifiers, string identifierType, List<string> attributes = default(List<string>), string language = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'identifiers' is set
            if (identifiers == null)
            {
                throw new FactSet.SDK.RealTimeQuotes.Client.ApiException(400, "Missing required parameter 'identifiers' when calling NotationApi->GetNotationList");
            }

            // verify the required parameter 'identifierType' is set
            if (identifierType == null)
            {
                throw new FactSet.SDK.RealTimeQuotes.Client.ApiException(400, "Missing required parameter 'identifierType' when calling NotationApi->GetNotationList");
            }


            FactSet.SDK.RealTimeQuotes.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.RealTimeQuotes.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.RealTimeQuotes.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.RealTimeQuotes.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeQuotes.Client.ClientUtils.ParameterToMultiMap("csv", "identifiers", identifiers));
            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeQuotes.Client.ClientUtils.ParameterToMultiMap("", "identifierType", identifierType));
            if (attributes != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeQuotes.Client.ClientUtils.ParameterToMultiMap("csv", "_attributes", attributes));
            }
            if (language != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeQuotes.Client.ClientUtils.ParameterToMultiMap("", "_language", language));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.RealTimeQuotes.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = GetNotationListResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<InlineResponse20069>("/notation/list", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetNotationList", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Basic search for notations. Search for a notation whose ISIN, specified NSINs, name, or symbol match the search value according to a tolerant full-text match algorithm. If more than one notation of an instrument matches, only the notation with the highest monetary trading volume, averaged over one month, is considered. Better matching results appear in the response before less relevant matches. If the parameter popularity is set to true, the popularity of the notation is the primary sort criterion. Popularity is affected mostly by the request frequency of the notation.
        /// </summary>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="searchValue"></param>
        /// <param name="nsins"> (optional)</param>
        /// <param name="assetClass"> (optional)</param>
        /// <param name="onlyActive"> (optional, default to true)</param>
        /// <param name="popularity"> (optional, default to false)</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="language"> (optional)</param>
        /// <param name="paginationOffset">Non-negative number of entries to skip, or 0 (default). (optional, default to 0M)</param>
        /// <param name="paginationLimit">Non-negative maximum number of entries to return. (optional, default to 20M)</param>
        /// <returns>InlineResponse20098</returns>
        public InlineResponse20098 GetNotationSearchBasic(string searchValue, List<string> nsins = default(List<string>), string assetClass = default(string), bool? onlyActive = default(bool?), bool? popularity = default(bool?), List<string> attributes = default(List<string>), string language = default(string), decimal? paginationOffset = default(decimal?), decimal? paginationLimit = default(decimal?))
        {
            var localVarResponse = GetNotationSearchBasicWithHttpInfo(searchValue, nsins, assetClass, onlyActive, popularity, attributes, language, paginationOffset, paginationLimit);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Basic search for notations. Search for a notation whose ISIN, specified NSINs, name, or symbol match the search value according to a tolerant full-text match algorithm. If more than one notation of an instrument matches, only the notation with the highest monetary trading volume, averaged over one month, is considered. Better matching results appear in the response before less relevant matches. If the parameter popularity is set to true, the popularity of the notation is the primary sort criterion. Popularity is affected mostly by the request frequency of the notation.
        /// </summary>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="searchValue"></param>
        /// <param name="nsins"> (optional)</param>
        /// <param name="assetClass"> (optional)</param>
        /// <param name="onlyActive"> (optional, default to true)</param>
        /// <param name="popularity"> (optional, default to false)</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="language"> (optional)</param>
        /// <param name="paginationOffset">Non-negative number of entries to skip, or 0 (default). (optional, default to 0M)</param>
        /// <param name="paginationLimit">Non-negative maximum number of entries to return. (optional, default to 20M)</param>
        /// <returns>ApiResponse of InlineResponse20098</returns>
        public ApiResponse<InlineResponse20098> GetNotationSearchBasicWithHttpInfo(string searchValue, List<string> nsins = default(List<string>), string assetClass = default(string), bool? onlyActive = default(bool?), bool? popularity = default(bool?), List<string> attributes = default(List<string>), string language = default(string), decimal? paginationOffset = default(decimal?), decimal? paginationLimit = default(decimal?))
        {
            // verify the required parameter 'searchValue' is set
            if (searchValue == null)
            {
                throw new FactSet.SDK.RealTimeQuotes.Client.ApiException(400, "Missing required parameter 'searchValue' when calling NotationApi->GetNotationSearchBasic");
            }

            FactSet.SDK.RealTimeQuotes.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.RealTimeQuotes.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.RealTimeQuotes.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.RealTimeQuotes.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeQuotes.Client.ClientUtils.ParameterToMultiMap("", "searchValue", searchValue));
            if (nsins != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeQuotes.Client.ClientUtils.ParameterToMultiMap("csv", "nsins", nsins));
            }
            if (assetClass != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeQuotes.Client.ClientUtils.ParameterToMultiMap("", "assetClass", assetClass));
            }
            if (onlyActive != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeQuotes.Client.ClientUtils.ParameterToMultiMap("", "onlyActive", onlyActive));
            }
            if (popularity != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeQuotes.Client.ClientUtils.ParameterToMultiMap("", "popularity", popularity));
            }
            if (attributes != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeQuotes.Client.ClientUtils.ParameterToMultiMap("csv", "_attributes", attributes));
            }
            if (language != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeQuotes.Client.ClientUtils.ParameterToMultiMap("", "_language", language));
            }
            if (paginationOffset != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeQuotes.Client.ClientUtils.ParameterToMultiMap("", "_paginationOffset", paginationOffset));
            }
            if (paginationLimit != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeQuotes.Client.ClientUtils.ParameterToMultiMap("", "_paginationLimit", paginationLimit));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.RealTimeQuotes.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = GetNotationSearchBasicResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Get<
            InlineResponse20098>("/notation/search/basic", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetNotationSearchBasic", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// Basic search for notations. Search for a notation whose ISIN, specified NSINs, name, or symbol match the search value according to a tolerant full-text match algorithm. If more than one notation of an instrument matches, only the notation with the highest monetary trading volume, averaged over one month, is considered. Better matching results appear in the response before less relevant matches. If the parameter popularity is set to true, the popularity of the notation is the primary sort criterion. Popularity is affected mostly by the request frequency of the notation.
        /// </summary>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="searchValue"></param>
        /// <param name="nsins"> (optional)</param>
        /// <param name="assetClass"> (optional)</param>
        /// <param name="onlyActive"> (optional, default to true)</param>
        /// <param name="popularity"> (optional, default to false)</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="language"> (optional)</param>
        /// <param name="paginationOffset">Non-negative number of entries to skip, or 0 (default). (optional, default to 0M)</param>
        /// <param name="paginationLimit">Non-negative maximum number of entries to return. (optional, default to 20M)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse20098</returns>
        public async System.Threading.Tasks.Task<InlineResponse20098>GetNotationSearchBasicAsync(string searchValue, List<string> nsins = default(List<string>), string assetClass = default(string), bool? onlyActive = default(bool?), bool? popularity = default(bool?), List<string> attributes = default(List<string>), string language = default(string), decimal? paginationOffset = default(decimal?), decimal? paginationLimit = default(decimal?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await GetNotationSearchBasicWithHttpInfoAsync(searchValue, nsins, assetClass, onlyActive, popularity, attributes, language, paginationOffset, paginationLimit, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Basic search for notations. Search for a notation whose ISIN, specified NSINs, name, or symbol match the search value according to a tolerant full-text match algorithm. If more than one notation of an instrument matches, only the notation with the highest monetary trading volume, averaged over one month, is considered. Better matching results appear in the response before less relevant matches. If the parameter popularity is set to true, the popularity of the notation is the primary sort criterion. Popularity is affected mostly by the request frequency of the notation.
        /// </summary>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="searchValue"></param>
        /// <param name="nsins"> (optional)</param>
        /// <param name="assetClass"> (optional)</param>
        /// <param name="onlyActive"> (optional, default to true)</param>
        /// <param name="popularity"> (optional, default to false)</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="language"> (optional)</param>
        /// <param name="paginationOffset">Non-negative number of entries to skip, or 0 (default). (optional, default to 0M)</param>
        /// <param name="paginationLimit">Non-negative maximum number of entries to return. (optional, default to 20M)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse20098)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20098>> GetNotationSearchBasicWithHttpInfoAsync(string searchValue, List<string> nsins = default(List<string>), string assetClass = default(string), bool? onlyActive = default(bool?), bool? popularity = default(bool?), List<string> attributes = default(List<string>), string language = default(string), decimal? paginationOffset = default(decimal?), decimal? paginationLimit = default(decimal?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'searchValue' is set
            if (searchValue == null)
            {
                throw new FactSet.SDK.RealTimeQuotes.Client.ApiException(400, "Missing required parameter 'searchValue' when calling NotationApi->GetNotationSearchBasic");
            }


            FactSet.SDK.RealTimeQuotes.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.RealTimeQuotes.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.RealTimeQuotes.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.RealTimeQuotes.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeQuotes.Client.ClientUtils.ParameterToMultiMap("", "searchValue", searchValue));
            if (nsins != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeQuotes.Client.ClientUtils.ParameterToMultiMap("csv", "nsins", nsins));
            }
            if (assetClass != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeQuotes.Client.ClientUtils.ParameterToMultiMap("", "assetClass", assetClass));
            }
            if (onlyActive != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeQuotes.Client.ClientUtils.ParameterToMultiMap("", "onlyActive", onlyActive));
            }
            if (popularity != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeQuotes.Client.ClientUtils.ParameterToMultiMap("", "popularity", popularity));
            }
            if (attributes != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeQuotes.Client.ClientUtils.ParameterToMultiMap("csv", "_attributes", attributes));
            }
            if (language != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeQuotes.Client.ClientUtils.ParameterToMultiMap("", "_language", language));
            }
            if (paginationOffset != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeQuotes.Client.ClientUtils.ParameterToMultiMap("", "_paginationOffset", paginationOffset));
            }
            if (paginationLimit != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeQuotes.Client.ClientUtils.ParameterToMultiMap("", "_paginationLimit", paginationLimit));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.RealTimeQuotes.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = GetNotationSearchBasicResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<InlineResponse20098>("/notation/search/basic", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetNotationSearchBasic", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Set of custom notation-level selection lists. Set of custom notation-level selection lists.
        /// </summary>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <returns>InlineResponse20065</returns>
        public InlineResponse20065 GetNotationSelectionListList(List<string> attributes = default(List<string>))
        {
            var localVarResponse = GetNotationSelectionListListWithHttpInfo(attributes);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Set of custom notation-level selection lists. Set of custom notation-level selection lists.
        /// </summary>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <returns>ApiResponse of InlineResponse20065</returns>
        public ApiResponse<InlineResponse20065> GetNotationSelectionListListWithHttpInfo(List<string> attributes = default(List<string>))
        {
            FactSet.SDK.RealTimeQuotes.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.RealTimeQuotes.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.RealTimeQuotes.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.RealTimeQuotes.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (attributes != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeQuotes.Client.ClientUtils.ParameterToMultiMap("csv", "_attributes", attributes));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.RealTimeQuotes.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = GetNotationSelectionListListResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Get<
            InlineResponse20065>("/notation/selectionList/list", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetNotationSelectionListList", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// Set of custom notation-level selection lists. Set of custom notation-level selection lists.
        /// </summary>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse20065</returns>
        public async System.Threading.Tasks.Task<InlineResponse20065>GetNotationSelectionListListAsync(List<string> attributes = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await GetNotationSelectionListListWithHttpInfoAsync(attributes, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Set of custom notation-level selection lists. Set of custom notation-level selection lists.
        /// </summary>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse20065)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20065>> GetNotationSelectionListListWithHttpInfoAsync(List<string> attributes = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            FactSet.SDK.RealTimeQuotes.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.RealTimeQuotes.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.RealTimeQuotes.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.RealTimeQuotes.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (attributes != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeQuotes.Client.ClientUtils.ParameterToMultiMap("csv", "_attributes", attributes));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.RealTimeQuotes.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = GetNotationSelectionListListResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<InlineResponse20065>("/notation/selectionList/list", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetNotationSelectionListList", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// For each given notation, returns the notation-level selection lists of which the notation is a member. For each given notation, returns the notation-level selection lists of which the notation is a member.
        /// </summary>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifiers"></param>
        /// <param name="identifierType"></param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <returns>InlineResponse20086</returns>
        public InlineResponse20086 GetNotationSelectionListListByNotation(List<string> identifiers, string identifierType, List<string> attributes = default(List<string>))
        {
            var localVarResponse = GetNotationSelectionListListByNotationWithHttpInfo(identifiers, identifierType, attributes);
            return localVarResponse.Data;
        }

        /// <summary>
        /// For each given notation, returns the notation-level selection lists of which the notation is a member. For each given notation, returns the notation-level selection lists of which the notation is a member.
        /// </summary>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifiers"></param>
        /// <param name="identifierType"></param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <returns>ApiResponse of InlineResponse20086</returns>
        public ApiResponse<InlineResponse20086> GetNotationSelectionListListByNotationWithHttpInfo(List<string> identifiers, string identifierType, List<string> attributes = default(List<string>))
        {
            // verify the required parameter 'identifiers' is set
            if (identifiers == null)
            {
                throw new FactSet.SDK.RealTimeQuotes.Client.ApiException(400, "Missing required parameter 'identifiers' when calling NotationApi->GetNotationSelectionListListByNotation");
            }

            // verify the required parameter 'identifierType' is set
            if (identifierType == null)
            {
                throw new FactSet.SDK.RealTimeQuotes.Client.ApiException(400, "Missing required parameter 'identifierType' when calling NotationApi->GetNotationSelectionListListByNotation");
            }

            FactSet.SDK.RealTimeQuotes.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.RealTimeQuotes.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.RealTimeQuotes.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.RealTimeQuotes.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeQuotes.Client.ClientUtils.ParameterToMultiMap("csv", "identifiers", identifiers));
            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeQuotes.Client.ClientUtils.ParameterToMultiMap("", "identifierType", identifierType));
            if (attributes != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeQuotes.Client.ClientUtils.ParameterToMultiMap("csv", "_attributes", attributes));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.RealTimeQuotes.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = GetNotationSelectionListListByNotationResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Get<
            InlineResponse20086>("/notation/selectionList/listByNotation", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetNotationSelectionListListByNotation", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// For each given notation, returns the notation-level selection lists of which the notation is a member. For each given notation, returns the notation-level selection lists of which the notation is a member.
        /// </summary>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifiers"></param>
        /// <param name="identifierType"></param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse20086</returns>
        public async System.Threading.Tasks.Task<InlineResponse20086>GetNotationSelectionListListByNotationAsync(List<string> identifiers, string identifierType, List<string> attributes = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await GetNotationSelectionListListByNotationWithHttpInfoAsync(identifiers, identifierType, attributes, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// For each given notation, returns the notation-level selection lists of which the notation is a member. For each given notation, returns the notation-level selection lists of which the notation is a member.
        /// </summary>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifiers"></param>
        /// <param name="identifierType"></param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse20086)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20086>> GetNotationSelectionListListByNotationWithHttpInfoAsync(List<string> identifiers, string identifierType, List<string> attributes = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'identifiers' is set
            if (identifiers == null)
            {
                throw new FactSet.SDK.RealTimeQuotes.Client.ApiException(400, "Missing required parameter 'identifiers' when calling NotationApi->GetNotationSelectionListListByNotation");
            }

            // verify the required parameter 'identifierType' is set
            if (identifierType == null)
            {
                throw new FactSet.SDK.RealTimeQuotes.Client.ApiException(400, "Missing required parameter 'identifierType' when calling NotationApi->GetNotationSelectionListListByNotation");
            }


            FactSet.SDK.RealTimeQuotes.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.RealTimeQuotes.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.RealTimeQuotes.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.RealTimeQuotes.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeQuotes.Client.ClientUtils.ParameterToMultiMap("csv", "identifiers", identifiers));
            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeQuotes.Client.ClientUtils.ParameterToMultiMap("", "identifierType", identifierType));
            if (attributes != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeQuotes.Client.ClientUtils.ParameterToMultiMap("csv", "_attributes", attributes));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.RealTimeQuotes.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = GetNotationSelectionListListByNotationResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<InlineResponse20086>("/notation/selectionList/listByNotation", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetNotationSelectionListListByNotation", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Intraday trading status of a notation. Intraday trading status of a notation.&lt;br&gt;The endpoint is subscribable to provide push updates. See attribute &#x60;_subscriptionMinimalInterval&#x60; for valid update rates.
        /// </summary>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifier"></param>
        /// <param name="identifierType"></param>
        /// <param name="quality"> (optional, default to DLY)</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="subscriptionMinimumInterval">Minimum number of milliseconds at which updates are sent. (optional, default to 5000M)</param>
        /// <returns>InlineResponse20088</returns>
        public InlineResponse20088 GetNotationStatusGet(string identifier, string identifierType, string quality = default(string), List<string> attributes = default(List<string>), decimal? subscriptionMinimumInterval = default(decimal?))
        {
            var localVarResponse = GetNotationStatusGetWithHttpInfo(identifier, identifierType, quality, attributes, subscriptionMinimumInterval);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Intraday trading status of a notation. Intraday trading status of a notation.&lt;br&gt;The endpoint is subscribable to provide push updates. See attribute &#x60;_subscriptionMinimalInterval&#x60; for valid update rates.
        /// </summary>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifier"></param>
        /// <param name="identifierType"></param>
        /// <param name="quality"> (optional, default to DLY)</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="subscriptionMinimumInterval">Minimum number of milliseconds at which updates are sent. (optional, default to 5000M)</param>
        /// <returns>ApiResponse of InlineResponse20088</returns>
        public ApiResponse<InlineResponse20088> GetNotationStatusGetWithHttpInfo(string identifier, string identifierType, string quality = default(string), List<string> attributes = default(List<string>), decimal? subscriptionMinimumInterval = default(decimal?))
        {
            // verify the required parameter 'identifier' is set
            if (identifier == null)
            {
                throw new FactSet.SDK.RealTimeQuotes.Client.ApiException(400, "Missing required parameter 'identifier' when calling NotationApi->GetNotationStatusGet");
            }

            // verify the required parameter 'identifierType' is set
            if (identifierType == null)
            {
                throw new FactSet.SDK.RealTimeQuotes.Client.ApiException(400, "Missing required parameter 'identifierType' when calling NotationApi->GetNotationStatusGet");
            }

            FactSet.SDK.RealTimeQuotes.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.RealTimeQuotes.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.RealTimeQuotes.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.RealTimeQuotes.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeQuotes.Client.ClientUtils.ParameterToMultiMap("", "identifier", identifier));
            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeQuotes.Client.ClientUtils.ParameterToMultiMap("", "identifierType", identifierType));
            if (quality != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeQuotes.Client.ClientUtils.ParameterToMultiMap("", "quality", quality));
            }
            if (attributes != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeQuotes.Client.ClientUtils.ParameterToMultiMap("csv", "_attributes", attributes));
            }
            if (subscriptionMinimumInterval != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeQuotes.Client.ClientUtils.ParameterToMultiMap("", "_subscriptionMinimumInterval", subscriptionMinimumInterval));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.RealTimeQuotes.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = GetNotationStatusGetResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Get<
            InlineResponse20088>("/notation/status/get", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetNotationStatusGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// Intraday trading status of a notation. Intraday trading status of a notation.&lt;br&gt;The endpoint is subscribable to provide push updates. See attribute &#x60;_subscriptionMinimalInterval&#x60; for valid update rates.
        /// </summary>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifier"></param>
        /// <param name="identifierType"></param>
        /// <param name="quality"> (optional, default to DLY)</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="subscriptionMinimumInterval">Minimum number of milliseconds at which updates are sent. (optional, default to 5000M)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse20088</returns>
        public async System.Threading.Tasks.Task<InlineResponse20088>GetNotationStatusGetAsync(string identifier, string identifierType, string quality = default(string), List<string> attributes = default(List<string>), decimal? subscriptionMinimumInterval = default(decimal?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await GetNotationStatusGetWithHttpInfoAsync(identifier, identifierType, quality, attributes, subscriptionMinimumInterval, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Intraday trading status of a notation. Intraday trading status of a notation.&lt;br&gt;The endpoint is subscribable to provide push updates. See attribute &#x60;_subscriptionMinimalInterval&#x60; for valid update rates.
        /// </summary>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifier"></param>
        /// <param name="identifierType"></param>
        /// <param name="quality"> (optional, default to DLY)</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="subscriptionMinimumInterval">Minimum number of milliseconds at which updates are sent. (optional, default to 5000M)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse20088)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20088>> GetNotationStatusGetWithHttpInfoAsync(string identifier, string identifierType, string quality = default(string), List<string> attributes = default(List<string>), decimal? subscriptionMinimumInterval = default(decimal?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'identifier' is set
            if (identifier == null)
            {
                throw new FactSet.SDK.RealTimeQuotes.Client.ApiException(400, "Missing required parameter 'identifier' when calling NotationApi->GetNotationStatusGet");
            }

            // verify the required parameter 'identifierType' is set
            if (identifierType == null)
            {
                throw new FactSet.SDK.RealTimeQuotes.Client.ApiException(400, "Missing required parameter 'identifierType' when calling NotationApi->GetNotationStatusGet");
            }


            FactSet.SDK.RealTimeQuotes.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.RealTimeQuotes.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.RealTimeQuotes.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.RealTimeQuotes.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeQuotes.Client.ClientUtils.ParameterToMultiMap("", "identifier", identifier));
            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeQuotes.Client.ClientUtils.ParameterToMultiMap("", "identifierType", identifierType));
            if (quality != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeQuotes.Client.ClientUtils.ParameterToMultiMap("", "quality", quality));
            }
            if (attributes != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeQuotes.Client.ClientUtils.ParameterToMultiMap("csv", "_attributes", attributes));
            }
            if (subscriptionMinimumInterval != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeQuotes.Client.ClientUtils.ParameterToMultiMap("", "_subscriptionMinimumInterval", subscriptionMinimumInterval));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.RealTimeQuotes.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = GetNotationStatusGetResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<InlineResponse20088>("/notation/status/get", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetNotationStatusGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List of categories assigned to a specific notation the application is entitled to see. List of categories assigned to a specific notation the application is entitled to see. Optionally it is possible to restrict the output to only list those for a specific category dataset.
        /// </summary>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postNotationCategoryListRequest">Request Body (optional)</param>
        /// <returns>InlineResponse20070</returns>
        public InlineResponse20070 PostNotationCategoryList(PostNotationCategoryListRequest postNotationCategoryListRequest = default(PostNotationCategoryListRequest))
        {
            var localVarResponse = PostNotationCategoryListWithHttpInfo(postNotationCategoryListRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List of categories assigned to a specific notation the application is entitled to see. List of categories assigned to a specific notation the application is entitled to see. Optionally it is possible to restrict the output to only list those for a specific category dataset.
        /// </summary>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postNotationCategoryListRequest">Request Body (optional)</param>
        /// <returns>ApiResponse of InlineResponse20070</returns>
        public ApiResponse<InlineResponse20070> PostNotationCategoryListWithHttpInfo(PostNotationCategoryListRequest postNotationCategoryListRequest = default(PostNotationCategoryListRequest))
        {
            FactSet.SDK.RealTimeQuotes.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.RealTimeQuotes.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.RealTimeQuotes.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.RealTimeQuotes.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = postNotationCategoryListRequest;

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.RealTimeQuotes.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = PostNotationCategoryListResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Post<
            InlineResponse20070>("/notation/category/list", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostNotationCategoryList", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// List of categories assigned to a specific notation the application is entitled to see. List of categories assigned to a specific notation the application is entitled to see. Optionally it is possible to restrict the output to only list those for a specific category dataset.
        /// </summary>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postNotationCategoryListRequest">Request Body (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse20070</returns>
        public async System.Threading.Tasks.Task<InlineResponse20070>PostNotationCategoryListAsync(PostNotationCategoryListRequest postNotationCategoryListRequest = default(PostNotationCategoryListRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await PostNotationCategoryListWithHttpInfoAsync(postNotationCategoryListRequest, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List of categories assigned to a specific notation the application is entitled to see. List of categories assigned to a specific notation the application is entitled to see. Optionally it is possible to restrict the output to only list those for a specific category dataset.
        /// </summary>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postNotationCategoryListRequest">Request Body (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse20070)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20070>> PostNotationCategoryListWithHttpInfoAsync(PostNotationCategoryListRequest postNotationCategoryListRequest = default(PostNotationCategoryListRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            FactSet.SDK.RealTimeQuotes.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.RealTimeQuotes.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.RealTimeQuotes.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.RealTimeQuotes.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = postNotationCategoryListRequest;

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.RealTimeQuotes.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = PostNotationCategoryListResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<InlineResponse20070>("/notation/category/list", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostNotationCategoryList", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve a list of notations for a given FactSet identifier. &lt;p&gt;Retrieve a list of notations for a given FactSet identifier, grouped by regional identifiers, if available. Listings without a regional identifier are grouped at the end of the response.&lt;/p&gt;&lt;p&gt;The notation corresponding to the security&#39;s primary listing has the attributes &lt;big&gt;&lt;tt&gt;regional.isPrimary&lt;/tt&gt;&lt;/big&gt; and &lt;big&gt;&lt;tt&gt;regional.listing.isPrimary&lt;/tt&gt;&lt;/big&gt; both set to true.The security&#39;s primary listing might not be among the results depending on the entitlement.&lt;/p&gt;&lt;p&gt;See the group description for more information about the security&#39;s primary listing.&lt;/p&gt;
        /// </summary>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postNotationCrossReferenceFactSetIdentifierListByFactSetIdentifierRequest">Request Body</param>
        /// <returns>InlineResponse20076</returns>
        public InlineResponse20076 PostNotationCrossReferenceFactSetIdentifierListByFactSetIdentifier(PostNotationCrossReferenceFactSetIdentifierListByFactSetIdentifierRequest postNotationCrossReferenceFactSetIdentifierListByFactSetIdentifierRequest)
        {
            var localVarResponse = PostNotationCrossReferenceFactSetIdentifierListByFactSetIdentifierWithHttpInfo(postNotationCrossReferenceFactSetIdentifierListByFactSetIdentifierRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve a list of notations for a given FactSet identifier. &lt;p&gt;Retrieve a list of notations for a given FactSet identifier, grouped by regional identifiers, if available. Listings without a regional identifier are grouped at the end of the response.&lt;/p&gt;&lt;p&gt;The notation corresponding to the security&#39;s primary listing has the attributes &lt;big&gt;&lt;tt&gt;regional.isPrimary&lt;/tt&gt;&lt;/big&gt; and &lt;big&gt;&lt;tt&gt;regional.listing.isPrimary&lt;/tt&gt;&lt;/big&gt; both set to true.The security&#39;s primary listing might not be among the results depending on the entitlement.&lt;/p&gt;&lt;p&gt;See the group description for more information about the security&#39;s primary listing.&lt;/p&gt;
        /// </summary>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postNotationCrossReferenceFactSetIdentifierListByFactSetIdentifierRequest">Request Body</param>
        /// <returns>ApiResponse of InlineResponse20076</returns>
        public ApiResponse<InlineResponse20076> PostNotationCrossReferenceFactSetIdentifierListByFactSetIdentifierWithHttpInfo(PostNotationCrossReferenceFactSetIdentifierListByFactSetIdentifierRequest postNotationCrossReferenceFactSetIdentifierListByFactSetIdentifierRequest)
        {
            // verify the required parameter 'postNotationCrossReferenceFactSetIdentifierListByFactSetIdentifierRequest' is set
            if (postNotationCrossReferenceFactSetIdentifierListByFactSetIdentifierRequest == null)
            {
                throw new FactSet.SDK.RealTimeQuotes.Client.ApiException(400, "Missing required parameter 'postNotationCrossReferenceFactSetIdentifierListByFactSetIdentifierRequest' when calling NotationApi->PostNotationCrossReferenceFactSetIdentifierListByFactSetIdentifier");
            }

            FactSet.SDK.RealTimeQuotes.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.RealTimeQuotes.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.RealTimeQuotes.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.RealTimeQuotes.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = postNotationCrossReferenceFactSetIdentifierListByFactSetIdentifierRequest;

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.RealTimeQuotes.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = PostNotationCrossReferenceFactSetIdentifierListByFactSetIdentifierResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Post<
            InlineResponse20076>("/notation/crossReference/factSetIdentifier/listByFactSetIdentifier", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostNotationCrossReferenceFactSetIdentifierListByFactSetIdentifier", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// Retrieve a list of notations for a given FactSet identifier. &lt;p&gt;Retrieve a list of notations for a given FactSet identifier, grouped by regional identifiers, if available. Listings without a regional identifier are grouped at the end of the response.&lt;/p&gt;&lt;p&gt;The notation corresponding to the security&#39;s primary listing has the attributes &lt;big&gt;&lt;tt&gt;regional.isPrimary&lt;/tt&gt;&lt;/big&gt; and &lt;big&gt;&lt;tt&gt;regional.listing.isPrimary&lt;/tt&gt;&lt;/big&gt; both set to true.The security&#39;s primary listing might not be among the results depending on the entitlement.&lt;/p&gt;&lt;p&gt;See the group description for more information about the security&#39;s primary listing.&lt;/p&gt;
        /// </summary>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postNotationCrossReferenceFactSetIdentifierListByFactSetIdentifierRequest">Request Body</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse20076</returns>
        public async System.Threading.Tasks.Task<InlineResponse20076>PostNotationCrossReferenceFactSetIdentifierListByFactSetIdentifierAsync(PostNotationCrossReferenceFactSetIdentifierListByFactSetIdentifierRequest postNotationCrossReferenceFactSetIdentifierListByFactSetIdentifierRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await PostNotationCrossReferenceFactSetIdentifierListByFactSetIdentifierWithHttpInfoAsync(postNotationCrossReferenceFactSetIdentifierListByFactSetIdentifierRequest, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve a list of notations for a given FactSet identifier. &lt;p&gt;Retrieve a list of notations for a given FactSet identifier, grouped by regional identifiers, if available. Listings without a regional identifier are grouped at the end of the response.&lt;/p&gt;&lt;p&gt;The notation corresponding to the security&#39;s primary listing has the attributes &lt;big&gt;&lt;tt&gt;regional.isPrimary&lt;/tt&gt;&lt;/big&gt; and &lt;big&gt;&lt;tt&gt;regional.listing.isPrimary&lt;/tt&gt;&lt;/big&gt; both set to true.The security&#39;s primary listing might not be among the results depending on the entitlement.&lt;/p&gt;&lt;p&gt;See the group description for more information about the security&#39;s primary listing.&lt;/p&gt;
        /// </summary>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postNotationCrossReferenceFactSetIdentifierListByFactSetIdentifierRequest">Request Body</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse20076)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20076>> PostNotationCrossReferenceFactSetIdentifierListByFactSetIdentifierWithHttpInfoAsync(PostNotationCrossReferenceFactSetIdentifierListByFactSetIdentifierRequest postNotationCrossReferenceFactSetIdentifierListByFactSetIdentifierRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'postNotationCrossReferenceFactSetIdentifierListByFactSetIdentifierRequest' is set
            if (postNotationCrossReferenceFactSetIdentifierListByFactSetIdentifierRequest == null)
            {
                throw new FactSet.SDK.RealTimeQuotes.Client.ApiException(400, "Missing required parameter 'postNotationCrossReferenceFactSetIdentifierListByFactSetIdentifierRequest' when calling NotationApi->PostNotationCrossReferenceFactSetIdentifierListByFactSetIdentifier");
            }


            FactSet.SDK.RealTimeQuotes.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.RealTimeQuotes.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.RealTimeQuotes.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.RealTimeQuotes.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = postNotationCrossReferenceFactSetIdentifierListByFactSetIdentifierRequest;

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.RealTimeQuotes.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = PostNotationCrossReferenceFactSetIdentifierListByFactSetIdentifierResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<InlineResponse20076>("/notation/crossReference/factSetIdentifier/listByFactSetIdentifier", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostNotationCrossReferenceFactSetIdentifierListByFactSetIdentifier", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve a list of FactSet identifiers for a given instrument. &lt;p&gt;Retrieve a list of FactSet identifiers for a given instrument, grouped by regional identifiers, if available. Listings without a regional identifier are grouped at the end of the response.&lt;/p&gt;&lt;p&gt;The notation corresponding to the security&#39;s primary listing has the attributes &lt;big&gt;&lt;tt&gt;regional.isPrimary&lt;/tt&gt;&lt;/big&gt; and &lt;big&gt;&lt;tt&gt;regional.listing.isPrimary&lt;/tt&gt;&lt;/big&gt; both set to true.The security&#39;s primary listing might not be among the results depending on the entitlement.&lt;/p&gt;&lt;p&gt;The result contains only notations that have at least one FactSet identifier (see &lt;big&gt;&lt;tt&gt;listing.permanentIdentifier&lt;/tt&gt;&lt;/big&gt;, &lt;big&gt;&lt;tt&gt;listing.tickerExchange&lt;/tt&gt;&lt;/big&gt;).&lt;/p&gt;&lt;p&gt;See the group description for more information about the security&#39;s primary listing.&lt;/p&gt;
        /// </summary>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postNotationCrossReferenceFactSetIdentifierListByInstrumentRequest">Request Body</param>
        /// <returns>InlineResponse20077</returns>
        public InlineResponse20077 PostNotationCrossReferenceFactSetIdentifierListByInstrument(PostNotationCrossReferenceFactSetIdentifierListByInstrumentRequest postNotationCrossReferenceFactSetIdentifierListByInstrumentRequest)
        {
            var localVarResponse = PostNotationCrossReferenceFactSetIdentifierListByInstrumentWithHttpInfo(postNotationCrossReferenceFactSetIdentifierListByInstrumentRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve a list of FactSet identifiers for a given instrument. &lt;p&gt;Retrieve a list of FactSet identifiers for a given instrument, grouped by regional identifiers, if available. Listings without a regional identifier are grouped at the end of the response.&lt;/p&gt;&lt;p&gt;The notation corresponding to the security&#39;s primary listing has the attributes &lt;big&gt;&lt;tt&gt;regional.isPrimary&lt;/tt&gt;&lt;/big&gt; and &lt;big&gt;&lt;tt&gt;regional.listing.isPrimary&lt;/tt&gt;&lt;/big&gt; both set to true.The security&#39;s primary listing might not be among the results depending on the entitlement.&lt;/p&gt;&lt;p&gt;The result contains only notations that have at least one FactSet identifier (see &lt;big&gt;&lt;tt&gt;listing.permanentIdentifier&lt;/tt&gt;&lt;/big&gt;, &lt;big&gt;&lt;tt&gt;listing.tickerExchange&lt;/tt&gt;&lt;/big&gt;).&lt;/p&gt;&lt;p&gt;See the group description for more information about the security&#39;s primary listing.&lt;/p&gt;
        /// </summary>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postNotationCrossReferenceFactSetIdentifierListByInstrumentRequest">Request Body</param>
        /// <returns>ApiResponse of InlineResponse20077</returns>
        public ApiResponse<InlineResponse20077> PostNotationCrossReferenceFactSetIdentifierListByInstrumentWithHttpInfo(PostNotationCrossReferenceFactSetIdentifierListByInstrumentRequest postNotationCrossReferenceFactSetIdentifierListByInstrumentRequest)
        {
            // verify the required parameter 'postNotationCrossReferenceFactSetIdentifierListByInstrumentRequest' is set
            if (postNotationCrossReferenceFactSetIdentifierListByInstrumentRequest == null)
            {
                throw new FactSet.SDK.RealTimeQuotes.Client.ApiException(400, "Missing required parameter 'postNotationCrossReferenceFactSetIdentifierListByInstrumentRequest' when calling NotationApi->PostNotationCrossReferenceFactSetIdentifierListByInstrument");
            }

            FactSet.SDK.RealTimeQuotes.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.RealTimeQuotes.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.RealTimeQuotes.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.RealTimeQuotes.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = postNotationCrossReferenceFactSetIdentifierListByInstrumentRequest;

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.RealTimeQuotes.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = PostNotationCrossReferenceFactSetIdentifierListByInstrumentResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Post<
            InlineResponse20077>("/notation/crossReference/factSetIdentifier/listByInstrument", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostNotationCrossReferenceFactSetIdentifierListByInstrument", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// Retrieve a list of FactSet identifiers for a given instrument. &lt;p&gt;Retrieve a list of FactSet identifiers for a given instrument, grouped by regional identifiers, if available. Listings without a regional identifier are grouped at the end of the response.&lt;/p&gt;&lt;p&gt;The notation corresponding to the security&#39;s primary listing has the attributes &lt;big&gt;&lt;tt&gt;regional.isPrimary&lt;/tt&gt;&lt;/big&gt; and &lt;big&gt;&lt;tt&gt;regional.listing.isPrimary&lt;/tt&gt;&lt;/big&gt; both set to true.The security&#39;s primary listing might not be among the results depending on the entitlement.&lt;/p&gt;&lt;p&gt;The result contains only notations that have at least one FactSet identifier (see &lt;big&gt;&lt;tt&gt;listing.permanentIdentifier&lt;/tt&gt;&lt;/big&gt;, &lt;big&gt;&lt;tt&gt;listing.tickerExchange&lt;/tt&gt;&lt;/big&gt;).&lt;/p&gt;&lt;p&gt;See the group description for more information about the security&#39;s primary listing.&lt;/p&gt;
        /// </summary>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postNotationCrossReferenceFactSetIdentifierListByInstrumentRequest">Request Body</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse20077</returns>
        public async System.Threading.Tasks.Task<InlineResponse20077>PostNotationCrossReferenceFactSetIdentifierListByInstrumentAsync(PostNotationCrossReferenceFactSetIdentifierListByInstrumentRequest postNotationCrossReferenceFactSetIdentifierListByInstrumentRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await PostNotationCrossReferenceFactSetIdentifierListByInstrumentWithHttpInfoAsync(postNotationCrossReferenceFactSetIdentifierListByInstrumentRequest, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve a list of FactSet identifiers for a given instrument. &lt;p&gt;Retrieve a list of FactSet identifiers for a given instrument, grouped by regional identifiers, if available. Listings without a regional identifier are grouped at the end of the response.&lt;/p&gt;&lt;p&gt;The notation corresponding to the security&#39;s primary listing has the attributes &lt;big&gt;&lt;tt&gt;regional.isPrimary&lt;/tt&gt;&lt;/big&gt; and &lt;big&gt;&lt;tt&gt;regional.listing.isPrimary&lt;/tt&gt;&lt;/big&gt; both set to true.The security&#39;s primary listing might not be among the results depending on the entitlement.&lt;/p&gt;&lt;p&gt;The result contains only notations that have at least one FactSet identifier (see &lt;big&gt;&lt;tt&gt;listing.permanentIdentifier&lt;/tt&gt;&lt;/big&gt;, &lt;big&gt;&lt;tt&gt;listing.tickerExchange&lt;/tt&gt;&lt;/big&gt;).&lt;/p&gt;&lt;p&gt;See the group description for more information about the security&#39;s primary listing.&lt;/p&gt;
        /// </summary>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postNotationCrossReferenceFactSetIdentifierListByInstrumentRequest">Request Body</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse20077)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20077>> PostNotationCrossReferenceFactSetIdentifierListByInstrumentWithHttpInfoAsync(PostNotationCrossReferenceFactSetIdentifierListByInstrumentRequest postNotationCrossReferenceFactSetIdentifierListByInstrumentRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'postNotationCrossReferenceFactSetIdentifierListByInstrumentRequest' is set
            if (postNotationCrossReferenceFactSetIdentifierListByInstrumentRequest == null)
            {
                throw new FactSet.SDK.RealTimeQuotes.Client.ApiException(400, "Missing required parameter 'postNotationCrossReferenceFactSetIdentifierListByInstrumentRequest' when calling NotationApi->PostNotationCrossReferenceFactSetIdentifierListByInstrument");
            }


            FactSet.SDK.RealTimeQuotes.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.RealTimeQuotes.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.RealTimeQuotes.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.RealTimeQuotes.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = postNotationCrossReferenceFactSetIdentifierListByInstrumentRequest;

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.RealTimeQuotes.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = PostNotationCrossReferenceFactSetIdentifierListByInstrumentResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<InlineResponse20077>("/notation/crossReference/factSetIdentifier/listByInstrument", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostNotationCrossReferenceFactSetIdentifierListByInstrument", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List of entitled notations. List of entitled notations.
        /// </summary>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postNotationCrossReferenceListByISINRequest">Request Body (optional)</param>
        /// <returns>InlineResponse20073</returns>
        public InlineResponse20073 PostNotationCrossReferenceListByISIN(PostNotationCrossReferenceListByISINRequest postNotationCrossReferenceListByISINRequest = default(PostNotationCrossReferenceListByISINRequest))
        {
            var localVarResponse = PostNotationCrossReferenceListByISINWithHttpInfo(postNotationCrossReferenceListByISINRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List of entitled notations. List of entitled notations.
        /// </summary>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postNotationCrossReferenceListByISINRequest">Request Body (optional)</param>
        /// <returns>ApiResponse of InlineResponse20073</returns>
        public ApiResponse<InlineResponse20073> PostNotationCrossReferenceListByISINWithHttpInfo(PostNotationCrossReferenceListByISINRequest postNotationCrossReferenceListByISINRequest = default(PostNotationCrossReferenceListByISINRequest))
        {
            FactSet.SDK.RealTimeQuotes.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.RealTimeQuotes.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.RealTimeQuotes.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.RealTimeQuotes.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = postNotationCrossReferenceListByISINRequest;

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.RealTimeQuotes.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = PostNotationCrossReferenceListByISINResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Post<
            InlineResponse20073>("/notation/crossReference/listByISIN", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostNotationCrossReferenceListByISIN", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// List of entitled notations. List of entitled notations.
        /// </summary>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postNotationCrossReferenceListByISINRequest">Request Body (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse20073</returns>
        public async System.Threading.Tasks.Task<InlineResponse20073>PostNotationCrossReferenceListByISINAsync(PostNotationCrossReferenceListByISINRequest postNotationCrossReferenceListByISINRequest = default(PostNotationCrossReferenceListByISINRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await PostNotationCrossReferenceListByISINWithHttpInfoAsync(postNotationCrossReferenceListByISINRequest, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List of entitled notations. List of entitled notations.
        /// </summary>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postNotationCrossReferenceListByISINRequest">Request Body (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse20073)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20073>> PostNotationCrossReferenceListByISINWithHttpInfoAsync(PostNotationCrossReferenceListByISINRequest postNotationCrossReferenceListByISINRequest = default(PostNotationCrossReferenceListByISINRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            FactSet.SDK.RealTimeQuotes.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.RealTimeQuotes.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.RealTimeQuotes.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.RealTimeQuotes.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = postNotationCrossReferenceListByISINRequest;

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.RealTimeQuotes.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = PostNotationCrossReferenceListByISINResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<InlineResponse20073>("/notation/crossReference/listByISIN", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostNotationCrossReferenceListByISIN", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List of entitled notations. List of entitled notations.
        /// </summary>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postNotationCrossReferenceListByInstrumentRequest">Request Body (optional)</param>
        /// <returns>InlineResponse20072</returns>
        public InlineResponse20072 PostNotationCrossReferenceListByInstrument(PostNotationCrossReferenceListByInstrumentRequest postNotationCrossReferenceListByInstrumentRequest = default(PostNotationCrossReferenceListByInstrumentRequest))
        {
            var localVarResponse = PostNotationCrossReferenceListByInstrumentWithHttpInfo(postNotationCrossReferenceListByInstrumentRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List of entitled notations. List of entitled notations.
        /// </summary>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postNotationCrossReferenceListByInstrumentRequest">Request Body (optional)</param>
        /// <returns>ApiResponse of InlineResponse20072</returns>
        public ApiResponse<InlineResponse20072> PostNotationCrossReferenceListByInstrumentWithHttpInfo(PostNotationCrossReferenceListByInstrumentRequest postNotationCrossReferenceListByInstrumentRequest = default(PostNotationCrossReferenceListByInstrumentRequest))
        {
            FactSet.SDK.RealTimeQuotes.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.RealTimeQuotes.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.RealTimeQuotes.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.RealTimeQuotes.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = postNotationCrossReferenceListByInstrumentRequest;

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.RealTimeQuotes.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = PostNotationCrossReferenceListByInstrumentResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Post<
            InlineResponse20072>("/notation/crossReference/listByInstrument", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostNotationCrossReferenceListByInstrument", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// List of entitled notations. List of entitled notations.
        /// </summary>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postNotationCrossReferenceListByInstrumentRequest">Request Body (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse20072</returns>
        public async System.Threading.Tasks.Task<InlineResponse20072>PostNotationCrossReferenceListByInstrumentAsync(PostNotationCrossReferenceListByInstrumentRequest postNotationCrossReferenceListByInstrumentRequest = default(PostNotationCrossReferenceListByInstrumentRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await PostNotationCrossReferenceListByInstrumentWithHttpInfoAsync(postNotationCrossReferenceListByInstrumentRequest, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List of entitled notations. List of entitled notations.
        /// </summary>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postNotationCrossReferenceListByInstrumentRequest">Request Body (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse20072)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20072>> PostNotationCrossReferenceListByInstrumentWithHttpInfoAsync(PostNotationCrossReferenceListByInstrumentRequest postNotationCrossReferenceListByInstrumentRequest = default(PostNotationCrossReferenceListByInstrumentRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            FactSet.SDK.RealTimeQuotes.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.RealTimeQuotes.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.RealTimeQuotes.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.RealTimeQuotes.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = postNotationCrossReferenceListByInstrumentRequest;

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.RealTimeQuotes.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = PostNotationCrossReferenceListByInstrumentResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<InlineResponse20072>("/notation/crossReference/listByInstrument", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostNotationCrossReferenceListByInstrument", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List of entitled notations. List of entitled notations. Symbols are not globally unique; therefore, a given symbol interpreted in different markets might refer to different instruments.
        /// </summary>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postNotationCrossReferenceListBySymbolRequest">Request Body (optional)</param>
        /// <returns>InlineResponse20074</returns>
        public InlineResponse20074 PostNotationCrossReferenceListBySymbol(PostNotationCrossReferenceListBySymbolRequest postNotationCrossReferenceListBySymbolRequest = default(PostNotationCrossReferenceListBySymbolRequest))
        {
            var localVarResponse = PostNotationCrossReferenceListBySymbolWithHttpInfo(postNotationCrossReferenceListBySymbolRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List of entitled notations. List of entitled notations. Symbols are not globally unique; therefore, a given symbol interpreted in different markets might refer to different instruments.
        /// </summary>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postNotationCrossReferenceListBySymbolRequest">Request Body (optional)</param>
        /// <returns>ApiResponse of InlineResponse20074</returns>
        public ApiResponse<InlineResponse20074> PostNotationCrossReferenceListBySymbolWithHttpInfo(PostNotationCrossReferenceListBySymbolRequest postNotationCrossReferenceListBySymbolRequest = default(PostNotationCrossReferenceListBySymbolRequest))
        {
            FactSet.SDK.RealTimeQuotes.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.RealTimeQuotes.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.RealTimeQuotes.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.RealTimeQuotes.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = postNotationCrossReferenceListBySymbolRequest;

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.RealTimeQuotes.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = PostNotationCrossReferenceListBySymbolResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Post<
            InlineResponse20074>("/notation/crossReference/listBySymbol", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostNotationCrossReferenceListBySymbol", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// List of entitled notations. List of entitled notations. Symbols are not globally unique; therefore, a given symbol interpreted in different markets might refer to different instruments.
        /// </summary>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postNotationCrossReferenceListBySymbolRequest">Request Body (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse20074</returns>
        public async System.Threading.Tasks.Task<InlineResponse20074>PostNotationCrossReferenceListBySymbolAsync(PostNotationCrossReferenceListBySymbolRequest postNotationCrossReferenceListBySymbolRequest = default(PostNotationCrossReferenceListBySymbolRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await PostNotationCrossReferenceListBySymbolWithHttpInfoAsync(postNotationCrossReferenceListBySymbolRequest, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List of entitled notations. List of entitled notations. Symbols are not globally unique; therefore, a given symbol interpreted in different markets might refer to different instruments.
        /// </summary>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postNotationCrossReferenceListBySymbolRequest">Request Body (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse20074)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20074>> PostNotationCrossReferenceListBySymbolWithHttpInfoAsync(PostNotationCrossReferenceListBySymbolRequest postNotationCrossReferenceListBySymbolRequest = default(PostNotationCrossReferenceListBySymbolRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            FactSet.SDK.RealTimeQuotes.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.RealTimeQuotes.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.RealTimeQuotes.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.RealTimeQuotes.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = postNotationCrossReferenceListBySymbolRequest;

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.RealTimeQuotes.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = PostNotationCrossReferenceListBySymbolResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<InlineResponse20074>("/notation/crossReference/listBySymbol", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostNotationCrossReferenceListBySymbol", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List of markets with entitled notations. List of markets with entitled notations. The list contains only markets with at least one active and entitled notation.  All identifiers used as parameters must be valid and entitled.
        /// </summary>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postNotationMarketListRequest">Request Body (optional)</param>
        /// <returns>InlineResponse20085</returns>
        public InlineResponse20085 PostNotationMarketList(PostNotationMarketListRequest postNotationMarketListRequest = default(PostNotationMarketListRequest))
        {
            var localVarResponse = PostNotationMarketListWithHttpInfo(postNotationMarketListRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List of markets with entitled notations. List of markets with entitled notations. The list contains only markets with at least one active and entitled notation.  All identifiers used as parameters must be valid and entitled.
        /// </summary>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postNotationMarketListRequest">Request Body (optional)</param>
        /// <returns>ApiResponse of InlineResponse20085</returns>
        public ApiResponse<InlineResponse20085> PostNotationMarketListWithHttpInfo(PostNotationMarketListRequest postNotationMarketListRequest = default(PostNotationMarketListRequest))
        {
            FactSet.SDK.RealTimeQuotes.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.RealTimeQuotes.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.RealTimeQuotes.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.RealTimeQuotes.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = postNotationMarketListRequest;

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.RealTimeQuotes.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = PostNotationMarketListResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Post<
            InlineResponse20085>("/notation/market/list", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostNotationMarketList", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// List of markets with entitled notations. List of markets with entitled notations. The list contains only markets with at least one active and entitled notation.  All identifiers used as parameters must be valid and entitled.
        /// </summary>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postNotationMarketListRequest">Request Body (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse20085</returns>
        public async System.Threading.Tasks.Task<InlineResponse20085>PostNotationMarketListAsync(PostNotationMarketListRequest postNotationMarketListRequest = default(PostNotationMarketListRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await PostNotationMarketListWithHttpInfoAsync(postNotationMarketListRequest, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List of markets with entitled notations. List of markets with entitled notations. The list contains only markets with at least one active and entitled notation.  All identifiers used as parameters must be valid and entitled.
        /// </summary>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postNotationMarketListRequest">Request Body (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse20085)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20085>> PostNotationMarketListWithHttpInfoAsync(PostNotationMarketListRequest postNotationMarketListRequest = default(PostNotationMarketListRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            FactSet.SDK.RealTimeQuotes.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.RealTimeQuotes.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.RealTimeQuotes.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.RealTimeQuotes.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = postNotationMarketListRequest;

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.RealTimeQuotes.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = PostNotationMarketListResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<InlineResponse20085>("/notation/market/list", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostNotationMarketList", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Text-based search for notations. Text-based search for notations in selected identifier and name attributes according to a tolerant full-text match algorithm. The results satisfy all selected filters; sorting by various attributes is possible. If more than one notation of an instrument matches, only the notation with the best market priority (according to the parameter &#x60;market.priority&#x60;) or, in the absence of market priorities, only the notation with the highest trading volume, averaged over one month, is considered.       All identifiers used as parameters must be valid and entitled.
        /// </summary>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postNotationSearchByTextRequest">Request Body</param>
        /// <returns>InlineResponse20099</returns>
        public InlineResponse20099 PostNotationSearchByText(PostNotationSearchByTextRequest postNotationSearchByTextRequest)
        {
            var localVarResponse = PostNotationSearchByTextWithHttpInfo(postNotationSearchByTextRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Text-based search for notations. Text-based search for notations in selected identifier and name attributes according to a tolerant full-text match algorithm. The results satisfy all selected filters; sorting by various attributes is possible. If more than one notation of an instrument matches, only the notation with the best market priority (according to the parameter &#x60;market.priority&#x60;) or, in the absence of market priorities, only the notation with the highest trading volume, averaged over one month, is considered.       All identifiers used as parameters must be valid and entitled.
        /// </summary>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postNotationSearchByTextRequest">Request Body</param>
        /// <returns>ApiResponse of InlineResponse20099</returns>
        public ApiResponse<InlineResponse20099> PostNotationSearchByTextWithHttpInfo(PostNotationSearchByTextRequest postNotationSearchByTextRequest)
        {
            // verify the required parameter 'postNotationSearchByTextRequest' is set
            if (postNotationSearchByTextRequest == null)
            {
                throw new FactSet.SDK.RealTimeQuotes.Client.ApiException(400, "Missing required parameter 'postNotationSearchByTextRequest' when calling NotationApi->PostNotationSearchByText");
            }

            FactSet.SDK.RealTimeQuotes.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.RealTimeQuotes.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.RealTimeQuotes.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.RealTimeQuotes.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = postNotationSearchByTextRequest;

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.RealTimeQuotes.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = PostNotationSearchByTextResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Post<
            InlineResponse20099>("/notation/searchByText", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostNotationSearchByText", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// Text-based search for notations. Text-based search for notations in selected identifier and name attributes according to a tolerant full-text match algorithm. The results satisfy all selected filters; sorting by various attributes is possible. If more than one notation of an instrument matches, only the notation with the best market priority (according to the parameter &#x60;market.priority&#x60;) or, in the absence of market priorities, only the notation with the highest trading volume, averaged over one month, is considered.       All identifiers used as parameters must be valid and entitled.
        /// </summary>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postNotationSearchByTextRequest">Request Body</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse20099</returns>
        public async System.Threading.Tasks.Task<InlineResponse20099>PostNotationSearchByTextAsync(PostNotationSearchByTextRequest postNotationSearchByTextRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await PostNotationSearchByTextWithHttpInfoAsync(postNotationSearchByTextRequest, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Text-based search for notations. Text-based search for notations in selected identifier and name attributes according to a tolerant full-text match algorithm. The results satisfy all selected filters; sorting by various attributes is possible. If more than one notation of an instrument matches, only the notation with the best market priority (according to the parameter &#x60;market.priority&#x60;) or, in the absence of market priorities, only the notation with the highest trading volume, averaged over one month, is considered.       All identifiers used as parameters must be valid and entitled.
        /// </summary>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postNotationSearchByTextRequest">Request Body</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse20099)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20099>> PostNotationSearchByTextWithHttpInfoAsync(PostNotationSearchByTextRequest postNotationSearchByTextRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'postNotationSearchByTextRequest' is set
            if (postNotationSearchByTextRequest == null)
            {
                throw new FactSet.SDK.RealTimeQuotes.Client.ApiException(400, "Missing required parameter 'postNotationSearchByTextRequest' when calling NotationApi->PostNotationSearchByText");
            }


            FactSet.SDK.RealTimeQuotes.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.RealTimeQuotes.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.RealTimeQuotes.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.RealTimeQuotes.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = postNotationSearchByTextRequest;

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.RealTimeQuotes.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = PostNotationSearchByTextResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<InlineResponse20099>("/notation/searchByText", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostNotationSearchByText", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List of notations belonging to a notation-level selection list. List of notations belonging to a notation-level selection list.
        /// </summary>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postNotationSelectionListMembersListRequest">Request Body (optional)</param>
        /// <returns>InlineResponse20087</returns>
        public InlineResponse20087 PostNotationSelectionListMembersList(PostNotationSelectionListMembersListRequest postNotationSelectionListMembersListRequest = default(PostNotationSelectionListMembersListRequest))
        {
            var localVarResponse = PostNotationSelectionListMembersListWithHttpInfo(postNotationSelectionListMembersListRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List of notations belonging to a notation-level selection list. List of notations belonging to a notation-level selection list.
        /// </summary>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postNotationSelectionListMembersListRequest">Request Body (optional)</param>
        /// <returns>ApiResponse of InlineResponse20087</returns>
        public ApiResponse<InlineResponse20087> PostNotationSelectionListMembersListWithHttpInfo(PostNotationSelectionListMembersListRequest postNotationSelectionListMembersListRequest = default(PostNotationSelectionListMembersListRequest))
        {
            FactSet.SDK.RealTimeQuotes.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.RealTimeQuotes.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.RealTimeQuotes.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.RealTimeQuotes.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = postNotationSelectionListMembersListRequest;

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.RealTimeQuotes.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = PostNotationSelectionListMembersListResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Post<
            InlineResponse20087>("/notation/selectionList/members/list", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostNotationSelectionListMembersList", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// List of notations belonging to a notation-level selection list. List of notations belonging to a notation-level selection list.
        /// </summary>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postNotationSelectionListMembersListRequest">Request Body (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse20087</returns>
        public async System.Threading.Tasks.Task<InlineResponse20087>PostNotationSelectionListMembersListAsync(PostNotationSelectionListMembersListRequest postNotationSelectionListMembersListRequest = default(PostNotationSelectionListMembersListRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await PostNotationSelectionListMembersListWithHttpInfoAsync(postNotationSelectionListMembersListRequest, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List of notations belonging to a notation-level selection list. List of notations belonging to a notation-level selection list.
        /// </summary>
        /// <exception cref="FactSet.SDK.RealTimeQuotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postNotationSelectionListMembersListRequest">Request Body (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse20087)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20087>> PostNotationSelectionListMembersListWithHttpInfoAsync(PostNotationSelectionListMembersListRequest postNotationSelectionListMembersListRequest = default(PostNotationSelectionListMembersListRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            FactSet.SDK.RealTimeQuotes.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.RealTimeQuotes.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.RealTimeQuotes.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.RealTimeQuotes.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = postNotationSelectionListMembersListRequest;

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.RealTimeQuotes.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = PostNotationSelectionListMembersListResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<InlineResponse20087>("/notation/selectionList/members/list", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostNotationSelectionListMembersList", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
