/*
 * EMS API
 *
 * Allow clients to trade orders.
 *
 * The version of the OpenAPI document: 0.2.0
 * Contact: api@factset.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = FactSet.SDK.FactSetTrading.Client.OpenAPIDateConverter;

namespace FactSet.SDK.FactSetTrading.Model
{
    /// <summary>
    /// Instrument
    /// </summary>
    [DataContract(Name = "Instrument")]
    public partial class Instrument : IEquatable<Instrument>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Instrument" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Instrument() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Instrument" /> class.
        /// </summary>
        /// <param name="symbol">Symbol (required).</param>
        /// <param name="securityType">Security Type.</param>
        /// <param name="cfiCode">Cfi Code.</param>
        /// <param name="securityExchange">Security exchange.</param>
        /// <param name="issuer">Issuer.</param>
        /// <param name="securityDescription">Security Description.</param>
        /// <param name="maturityMonthYear">Maturity month year.</param>
        /// <param name="maturityDay">Maturity day.</param>
        public Instrument(string symbol,string securityType = default(string), string cfiCode = default(string), string securityExchange = default(string), string issuer = default(string), string securityDescription = default(string), string maturityMonthYear = default(string), string maturityDay = default(string))
        {
            // to ensure "symbol" is required (not null)
            if (symbol == null) {
                throw new ArgumentNullException("symbol is a required property for Instrument and cannot be null");
            }
            this.Symbol = symbol;
            this.SecurityType = securityType;
            this.CfiCode = cfiCode;
            this.SecurityExchange = securityExchange;
            this.Issuer = issuer;
            this.SecurityDescription = securityDescription;
            this.MaturityMonthYear = maturityMonthYear;
            this.MaturityDay = maturityDay;
        }

        /// <summary>
        /// Symbol
        /// </summary>
        /// <value>Symbol</value>
        [DataMember(Name = "symbol", IsRequired = true, EmitDefaultValue = false)]
        public string Symbol { get; set; }

        /// <summary>
        /// Security Type
        /// </summary>
        /// <value>Security Type</value>
        [DataMember(Name = "securityType", EmitDefaultValue = true)]
        public string SecurityType { get; set; }

        /// <summary>
        /// Cfi Code
        /// </summary>
        /// <value>Cfi Code</value>
        [DataMember(Name = "cfiCode", EmitDefaultValue = true)]
        public string CfiCode { get; set; }

        /// <summary>
        /// Security exchange
        /// </summary>
        /// <value>Security exchange</value>
        [DataMember(Name = "securityExchange", EmitDefaultValue = true)]
        public string SecurityExchange { get; set; }

        /// <summary>
        /// Issuer
        /// </summary>
        /// <value>Issuer</value>
        [DataMember(Name = "issuer", EmitDefaultValue = true)]
        public string Issuer { get; set; }

        /// <summary>
        /// Security Description
        /// </summary>
        /// <value>Security Description</value>
        [DataMember(Name = "securityDescription", EmitDefaultValue = true)]
        public string SecurityDescription { get; set; }

        /// <summary>
        /// Maturity month year
        /// </summary>
        /// <value>Maturity month year</value>
        [DataMember(Name = "maturityMonthYear", EmitDefaultValue = true)]
        public string MaturityMonthYear { get; set; }

        /// <summary>
        /// Maturity day
        /// </summary>
        /// <value>Maturity day</value>
        [DataMember(Name = "maturityDay", EmitDefaultValue = true)]
        public string MaturityDay { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Instrument {\n");
            sb.Append("  Symbol: ").Append(Symbol).Append("\n");
            sb.Append("  SecurityType: ").Append(SecurityType).Append("\n");
            sb.Append("  CfiCode: ").Append(CfiCode).Append("\n");
            sb.Append("  SecurityExchange: ").Append(SecurityExchange).Append("\n");
            sb.Append("  Issuer: ").Append(Issuer).Append("\n");
            sb.Append("  SecurityDescription: ").Append(SecurityDescription).Append("\n");
            sb.Append("  MaturityMonthYear: ").Append(MaturityMonthYear).Append("\n");
            sb.Append("  MaturityDay: ").Append(MaturityDay).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Instrument);
        }

        /// <summary>
        /// Returns true if Instrument instances are equal
        /// </summary>
        /// <param name="input">Instance of Instrument to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Instrument input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Symbol == input.Symbol ||
                    (this.Symbol != null &&
                    this.Symbol.Equals(input.Symbol))
                ) && 
                (
                    this.SecurityType == input.SecurityType ||
                    (this.SecurityType != null &&
                    this.SecurityType.Equals(input.SecurityType))
                ) && 
                (
                    this.CfiCode == input.CfiCode ||
                    (this.CfiCode != null &&
                    this.CfiCode.Equals(input.CfiCode))
                ) && 
                (
                    this.SecurityExchange == input.SecurityExchange ||
                    (this.SecurityExchange != null &&
                    this.SecurityExchange.Equals(input.SecurityExchange))
                ) && 
                (
                    this.Issuer == input.Issuer ||
                    (this.Issuer != null &&
                    this.Issuer.Equals(input.Issuer))
                ) && 
                (
                    this.SecurityDescription == input.SecurityDescription ||
                    (this.SecurityDescription != null &&
                    this.SecurityDescription.Equals(input.SecurityDescription))
                ) && 
                (
                    this.MaturityMonthYear == input.MaturityMonthYear ||
                    (this.MaturityMonthYear != null &&
                    this.MaturityMonthYear.Equals(input.MaturityMonthYear))
                ) && 
                (
                    this.MaturityDay == input.MaturityDay ||
                    (this.MaturityDay != null &&
                    this.MaturityDay.Equals(input.MaturityDay))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Symbol != null)
                {
                    hashCode = (hashCode * 59) + this.Symbol.GetHashCode();
                }
                if (this.SecurityType != null)
                {
                    hashCode = (hashCode * 59) + this.SecurityType.GetHashCode();
                }
                if (this.CfiCode != null)
                {
                    hashCode = (hashCode * 59) + this.CfiCode.GetHashCode();
                }
                if (this.SecurityExchange != null)
                {
                    hashCode = (hashCode * 59) + this.SecurityExchange.GetHashCode();
                }
                if (this.Issuer != null)
                {
                    hashCode = (hashCode * 59) + this.Issuer.GetHashCode();
                }
                if (this.SecurityDescription != null)
                {
                    hashCode = (hashCode * 59) + this.SecurityDescription.GetHashCode();
                }
                if (this.MaturityMonthYear != null)
                {
                    hashCode = (hashCode * 59) + this.MaturityMonthYear.GetHashCode();
                }
                if (this.MaturityDay != null)
                {
                    hashCode = (hashCode * 59) + this.MaturityDay.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
