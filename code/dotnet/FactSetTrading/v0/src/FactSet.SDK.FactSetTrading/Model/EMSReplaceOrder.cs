/*
 * EMS API
 *
 * Allow clients to trade orders.
 *
 * The version of the OpenAPI document: 0.2.0
 * Contact: api@factset.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = FactSet.SDK.FactSetTrading.Client.OpenAPIDateConverter;

namespace FactSet.SDK.FactSetTrading.Model
{
    /// <summary>
    /// EMSReplaceOrder
    /// </summary>
    [DataContract(Name = "EMSReplaceOrder")]
    public partial class EMSReplaceOrder : IEquatable<EMSReplaceOrder>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EMSReplaceOrder" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected EMSReplaceOrder() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="EMSReplaceOrder" /> class.
        /// </summary>
        /// <param name="originalOrderId">originalOrderId (required).</param>
        /// <param name="order">order (required).</param>
        public EMSReplaceOrder(string originalOrderId, EMSOrder order)
        {
            // to ensure "originalOrderId" is required (not null)
            if (originalOrderId == null) {
                throw new ArgumentNullException("originalOrderId is a required property for EMSReplaceOrder and cannot be null");
            }
            this.OriginalOrderId = originalOrderId;
            // to ensure "order" is required (not null)
            if (order == null) {
                throw new ArgumentNullException("order is a required property for EMSReplaceOrder and cannot be null");
            }
            this.Order = order;
        }

        /// <summary>
        /// Gets or Sets OriginalOrderId
        /// </summary>
        [DataMember(Name = "originalOrderId", IsRequired = true, EmitDefaultValue = false)]
        public string OriginalOrderId { get; set; }

        /// <summary>
        /// Gets or Sets Order
        /// </summary>
        [DataMember(Name = "order", IsRequired = true, EmitDefaultValue = false)]
        public EMSOrder Order { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class EMSReplaceOrder {\n");
            sb.Append("  OriginalOrderId: ").Append(OriginalOrderId).Append("\n");
            sb.Append("  Order: ").Append(Order).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as EMSReplaceOrder);
        }

        /// <summary>
        /// Returns true if EMSReplaceOrder instances are equal
        /// </summary>
        /// <param name="input">Instance of EMSReplaceOrder to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(EMSReplaceOrder input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.OriginalOrderId == input.OriginalOrderId ||
                    (this.OriginalOrderId != null &&
                    this.OriginalOrderId.Equals(input.OriginalOrderId))
                ) && 
                (
                    this.Order == input.Order ||
                    (this.Order != null &&
                    this.Order.Equals(input.Order))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.OriginalOrderId != null)
                {
                    hashCode = (hashCode * 59) + this.OriginalOrderId.GetHashCode();
                }
                if (this.Order != null)
                {
                    hashCode = (hashCode * 59) + this.Order.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
