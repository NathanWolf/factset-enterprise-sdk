/*
 * EMS API
 *
 * Allow clients to trade orders.
 *
 * The version of the OpenAPI document: 1
 * Contact: analytics.api.support@factset.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = FactSet.SDK.FactSetTrading.Client.OpenAPIDateConverter;

namespace FactSet.SDK.FactSetTrading.Model
{
    /// <summary>
    /// EMSOrder
    /// </summary>
    [DataContract(Name = "EMSOrder")]
    public partial class EMSOrder : IEquatable<EMSOrder>, IValidatableObject
    {
        /// <summary>
        /// Side
        /// </summary>
        /// <value>Side</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum SideEnum
        {
            /// <summary>
            /// Enum Buy for value: buy
            /// </summary>
            [EnumMember(Value = "buy")]
            Buy = 1,

            /// <summary>
            /// Enum Sell for value: sell
            /// </summary>
            [EnumMember(Value = "sell")]
            Sell = 2,

            /// <summary>
            /// Enum SellShort for value: sell_short
            /// </summary>
            [EnumMember(Value = "sell_short")]
            SellShort = 3,

            /// <summary>
            /// Enum SellShortExempt for value: sell_short_exempt
            /// </summary>
            [EnumMember(Value = "sell_short_exempt")]
            SellShortExempt = 4

        }


        /// <summary>
        /// Side
        /// </summary>
        /// <value>Side</value>
        [DataMember(Name = "side", IsRequired = true, EmitDefaultValue = false)]
        public SideEnum Side { get; set; }
        /// <summary>
        /// Type of the order
        /// </summary>
        /// <value>Type of the order</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum OrderTypeEnum
        {
            /// <summary>
            /// Enum Market for value: market
            /// </summary>
            [EnumMember(Value = "market")]
            Market = 1,

            /// <summary>
            /// Enum Limit for value: limit
            /// </summary>
            [EnumMember(Value = "limit")]
            Limit = 2,

            /// <summary>
            /// Enum Stop for value: stop
            /// </summary>
            [EnumMember(Value = "stop")]
            Stop = 3,

            /// <summary>
            /// Enum StopLimit for value: stop_limit
            /// </summary>
            [EnumMember(Value = "stop_limit")]
            StopLimit = 4,

            /// <summary>
            /// Enum MarketOnClose for value: market_on_close
            /// </summary>
            [EnumMember(Value = "market_on_close")]
            MarketOnClose = 5,

            /// <summary>
            /// Enum LimitOrBetter for value: limit_or_better
            /// </summary>
            [EnumMember(Value = "limit_or_better")]
            LimitOrBetter = 6

        }


        /// <summary>
        /// Type of the order
        /// </summary>
        /// <value>Type of the order</value>
        [DataMember(Name = "orderType", IsRequired = true, EmitDefaultValue = false)]
        public OrderTypeEnum OrderType { get; set; }
        /// <summary>
        /// Handling instructions
        /// </summary>
        /// <value>Handling instructions</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum HandlingInstructionsEnum
        {
            /// <summary>
            /// Enum AutoOrdPvt for value: auto_ord_pvt
            /// </summary>
            [EnumMember(Value = "auto_ord_pvt")]
            AutoOrdPvt = 1,

            /// <summary>
            /// Enum AutoOrdPub for value: auto_ord_pub
            /// </summary>
            [EnumMember(Value = "auto_ord_pub")]
            AutoOrdPub = 2,

            /// <summary>
            /// Enum BestExecution for value: best_execution
            /// </summary>
            [EnumMember(Value = "best_execution")]
            BestExecution = 3

        }


        /// <summary>
        /// Handling instructions
        /// </summary>
        /// <value>Handling instructions</value>
        [DataMember(Name = "handlingInstructions", EmitDefaultValue = false)]
        public HandlingInstructionsEnum? HandlingInstructions { get; set; }
        /// <summary>
        /// Execution instructions
        /// </summary>
        /// <value>Execution instructions</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ExecutionInstructionsEnum
        {
            /// <summary>
            /// Enum NotHeld for value: not_held
            /// </summary>
            [EnumMember(Value = "not_held")]
            NotHeld = 1,

            /// <summary>
            /// Enum Work for value: work
            /// </summary>
            [EnumMember(Value = "work")]
            Work = 2,

            /// <summary>
            /// Enum GoAlong for value: go_along
            /// </summary>
            [EnumMember(Value = "go_along")]
            GoAlong = 3,

            /// <summary>
            /// Enum OverTheDay for value: over_the_day
            /// </summary>
            [EnumMember(Value = "over_the_day")]
            OverTheDay = 4,

            /// <summary>
            /// Enum Held for value: held
            /// </summary>
            [EnumMember(Value = "held")]
            Held = 5,

            /// <summary>
            /// Enum ParticipateDontInitiate for value: participate_dont_initiate
            /// </summary>
            [EnumMember(Value = "participate_dont_initiate")]
            ParticipateDontInitiate = 6,

            /// <summary>
            /// Enum StrictScale for value: strict_scale
            /// </summary>
            [EnumMember(Value = "strict_scale")]
            StrictScale = 7,

            /// <summary>
            /// Enum TryToScale for value: try_to_scale
            /// </summary>
            [EnumMember(Value = "try_to_scale")]
            TryToScale = 8,

            /// <summary>
            /// Enum StayOnBidside for value: stay_on_bidside
            /// </summary>
            [EnumMember(Value = "stay_on_bidside")]
            StayOnBidside = 9,

            /// <summary>
            /// Enum StayOnOfferside for value: stay_on_offerside
            /// </summary>
            [EnumMember(Value = "stay_on_offerside")]
            StayOnOfferside = 10,

            /// <summary>
            /// Enum NoCross for value: no_cross
            /// </summary>
            [EnumMember(Value = "no_cross")]
            NoCross = 11,

            /// <summary>
            /// Enum OkToCross for value: ok_to_cross
            /// </summary>
            [EnumMember(Value = "ok_to_cross")]
            OkToCross = 12,

            /// <summary>
            /// Enum CallFirst for value: call_first
            /// </summary>
            [EnumMember(Value = "call_first")]
            CallFirst = 13,

            /// <summary>
            /// Enum PercentOfVolume for value: percent_of_volume
            /// </summary>
            [EnumMember(Value = "percent_of_volume")]
            PercentOfVolume = 14,

            /// <summary>
            /// Enum DoNotIncrease for value: do_not_increase
            /// </summary>
            [EnumMember(Value = "do_not_increase")]
            DoNotIncrease = 15,

            /// <summary>
            /// Enum DoNotReduce for value: do_not_reduce
            /// </summary>
            [EnumMember(Value = "do_not_reduce")]
            DoNotReduce = 16,

            /// <summary>
            /// Enum AllOrNone for value: all_or_none
            /// </summary>
            [EnumMember(Value = "all_or_none")]
            AllOrNone = 17,

            /// <summary>
            /// Enum ReinstateOnSystemFailure for value: reinstate_on_system_failure
            /// </summary>
            [EnumMember(Value = "reinstate_on_system_failure")]
            ReinstateOnSystemFailure = 18,

            /// <summary>
            /// Enum InstitutionsOnly for value: institutions_only
            /// </summary>
            [EnumMember(Value = "institutions_only")]
            InstitutionsOnly = 19,

            /// <summary>
            /// Enum ReinstateOnTradingHalt for value: reinstate_on_trading_halt
            /// </summary>
            [EnumMember(Value = "reinstate_on_trading_halt")]
            ReinstateOnTradingHalt = 20,

            /// <summary>
            /// Enum CancelOnTradingHalt for value: cancel_on_trading_halt
            /// </summary>
            [EnumMember(Value = "cancel_on_trading_halt")]
            CancelOnTradingHalt = 21,

            /// <summary>
            /// Enum LastPeg for value: last_peg
            /// </summary>
            [EnumMember(Value = "last_peg")]
            LastPeg = 22,

            /// <summary>
            /// Enum MidPricePeg for value: mid_price_peg
            /// </summary>
            [EnumMember(Value = "mid_price_peg")]
            MidPricePeg = 23,

            /// <summary>
            /// Enum NonNegotiable for value: non_negotiable
            /// </summary>
            [EnumMember(Value = "non_negotiable")]
            NonNegotiable = 24,

            /// <summary>
            /// Enum OpeningPeg for value: opening_peg
            /// </summary>
            [EnumMember(Value = "opening_peg")]
            OpeningPeg = 25,

            /// <summary>
            /// Enum MarketPeg for value: market_peg
            /// </summary>
            [EnumMember(Value = "market_peg")]
            MarketPeg = 26,

            /// <summary>
            /// Enum CancelOnSystemFailure for value: cancel_on_system_failure
            /// </summary>
            [EnumMember(Value = "cancel_on_system_failure")]
            CancelOnSystemFailure = 27,

            /// <summary>
            /// Enum PrimaryPeg for value: primary_peg
            /// </summary>
            [EnumMember(Value = "primary_peg")]
            PrimaryPeg = 28,

            /// <summary>
            /// Enum Suspend for value: suspend
            /// </summary>
            [EnumMember(Value = "suspend")]
            Suspend = 29,

            /// <summary>
            /// Enum FixedPegToLocalBestBid for value: fixed_peg_to_local_best_bid
            /// </summary>
            [EnumMember(Value = "fixed_peg_to_local_best_bid")]
            FixedPegToLocalBestBid = 30,

            /// <summary>
            /// Enum CustomerDisplayInstruction for value: customer_display_instruction
            /// </summary>
            [EnumMember(Value = "customer_display_instruction")]
            CustomerDisplayInstruction = 31,

            /// <summary>
            /// Enum Netting for value: netting
            /// </summary>
            [EnumMember(Value = "netting")]
            Netting = 32,

            /// <summary>
            /// Enum PegToVwap for value: peg_to_vwap
            /// </summary>
            [EnumMember(Value = "peg_to_vwap")]
            PegToVwap = 33,

            /// <summary>
            /// Enum TradeAlong for value: trade_along
            /// </summary>
            [EnumMember(Value = "trade_along")]
            TradeAlong = 34,

            /// <summary>
            /// Enum TryToStop for value: try_to_stop
            /// </summary>
            [EnumMember(Value = "try_to_stop")]
            TryToStop = 35,

            /// <summary>
            /// Enum CancelIfNotBest for value: cancel_if_not_best
            /// </summary>
            [EnumMember(Value = "cancel_if_not_best")]
            CancelIfNotBest = 36,

            /// <summary>
            /// Enum TrailingStopPeg for value: trailing_stop_peg
            /// </summary>
            [EnumMember(Value = "trailing_stop_peg")]
            TrailingStopPeg = 37,

            /// <summary>
            /// Enum StrictLimit for value: strict_limit
            /// </summary>
            [EnumMember(Value = "strict_limit")]
            StrictLimit = 38,

            /// <summary>
            /// Enum IgnorePriceValidityChecks for value: ignore_price_validity_checks
            /// </summary>
            [EnumMember(Value = "ignore_price_validity_checks")]
            IgnorePriceValidityChecks = 39,

            /// <summary>
            /// Enum PegToLimitPrice for value: peg_to_limit_price
            /// </summary>
            [EnumMember(Value = "peg_to_limit_price")]
            PegToLimitPrice = 40,

            /// <summary>
            /// Enum WorkToTargetStrategy for value: work_to_target_strategy
            /// </summary>
            [EnumMember(Value = "work_to_target_strategy")]
            WorkToTargetStrategy = 41,

            /// <summary>
            /// Enum IntermarketSweep for value: intermarket_sweep
            /// </summary>
            [EnumMember(Value = "intermarket_sweep")]
            IntermarketSweep = 42,

            /// <summary>
            /// Enum ExternalRoutingAllowed for value: external_routing_allowed
            /// </summary>
            [EnumMember(Value = "external_routing_allowed")]
            ExternalRoutingAllowed = 43,

            /// <summary>
            /// Enum ExternalRoutingNotAllowed for value: external_routing_not_allowed
            /// </summary>
            [EnumMember(Value = "external_routing_not_allowed")]
            ExternalRoutingNotAllowed = 44,

            /// <summary>
            /// Enum ImbalanceOnly for value: imbalance_only
            /// </summary>
            [EnumMember(Value = "imbalance_only")]
            ImbalanceOnly = 45,

            /// <summary>
            /// Enum SingleExecutionRequestedForBlockTrade for value: single_execution_requested_for_block_trade
            /// </summary>
            [EnumMember(Value = "single_execution_requested_for_block_trade")]
            SingleExecutionRequestedForBlockTrade = 46,

            /// <summary>
            /// Enum BestExecution for value: best_execution
            /// </summary>
            [EnumMember(Value = "best_execution")]
            BestExecution = 47

        }


        /// <summary>
        /// Execution instructions
        /// </summary>
        /// <value>Execution instructions</value>
        [DataMember(Name = "executionInstructions", EmitDefaultValue = false)]
        public ExecutionInstructionsEnum? ExecutionInstructions { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="EMSOrder" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected EMSOrder() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="EMSOrder" /> class.
        /// </summary>
        /// <param name="orderId">Unique id for the order.</param>
        /// <param name="instrument">instrument (required).</param>
        /// <param name="side">Side (required).</param>
        /// <param name="orderType">Type of the order (required).</param>
        /// <param name="orderQuantity">Order quantity.</param>
        /// <param name="price">Order Price.</param>
        /// <param name="stopPrice">Stop Price.</param>
        /// <param name="strikePrice">Strike Price.</param>
        /// <param name="currency">Currency.</param>
        /// <param name="isCovered">Currency.</param>
        /// <param name="maxShow">Max Show.</param>
        /// <param name="maxFloor">Max Floor.</param>
        /// <param name="prevClosePrice">Previous close price.</param>
        /// <param name="settlementType">Settlement type.</param>
        /// <param name="settlementDate">Settlement date in YYYYMMDD format.</param>
        /// <param name="handlingInstructions">Handling instructions.</param>
        /// <param name="executionInstructions">Execution instructions.</param>
        /// <param name="locateRequired">Locate Required.</param>
        /// <param name="effectiveTime">Effective time in YYYYMMDD-HH:MM:SS format expressed in UTC.</param>
        /// <param name="account">Account.</param>
        /// <param name="timeInForce">timeInForce.</param>
        /// <param name="userDefinedFields">User defined fields.</param>
        public EMSOrder(Instrument instrument, SideEnum side, OrderTypeEnum orderType,string orderId = default(string), double orderQuantity = default(double), double price = default(double), double stopPrice = default(double), double strikePrice = default(double), string currency = default(string), bool isCovered = default(bool), double maxShow = default(double), double maxFloor = default(double), double prevClosePrice = default(double), string settlementType = default(string), string settlementDate = default(string), HandlingInstructionsEnum? handlingInstructions = default(HandlingInstructionsEnum?), ExecutionInstructionsEnum? executionInstructions = default(ExecutionInstructionsEnum?), bool locateRequired = default(bool), string effectiveTime = default(string), string account = default(string), TimeInForce timeInForce = default(TimeInForce), Dictionary<string, string> userDefinedFields = default(Dictionary<string, string>))
        {
            // to ensure "instrument" is required (not null)
            if (instrument == null) {
                throw new ArgumentNullException("instrument is a required property for EMSOrder and cannot be null");
            }
            this.Instrument = instrument;
            this.Side = side;
            this.OrderType = orderType;
            this.OrderId = orderId;
            this.OrderQuantity = orderQuantity;
            this.Price = price;
            this.StopPrice = stopPrice;
            this.StrikePrice = strikePrice;
            this.Currency = currency;
            this.IsCovered = isCovered;
            this.MaxShow = maxShow;
            this.MaxFloor = maxFloor;
            this.PrevClosePrice = prevClosePrice;
            this.SettlementType = settlementType;
            this.SettlementDate = settlementDate;
            this.HandlingInstructions = handlingInstructions;
            this.ExecutionInstructions = executionInstructions;
            this.LocateRequired = locateRequired;
            this.EffectiveTime = effectiveTime;
            this.Account = account;
            this.TimeInForce = timeInForce;
            this.UserDefinedFields = userDefinedFields;
        }

        /// <summary>
        /// Unique id for the order
        /// </summary>
        /// <value>Unique id for the order</value>
        [DataMember(Name = "orderId", EmitDefaultValue = false)]
        public string OrderId { get; set; }

        /// <summary>
        /// Gets or Sets Instrument
        /// </summary>
        [DataMember(Name = "instrument", IsRequired = true, EmitDefaultValue = false)]
        public Instrument Instrument { get; set; }

        /// <summary>
        /// Order quantity
        /// </summary>
        /// <value>Order quantity</value>
        [DataMember(Name = "orderQuantity", EmitDefaultValue = false)]
        public double OrderQuantity { get; set; }

        /// <summary>
        /// Order Price
        /// </summary>
        /// <value>Order Price</value>
        [DataMember(Name = "price", EmitDefaultValue = false)]
        public double Price { get; set; }

        /// <summary>
        /// Stop Price
        /// </summary>
        /// <value>Stop Price</value>
        [DataMember(Name = "stopPrice", EmitDefaultValue = false)]
        public double StopPrice { get; set; }

        /// <summary>
        /// Strike Price
        /// </summary>
        /// <value>Strike Price</value>
        [DataMember(Name = "strikePrice", EmitDefaultValue = false)]
        public double StrikePrice { get; set; }

        /// <summary>
        /// Currency
        /// </summary>
        /// <value>Currency</value>
        [DataMember(Name = "currency", EmitDefaultValue = false)]
        public string Currency { get; set; }

        /// <summary>
        /// Currency
        /// </summary>
        /// <value>Currency</value>
        [DataMember(Name = "isCovered", EmitDefaultValue = true)]
        public bool IsCovered { get; set; }

        /// <summary>
        /// Max Show
        /// </summary>
        /// <value>Max Show</value>
        [DataMember(Name = "maxShow", EmitDefaultValue = false)]
        public double MaxShow { get; set; }

        /// <summary>
        /// Max Floor
        /// </summary>
        /// <value>Max Floor</value>
        [DataMember(Name = "maxFloor", EmitDefaultValue = false)]
        public double MaxFloor { get; set; }

        /// <summary>
        /// Previous close price
        /// </summary>
        /// <value>Previous close price</value>
        [DataMember(Name = "prevClosePrice", EmitDefaultValue = false)]
        public double PrevClosePrice { get; set; }

        /// <summary>
        /// Settlement type
        /// </summary>
        /// <value>Settlement type</value>
        [DataMember(Name = "settlementType", EmitDefaultValue = false)]
        public string SettlementType { get; set; }

        /// <summary>
        /// Settlement date in YYYYMMDD format
        /// </summary>
        /// <value>Settlement date in YYYYMMDD format</value>
        [DataMember(Name = "settlementDate", EmitDefaultValue = false)]
        public string SettlementDate { get; set; }

        /// <summary>
        /// Locate Required
        /// </summary>
        /// <value>Locate Required</value>
        [DataMember(Name = "locateRequired", EmitDefaultValue = true)]
        public bool LocateRequired { get; set; }

        /// <summary>
        /// Effective time in YYYYMMDD-HH:MM:SS format expressed in UTC
        /// </summary>
        /// <value>Effective time in YYYYMMDD-HH:MM:SS format expressed in UTC</value>
        [DataMember(Name = "effectiveTime", EmitDefaultValue = false)]
        public string EffectiveTime { get; set; }

        /// <summary>
        /// Account
        /// </summary>
        /// <value>Account</value>
        [DataMember(Name = "account", EmitDefaultValue = false)]
        public string Account { get; set; }

        /// <summary>
        /// Gets or Sets TimeInForce
        /// </summary>
        [DataMember(Name = "timeInForce", EmitDefaultValue = false)]
        public TimeInForce TimeInForce { get; set; }

        /// <summary>
        /// User defined fields
        /// </summary>
        /// <value>User defined fields</value>
        [DataMember(Name = "userDefinedFields", EmitDefaultValue = false)]
        public Dictionary<string, string> UserDefinedFields { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class EMSOrder {\n");
            sb.Append("  OrderId: ").Append(OrderId).Append("\n");
            sb.Append("  Instrument: ").Append(Instrument).Append("\n");
            sb.Append("  Side: ").Append(Side).Append("\n");
            sb.Append("  OrderType: ").Append(OrderType).Append("\n");
            sb.Append("  OrderQuantity: ").Append(OrderQuantity).Append("\n");
            sb.Append("  Price: ").Append(Price).Append("\n");
            sb.Append("  StopPrice: ").Append(StopPrice).Append("\n");
            sb.Append("  StrikePrice: ").Append(StrikePrice).Append("\n");
            sb.Append("  Currency: ").Append(Currency).Append("\n");
            sb.Append("  IsCovered: ").Append(IsCovered).Append("\n");
            sb.Append("  MaxShow: ").Append(MaxShow).Append("\n");
            sb.Append("  MaxFloor: ").Append(MaxFloor).Append("\n");
            sb.Append("  PrevClosePrice: ").Append(PrevClosePrice).Append("\n");
            sb.Append("  SettlementType: ").Append(SettlementType).Append("\n");
            sb.Append("  SettlementDate: ").Append(SettlementDate).Append("\n");
            sb.Append("  HandlingInstructions: ").Append(HandlingInstructions).Append("\n");
            sb.Append("  ExecutionInstructions: ").Append(ExecutionInstructions).Append("\n");
            sb.Append("  LocateRequired: ").Append(LocateRequired).Append("\n");
            sb.Append("  EffectiveTime: ").Append(EffectiveTime).Append("\n");
            sb.Append("  Account: ").Append(Account).Append("\n");
            sb.Append("  TimeInForce: ").Append(TimeInForce).Append("\n");
            sb.Append("  UserDefinedFields: ").Append(UserDefinedFields).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as EMSOrder);
        }

        /// <summary>
        /// Returns true if EMSOrder instances are equal
        /// </summary>
        /// <param name="input">Instance of EMSOrder to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(EMSOrder input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.OrderId == input.OrderId ||
                    (this.OrderId != null &&
                    this.OrderId.Equals(input.OrderId))
                ) && 
                (
                    this.Instrument == input.Instrument ||
                    (this.Instrument != null &&
                    this.Instrument.Equals(input.Instrument))
                ) && 
                (
                    this.Side == input.Side ||
                    this.Side.Equals(input.Side)
                ) && 
                (
                    this.OrderType == input.OrderType ||
                    this.OrderType.Equals(input.OrderType)
                ) && 
                (
                    this.OrderQuantity == input.OrderQuantity ||
                    this.OrderQuantity.Equals(input.OrderQuantity)
                ) && 
                (
                    this.Price == input.Price ||
                    this.Price.Equals(input.Price)
                ) && 
                (
                    this.StopPrice == input.StopPrice ||
                    this.StopPrice.Equals(input.StopPrice)
                ) && 
                (
                    this.StrikePrice == input.StrikePrice ||
                    this.StrikePrice.Equals(input.StrikePrice)
                ) && 
                (
                    this.Currency == input.Currency ||
                    (this.Currency != null &&
                    this.Currency.Equals(input.Currency))
                ) && 
                (
                    this.IsCovered == input.IsCovered ||
                    this.IsCovered.Equals(input.IsCovered)
                ) && 
                (
                    this.MaxShow == input.MaxShow ||
                    this.MaxShow.Equals(input.MaxShow)
                ) && 
                (
                    this.MaxFloor == input.MaxFloor ||
                    this.MaxFloor.Equals(input.MaxFloor)
                ) && 
                (
                    this.PrevClosePrice == input.PrevClosePrice ||
                    this.PrevClosePrice.Equals(input.PrevClosePrice)
                ) && 
                (
                    this.SettlementType == input.SettlementType ||
                    (this.SettlementType != null &&
                    this.SettlementType.Equals(input.SettlementType))
                ) && 
                (
                    this.SettlementDate == input.SettlementDate ||
                    (this.SettlementDate != null &&
                    this.SettlementDate.Equals(input.SettlementDate))
                ) && 
                (
                    this.HandlingInstructions == input.HandlingInstructions ||
                    this.HandlingInstructions.Equals(input.HandlingInstructions)
                ) && 
                (
                    this.ExecutionInstructions == input.ExecutionInstructions ||
                    this.ExecutionInstructions.Equals(input.ExecutionInstructions)
                ) && 
                (
                    this.LocateRequired == input.LocateRequired ||
                    this.LocateRequired.Equals(input.LocateRequired)
                ) && 
                (
                    this.EffectiveTime == input.EffectiveTime ||
                    (this.EffectiveTime != null &&
                    this.EffectiveTime.Equals(input.EffectiveTime))
                ) && 
                (
                    this.Account == input.Account ||
                    (this.Account != null &&
                    this.Account.Equals(input.Account))
                ) && 
                (
                    this.TimeInForce == input.TimeInForce ||
                    (this.TimeInForce != null &&
                    this.TimeInForce.Equals(input.TimeInForce))
                ) && 
                (
                    this.UserDefinedFields == input.UserDefinedFields ||
                    this.UserDefinedFields != null &&
                    input.UserDefinedFields != null &&
                    this.UserDefinedFields.SequenceEqual(input.UserDefinedFields)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.OrderId != null)
                {
                    hashCode = (hashCode * 59) + this.OrderId.GetHashCode();
                }
                if (this.Instrument != null)
                {
                    hashCode = (hashCode * 59) + this.Instrument.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Side.GetHashCode();
                hashCode = (hashCode * 59) + this.OrderType.GetHashCode();
                hashCode = (hashCode * 59) + this.OrderQuantity.GetHashCode();
                hashCode = (hashCode * 59) + this.Price.GetHashCode();
                hashCode = (hashCode * 59) + this.StopPrice.GetHashCode();
                hashCode = (hashCode * 59) + this.StrikePrice.GetHashCode();
                if (this.Currency != null)
                {
                    hashCode = (hashCode * 59) + this.Currency.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.IsCovered.GetHashCode();
                hashCode = (hashCode * 59) + this.MaxShow.GetHashCode();
                hashCode = (hashCode * 59) + this.MaxFloor.GetHashCode();
                hashCode = (hashCode * 59) + this.PrevClosePrice.GetHashCode();
                if (this.SettlementType != null)
                {
                    hashCode = (hashCode * 59) + this.SettlementType.GetHashCode();
                }
                if (this.SettlementDate != null)
                {
                    hashCode = (hashCode * 59) + this.SettlementDate.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.HandlingInstructions.GetHashCode();
                hashCode = (hashCode * 59) + this.ExecutionInstructions.GetHashCode();
                hashCode = (hashCode * 59) + this.LocateRequired.GetHashCode();
                if (this.EffectiveTime != null)
                {
                    hashCode = (hashCode * 59) + this.EffectiveTime.GetHashCode();
                }
                if (this.Account != null)
                {
                    hashCode = (hashCode * 59) + this.Account.GetHashCode();
                }
                if (this.TimeInForce != null)
                {
                    hashCode = (hashCode * 59) + this.TimeInForce.GetHashCode();
                }
                if (this.UserDefinedFields != null)
                {
                    hashCode = (hashCode * 59) + this.UserDefinedFields.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
