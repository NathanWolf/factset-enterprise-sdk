/*
 * Prime Developer Trial
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using FactSet.SDK.ETFProfileandPrices.Client;
using FactSet.SDK.ETFProfileandPrices.Model;
using FactSet.SDK.Utils.Authentication;

namespace FactSet.SDK.ETFProfileandPrices.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IFactsetApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// This endpoint returns selected ETP&#39;s asset allocations.
        /// </summary>
        /// <remarks>
        /// This endpoint returns selected ETP&#39;s allocations grouped by asset class. The response will be sorted by weight in descending order.
        /// </remarks>
        /// <exception cref="FactSet.SDK.ETFProfileandPrices.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">Market symbol of ETP defined by FactSet.</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="paginationOffset">Non-negative number of entries to skip, or 0 (default). (optional, default to 0.0M)</param>
        /// <param name="paginationLimit">Non-negative maximum number of entries to return. (optional, default to 20.0M)</param>
        /// <returns>InlineResponse2001</returns>
        InlineResponse2001 GetFactsetEtfAllocationAssetListBySymbol(string symbol, List<string> attributes = default(List<string>), decimal? paginationOffset = default(decimal?), decimal? paginationLimit = default(decimal?));

        /// <summary>
        /// This endpoint returns selected ETP&#39;s asset allocations.
        /// </summary>
        /// <remarks>
        /// This endpoint returns selected ETP&#39;s allocations grouped by asset class. The response will be sorted by weight in descending order.
        /// </remarks>
        /// <exception cref="FactSet.SDK.ETFProfileandPrices.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">Market symbol of ETP defined by FactSet.</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="paginationOffset">Non-negative number of entries to skip, or 0 (default). (optional, default to 0.0M)</param>
        /// <param name="paginationLimit">Non-negative maximum number of entries to return. (optional, default to 20.0M)</param>
        /// <returns>ApiResponse of InlineResponse2001</returns>
        ApiResponse<InlineResponse2001> GetFactsetEtfAllocationAssetListBySymbolWithHttpInfo(string symbol, List<string> attributes = default(List<string>), decimal? paginationOffset = default(decimal?), decimal? paginationLimit = default(decimal?));
        /// <summary>
        /// This endpoint returns selected ETP&#39;s country allocations.
        /// </summary>
        /// <remarks>
        /// This endpoint returns selected ETP&#39;s allocations grouped by country names. The response will be sorted by weight in descending order.
        /// </remarks>
        /// <exception cref="FactSet.SDK.ETFProfileandPrices.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">Market symbol of ETP defined by FactSet.</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="paginationOffset">Non-negative number of entries to skip, or 0 (default). (optional, default to 0.0M)</param>
        /// <param name="paginationLimit">Non-negative maximum number of entries to return. (optional, default to 20.0M)</param>
        /// <returns>InlineResponse2002</returns>
        InlineResponse2002 GetFactsetEtfAllocationCountryListBySymbol(string symbol, List<string> attributes = default(List<string>), decimal? paginationOffset = default(decimal?), decimal? paginationLimit = default(decimal?));

        /// <summary>
        /// This endpoint returns selected ETP&#39;s country allocations.
        /// </summary>
        /// <remarks>
        /// This endpoint returns selected ETP&#39;s allocations grouped by country names. The response will be sorted by weight in descending order.
        /// </remarks>
        /// <exception cref="FactSet.SDK.ETFProfileandPrices.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">Market symbol of ETP defined by FactSet.</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="paginationOffset">Non-negative number of entries to skip, or 0 (default). (optional, default to 0.0M)</param>
        /// <param name="paginationLimit">Non-negative maximum number of entries to return. (optional, default to 20.0M)</param>
        /// <returns>ApiResponse of InlineResponse2002</returns>
        ApiResponse<InlineResponse2002> GetFactsetEtfAllocationCountryListBySymbolWithHttpInfo(string symbol, List<string> attributes = default(List<string>), decimal? paginationOffset = default(decimal?), decimal? paginationLimit = default(decimal?));
        /// <summary>
        /// This endpoint returns selected ETP&#39;s currency allocations.
        /// </summary>
        /// <remarks>
        /// This endpoint returns selected ETP&#39;s allocations grouped by currency. The response will be sorted by weight in descending order.
        /// </remarks>
        /// <exception cref="FactSet.SDK.ETFProfileandPrices.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">Market symbol of ETP defined by FactSet.</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="paginationOffset">Non-negative number of entries to skip, or 0 (default). (optional, default to 0.0M)</param>
        /// <param name="paginationLimit">Non-negative maximum number of entries to return. (optional, default to 20.0M)</param>
        /// <returns>InlineResponse2003</returns>
        InlineResponse2003 GetFactsetEtfAllocationCurrencyListBySymbol(string symbol, List<string> attributes = default(List<string>), decimal? paginationOffset = default(decimal?), decimal? paginationLimit = default(decimal?));

        /// <summary>
        /// This endpoint returns selected ETP&#39;s currency allocations.
        /// </summary>
        /// <remarks>
        /// This endpoint returns selected ETP&#39;s allocations grouped by currency. The response will be sorted by weight in descending order.
        /// </remarks>
        /// <exception cref="FactSet.SDK.ETFProfileandPrices.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">Market symbol of ETP defined by FactSet.</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="paginationOffset">Non-negative number of entries to skip, or 0 (default). (optional, default to 0.0M)</param>
        /// <param name="paginationLimit">Non-negative maximum number of entries to return. (optional, default to 20.0M)</param>
        /// <returns>ApiResponse of InlineResponse2003</returns>
        ApiResponse<InlineResponse2003> GetFactsetEtfAllocationCurrencyListBySymbolWithHttpInfo(string symbol, List<string> attributes = default(List<string>), decimal? paginationOffset = default(decimal?), decimal? paginationLimit = default(decimal?));
        /// <summary>
        /// List of allocations classified by a holding&#39;s economic development status.
        /// </summary>
        /// <remarks>
        /// List of allocations classified by a holding&#39;s economic development status (e.g. developed market, frontier market, emerging market).
        /// </remarks>
        /// <exception cref="FactSet.SDK.ETFProfileandPrices.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">Market symbol of ETP defined by FactSet.</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="paginationOffset">Non-negative number of entries to skip, or 0 (default). (optional, default to 0.0M)</param>
        /// <param name="paginationLimit">Non-negative maximum number of entries to return. (optional, default to 20.0M)</param>
        /// <returns>InlineResponse2004</returns>
        InlineResponse2004 GetFactsetEtfAllocationEconomicDevelopmentListBySymbol(string symbol, List<string> attributes = default(List<string>), decimal? paginationOffset = default(decimal?), decimal? paginationLimit = default(decimal?));

        /// <summary>
        /// List of allocations classified by a holding&#39;s economic development status.
        /// </summary>
        /// <remarks>
        /// List of allocations classified by a holding&#39;s economic development status (e.g. developed market, frontier market, emerging market).
        /// </remarks>
        /// <exception cref="FactSet.SDK.ETFProfileandPrices.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">Market symbol of ETP defined by FactSet.</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="paginationOffset">Non-negative number of entries to skip, or 0 (default). (optional, default to 0.0M)</param>
        /// <param name="paginationLimit">Non-negative maximum number of entries to return. (optional, default to 20.0M)</param>
        /// <returns>ApiResponse of InlineResponse2004</returns>
        ApiResponse<InlineResponse2004> GetFactsetEtfAllocationEconomicDevelopmentListBySymbolWithHttpInfo(string symbol, List<string> attributes = default(List<string>), decimal? paginationOffset = default(decimal?), decimal? paginationLimit = default(decimal?));
        /// <summary>
        /// This endpoint returns selected ETP&#39;s exchange allocations.
        /// </summary>
        /// <remarks>
        /// This endpoint returns selected ETP&#39;s allocations grouped by exchanges. The response will be sorted by weight in descending order.
        /// </remarks>
        /// <exception cref="FactSet.SDK.ETFProfileandPrices.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">Market symbol of ETP defined by FactSet.</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="paginationOffset">Non-negative number of entries to skip, or 0 (default). (optional, default to 0.0M)</param>
        /// <param name="paginationLimit">Non-negative maximum number of entries to return. (optional, default to 20.0M)</param>
        /// <returns>InlineResponse2005</returns>
        InlineResponse2005 GetFactsetEtfAllocationExchangeListBySymbol(string symbol, List<string> attributes = default(List<string>), decimal? paginationOffset = default(decimal?), decimal? paginationLimit = default(decimal?));

        /// <summary>
        /// This endpoint returns selected ETP&#39;s exchange allocations.
        /// </summary>
        /// <remarks>
        /// This endpoint returns selected ETP&#39;s allocations grouped by exchanges. The response will be sorted by weight in descending order.
        /// </remarks>
        /// <exception cref="FactSet.SDK.ETFProfileandPrices.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">Market symbol of ETP defined by FactSet.</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="paginationOffset">Non-negative number of entries to skip, or 0 (default). (optional, default to 0.0M)</param>
        /// <param name="paginationLimit">Non-negative maximum number of entries to return. (optional, default to 20.0M)</param>
        /// <returns>ApiResponse of InlineResponse2005</returns>
        ApiResponse<InlineResponse2005> GetFactsetEtfAllocationExchangeListBySymbolWithHttpInfo(string symbol, List<string> attributes = default(List<string>), decimal? paginationOffset = default(decimal?), decimal? paginationLimit = default(decimal?));
        /// <summary>
        /// This endpoint returns selected ETP&#39;s industry allocations.
        /// </summary>
        /// <remarks>
        /// This endpoint returns selected ETP&#39;s allocations grouped by industry. The response will be sorted by weight in descending order.
        /// </remarks>
        /// <exception cref="FactSet.SDK.ETFProfileandPrices.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">Market symbol of ETP defined by FactSet.</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="paginationOffset">Non-negative number of entries to skip, or 0 (default). (optional, default to 0.0M)</param>
        /// <param name="paginationLimit">Non-negative maximum number of entries to return. (optional, default to 20.0M)</param>
        /// <returns>InlineResponse2006</returns>
        InlineResponse2006 GetFactsetEtfAllocationIndustryListBySymbol(string symbol, List<string> attributes = default(List<string>), decimal? paginationOffset = default(decimal?), decimal? paginationLimit = default(decimal?));

        /// <summary>
        /// This endpoint returns selected ETP&#39;s industry allocations.
        /// </summary>
        /// <remarks>
        /// This endpoint returns selected ETP&#39;s allocations grouped by industry. The response will be sorted by weight in descending order.
        /// </remarks>
        /// <exception cref="FactSet.SDK.ETFProfileandPrices.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">Market symbol of ETP defined by FactSet.</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="paginationOffset">Non-negative number of entries to skip, or 0 (default). (optional, default to 0.0M)</param>
        /// <param name="paginationLimit">Non-negative maximum number of entries to return. (optional, default to 20.0M)</param>
        /// <returns>ApiResponse of InlineResponse2006</returns>
        ApiResponse<InlineResponse2006> GetFactsetEtfAllocationIndustryListBySymbolWithHttpInfo(string symbol, List<string> attributes = default(List<string>), decimal? paginationOffset = default(decimal?), decimal? paginationLimit = default(decimal?));
        /// <summary>
        /// List of allocations classified by a holding&#39;s total market capitalization.
        /// </summary>
        /// <remarks>
        /// List of allocations classified by a holding&#39;s total market capitalization (e.g. Small Cap, Mid Cap, Large Cap). Response will be sorted by weight in descending order.
        /// </remarks>
        /// <exception cref="FactSet.SDK.ETFProfileandPrices.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">Market symbol of ETP defined by FactSet.</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="paginationOffset">Non-negative number of entries to skip, or 0 (default). (optional, default to 0.0M)</param>
        /// <param name="paginationLimit">Non-negative maximum number of entries to return. (optional, default to 20.0M)</param>
        /// <returns>InlineResponse2007</returns>
        InlineResponse2007 GetFactsetEtfAllocationMarketCapitalizationListBySymbol(string symbol, List<string> attributes = default(List<string>), decimal? paginationOffset = default(decimal?), decimal? paginationLimit = default(decimal?));

        /// <summary>
        /// List of allocations classified by a holding&#39;s total market capitalization.
        /// </summary>
        /// <remarks>
        /// List of allocations classified by a holding&#39;s total market capitalization (e.g. Small Cap, Mid Cap, Large Cap). Response will be sorted by weight in descending order.
        /// </remarks>
        /// <exception cref="FactSet.SDK.ETFProfileandPrices.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">Market symbol of ETP defined by FactSet.</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="paginationOffset">Non-negative number of entries to skip, or 0 (default). (optional, default to 0.0M)</param>
        /// <param name="paginationLimit">Non-negative maximum number of entries to return. (optional, default to 20.0M)</param>
        /// <returns>ApiResponse of InlineResponse2007</returns>
        ApiResponse<InlineResponse2007> GetFactsetEtfAllocationMarketCapitalizationListBySymbolWithHttpInfo(string symbol, List<string> attributes = default(List<string>), decimal? paginationOffset = default(decimal?), decimal? paginationLimit = default(decimal?));
        /// <summary>
        /// This endpoint returns selected ETP&#39;s region allocations.
        /// </summary>
        /// <remarks>
        /// This endpoint returns selected ETP&#39;s allocations grouped by region names. The response will be sorted by weight in descending order.
        /// </remarks>
        /// <exception cref="FactSet.SDK.ETFProfileandPrices.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">Market symbol of ETP defined by FactSet.</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="paginationOffset">Non-negative number of entries to skip, or 0 (default). (optional, default to 0.0M)</param>
        /// <param name="paginationLimit">Non-negative maximum number of entries to return. (optional, default to 20.0M)</param>
        /// <returns>InlineResponse2008</returns>
        InlineResponse2008 GetFactsetEtfAllocationRegionListBySymbol(string symbol, List<string> attributes = default(List<string>), decimal? paginationOffset = default(decimal?), decimal? paginationLimit = default(decimal?));

        /// <summary>
        /// This endpoint returns selected ETP&#39;s region allocations.
        /// </summary>
        /// <remarks>
        /// This endpoint returns selected ETP&#39;s allocations grouped by region names. The response will be sorted by weight in descending order.
        /// </remarks>
        /// <exception cref="FactSet.SDK.ETFProfileandPrices.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">Market symbol of ETP defined by FactSet.</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="paginationOffset">Non-negative number of entries to skip, or 0 (default). (optional, default to 0.0M)</param>
        /// <param name="paginationLimit">Non-negative maximum number of entries to return. (optional, default to 20.0M)</param>
        /// <returns>ApiResponse of InlineResponse2008</returns>
        ApiResponse<InlineResponse2008> GetFactsetEtfAllocationRegionListBySymbolWithHttpInfo(string symbol, List<string> attributes = default(List<string>), decimal? paginationOffset = default(decimal?), decimal? paginationLimit = default(decimal?));
        /// <summary>
        /// This endpoint returns selected ETP&#39;s sector allocations.
        /// </summary>
        /// <remarks>
        /// This endpoint returns selected ETP&#39;s allocations grouped by sector names. The response will be sorted by weight in descending order.
        /// </remarks>
        /// <exception cref="FactSet.SDK.ETFProfileandPrices.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">Market symbol of ETP defined by FactSet.</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="paginationOffset">Non-negative number of entries to skip, or 0 (default). (optional, default to 0.0M)</param>
        /// <param name="paginationLimit">Non-negative maximum number of entries to return. (optional, default to 20.0M)</param>
        /// <returns>InlineResponse2009</returns>
        InlineResponse2009 GetFactsetEtfAllocationSectorListBySymbol(string symbol, List<string> attributes = default(List<string>), decimal? paginationOffset = default(decimal?), decimal? paginationLimit = default(decimal?));

        /// <summary>
        /// This endpoint returns selected ETP&#39;s sector allocations.
        /// </summary>
        /// <remarks>
        /// This endpoint returns selected ETP&#39;s allocations grouped by sector names. The response will be sorted by weight in descending order.
        /// </remarks>
        /// <exception cref="FactSet.SDK.ETFProfileandPrices.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">Market symbol of ETP defined by FactSet.</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="paginationOffset">Non-negative number of entries to skip, or 0 (default). (optional, default to 0.0M)</param>
        /// <param name="paginationLimit">Non-negative maximum number of entries to return. (optional, default to 20.0M)</param>
        /// <returns>ApiResponse of InlineResponse2009</returns>
        ApiResponse<InlineResponse2009> GetFactsetEtfAllocationSectorListBySymbolWithHttpInfo(string symbol, List<string> attributes = default(List<string>), decimal? paginationOffset = default(decimal?), decimal? paginationLimit = default(decimal?));
        /// <summary>
        /// FactSet proprietary analytics datapoints for ETPs.
        /// </summary>
        /// <remarks>
        /// FactSet&#39;s proprietary analytical datapoints include ETP attributes specific to lending, corporate actions, and benchmarks.
        /// </remarks>
        /// <exception cref="FactSet.SDK.ETFProfileandPrices.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">Ticker-region of a security as defined by FactSet.</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <returns>InlineResponse20010</returns>
        InlineResponse20010 GetFactsetEtfAnalyticsGetBySymbol(string symbol, List<string> attributes = default(List<string>));

        /// <summary>
        /// FactSet proprietary analytics datapoints for ETPs.
        /// </summary>
        /// <remarks>
        /// FactSet&#39;s proprietary analytical datapoints include ETP attributes specific to lending, corporate actions, and benchmarks.
        /// </remarks>
        /// <exception cref="FactSet.SDK.ETFProfileandPrices.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">Ticker-region of a security as defined by FactSet.</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <returns>ApiResponse of InlineResponse20010</returns>
        ApiResponse<InlineResponse20010> GetFactsetEtfAnalyticsGetBySymbolWithHttpInfo(string symbol, List<string> attributes = default(List<string>));
        /// <summary>
        /// FactSet&#39;s portfolio statistics for ETPs.
        /// </summary>
        /// <remarks>
        /// FactSet calculates several proprietary portfolio statistics for ETPs including average maturity, credit quality, price/book ratio, price/earnings ratio, and dividend yield.
        /// </remarks>
        /// <exception cref="FactSet.SDK.ETFProfileandPrices.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">Ticker-region of a security as defined by FactSet.</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <returns>InlineResponse20011</returns>
        InlineResponse20011 GetFactsetEtfAnalyticsHoldingsStatisticsGetBySymbol(string symbol, List<string> attributes = default(List<string>));

        /// <summary>
        /// FactSet&#39;s portfolio statistics for ETPs.
        /// </summary>
        /// <remarks>
        /// FactSet calculates several proprietary portfolio statistics for ETPs including average maturity, credit quality, price/book ratio, price/earnings ratio, and dividend yield.
        /// </remarks>
        /// <exception cref="FactSet.SDK.ETFProfileandPrices.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">Ticker-region of a security as defined by FactSet.</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <returns>ApiResponse of InlineResponse20011</returns>
        ApiResponse<InlineResponse20011> GetFactsetEtfAnalyticsHoldingsStatisticsGetBySymbolWithHttpInfo(string symbol, List<string> attributes = default(List<string>));
        /// <summary>
        /// FactSet proprietary ETP rankings.
        /// </summary>
        /// <remarks>
        /// FactSet calculates various proprietary fund rankings including unique scores, fund grades, segment averages, and recommendations.
        /// </remarks>
        /// <exception cref="FactSet.SDK.ETFProfileandPrices.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">Ticker-region of a security as defined by FactSet.</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <returns>InlineResponse20012</returns>
        InlineResponse20012 GetFactsetEtfAnalyticsScoreGetBySymbol(string symbol, List<string> attributes = default(List<string>));

        /// <summary>
        /// FactSet proprietary ETP rankings.
        /// </summary>
        /// <remarks>
        /// FactSet calculates various proprietary fund rankings including unique scores, fund grades, segment averages, and recommendations.
        /// </remarks>
        /// <exception cref="FactSet.SDK.ETFProfileandPrices.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">Ticker-region of a security as defined by FactSet.</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <returns>ApiResponse of InlineResponse20012</returns>
        ApiResponse<InlineResponse20012> GetFactsetEtfAnalyticsScoreGetBySymbolWithHttpInfo(string symbol, List<string> attributes = default(List<string>));
        /// <summary>
        /// Trade statistics for specific ETP.
        /// </summary>
        /// <remarks>
        /// Various metrics of an ETP&#39;s liquidity including creation metrics, premium/discount, spread, and tracking error statistics.
        /// </remarks>
        /// <exception cref="FactSet.SDK.ETFProfileandPrices.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">Ticker-region of a security as defined by FactSet.</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <returns>InlineResponse20013</returns>
        InlineResponse20013 GetFactsetEtfAnalyticsTradeGetBySymbol(string symbol, List<string> attributes = default(List<string>));

        /// <summary>
        /// Trade statistics for specific ETP.
        /// </summary>
        /// <remarks>
        /// Various metrics of an ETP&#39;s liquidity including creation metrics, premium/discount, spread, and tracking error statistics.
        /// </remarks>
        /// <exception cref="FactSet.SDK.ETFProfileandPrices.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">Ticker-region of a security as defined by FactSet.</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <returns>ApiResponse of InlineResponse20013</returns>
        ApiResponse<InlineResponse20013> GetFactsetEtfAnalyticsTradeGetBySymbolWithHttpInfo(string symbol, List<string> attributes = default(List<string>));
        /// <summary>
        /// Retrieve basic characteristic information for a specified ETP.
        /// </summary>
        /// <remarks>
        /// An ETP has many unique characteristics specific to its composition that differentiate it from other products. This includes details on leverage, hedging, derivatives, and service providers.
        /// </remarks>
        /// <exception cref="FactSet.SDK.ETFProfileandPrices.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">Market symbol of ETF defined by FactSet.</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <returns>InlineResponse20014</returns>
        InlineResponse20014 GetFactsetEtfCharacteristicsGetBySymbol(string symbol, List<string> attributes = default(List<string>));

        /// <summary>
        /// Retrieve basic characteristic information for a specified ETP.
        /// </summary>
        /// <remarks>
        /// An ETP has many unique characteristics specific to its composition that differentiate it from other products. This includes details on leverage, hedging, derivatives, and service providers.
        /// </remarks>
        /// <exception cref="FactSet.SDK.ETFProfileandPrices.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">Market symbol of ETF defined by FactSet.</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <returns>ApiResponse of InlineResponse20014</returns>
        ApiResponse<InlineResponse20014> GetFactsetEtfCharacteristicsGetBySymbolWithHttpInfo(string symbol, List<string> attributes = default(List<string>));
        /// <summary>
        /// List of ETP class broad categories.
        /// </summary>
        /// <remarks>
        /// List of ETP class broad categories.
        /// </remarks>
        /// <exception cref="FactSet.SDK.ETFProfileandPrices.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <returns>InlineResponse20016</returns>
        InlineResponse20016 GetFactsetEtfClassCategoryBroadList(List<string> attributes = default(List<string>));

        /// <summary>
        /// List of ETP class broad categories.
        /// </summary>
        /// <remarks>
        /// List of ETP class broad categories.
        /// </remarks>
        /// <exception cref="FactSet.SDK.ETFProfileandPrices.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <returns>ApiResponse of InlineResponse20016</returns>
        ApiResponse<InlineResponse20016> GetFactsetEtfClassCategoryBroadListWithHttpInfo(List<string> attributes = default(List<string>));
        /// <summary>
        /// List of ETP class focus categories.
        /// </summary>
        /// <remarks>
        /// List of ETP class focus categories.
        /// </remarks>
        /// <exception cref="FactSet.SDK.ETFProfileandPrices.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="paginationOffset">Non-negative number of entries to skip, or 0 (default). (optional, default to 0.0M)</param>
        /// <param name="paginationLimit">Non-negative maximum number of entries to return. (optional, default to 20.0M)</param>
        /// <returns>InlineResponse20017</returns>
        InlineResponse20017 GetFactsetEtfClassCategoryFocusList(List<string> attributes = default(List<string>), decimal? paginationOffset = default(decimal?), decimal? paginationLimit = default(decimal?));

        /// <summary>
        /// List of ETP class focus categories.
        /// </summary>
        /// <remarks>
        /// List of ETP class focus categories.
        /// </remarks>
        /// <exception cref="FactSet.SDK.ETFProfileandPrices.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="paginationOffset">Non-negative number of entries to skip, or 0 (default). (optional, default to 0.0M)</param>
        /// <param name="paginationLimit">Non-negative maximum number of entries to return. (optional, default to 20.0M)</param>
        /// <returns>ApiResponse of InlineResponse20017</returns>
        ApiResponse<InlineResponse20017> GetFactsetEtfClassCategoryFocusListWithHttpInfo(List<string> attributes = default(List<string>), decimal? paginationOffset = default(decimal?), decimal? paginationLimit = default(decimal?));
        /// <summary>
        /// List of ETP class niche categories.
        /// </summary>
        /// <remarks>
        /// List of ETP class niche categories.
        /// </remarks>
        /// <exception cref="FactSet.SDK.ETFProfileandPrices.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="paginationOffset">Non-negative number of entries to skip, or 0 (default). (optional, default to 0.0M)</param>
        /// <param name="paginationLimit">Non-negative maximum number of entries to return. (optional, default to 20.0M)</param>
        /// <returns>InlineResponse20018</returns>
        InlineResponse20018 GetFactsetEtfClassCategoryNicheList(List<string> attributes = default(List<string>), decimal? paginationOffset = default(decimal?), decimal? paginationLimit = default(decimal?));

        /// <summary>
        /// List of ETP class niche categories.
        /// </summary>
        /// <remarks>
        /// List of ETP class niche categories.
        /// </remarks>
        /// <exception cref="FactSet.SDK.ETFProfileandPrices.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="paginationOffset">Non-negative number of entries to skip, or 0 (default). (optional, default to 0.0M)</param>
        /// <param name="paginationLimit">Non-negative maximum number of entries to return. (optional, default to 20.0M)</param>
        /// <returns>ApiResponse of InlineResponse20018</returns>
        ApiResponse<InlineResponse20018> GetFactsetEtfClassCategoryNicheListWithHttpInfo(List<string> attributes = default(List<string>), decimal? paginationOffset = default(decimal?), decimal? paginationLimit = default(decimal?));
        /// <summary>
        /// List of ETP class geographies.
        /// </summary>
        /// <remarks>
        /// List of ETP class geographies.
        /// </remarks>
        /// <exception cref="FactSet.SDK.ETFProfileandPrices.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <returns>InlineResponse20019</returns>
        InlineResponse20019 GetFactsetEtfClassGeographyList(List<string> attributes = default(List<string>));

        /// <summary>
        /// List of ETP class geographies.
        /// </summary>
        /// <remarks>
        /// List of ETP class geographies.
        /// </remarks>
        /// <exception cref="FactSet.SDK.ETFProfileandPrices.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <returns>ApiResponse of InlineResponse20019</returns>
        ApiResponse<InlineResponse20019> GetFactsetEtfClassGeographyListWithHttpInfo(List<string> attributes = default(List<string>));
        /// <summary>
        /// Retrieve an ETP&#39;s classification specific to asset class, geography, or investment strategy.
        /// </summary>
        /// <remarks>
        /// ETP classification is divided into three categories: Asset Class, Geography, and Investment Strategy. Asset class is determined based on the various asset types held by the fund, A fund&#39;s geography can be classified by region (e.g. Asia-Pac), specific geography (e.g. China) or economic development (e.g. BRIC). An ETP&#39;s investment strategy is classified in broad categories (e.g. Large Cap) and more granular categorizations.
        /// </remarks>
        /// <exception cref="FactSet.SDK.ETFProfileandPrices.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">Market symbol of ETP defined by FactSet.</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <returns>InlineResponse20015</returns>
        InlineResponse20015 GetFactsetEtfClassGetBySymbol(string symbol, List<string> attributes = default(List<string>));

        /// <summary>
        /// Retrieve an ETP&#39;s classification specific to asset class, geography, or investment strategy.
        /// </summary>
        /// <remarks>
        /// ETP classification is divided into three categories: Asset Class, Geography, and Investment Strategy. Asset class is determined based on the various asset types held by the fund, A fund&#39;s geography can be classified by region (e.g. Asia-Pac), specific geography (e.g. China) or economic development (e.g. BRIC). An ETP&#39;s investment strategy is classified in broad categories (e.g. Large Cap) and more granular categorizations.
        /// </remarks>
        /// <exception cref="FactSet.SDK.ETFProfileandPrices.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">Market symbol of ETP defined by FactSet.</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <returns>ApiResponse of InlineResponse20015</returns>
        ApiResponse<InlineResponse20015> GetFactsetEtfClassGetBySymbolWithHttpInfo(string symbol, List<string> attributes = default(List<string>));
        /// <summary>
        /// FactSet&#39;s proprietary list of competing companies.
        /// </summary>
        /// <remarks>
        /// FactSet defines and maintains a proprietary list of competing companies based on a number of attributes specific to a fund.
        /// </remarks>
        /// <exception cref="FactSet.SDK.ETFProfileandPrices.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">Ticker-region of a security as defined by FactSet.</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <returns>InlineResponse20020</returns>
        InlineResponse20020 GetFactsetEtfCompetitorsListBySymbol(string symbol, List<string> attributes = default(List<string>));

        /// <summary>
        /// FactSet&#39;s proprietary list of competing companies.
        /// </summary>
        /// <remarks>
        /// FactSet defines and maintains a proprietary list of competing companies based on a number of attributes specific to a fund.
        /// </remarks>
        /// <exception cref="FactSet.SDK.ETFProfileandPrices.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">Ticker-region of a security as defined by FactSet.</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <returns>ApiResponse of InlineResponse20020</returns>
        ApiResponse<InlineResponse20020> GetFactsetEtfCompetitorsListBySymbolWithHttpInfo(string symbol, List<string> attributes = default(List<string>));
        /// <summary>
        /// Retrieve an ETP&#39;s current distribution details.
        /// </summary>
        /// <remarks>
        /// Retrieve distribution-related details for a specific ETP including dividend and capital gain distribution details.
        /// </remarks>
        /// <exception cref="FactSet.SDK.ETFProfileandPrices.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">Market symbol of ETP defined by FactSet.</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <returns>InlineResponse20021</returns>
        InlineResponse20021 GetFactsetEtfDistributionGetBySymbol(string symbol, List<string> attributes = default(List<string>));

        /// <summary>
        /// Retrieve an ETP&#39;s current distribution details.
        /// </summary>
        /// <remarks>
        /// Retrieve distribution-related details for a specific ETP including dividend and capital gain distribution details.
        /// </remarks>
        /// <exception cref="FactSet.SDK.ETFProfileandPrices.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">Market symbol of ETP defined by FactSet.</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <returns>ApiResponse of InlineResponse20021</returns>
        ApiResponse<InlineResponse20021> GetFactsetEtfDistributionGetBySymbolWithHttpInfo(string symbol, List<string> attributes = default(List<string>));
        /// <summary>
        /// Retrieve an ETP&#39;s cash inflow/outflows for various time periods.
        /// </summary>
        /// <remarks>
        /// Retrieve the amount invested or divested in a specific ETP over various time periods including one-day, one-week, one-month, one-year, and YTD.
        /// </remarks>
        /// <exception cref="FactSet.SDK.ETFProfileandPrices.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">Market symbol of ETP defined by FactSet.</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <returns>InlineResponse20022</returns>
        InlineResponse20022 GetFactsetEtfFundFlowsGetBySymbol(string symbol, List<string> attributes = default(List<string>));

        /// <summary>
        /// Retrieve an ETP&#39;s cash inflow/outflows for various time periods.
        /// </summary>
        /// <remarks>
        /// Retrieve the amount invested or divested in a specific ETP over various time periods including one-day, one-week, one-month, one-year, and YTD.
        /// </remarks>
        /// <exception cref="FactSet.SDK.ETFProfileandPrices.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">Market symbol of ETP defined by FactSet.</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <returns>ApiResponse of InlineResponse20022</returns>
        ApiResponse<InlineResponse20022> GetFactsetEtfFundFlowsGetBySymbolWithHttpInfo(string symbol, List<string> attributes = default(List<string>));
        /// <summary>
        /// Retrieve basic profile information for a specified ETP.
        /// </summary>
        /// <remarks>
        /// An ETP can be profiled by defining several common attributes such as issuer, fund description, and benchmark.
        /// </remarks>
        /// <exception cref="FactSet.SDK.ETFProfileandPrices.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">Market symbol of ETP defined by FactSet.</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <returns>InlineResponse200</returns>
        InlineResponse200 GetFactsetEtfGetBySymbol(string symbol, List<string> attributes = default(List<string>));

        /// <summary>
        /// Retrieve basic profile information for a specified ETP.
        /// </summary>
        /// <remarks>
        /// An ETP can be profiled by defining several common attributes such as issuer, fund description, and benchmark.
        /// </remarks>
        /// <exception cref="FactSet.SDK.ETFProfileandPrices.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">Market symbol of ETP defined by FactSet.</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <returns>ApiResponse of InlineResponse200</returns>
        ApiResponse<InlineResponse200> GetFactsetEtfGetBySymbolWithHttpInfo(string symbol, List<string> attributes = default(List<string>));
        /// <summary>
        /// This endpoint returns selected ETP&#39;s Growth of 10K calculated values.
        /// </summary>
        /// <remarks>
        /// Growth of 10K (or growth of 10,000) is a commonly used chart that highlights the change in the value of an initial 10,000 investment in the ETP during a given period of time. Often, this period of time is either since inception or the calculation between the pre-defined range.
        /// </remarks>
        /// <exception cref="FactSet.SDK.ETFProfileandPrices.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">Market symbol of ETP defined by FactSet.</param>
        /// <param name="timePeriod">Historice NAV date value. (optional)</param>
        /// <param name="calculationType">Historice NAV date value. (optional)</param>
        /// <param name="alignment">Indicates the reference point for growth of 10k data. (optional)</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="paginationOffset">Non-negative number of entries to skip, or 0 (default). (optional, default to 0.0M)</param>
        /// <param name="paginationLimit">Non-negative maximum number of entries to return. (optional, default to 20.0M)</param>
        /// <returns>InlineResponse20023</returns>
        InlineResponse20023 GetFactsetEtfGrowthOfTenKListBySymbol(string symbol, string timePeriod = default(string), string calculationType = default(string), string alignment = default(string), List<string> attributes = default(List<string>), decimal? paginationOffset = default(decimal?), decimal? paginationLimit = default(decimal?));

        /// <summary>
        /// This endpoint returns selected ETP&#39;s Growth of 10K calculated values.
        /// </summary>
        /// <remarks>
        /// Growth of 10K (or growth of 10,000) is a commonly used chart that highlights the change in the value of an initial 10,000 investment in the ETP during a given period of time. Often, this period of time is either since inception or the calculation between the pre-defined range.
        /// </remarks>
        /// <exception cref="FactSet.SDK.ETFProfileandPrices.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">Market symbol of ETP defined by FactSet.</param>
        /// <param name="timePeriod">Historice NAV date value. (optional)</param>
        /// <param name="calculationType">Historice NAV date value. (optional)</param>
        /// <param name="alignment">Indicates the reference point for growth of 10k data. (optional)</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="paginationOffset">Non-negative number of entries to skip, or 0 (default). (optional, default to 0.0M)</param>
        /// <param name="paginationLimit">Non-negative maximum number of entries to return. (optional, default to 20.0M)</param>
        /// <returns>ApiResponse of InlineResponse20023</returns>
        ApiResponse<InlineResponse20023> GetFactsetEtfGrowthOfTenKListBySymbolWithHttpInfo(string symbol, string timePeriod = default(string), string calculationType = default(string), string alignment = default(string), List<string> attributes = default(List<string>), decimal? paginationOffset = default(decimal?), decimal? paginationLimit = default(decimal?));
        /// <summary>
        /// Holdings details for an individual ETP.
        /// </summary>
        /// <remarks>
        /// Retrieve an ETP&#39;s holdings information including security, shares held, and weight.
        /// </remarks>
        /// <exception cref="FactSet.SDK.ETFProfileandPrices.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">Market symbol of ETP defined by FactSet.</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="paginationOffset">Non-negative number of entries to skip, or 0 (default). (optional, default to 0.0M)</param>
        /// <param name="paginationLimit">Non-negative maximum number of entries to return. (optional, default to 20.0M)</param>
        /// <returns>InlineResponse20024</returns>
        InlineResponse20024 GetFactsetEtfHoldingsListBySymbol(string symbol, List<string> attributes = default(List<string>), decimal? paginationOffset = default(decimal?), decimal? paginationLimit = default(decimal?));

        /// <summary>
        /// Holdings details for an individual ETP.
        /// </summary>
        /// <remarks>
        /// Retrieve an ETP&#39;s holdings information including security, shares held, and weight.
        /// </remarks>
        /// <exception cref="FactSet.SDK.ETFProfileandPrices.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">Market symbol of ETP defined by FactSet.</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="paginationOffset">Non-negative number of entries to skip, or 0 (default). (optional, default to 0.0M)</param>
        /// <param name="paginationLimit">Non-negative maximum number of entries to return. (optional, default to 20.0M)</param>
        /// <returns>ApiResponse of InlineResponse20024</returns>
        ApiResponse<InlineResponse20024> GetFactsetEtfHoldingsListBySymbolWithHttpInfo(string symbol, List<string> attributes = default(List<string>), decimal? paginationOffset = default(decimal?), decimal? paginationLimit = default(decimal?));
        /// <summary>
        /// Market aggregate data for ETPs.
        /// </summary>
        /// <remarks>
        /// Market Aggregates combines FactSet Estimates, FactSet Fundamentals, and FactSet Prices data to derive ratios and per share values on an aggregate level. The resulting index values can be used to identify market trends and compare a combination of portfolios, benchmarks, and individual securities.
        /// </remarks>
        /// <exception cref="FactSet.SDK.ETFProfileandPrices.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">Ticker-region of an ETP as defined by FactSet.</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <returns>InlineResponse20025</returns>
        InlineResponse20025 GetFactsetEtfMarketAggregatesGetBySymbol(string symbol, List<string> attributes = default(List<string>));

        /// <summary>
        /// Market aggregate data for ETPs.
        /// </summary>
        /// <remarks>
        /// Market Aggregates combines FactSet Estimates, FactSet Fundamentals, and FactSet Prices data to derive ratios and per share values on an aggregate level. The resulting index values can be used to identify market trends and compare a combination of portfolios, benchmarks, and individual securities.
        /// </remarks>
        /// <exception cref="FactSet.SDK.ETFProfileandPrices.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">Ticker-region of an ETP as defined by FactSet.</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <returns>ApiResponse of InlineResponse20025</returns>
        ApiResponse<InlineResponse20025> GetFactsetEtfMarketAggregatesGetBySymbolWithHttpInfo(string symbol, List<string> attributes = default(List<string>));
        /// <summary>
        /// Summary of ETP premium discount data.
        /// </summary>
        /// <remarks>
        /// Summary of ETP premium discount data.
        /// </remarks>
        /// <exception cref="FactSet.SDK.ETFProfileandPrices.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">Market symbol of ETP defined by FactSet.</param>
        /// <param name="timePeriod">Time frame of the data. (optional, default to YTD)</param>
        /// <param name="alignment">Indicates the reference point for the historical NAV and price values. (optional, default to quarter-end)</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="paginationOffset">Non-negative number of entries to skip, or 0 (default). (optional, default to 0.0M)</param>
        /// <param name="paginationLimit">Non-negative maximum number of entries to return. (optional, default to 20.0M)</param>
        /// <returns>InlineResponse20026</returns>
        InlineResponse20026 GetFactsetEtfPremiumDiscountSummaryListBySymbol(string symbol, string timePeriod = default(string), string alignment = default(string), List<string> attributes = default(List<string>), decimal? paginationOffset = default(decimal?), decimal? paginationLimit = default(decimal?));

        /// <summary>
        /// Summary of ETP premium discount data.
        /// </summary>
        /// <remarks>
        /// Summary of ETP premium discount data.
        /// </remarks>
        /// <exception cref="FactSet.SDK.ETFProfileandPrices.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">Market symbol of ETP defined by FactSet.</param>
        /// <param name="timePeriod">Time frame of the data. (optional, default to YTD)</param>
        /// <param name="alignment">Indicates the reference point for the historical NAV and price values. (optional, default to quarter-end)</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="paginationOffset">Non-negative number of entries to skip, or 0 (default). (optional, default to 0.0M)</param>
        /// <param name="paginationLimit">Non-negative maximum number of entries to return. (optional, default to 20.0M)</param>
        /// <returns>ApiResponse of InlineResponse20026</returns>
        ApiResponse<InlineResponse20026> GetFactsetEtfPremiumDiscountSummaryListBySymbolWithHttpInfo(string symbol, string timePeriod = default(string), string alignment = default(string), List<string> attributes = default(List<string>), decimal? paginationOffset = default(decimal?), decimal? paginationLimit = default(decimal?));
        /// <summary>
        /// Retrieve historical ETP NAV values.
        /// </summary>
        /// <remarks>
        /// Retrieve an ETP&#39;s historical NAV and shares outstanding for a specified time range.
        /// </remarks>
        /// <exception cref="FactSet.SDK.ETFProfileandPrices.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">Market symbol of ETP defined by FactSet.</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <returns>InlineResponse20027</returns>
        InlineResponse20027 GetFactsetEtfPriceGetBySymbol(string symbol, List<string> attributes = default(List<string>));

        /// <summary>
        /// Retrieve historical ETP NAV values.
        /// </summary>
        /// <remarks>
        /// Retrieve an ETP&#39;s historical NAV and shares outstanding for a specified time range.
        /// </remarks>
        /// <exception cref="FactSet.SDK.ETFProfileandPrices.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">Market symbol of ETP defined by FactSet.</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <returns>ApiResponse of InlineResponse20027</returns>
        ApiResponse<InlineResponse20027> GetFactsetEtfPriceGetBySymbolWithHttpInfo(string symbol, List<string> attributes = default(List<string>));
        /// <summary>
        /// Retrieve total return data for a specified ETP.
        /// </summary>
        /// <remarks>
        /// An ETP&#39;s total return data can be returned for various time frames including 1-month, 3-month, YTD, 1-year, 3-year, and 5-year. Total return calculations include price performance plus reinvested and compounded distributions. Market price is used to calcualte market returns. Portfolio nav is used to calcualte nav returns.
        /// </remarks>
        /// <exception cref="FactSet.SDK.ETFProfileandPrices.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">Market symbol of ETP defined by FactSet.</param>
        /// <param name="returnType">Return type. (optional, default to price)</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <returns>InlineResponse20028</returns>
        InlineResponse20028 GetFactsetEtfReturnsGetBySymbol(string symbol, string returnType = default(string), List<string> attributes = default(List<string>));

        /// <summary>
        /// Retrieve total return data for a specified ETP.
        /// </summary>
        /// <remarks>
        /// An ETP&#39;s total return data can be returned for various time frames including 1-month, 3-month, YTD, 1-year, 3-year, and 5-year. Total return calculations include price performance plus reinvested and compounded distributions. Market price is used to calcualte market returns. Portfolio nav is used to calcualte nav returns.
        /// </remarks>
        /// <exception cref="FactSet.SDK.ETFProfileandPrices.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">Market symbol of ETP defined by FactSet.</param>
        /// <param name="returnType">Return type. (optional, default to price)</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <returns>ApiResponse of InlineResponse20028</returns>
        ApiResponse<InlineResponse20028> GetFactsetEtfReturnsGetBySymbolWithHttpInfo(string symbol, string returnType = default(string), List<string> attributes = default(List<string>));
        /// <summary>
        /// Retrieve various classification details for a specified ETP.
        /// </summary>
        /// <remarks>
        /// ETP&#39;s can be classified in many different ways including investment strategy, security weightings, and fund composition.
        /// </remarks>
        /// <exception cref="FactSet.SDK.ETFProfileandPrices.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">Market symbol of ETP defined by FactSet.</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <returns>InlineResponse20029</returns>
        InlineResponse20029 GetFactsetEtfStrategyGetBySymbol(string symbol, List<string> attributes = default(List<string>));

        /// <summary>
        /// Retrieve various classification details for a specified ETP.
        /// </summary>
        /// <remarks>
        /// ETP&#39;s can be classified in many different ways including investment strategy, security weightings, and fund composition.
        /// </remarks>
        /// <exception cref="FactSet.SDK.ETFProfileandPrices.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">Market symbol of ETP defined by FactSet.</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <returns>ApiResponse of InlineResponse20029</returns>
        ApiResponse<InlineResponse20029> GetFactsetEtfStrategyGetBySymbolWithHttpInfo(string symbol, List<string> attributes = default(List<string>));
        /// <summary>
        /// Retrieve a list of ETP strategy segments.
        /// </summary>
        /// <remarks>
        /// Retrieve the various segments assigned to a specific ETP. Segment data is used to group funds for comparison and relative performance analyses.
        /// </remarks>
        /// <exception cref="FactSet.SDK.ETFProfileandPrices.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="paginationOffset">Non-negative number of entries to skip, or 0 (default). (optional, default to 0.0M)</param>
        /// <param name="paginationLimit">Non-negative maximum number of entries to return. (optional, default to 20.0M)</param>
        /// <returns>InlineResponse20030</returns>
        InlineResponse20030 GetFactsetEtfStrategySegmentList(List<string> attributes = default(List<string>), decimal? paginationOffset = default(decimal?), decimal? paginationLimit = default(decimal?));

        /// <summary>
        /// Retrieve a list of ETP strategy segments.
        /// </summary>
        /// <remarks>
        /// Retrieve the various segments assigned to a specific ETP. Segment data is used to group funds for comparison and relative performance analyses.
        /// </remarks>
        /// <exception cref="FactSet.SDK.ETFProfileandPrices.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="paginationOffset">Non-negative number of entries to skip, or 0 (default). (optional, default to 0.0M)</param>
        /// <param name="paginationLimit">Non-negative maximum number of entries to return. (optional, default to 20.0M)</param>
        /// <returns>ApiResponse of InlineResponse20030</returns>
        ApiResponse<InlineResponse20030> GetFactsetEtfStrategySegmentListWithHttpInfo(List<string> attributes = default(List<string>), decimal? paginationOffset = default(decimal?), decimal? paginationLimit = default(decimal?));
        /// <summary>
        /// Retrieve the basic structure information for a specified ETP.
        /// </summary>
        /// <remarks>
        /// Retrieve details on a fund&#39;s structure including its type, investment style (active/passive), and legal structure.
        /// </remarks>
        /// <exception cref="FactSet.SDK.ETFProfileandPrices.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">Market symbol of ETP defined by FactSet.</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <returns>InlineResponse20031</returns>
        InlineResponse20031 GetFactsetEtfStructureGetBySymbol(string symbol, List<string> attributes = default(List<string>));

        /// <summary>
        /// Retrieve the basic structure information for a specified ETP.
        /// </summary>
        /// <remarks>
        /// Retrieve details on a fund&#39;s structure including its type, investment style (active/passive), and legal structure.
        /// </remarks>
        /// <exception cref="FactSet.SDK.ETFProfileandPrices.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">Market symbol of ETP defined by FactSet.</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <returns>ApiResponse of InlineResponse20031</returns>
        ApiResponse<InlineResponse20031> GetFactsetEtfStructureGetBySymbolWithHttpInfo(string symbol, List<string> attributes = default(List<string>));
        /// <summary>
        /// Retrieve the tax and fee related information for a specified ETP.
        /// </summary>
        /// <remarks>
        /// Retrieve various fee and tax related details on a specified ETP including expense ratio and tax treatment for dividends and capital gains.
        /// </remarks>
        /// <exception cref="FactSet.SDK.ETFProfileandPrices.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">Market symbol of ETP defined by FactSet.</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <returns>InlineResponse20032</returns>
        InlineResponse20032 GetFactsetEtfTaxesAndFeesUsGetBySymbol(string symbol, List<string> attributes = default(List<string>));

        /// <summary>
        /// Retrieve the tax and fee related information for a specified ETP.
        /// </summary>
        /// <remarks>
        /// Retrieve various fee and tax related details on a specified ETP including expense ratio and tax treatment for dividends and capital gains.
        /// </remarks>
        /// <exception cref="FactSet.SDK.ETFProfileandPrices.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">Market symbol of ETP defined by FactSet.</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <returns>ApiResponse of InlineResponse20032</returns>
        ApiResponse<InlineResponse20032> GetFactsetEtfTaxesAndFeesUsGetBySymbolWithHttpInfo(string symbol, List<string> attributes = default(List<string>));
        /// <summary>
        /// Retrieve historical NAV data for a specified ETP.
        /// </summary>
        /// <remarks>
        /// Retrieve the historical NAV data and the respective fund flows and shares outstanding for a specified fund and time period. Please refer currency.fund in /factset/etf/getBySymbol for currency value.
        /// </remarks>
        /// <exception cref="FactSet.SDK.ETFProfileandPrices.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">Market symbol of ETP defined by FactSet.</param>
        /// <param name="timePeriod">Time frame of the data. (optional, default to 1Y)</param>
        /// <param name="alignment">Indicates the reference point for the time series data. (optional)</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="paginationOffset">Non-negative number of entries to skip, or 0 (default). (optional, default to 0.0M)</param>
        /// <param name="paginationLimit">Non-negative maximum number of entries to return. (optional, default to 20.0M)</param>
        /// <returns>InlineResponse20033</returns>
        InlineResponse20033 GetFactsetEtfTimeSeriesListBySymbol(string symbol, string timePeriod = default(string), string alignment = default(string), List<string> attributes = default(List<string>), decimal? paginationOffset = default(decimal?), decimal? paginationLimit = default(decimal?));

        /// <summary>
        /// Retrieve historical NAV data for a specified ETP.
        /// </summary>
        /// <remarks>
        /// Retrieve the historical NAV data and the respective fund flows and shares outstanding for a specified fund and time period. Please refer currency.fund in /factset/etf/getBySymbol for currency value.
        /// </remarks>
        /// <exception cref="FactSet.SDK.ETFProfileandPrices.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">Market symbol of ETP defined by FactSet.</param>
        /// <param name="timePeriod">Time frame of the data. (optional, default to 1Y)</param>
        /// <param name="alignment">Indicates the reference point for the time series data. (optional)</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="paginationOffset">Non-negative number of entries to skip, or 0 (default). (optional, default to 0.0M)</param>
        /// <param name="paginationLimit">Non-negative maximum number of entries to return. (optional, default to 20.0M)</param>
        /// <returns>ApiResponse of InlineResponse20033</returns>
        ApiResponse<InlineResponse20033> GetFactsetEtfTimeSeriesListBySymbolWithHttpInfo(string symbol, string timePeriod = default(string), string alignment = default(string), List<string> attributes = default(List<string>), decimal? paginationOffset = default(decimal?), decimal? paginationLimit = default(decimal?));
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IFactsetApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// This endpoint returns selected ETP&#39;s asset allocations.
        /// </summary>
        /// <remarks>
        /// This endpoint returns selected ETP&#39;s allocations grouped by asset class. The response will be sorted by weight in descending order.
        /// </remarks>
        /// <exception cref="FactSet.SDK.ETFProfileandPrices.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">Market symbol of ETP defined by FactSet.</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="paginationOffset">Non-negative number of entries to skip, or 0 (default). (optional, default to 0.0M)</param>
        /// <param name="paginationLimit">Non-negative maximum number of entries to return. (optional, default to 20.0M)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse2001</returns>
        System.Threading.Tasks.Task<InlineResponse2001> GetFactsetEtfAllocationAssetListBySymbolAsync(string symbol, List<string> attributes = default(List<string>), decimal? paginationOffset = default(decimal?), decimal? paginationLimit = default(decimal?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// This endpoint returns selected ETP&#39;s asset allocations.
        /// </summary>
        /// <remarks>
        /// This endpoint returns selected ETP&#39;s allocations grouped by asset class. The response will be sorted by weight in descending order.
        /// </remarks>
        /// <exception cref="FactSet.SDK.ETFProfileandPrices.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">Market symbol of ETP defined by FactSet.</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="paginationOffset">Non-negative number of entries to skip, or 0 (default). (optional, default to 0.0M)</param>
        /// <param name="paginationLimit">Non-negative maximum number of entries to return. (optional, default to 20.0M)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse2001)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse2001>> GetFactsetEtfAllocationAssetListBySymbolWithHttpInfoAsync(string symbol, List<string> attributes = default(List<string>), decimal? paginationOffset = default(decimal?), decimal? paginationLimit = default(decimal?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// This endpoint returns selected ETP&#39;s country allocations.
        /// </summary>
        /// <remarks>
        /// This endpoint returns selected ETP&#39;s allocations grouped by country names. The response will be sorted by weight in descending order.
        /// </remarks>
        /// <exception cref="FactSet.SDK.ETFProfileandPrices.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">Market symbol of ETP defined by FactSet.</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="paginationOffset">Non-negative number of entries to skip, or 0 (default). (optional, default to 0.0M)</param>
        /// <param name="paginationLimit">Non-negative maximum number of entries to return. (optional, default to 20.0M)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse2002</returns>
        System.Threading.Tasks.Task<InlineResponse2002> GetFactsetEtfAllocationCountryListBySymbolAsync(string symbol, List<string> attributes = default(List<string>), decimal? paginationOffset = default(decimal?), decimal? paginationLimit = default(decimal?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// This endpoint returns selected ETP&#39;s country allocations.
        /// </summary>
        /// <remarks>
        /// This endpoint returns selected ETP&#39;s allocations grouped by country names. The response will be sorted by weight in descending order.
        /// </remarks>
        /// <exception cref="FactSet.SDK.ETFProfileandPrices.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">Market symbol of ETP defined by FactSet.</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="paginationOffset">Non-negative number of entries to skip, or 0 (default). (optional, default to 0.0M)</param>
        /// <param name="paginationLimit">Non-negative maximum number of entries to return. (optional, default to 20.0M)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse2002)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse2002>> GetFactsetEtfAllocationCountryListBySymbolWithHttpInfoAsync(string symbol, List<string> attributes = default(List<string>), decimal? paginationOffset = default(decimal?), decimal? paginationLimit = default(decimal?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// This endpoint returns selected ETP&#39;s currency allocations.
        /// </summary>
        /// <remarks>
        /// This endpoint returns selected ETP&#39;s allocations grouped by currency. The response will be sorted by weight in descending order.
        /// </remarks>
        /// <exception cref="FactSet.SDK.ETFProfileandPrices.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">Market symbol of ETP defined by FactSet.</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="paginationOffset">Non-negative number of entries to skip, or 0 (default). (optional, default to 0.0M)</param>
        /// <param name="paginationLimit">Non-negative maximum number of entries to return. (optional, default to 20.0M)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse2003</returns>
        System.Threading.Tasks.Task<InlineResponse2003> GetFactsetEtfAllocationCurrencyListBySymbolAsync(string symbol, List<string> attributes = default(List<string>), decimal? paginationOffset = default(decimal?), decimal? paginationLimit = default(decimal?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// This endpoint returns selected ETP&#39;s currency allocations.
        /// </summary>
        /// <remarks>
        /// This endpoint returns selected ETP&#39;s allocations grouped by currency. The response will be sorted by weight in descending order.
        /// </remarks>
        /// <exception cref="FactSet.SDK.ETFProfileandPrices.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">Market symbol of ETP defined by FactSet.</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="paginationOffset">Non-negative number of entries to skip, or 0 (default). (optional, default to 0.0M)</param>
        /// <param name="paginationLimit">Non-negative maximum number of entries to return. (optional, default to 20.0M)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse2003)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse2003>> GetFactsetEtfAllocationCurrencyListBySymbolWithHttpInfoAsync(string symbol, List<string> attributes = default(List<string>), decimal? paginationOffset = default(decimal?), decimal? paginationLimit = default(decimal?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// List of allocations classified by a holding&#39;s economic development status.
        /// </summary>
        /// <remarks>
        /// List of allocations classified by a holding&#39;s economic development status (e.g. developed market, frontier market, emerging market).
        /// </remarks>
        /// <exception cref="FactSet.SDK.ETFProfileandPrices.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">Market symbol of ETP defined by FactSet.</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="paginationOffset">Non-negative number of entries to skip, or 0 (default). (optional, default to 0.0M)</param>
        /// <param name="paginationLimit">Non-negative maximum number of entries to return. (optional, default to 20.0M)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse2004</returns>
        System.Threading.Tasks.Task<InlineResponse2004> GetFactsetEtfAllocationEconomicDevelopmentListBySymbolAsync(string symbol, List<string> attributes = default(List<string>), decimal? paginationOffset = default(decimal?), decimal? paginationLimit = default(decimal?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// List of allocations classified by a holding&#39;s economic development status.
        /// </summary>
        /// <remarks>
        /// List of allocations classified by a holding&#39;s economic development status (e.g. developed market, frontier market, emerging market).
        /// </remarks>
        /// <exception cref="FactSet.SDK.ETFProfileandPrices.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">Market symbol of ETP defined by FactSet.</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="paginationOffset">Non-negative number of entries to skip, or 0 (default). (optional, default to 0.0M)</param>
        /// <param name="paginationLimit">Non-negative maximum number of entries to return. (optional, default to 20.0M)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse2004)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse2004>> GetFactsetEtfAllocationEconomicDevelopmentListBySymbolWithHttpInfoAsync(string symbol, List<string> attributes = default(List<string>), decimal? paginationOffset = default(decimal?), decimal? paginationLimit = default(decimal?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// This endpoint returns selected ETP&#39;s exchange allocations.
        /// </summary>
        /// <remarks>
        /// This endpoint returns selected ETP&#39;s allocations grouped by exchanges. The response will be sorted by weight in descending order.
        /// </remarks>
        /// <exception cref="FactSet.SDK.ETFProfileandPrices.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">Market symbol of ETP defined by FactSet.</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="paginationOffset">Non-negative number of entries to skip, or 0 (default). (optional, default to 0.0M)</param>
        /// <param name="paginationLimit">Non-negative maximum number of entries to return. (optional, default to 20.0M)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse2005</returns>
        System.Threading.Tasks.Task<InlineResponse2005> GetFactsetEtfAllocationExchangeListBySymbolAsync(string symbol, List<string> attributes = default(List<string>), decimal? paginationOffset = default(decimal?), decimal? paginationLimit = default(decimal?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// This endpoint returns selected ETP&#39;s exchange allocations.
        /// </summary>
        /// <remarks>
        /// This endpoint returns selected ETP&#39;s allocations grouped by exchanges. The response will be sorted by weight in descending order.
        /// </remarks>
        /// <exception cref="FactSet.SDK.ETFProfileandPrices.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">Market symbol of ETP defined by FactSet.</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="paginationOffset">Non-negative number of entries to skip, or 0 (default). (optional, default to 0.0M)</param>
        /// <param name="paginationLimit">Non-negative maximum number of entries to return. (optional, default to 20.0M)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse2005)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse2005>> GetFactsetEtfAllocationExchangeListBySymbolWithHttpInfoAsync(string symbol, List<string> attributes = default(List<string>), decimal? paginationOffset = default(decimal?), decimal? paginationLimit = default(decimal?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// This endpoint returns selected ETP&#39;s industry allocations.
        /// </summary>
        /// <remarks>
        /// This endpoint returns selected ETP&#39;s allocations grouped by industry. The response will be sorted by weight in descending order.
        /// </remarks>
        /// <exception cref="FactSet.SDK.ETFProfileandPrices.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">Market symbol of ETP defined by FactSet.</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="paginationOffset">Non-negative number of entries to skip, or 0 (default). (optional, default to 0.0M)</param>
        /// <param name="paginationLimit">Non-negative maximum number of entries to return. (optional, default to 20.0M)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse2006</returns>
        System.Threading.Tasks.Task<InlineResponse2006> GetFactsetEtfAllocationIndustryListBySymbolAsync(string symbol, List<string> attributes = default(List<string>), decimal? paginationOffset = default(decimal?), decimal? paginationLimit = default(decimal?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// This endpoint returns selected ETP&#39;s industry allocations.
        /// </summary>
        /// <remarks>
        /// This endpoint returns selected ETP&#39;s allocations grouped by industry. The response will be sorted by weight in descending order.
        /// </remarks>
        /// <exception cref="FactSet.SDK.ETFProfileandPrices.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">Market symbol of ETP defined by FactSet.</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="paginationOffset">Non-negative number of entries to skip, or 0 (default). (optional, default to 0.0M)</param>
        /// <param name="paginationLimit">Non-negative maximum number of entries to return. (optional, default to 20.0M)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse2006)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse2006>> GetFactsetEtfAllocationIndustryListBySymbolWithHttpInfoAsync(string symbol, List<string> attributes = default(List<string>), decimal? paginationOffset = default(decimal?), decimal? paginationLimit = default(decimal?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// List of allocations classified by a holding&#39;s total market capitalization.
        /// </summary>
        /// <remarks>
        /// List of allocations classified by a holding&#39;s total market capitalization (e.g. Small Cap, Mid Cap, Large Cap). Response will be sorted by weight in descending order.
        /// </remarks>
        /// <exception cref="FactSet.SDK.ETFProfileandPrices.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">Market symbol of ETP defined by FactSet.</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="paginationOffset">Non-negative number of entries to skip, or 0 (default). (optional, default to 0.0M)</param>
        /// <param name="paginationLimit">Non-negative maximum number of entries to return. (optional, default to 20.0M)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse2007</returns>
        System.Threading.Tasks.Task<InlineResponse2007> GetFactsetEtfAllocationMarketCapitalizationListBySymbolAsync(string symbol, List<string> attributes = default(List<string>), decimal? paginationOffset = default(decimal?), decimal? paginationLimit = default(decimal?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// List of allocations classified by a holding&#39;s total market capitalization.
        /// </summary>
        /// <remarks>
        /// List of allocations classified by a holding&#39;s total market capitalization (e.g. Small Cap, Mid Cap, Large Cap). Response will be sorted by weight in descending order.
        /// </remarks>
        /// <exception cref="FactSet.SDK.ETFProfileandPrices.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">Market symbol of ETP defined by FactSet.</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="paginationOffset">Non-negative number of entries to skip, or 0 (default). (optional, default to 0.0M)</param>
        /// <param name="paginationLimit">Non-negative maximum number of entries to return. (optional, default to 20.0M)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse2007)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse2007>> GetFactsetEtfAllocationMarketCapitalizationListBySymbolWithHttpInfoAsync(string symbol, List<string> attributes = default(List<string>), decimal? paginationOffset = default(decimal?), decimal? paginationLimit = default(decimal?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// This endpoint returns selected ETP&#39;s region allocations.
        /// </summary>
        /// <remarks>
        /// This endpoint returns selected ETP&#39;s allocations grouped by region names. The response will be sorted by weight in descending order.
        /// </remarks>
        /// <exception cref="FactSet.SDK.ETFProfileandPrices.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">Market symbol of ETP defined by FactSet.</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="paginationOffset">Non-negative number of entries to skip, or 0 (default). (optional, default to 0.0M)</param>
        /// <param name="paginationLimit">Non-negative maximum number of entries to return. (optional, default to 20.0M)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse2008</returns>
        System.Threading.Tasks.Task<InlineResponse2008> GetFactsetEtfAllocationRegionListBySymbolAsync(string symbol, List<string> attributes = default(List<string>), decimal? paginationOffset = default(decimal?), decimal? paginationLimit = default(decimal?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// This endpoint returns selected ETP&#39;s region allocations.
        /// </summary>
        /// <remarks>
        /// This endpoint returns selected ETP&#39;s allocations grouped by region names. The response will be sorted by weight in descending order.
        /// </remarks>
        /// <exception cref="FactSet.SDK.ETFProfileandPrices.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">Market symbol of ETP defined by FactSet.</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="paginationOffset">Non-negative number of entries to skip, or 0 (default). (optional, default to 0.0M)</param>
        /// <param name="paginationLimit">Non-negative maximum number of entries to return. (optional, default to 20.0M)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse2008)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse2008>> GetFactsetEtfAllocationRegionListBySymbolWithHttpInfoAsync(string symbol, List<string> attributes = default(List<string>), decimal? paginationOffset = default(decimal?), decimal? paginationLimit = default(decimal?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// This endpoint returns selected ETP&#39;s sector allocations.
        /// </summary>
        /// <remarks>
        /// This endpoint returns selected ETP&#39;s allocations grouped by sector names. The response will be sorted by weight in descending order.
        /// </remarks>
        /// <exception cref="FactSet.SDK.ETFProfileandPrices.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">Market symbol of ETP defined by FactSet.</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="paginationOffset">Non-negative number of entries to skip, or 0 (default). (optional, default to 0.0M)</param>
        /// <param name="paginationLimit">Non-negative maximum number of entries to return. (optional, default to 20.0M)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse2009</returns>
        System.Threading.Tasks.Task<InlineResponse2009> GetFactsetEtfAllocationSectorListBySymbolAsync(string symbol, List<string> attributes = default(List<string>), decimal? paginationOffset = default(decimal?), decimal? paginationLimit = default(decimal?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// This endpoint returns selected ETP&#39;s sector allocations.
        /// </summary>
        /// <remarks>
        /// This endpoint returns selected ETP&#39;s allocations grouped by sector names. The response will be sorted by weight in descending order.
        /// </remarks>
        /// <exception cref="FactSet.SDK.ETFProfileandPrices.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">Market symbol of ETP defined by FactSet.</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="paginationOffset">Non-negative number of entries to skip, or 0 (default). (optional, default to 0.0M)</param>
        /// <param name="paginationLimit">Non-negative maximum number of entries to return. (optional, default to 20.0M)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse2009)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse2009>> GetFactsetEtfAllocationSectorListBySymbolWithHttpInfoAsync(string symbol, List<string> attributes = default(List<string>), decimal? paginationOffset = default(decimal?), decimal? paginationLimit = default(decimal?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// FactSet proprietary analytics datapoints for ETPs.
        /// </summary>
        /// <remarks>
        /// FactSet&#39;s proprietary analytical datapoints include ETP attributes specific to lending, corporate actions, and benchmarks.
        /// </remarks>
        /// <exception cref="FactSet.SDK.ETFProfileandPrices.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">Ticker-region of a security as defined by FactSet.</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse20010</returns>
        System.Threading.Tasks.Task<InlineResponse20010> GetFactsetEtfAnalyticsGetBySymbolAsync(string symbol, List<string> attributes = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// FactSet proprietary analytics datapoints for ETPs.
        /// </summary>
        /// <remarks>
        /// FactSet&#39;s proprietary analytical datapoints include ETP attributes specific to lending, corporate actions, and benchmarks.
        /// </remarks>
        /// <exception cref="FactSet.SDK.ETFProfileandPrices.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">Ticker-region of a security as defined by FactSet.</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse20010)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20010>> GetFactsetEtfAnalyticsGetBySymbolWithHttpInfoAsync(string symbol, List<string> attributes = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// FactSet&#39;s portfolio statistics for ETPs.
        /// </summary>
        /// <remarks>
        /// FactSet calculates several proprietary portfolio statistics for ETPs including average maturity, credit quality, price/book ratio, price/earnings ratio, and dividend yield.
        /// </remarks>
        /// <exception cref="FactSet.SDK.ETFProfileandPrices.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">Ticker-region of a security as defined by FactSet.</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse20011</returns>
        System.Threading.Tasks.Task<InlineResponse20011> GetFactsetEtfAnalyticsHoldingsStatisticsGetBySymbolAsync(string symbol, List<string> attributes = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// FactSet&#39;s portfolio statistics for ETPs.
        /// </summary>
        /// <remarks>
        /// FactSet calculates several proprietary portfolio statistics for ETPs including average maturity, credit quality, price/book ratio, price/earnings ratio, and dividend yield.
        /// </remarks>
        /// <exception cref="FactSet.SDK.ETFProfileandPrices.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">Ticker-region of a security as defined by FactSet.</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse20011)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20011>> GetFactsetEtfAnalyticsHoldingsStatisticsGetBySymbolWithHttpInfoAsync(string symbol, List<string> attributes = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// FactSet proprietary ETP rankings.
        /// </summary>
        /// <remarks>
        /// FactSet calculates various proprietary fund rankings including unique scores, fund grades, segment averages, and recommendations.
        /// </remarks>
        /// <exception cref="FactSet.SDK.ETFProfileandPrices.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">Ticker-region of a security as defined by FactSet.</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse20012</returns>
        System.Threading.Tasks.Task<InlineResponse20012> GetFactsetEtfAnalyticsScoreGetBySymbolAsync(string symbol, List<string> attributes = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// FactSet proprietary ETP rankings.
        /// </summary>
        /// <remarks>
        /// FactSet calculates various proprietary fund rankings including unique scores, fund grades, segment averages, and recommendations.
        /// </remarks>
        /// <exception cref="FactSet.SDK.ETFProfileandPrices.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">Ticker-region of a security as defined by FactSet.</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse20012)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20012>> GetFactsetEtfAnalyticsScoreGetBySymbolWithHttpInfoAsync(string symbol, List<string> attributes = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Trade statistics for specific ETP.
        /// </summary>
        /// <remarks>
        /// Various metrics of an ETP&#39;s liquidity including creation metrics, premium/discount, spread, and tracking error statistics.
        /// </remarks>
        /// <exception cref="FactSet.SDK.ETFProfileandPrices.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">Ticker-region of a security as defined by FactSet.</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse20013</returns>
        System.Threading.Tasks.Task<InlineResponse20013> GetFactsetEtfAnalyticsTradeGetBySymbolAsync(string symbol, List<string> attributes = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Trade statistics for specific ETP.
        /// </summary>
        /// <remarks>
        /// Various metrics of an ETP&#39;s liquidity including creation metrics, premium/discount, spread, and tracking error statistics.
        /// </remarks>
        /// <exception cref="FactSet.SDK.ETFProfileandPrices.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">Ticker-region of a security as defined by FactSet.</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse20013)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20013>> GetFactsetEtfAnalyticsTradeGetBySymbolWithHttpInfoAsync(string symbol, List<string> attributes = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieve basic characteristic information for a specified ETP.
        /// </summary>
        /// <remarks>
        /// An ETP has many unique characteristics specific to its composition that differentiate it from other products. This includes details on leverage, hedging, derivatives, and service providers.
        /// </remarks>
        /// <exception cref="FactSet.SDK.ETFProfileandPrices.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">Market symbol of ETF defined by FactSet.</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse20014</returns>
        System.Threading.Tasks.Task<InlineResponse20014> GetFactsetEtfCharacteristicsGetBySymbolAsync(string symbol, List<string> attributes = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieve basic characteristic information for a specified ETP.
        /// </summary>
        /// <remarks>
        /// An ETP has many unique characteristics specific to its composition that differentiate it from other products. This includes details on leverage, hedging, derivatives, and service providers.
        /// </remarks>
        /// <exception cref="FactSet.SDK.ETFProfileandPrices.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">Market symbol of ETF defined by FactSet.</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse20014)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20014>> GetFactsetEtfCharacteristicsGetBySymbolWithHttpInfoAsync(string symbol, List<string> attributes = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// List of ETP class broad categories.
        /// </summary>
        /// <remarks>
        /// List of ETP class broad categories.
        /// </remarks>
        /// <exception cref="FactSet.SDK.ETFProfileandPrices.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse20016</returns>
        System.Threading.Tasks.Task<InlineResponse20016> GetFactsetEtfClassCategoryBroadListAsync(List<string> attributes = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// List of ETP class broad categories.
        /// </summary>
        /// <remarks>
        /// List of ETP class broad categories.
        /// </remarks>
        /// <exception cref="FactSet.SDK.ETFProfileandPrices.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse20016)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20016>> GetFactsetEtfClassCategoryBroadListWithHttpInfoAsync(List<string> attributes = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// List of ETP class focus categories.
        /// </summary>
        /// <remarks>
        /// List of ETP class focus categories.
        /// </remarks>
        /// <exception cref="FactSet.SDK.ETFProfileandPrices.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="paginationOffset">Non-negative number of entries to skip, or 0 (default). (optional, default to 0.0M)</param>
        /// <param name="paginationLimit">Non-negative maximum number of entries to return. (optional, default to 20.0M)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse20017</returns>
        System.Threading.Tasks.Task<InlineResponse20017> GetFactsetEtfClassCategoryFocusListAsync(List<string> attributes = default(List<string>), decimal? paginationOffset = default(decimal?), decimal? paginationLimit = default(decimal?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// List of ETP class focus categories.
        /// </summary>
        /// <remarks>
        /// List of ETP class focus categories.
        /// </remarks>
        /// <exception cref="FactSet.SDK.ETFProfileandPrices.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="paginationOffset">Non-negative number of entries to skip, or 0 (default). (optional, default to 0.0M)</param>
        /// <param name="paginationLimit">Non-negative maximum number of entries to return. (optional, default to 20.0M)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse20017)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20017>> GetFactsetEtfClassCategoryFocusListWithHttpInfoAsync(List<string> attributes = default(List<string>), decimal? paginationOffset = default(decimal?), decimal? paginationLimit = default(decimal?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// List of ETP class niche categories.
        /// </summary>
        /// <remarks>
        /// List of ETP class niche categories.
        /// </remarks>
        /// <exception cref="FactSet.SDK.ETFProfileandPrices.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="paginationOffset">Non-negative number of entries to skip, or 0 (default). (optional, default to 0.0M)</param>
        /// <param name="paginationLimit">Non-negative maximum number of entries to return. (optional, default to 20.0M)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse20018</returns>
        System.Threading.Tasks.Task<InlineResponse20018> GetFactsetEtfClassCategoryNicheListAsync(List<string> attributes = default(List<string>), decimal? paginationOffset = default(decimal?), decimal? paginationLimit = default(decimal?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// List of ETP class niche categories.
        /// </summary>
        /// <remarks>
        /// List of ETP class niche categories.
        /// </remarks>
        /// <exception cref="FactSet.SDK.ETFProfileandPrices.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="paginationOffset">Non-negative number of entries to skip, or 0 (default). (optional, default to 0.0M)</param>
        /// <param name="paginationLimit">Non-negative maximum number of entries to return. (optional, default to 20.0M)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse20018)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20018>> GetFactsetEtfClassCategoryNicheListWithHttpInfoAsync(List<string> attributes = default(List<string>), decimal? paginationOffset = default(decimal?), decimal? paginationLimit = default(decimal?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// List of ETP class geographies.
        /// </summary>
        /// <remarks>
        /// List of ETP class geographies.
        /// </remarks>
        /// <exception cref="FactSet.SDK.ETFProfileandPrices.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse20019</returns>
        System.Threading.Tasks.Task<InlineResponse20019> GetFactsetEtfClassGeographyListAsync(List<string> attributes = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// List of ETP class geographies.
        /// </summary>
        /// <remarks>
        /// List of ETP class geographies.
        /// </remarks>
        /// <exception cref="FactSet.SDK.ETFProfileandPrices.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse20019)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20019>> GetFactsetEtfClassGeographyListWithHttpInfoAsync(List<string> attributes = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieve an ETP&#39;s classification specific to asset class, geography, or investment strategy.
        /// </summary>
        /// <remarks>
        /// ETP classification is divided into three categories: Asset Class, Geography, and Investment Strategy. Asset class is determined based on the various asset types held by the fund, A fund&#39;s geography can be classified by region (e.g. Asia-Pac), specific geography (e.g. China) or economic development (e.g. BRIC). An ETP&#39;s investment strategy is classified in broad categories (e.g. Large Cap) and more granular categorizations.
        /// </remarks>
        /// <exception cref="FactSet.SDK.ETFProfileandPrices.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">Market symbol of ETP defined by FactSet.</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse20015</returns>
        System.Threading.Tasks.Task<InlineResponse20015> GetFactsetEtfClassGetBySymbolAsync(string symbol, List<string> attributes = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieve an ETP&#39;s classification specific to asset class, geography, or investment strategy.
        /// </summary>
        /// <remarks>
        /// ETP classification is divided into three categories: Asset Class, Geography, and Investment Strategy. Asset class is determined based on the various asset types held by the fund, A fund&#39;s geography can be classified by region (e.g. Asia-Pac), specific geography (e.g. China) or economic development (e.g. BRIC). An ETP&#39;s investment strategy is classified in broad categories (e.g. Large Cap) and more granular categorizations.
        /// </remarks>
        /// <exception cref="FactSet.SDK.ETFProfileandPrices.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">Market symbol of ETP defined by FactSet.</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse20015)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20015>> GetFactsetEtfClassGetBySymbolWithHttpInfoAsync(string symbol, List<string> attributes = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// FactSet&#39;s proprietary list of competing companies.
        /// </summary>
        /// <remarks>
        /// FactSet defines and maintains a proprietary list of competing companies based on a number of attributes specific to a fund.
        /// </remarks>
        /// <exception cref="FactSet.SDK.ETFProfileandPrices.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">Ticker-region of a security as defined by FactSet.</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse20020</returns>
        System.Threading.Tasks.Task<InlineResponse20020> GetFactsetEtfCompetitorsListBySymbolAsync(string symbol, List<string> attributes = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// FactSet&#39;s proprietary list of competing companies.
        /// </summary>
        /// <remarks>
        /// FactSet defines and maintains a proprietary list of competing companies based on a number of attributes specific to a fund.
        /// </remarks>
        /// <exception cref="FactSet.SDK.ETFProfileandPrices.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">Ticker-region of a security as defined by FactSet.</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse20020)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20020>> GetFactsetEtfCompetitorsListBySymbolWithHttpInfoAsync(string symbol, List<string> attributes = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieve an ETP&#39;s current distribution details.
        /// </summary>
        /// <remarks>
        /// Retrieve distribution-related details for a specific ETP including dividend and capital gain distribution details.
        /// </remarks>
        /// <exception cref="FactSet.SDK.ETFProfileandPrices.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">Market symbol of ETP defined by FactSet.</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse20021</returns>
        System.Threading.Tasks.Task<InlineResponse20021> GetFactsetEtfDistributionGetBySymbolAsync(string symbol, List<string> attributes = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieve an ETP&#39;s current distribution details.
        /// </summary>
        /// <remarks>
        /// Retrieve distribution-related details for a specific ETP including dividend and capital gain distribution details.
        /// </remarks>
        /// <exception cref="FactSet.SDK.ETFProfileandPrices.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">Market symbol of ETP defined by FactSet.</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse20021)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20021>> GetFactsetEtfDistributionGetBySymbolWithHttpInfoAsync(string symbol, List<string> attributes = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieve an ETP&#39;s cash inflow/outflows for various time periods.
        /// </summary>
        /// <remarks>
        /// Retrieve the amount invested or divested in a specific ETP over various time periods including one-day, one-week, one-month, one-year, and YTD.
        /// </remarks>
        /// <exception cref="FactSet.SDK.ETFProfileandPrices.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">Market symbol of ETP defined by FactSet.</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse20022</returns>
        System.Threading.Tasks.Task<InlineResponse20022> GetFactsetEtfFundFlowsGetBySymbolAsync(string symbol, List<string> attributes = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieve an ETP&#39;s cash inflow/outflows for various time periods.
        /// </summary>
        /// <remarks>
        /// Retrieve the amount invested or divested in a specific ETP over various time periods including one-day, one-week, one-month, one-year, and YTD.
        /// </remarks>
        /// <exception cref="FactSet.SDK.ETFProfileandPrices.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">Market symbol of ETP defined by FactSet.</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse20022)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20022>> GetFactsetEtfFundFlowsGetBySymbolWithHttpInfoAsync(string symbol, List<string> attributes = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieve basic profile information for a specified ETP.
        /// </summary>
        /// <remarks>
        /// An ETP can be profiled by defining several common attributes such as issuer, fund description, and benchmark.
        /// </remarks>
        /// <exception cref="FactSet.SDK.ETFProfileandPrices.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">Market symbol of ETP defined by FactSet.</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse200</returns>
        System.Threading.Tasks.Task<InlineResponse200> GetFactsetEtfGetBySymbolAsync(string symbol, List<string> attributes = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieve basic profile information for a specified ETP.
        /// </summary>
        /// <remarks>
        /// An ETP can be profiled by defining several common attributes such as issuer, fund description, and benchmark.
        /// </remarks>
        /// <exception cref="FactSet.SDK.ETFProfileandPrices.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">Market symbol of ETP defined by FactSet.</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse200)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse200>> GetFactsetEtfGetBySymbolWithHttpInfoAsync(string symbol, List<string> attributes = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// This endpoint returns selected ETP&#39;s Growth of 10K calculated values.
        /// </summary>
        /// <remarks>
        /// Growth of 10K (or growth of 10,000) is a commonly used chart that highlights the change in the value of an initial 10,000 investment in the ETP during a given period of time. Often, this period of time is either since inception or the calculation between the pre-defined range.
        /// </remarks>
        /// <exception cref="FactSet.SDK.ETFProfileandPrices.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">Market symbol of ETP defined by FactSet.</param>
        /// <param name="timePeriod">Historice NAV date value. (optional)</param>
        /// <param name="calculationType">Historice NAV date value. (optional)</param>
        /// <param name="alignment">Indicates the reference point for growth of 10k data. (optional)</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="paginationOffset">Non-negative number of entries to skip, or 0 (default). (optional, default to 0.0M)</param>
        /// <param name="paginationLimit">Non-negative maximum number of entries to return. (optional, default to 20.0M)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse20023</returns>
        System.Threading.Tasks.Task<InlineResponse20023> GetFactsetEtfGrowthOfTenKListBySymbolAsync(string symbol, string timePeriod = default(string), string calculationType = default(string), string alignment = default(string), List<string> attributes = default(List<string>), decimal? paginationOffset = default(decimal?), decimal? paginationLimit = default(decimal?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// This endpoint returns selected ETP&#39;s Growth of 10K calculated values.
        /// </summary>
        /// <remarks>
        /// Growth of 10K (or growth of 10,000) is a commonly used chart that highlights the change in the value of an initial 10,000 investment in the ETP during a given period of time. Often, this period of time is either since inception or the calculation between the pre-defined range.
        /// </remarks>
        /// <exception cref="FactSet.SDK.ETFProfileandPrices.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">Market symbol of ETP defined by FactSet.</param>
        /// <param name="timePeriod">Historice NAV date value. (optional)</param>
        /// <param name="calculationType">Historice NAV date value. (optional)</param>
        /// <param name="alignment">Indicates the reference point for growth of 10k data. (optional)</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="paginationOffset">Non-negative number of entries to skip, or 0 (default). (optional, default to 0.0M)</param>
        /// <param name="paginationLimit">Non-negative maximum number of entries to return. (optional, default to 20.0M)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse20023)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20023>> GetFactsetEtfGrowthOfTenKListBySymbolWithHttpInfoAsync(string symbol, string timePeriod = default(string), string calculationType = default(string), string alignment = default(string), List<string> attributes = default(List<string>), decimal? paginationOffset = default(decimal?), decimal? paginationLimit = default(decimal?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Holdings details for an individual ETP.
        /// </summary>
        /// <remarks>
        /// Retrieve an ETP&#39;s holdings information including security, shares held, and weight.
        /// </remarks>
        /// <exception cref="FactSet.SDK.ETFProfileandPrices.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">Market symbol of ETP defined by FactSet.</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="paginationOffset">Non-negative number of entries to skip, or 0 (default). (optional, default to 0.0M)</param>
        /// <param name="paginationLimit">Non-negative maximum number of entries to return. (optional, default to 20.0M)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse20024</returns>
        System.Threading.Tasks.Task<InlineResponse20024> GetFactsetEtfHoldingsListBySymbolAsync(string symbol, List<string> attributes = default(List<string>), decimal? paginationOffset = default(decimal?), decimal? paginationLimit = default(decimal?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Holdings details for an individual ETP.
        /// </summary>
        /// <remarks>
        /// Retrieve an ETP&#39;s holdings information including security, shares held, and weight.
        /// </remarks>
        /// <exception cref="FactSet.SDK.ETFProfileandPrices.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">Market symbol of ETP defined by FactSet.</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="paginationOffset">Non-negative number of entries to skip, or 0 (default). (optional, default to 0.0M)</param>
        /// <param name="paginationLimit">Non-negative maximum number of entries to return. (optional, default to 20.0M)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse20024)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20024>> GetFactsetEtfHoldingsListBySymbolWithHttpInfoAsync(string symbol, List<string> attributes = default(List<string>), decimal? paginationOffset = default(decimal?), decimal? paginationLimit = default(decimal?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Market aggregate data for ETPs.
        /// </summary>
        /// <remarks>
        /// Market Aggregates combines FactSet Estimates, FactSet Fundamentals, and FactSet Prices data to derive ratios and per share values on an aggregate level. The resulting index values can be used to identify market trends and compare a combination of portfolios, benchmarks, and individual securities.
        /// </remarks>
        /// <exception cref="FactSet.SDK.ETFProfileandPrices.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">Ticker-region of an ETP as defined by FactSet.</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse20025</returns>
        System.Threading.Tasks.Task<InlineResponse20025> GetFactsetEtfMarketAggregatesGetBySymbolAsync(string symbol, List<string> attributes = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Market aggregate data for ETPs.
        /// </summary>
        /// <remarks>
        /// Market Aggregates combines FactSet Estimates, FactSet Fundamentals, and FactSet Prices data to derive ratios and per share values on an aggregate level. The resulting index values can be used to identify market trends and compare a combination of portfolios, benchmarks, and individual securities.
        /// </remarks>
        /// <exception cref="FactSet.SDK.ETFProfileandPrices.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">Ticker-region of an ETP as defined by FactSet.</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse20025)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20025>> GetFactsetEtfMarketAggregatesGetBySymbolWithHttpInfoAsync(string symbol, List<string> attributes = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Summary of ETP premium discount data.
        /// </summary>
        /// <remarks>
        /// Summary of ETP premium discount data.
        /// </remarks>
        /// <exception cref="FactSet.SDK.ETFProfileandPrices.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">Market symbol of ETP defined by FactSet.</param>
        /// <param name="timePeriod">Time frame of the data. (optional, default to YTD)</param>
        /// <param name="alignment">Indicates the reference point for the historical NAV and price values. (optional, default to quarter-end)</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="paginationOffset">Non-negative number of entries to skip, or 0 (default). (optional, default to 0.0M)</param>
        /// <param name="paginationLimit">Non-negative maximum number of entries to return. (optional, default to 20.0M)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse20026</returns>
        System.Threading.Tasks.Task<InlineResponse20026> GetFactsetEtfPremiumDiscountSummaryListBySymbolAsync(string symbol, string timePeriod = default(string), string alignment = default(string), List<string> attributes = default(List<string>), decimal? paginationOffset = default(decimal?), decimal? paginationLimit = default(decimal?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Summary of ETP premium discount data.
        /// </summary>
        /// <remarks>
        /// Summary of ETP premium discount data.
        /// </remarks>
        /// <exception cref="FactSet.SDK.ETFProfileandPrices.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">Market symbol of ETP defined by FactSet.</param>
        /// <param name="timePeriod">Time frame of the data. (optional, default to YTD)</param>
        /// <param name="alignment">Indicates the reference point for the historical NAV and price values. (optional, default to quarter-end)</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="paginationOffset">Non-negative number of entries to skip, or 0 (default). (optional, default to 0.0M)</param>
        /// <param name="paginationLimit">Non-negative maximum number of entries to return. (optional, default to 20.0M)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse20026)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20026>> GetFactsetEtfPremiumDiscountSummaryListBySymbolWithHttpInfoAsync(string symbol, string timePeriod = default(string), string alignment = default(string), List<string> attributes = default(List<string>), decimal? paginationOffset = default(decimal?), decimal? paginationLimit = default(decimal?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieve historical ETP NAV values.
        /// </summary>
        /// <remarks>
        /// Retrieve an ETP&#39;s historical NAV and shares outstanding for a specified time range.
        /// </remarks>
        /// <exception cref="FactSet.SDK.ETFProfileandPrices.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">Market symbol of ETP defined by FactSet.</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse20027</returns>
        System.Threading.Tasks.Task<InlineResponse20027> GetFactsetEtfPriceGetBySymbolAsync(string symbol, List<string> attributes = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieve historical ETP NAV values.
        /// </summary>
        /// <remarks>
        /// Retrieve an ETP&#39;s historical NAV and shares outstanding for a specified time range.
        /// </remarks>
        /// <exception cref="FactSet.SDK.ETFProfileandPrices.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">Market symbol of ETP defined by FactSet.</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse20027)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20027>> GetFactsetEtfPriceGetBySymbolWithHttpInfoAsync(string symbol, List<string> attributes = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieve total return data for a specified ETP.
        /// </summary>
        /// <remarks>
        /// An ETP&#39;s total return data can be returned for various time frames including 1-month, 3-month, YTD, 1-year, 3-year, and 5-year. Total return calculations include price performance plus reinvested and compounded distributions. Market price is used to calcualte market returns. Portfolio nav is used to calcualte nav returns.
        /// </remarks>
        /// <exception cref="FactSet.SDK.ETFProfileandPrices.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">Market symbol of ETP defined by FactSet.</param>
        /// <param name="returnType">Return type. (optional, default to price)</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse20028</returns>
        System.Threading.Tasks.Task<InlineResponse20028> GetFactsetEtfReturnsGetBySymbolAsync(string symbol, string returnType = default(string), List<string> attributes = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieve total return data for a specified ETP.
        /// </summary>
        /// <remarks>
        /// An ETP&#39;s total return data can be returned for various time frames including 1-month, 3-month, YTD, 1-year, 3-year, and 5-year. Total return calculations include price performance plus reinvested and compounded distributions. Market price is used to calcualte market returns. Portfolio nav is used to calcualte nav returns.
        /// </remarks>
        /// <exception cref="FactSet.SDK.ETFProfileandPrices.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">Market symbol of ETP defined by FactSet.</param>
        /// <param name="returnType">Return type. (optional, default to price)</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse20028)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20028>> GetFactsetEtfReturnsGetBySymbolWithHttpInfoAsync(string symbol, string returnType = default(string), List<string> attributes = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieve various classification details for a specified ETP.
        /// </summary>
        /// <remarks>
        /// ETP&#39;s can be classified in many different ways including investment strategy, security weightings, and fund composition.
        /// </remarks>
        /// <exception cref="FactSet.SDK.ETFProfileandPrices.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">Market symbol of ETP defined by FactSet.</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse20029</returns>
        System.Threading.Tasks.Task<InlineResponse20029> GetFactsetEtfStrategyGetBySymbolAsync(string symbol, List<string> attributes = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieve various classification details for a specified ETP.
        /// </summary>
        /// <remarks>
        /// ETP&#39;s can be classified in many different ways including investment strategy, security weightings, and fund composition.
        /// </remarks>
        /// <exception cref="FactSet.SDK.ETFProfileandPrices.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">Market symbol of ETP defined by FactSet.</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse20029)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20029>> GetFactsetEtfStrategyGetBySymbolWithHttpInfoAsync(string symbol, List<string> attributes = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieve a list of ETP strategy segments.
        /// </summary>
        /// <remarks>
        /// Retrieve the various segments assigned to a specific ETP. Segment data is used to group funds for comparison and relative performance analyses.
        /// </remarks>
        /// <exception cref="FactSet.SDK.ETFProfileandPrices.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="paginationOffset">Non-negative number of entries to skip, or 0 (default). (optional, default to 0.0M)</param>
        /// <param name="paginationLimit">Non-negative maximum number of entries to return. (optional, default to 20.0M)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse20030</returns>
        System.Threading.Tasks.Task<InlineResponse20030> GetFactsetEtfStrategySegmentListAsync(List<string> attributes = default(List<string>), decimal? paginationOffset = default(decimal?), decimal? paginationLimit = default(decimal?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieve a list of ETP strategy segments.
        /// </summary>
        /// <remarks>
        /// Retrieve the various segments assigned to a specific ETP. Segment data is used to group funds for comparison and relative performance analyses.
        /// </remarks>
        /// <exception cref="FactSet.SDK.ETFProfileandPrices.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="paginationOffset">Non-negative number of entries to skip, or 0 (default). (optional, default to 0.0M)</param>
        /// <param name="paginationLimit">Non-negative maximum number of entries to return. (optional, default to 20.0M)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse20030)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20030>> GetFactsetEtfStrategySegmentListWithHttpInfoAsync(List<string> attributes = default(List<string>), decimal? paginationOffset = default(decimal?), decimal? paginationLimit = default(decimal?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieve the basic structure information for a specified ETP.
        /// </summary>
        /// <remarks>
        /// Retrieve details on a fund&#39;s structure including its type, investment style (active/passive), and legal structure.
        /// </remarks>
        /// <exception cref="FactSet.SDK.ETFProfileandPrices.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">Market symbol of ETP defined by FactSet.</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse20031</returns>
        System.Threading.Tasks.Task<InlineResponse20031> GetFactsetEtfStructureGetBySymbolAsync(string symbol, List<string> attributes = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieve the basic structure information for a specified ETP.
        /// </summary>
        /// <remarks>
        /// Retrieve details on a fund&#39;s structure including its type, investment style (active/passive), and legal structure.
        /// </remarks>
        /// <exception cref="FactSet.SDK.ETFProfileandPrices.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">Market symbol of ETP defined by FactSet.</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse20031)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20031>> GetFactsetEtfStructureGetBySymbolWithHttpInfoAsync(string symbol, List<string> attributes = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieve the tax and fee related information for a specified ETP.
        /// </summary>
        /// <remarks>
        /// Retrieve various fee and tax related details on a specified ETP including expense ratio and tax treatment for dividends and capital gains.
        /// </remarks>
        /// <exception cref="FactSet.SDK.ETFProfileandPrices.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">Market symbol of ETP defined by FactSet.</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse20032</returns>
        System.Threading.Tasks.Task<InlineResponse20032> GetFactsetEtfTaxesAndFeesUsGetBySymbolAsync(string symbol, List<string> attributes = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieve the tax and fee related information for a specified ETP.
        /// </summary>
        /// <remarks>
        /// Retrieve various fee and tax related details on a specified ETP including expense ratio and tax treatment for dividends and capital gains.
        /// </remarks>
        /// <exception cref="FactSet.SDK.ETFProfileandPrices.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">Market symbol of ETP defined by FactSet.</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse20032)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20032>> GetFactsetEtfTaxesAndFeesUsGetBySymbolWithHttpInfoAsync(string symbol, List<string> attributes = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieve historical NAV data for a specified ETP.
        /// </summary>
        /// <remarks>
        /// Retrieve the historical NAV data and the respective fund flows and shares outstanding for a specified fund and time period. Please refer currency.fund in /factset/etf/getBySymbol for currency value.
        /// </remarks>
        /// <exception cref="FactSet.SDK.ETFProfileandPrices.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">Market symbol of ETP defined by FactSet.</param>
        /// <param name="timePeriod">Time frame of the data. (optional, default to 1Y)</param>
        /// <param name="alignment">Indicates the reference point for the time series data. (optional)</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="paginationOffset">Non-negative number of entries to skip, or 0 (default). (optional, default to 0.0M)</param>
        /// <param name="paginationLimit">Non-negative maximum number of entries to return. (optional, default to 20.0M)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse20033</returns>
        System.Threading.Tasks.Task<InlineResponse20033> GetFactsetEtfTimeSeriesListBySymbolAsync(string symbol, string timePeriod = default(string), string alignment = default(string), List<string> attributes = default(List<string>), decimal? paginationOffset = default(decimal?), decimal? paginationLimit = default(decimal?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieve historical NAV data for a specified ETP.
        /// </summary>
        /// <remarks>
        /// Retrieve the historical NAV data and the respective fund flows and shares outstanding for a specified fund and time period. Please refer currency.fund in /factset/etf/getBySymbol for currency value.
        /// </remarks>
        /// <exception cref="FactSet.SDK.ETFProfileandPrices.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">Market symbol of ETP defined by FactSet.</param>
        /// <param name="timePeriod">Time frame of the data. (optional, default to 1Y)</param>
        /// <param name="alignment">Indicates the reference point for the time series data. (optional)</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="paginationOffset">Non-negative number of entries to skip, or 0 (default). (optional, default to 0.0M)</param>
        /// <param name="paginationLimit">Non-negative maximum number of entries to return. (optional, default to 20.0M)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse20033)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20033>> GetFactsetEtfTimeSeriesListBySymbolWithHttpInfoAsync(string symbol, string timePeriod = default(string), string alignment = default(string), List<string> attributes = default(List<string>), decimal? paginationOffset = default(decimal?), decimal? paginationLimit = default(decimal?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IFactsetApi : IFactsetApiSync, IFactsetApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class FactsetApi : IFactsetApi
    {
        private FactSet.SDK.ETFProfileandPrices.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        # region Response Type Disctionaries
                private static readonly Dictionary<HttpStatusCode, System.Type> GetFactsetEtfAllocationAssetListBySymbolResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)200, typeof(InlineResponse2001) },
        };
        private static readonly Dictionary<HttpStatusCode, System.Type> GetFactsetEtfAllocationCountryListBySymbolResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)200, typeof(InlineResponse2002) },
        };
        private static readonly Dictionary<HttpStatusCode, System.Type> GetFactsetEtfAllocationCurrencyListBySymbolResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)200, typeof(InlineResponse2003) },
        };
        private static readonly Dictionary<HttpStatusCode, System.Type> GetFactsetEtfAllocationEconomicDevelopmentListBySymbolResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)200, typeof(InlineResponse2004) },
        };
        private static readonly Dictionary<HttpStatusCode, System.Type> GetFactsetEtfAllocationExchangeListBySymbolResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)200, typeof(InlineResponse2005) },
        };
        private static readonly Dictionary<HttpStatusCode, System.Type> GetFactsetEtfAllocationIndustryListBySymbolResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)200, typeof(InlineResponse2006) },
        };
        private static readonly Dictionary<HttpStatusCode, System.Type> GetFactsetEtfAllocationMarketCapitalizationListBySymbolResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)200, typeof(InlineResponse2007) },
        };
        private static readonly Dictionary<HttpStatusCode, System.Type> GetFactsetEtfAllocationRegionListBySymbolResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)200, typeof(InlineResponse2008) },
        };
        private static readonly Dictionary<HttpStatusCode, System.Type> GetFactsetEtfAllocationSectorListBySymbolResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)200, typeof(InlineResponse2009) },
        };
        private static readonly Dictionary<HttpStatusCode, System.Type> GetFactsetEtfAnalyticsGetBySymbolResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)200, typeof(InlineResponse20010) },
        };
        private static readonly Dictionary<HttpStatusCode, System.Type> GetFactsetEtfAnalyticsHoldingsStatisticsGetBySymbolResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)200, typeof(InlineResponse20011) },
        };
        private static readonly Dictionary<HttpStatusCode, System.Type> GetFactsetEtfAnalyticsScoreGetBySymbolResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)200, typeof(InlineResponse20012) },
        };
        private static readonly Dictionary<HttpStatusCode, System.Type> GetFactsetEtfAnalyticsTradeGetBySymbolResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)200, typeof(InlineResponse20013) },
        };
        private static readonly Dictionary<HttpStatusCode, System.Type> GetFactsetEtfCharacteristicsGetBySymbolResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)200, typeof(InlineResponse20014) },
        };
        private static readonly Dictionary<HttpStatusCode, System.Type> GetFactsetEtfClassCategoryBroadListResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)200, typeof(InlineResponse20016) },
        };
        private static readonly Dictionary<HttpStatusCode, System.Type> GetFactsetEtfClassCategoryFocusListResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)200, typeof(InlineResponse20017) },
        };
        private static readonly Dictionary<HttpStatusCode, System.Type> GetFactsetEtfClassCategoryNicheListResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)200, typeof(InlineResponse20018) },
        };
        private static readonly Dictionary<HttpStatusCode, System.Type> GetFactsetEtfClassGeographyListResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)200, typeof(InlineResponse20019) },
        };
        private static readonly Dictionary<HttpStatusCode, System.Type> GetFactsetEtfClassGetBySymbolResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)200, typeof(InlineResponse20015) },
        };
        private static readonly Dictionary<HttpStatusCode, System.Type> GetFactsetEtfCompetitorsListBySymbolResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)200, typeof(InlineResponse20020) },
        };
        private static readonly Dictionary<HttpStatusCode, System.Type> GetFactsetEtfDistributionGetBySymbolResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)200, typeof(InlineResponse20021) },
        };
        private static readonly Dictionary<HttpStatusCode, System.Type> GetFactsetEtfFundFlowsGetBySymbolResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)200, typeof(InlineResponse20022) },
        };
        private static readonly Dictionary<HttpStatusCode, System.Type> GetFactsetEtfGetBySymbolResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)200, typeof(InlineResponse200) },
        };
        private static readonly Dictionary<HttpStatusCode, System.Type> GetFactsetEtfGrowthOfTenKListBySymbolResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)200, typeof(InlineResponse20023) },
        };
        private static readonly Dictionary<HttpStatusCode, System.Type> GetFactsetEtfHoldingsListBySymbolResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)200, typeof(InlineResponse20024) },
        };
        private static readonly Dictionary<HttpStatusCode, System.Type> GetFactsetEtfMarketAggregatesGetBySymbolResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)200, typeof(InlineResponse20025) },
        };
        private static readonly Dictionary<HttpStatusCode, System.Type> GetFactsetEtfPremiumDiscountSummaryListBySymbolResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)200, typeof(InlineResponse20026) },
        };
        private static readonly Dictionary<HttpStatusCode, System.Type> GetFactsetEtfPriceGetBySymbolResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)200, typeof(InlineResponse20027) },
        };
        private static readonly Dictionary<HttpStatusCode, System.Type> GetFactsetEtfReturnsGetBySymbolResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)200, typeof(InlineResponse20028) },
        };
        private static readonly Dictionary<HttpStatusCode, System.Type> GetFactsetEtfStrategyGetBySymbolResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)200, typeof(InlineResponse20029) },
        };
        private static readonly Dictionary<HttpStatusCode, System.Type> GetFactsetEtfStrategySegmentListResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)200, typeof(InlineResponse20030) },
        };
        private static readonly Dictionary<HttpStatusCode, System.Type> GetFactsetEtfStructureGetBySymbolResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)200, typeof(InlineResponse20031) },
        };
        private static readonly Dictionary<HttpStatusCode, System.Type> GetFactsetEtfTaxesAndFeesUsGetBySymbolResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)200, typeof(InlineResponse20032) },
        };
        private static readonly Dictionary<HttpStatusCode, System.Type> GetFactsetEtfTimeSeriesListBySymbolResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)200, typeof(InlineResponse20033) },
        };

        # endregion Response Type Disctionaries

        # region Api Response Objects
         

        # endregion Api Response Objects

        /// <summary>
        /// Initializes a new instance of the <see cref="FactsetApi"/> class.
        /// </summary>
        /// <returns></returns>
        public FactsetApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="FactsetApi"/> class.
        /// </summary>
        /// <returns></returns>
        public FactsetApi(string basePath)
        {
            this.Configuration = FactSet.SDK.ETFProfileandPrices.Client.Configuration.MergeConfigurations(
                FactSet.SDK.ETFProfileandPrices.Client.GlobalConfiguration.Instance,
                new FactSet.SDK.ETFProfileandPrices.Client.Configuration { BasePath = basePath }
            );
            this.Client = new FactSet.SDK.ETFProfileandPrices.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new FactSet.SDK.ETFProfileandPrices.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = FactSet.SDK.ETFProfileandPrices.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="FactsetApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public FactsetApi(FactSet.SDK.ETFProfileandPrices.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = FactSet.SDK.ETFProfileandPrices.Client.Configuration.MergeConfigurations(
                FactSet.SDK.ETFProfileandPrices.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new FactSet.SDK.ETFProfileandPrices.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new FactSet.SDK.ETFProfileandPrices.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = FactSet.SDK.ETFProfileandPrices.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="FactsetApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public FactsetApi(FactSet.SDK.ETFProfileandPrices.Client.ISynchronousClient client, FactSet.SDK.ETFProfileandPrices.Client.IAsynchronousClient asyncClient, FactSet.SDK.ETFProfileandPrices.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = FactSet.SDK.ETFProfileandPrices.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public FactSet.SDK.ETFProfileandPrices.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public FactSet.SDK.ETFProfileandPrices.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public FactSet.SDK.ETFProfileandPrices.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public FactSet.SDK.ETFProfileandPrices.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// This endpoint returns selected ETP&#39;s asset allocations. This endpoint returns selected ETP&#39;s allocations grouped by asset class. The response will be sorted by weight in descending order.
        /// </summary>
        /// <exception cref="FactSet.SDK.ETFProfileandPrices.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">Market symbol of ETP defined by FactSet.</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="paginationOffset">Non-negative number of entries to skip, or 0 (default). (optional, default to 0.0M)</param>
        /// <param name="paginationLimit">Non-negative maximum number of entries to return. (optional, default to 20.0M)</param>
        /// <returns>InlineResponse2001</returns>
        public InlineResponse2001 GetFactsetEtfAllocationAssetListBySymbol(string symbol, List<string> attributes = default(List<string>), decimal? paginationOffset = default(decimal?), decimal? paginationLimit = default(decimal?))
        {
            var localVarResponse = GetFactsetEtfAllocationAssetListBySymbolWithHttpInfo(symbol, attributes, paginationOffset, paginationLimit);
            return localVarResponse.Data;
        }

        /// <summary>
        /// This endpoint returns selected ETP&#39;s asset allocations. This endpoint returns selected ETP&#39;s allocations grouped by asset class. The response will be sorted by weight in descending order.
        /// </summary>
        /// <exception cref="FactSet.SDK.ETFProfileandPrices.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">Market symbol of ETP defined by FactSet.</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="paginationOffset">Non-negative number of entries to skip, or 0 (default). (optional, default to 0.0M)</param>
        /// <param name="paginationLimit">Non-negative maximum number of entries to return. (optional, default to 20.0M)</param>
        /// <returns>ApiResponse of InlineResponse2001</returns>
        public ApiResponse<InlineResponse2001> GetFactsetEtfAllocationAssetListBySymbolWithHttpInfo(string symbol, List<string> attributes = default(List<string>), decimal? paginationOffset = default(decimal?), decimal? paginationLimit = default(decimal?))
        {
            // verify the required parameter 'symbol' is set
            if (symbol == null)
            {
                throw new FactSet.SDK.ETFProfileandPrices.Client.ApiException(400, "Missing required parameter 'symbol' when calling FactsetApi->GetFactsetEtfAllocationAssetListBySymbol");
            }

            FactSet.SDK.ETFProfileandPrices.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.ETFProfileandPrices.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.ParameterToMultiMap("", "symbol", symbol));
            if (attributes != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.ParameterToMultiMap("csv", "_attributes", attributes));
            }
            if (paginationOffset != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.ParameterToMultiMap("", "_paginationOffset", paginationOffset));
            }
            if (paginationLimit != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.ParameterToMultiMap("", "_paginationLimit", paginationLimit));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = GetFactsetEtfAllocationAssetListBySymbolResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Get<
            InlineResponse2001>("/factset/etf/allocation/asset/listBySymbol", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetFactsetEtfAllocationAssetListBySymbol", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// This endpoint returns selected ETP&#39;s asset allocations. This endpoint returns selected ETP&#39;s allocations grouped by asset class. The response will be sorted by weight in descending order.
        /// </summary>
        /// <exception cref="FactSet.SDK.ETFProfileandPrices.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">Market symbol of ETP defined by FactSet.</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="paginationOffset">Non-negative number of entries to skip, or 0 (default). (optional, default to 0.0M)</param>
        /// <param name="paginationLimit">Non-negative maximum number of entries to return. (optional, default to 20.0M)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse2001</returns>
        public async System.Threading.Tasks.Task<InlineResponse2001>GetFactsetEtfAllocationAssetListBySymbolAsync(string symbol, List<string> attributes = default(List<string>), decimal? paginationOffset = default(decimal?), decimal? paginationLimit = default(decimal?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await GetFactsetEtfAllocationAssetListBySymbolWithHttpInfoAsync(symbol, attributes, paginationOffset, paginationLimit, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// This endpoint returns selected ETP&#39;s asset allocations. This endpoint returns selected ETP&#39;s allocations grouped by asset class. The response will be sorted by weight in descending order.
        /// </summary>
        /// <exception cref="FactSet.SDK.ETFProfileandPrices.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">Market symbol of ETP defined by FactSet.</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="paginationOffset">Non-negative number of entries to skip, or 0 (default). (optional, default to 0.0M)</param>
        /// <param name="paginationLimit">Non-negative maximum number of entries to return. (optional, default to 20.0M)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse2001)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse2001>> GetFactsetEtfAllocationAssetListBySymbolWithHttpInfoAsync(string symbol, List<string> attributes = default(List<string>), decimal? paginationOffset = default(decimal?), decimal? paginationLimit = default(decimal?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'symbol' is set
            if (symbol == null)
            {
                throw new FactSet.SDK.ETFProfileandPrices.Client.ApiException(400, "Missing required parameter 'symbol' when calling FactsetApi->GetFactsetEtfAllocationAssetListBySymbol");
            }


            FactSet.SDK.ETFProfileandPrices.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.ETFProfileandPrices.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.ParameterToMultiMap("", "symbol", symbol));
            if (attributes != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.ParameterToMultiMap("csv", "_attributes", attributes));
            }
            if (paginationOffset != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.ParameterToMultiMap("", "_paginationOffset", paginationOffset));
            }
            if (paginationLimit != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.ParameterToMultiMap("", "_paginationLimit", paginationLimit));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = GetFactsetEtfAllocationAssetListBySymbolResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<InlineResponse2001>("/factset/etf/allocation/asset/listBySymbol", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetFactsetEtfAllocationAssetListBySymbol", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// This endpoint returns selected ETP&#39;s country allocations. This endpoint returns selected ETP&#39;s allocations grouped by country names. The response will be sorted by weight in descending order.
        /// </summary>
        /// <exception cref="FactSet.SDK.ETFProfileandPrices.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">Market symbol of ETP defined by FactSet.</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="paginationOffset">Non-negative number of entries to skip, or 0 (default). (optional, default to 0.0M)</param>
        /// <param name="paginationLimit">Non-negative maximum number of entries to return. (optional, default to 20.0M)</param>
        /// <returns>InlineResponse2002</returns>
        public InlineResponse2002 GetFactsetEtfAllocationCountryListBySymbol(string symbol, List<string> attributes = default(List<string>), decimal? paginationOffset = default(decimal?), decimal? paginationLimit = default(decimal?))
        {
            var localVarResponse = GetFactsetEtfAllocationCountryListBySymbolWithHttpInfo(symbol, attributes, paginationOffset, paginationLimit);
            return localVarResponse.Data;
        }

        /// <summary>
        /// This endpoint returns selected ETP&#39;s country allocations. This endpoint returns selected ETP&#39;s allocations grouped by country names. The response will be sorted by weight in descending order.
        /// </summary>
        /// <exception cref="FactSet.SDK.ETFProfileandPrices.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">Market symbol of ETP defined by FactSet.</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="paginationOffset">Non-negative number of entries to skip, or 0 (default). (optional, default to 0.0M)</param>
        /// <param name="paginationLimit">Non-negative maximum number of entries to return. (optional, default to 20.0M)</param>
        /// <returns>ApiResponse of InlineResponse2002</returns>
        public ApiResponse<InlineResponse2002> GetFactsetEtfAllocationCountryListBySymbolWithHttpInfo(string symbol, List<string> attributes = default(List<string>), decimal? paginationOffset = default(decimal?), decimal? paginationLimit = default(decimal?))
        {
            // verify the required parameter 'symbol' is set
            if (symbol == null)
            {
                throw new FactSet.SDK.ETFProfileandPrices.Client.ApiException(400, "Missing required parameter 'symbol' when calling FactsetApi->GetFactsetEtfAllocationCountryListBySymbol");
            }

            FactSet.SDK.ETFProfileandPrices.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.ETFProfileandPrices.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.ParameterToMultiMap("", "symbol", symbol));
            if (attributes != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.ParameterToMultiMap("csv", "_attributes", attributes));
            }
            if (paginationOffset != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.ParameterToMultiMap("", "_paginationOffset", paginationOffset));
            }
            if (paginationLimit != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.ParameterToMultiMap("", "_paginationLimit", paginationLimit));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = GetFactsetEtfAllocationCountryListBySymbolResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Get<
            InlineResponse2002>("/factset/etf/allocation/country/listBySymbol", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetFactsetEtfAllocationCountryListBySymbol", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// This endpoint returns selected ETP&#39;s country allocations. This endpoint returns selected ETP&#39;s allocations grouped by country names. The response will be sorted by weight in descending order.
        /// </summary>
        /// <exception cref="FactSet.SDK.ETFProfileandPrices.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">Market symbol of ETP defined by FactSet.</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="paginationOffset">Non-negative number of entries to skip, or 0 (default). (optional, default to 0.0M)</param>
        /// <param name="paginationLimit">Non-negative maximum number of entries to return. (optional, default to 20.0M)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse2002</returns>
        public async System.Threading.Tasks.Task<InlineResponse2002>GetFactsetEtfAllocationCountryListBySymbolAsync(string symbol, List<string> attributes = default(List<string>), decimal? paginationOffset = default(decimal?), decimal? paginationLimit = default(decimal?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await GetFactsetEtfAllocationCountryListBySymbolWithHttpInfoAsync(symbol, attributes, paginationOffset, paginationLimit, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// This endpoint returns selected ETP&#39;s country allocations. This endpoint returns selected ETP&#39;s allocations grouped by country names. The response will be sorted by weight in descending order.
        /// </summary>
        /// <exception cref="FactSet.SDK.ETFProfileandPrices.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">Market symbol of ETP defined by FactSet.</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="paginationOffset">Non-negative number of entries to skip, or 0 (default). (optional, default to 0.0M)</param>
        /// <param name="paginationLimit">Non-negative maximum number of entries to return. (optional, default to 20.0M)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse2002)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse2002>> GetFactsetEtfAllocationCountryListBySymbolWithHttpInfoAsync(string symbol, List<string> attributes = default(List<string>), decimal? paginationOffset = default(decimal?), decimal? paginationLimit = default(decimal?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'symbol' is set
            if (symbol == null)
            {
                throw new FactSet.SDK.ETFProfileandPrices.Client.ApiException(400, "Missing required parameter 'symbol' when calling FactsetApi->GetFactsetEtfAllocationCountryListBySymbol");
            }


            FactSet.SDK.ETFProfileandPrices.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.ETFProfileandPrices.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.ParameterToMultiMap("", "symbol", symbol));
            if (attributes != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.ParameterToMultiMap("csv", "_attributes", attributes));
            }
            if (paginationOffset != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.ParameterToMultiMap("", "_paginationOffset", paginationOffset));
            }
            if (paginationLimit != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.ParameterToMultiMap("", "_paginationLimit", paginationLimit));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = GetFactsetEtfAllocationCountryListBySymbolResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<InlineResponse2002>("/factset/etf/allocation/country/listBySymbol", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetFactsetEtfAllocationCountryListBySymbol", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// This endpoint returns selected ETP&#39;s currency allocations. This endpoint returns selected ETP&#39;s allocations grouped by currency. The response will be sorted by weight in descending order.
        /// </summary>
        /// <exception cref="FactSet.SDK.ETFProfileandPrices.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">Market symbol of ETP defined by FactSet.</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="paginationOffset">Non-negative number of entries to skip, or 0 (default). (optional, default to 0.0M)</param>
        /// <param name="paginationLimit">Non-negative maximum number of entries to return. (optional, default to 20.0M)</param>
        /// <returns>InlineResponse2003</returns>
        public InlineResponse2003 GetFactsetEtfAllocationCurrencyListBySymbol(string symbol, List<string> attributes = default(List<string>), decimal? paginationOffset = default(decimal?), decimal? paginationLimit = default(decimal?))
        {
            var localVarResponse = GetFactsetEtfAllocationCurrencyListBySymbolWithHttpInfo(symbol, attributes, paginationOffset, paginationLimit);
            return localVarResponse.Data;
        }

        /// <summary>
        /// This endpoint returns selected ETP&#39;s currency allocations. This endpoint returns selected ETP&#39;s allocations grouped by currency. The response will be sorted by weight in descending order.
        /// </summary>
        /// <exception cref="FactSet.SDK.ETFProfileandPrices.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">Market symbol of ETP defined by FactSet.</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="paginationOffset">Non-negative number of entries to skip, or 0 (default). (optional, default to 0.0M)</param>
        /// <param name="paginationLimit">Non-negative maximum number of entries to return. (optional, default to 20.0M)</param>
        /// <returns>ApiResponse of InlineResponse2003</returns>
        public ApiResponse<InlineResponse2003> GetFactsetEtfAllocationCurrencyListBySymbolWithHttpInfo(string symbol, List<string> attributes = default(List<string>), decimal? paginationOffset = default(decimal?), decimal? paginationLimit = default(decimal?))
        {
            // verify the required parameter 'symbol' is set
            if (symbol == null)
            {
                throw new FactSet.SDK.ETFProfileandPrices.Client.ApiException(400, "Missing required parameter 'symbol' when calling FactsetApi->GetFactsetEtfAllocationCurrencyListBySymbol");
            }

            FactSet.SDK.ETFProfileandPrices.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.ETFProfileandPrices.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.ParameterToMultiMap("", "symbol", symbol));
            if (attributes != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.ParameterToMultiMap("csv", "_attributes", attributes));
            }
            if (paginationOffset != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.ParameterToMultiMap("", "_paginationOffset", paginationOffset));
            }
            if (paginationLimit != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.ParameterToMultiMap("", "_paginationLimit", paginationLimit));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = GetFactsetEtfAllocationCurrencyListBySymbolResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Get<
            InlineResponse2003>("/factset/etf/allocation/currency/listBySymbol", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetFactsetEtfAllocationCurrencyListBySymbol", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// This endpoint returns selected ETP&#39;s currency allocations. This endpoint returns selected ETP&#39;s allocations grouped by currency. The response will be sorted by weight in descending order.
        /// </summary>
        /// <exception cref="FactSet.SDK.ETFProfileandPrices.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">Market symbol of ETP defined by FactSet.</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="paginationOffset">Non-negative number of entries to skip, or 0 (default). (optional, default to 0.0M)</param>
        /// <param name="paginationLimit">Non-negative maximum number of entries to return. (optional, default to 20.0M)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse2003</returns>
        public async System.Threading.Tasks.Task<InlineResponse2003>GetFactsetEtfAllocationCurrencyListBySymbolAsync(string symbol, List<string> attributes = default(List<string>), decimal? paginationOffset = default(decimal?), decimal? paginationLimit = default(decimal?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await GetFactsetEtfAllocationCurrencyListBySymbolWithHttpInfoAsync(symbol, attributes, paginationOffset, paginationLimit, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// This endpoint returns selected ETP&#39;s currency allocations. This endpoint returns selected ETP&#39;s allocations grouped by currency. The response will be sorted by weight in descending order.
        /// </summary>
        /// <exception cref="FactSet.SDK.ETFProfileandPrices.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">Market symbol of ETP defined by FactSet.</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="paginationOffset">Non-negative number of entries to skip, or 0 (default). (optional, default to 0.0M)</param>
        /// <param name="paginationLimit">Non-negative maximum number of entries to return. (optional, default to 20.0M)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse2003)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse2003>> GetFactsetEtfAllocationCurrencyListBySymbolWithHttpInfoAsync(string symbol, List<string> attributes = default(List<string>), decimal? paginationOffset = default(decimal?), decimal? paginationLimit = default(decimal?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'symbol' is set
            if (symbol == null)
            {
                throw new FactSet.SDK.ETFProfileandPrices.Client.ApiException(400, "Missing required parameter 'symbol' when calling FactsetApi->GetFactsetEtfAllocationCurrencyListBySymbol");
            }


            FactSet.SDK.ETFProfileandPrices.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.ETFProfileandPrices.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.ParameterToMultiMap("", "symbol", symbol));
            if (attributes != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.ParameterToMultiMap("csv", "_attributes", attributes));
            }
            if (paginationOffset != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.ParameterToMultiMap("", "_paginationOffset", paginationOffset));
            }
            if (paginationLimit != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.ParameterToMultiMap("", "_paginationLimit", paginationLimit));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = GetFactsetEtfAllocationCurrencyListBySymbolResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<InlineResponse2003>("/factset/etf/allocation/currency/listBySymbol", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetFactsetEtfAllocationCurrencyListBySymbol", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List of allocations classified by a holding&#39;s economic development status. List of allocations classified by a holding&#39;s economic development status (e.g. developed market, frontier market, emerging market).
        /// </summary>
        /// <exception cref="FactSet.SDK.ETFProfileandPrices.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">Market symbol of ETP defined by FactSet.</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="paginationOffset">Non-negative number of entries to skip, or 0 (default). (optional, default to 0.0M)</param>
        /// <param name="paginationLimit">Non-negative maximum number of entries to return. (optional, default to 20.0M)</param>
        /// <returns>InlineResponse2004</returns>
        public InlineResponse2004 GetFactsetEtfAllocationEconomicDevelopmentListBySymbol(string symbol, List<string> attributes = default(List<string>), decimal? paginationOffset = default(decimal?), decimal? paginationLimit = default(decimal?))
        {
            var localVarResponse = GetFactsetEtfAllocationEconomicDevelopmentListBySymbolWithHttpInfo(symbol, attributes, paginationOffset, paginationLimit);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List of allocations classified by a holding&#39;s economic development status. List of allocations classified by a holding&#39;s economic development status (e.g. developed market, frontier market, emerging market).
        /// </summary>
        /// <exception cref="FactSet.SDK.ETFProfileandPrices.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">Market symbol of ETP defined by FactSet.</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="paginationOffset">Non-negative number of entries to skip, or 0 (default). (optional, default to 0.0M)</param>
        /// <param name="paginationLimit">Non-negative maximum number of entries to return. (optional, default to 20.0M)</param>
        /// <returns>ApiResponse of InlineResponse2004</returns>
        public ApiResponse<InlineResponse2004> GetFactsetEtfAllocationEconomicDevelopmentListBySymbolWithHttpInfo(string symbol, List<string> attributes = default(List<string>), decimal? paginationOffset = default(decimal?), decimal? paginationLimit = default(decimal?))
        {
            // verify the required parameter 'symbol' is set
            if (symbol == null)
            {
                throw new FactSet.SDK.ETFProfileandPrices.Client.ApiException(400, "Missing required parameter 'symbol' when calling FactsetApi->GetFactsetEtfAllocationEconomicDevelopmentListBySymbol");
            }

            FactSet.SDK.ETFProfileandPrices.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.ETFProfileandPrices.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.ParameterToMultiMap("", "symbol", symbol));
            if (attributes != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.ParameterToMultiMap("csv", "_attributes", attributes));
            }
            if (paginationOffset != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.ParameterToMultiMap("", "_paginationOffset", paginationOffset));
            }
            if (paginationLimit != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.ParameterToMultiMap("", "_paginationLimit", paginationLimit));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = GetFactsetEtfAllocationEconomicDevelopmentListBySymbolResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Get<
            InlineResponse2004>("/factset/etf/allocation/economicDevelopment/listBySymbol", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetFactsetEtfAllocationEconomicDevelopmentListBySymbol", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// List of allocations classified by a holding&#39;s economic development status. List of allocations classified by a holding&#39;s economic development status (e.g. developed market, frontier market, emerging market).
        /// </summary>
        /// <exception cref="FactSet.SDK.ETFProfileandPrices.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">Market symbol of ETP defined by FactSet.</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="paginationOffset">Non-negative number of entries to skip, or 0 (default). (optional, default to 0.0M)</param>
        /// <param name="paginationLimit">Non-negative maximum number of entries to return. (optional, default to 20.0M)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse2004</returns>
        public async System.Threading.Tasks.Task<InlineResponse2004>GetFactsetEtfAllocationEconomicDevelopmentListBySymbolAsync(string symbol, List<string> attributes = default(List<string>), decimal? paginationOffset = default(decimal?), decimal? paginationLimit = default(decimal?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await GetFactsetEtfAllocationEconomicDevelopmentListBySymbolWithHttpInfoAsync(symbol, attributes, paginationOffset, paginationLimit, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List of allocations classified by a holding&#39;s economic development status. List of allocations classified by a holding&#39;s economic development status (e.g. developed market, frontier market, emerging market).
        /// </summary>
        /// <exception cref="FactSet.SDK.ETFProfileandPrices.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">Market symbol of ETP defined by FactSet.</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="paginationOffset">Non-negative number of entries to skip, or 0 (default). (optional, default to 0.0M)</param>
        /// <param name="paginationLimit">Non-negative maximum number of entries to return. (optional, default to 20.0M)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse2004)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse2004>> GetFactsetEtfAllocationEconomicDevelopmentListBySymbolWithHttpInfoAsync(string symbol, List<string> attributes = default(List<string>), decimal? paginationOffset = default(decimal?), decimal? paginationLimit = default(decimal?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'symbol' is set
            if (symbol == null)
            {
                throw new FactSet.SDK.ETFProfileandPrices.Client.ApiException(400, "Missing required parameter 'symbol' when calling FactsetApi->GetFactsetEtfAllocationEconomicDevelopmentListBySymbol");
            }


            FactSet.SDK.ETFProfileandPrices.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.ETFProfileandPrices.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.ParameterToMultiMap("", "symbol", symbol));
            if (attributes != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.ParameterToMultiMap("csv", "_attributes", attributes));
            }
            if (paginationOffset != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.ParameterToMultiMap("", "_paginationOffset", paginationOffset));
            }
            if (paginationLimit != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.ParameterToMultiMap("", "_paginationLimit", paginationLimit));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = GetFactsetEtfAllocationEconomicDevelopmentListBySymbolResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<InlineResponse2004>("/factset/etf/allocation/economicDevelopment/listBySymbol", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetFactsetEtfAllocationEconomicDevelopmentListBySymbol", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// This endpoint returns selected ETP&#39;s exchange allocations. This endpoint returns selected ETP&#39;s allocations grouped by exchanges. The response will be sorted by weight in descending order.
        /// </summary>
        /// <exception cref="FactSet.SDK.ETFProfileandPrices.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">Market symbol of ETP defined by FactSet.</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="paginationOffset">Non-negative number of entries to skip, or 0 (default). (optional, default to 0.0M)</param>
        /// <param name="paginationLimit">Non-negative maximum number of entries to return. (optional, default to 20.0M)</param>
        /// <returns>InlineResponse2005</returns>
        public InlineResponse2005 GetFactsetEtfAllocationExchangeListBySymbol(string symbol, List<string> attributes = default(List<string>), decimal? paginationOffset = default(decimal?), decimal? paginationLimit = default(decimal?))
        {
            var localVarResponse = GetFactsetEtfAllocationExchangeListBySymbolWithHttpInfo(symbol, attributes, paginationOffset, paginationLimit);
            return localVarResponse.Data;
        }

        /// <summary>
        /// This endpoint returns selected ETP&#39;s exchange allocations. This endpoint returns selected ETP&#39;s allocations grouped by exchanges. The response will be sorted by weight in descending order.
        /// </summary>
        /// <exception cref="FactSet.SDK.ETFProfileandPrices.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">Market symbol of ETP defined by FactSet.</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="paginationOffset">Non-negative number of entries to skip, or 0 (default). (optional, default to 0.0M)</param>
        /// <param name="paginationLimit">Non-negative maximum number of entries to return. (optional, default to 20.0M)</param>
        /// <returns>ApiResponse of InlineResponse2005</returns>
        public ApiResponse<InlineResponse2005> GetFactsetEtfAllocationExchangeListBySymbolWithHttpInfo(string symbol, List<string> attributes = default(List<string>), decimal? paginationOffset = default(decimal?), decimal? paginationLimit = default(decimal?))
        {
            // verify the required parameter 'symbol' is set
            if (symbol == null)
            {
                throw new FactSet.SDK.ETFProfileandPrices.Client.ApiException(400, "Missing required parameter 'symbol' when calling FactsetApi->GetFactsetEtfAllocationExchangeListBySymbol");
            }

            FactSet.SDK.ETFProfileandPrices.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.ETFProfileandPrices.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.ParameterToMultiMap("", "symbol", symbol));
            if (attributes != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.ParameterToMultiMap("csv", "_attributes", attributes));
            }
            if (paginationOffset != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.ParameterToMultiMap("", "_paginationOffset", paginationOffset));
            }
            if (paginationLimit != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.ParameterToMultiMap("", "_paginationLimit", paginationLimit));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = GetFactsetEtfAllocationExchangeListBySymbolResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Get<
            InlineResponse2005>("/factset/etf/allocation/exchange/listBySymbol", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetFactsetEtfAllocationExchangeListBySymbol", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// This endpoint returns selected ETP&#39;s exchange allocations. This endpoint returns selected ETP&#39;s allocations grouped by exchanges. The response will be sorted by weight in descending order.
        /// </summary>
        /// <exception cref="FactSet.SDK.ETFProfileandPrices.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">Market symbol of ETP defined by FactSet.</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="paginationOffset">Non-negative number of entries to skip, or 0 (default). (optional, default to 0.0M)</param>
        /// <param name="paginationLimit">Non-negative maximum number of entries to return. (optional, default to 20.0M)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse2005</returns>
        public async System.Threading.Tasks.Task<InlineResponse2005>GetFactsetEtfAllocationExchangeListBySymbolAsync(string symbol, List<string> attributes = default(List<string>), decimal? paginationOffset = default(decimal?), decimal? paginationLimit = default(decimal?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await GetFactsetEtfAllocationExchangeListBySymbolWithHttpInfoAsync(symbol, attributes, paginationOffset, paginationLimit, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// This endpoint returns selected ETP&#39;s exchange allocations. This endpoint returns selected ETP&#39;s allocations grouped by exchanges. The response will be sorted by weight in descending order.
        /// </summary>
        /// <exception cref="FactSet.SDK.ETFProfileandPrices.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">Market symbol of ETP defined by FactSet.</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="paginationOffset">Non-negative number of entries to skip, or 0 (default). (optional, default to 0.0M)</param>
        /// <param name="paginationLimit">Non-negative maximum number of entries to return. (optional, default to 20.0M)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse2005)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse2005>> GetFactsetEtfAllocationExchangeListBySymbolWithHttpInfoAsync(string symbol, List<string> attributes = default(List<string>), decimal? paginationOffset = default(decimal?), decimal? paginationLimit = default(decimal?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'symbol' is set
            if (symbol == null)
            {
                throw new FactSet.SDK.ETFProfileandPrices.Client.ApiException(400, "Missing required parameter 'symbol' when calling FactsetApi->GetFactsetEtfAllocationExchangeListBySymbol");
            }


            FactSet.SDK.ETFProfileandPrices.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.ETFProfileandPrices.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.ParameterToMultiMap("", "symbol", symbol));
            if (attributes != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.ParameterToMultiMap("csv", "_attributes", attributes));
            }
            if (paginationOffset != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.ParameterToMultiMap("", "_paginationOffset", paginationOffset));
            }
            if (paginationLimit != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.ParameterToMultiMap("", "_paginationLimit", paginationLimit));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = GetFactsetEtfAllocationExchangeListBySymbolResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<InlineResponse2005>("/factset/etf/allocation/exchange/listBySymbol", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetFactsetEtfAllocationExchangeListBySymbol", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// This endpoint returns selected ETP&#39;s industry allocations. This endpoint returns selected ETP&#39;s allocations grouped by industry. The response will be sorted by weight in descending order.
        /// </summary>
        /// <exception cref="FactSet.SDK.ETFProfileandPrices.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">Market symbol of ETP defined by FactSet.</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="paginationOffset">Non-negative number of entries to skip, or 0 (default). (optional, default to 0.0M)</param>
        /// <param name="paginationLimit">Non-negative maximum number of entries to return. (optional, default to 20.0M)</param>
        /// <returns>InlineResponse2006</returns>
        public InlineResponse2006 GetFactsetEtfAllocationIndustryListBySymbol(string symbol, List<string> attributes = default(List<string>), decimal? paginationOffset = default(decimal?), decimal? paginationLimit = default(decimal?))
        {
            var localVarResponse = GetFactsetEtfAllocationIndustryListBySymbolWithHttpInfo(symbol, attributes, paginationOffset, paginationLimit);
            return localVarResponse.Data;
        }

        /// <summary>
        /// This endpoint returns selected ETP&#39;s industry allocations. This endpoint returns selected ETP&#39;s allocations grouped by industry. The response will be sorted by weight in descending order.
        /// </summary>
        /// <exception cref="FactSet.SDK.ETFProfileandPrices.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">Market symbol of ETP defined by FactSet.</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="paginationOffset">Non-negative number of entries to skip, or 0 (default). (optional, default to 0.0M)</param>
        /// <param name="paginationLimit">Non-negative maximum number of entries to return. (optional, default to 20.0M)</param>
        /// <returns>ApiResponse of InlineResponse2006</returns>
        public ApiResponse<InlineResponse2006> GetFactsetEtfAllocationIndustryListBySymbolWithHttpInfo(string symbol, List<string> attributes = default(List<string>), decimal? paginationOffset = default(decimal?), decimal? paginationLimit = default(decimal?))
        {
            // verify the required parameter 'symbol' is set
            if (symbol == null)
            {
                throw new FactSet.SDK.ETFProfileandPrices.Client.ApiException(400, "Missing required parameter 'symbol' when calling FactsetApi->GetFactsetEtfAllocationIndustryListBySymbol");
            }

            FactSet.SDK.ETFProfileandPrices.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.ETFProfileandPrices.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.ParameterToMultiMap("", "symbol", symbol));
            if (attributes != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.ParameterToMultiMap("csv", "_attributes", attributes));
            }
            if (paginationOffset != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.ParameterToMultiMap("", "_paginationOffset", paginationOffset));
            }
            if (paginationLimit != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.ParameterToMultiMap("", "_paginationLimit", paginationLimit));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = GetFactsetEtfAllocationIndustryListBySymbolResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Get<
            InlineResponse2006>("/factset/etf/allocation/industry/listBySymbol", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetFactsetEtfAllocationIndustryListBySymbol", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// This endpoint returns selected ETP&#39;s industry allocations. This endpoint returns selected ETP&#39;s allocations grouped by industry. The response will be sorted by weight in descending order.
        /// </summary>
        /// <exception cref="FactSet.SDK.ETFProfileandPrices.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">Market symbol of ETP defined by FactSet.</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="paginationOffset">Non-negative number of entries to skip, or 0 (default). (optional, default to 0.0M)</param>
        /// <param name="paginationLimit">Non-negative maximum number of entries to return. (optional, default to 20.0M)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse2006</returns>
        public async System.Threading.Tasks.Task<InlineResponse2006>GetFactsetEtfAllocationIndustryListBySymbolAsync(string symbol, List<string> attributes = default(List<string>), decimal? paginationOffset = default(decimal?), decimal? paginationLimit = default(decimal?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await GetFactsetEtfAllocationIndustryListBySymbolWithHttpInfoAsync(symbol, attributes, paginationOffset, paginationLimit, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// This endpoint returns selected ETP&#39;s industry allocations. This endpoint returns selected ETP&#39;s allocations grouped by industry. The response will be sorted by weight in descending order.
        /// </summary>
        /// <exception cref="FactSet.SDK.ETFProfileandPrices.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">Market symbol of ETP defined by FactSet.</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="paginationOffset">Non-negative number of entries to skip, or 0 (default). (optional, default to 0.0M)</param>
        /// <param name="paginationLimit">Non-negative maximum number of entries to return. (optional, default to 20.0M)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse2006)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse2006>> GetFactsetEtfAllocationIndustryListBySymbolWithHttpInfoAsync(string symbol, List<string> attributes = default(List<string>), decimal? paginationOffset = default(decimal?), decimal? paginationLimit = default(decimal?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'symbol' is set
            if (symbol == null)
            {
                throw new FactSet.SDK.ETFProfileandPrices.Client.ApiException(400, "Missing required parameter 'symbol' when calling FactsetApi->GetFactsetEtfAllocationIndustryListBySymbol");
            }


            FactSet.SDK.ETFProfileandPrices.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.ETFProfileandPrices.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.ParameterToMultiMap("", "symbol", symbol));
            if (attributes != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.ParameterToMultiMap("csv", "_attributes", attributes));
            }
            if (paginationOffset != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.ParameterToMultiMap("", "_paginationOffset", paginationOffset));
            }
            if (paginationLimit != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.ParameterToMultiMap("", "_paginationLimit", paginationLimit));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = GetFactsetEtfAllocationIndustryListBySymbolResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<InlineResponse2006>("/factset/etf/allocation/industry/listBySymbol", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetFactsetEtfAllocationIndustryListBySymbol", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List of allocations classified by a holding&#39;s total market capitalization. List of allocations classified by a holding&#39;s total market capitalization (e.g. Small Cap, Mid Cap, Large Cap). Response will be sorted by weight in descending order.
        /// </summary>
        /// <exception cref="FactSet.SDK.ETFProfileandPrices.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">Market symbol of ETP defined by FactSet.</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="paginationOffset">Non-negative number of entries to skip, or 0 (default). (optional, default to 0.0M)</param>
        /// <param name="paginationLimit">Non-negative maximum number of entries to return. (optional, default to 20.0M)</param>
        /// <returns>InlineResponse2007</returns>
        public InlineResponse2007 GetFactsetEtfAllocationMarketCapitalizationListBySymbol(string symbol, List<string> attributes = default(List<string>), decimal? paginationOffset = default(decimal?), decimal? paginationLimit = default(decimal?))
        {
            var localVarResponse = GetFactsetEtfAllocationMarketCapitalizationListBySymbolWithHttpInfo(symbol, attributes, paginationOffset, paginationLimit);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List of allocations classified by a holding&#39;s total market capitalization. List of allocations classified by a holding&#39;s total market capitalization (e.g. Small Cap, Mid Cap, Large Cap). Response will be sorted by weight in descending order.
        /// </summary>
        /// <exception cref="FactSet.SDK.ETFProfileandPrices.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">Market symbol of ETP defined by FactSet.</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="paginationOffset">Non-negative number of entries to skip, or 0 (default). (optional, default to 0.0M)</param>
        /// <param name="paginationLimit">Non-negative maximum number of entries to return. (optional, default to 20.0M)</param>
        /// <returns>ApiResponse of InlineResponse2007</returns>
        public ApiResponse<InlineResponse2007> GetFactsetEtfAllocationMarketCapitalizationListBySymbolWithHttpInfo(string symbol, List<string> attributes = default(List<string>), decimal? paginationOffset = default(decimal?), decimal? paginationLimit = default(decimal?))
        {
            // verify the required parameter 'symbol' is set
            if (symbol == null)
            {
                throw new FactSet.SDK.ETFProfileandPrices.Client.ApiException(400, "Missing required parameter 'symbol' when calling FactsetApi->GetFactsetEtfAllocationMarketCapitalizationListBySymbol");
            }

            FactSet.SDK.ETFProfileandPrices.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.ETFProfileandPrices.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.ParameterToMultiMap("", "symbol", symbol));
            if (attributes != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.ParameterToMultiMap("csv", "_attributes", attributes));
            }
            if (paginationOffset != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.ParameterToMultiMap("", "_paginationOffset", paginationOffset));
            }
            if (paginationLimit != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.ParameterToMultiMap("", "_paginationLimit", paginationLimit));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = GetFactsetEtfAllocationMarketCapitalizationListBySymbolResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Get<
            InlineResponse2007>("/factset/etf/allocation/marketCapitalization/listBySymbol", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetFactsetEtfAllocationMarketCapitalizationListBySymbol", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// List of allocations classified by a holding&#39;s total market capitalization. List of allocations classified by a holding&#39;s total market capitalization (e.g. Small Cap, Mid Cap, Large Cap). Response will be sorted by weight in descending order.
        /// </summary>
        /// <exception cref="FactSet.SDK.ETFProfileandPrices.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">Market symbol of ETP defined by FactSet.</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="paginationOffset">Non-negative number of entries to skip, or 0 (default). (optional, default to 0.0M)</param>
        /// <param name="paginationLimit">Non-negative maximum number of entries to return. (optional, default to 20.0M)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse2007</returns>
        public async System.Threading.Tasks.Task<InlineResponse2007>GetFactsetEtfAllocationMarketCapitalizationListBySymbolAsync(string symbol, List<string> attributes = default(List<string>), decimal? paginationOffset = default(decimal?), decimal? paginationLimit = default(decimal?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await GetFactsetEtfAllocationMarketCapitalizationListBySymbolWithHttpInfoAsync(symbol, attributes, paginationOffset, paginationLimit, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List of allocations classified by a holding&#39;s total market capitalization. List of allocations classified by a holding&#39;s total market capitalization (e.g. Small Cap, Mid Cap, Large Cap). Response will be sorted by weight in descending order.
        /// </summary>
        /// <exception cref="FactSet.SDK.ETFProfileandPrices.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">Market symbol of ETP defined by FactSet.</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="paginationOffset">Non-negative number of entries to skip, or 0 (default). (optional, default to 0.0M)</param>
        /// <param name="paginationLimit">Non-negative maximum number of entries to return. (optional, default to 20.0M)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse2007)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse2007>> GetFactsetEtfAllocationMarketCapitalizationListBySymbolWithHttpInfoAsync(string symbol, List<string> attributes = default(List<string>), decimal? paginationOffset = default(decimal?), decimal? paginationLimit = default(decimal?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'symbol' is set
            if (symbol == null)
            {
                throw new FactSet.SDK.ETFProfileandPrices.Client.ApiException(400, "Missing required parameter 'symbol' when calling FactsetApi->GetFactsetEtfAllocationMarketCapitalizationListBySymbol");
            }


            FactSet.SDK.ETFProfileandPrices.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.ETFProfileandPrices.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.ParameterToMultiMap("", "symbol", symbol));
            if (attributes != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.ParameterToMultiMap("csv", "_attributes", attributes));
            }
            if (paginationOffset != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.ParameterToMultiMap("", "_paginationOffset", paginationOffset));
            }
            if (paginationLimit != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.ParameterToMultiMap("", "_paginationLimit", paginationLimit));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = GetFactsetEtfAllocationMarketCapitalizationListBySymbolResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<InlineResponse2007>("/factset/etf/allocation/marketCapitalization/listBySymbol", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetFactsetEtfAllocationMarketCapitalizationListBySymbol", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// This endpoint returns selected ETP&#39;s region allocations. This endpoint returns selected ETP&#39;s allocations grouped by region names. The response will be sorted by weight in descending order.
        /// </summary>
        /// <exception cref="FactSet.SDK.ETFProfileandPrices.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">Market symbol of ETP defined by FactSet.</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="paginationOffset">Non-negative number of entries to skip, or 0 (default). (optional, default to 0.0M)</param>
        /// <param name="paginationLimit">Non-negative maximum number of entries to return. (optional, default to 20.0M)</param>
        /// <returns>InlineResponse2008</returns>
        public InlineResponse2008 GetFactsetEtfAllocationRegionListBySymbol(string symbol, List<string> attributes = default(List<string>), decimal? paginationOffset = default(decimal?), decimal? paginationLimit = default(decimal?))
        {
            var localVarResponse = GetFactsetEtfAllocationRegionListBySymbolWithHttpInfo(symbol, attributes, paginationOffset, paginationLimit);
            return localVarResponse.Data;
        }

        /// <summary>
        /// This endpoint returns selected ETP&#39;s region allocations. This endpoint returns selected ETP&#39;s allocations grouped by region names. The response will be sorted by weight in descending order.
        /// </summary>
        /// <exception cref="FactSet.SDK.ETFProfileandPrices.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">Market symbol of ETP defined by FactSet.</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="paginationOffset">Non-negative number of entries to skip, or 0 (default). (optional, default to 0.0M)</param>
        /// <param name="paginationLimit">Non-negative maximum number of entries to return. (optional, default to 20.0M)</param>
        /// <returns>ApiResponse of InlineResponse2008</returns>
        public ApiResponse<InlineResponse2008> GetFactsetEtfAllocationRegionListBySymbolWithHttpInfo(string symbol, List<string> attributes = default(List<string>), decimal? paginationOffset = default(decimal?), decimal? paginationLimit = default(decimal?))
        {
            // verify the required parameter 'symbol' is set
            if (symbol == null)
            {
                throw new FactSet.SDK.ETFProfileandPrices.Client.ApiException(400, "Missing required parameter 'symbol' when calling FactsetApi->GetFactsetEtfAllocationRegionListBySymbol");
            }

            FactSet.SDK.ETFProfileandPrices.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.ETFProfileandPrices.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.ParameterToMultiMap("", "symbol", symbol));
            if (attributes != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.ParameterToMultiMap("csv", "_attributes", attributes));
            }
            if (paginationOffset != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.ParameterToMultiMap("", "_paginationOffset", paginationOffset));
            }
            if (paginationLimit != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.ParameterToMultiMap("", "_paginationLimit", paginationLimit));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = GetFactsetEtfAllocationRegionListBySymbolResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Get<
            InlineResponse2008>("/factset/etf/allocation/region/listBySymbol", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetFactsetEtfAllocationRegionListBySymbol", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// This endpoint returns selected ETP&#39;s region allocations. This endpoint returns selected ETP&#39;s allocations grouped by region names. The response will be sorted by weight in descending order.
        /// </summary>
        /// <exception cref="FactSet.SDK.ETFProfileandPrices.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">Market symbol of ETP defined by FactSet.</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="paginationOffset">Non-negative number of entries to skip, or 0 (default). (optional, default to 0.0M)</param>
        /// <param name="paginationLimit">Non-negative maximum number of entries to return. (optional, default to 20.0M)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse2008</returns>
        public async System.Threading.Tasks.Task<InlineResponse2008>GetFactsetEtfAllocationRegionListBySymbolAsync(string symbol, List<string> attributes = default(List<string>), decimal? paginationOffset = default(decimal?), decimal? paginationLimit = default(decimal?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await GetFactsetEtfAllocationRegionListBySymbolWithHttpInfoAsync(symbol, attributes, paginationOffset, paginationLimit, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// This endpoint returns selected ETP&#39;s region allocations. This endpoint returns selected ETP&#39;s allocations grouped by region names. The response will be sorted by weight in descending order.
        /// </summary>
        /// <exception cref="FactSet.SDK.ETFProfileandPrices.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">Market symbol of ETP defined by FactSet.</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="paginationOffset">Non-negative number of entries to skip, or 0 (default). (optional, default to 0.0M)</param>
        /// <param name="paginationLimit">Non-negative maximum number of entries to return. (optional, default to 20.0M)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse2008)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse2008>> GetFactsetEtfAllocationRegionListBySymbolWithHttpInfoAsync(string symbol, List<string> attributes = default(List<string>), decimal? paginationOffset = default(decimal?), decimal? paginationLimit = default(decimal?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'symbol' is set
            if (symbol == null)
            {
                throw new FactSet.SDK.ETFProfileandPrices.Client.ApiException(400, "Missing required parameter 'symbol' when calling FactsetApi->GetFactsetEtfAllocationRegionListBySymbol");
            }


            FactSet.SDK.ETFProfileandPrices.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.ETFProfileandPrices.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.ParameterToMultiMap("", "symbol", symbol));
            if (attributes != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.ParameterToMultiMap("csv", "_attributes", attributes));
            }
            if (paginationOffset != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.ParameterToMultiMap("", "_paginationOffset", paginationOffset));
            }
            if (paginationLimit != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.ParameterToMultiMap("", "_paginationLimit", paginationLimit));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = GetFactsetEtfAllocationRegionListBySymbolResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<InlineResponse2008>("/factset/etf/allocation/region/listBySymbol", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetFactsetEtfAllocationRegionListBySymbol", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// This endpoint returns selected ETP&#39;s sector allocations. This endpoint returns selected ETP&#39;s allocations grouped by sector names. The response will be sorted by weight in descending order.
        /// </summary>
        /// <exception cref="FactSet.SDK.ETFProfileandPrices.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">Market symbol of ETP defined by FactSet.</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="paginationOffset">Non-negative number of entries to skip, or 0 (default). (optional, default to 0.0M)</param>
        /// <param name="paginationLimit">Non-negative maximum number of entries to return. (optional, default to 20.0M)</param>
        /// <returns>InlineResponse2009</returns>
        public InlineResponse2009 GetFactsetEtfAllocationSectorListBySymbol(string symbol, List<string> attributes = default(List<string>), decimal? paginationOffset = default(decimal?), decimal? paginationLimit = default(decimal?))
        {
            var localVarResponse = GetFactsetEtfAllocationSectorListBySymbolWithHttpInfo(symbol, attributes, paginationOffset, paginationLimit);
            return localVarResponse.Data;
        }

        /// <summary>
        /// This endpoint returns selected ETP&#39;s sector allocations. This endpoint returns selected ETP&#39;s allocations grouped by sector names. The response will be sorted by weight in descending order.
        /// </summary>
        /// <exception cref="FactSet.SDK.ETFProfileandPrices.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">Market symbol of ETP defined by FactSet.</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="paginationOffset">Non-negative number of entries to skip, or 0 (default). (optional, default to 0.0M)</param>
        /// <param name="paginationLimit">Non-negative maximum number of entries to return. (optional, default to 20.0M)</param>
        /// <returns>ApiResponse of InlineResponse2009</returns>
        public ApiResponse<InlineResponse2009> GetFactsetEtfAllocationSectorListBySymbolWithHttpInfo(string symbol, List<string> attributes = default(List<string>), decimal? paginationOffset = default(decimal?), decimal? paginationLimit = default(decimal?))
        {
            // verify the required parameter 'symbol' is set
            if (symbol == null)
            {
                throw new FactSet.SDK.ETFProfileandPrices.Client.ApiException(400, "Missing required parameter 'symbol' when calling FactsetApi->GetFactsetEtfAllocationSectorListBySymbol");
            }

            FactSet.SDK.ETFProfileandPrices.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.ETFProfileandPrices.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.ParameterToMultiMap("", "symbol", symbol));
            if (attributes != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.ParameterToMultiMap("csv", "_attributes", attributes));
            }
            if (paginationOffset != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.ParameterToMultiMap("", "_paginationOffset", paginationOffset));
            }
            if (paginationLimit != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.ParameterToMultiMap("", "_paginationLimit", paginationLimit));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = GetFactsetEtfAllocationSectorListBySymbolResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Get<
            InlineResponse2009>("/factset/etf/allocation/sector/listBySymbol", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetFactsetEtfAllocationSectorListBySymbol", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// This endpoint returns selected ETP&#39;s sector allocations. This endpoint returns selected ETP&#39;s allocations grouped by sector names. The response will be sorted by weight in descending order.
        /// </summary>
        /// <exception cref="FactSet.SDK.ETFProfileandPrices.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">Market symbol of ETP defined by FactSet.</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="paginationOffset">Non-negative number of entries to skip, or 0 (default). (optional, default to 0.0M)</param>
        /// <param name="paginationLimit">Non-negative maximum number of entries to return. (optional, default to 20.0M)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse2009</returns>
        public async System.Threading.Tasks.Task<InlineResponse2009>GetFactsetEtfAllocationSectorListBySymbolAsync(string symbol, List<string> attributes = default(List<string>), decimal? paginationOffset = default(decimal?), decimal? paginationLimit = default(decimal?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await GetFactsetEtfAllocationSectorListBySymbolWithHttpInfoAsync(symbol, attributes, paginationOffset, paginationLimit, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// This endpoint returns selected ETP&#39;s sector allocations. This endpoint returns selected ETP&#39;s allocations grouped by sector names. The response will be sorted by weight in descending order.
        /// </summary>
        /// <exception cref="FactSet.SDK.ETFProfileandPrices.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">Market symbol of ETP defined by FactSet.</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="paginationOffset">Non-negative number of entries to skip, or 0 (default). (optional, default to 0.0M)</param>
        /// <param name="paginationLimit">Non-negative maximum number of entries to return. (optional, default to 20.0M)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse2009)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse2009>> GetFactsetEtfAllocationSectorListBySymbolWithHttpInfoAsync(string symbol, List<string> attributes = default(List<string>), decimal? paginationOffset = default(decimal?), decimal? paginationLimit = default(decimal?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'symbol' is set
            if (symbol == null)
            {
                throw new FactSet.SDK.ETFProfileandPrices.Client.ApiException(400, "Missing required parameter 'symbol' when calling FactsetApi->GetFactsetEtfAllocationSectorListBySymbol");
            }


            FactSet.SDK.ETFProfileandPrices.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.ETFProfileandPrices.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.ParameterToMultiMap("", "symbol", symbol));
            if (attributes != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.ParameterToMultiMap("csv", "_attributes", attributes));
            }
            if (paginationOffset != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.ParameterToMultiMap("", "_paginationOffset", paginationOffset));
            }
            if (paginationLimit != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.ParameterToMultiMap("", "_paginationLimit", paginationLimit));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = GetFactsetEtfAllocationSectorListBySymbolResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<InlineResponse2009>("/factset/etf/allocation/sector/listBySymbol", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetFactsetEtfAllocationSectorListBySymbol", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// FactSet proprietary analytics datapoints for ETPs. FactSet&#39;s proprietary analytical datapoints include ETP attributes specific to lending, corporate actions, and benchmarks.
        /// </summary>
        /// <exception cref="FactSet.SDK.ETFProfileandPrices.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">Ticker-region of a security as defined by FactSet.</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <returns>InlineResponse20010</returns>
        public InlineResponse20010 GetFactsetEtfAnalyticsGetBySymbol(string symbol, List<string> attributes = default(List<string>))
        {
            var localVarResponse = GetFactsetEtfAnalyticsGetBySymbolWithHttpInfo(symbol, attributes);
            return localVarResponse.Data;
        }

        /// <summary>
        /// FactSet proprietary analytics datapoints for ETPs. FactSet&#39;s proprietary analytical datapoints include ETP attributes specific to lending, corporate actions, and benchmarks.
        /// </summary>
        /// <exception cref="FactSet.SDK.ETFProfileandPrices.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">Ticker-region of a security as defined by FactSet.</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <returns>ApiResponse of InlineResponse20010</returns>
        public ApiResponse<InlineResponse20010> GetFactsetEtfAnalyticsGetBySymbolWithHttpInfo(string symbol, List<string> attributes = default(List<string>))
        {
            // verify the required parameter 'symbol' is set
            if (symbol == null)
            {
                throw new FactSet.SDK.ETFProfileandPrices.Client.ApiException(400, "Missing required parameter 'symbol' when calling FactsetApi->GetFactsetEtfAnalyticsGetBySymbol");
            }

            FactSet.SDK.ETFProfileandPrices.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.ETFProfileandPrices.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.ParameterToMultiMap("", "symbol", symbol));
            if (attributes != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.ParameterToMultiMap("csv", "_attributes", attributes));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = GetFactsetEtfAnalyticsGetBySymbolResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Get<
            InlineResponse20010>("/factset/etf/analytics/getBySymbol", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetFactsetEtfAnalyticsGetBySymbol", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// FactSet proprietary analytics datapoints for ETPs. FactSet&#39;s proprietary analytical datapoints include ETP attributes specific to lending, corporate actions, and benchmarks.
        /// </summary>
        /// <exception cref="FactSet.SDK.ETFProfileandPrices.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">Ticker-region of a security as defined by FactSet.</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse20010</returns>
        public async System.Threading.Tasks.Task<InlineResponse20010>GetFactsetEtfAnalyticsGetBySymbolAsync(string symbol, List<string> attributes = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await GetFactsetEtfAnalyticsGetBySymbolWithHttpInfoAsync(symbol, attributes, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// FactSet proprietary analytics datapoints for ETPs. FactSet&#39;s proprietary analytical datapoints include ETP attributes specific to lending, corporate actions, and benchmarks.
        /// </summary>
        /// <exception cref="FactSet.SDK.ETFProfileandPrices.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">Ticker-region of a security as defined by FactSet.</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse20010)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20010>> GetFactsetEtfAnalyticsGetBySymbolWithHttpInfoAsync(string symbol, List<string> attributes = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'symbol' is set
            if (symbol == null)
            {
                throw new FactSet.SDK.ETFProfileandPrices.Client.ApiException(400, "Missing required parameter 'symbol' when calling FactsetApi->GetFactsetEtfAnalyticsGetBySymbol");
            }


            FactSet.SDK.ETFProfileandPrices.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.ETFProfileandPrices.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.ParameterToMultiMap("", "symbol", symbol));
            if (attributes != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.ParameterToMultiMap("csv", "_attributes", attributes));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = GetFactsetEtfAnalyticsGetBySymbolResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<InlineResponse20010>("/factset/etf/analytics/getBySymbol", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetFactsetEtfAnalyticsGetBySymbol", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// FactSet&#39;s portfolio statistics for ETPs. FactSet calculates several proprietary portfolio statistics for ETPs including average maturity, credit quality, price/book ratio, price/earnings ratio, and dividend yield.
        /// </summary>
        /// <exception cref="FactSet.SDK.ETFProfileandPrices.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">Ticker-region of a security as defined by FactSet.</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <returns>InlineResponse20011</returns>
        public InlineResponse20011 GetFactsetEtfAnalyticsHoldingsStatisticsGetBySymbol(string symbol, List<string> attributes = default(List<string>))
        {
            var localVarResponse = GetFactsetEtfAnalyticsHoldingsStatisticsGetBySymbolWithHttpInfo(symbol, attributes);
            return localVarResponse.Data;
        }

        /// <summary>
        /// FactSet&#39;s portfolio statistics for ETPs. FactSet calculates several proprietary portfolio statistics for ETPs including average maturity, credit quality, price/book ratio, price/earnings ratio, and dividend yield.
        /// </summary>
        /// <exception cref="FactSet.SDK.ETFProfileandPrices.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">Ticker-region of a security as defined by FactSet.</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <returns>ApiResponse of InlineResponse20011</returns>
        public ApiResponse<InlineResponse20011> GetFactsetEtfAnalyticsHoldingsStatisticsGetBySymbolWithHttpInfo(string symbol, List<string> attributes = default(List<string>))
        {
            // verify the required parameter 'symbol' is set
            if (symbol == null)
            {
                throw new FactSet.SDK.ETFProfileandPrices.Client.ApiException(400, "Missing required parameter 'symbol' when calling FactsetApi->GetFactsetEtfAnalyticsHoldingsStatisticsGetBySymbol");
            }

            FactSet.SDK.ETFProfileandPrices.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.ETFProfileandPrices.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.ParameterToMultiMap("", "symbol", symbol));
            if (attributes != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.ParameterToMultiMap("csv", "_attributes", attributes));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = GetFactsetEtfAnalyticsHoldingsStatisticsGetBySymbolResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Get<
            InlineResponse20011>("/factset/etf/analytics/holdings/statistics/getBySymbol", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetFactsetEtfAnalyticsHoldingsStatisticsGetBySymbol", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// FactSet&#39;s portfolio statistics for ETPs. FactSet calculates several proprietary portfolio statistics for ETPs including average maturity, credit quality, price/book ratio, price/earnings ratio, and dividend yield.
        /// </summary>
        /// <exception cref="FactSet.SDK.ETFProfileandPrices.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">Ticker-region of a security as defined by FactSet.</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse20011</returns>
        public async System.Threading.Tasks.Task<InlineResponse20011>GetFactsetEtfAnalyticsHoldingsStatisticsGetBySymbolAsync(string symbol, List<string> attributes = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await GetFactsetEtfAnalyticsHoldingsStatisticsGetBySymbolWithHttpInfoAsync(symbol, attributes, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// FactSet&#39;s portfolio statistics for ETPs. FactSet calculates several proprietary portfolio statistics for ETPs including average maturity, credit quality, price/book ratio, price/earnings ratio, and dividend yield.
        /// </summary>
        /// <exception cref="FactSet.SDK.ETFProfileandPrices.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">Ticker-region of a security as defined by FactSet.</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse20011)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20011>> GetFactsetEtfAnalyticsHoldingsStatisticsGetBySymbolWithHttpInfoAsync(string symbol, List<string> attributes = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'symbol' is set
            if (symbol == null)
            {
                throw new FactSet.SDK.ETFProfileandPrices.Client.ApiException(400, "Missing required parameter 'symbol' when calling FactsetApi->GetFactsetEtfAnalyticsHoldingsStatisticsGetBySymbol");
            }


            FactSet.SDK.ETFProfileandPrices.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.ETFProfileandPrices.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.ParameterToMultiMap("", "symbol", symbol));
            if (attributes != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.ParameterToMultiMap("csv", "_attributes", attributes));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = GetFactsetEtfAnalyticsHoldingsStatisticsGetBySymbolResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<InlineResponse20011>("/factset/etf/analytics/holdings/statistics/getBySymbol", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetFactsetEtfAnalyticsHoldingsStatisticsGetBySymbol", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// FactSet proprietary ETP rankings. FactSet calculates various proprietary fund rankings including unique scores, fund grades, segment averages, and recommendations.
        /// </summary>
        /// <exception cref="FactSet.SDK.ETFProfileandPrices.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">Ticker-region of a security as defined by FactSet.</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <returns>InlineResponse20012</returns>
        public InlineResponse20012 GetFactsetEtfAnalyticsScoreGetBySymbol(string symbol, List<string> attributes = default(List<string>))
        {
            var localVarResponse = GetFactsetEtfAnalyticsScoreGetBySymbolWithHttpInfo(symbol, attributes);
            return localVarResponse.Data;
        }

        /// <summary>
        /// FactSet proprietary ETP rankings. FactSet calculates various proprietary fund rankings including unique scores, fund grades, segment averages, and recommendations.
        /// </summary>
        /// <exception cref="FactSet.SDK.ETFProfileandPrices.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">Ticker-region of a security as defined by FactSet.</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <returns>ApiResponse of InlineResponse20012</returns>
        public ApiResponse<InlineResponse20012> GetFactsetEtfAnalyticsScoreGetBySymbolWithHttpInfo(string symbol, List<string> attributes = default(List<string>))
        {
            // verify the required parameter 'symbol' is set
            if (symbol == null)
            {
                throw new FactSet.SDK.ETFProfileandPrices.Client.ApiException(400, "Missing required parameter 'symbol' when calling FactsetApi->GetFactsetEtfAnalyticsScoreGetBySymbol");
            }

            FactSet.SDK.ETFProfileandPrices.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.ETFProfileandPrices.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.ParameterToMultiMap("", "symbol", symbol));
            if (attributes != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.ParameterToMultiMap("csv", "_attributes", attributes));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = GetFactsetEtfAnalyticsScoreGetBySymbolResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Get<
            InlineResponse20012>("/factset/etf/analytics/score/getBySymbol", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetFactsetEtfAnalyticsScoreGetBySymbol", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// FactSet proprietary ETP rankings. FactSet calculates various proprietary fund rankings including unique scores, fund grades, segment averages, and recommendations.
        /// </summary>
        /// <exception cref="FactSet.SDK.ETFProfileandPrices.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">Ticker-region of a security as defined by FactSet.</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse20012</returns>
        public async System.Threading.Tasks.Task<InlineResponse20012>GetFactsetEtfAnalyticsScoreGetBySymbolAsync(string symbol, List<string> attributes = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await GetFactsetEtfAnalyticsScoreGetBySymbolWithHttpInfoAsync(symbol, attributes, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// FactSet proprietary ETP rankings. FactSet calculates various proprietary fund rankings including unique scores, fund grades, segment averages, and recommendations.
        /// </summary>
        /// <exception cref="FactSet.SDK.ETFProfileandPrices.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">Ticker-region of a security as defined by FactSet.</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse20012)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20012>> GetFactsetEtfAnalyticsScoreGetBySymbolWithHttpInfoAsync(string symbol, List<string> attributes = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'symbol' is set
            if (symbol == null)
            {
                throw new FactSet.SDK.ETFProfileandPrices.Client.ApiException(400, "Missing required parameter 'symbol' when calling FactsetApi->GetFactsetEtfAnalyticsScoreGetBySymbol");
            }


            FactSet.SDK.ETFProfileandPrices.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.ETFProfileandPrices.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.ParameterToMultiMap("", "symbol", symbol));
            if (attributes != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.ParameterToMultiMap("csv", "_attributes", attributes));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = GetFactsetEtfAnalyticsScoreGetBySymbolResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<InlineResponse20012>("/factset/etf/analytics/score/getBySymbol", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetFactsetEtfAnalyticsScoreGetBySymbol", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Trade statistics for specific ETP. Various metrics of an ETP&#39;s liquidity including creation metrics, premium/discount, spread, and tracking error statistics.
        /// </summary>
        /// <exception cref="FactSet.SDK.ETFProfileandPrices.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">Ticker-region of a security as defined by FactSet.</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <returns>InlineResponse20013</returns>
        public InlineResponse20013 GetFactsetEtfAnalyticsTradeGetBySymbol(string symbol, List<string> attributes = default(List<string>))
        {
            var localVarResponse = GetFactsetEtfAnalyticsTradeGetBySymbolWithHttpInfo(symbol, attributes);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Trade statistics for specific ETP. Various metrics of an ETP&#39;s liquidity including creation metrics, premium/discount, spread, and tracking error statistics.
        /// </summary>
        /// <exception cref="FactSet.SDK.ETFProfileandPrices.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">Ticker-region of a security as defined by FactSet.</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <returns>ApiResponse of InlineResponse20013</returns>
        public ApiResponse<InlineResponse20013> GetFactsetEtfAnalyticsTradeGetBySymbolWithHttpInfo(string symbol, List<string> attributes = default(List<string>))
        {
            // verify the required parameter 'symbol' is set
            if (symbol == null)
            {
                throw new FactSet.SDK.ETFProfileandPrices.Client.ApiException(400, "Missing required parameter 'symbol' when calling FactsetApi->GetFactsetEtfAnalyticsTradeGetBySymbol");
            }

            FactSet.SDK.ETFProfileandPrices.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.ETFProfileandPrices.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.ParameterToMultiMap("", "symbol", symbol));
            if (attributes != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.ParameterToMultiMap("csv", "_attributes", attributes));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = GetFactsetEtfAnalyticsTradeGetBySymbolResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Get<
            InlineResponse20013>("/factset/etf/analytics/trade/getBySymbol", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetFactsetEtfAnalyticsTradeGetBySymbol", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// Trade statistics for specific ETP. Various metrics of an ETP&#39;s liquidity including creation metrics, premium/discount, spread, and tracking error statistics.
        /// </summary>
        /// <exception cref="FactSet.SDK.ETFProfileandPrices.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">Ticker-region of a security as defined by FactSet.</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse20013</returns>
        public async System.Threading.Tasks.Task<InlineResponse20013>GetFactsetEtfAnalyticsTradeGetBySymbolAsync(string symbol, List<string> attributes = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await GetFactsetEtfAnalyticsTradeGetBySymbolWithHttpInfoAsync(symbol, attributes, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Trade statistics for specific ETP. Various metrics of an ETP&#39;s liquidity including creation metrics, premium/discount, spread, and tracking error statistics.
        /// </summary>
        /// <exception cref="FactSet.SDK.ETFProfileandPrices.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">Ticker-region of a security as defined by FactSet.</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse20013)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20013>> GetFactsetEtfAnalyticsTradeGetBySymbolWithHttpInfoAsync(string symbol, List<string> attributes = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'symbol' is set
            if (symbol == null)
            {
                throw new FactSet.SDK.ETFProfileandPrices.Client.ApiException(400, "Missing required parameter 'symbol' when calling FactsetApi->GetFactsetEtfAnalyticsTradeGetBySymbol");
            }


            FactSet.SDK.ETFProfileandPrices.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.ETFProfileandPrices.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.ParameterToMultiMap("", "symbol", symbol));
            if (attributes != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.ParameterToMultiMap("csv", "_attributes", attributes));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = GetFactsetEtfAnalyticsTradeGetBySymbolResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<InlineResponse20013>("/factset/etf/analytics/trade/getBySymbol", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetFactsetEtfAnalyticsTradeGetBySymbol", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve basic characteristic information for a specified ETP. An ETP has many unique characteristics specific to its composition that differentiate it from other products. This includes details on leverage, hedging, derivatives, and service providers.
        /// </summary>
        /// <exception cref="FactSet.SDK.ETFProfileandPrices.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">Market symbol of ETF defined by FactSet.</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <returns>InlineResponse20014</returns>
        public InlineResponse20014 GetFactsetEtfCharacteristicsGetBySymbol(string symbol, List<string> attributes = default(List<string>))
        {
            var localVarResponse = GetFactsetEtfCharacteristicsGetBySymbolWithHttpInfo(symbol, attributes);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve basic characteristic information for a specified ETP. An ETP has many unique characteristics specific to its composition that differentiate it from other products. This includes details on leverage, hedging, derivatives, and service providers.
        /// </summary>
        /// <exception cref="FactSet.SDK.ETFProfileandPrices.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">Market symbol of ETF defined by FactSet.</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <returns>ApiResponse of InlineResponse20014</returns>
        public ApiResponse<InlineResponse20014> GetFactsetEtfCharacteristicsGetBySymbolWithHttpInfo(string symbol, List<string> attributes = default(List<string>))
        {
            // verify the required parameter 'symbol' is set
            if (symbol == null)
            {
                throw new FactSet.SDK.ETFProfileandPrices.Client.ApiException(400, "Missing required parameter 'symbol' when calling FactsetApi->GetFactsetEtfCharacteristicsGetBySymbol");
            }

            FactSet.SDK.ETFProfileandPrices.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.ETFProfileandPrices.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.ParameterToMultiMap("", "symbol", symbol));
            if (attributes != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.ParameterToMultiMap("csv", "_attributes", attributes));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = GetFactsetEtfCharacteristicsGetBySymbolResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Get<
            InlineResponse20014>("/factset/etf/characteristics/getBySymbol", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetFactsetEtfCharacteristicsGetBySymbol", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// Retrieve basic characteristic information for a specified ETP. An ETP has many unique characteristics specific to its composition that differentiate it from other products. This includes details on leverage, hedging, derivatives, and service providers.
        /// </summary>
        /// <exception cref="FactSet.SDK.ETFProfileandPrices.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">Market symbol of ETF defined by FactSet.</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse20014</returns>
        public async System.Threading.Tasks.Task<InlineResponse20014>GetFactsetEtfCharacteristicsGetBySymbolAsync(string symbol, List<string> attributes = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await GetFactsetEtfCharacteristicsGetBySymbolWithHttpInfoAsync(symbol, attributes, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve basic characteristic information for a specified ETP. An ETP has many unique characteristics specific to its composition that differentiate it from other products. This includes details on leverage, hedging, derivatives, and service providers.
        /// </summary>
        /// <exception cref="FactSet.SDK.ETFProfileandPrices.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">Market symbol of ETF defined by FactSet.</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse20014)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20014>> GetFactsetEtfCharacteristicsGetBySymbolWithHttpInfoAsync(string symbol, List<string> attributes = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'symbol' is set
            if (symbol == null)
            {
                throw new FactSet.SDK.ETFProfileandPrices.Client.ApiException(400, "Missing required parameter 'symbol' when calling FactsetApi->GetFactsetEtfCharacteristicsGetBySymbol");
            }


            FactSet.SDK.ETFProfileandPrices.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.ETFProfileandPrices.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.ParameterToMultiMap("", "symbol", symbol));
            if (attributes != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.ParameterToMultiMap("csv", "_attributes", attributes));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = GetFactsetEtfCharacteristicsGetBySymbolResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<InlineResponse20014>("/factset/etf/characteristics/getBySymbol", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetFactsetEtfCharacteristicsGetBySymbol", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List of ETP class broad categories. List of ETP class broad categories.
        /// </summary>
        /// <exception cref="FactSet.SDK.ETFProfileandPrices.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <returns>InlineResponse20016</returns>
        public InlineResponse20016 GetFactsetEtfClassCategoryBroadList(List<string> attributes = default(List<string>))
        {
            var localVarResponse = GetFactsetEtfClassCategoryBroadListWithHttpInfo(attributes);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List of ETP class broad categories. List of ETP class broad categories.
        /// </summary>
        /// <exception cref="FactSet.SDK.ETFProfileandPrices.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <returns>ApiResponse of InlineResponse20016</returns>
        public ApiResponse<InlineResponse20016> GetFactsetEtfClassCategoryBroadListWithHttpInfo(List<string> attributes = default(List<string>))
        {
            FactSet.SDK.ETFProfileandPrices.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.ETFProfileandPrices.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (attributes != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.ParameterToMultiMap("csv", "_attributes", attributes));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = GetFactsetEtfClassCategoryBroadListResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Get<
            InlineResponse20016>("/factset/etf/class/category/broad/list", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetFactsetEtfClassCategoryBroadList", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// List of ETP class broad categories. List of ETP class broad categories.
        /// </summary>
        /// <exception cref="FactSet.SDK.ETFProfileandPrices.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse20016</returns>
        public async System.Threading.Tasks.Task<InlineResponse20016>GetFactsetEtfClassCategoryBroadListAsync(List<string> attributes = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await GetFactsetEtfClassCategoryBroadListWithHttpInfoAsync(attributes, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List of ETP class broad categories. List of ETP class broad categories.
        /// </summary>
        /// <exception cref="FactSet.SDK.ETFProfileandPrices.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse20016)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20016>> GetFactsetEtfClassCategoryBroadListWithHttpInfoAsync(List<string> attributes = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            FactSet.SDK.ETFProfileandPrices.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.ETFProfileandPrices.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (attributes != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.ParameterToMultiMap("csv", "_attributes", attributes));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = GetFactsetEtfClassCategoryBroadListResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<InlineResponse20016>("/factset/etf/class/category/broad/list", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetFactsetEtfClassCategoryBroadList", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List of ETP class focus categories. List of ETP class focus categories.
        /// </summary>
        /// <exception cref="FactSet.SDK.ETFProfileandPrices.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="paginationOffset">Non-negative number of entries to skip, or 0 (default). (optional, default to 0.0M)</param>
        /// <param name="paginationLimit">Non-negative maximum number of entries to return. (optional, default to 20.0M)</param>
        /// <returns>InlineResponse20017</returns>
        public InlineResponse20017 GetFactsetEtfClassCategoryFocusList(List<string> attributes = default(List<string>), decimal? paginationOffset = default(decimal?), decimal? paginationLimit = default(decimal?))
        {
            var localVarResponse = GetFactsetEtfClassCategoryFocusListWithHttpInfo(attributes, paginationOffset, paginationLimit);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List of ETP class focus categories. List of ETP class focus categories.
        /// </summary>
        /// <exception cref="FactSet.SDK.ETFProfileandPrices.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="paginationOffset">Non-negative number of entries to skip, or 0 (default). (optional, default to 0.0M)</param>
        /// <param name="paginationLimit">Non-negative maximum number of entries to return. (optional, default to 20.0M)</param>
        /// <returns>ApiResponse of InlineResponse20017</returns>
        public ApiResponse<InlineResponse20017> GetFactsetEtfClassCategoryFocusListWithHttpInfo(List<string> attributes = default(List<string>), decimal? paginationOffset = default(decimal?), decimal? paginationLimit = default(decimal?))
        {
            FactSet.SDK.ETFProfileandPrices.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.ETFProfileandPrices.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (attributes != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.ParameterToMultiMap("csv", "_attributes", attributes));
            }
            if (paginationOffset != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.ParameterToMultiMap("", "_paginationOffset", paginationOffset));
            }
            if (paginationLimit != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.ParameterToMultiMap("", "_paginationLimit", paginationLimit));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = GetFactsetEtfClassCategoryFocusListResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Get<
            InlineResponse20017>("/factset/etf/class/category/focus/list", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetFactsetEtfClassCategoryFocusList", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// List of ETP class focus categories. List of ETP class focus categories.
        /// </summary>
        /// <exception cref="FactSet.SDK.ETFProfileandPrices.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="paginationOffset">Non-negative number of entries to skip, or 0 (default). (optional, default to 0.0M)</param>
        /// <param name="paginationLimit">Non-negative maximum number of entries to return. (optional, default to 20.0M)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse20017</returns>
        public async System.Threading.Tasks.Task<InlineResponse20017>GetFactsetEtfClassCategoryFocusListAsync(List<string> attributes = default(List<string>), decimal? paginationOffset = default(decimal?), decimal? paginationLimit = default(decimal?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await GetFactsetEtfClassCategoryFocusListWithHttpInfoAsync(attributes, paginationOffset, paginationLimit, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List of ETP class focus categories. List of ETP class focus categories.
        /// </summary>
        /// <exception cref="FactSet.SDK.ETFProfileandPrices.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="paginationOffset">Non-negative number of entries to skip, or 0 (default). (optional, default to 0.0M)</param>
        /// <param name="paginationLimit">Non-negative maximum number of entries to return. (optional, default to 20.0M)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse20017)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20017>> GetFactsetEtfClassCategoryFocusListWithHttpInfoAsync(List<string> attributes = default(List<string>), decimal? paginationOffset = default(decimal?), decimal? paginationLimit = default(decimal?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            FactSet.SDK.ETFProfileandPrices.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.ETFProfileandPrices.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (attributes != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.ParameterToMultiMap("csv", "_attributes", attributes));
            }
            if (paginationOffset != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.ParameterToMultiMap("", "_paginationOffset", paginationOffset));
            }
            if (paginationLimit != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.ParameterToMultiMap("", "_paginationLimit", paginationLimit));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = GetFactsetEtfClassCategoryFocusListResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<InlineResponse20017>("/factset/etf/class/category/focus/list", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetFactsetEtfClassCategoryFocusList", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List of ETP class niche categories. List of ETP class niche categories.
        /// </summary>
        /// <exception cref="FactSet.SDK.ETFProfileandPrices.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="paginationOffset">Non-negative number of entries to skip, or 0 (default). (optional, default to 0.0M)</param>
        /// <param name="paginationLimit">Non-negative maximum number of entries to return. (optional, default to 20.0M)</param>
        /// <returns>InlineResponse20018</returns>
        public InlineResponse20018 GetFactsetEtfClassCategoryNicheList(List<string> attributes = default(List<string>), decimal? paginationOffset = default(decimal?), decimal? paginationLimit = default(decimal?))
        {
            var localVarResponse = GetFactsetEtfClassCategoryNicheListWithHttpInfo(attributes, paginationOffset, paginationLimit);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List of ETP class niche categories. List of ETP class niche categories.
        /// </summary>
        /// <exception cref="FactSet.SDK.ETFProfileandPrices.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="paginationOffset">Non-negative number of entries to skip, or 0 (default). (optional, default to 0.0M)</param>
        /// <param name="paginationLimit">Non-negative maximum number of entries to return. (optional, default to 20.0M)</param>
        /// <returns>ApiResponse of InlineResponse20018</returns>
        public ApiResponse<InlineResponse20018> GetFactsetEtfClassCategoryNicheListWithHttpInfo(List<string> attributes = default(List<string>), decimal? paginationOffset = default(decimal?), decimal? paginationLimit = default(decimal?))
        {
            FactSet.SDK.ETFProfileandPrices.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.ETFProfileandPrices.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (attributes != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.ParameterToMultiMap("csv", "_attributes", attributes));
            }
            if (paginationOffset != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.ParameterToMultiMap("", "_paginationOffset", paginationOffset));
            }
            if (paginationLimit != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.ParameterToMultiMap("", "_paginationLimit", paginationLimit));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = GetFactsetEtfClassCategoryNicheListResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Get<
            InlineResponse20018>("/factset/etf/class/category/niche/list", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetFactsetEtfClassCategoryNicheList", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// List of ETP class niche categories. List of ETP class niche categories.
        /// </summary>
        /// <exception cref="FactSet.SDK.ETFProfileandPrices.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="paginationOffset">Non-negative number of entries to skip, or 0 (default). (optional, default to 0.0M)</param>
        /// <param name="paginationLimit">Non-negative maximum number of entries to return. (optional, default to 20.0M)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse20018</returns>
        public async System.Threading.Tasks.Task<InlineResponse20018>GetFactsetEtfClassCategoryNicheListAsync(List<string> attributes = default(List<string>), decimal? paginationOffset = default(decimal?), decimal? paginationLimit = default(decimal?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await GetFactsetEtfClassCategoryNicheListWithHttpInfoAsync(attributes, paginationOffset, paginationLimit, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List of ETP class niche categories. List of ETP class niche categories.
        /// </summary>
        /// <exception cref="FactSet.SDK.ETFProfileandPrices.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="paginationOffset">Non-negative number of entries to skip, or 0 (default). (optional, default to 0.0M)</param>
        /// <param name="paginationLimit">Non-negative maximum number of entries to return. (optional, default to 20.0M)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse20018)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20018>> GetFactsetEtfClassCategoryNicheListWithHttpInfoAsync(List<string> attributes = default(List<string>), decimal? paginationOffset = default(decimal?), decimal? paginationLimit = default(decimal?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            FactSet.SDK.ETFProfileandPrices.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.ETFProfileandPrices.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (attributes != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.ParameterToMultiMap("csv", "_attributes", attributes));
            }
            if (paginationOffset != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.ParameterToMultiMap("", "_paginationOffset", paginationOffset));
            }
            if (paginationLimit != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.ParameterToMultiMap("", "_paginationLimit", paginationLimit));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = GetFactsetEtfClassCategoryNicheListResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<InlineResponse20018>("/factset/etf/class/category/niche/list", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetFactsetEtfClassCategoryNicheList", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List of ETP class geographies. List of ETP class geographies.
        /// </summary>
        /// <exception cref="FactSet.SDK.ETFProfileandPrices.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <returns>InlineResponse20019</returns>
        public InlineResponse20019 GetFactsetEtfClassGeographyList(List<string> attributes = default(List<string>))
        {
            var localVarResponse = GetFactsetEtfClassGeographyListWithHttpInfo(attributes);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List of ETP class geographies. List of ETP class geographies.
        /// </summary>
        /// <exception cref="FactSet.SDK.ETFProfileandPrices.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <returns>ApiResponse of InlineResponse20019</returns>
        public ApiResponse<InlineResponse20019> GetFactsetEtfClassGeographyListWithHttpInfo(List<string> attributes = default(List<string>))
        {
            FactSet.SDK.ETFProfileandPrices.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.ETFProfileandPrices.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (attributes != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.ParameterToMultiMap("csv", "_attributes", attributes));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = GetFactsetEtfClassGeographyListResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Get<
            InlineResponse20019>("/factset/etf/class/geography/list", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetFactsetEtfClassGeographyList", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// List of ETP class geographies. List of ETP class geographies.
        /// </summary>
        /// <exception cref="FactSet.SDK.ETFProfileandPrices.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse20019</returns>
        public async System.Threading.Tasks.Task<InlineResponse20019>GetFactsetEtfClassGeographyListAsync(List<string> attributes = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await GetFactsetEtfClassGeographyListWithHttpInfoAsync(attributes, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List of ETP class geographies. List of ETP class geographies.
        /// </summary>
        /// <exception cref="FactSet.SDK.ETFProfileandPrices.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse20019)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20019>> GetFactsetEtfClassGeographyListWithHttpInfoAsync(List<string> attributes = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            FactSet.SDK.ETFProfileandPrices.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.ETFProfileandPrices.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (attributes != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.ParameterToMultiMap("csv", "_attributes", attributes));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = GetFactsetEtfClassGeographyListResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<InlineResponse20019>("/factset/etf/class/geography/list", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetFactsetEtfClassGeographyList", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve an ETP&#39;s classification specific to asset class, geography, or investment strategy. ETP classification is divided into three categories: Asset Class, Geography, and Investment Strategy. Asset class is determined based on the various asset types held by the fund, A fund&#39;s geography can be classified by region (e.g. Asia-Pac), specific geography (e.g. China) or economic development (e.g. BRIC). An ETP&#39;s investment strategy is classified in broad categories (e.g. Large Cap) and more granular categorizations.
        /// </summary>
        /// <exception cref="FactSet.SDK.ETFProfileandPrices.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">Market symbol of ETP defined by FactSet.</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <returns>InlineResponse20015</returns>
        public InlineResponse20015 GetFactsetEtfClassGetBySymbol(string symbol, List<string> attributes = default(List<string>))
        {
            var localVarResponse = GetFactsetEtfClassGetBySymbolWithHttpInfo(symbol, attributes);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve an ETP&#39;s classification specific to asset class, geography, or investment strategy. ETP classification is divided into three categories: Asset Class, Geography, and Investment Strategy. Asset class is determined based on the various asset types held by the fund, A fund&#39;s geography can be classified by region (e.g. Asia-Pac), specific geography (e.g. China) or economic development (e.g. BRIC). An ETP&#39;s investment strategy is classified in broad categories (e.g. Large Cap) and more granular categorizations.
        /// </summary>
        /// <exception cref="FactSet.SDK.ETFProfileandPrices.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">Market symbol of ETP defined by FactSet.</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <returns>ApiResponse of InlineResponse20015</returns>
        public ApiResponse<InlineResponse20015> GetFactsetEtfClassGetBySymbolWithHttpInfo(string symbol, List<string> attributes = default(List<string>))
        {
            // verify the required parameter 'symbol' is set
            if (symbol == null)
            {
                throw new FactSet.SDK.ETFProfileandPrices.Client.ApiException(400, "Missing required parameter 'symbol' when calling FactsetApi->GetFactsetEtfClassGetBySymbol");
            }

            FactSet.SDK.ETFProfileandPrices.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.ETFProfileandPrices.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.ParameterToMultiMap("", "symbol", symbol));
            if (attributes != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.ParameterToMultiMap("csv", "_attributes", attributes));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = GetFactsetEtfClassGetBySymbolResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Get<
            InlineResponse20015>("/factset/etf/class/getBySymbol", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetFactsetEtfClassGetBySymbol", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// Retrieve an ETP&#39;s classification specific to asset class, geography, or investment strategy. ETP classification is divided into three categories: Asset Class, Geography, and Investment Strategy. Asset class is determined based on the various asset types held by the fund, A fund&#39;s geography can be classified by region (e.g. Asia-Pac), specific geography (e.g. China) or economic development (e.g. BRIC). An ETP&#39;s investment strategy is classified in broad categories (e.g. Large Cap) and more granular categorizations.
        /// </summary>
        /// <exception cref="FactSet.SDK.ETFProfileandPrices.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">Market symbol of ETP defined by FactSet.</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse20015</returns>
        public async System.Threading.Tasks.Task<InlineResponse20015>GetFactsetEtfClassGetBySymbolAsync(string symbol, List<string> attributes = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await GetFactsetEtfClassGetBySymbolWithHttpInfoAsync(symbol, attributes, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve an ETP&#39;s classification specific to asset class, geography, or investment strategy. ETP classification is divided into three categories: Asset Class, Geography, and Investment Strategy. Asset class is determined based on the various asset types held by the fund, A fund&#39;s geography can be classified by region (e.g. Asia-Pac), specific geography (e.g. China) or economic development (e.g. BRIC). An ETP&#39;s investment strategy is classified in broad categories (e.g. Large Cap) and more granular categorizations.
        /// </summary>
        /// <exception cref="FactSet.SDK.ETFProfileandPrices.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">Market symbol of ETP defined by FactSet.</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse20015)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20015>> GetFactsetEtfClassGetBySymbolWithHttpInfoAsync(string symbol, List<string> attributes = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'symbol' is set
            if (symbol == null)
            {
                throw new FactSet.SDK.ETFProfileandPrices.Client.ApiException(400, "Missing required parameter 'symbol' when calling FactsetApi->GetFactsetEtfClassGetBySymbol");
            }


            FactSet.SDK.ETFProfileandPrices.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.ETFProfileandPrices.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.ParameterToMultiMap("", "symbol", symbol));
            if (attributes != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.ParameterToMultiMap("csv", "_attributes", attributes));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = GetFactsetEtfClassGetBySymbolResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<InlineResponse20015>("/factset/etf/class/getBySymbol", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetFactsetEtfClassGetBySymbol", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// FactSet&#39;s proprietary list of competing companies. FactSet defines and maintains a proprietary list of competing companies based on a number of attributes specific to a fund.
        /// </summary>
        /// <exception cref="FactSet.SDK.ETFProfileandPrices.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">Ticker-region of a security as defined by FactSet.</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <returns>InlineResponse20020</returns>
        public InlineResponse20020 GetFactsetEtfCompetitorsListBySymbol(string symbol, List<string> attributes = default(List<string>))
        {
            var localVarResponse = GetFactsetEtfCompetitorsListBySymbolWithHttpInfo(symbol, attributes);
            return localVarResponse.Data;
        }

        /// <summary>
        /// FactSet&#39;s proprietary list of competing companies. FactSet defines and maintains a proprietary list of competing companies based on a number of attributes specific to a fund.
        /// </summary>
        /// <exception cref="FactSet.SDK.ETFProfileandPrices.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">Ticker-region of a security as defined by FactSet.</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <returns>ApiResponse of InlineResponse20020</returns>
        public ApiResponse<InlineResponse20020> GetFactsetEtfCompetitorsListBySymbolWithHttpInfo(string symbol, List<string> attributes = default(List<string>))
        {
            // verify the required parameter 'symbol' is set
            if (symbol == null)
            {
                throw new FactSet.SDK.ETFProfileandPrices.Client.ApiException(400, "Missing required parameter 'symbol' when calling FactsetApi->GetFactsetEtfCompetitorsListBySymbol");
            }

            FactSet.SDK.ETFProfileandPrices.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.ETFProfileandPrices.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.ParameterToMultiMap("", "symbol", symbol));
            if (attributes != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.ParameterToMultiMap("csv", "_attributes", attributes));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = GetFactsetEtfCompetitorsListBySymbolResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Get<
            InlineResponse20020>("/factset/etf/competitors/listBySymbol", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetFactsetEtfCompetitorsListBySymbol", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// FactSet&#39;s proprietary list of competing companies. FactSet defines and maintains a proprietary list of competing companies based on a number of attributes specific to a fund.
        /// </summary>
        /// <exception cref="FactSet.SDK.ETFProfileandPrices.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">Ticker-region of a security as defined by FactSet.</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse20020</returns>
        public async System.Threading.Tasks.Task<InlineResponse20020>GetFactsetEtfCompetitorsListBySymbolAsync(string symbol, List<string> attributes = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await GetFactsetEtfCompetitorsListBySymbolWithHttpInfoAsync(symbol, attributes, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// FactSet&#39;s proprietary list of competing companies. FactSet defines and maintains a proprietary list of competing companies based on a number of attributes specific to a fund.
        /// </summary>
        /// <exception cref="FactSet.SDK.ETFProfileandPrices.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">Ticker-region of a security as defined by FactSet.</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse20020)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20020>> GetFactsetEtfCompetitorsListBySymbolWithHttpInfoAsync(string symbol, List<string> attributes = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'symbol' is set
            if (symbol == null)
            {
                throw new FactSet.SDK.ETFProfileandPrices.Client.ApiException(400, "Missing required parameter 'symbol' when calling FactsetApi->GetFactsetEtfCompetitorsListBySymbol");
            }


            FactSet.SDK.ETFProfileandPrices.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.ETFProfileandPrices.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.ParameterToMultiMap("", "symbol", symbol));
            if (attributes != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.ParameterToMultiMap("csv", "_attributes", attributes));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = GetFactsetEtfCompetitorsListBySymbolResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<InlineResponse20020>("/factset/etf/competitors/listBySymbol", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetFactsetEtfCompetitorsListBySymbol", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve an ETP&#39;s current distribution details. Retrieve distribution-related details for a specific ETP including dividend and capital gain distribution details.
        /// </summary>
        /// <exception cref="FactSet.SDK.ETFProfileandPrices.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">Market symbol of ETP defined by FactSet.</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <returns>InlineResponse20021</returns>
        public InlineResponse20021 GetFactsetEtfDistributionGetBySymbol(string symbol, List<string> attributes = default(List<string>))
        {
            var localVarResponse = GetFactsetEtfDistributionGetBySymbolWithHttpInfo(symbol, attributes);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve an ETP&#39;s current distribution details. Retrieve distribution-related details for a specific ETP including dividend and capital gain distribution details.
        /// </summary>
        /// <exception cref="FactSet.SDK.ETFProfileandPrices.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">Market symbol of ETP defined by FactSet.</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <returns>ApiResponse of InlineResponse20021</returns>
        public ApiResponse<InlineResponse20021> GetFactsetEtfDistributionGetBySymbolWithHttpInfo(string symbol, List<string> attributes = default(List<string>))
        {
            // verify the required parameter 'symbol' is set
            if (symbol == null)
            {
                throw new FactSet.SDK.ETFProfileandPrices.Client.ApiException(400, "Missing required parameter 'symbol' when calling FactsetApi->GetFactsetEtfDistributionGetBySymbol");
            }

            FactSet.SDK.ETFProfileandPrices.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.ETFProfileandPrices.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.ParameterToMultiMap("", "symbol", symbol));
            if (attributes != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.ParameterToMultiMap("csv", "_attributes", attributes));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = GetFactsetEtfDistributionGetBySymbolResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Get<
            InlineResponse20021>("/factset/etf/distribution/getBySymbol", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetFactsetEtfDistributionGetBySymbol", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// Retrieve an ETP&#39;s current distribution details. Retrieve distribution-related details for a specific ETP including dividend and capital gain distribution details.
        /// </summary>
        /// <exception cref="FactSet.SDK.ETFProfileandPrices.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">Market symbol of ETP defined by FactSet.</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse20021</returns>
        public async System.Threading.Tasks.Task<InlineResponse20021>GetFactsetEtfDistributionGetBySymbolAsync(string symbol, List<string> attributes = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await GetFactsetEtfDistributionGetBySymbolWithHttpInfoAsync(symbol, attributes, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve an ETP&#39;s current distribution details. Retrieve distribution-related details for a specific ETP including dividend and capital gain distribution details.
        /// </summary>
        /// <exception cref="FactSet.SDK.ETFProfileandPrices.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">Market symbol of ETP defined by FactSet.</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse20021)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20021>> GetFactsetEtfDistributionGetBySymbolWithHttpInfoAsync(string symbol, List<string> attributes = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'symbol' is set
            if (symbol == null)
            {
                throw new FactSet.SDK.ETFProfileandPrices.Client.ApiException(400, "Missing required parameter 'symbol' when calling FactsetApi->GetFactsetEtfDistributionGetBySymbol");
            }


            FactSet.SDK.ETFProfileandPrices.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.ETFProfileandPrices.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.ParameterToMultiMap("", "symbol", symbol));
            if (attributes != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.ParameterToMultiMap("csv", "_attributes", attributes));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = GetFactsetEtfDistributionGetBySymbolResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<InlineResponse20021>("/factset/etf/distribution/getBySymbol", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetFactsetEtfDistributionGetBySymbol", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve an ETP&#39;s cash inflow/outflows for various time periods. Retrieve the amount invested or divested in a specific ETP over various time periods including one-day, one-week, one-month, one-year, and YTD.
        /// </summary>
        /// <exception cref="FactSet.SDK.ETFProfileandPrices.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">Market symbol of ETP defined by FactSet.</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <returns>InlineResponse20022</returns>
        public InlineResponse20022 GetFactsetEtfFundFlowsGetBySymbol(string symbol, List<string> attributes = default(List<string>))
        {
            var localVarResponse = GetFactsetEtfFundFlowsGetBySymbolWithHttpInfo(symbol, attributes);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve an ETP&#39;s cash inflow/outflows for various time periods. Retrieve the amount invested or divested in a specific ETP over various time periods including one-day, one-week, one-month, one-year, and YTD.
        /// </summary>
        /// <exception cref="FactSet.SDK.ETFProfileandPrices.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">Market symbol of ETP defined by FactSet.</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <returns>ApiResponse of InlineResponse20022</returns>
        public ApiResponse<InlineResponse20022> GetFactsetEtfFundFlowsGetBySymbolWithHttpInfo(string symbol, List<string> attributes = default(List<string>))
        {
            // verify the required parameter 'symbol' is set
            if (symbol == null)
            {
                throw new FactSet.SDK.ETFProfileandPrices.Client.ApiException(400, "Missing required parameter 'symbol' when calling FactsetApi->GetFactsetEtfFundFlowsGetBySymbol");
            }

            FactSet.SDK.ETFProfileandPrices.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.ETFProfileandPrices.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.ParameterToMultiMap("", "symbol", symbol));
            if (attributes != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.ParameterToMultiMap("csv", "_attributes", attributes));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = GetFactsetEtfFundFlowsGetBySymbolResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Get<
            InlineResponse20022>("/factset/etf/fundFlows/getBySymbol", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetFactsetEtfFundFlowsGetBySymbol", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// Retrieve an ETP&#39;s cash inflow/outflows for various time periods. Retrieve the amount invested or divested in a specific ETP over various time periods including one-day, one-week, one-month, one-year, and YTD.
        /// </summary>
        /// <exception cref="FactSet.SDK.ETFProfileandPrices.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">Market symbol of ETP defined by FactSet.</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse20022</returns>
        public async System.Threading.Tasks.Task<InlineResponse20022>GetFactsetEtfFundFlowsGetBySymbolAsync(string symbol, List<string> attributes = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await GetFactsetEtfFundFlowsGetBySymbolWithHttpInfoAsync(symbol, attributes, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve an ETP&#39;s cash inflow/outflows for various time periods. Retrieve the amount invested or divested in a specific ETP over various time periods including one-day, one-week, one-month, one-year, and YTD.
        /// </summary>
        /// <exception cref="FactSet.SDK.ETFProfileandPrices.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">Market symbol of ETP defined by FactSet.</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse20022)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20022>> GetFactsetEtfFundFlowsGetBySymbolWithHttpInfoAsync(string symbol, List<string> attributes = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'symbol' is set
            if (symbol == null)
            {
                throw new FactSet.SDK.ETFProfileandPrices.Client.ApiException(400, "Missing required parameter 'symbol' when calling FactsetApi->GetFactsetEtfFundFlowsGetBySymbol");
            }


            FactSet.SDK.ETFProfileandPrices.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.ETFProfileandPrices.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.ParameterToMultiMap("", "symbol", symbol));
            if (attributes != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.ParameterToMultiMap("csv", "_attributes", attributes));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = GetFactsetEtfFundFlowsGetBySymbolResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<InlineResponse20022>("/factset/etf/fundFlows/getBySymbol", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetFactsetEtfFundFlowsGetBySymbol", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve basic profile information for a specified ETP. An ETP can be profiled by defining several common attributes such as issuer, fund description, and benchmark.
        /// </summary>
        /// <exception cref="FactSet.SDK.ETFProfileandPrices.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">Market symbol of ETP defined by FactSet.</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <returns>InlineResponse200</returns>
        public InlineResponse200 GetFactsetEtfGetBySymbol(string symbol, List<string> attributes = default(List<string>))
        {
            var localVarResponse = GetFactsetEtfGetBySymbolWithHttpInfo(symbol, attributes);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve basic profile information for a specified ETP. An ETP can be profiled by defining several common attributes such as issuer, fund description, and benchmark.
        /// </summary>
        /// <exception cref="FactSet.SDK.ETFProfileandPrices.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">Market symbol of ETP defined by FactSet.</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <returns>ApiResponse of InlineResponse200</returns>
        public ApiResponse<InlineResponse200> GetFactsetEtfGetBySymbolWithHttpInfo(string symbol, List<string> attributes = default(List<string>))
        {
            // verify the required parameter 'symbol' is set
            if (symbol == null)
            {
                throw new FactSet.SDK.ETFProfileandPrices.Client.ApiException(400, "Missing required parameter 'symbol' when calling FactsetApi->GetFactsetEtfGetBySymbol");
            }

            FactSet.SDK.ETFProfileandPrices.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.ETFProfileandPrices.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.ParameterToMultiMap("", "symbol", symbol));
            if (attributes != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.ParameterToMultiMap("csv", "_attributes", attributes));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = GetFactsetEtfGetBySymbolResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Get<
            InlineResponse200>("/factset/etf/getBySymbol", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetFactsetEtfGetBySymbol", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// Retrieve basic profile information for a specified ETP. An ETP can be profiled by defining several common attributes such as issuer, fund description, and benchmark.
        /// </summary>
        /// <exception cref="FactSet.SDK.ETFProfileandPrices.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">Market symbol of ETP defined by FactSet.</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse200</returns>
        public async System.Threading.Tasks.Task<InlineResponse200>GetFactsetEtfGetBySymbolAsync(string symbol, List<string> attributes = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await GetFactsetEtfGetBySymbolWithHttpInfoAsync(symbol, attributes, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve basic profile information for a specified ETP. An ETP can be profiled by defining several common attributes such as issuer, fund description, and benchmark.
        /// </summary>
        /// <exception cref="FactSet.SDK.ETFProfileandPrices.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">Market symbol of ETP defined by FactSet.</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse200)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse200>> GetFactsetEtfGetBySymbolWithHttpInfoAsync(string symbol, List<string> attributes = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'symbol' is set
            if (symbol == null)
            {
                throw new FactSet.SDK.ETFProfileandPrices.Client.ApiException(400, "Missing required parameter 'symbol' when calling FactsetApi->GetFactsetEtfGetBySymbol");
            }


            FactSet.SDK.ETFProfileandPrices.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.ETFProfileandPrices.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.ParameterToMultiMap("", "symbol", symbol));
            if (attributes != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.ParameterToMultiMap("csv", "_attributes", attributes));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = GetFactsetEtfGetBySymbolResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<InlineResponse200>("/factset/etf/getBySymbol", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetFactsetEtfGetBySymbol", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// This endpoint returns selected ETP&#39;s Growth of 10K calculated values. Growth of 10K (or growth of 10,000) is a commonly used chart that highlights the change in the value of an initial 10,000 investment in the ETP during a given period of time. Often, this period of time is either since inception or the calculation between the pre-defined range.
        /// </summary>
        /// <exception cref="FactSet.SDK.ETFProfileandPrices.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">Market symbol of ETP defined by FactSet.</param>
        /// <param name="timePeriod">Historice NAV date value. (optional)</param>
        /// <param name="calculationType">Historice NAV date value. (optional)</param>
        /// <param name="alignment">Indicates the reference point for growth of 10k data. (optional)</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="paginationOffset">Non-negative number of entries to skip, or 0 (default). (optional, default to 0.0M)</param>
        /// <param name="paginationLimit">Non-negative maximum number of entries to return. (optional, default to 20.0M)</param>
        /// <returns>InlineResponse20023</returns>
        public InlineResponse20023 GetFactsetEtfGrowthOfTenKListBySymbol(string symbol, string timePeriod = default(string), string calculationType = default(string), string alignment = default(string), List<string> attributes = default(List<string>), decimal? paginationOffset = default(decimal?), decimal? paginationLimit = default(decimal?))
        {
            var localVarResponse = GetFactsetEtfGrowthOfTenKListBySymbolWithHttpInfo(symbol, timePeriod, calculationType, alignment, attributes, paginationOffset, paginationLimit);
            return localVarResponse.Data;
        }

        /// <summary>
        /// This endpoint returns selected ETP&#39;s Growth of 10K calculated values. Growth of 10K (or growth of 10,000) is a commonly used chart that highlights the change in the value of an initial 10,000 investment in the ETP during a given period of time. Often, this period of time is either since inception or the calculation between the pre-defined range.
        /// </summary>
        /// <exception cref="FactSet.SDK.ETFProfileandPrices.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">Market symbol of ETP defined by FactSet.</param>
        /// <param name="timePeriod">Historice NAV date value. (optional)</param>
        /// <param name="calculationType">Historice NAV date value. (optional)</param>
        /// <param name="alignment">Indicates the reference point for growth of 10k data. (optional)</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="paginationOffset">Non-negative number of entries to skip, or 0 (default). (optional, default to 0.0M)</param>
        /// <param name="paginationLimit">Non-negative maximum number of entries to return. (optional, default to 20.0M)</param>
        /// <returns>ApiResponse of InlineResponse20023</returns>
        public ApiResponse<InlineResponse20023> GetFactsetEtfGrowthOfTenKListBySymbolWithHttpInfo(string symbol, string timePeriod = default(string), string calculationType = default(string), string alignment = default(string), List<string> attributes = default(List<string>), decimal? paginationOffset = default(decimal?), decimal? paginationLimit = default(decimal?))
        {
            // verify the required parameter 'symbol' is set
            if (symbol == null)
            {
                throw new FactSet.SDK.ETFProfileandPrices.Client.ApiException(400, "Missing required parameter 'symbol' when calling FactsetApi->GetFactsetEtfGrowthOfTenKListBySymbol");
            }

            FactSet.SDK.ETFProfileandPrices.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.ETFProfileandPrices.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.ParameterToMultiMap("", "symbol", symbol));
            if (timePeriod != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.ParameterToMultiMap("", "timePeriod", timePeriod));
            }
            if (calculationType != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.ParameterToMultiMap("", "calculationType", calculationType));
            }
            if (alignment != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.ParameterToMultiMap("", "alignment", alignment));
            }
            if (attributes != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.ParameterToMultiMap("csv", "_attributes", attributes));
            }
            if (paginationOffset != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.ParameterToMultiMap("", "_paginationOffset", paginationOffset));
            }
            if (paginationLimit != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.ParameterToMultiMap("", "_paginationLimit", paginationLimit));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = GetFactsetEtfGrowthOfTenKListBySymbolResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Get<
            InlineResponse20023>("/factset/etf/growthOfTenK/listBySymbol", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetFactsetEtfGrowthOfTenKListBySymbol", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// This endpoint returns selected ETP&#39;s Growth of 10K calculated values. Growth of 10K (or growth of 10,000) is a commonly used chart that highlights the change in the value of an initial 10,000 investment in the ETP during a given period of time. Often, this period of time is either since inception or the calculation between the pre-defined range.
        /// </summary>
        /// <exception cref="FactSet.SDK.ETFProfileandPrices.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">Market symbol of ETP defined by FactSet.</param>
        /// <param name="timePeriod">Historice NAV date value. (optional)</param>
        /// <param name="calculationType">Historice NAV date value. (optional)</param>
        /// <param name="alignment">Indicates the reference point for growth of 10k data. (optional)</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="paginationOffset">Non-negative number of entries to skip, or 0 (default). (optional, default to 0.0M)</param>
        /// <param name="paginationLimit">Non-negative maximum number of entries to return. (optional, default to 20.0M)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse20023</returns>
        public async System.Threading.Tasks.Task<InlineResponse20023>GetFactsetEtfGrowthOfTenKListBySymbolAsync(string symbol, string timePeriod = default(string), string calculationType = default(string), string alignment = default(string), List<string> attributes = default(List<string>), decimal? paginationOffset = default(decimal?), decimal? paginationLimit = default(decimal?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await GetFactsetEtfGrowthOfTenKListBySymbolWithHttpInfoAsync(symbol, timePeriod, calculationType, alignment, attributes, paginationOffset, paginationLimit, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// This endpoint returns selected ETP&#39;s Growth of 10K calculated values. Growth of 10K (or growth of 10,000) is a commonly used chart that highlights the change in the value of an initial 10,000 investment in the ETP during a given period of time. Often, this period of time is either since inception or the calculation between the pre-defined range.
        /// </summary>
        /// <exception cref="FactSet.SDK.ETFProfileandPrices.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">Market symbol of ETP defined by FactSet.</param>
        /// <param name="timePeriod">Historice NAV date value. (optional)</param>
        /// <param name="calculationType">Historice NAV date value. (optional)</param>
        /// <param name="alignment">Indicates the reference point for growth of 10k data. (optional)</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="paginationOffset">Non-negative number of entries to skip, or 0 (default). (optional, default to 0.0M)</param>
        /// <param name="paginationLimit">Non-negative maximum number of entries to return. (optional, default to 20.0M)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse20023)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20023>> GetFactsetEtfGrowthOfTenKListBySymbolWithHttpInfoAsync(string symbol, string timePeriod = default(string), string calculationType = default(string), string alignment = default(string), List<string> attributes = default(List<string>), decimal? paginationOffset = default(decimal?), decimal? paginationLimit = default(decimal?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'symbol' is set
            if (symbol == null)
            {
                throw new FactSet.SDK.ETFProfileandPrices.Client.ApiException(400, "Missing required parameter 'symbol' when calling FactsetApi->GetFactsetEtfGrowthOfTenKListBySymbol");
            }


            FactSet.SDK.ETFProfileandPrices.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.ETFProfileandPrices.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.ParameterToMultiMap("", "symbol", symbol));
            if (timePeriod != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.ParameterToMultiMap("", "timePeriod", timePeriod));
            }
            if (calculationType != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.ParameterToMultiMap("", "calculationType", calculationType));
            }
            if (alignment != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.ParameterToMultiMap("", "alignment", alignment));
            }
            if (attributes != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.ParameterToMultiMap("csv", "_attributes", attributes));
            }
            if (paginationOffset != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.ParameterToMultiMap("", "_paginationOffset", paginationOffset));
            }
            if (paginationLimit != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.ParameterToMultiMap("", "_paginationLimit", paginationLimit));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = GetFactsetEtfGrowthOfTenKListBySymbolResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<InlineResponse20023>("/factset/etf/growthOfTenK/listBySymbol", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetFactsetEtfGrowthOfTenKListBySymbol", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Holdings details for an individual ETP. Retrieve an ETP&#39;s holdings information including security, shares held, and weight.
        /// </summary>
        /// <exception cref="FactSet.SDK.ETFProfileandPrices.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">Market symbol of ETP defined by FactSet.</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="paginationOffset">Non-negative number of entries to skip, or 0 (default). (optional, default to 0.0M)</param>
        /// <param name="paginationLimit">Non-negative maximum number of entries to return. (optional, default to 20.0M)</param>
        /// <returns>InlineResponse20024</returns>
        public InlineResponse20024 GetFactsetEtfHoldingsListBySymbol(string symbol, List<string> attributes = default(List<string>), decimal? paginationOffset = default(decimal?), decimal? paginationLimit = default(decimal?))
        {
            var localVarResponse = GetFactsetEtfHoldingsListBySymbolWithHttpInfo(symbol, attributes, paginationOffset, paginationLimit);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Holdings details for an individual ETP. Retrieve an ETP&#39;s holdings information including security, shares held, and weight.
        /// </summary>
        /// <exception cref="FactSet.SDK.ETFProfileandPrices.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">Market symbol of ETP defined by FactSet.</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="paginationOffset">Non-negative number of entries to skip, or 0 (default). (optional, default to 0.0M)</param>
        /// <param name="paginationLimit">Non-negative maximum number of entries to return. (optional, default to 20.0M)</param>
        /// <returns>ApiResponse of InlineResponse20024</returns>
        public ApiResponse<InlineResponse20024> GetFactsetEtfHoldingsListBySymbolWithHttpInfo(string symbol, List<string> attributes = default(List<string>), decimal? paginationOffset = default(decimal?), decimal? paginationLimit = default(decimal?))
        {
            // verify the required parameter 'symbol' is set
            if (symbol == null)
            {
                throw new FactSet.SDK.ETFProfileandPrices.Client.ApiException(400, "Missing required parameter 'symbol' when calling FactsetApi->GetFactsetEtfHoldingsListBySymbol");
            }

            FactSet.SDK.ETFProfileandPrices.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.ETFProfileandPrices.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.ParameterToMultiMap("", "symbol", symbol));
            if (attributes != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.ParameterToMultiMap("csv", "_attributes", attributes));
            }
            if (paginationOffset != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.ParameterToMultiMap("", "_paginationOffset", paginationOffset));
            }
            if (paginationLimit != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.ParameterToMultiMap("", "_paginationLimit", paginationLimit));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = GetFactsetEtfHoldingsListBySymbolResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Get<
            InlineResponse20024>("/factset/etf/holdings/listBySymbol", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetFactsetEtfHoldingsListBySymbol", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// Holdings details for an individual ETP. Retrieve an ETP&#39;s holdings information including security, shares held, and weight.
        /// </summary>
        /// <exception cref="FactSet.SDK.ETFProfileandPrices.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">Market symbol of ETP defined by FactSet.</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="paginationOffset">Non-negative number of entries to skip, or 0 (default). (optional, default to 0.0M)</param>
        /// <param name="paginationLimit">Non-negative maximum number of entries to return. (optional, default to 20.0M)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse20024</returns>
        public async System.Threading.Tasks.Task<InlineResponse20024>GetFactsetEtfHoldingsListBySymbolAsync(string symbol, List<string> attributes = default(List<string>), decimal? paginationOffset = default(decimal?), decimal? paginationLimit = default(decimal?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await GetFactsetEtfHoldingsListBySymbolWithHttpInfoAsync(symbol, attributes, paginationOffset, paginationLimit, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Holdings details for an individual ETP. Retrieve an ETP&#39;s holdings information including security, shares held, and weight.
        /// </summary>
        /// <exception cref="FactSet.SDK.ETFProfileandPrices.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">Market symbol of ETP defined by FactSet.</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="paginationOffset">Non-negative number of entries to skip, or 0 (default). (optional, default to 0.0M)</param>
        /// <param name="paginationLimit">Non-negative maximum number of entries to return. (optional, default to 20.0M)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse20024)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20024>> GetFactsetEtfHoldingsListBySymbolWithHttpInfoAsync(string symbol, List<string> attributes = default(List<string>), decimal? paginationOffset = default(decimal?), decimal? paginationLimit = default(decimal?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'symbol' is set
            if (symbol == null)
            {
                throw new FactSet.SDK.ETFProfileandPrices.Client.ApiException(400, "Missing required parameter 'symbol' when calling FactsetApi->GetFactsetEtfHoldingsListBySymbol");
            }


            FactSet.SDK.ETFProfileandPrices.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.ETFProfileandPrices.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.ParameterToMultiMap("", "symbol", symbol));
            if (attributes != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.ParameterToMultiMap("csv", "_attributes", attributes));
            }
            if (paginationOffset != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.ParameterToMultiMap("", "_paginationOffset", paginationOffset));
            }
            if (paginationLimit != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.ParameterToMultiMap("", "_paginationLimit", paginationLimit));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = GetFactsetEtfHoldingsListBySymbolResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<InlineResponse20024>("/factset/etf/holdings/listBySymbol", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetFactsetEtfHoldingsListBySymbol", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Market aggregate data for ETPs. Market Aggregates combines FactSet Estimates, FactSet Fundamentals, and FactSet Prices data to derive ratios and per share values on an aggregate level. The resulting index values can be used to identify market trends and compare a combination of portfolios, benchmarks, and individual securities.
        /// </summary>
        /// <exception cref="FactSet.SDK.ETFProfileandPrices.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">Ticker-region of an ETP as defined by FactSet.</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <returns>InlineResponse20025</returns>
        public InlineResponse20025 GetFactsetEtfMarketAggregatesGetBySymbol(string symbol, List<string> attributes = default(List<string>))
        {
            var localVarResponse = GetFactsetEtfMarketAggregatesGetBySymbolWithHttpInfo(symbol, attributes);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Market aggregate data for ETPs. Market Aggregates combines FactSet Estimates, FactSet Fundamentals, and FactSet Prices data to derive ratios and per share values on an aggregate level. The resulting index values can be used to identify market trends and compare a combination of portfolios, benchmarks, and individual securities.
        /// </summary>
        /// <exception cref="FactSet.SDK.ETFProfileandPrices.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">Ticker-region of an ETP as defined by FactSet.</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <returns>ApiResponse of InlineResponse20025</returns>
        public ApiResponse<InlineResponse20025> GetFactsetEtfMarketAggregatesGetBySymbolWithHttpInfo(string symbol, List<string> attributes = default(List<string>))
        {
            // verify the required parameter 'symbol' is set
            if (symbol == null)
            {
                throw new FactSet.SDK.ETFProfileandPrices.Client.ApiException(400, "Missing required parameter 'symbol' when calling FactsetApi->GetFactsetEtfMarketAggregatesGetBySymbol");
            }

            FactSet.SDK.ETFProfileandPrices.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.ETFProfileandPrices.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.ParameterToMultiMap("", "symbol", symbol));
            if (attributes != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.ParameterToMultiMap("csv", "_attributes", attributes));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = GetFactsetEtfMarketAggregatesGetBySymbolResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Get<
            InlineResponse20025>("/factset/etf/marketAggregates/getBySymbol", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetFactsetEtfMarketAggregatesGetBySymbol", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// Market aggregate data for ETPs. Market Aggregates combines FactSet Estimates, FactSet Fundamentals, and FactSet Prices data to derive ratios and per share values on an aggregate level. The resulting index values can be used to identify market trends and compare a combination of portfolios, benchmarks, and individual securities.
        /// </summary>
        /// <exception cref="FactSet.SDK.ETFProfileandPrices.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">Ticker-region of an ETP as defined by FactSet.</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse20025</returns>
        public async System.Threading.Tasks.Task<InlineResponse20025>GetFactsetEtfMarketAggregatesGetBySymbolAsync(string symbol, List<string> attributes = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await GetFactsetEtfMarketAggregatesGetBySymbolWithHttpInfoAsync(symbol, attributes, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Market aggregate data for ETPs. Market Aggregates combines FactSet Estimates, FactSet Fundamentals, and FactSet Prices data to derive ratios and per share values on an aggregate level. The resulting index values can be used to identify market trends and compare a combination of portfolios, benchmarks, and individual securities.
        /// </summary>
        /// <exception cref="FactSet.SDK.ETFProfileandPrices.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">Ticker-region of an ETP as defined by FactSet.</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse20025)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20025>> GetFactsetEtfMarketAggregatesGetBySymbolWithHttpInfoAsync(string symbol, List<string> attributes = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'symbol' is set
            if (symbol == null)
            {
                throw new FactSet.SDK.ETFProfileandPrices.Client.ApiException(400, "Missing required parameter 'symbol' when calling FactsetApi->GetFactsetEtfMarketAggregatesGetBySymbol");
            }


            FactSet.SDK.ETFProfileandPrices.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.ETFProfileandPrices.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.ParameterToMultiMap("", "symbol", symbol));
            if (attributes != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.ParameterToMultiMap("csv", "_attributes", attributes));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = GetFactsetEtfMarketAggregatesGetBySymbolResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<InlineResponse20025>("/factset/etf/marketAggregates/getBySymbol", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetFactsetEtfMarketAggregatesGetBySymbol", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Summary of ETP premium discount data. Summary of ETP premium discount data.
        /// </summary>
        /// <exception cref="FactSet.SDK.ETFProfileandPrices.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">Market symbol of ETP defined by FactSet.</param>
        /// <param name="timePeriod">Time frame of the data. (optional, default to YTD)</param>
        /// <param name="alignment">Indicates the reference point for the historical NAV and price values. (optional, default to quarter-end)</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="paginationOffset">Non-negative number of entries to skip, or 0 (default). (optional, default to 0.0M)</param>
        /// <param name="paginationLimit">Non-negative maximum number of entries to return. (optional, default to 20.0M)</param>
        /// <returns>InlineResponse20026</returns>
        public InlineResponse20026 GetFactsetEtfPremiumDiscountSummaryListBySymbol(string symbol, string timePeriod = default(string), string alignment = default(string), List<string> attributes = default(List<string>), decimal? paginationOffset = default(decimal?), decimal? paginationLimit = default(decimal?))
        {
            var localVarResponse = GetFactsetEtfPremiumDiscountSummaryListBySymbolWithHttpInfo(symbol, timePeriod, alignment, attributes, paginationOffset, paginationLimit);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Summary of ETP premium discount data. Summary of ETP premium discount data.
        /// </summary>
        /// <exception cref="FactSet.SDK.ETFProfileandPrices.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">Market symbol of ETP defined by FactSet.</param>
        /// <param name="timePeriod">Time frame of the data. (optional, default to YTD)</param>
        /// <param name="alignment">Indicates the reference point for the historical NAV and price values. (optional, default to quarter-end)</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="paginationOffset">Non-negative number of entries to skip, or 0 (default). (optional, default to 0.0M)</param>
        /// <param name="paginationLimit">Non-negative maximum number of entries to return. (optional, default to 20.0M)</param>
        /// <returns>ApiResponse of InlineResponse20026</returns>
        public ApiResponse<InlineResponse20026> GetFactsetEtfPremiumDiscountSummaryListBySymbolWithHttpInfo(string symbol, string timePeriod = default(string), string alignment = default(string), List<string> attributes = default(List<string>), decimal? paginationOffset = default(decimal?), decimal? paginationLimit = default(decimal?))
        {
            // verify the required parameter 'symbol' is set
            if (symbol == null)
            {
                throw new FactSet.SDK.ETFProfileandPrices.Client.ApiException(400, "Missing required parameter 'symbol' when calling FactsetApi->GetFactsetEtfPremiumDiscountSummaryListBySymbol");
            }

            FactSet.SDK.ETFProfileandPrices.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.ETFProfileandPrices.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.ParameterToMultiMap("", "symbol", symbol));
            if (timePeriod != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.ParameterToMultiMap("", "timePeriod", timePeriod));
            }
            if (alignment != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.ParameterToMultiMap("", "alignment", alignment));
            }
            if (attributes != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.ParameterToMultiMap("csv", "_attributes", attributes));
            }
            if (paginationOffset != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.ParameterToMultiMap("", "_paginationOffset", paginationOffset));
            }
            if (paginationLimit != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.ParameterToMultiMap("", "_paginationLimit", paginationLimit));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = GetFactsetEtfPremiumDiscountSummaryListBySymbolResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Get<
            InlineResponse20026>("/factset/etf/premiumDiscount/summary/listBySymbol", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetFactsetEtfPremiumDiscountSummaryListBySymbol", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// Summary of ETP premium discount data. Summary of ETP premium discount data.
        /// </summary>
        /// <exception cref="FactSet.SDK.ETFProfileandPrices.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">Market symbol of ETP defined by FactSet.</param>
        /// <param name="timePeriod">Time frame of the data. (optional, default to YTD)</param>
        /// <param name="alignment">Indicates the reference point for the historical NAV and price values. (optional, default to quarter-end)</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="paginationOffset">Non-negative number of entries to skip, or 0 (default). (optional, default to 0.0M)</param>
        /// <param name="paginationLimit">Non-negative maximum number of entries to return. (optional, default to 20.0M)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse20026</returns>
        public async System.Threading.Tasks.Task<InlineResponse20026>GetFactsetEtfPremiumDiscountSummaryListBySymbolAsync(string symbol, string timePeriod = default(string), string alignment = default(string), List<string> attributes = default(List<string>), decimal? paginationOffset = default(decimal?), decimal? paginationLimit = default(decimal?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await GetFactsetEtfPremiumDiscountSummaryListBySymbolWithHttpInfoAsync(symbol, timePeriod, alignment, attributes, paginationOffset, paginationLimit, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Summary of ETP premium discount data. Summary of ETP premium discount data.
        /// </summary>
        /// <exception cref="FactSet.SDK.ETFProfileandPrices.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">Market symbol of ETP defined by FactSet.</param>
        /// <param name="timePeriod">Time frame of the data. (optional, default to YTD)</param>
        /// <param name="alignment">Indicates the reference point for the historical NAV and price values. (optional, default to quarter-end)</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="paginationOffset">Non-negative number of entries to skip, or 0 (default). (optional, default to 0.0M)</param>
        /// <param name="paginationLimit">Non-negative maximum number of entries to return. (optional, default to 20.0M)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse20026)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20026>> GetFactsetEtfPremiumDiscountSummaryListBySymbolWithHttpInfoAsync(string symbol, string timePeriod = default(string), string alignment = default(string), List<string> attributes = default(List<string>), decimal? paginationOffset = default(decimal?), decimal? paginationLimit = default(decimal?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'symbol' is set
            if (symbol == null)
            {
                throw new FactSet.SDK.ETFProfileandPrices.Client.ApiException(400, "Missing required parameter 'symbol' when calling FactsetApi->GetFactsetEtfPremiumDiscountSummaryListBySymbol");
            }


            FactSet.SDK.ETFProfileandPrices.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.ETFProfileandPrices.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.ParameterToMultiMap("", "symbol", symbol));
            if (timePeriod != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.ParameterToMultiMap("", "timePeriod", timePeriod));
            }
            if (alignment != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.ParameterToMultiMap("", "alignment", alignment));
            }
            if (attributes != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.ParameterToMultiMap("csv", "_attributes", attributes));
            }
            if (paginationOffset != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.ParameterToMultiMap("", "_paginationOffset", paginationOffset));
            }
            if (paginationLimit != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.ParameterToMultiMap("", "_paginationLimit", paginationLimit));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = GetFactsetEtfPremiumDiscountSummaryListBySymbolResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<InlineResponse20026>("/factset/etf/premiumDiscount/summary/listBySymbol", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetFactsetEtfPremiumDiscountSummaryListBySymbol", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve historical ETP NAV values. Retrieve an ETP&#39;s historical NAV and shares outstanding for a specified time range.
        /// </summary>
        /// <exception cref="FactSet.SDK.ETFProfileandPrices.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">Market symbol of ETP defined by FactSet.</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <returns>InlineResponse20027</returns>
        public InlineResponse20027 GetFactsetEtfPriceGetBySymbol(string symbol, List<string> attributes = default(List<string>))
        {
            var localVarResponse = GetFactsetEtfPriceGetBySymbolWithHttpInfo(symbol, attributes);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve historical ETP NAV values. Retrieve an ETP&#39;s historical NAV and shares outstanding for a specified time range.
        /// </summary>
        /// <exception cref="FactSet.SDK.ETFProfileandPrices.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">Market symbol of ETP defined by FactSet.</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <returns>ApiResponse of InlineResponse20027</returns>
        public ApiResponse<InlineResponse20027> GetFactsetEtfPriceGetBySymbolWithHttpInfo(string symbol, List<string> attributes = default(List<string>))
        {
            // verify the required parameter 'symbol' is set
            if (symbol == null)
            {
                throw new FactSet.SDK.ETFProfileandPrices.Client.ApiException(400, "Missing required parameter 'symbol' when calling FactsetApi->GetFactsetEtfPriceGetBySymbol");
            }

            FactSet.SDK.ETFProfileandPrices.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.ETFProfileandPrices.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.ParameterToMultiMap("", "symbol", symbol));
            if (attributes != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.ParameterToMultiMap("csv", "_attributes", attributes));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = GetFactsetEtfPriceGetBySymbolResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Get<
            InlineResponse20027>("/factset/etf/price/getBySymbol", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetFactsetEtfPriceGetBySymbol", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// Retrieve historical ETP NAV values. Retrieve an ETP&#39;s historical NAV and shares outstanding for a specified time range.
        /// </summary>
        /// <exception cref="FactSet.SDK.ETFProfileandPrices.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">Market symbol of ETP defined by FactSet.</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse20027</returns>
        public async System.Threading.Tasks.Task<InlineResponse20027>GetFactsetEtfPriceGetBySymbolAsync(string symbol, List<string> attributes = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await GetFactsetEtfPriceGetBySymbolWithHttpInfoAsync(symbol, attributes, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve historical ETP NAV values. Retrieve an ETP&#39;s historical NAV and shares outstanding for a specified time range.
        /// </summary>
        /// <exception cref="FactSet.SDK.ETFProfileandPrices.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">Market symbol of ETP defined by FactSet.</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse20027)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20027>> GetFactsetEtfPriceGetBySymbolWithHttpInfoAsync(string symbol, List<string> attributes = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'symbol' is set
            if (symbol == null)
            {
                throw new FactSet.SDK.ETFProfileandPrices.Client.ApiException(400, "Missing required parameter 'symbol' when calling FactsetApi->GetFactsetEtfPriceGetBySymbol");
            }


            FactSet.SDK.ETFProfileandPrices.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.ETFProfileandPrices.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.ParameterToMultiMap("", "symbol", symbol));
            if (attributes != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.ParameterToMultiMap("csv", "_attributes", attributes));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = GetFactsetEtfPriceGetBySymbolResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<InlineResponse20027>("/factset/etf/price/getBySymbol", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetFactsetEtfPriceGetBySymbol", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve total return data for a specified ETP. An ETP&#39;s total return data can be returned for various time frames including 1-month, 3-month, YTD, 1-year, 3-year, and 5-year. Total return calculations include price performance plus reinvested and compounded distributions. Market price is used to calcualte market returns. Portfolio nav is used to calcualte nav returns.
        /// </summary>
        /// <exception cref="FactSet.SDK.ETFProfileandPrices.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">Market symbol of ETP defined by FactSet.</param>
        /// <param name="returnType">Return type. (optional, default to price)</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <returns>InlineResponse20028</returns>
        public InlineResponse20028 GetFactsetEtfReturnsGetBySymbol(string symbol, string returnType = default(string), List<string> attributes = default(List<string>))
        {
            var localVarResponse = GetFactsetEtfReturnsGetBySymbolWithHttpInfo(symbol, returnType, attributes);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve total return data for a specified ETP. An ETP&#39;s total return data can be returned for various time frames including 1-month, 3-month, YTD, 1-year, 3-year, and 5-year. Total return calculations include price performance plus reinvested and compounded distributions. Market price is used to calcualte market returns. Portfolio nav is used to calcualte nav returns.
        /// </summary>
        /// <exception cref="FactSet.SDK.ETFProfileandPrices.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">Market symbol of ETP defined by FactSet.</param>
        /// <param name="returnType">Return type. (optional, default to price)</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <returns>ApiResponse of InlineResponse20028</returns>
        public ApiResponse<InlineResponse20028> GetFactsetEtfReturnsGetBySymbolWithHttpInfo(string symbol, string returnType = default(string), List<string> attributes = default(List<string>))
        {
            // verify the required parameter 'symbol' is set
            if (symbol == null)
            {
                throw new FactSet.SDK.ETFProfileandPrices.Client.ApiException(400, "Missing required parameter 'symbol' when calling FactsetApi->GetFactsetEtfReturnsGetBySymbol");
            }

            FactSet.SDK.ETFProfileandPrices.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.ETFProfileandPrices.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.ParameterToMultiMap("", "symbol", symbol));
            if (returnType != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.ParameterToMultiMap("", "returnType", returnType));
            }
            if (attributes != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.ParameterToMultiMap("csv", "_attributes", attributes));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = GetFactsetEtfReturnsGetBySymbolResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Get<
            InlineResponse20028>("/factset/etf/returns/getBySymbol", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetFactsetEtfReturnsGetBySymbol", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// Retrieve total return data for a specified ETP. An ETP&#39;s total return data can be returned for various time frames including 1-month, 3-month, YTD, 1-year, 3-year, and 5-year. Total return calculations include price performance plus reinvested and compounded distributions. Market price is used to calcualte market returns. Portfolio nav is used to calcualte nav returns.
        /// </summary>
        /// <exception cref="FactSet.SDK.ETFProfileandPrices.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">Market symbol of ETP defined by FactSet.</param>
        /// <param name="returnType">Return type. (optional, default to price)</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse20028</returns>
        public async System.Threading.Tasks.Task<InlineResponse20028>GetFactsetEtfReturnsGetBySymbolAsync(string symbol, string returnType = default(string), List<string> attributes = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await GetFactsetEtfReturnsGetBySymbolWithHttpInfoAsync(symbol, returnType, attributes, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve total return data for a specified ETP. An ETP&#39;s total return data can be returned for various time frames including 1-month, 3-month, YTD, 1-year, 3-year, and 5-year. Total return calculations include price performance plus reinvested and compounded distributions. Market price is used to calcualte market returns. Portfolio nav is used to calcualte nav returns.
        /// </summary>
        /// <exception cref="FactSet.SDK.ETFProfileandPrices.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">Market symbol of ETP defined by FactSet.</param>
        /// <param name="returnType">Return type. (optional, default to price)</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse20028)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20028>> GetFactsetEtfReturnsGetBySymbolWithHttpInfoAsync(string symbol, string returnType = default(string), List<string> attributes = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'symbol' is set
            if (symbol == null)
            {
                throw new FactSet.SDK.ETFProfileandPrices.Client.ApiException(400, "Missing required parameter 'symbol' when calling FactsetApi->GetFactsetEtfReturnsGetBySymbol");
            }


            FactSet.SDK.ETFProfileandPrices.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.ETFProfileandPrices.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.ParameterToMultiMap("", "symbol", symbol));
            if (returnType != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.ParameterToMultiMap("", "returnType", returnType));
            }
            if (attributes != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.ParameterToMultiMap("csv", "_attributes", attributes));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = GetFactsetEtfReturnsGetBySymbolResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<InlineResponse20028>("/factset/etf/returns/getBySymbol", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetFactsetEtfReturnsGetBySymbol", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve various classification details for a specified ETP. ETP&#39;s can be classified in many different ways including investment strategy, security weightings, and fund composition.
        /// </summary>
        /// <exception cref="FactSet.SDK.ETFProfileandPrices.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">Market symbol of ETP defined by FactSet.</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <returns>InlineResponse20029</returns>
        public InlineResponse20029 GetFactsetEtfStrategyGetBySymbol(string symbol, List<string> attributes = default(List<string>))
        {
            var localVarResponse = GetFactsetEtfStrategyGetBySymbolWithHttpInfo(symbol, attributes);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve various classification details for a specified ETP. ETP&#39;s can be classified in many different ways including investment strategy, security weightings, and fund composition.
        /// </summary>
        /// <exception cref="FactSet.SDK.ETFProfileandPrices.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">Market symbol of ETP defined by FactSet.</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <returns>ApiResponse of InlineResponse20029</returns>
        public ApiResponse<InlineResponse20029> GetFactsetEtfStrategyGetBySymbolWithHttpInfo(string symbol, List<string> attributes = default(List<string>))
        {
            // verify the required parameter 'symbol' is set
            if (symbol == null)
            {
                throw new FactSet.SDK.ETFProfileandPrices.Client.ApiException(400, "Missing required parameter 'symbol' when calling FactsetApi->GetFactsetEtfStrategyGetBySymbol");
            }

            FactSet.SDK.ETFProfileandPrices.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.ETFProfileandPrices.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.ParameterToMultiMap("", "symbol", symbol));
            if (attributes != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.ParameterToMultiMap("csv", "_attributes", attributes));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = GetFactsetEtfStrategyGetBySymbolResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Get<
            InlineResponse20029>("/factset/etf/strategy/getBySymbol", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetFactsetEtfStrategyGetBySymbol", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// Retrieve various classification details for a specified ETP. ETP&#39;s can be classified in many different ways including investment strategy, security weightings, and fund composition.
        /// </summary>
        /// <exception cref="FactSet.SDK.ETFProfileandPrices.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">Market symbol of ETP defined by FactSet.</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse20029</returns>
        public async System.Threading.Tasks.Task<InlineResponse20029>GetFactsetEtfStrategyGetBySymbolAsync(string symbol, List<string> attributes = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await GetFactsetEtfStrategyGetBySymbolWithHttpInfoAsync(symbol, attributes, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve various classification details for a specified ETP. ETP&#39;s can be classified in many different ways including investment strategy, security weightings, and fund composition.
        /// </summary>
        /// <exception cref="FactSet.SDK.ETFProfileandPrices.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">Market symbol of ETP defined by FactSet.</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse20029)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20029>> GetFactsetEtfStrategyGetBySymbolWithHttpInfoAsync(string symbol, List<string> attributes = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'symbol' is set
            if (symbol == null)
            {
                throw new FactSet.SDK.ETFProfileandPrices.Client.ApiException(400, "Missing required parameter 'symbol' when calling FactsetApi->GetFactsetEtfStrategyGetBySymbol");
            }


            FactSet.SDK.ETFProfileandPrices.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.ETFProfileandPrices.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.ParameterToMultiMap("", "symbol", symbol));
            if (attributes != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.ParameterToMultiMap("csv", "_attributes", attributes));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = GetFactsetEtfStrategyGetBySymbolResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<InlineResponse20029>("/factset/etf/strategy/getBySymbol", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetFactsetEtfStrategyGetBySymbol", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve a list of ETP strategy segments. Retrieve the various segments assigned to a specific ETP. Segment data is used to group funds for comparison and relative performance analyses.
        /// </summary>
        /// <exception cref="FactSet.SDK.ETFProfileandPrices.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="paginationOffset">Non-negative number of entries to skip, or 0 (default). (optional, default to 0.0M)</param>
        /// <param name="paginationLimit">Non-negative maximum number of entries to return. (optional, default to 20.0M)</param>
        /// <returns>InlineResponse20030</returns>
        public InlineResponse20030 GetFactsetEtfStrategySegmentList(List<string> attributes = default(List<string>), decimal? paginationOffset = default(decimal?), decimal? paginationLimit = default(decimal?))
        {
            var localVarResponse = GetFactsetEtfStrategySegmentListWithHttpInfo(attributes, paginationOffset, paginationLimit);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve a list of ETP strategy segments. Retrieve the various segments assigned to a specific ETP. Segment data is used to group funds for comparison and relative performance analyses.
        /// </summary>
        /// <exception cref="FactSet.SDK.ETFProfileandPrices.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="paginationOffset">Non-negative number of entries to skip, or 0 (default). (optional, default to 0.0M)</param>
        /// <param name="paginationLimit">Non-negative maximum number of entries to return. (optional, default to 20.0M)</param>
        /// <returns>ApiResponse of InlineResponse20030</returns>
        public ApiResponse<InlineResponse20030> GetFactsetEtfStrategySegmentListWithHttpInfo(List<string> attributes = default(List<string>), decimal? paginationOffset = default(decimal?), decimal? paginationLimit = default(decimal?))
        {
            FactSet.SDK.ETFProfileandPrices.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.ETFProfileandPrices.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (attributes != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.ParameterToMultiMap("csv", "_attributes", attributes));
            }
            if (paginationOffset != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.ParameterToMultiMap("", "_paginationOffset", paginationOffset));
            }
            if (paginationLimit != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.ParameterToMultiMap("", "_paginationLimit", paginationLimit));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = GetFactsetEtfStrategySegmentListResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Get<
            InlineResponse20030>("/factset/etf/strategy/segment/list", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetFactsetEtfStrategySegmentList", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// Retrieve a list of ETP strategy segments. Retrieve the various segments assigned to a specific ETP. Segment data is used to group funds for comparison and relative performance analyses.
        /// </summary>
        /// <exception cref="FactSet.SDK.ETFProfileandPrices.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="paginationOffset">Non-negative number of entries to skip, or 0 (default). (optional, default to 0.0M)</param>
        /// <param name="paginationLimit">Non-negative maximum number of entries to return. (optional, default to 20.0M)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse20030</returns>
        public async System.Threading.Tasks.Task<InlineResponse20030>GetFactsetEtfStrategySegmentListAsync(List<string> attributes = default(List<string>), decimal? paginationOffset = default(decimal?), decimal? paginationLimit = default(decimal?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await GetFactsetEtfStrategySegmentListWithHttpInfoAsync(attributes, paginationOffset, paginationLimit, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve a list of ETP strategy segments. Retrieve the various segments assigned to a specific ETP. Segment data is used to group funds for comparison and relative performance analyses.
        /// </summary>
        /// <exception cref="FactSet.SDK.ETFProfileandPrices.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="paginationOffset">Non-negative number of entries to skip, or 0 (default). (optional, default to 0.0M)</param>
        /// <param name="paginationLimit">Non-negative maximum number of entries to return. (optional, default to 20.0M)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse20030)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20030>> GetFactsetEtfStrategySegmentListWithHttpInfoAsync(List<string> attributes = default(List<string>), decimal? paginationOffset = default(decimal?), decimal? paginationLimit = default(decimal?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            FactSet.SDK.ETFProfileandPrices.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.ETFProfileandPrices.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (attributes != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.ParameterToMultiMap("csv", "_attributes", attributes));
            }
            if (paginationOffset != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.ParameterToMultiMap("", "_paginationOffset", paginationOffset));
            }
            if (paginationLimit != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.ParameterToMultiMap("", "_paginationLimit", paginationLimit));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = GetFactsetEtfStrategySegmentListResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<InlineResponse20030>("/factset/etf/strategy/segment/list", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetFactsetEtfStrategySegmentList", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve the basic structure information for a specified ETP. Retrieve details on a fund&#39;s structure including its type, investment style (active/passive), and legal structure.
        /// </summary>
        /// <exception cref="FactSet.SDK.ETFProfileandPrices.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">Market symbol of ETP defined by FactSet.</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <returns>InlineResponse20031</returns>
        public InlineResponse20031 GetFactsetEtfStructureGetBySymbol(string symbol, List<string> attributes = default(List<string>))
        {
            var localVarResponse = GetFactsetEtfStructureGetBySymbolWithHttpInfo(symbol, attributes);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve the basic structure information for a specified ETP. Retrieve details on a fund&#39;s structure including its type, investment style (active/passive), and legal structure.
        /// </summary>
        /// <exception cref="FactSet.SDK.ETFProfileandPrices.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">Market symbol of ETP defined by FactSet.</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <returns>ApiResponse of InlineResponse20031</returns>
        public ApiResponse<InlineResponse20031> GetFactsetEtfStructureGetBySymbolWithHttpInfo(string symbol, List<string> attributes = default(List<string>))
        {
            // verify the required parameter 'symbol' is set
            if (symbol == null)
            {
                throw new FactSet.SDK.ETFProfileandPrices.Client.ApiException(400, "Missing required parameter 'symbol' when calling FactsetApi->GetFactsetEtfStructureGetBySymbol");
            }

            FactSet.SDK.ETFProfileandPrices.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.ETFProfileandPrices.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.ParameterToMultiMap("", "symbol", symbol));
            if (attributes != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.ParameterToMultiMap("csv", "_attributes", attributes));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = GetFactsetEtfStructureGetBySymbolResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Get<
            InlineResponse20031>("/factset/etf/structure/getBySymbol", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetFactsetEtfStructureGetBySymbol", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// Retrieve the basic structure information for a specified ETP. Retrieve details on a fund&#39;s structure including its type, investment style (active/passive), and legal structure.
        /// </summary>
        /// <exception cref="FactSet.SDK.ETFProfileandPrices.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">Market symbol of ETP defined by FactSet.</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse20031</returns>
        public async System.Threading.Tasks.Task<InlineResponse20031>GetFactsetEtfStructureGetBySymbolAsync(string symbol, List<string> attributes = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await GetFactsetEtfStructureGetBySymbolWithHttpInfoAsync(symbol, attributes, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve the basic structure information for a specified ETP. Retrieve details on a fund&#39;s structure including its type, investment style (active/passive), and legal structure.
        /// </summary>
        /// <exception cref="FactSet.SDK.ETFProfileandPrices.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">Market symbol of ETP defined by FactSet.</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse20031)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20031>> GetFactsetEtfStructureGetBySymbolWithHttpInfoAsync(string symbol, List<string> attributes = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'symbol' is set
            if (symbol == null)
            {
                throw new FactSet.SDK.ETFProfileandPrices.Client.ApiException(400, "Missing required parameter 'symbol' when calling FactsetApi->GetFactsetEtfStructureGetBySymbol");
            }


            FactSet.SDK.ETFProfileandPrices.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.ETFProfileandPrices.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.ParameterToMultiMap("", "symbol", symbol));
            if (attributes != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.ParameterToMultiMap("csv", "_attributes", attributes));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = GetFactsetEtfStructureGetBySymbolResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<InlineResponse20031>("/factset/etf/structure/getBySymbol", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetFactsetEtfStructureGetBySymbol", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve the tax and fee related information for a specified ETP. Retrieve various fee and tax related details on a specified ETP including expense ratio and tax treatment for dividends and capital gains.
        /// </summary>
        /// <exception cref="FactSet.SDK.ETFProfileandPrices.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">Market symbol of ETP defined by FactSet.</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <returns>InlineResponse20032</returns>
        public InlineResponse20032 GetFactsetEtfTaxesAndFeesUsGetBySymbol(string symbol, List<string> attributes = default(List<string>))
        {
            var localVarResponse = GetFactsetEtfTaxesAndFeesUsGetBySymbolWithHttpInfo(symbol, attributes);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve the tax and fee related information for a specified ETP. Retrieve various fee and tax related details on a specified ETP including expense ratio and tax treatment for dividends and capital gains.
        /// </summary>
        /// <exception cref="FactSet.SDK.ETFProfileandPrices.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">Market symbol of ETP defined by FactSet.</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <returns>ApiResponse of InlineResponse20032</returns>
        public ApiResponse<InlineResponse20032> GetFactsetEtfTaxesAndFeesUsGetBySymbolWithHttpInfo(string symbol, List<string> attributes = default(List<string>))
        {
            // verify the required parameter 'symbol' is set
            if (symbol == null)
            {
                throw new FactSet.SDK.ETFProfileandPrices.Client.ApiException(400, "Missing required parameter 'symbol' when calling FactsetApi->GetFactsetEtfTaxesAndFeesUsGetBySymbol");
            }

            FactSet.SDK.ETFProfileandPrices.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.ETFProfileandPrices.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.ParameterToMultiMap("", "symbol", symbol));
            if (attributes != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.ParameterToMultiMap("csv", "_attributes", attributes));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = GetFactsetEtfTaxesAndFeesUsGetBySymbolResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Get<
            InlineResponse20032>("/factset/etf/taxesAndFees/us/getBySymbol", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetFactsetEtfTaxesAndFeesUsGetBySymbol", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// Retrieve the tax and fee related information for a specified ETP. Retrieve various fee and tax related details on a specified ETP including expense ratio and tax treatment for dividends and capital gains.
        /// </summary>
        /// <exception cref="FactSet.SDK.ETFProfileandPrices.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">Market symbol of ETP defined by FactSet.</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse20032</returns>
        public async System.Threading.Tasks.Task<InlineResponse20032>GetFactsetEtfTaxesAndFeesUsGetBySymbolAsync(string symbol, List<string> attributes = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await GetFactsetEtfTaxesAndFeesUsGetBySymbolWithHttpInfoAsync(symbol, attributes, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve the tax and fee related information for a specified ETP. Retrieve various fee and tax related details on a specified ETP including expense ratio and tax treatment for dividends and capital gains.
        /// </summary>
        /// <exception cref="FactSet.SDK.ETFProfileandPrices.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">Market symbol of ETP defined by FactSet.</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse20032)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20032>> GetFactsetEtfTaxesAndFeesUsGetBySymbolWithHttpInfoAsync(string symbol, List<string> attributes = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'symbol' is set
            if (symbol == null)
            {
                throw new FactSet.SDK.ETFProfileandPrices.Client.ApiException(400, "Missing required parameter 'symbol' when calling FactsetApi->GetFactsetEtfTaxesAndFeesUsGetBySymbol");
            }


            FactSet.SDK.ETFProfileandPrices.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.ETFProfileandPrices.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.ParameterToMultiMap("", "symbol", symbol));
            if (attributes != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.ParameterToMultiMap("csv", "_attributes", attributes));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = GetFactsetEtfTaxesAndFeesUsGetBySymbolResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<InlineResponse20032>("/factset/etf/taxesAndFees/us/getBySymbol", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetFactsetEtfTaxesAndFeesUsGetBySymbol", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve historical NAV data for a specified ETP. Retrieve the historical NAV data and the respective fund flows and shares outstanding for a specified fund and time period. Please refer currency.fund in /factset/etf/getBySymbol for currency value.
        /// </summary>
        /// <exception cref="FactSet.SDK.ETFProfileandPrices.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">Market symbol of ETP defined by FactSet.</param>
        /// <param name="timePeriod">Time frame of the data. (optional, default to 1Y)</param>
        /// <param name="alignment">Indicates the reference point for the time series data. (optional)</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="paginationOffset">Non-negative number of entries to skip, or 0 (default). (optional, default to 0.0M)</param>
        /// <param name="paginationLimit">Non-negative maximum number of entries to return. (optional, default to 20.0M)</param>
        /// <returns>InlineResponse20033</returns>
        public InlineResponse20033 GetFactsetEtfTimeSeriesListBySymbol(string symbol, string timePeriod = default(string), string alignment = default(string), List<string> attributes = default(List<string>), decimal? paginationOffset = default(decimal?), decimal? paginationLimit = default(decimal?))
        {
            var localVarResponse = GetFactsetEtfTimeSeriesListBySymbolWithHttpInfo(symbol, timePeriod, alignment, attributes, paginationOffset, paginationLimit);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve historical NAV data for a specified ETP. Retrieve the historical NAV data and the respective fund flows and shares outstanding for a specified fund and time period. Please refer currency.fund in /factset/etf/getBySymbol for currency value.
        /// </summary>
        /// <exception cref="FactSet.SDK.ETFProfileandPrices.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">Market symbol of ETP defined by FactSet.</param>
        /// <param name="timePeriod">Time frame of the data. (optional, default to 1Y)</param>
        /// <param name="alignment">Indicates the reference point for the time series data. (optional)</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="paginationOffset">Non-negative number of entries to skip, or 0 (default). (optional, default to 0.0M)</param>
        /// <param name="paginationLimit">Non-negative maximum number of entries to return. (optional, default to 20.0M)</param>
        /// <returns>ApiResponse of InlineResponse20033</returns>
        public ApiResponse<InlineResponse20033> GetFactsetEtfTimeSeriesListBySymbolWithHttpInfo(string symbol, string timePeriod = default(string), string alignment = default(string), List<string> attributes = default(List<string>), decimal? paginationOffset = default(decimal?), decimal? paginationLimit = default(decimal?))
        {
            // verify the required parameter 'symbol' is set
            if (symbol == null)
            {
                throw new FactSet.SDK.ETFProfileandPrices.Client.ApiException(400, "Missing required parameter 'symbol' when calling FactsetApi->GetFactsetEtfTimeSeriesListBySymbol");
            }

            FactSet.SDK.ETFProfileandPrices.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.ETFProfileandPrices.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.ParameterToMultiMap("", "symbol", symbol));
            if (timePeriod != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.ParameterToMultiMap("", "timePeriod", timePeriod));
            }
            if (alignment != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.ParameterToMultiMap("", "alignment", alignment));
            }
            if (attributes != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.ParameterToMultiMap("csv", "_attributes", attributes));
            }
            if (paginationOffset != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.ParameterToMultiMap("", "_paginationOffset", paginationOffset));
            }
            if (paginationLimit != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.ParameterToMultiMap("", "_paginationLimit", paginationLimit));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = GetFactsetEtfTimeSeriesListBySymbolResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Get<
            InlineResponse20033>("/factset/etf/timeSeries/listBySymbol", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetFactsetEtfTimeSeriesListBySymbol", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// Retrieve historical NAV data for a specified ETP. Retrieve the historical NAV data and the respective fund flows and shares outstanding for a specified fund and time period. Please refer currency.fund in /factset/etf/getBySymbol for currency value.
        /// </summary>
        /// <exception cref="FactSet.SDK.ETFProfileandPrices.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">Market symbol of ETP defined by FactSet.</param>
        /// <param name="timePeriod">Time frame of the data. (optional, default to 1Y)</param>
        /// <param name="alignment">Indicates the reference point for the time series data. (optional)</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="paginationOffset">Non-negative number of entries to skip, or 0 (default). (optional, default to 0.0M)</param>
        /// <param name="paginationLimit">Non-negative maximum number of entries to return. (optional, default to 20.0M)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse20033</returns>
        public async System.Threading.Tasks.Task<InlineResponse20033>GetFactsetEtfTimeSeriesListBySymbolAsync(string symbol, string timePeriod = default(string), string alignment = default(string), List<string> attributes = default(List<string>), decimal? paginationOffset = default(decimal?), decimal? paginationLimit = default(decimal?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await GetFactsetEtfTimeSeriesListBySymbolWithHttpInfoAsync(symbol, timePeriod, alignment, attributes, paginationOffset, paginationLimit, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve historical NAV data for a specified ETP. Retrieve the historical NAV data and the respective fund flows and shares outstanding for a specified fund and time period. Please refer currency.fund in /factset/etf/getBySymbol for currency value.
        /// </summary>
        /// <exception cref="FactSet.SDK.ETFProfileandPrices.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">Market symbol of ETP defined by FactSet.</param>
        /// <param name="timePeriod">Time frame of the data. (optional, default to 1Y)</param>
        /// <param name="alignment">Indicates the reference point for the time series data. (optional)</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="paginationOffset">Non-negative number of entries to skip, or 0 (default). (optional, default to 0.0M)</param>
        /// <param name="paginationLimit">Non-negative maximum number of entries to return. (optional, default to 20.0M)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse20033)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20033>> GetFactsetEtfTimeSeriesListBySymbolWithHttpInfoAsync(string symbol, string timePeriod = default(string), string alignment = default(string), List<string> attributes = default(List<string>), decimal? paginationOffset = default(decimal?), decimal? paginationLimit = default(decimal?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'symbol' is set
            if (symbol == null)
            {
                throw new FactSet.SDK.ETFProfileandPrices.Client.ApiException(400, "Missing required parameter 'symbol' when calling FactsetApi->GetFactsetEtfTimeSeriesListBySymbol");
            }


            FactSet.SDK.ETFProfileandPrices.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.ETFProfileandPrices.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.ParameterToMultiMap("", "symbol", symbol));
            if (timePeriod != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.ParameterToMultiMap("", "timePeriod", timePeriod));
            }
            if (alignment != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.ParameterToMultiMap("", "alignment", alignment));
            }
            if (attributes != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.ParameterToMultiMap("csv", "_attributes", attributes));
            }
            if (paginationOffset != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.ParameterToMultiMap("", "_paginationOffset", paginationOffset));
            }
            if (paginationLimit != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.ParameterToMultiMap("", "_paginationLimit", paginationLimit));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = GetFactsetEtfTimeSeriesListBySymbolResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<InlineResponse20033>("/factset/etf/timeSeries/listBySymbol", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetFactsetEtfTimeSeriesListBySymbol", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
