/*
 * Prime Developer Trial
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using FactSet.SDK.ETFProfileandPrices.Client;
using FactSet.SDK.ETFProfileandPrices.Model;
using FactSet.SDK.Utils.Authentication;

namespace FactSet.SDK.ETFProfileandPrices.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IFactsetApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// This endpoint returns selected ETP&#39;s asset allocations.
        /// </summary>
        /// <remarks>
        /// This endpoint returns selected ETP&#39;s allocations grouped by asset class. The response will be sorted by weight in descending order.
        /// </remarks>
        /// <exception cref="FactSet.SDK.ETFProfileandPrices.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">Market symbol of ETP defined by FactSet.</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="paginationOffset">Non-negative number of entries to skip, or 0 (default). (optional, default to 0.0M)</param>
        /// <param name="paginationLimit">Non-negative maximum number of entries to return. (optional, default to 20.0M)</param>
        /// <returns>InlineResponse2001</returns>
        InlineResponse2001 FactsetEtfAllocationAssetListBySymbolGet(string symbol, List<string> attributes = default(List<string>), decimal? paginationOffset = default(decimal?), decimal? paginationLimit = default(decimal?));

        /// <summary>
        /// This endpoint returns selected ETP&#39;s asset allocations.
        /// </summary>
        /// <remarks>
        /// This endpoint returns selected ETP&#39;s allocations grouped by asset class. The response will be sorted by weight in descending order.
        /// </remarks>
        /// <exception cref="FactSet.SDK.ETFProfileandPrices.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">Market symbol of ETP defined by FactSet.</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="paginationOffset">Non-negative number of entries to skip, or 0 (default). (optional, default to 0.0M)</param>
        /// <param name="paginationLimit">Non-negative maximum number of entries to return. (optional, default to 20.0M)</param>
        /// <returns>ApiResponse of InlineResponse2001</returns>
        ApiResponse<InlineResponse2001> FactsetEtfAllocationAssetListBySymbolGetWithHttpInfo(string symbol, List<string> attributes = default(List<string>), decimal? paginationOffset = default(decimal?), decimal? paginationLimit = default(decimal?));
        /// <summary>
        /// This endpoint returns selected ETP&#39;s country allocations.
        /// </summary>
        /// <remarks>
        /// This endpoint returns selected ETP&#39;s allocations grouped by country names. The response will be sorted by weight in descending order.
        /// </remarks>
        /// <exception cref="FactSet.SDK.ETFProfileandPrices.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">Market symbol of ETP defined by FactSet.</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="paginationOffset">Non-negative number of entries to skip, or 0 (default). (optional, default to 0.0M)</param>
        /// <param name="paginationLimit">Non-negative maximum number of entries to return. (optional, default to 20.0M)</param>
        /// <returns>InlineResponse2002</returns>
        InlineResponse2002 FactsetEtfAllocationCountryListBySymbolGet(string symbol, List<string> attributes = default(List<string>), decimal? paginationOffset = default(decimal?), decimal? paginationLimit = default(decimal?));

        /// <summary>
        /// This endpoint returns selected ETP&#39;s country allocations.
        /// </summary>
        /// <remarks>
        /// This endpoint returns selected ETP&#39;s allocations grouped by country names. The response will be sorted by weight in descending order.
        /// </remarks>
        /// <exception cref="FactSet.SDK.ETFProfileandPrices.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">Market symbol of ETP defined by FactSet.</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="paginationOffset">Non-negative number of entries to skip, or 0 (default). (optional, default to 0.0M)</param>
        /// <param name="paginationLimit">Non-negative maximum number of entries to return. (optional, default to 20.0M)</param>
        /// <returns>ApiResponse of InlineResponse2002</returns>
        ApiResponse<InlineResponse2002> FactsetEtfAllocationCountryListBySymbolGetWithHttpInfo(string symbol, List<string> attributes = default(List<string>), decimal? paginationOffset = default(decimal?), decimal? paginationLimit = default(decimal?));
        /// <summary>
        /// This endpoint returns selected ETP&#39;s exchange allocations.
        /// </summary>
        /// <remarks>
        /// This endpoint returns selected ETP&#39;s allocations grouped by exchanges. The response will be sorted by weight in descending order.
        /// </remarks>
        /// <exception cref="FactSet.SDK.ETFProfileandPrices.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">Market symbol of ETP defined by FactSet.</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="paginationOffset">Non-negative number of entries to skip, or 0 (default). (optional, default to 0.0M)</param>
        /// <param name="paginationLimit">Non-negative maximum number of entries to return. (optional, default to 20.0M)</param>
        /// <returns>InlineResponse2003</returns>
        InlineResponse2003 FactsetEtfAllocationExchangeListBySymbolGet(string symbol, List<string> attributes = default(List<string>), decimal? paginationOffset = default(decimal?), decimal? paginationLimit = default(decimal?));

        /// <summary>
        /// This endpoint returns selected ETP&#39;s exchange allocations.
        /// </summary>
        /// <remarks>
        /// This endpoint returns selected ETP&#39;s allocations grouped by exchanges. The response will be sorted by weight in descending order.
        /// </remarks>
        /// <exception cref="FactSet.SDK.ETFProfileandPrices.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">Market symbol of ETP defined by FactSet.</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="paginationOffset">Non-negative number of entries to skip, or 0 (default). (optional, default to 0.0M)</param>
        /// <param name="paginationLimit">Non-negative maximum number of entries to return. (optional, default to 20.0M)</param>
        /// <returns>ApiResponse of InlineResponse2003</returns>
        ApiResponse<InlineResponse2003> FactsetEtfAllocationExchangeListBySymbolGetWithHttpInfo(string symbol, List<string> attributes = default(List<string>), decimal? paginationOffset = default(decimal?), decimal? paginationLimit = default(decimal?));
        /// <summary>
        /// This endpoint returns selected ETP&#39;s region allocations.
        /// </summary>
        /// <remarks>
        /// This endpoint returns selected ETP&#39;s allocations grouped by region names. The response will be sorted by weight in descending order.
        /// </remarks>
        /// <exception cref="FactSet.SDK.ETFProfileandPrices.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">Market symbol of ETP defined by FactSet.</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="paginationOffset">Non-negative number of entries to skip, or 0 (default). (optional, default to 0.0M)</param>
        /// <param name="paginationLimit">Non-negative maximum number of entries to return. (optional, default to 20.0M)</param>
        /// <returns>InlineResponse2004</returns>
        InlineResponse2004 FactsetEtfAllocationRegionListBySymbolGet(string symbol, List<string> attributes = default(List<string>), decimal? paginationOffset = default(decimal?), decimal? paginationLimit = default(decimal?));

        /// <summary>
        /// This endpoint returns selected ETP&#39;s region allocations.
        /// </summary>
        /// <remarks>
        /// This endpoint returns selected ETP&#39;s allocations grouped by region names. The response will be sorted by weight in descending order.
        /// </remarks>
        /// <exception cref="FactSet.SDK.ETFProfileandPrices.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">Market symbol of ETP defined by FactSet.</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="paginationOffset">Non-negative number of entries to skip, or 0 (default). (optional, default to 0.0M)</param>
        /// <param name="paginationLimit">Non-negative maximum number of entries to return. (optional, default to 20.0M)</param>
        /// <returns>ApiResponse of InlineResponse2004</returns>
        ApiResponse<InlineResponse2004> FactsetEtfAllocationRegionListBySymbolGetWithHttpInfo(string symbol, List<string> attributes = default(List<string>), decimal? paginationOffset = default(decimal?), decimal? paginationLimit = default(decimal?));
        /// <summary>
        /// This endpoint returns selected ETP&#39;s sector allocations.
        /// </summary>
        /// <remarks>
        /// This endpoint returns selected ETP&#39;s allocations grouped by sector names. The response will be sorted by weight in descending order.
        /// </remarks>
        /// <exception cref="FactSet.SDK.ETFProfileandPrices.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">Market symbol of ETP defined by FactSet.</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="paginationOffset">Non-negative number of entries to skip, or 0 (default). (optional, default to 0.0M)</param>
        /// <param name="paginationLimit">Non-negative maximum number of entries to return. (optional, default to 20.0M)</param>
        /// <returns>InlineResponse2005</returns>
        InlineResponse2005 FactsetEtfAllocationSectorListBySymbolGet(string symbol, List<string> attributes = default(List<string>), decimal? paginationOffset = default(decimal?), decimal? paginationLimit = default(decimal?));

        /// <summary>
        /// This endpoint returns selected ETP&#39;s sector allocations.
        /// </summary>
        /// <remarks>
        /// This endpoint returns selected ETP&#39;s allocations grouped by sector names. The response will be sorted by weight in descending order.
        /// </remarks>
        /// <exception cref="FactSet.SDK.ETFProfileandPrices.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">Market symbol of ETP defined by FactSet.</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="paginationOffset">Non-negative number of entries to skip, or 0 (default). (optional, default to 0.0M)</param>
        /// <param name="paginationLimit">Non-negative maximum number of entries to return. (optional, default to 20.0M)</param>
        /// <returns>ApiResponse of InlineResponse2005</returns>
        ApiResponse<InlineResponse2005> FactsetEtfAllocationSectorListBySymbolGetWithHttpInfo(string symbol, List<string> attributes = default(List<string>), decimal? paginationOffset = default(decimal?), decimal? paginationLimit = default(decimal?));
        /// <summary>
        /// Retrieve basic characteristic information for a specified ETP.
        /// </summary>
        /// <remarks>
        /// An ETP has many unique characteristics specific to its composition that differentiate it from other products. This includes details on leverage, hedging, derivatives, and service providers.
        /// </remarks>
        /// <exception cref="FactSet.SDK.ETFProfileandPrices.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">Market symbol of ETF defined by FactSet.</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <returns>InlineResponse2006</returns>
        InlineResponse2006 FactsetEtfCharacteristicsGetBySymbolGet(string symbol, List<string> attributes = default(List<string>));

        /// <summary>
        /// Retrieve basic characteristic information for a specified ETP.
        /// </summary>
        /// <remarks>
        /// An ETP has many unique characteristics specific to its composition that differentiate it from other products. This includes details on leverage, hedging, derivatives, and service providers.
        /// </remarks>
        /// <exception cref="FactSet.SDK.ETFProfileandPrices.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">Market symbol of ETF defined by FactSet.</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <returns>ApiResponse of InlineResponse2006</returns>
        ApiResponse<InlineResponse2006> FactsetEtfCharacteristicsGetBySymbolGetWithHttpInfo(string symbol, List<string> attributes = default(List<string>));
        /// <summary>
        /// List of ETP class broad categories.
        /// </summary>
        /// <remarks>
        /// List of ETP class broad categories.
        /// </remarks>
        /// <exception cref="FactSet.SDK.ETFProfileandPrices.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <returns>InlineResponse2008</returns>
        InlineResponse2008 FactsetEtfClassCategoryBroadListGet(List<string> attributes = default(List<string>));

        /// <summary>
        /// List of ETP class broad categories.
        /// </summary>
        /// <remarks>
        /// List of ETP class broad categories.
        /// </remarks>
        /// <exception cref="FactSet.SDK.ETFProfileandPrices.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <returns>ApiResponse of InlineResponse2008</returns>
        ApiResponse<InlineResponse2008> FactsetEtfClassCategoryBroadListGetWithHttpInfo(List<string> attributes = default(List<string>));
        /// <summary>
        /// List of ETP class focus categories.
        /// </summary>
        /// <remarks>
        /// List of ETP class focus categories.
        /// </remarks>
        /// <exception cref="FactSet.SDK.ETFProfileandPrices.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="paginationOffset">Non-negative number of entries to skip, or 0 (default). (optional, default to 0.0M)</param>
        /// <param name="paginationLimit">Non-negative maximum number of entries to return. (optional, default to 20.0M)</param>
        /// <returns>InlineResponse2009</returns>
        InlineResponse2009 FactsetEtfClassCategoryFocusListGet(List<string> attributes = default(List<string>), decimal? paginationOffset = default(decimal?), decimal? paginationLimit = default(decimal?));

        /// <summary>
        /// List of ETP class focus categories.
        /// </summary>
        /// <remarks>
        /// List of ETP class focus categories.
        /// </remarks>
        /// <exception cref="FactSet.SDK.ETFProfileandPrices.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="paginationOffset">Non-negative number of entries to skip, or 0 (default). (optional, default to 0.0M)</param>
        /// <param name="paginationLimit">Non-negative maximum number of entries to return. (optional, default to 20.0M)</param>
        /// <returns>ApiResponse of InlineResponse2009</returns>
        ApiResponse<InlineResponse2009> FactsetEtfClassCategoryFocusListGetWithHttpInfo(List<string> attributes = default(List<string>), decimal? paginationOffset = default(decimal?), decimal? paginationLimit = default(decimal?));
        /// <summary>
        /// List of ETP class niche categories.
        /// </summary>
        /// <remarks>
        /// List of ETP class niche categories.
        /// </remarks>
        /// <exception cref="FactSet.SDK.ETFProfileandPrices.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="paginationOffset">Non-negative number of entries to skip, or 0 (default). (optional, default to 0.0M)</param>
        /// <param name="paginationLimit">Non-negative maximum number of entries to return. (optional, default to 20.0M)</param>
        /// <returns>InlineResponse20010</returns>
        InlineResponse20010 FactsetEtfClassCategoryNicheListGet(List<string> attributes = default(List<string>), decimal? paginationOffset = default(decimal?), decimal? paginationLimit = default(decimal?));

        /// <summary>
        /// List of ETP class niche categories.
        /// </summary>
        /// <remarks>
        /// List of ETP class niche categories.
        /// </remarks>
        /// <exception cref="FactSet.SDK.ETFProfileandPrices.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="paginationOffset">Non-negative number of entries to skip, or 0 (default). (optional, default to 0.0M)</param>
        /// <param name="paginationLimit">Non-negative maximum number of entries to return. (optional, default to 20.0M)</param>
        /// <returns>ApiResponse of InlineResponse20010</returns>
        ApiResponse<InlineResponse20010> FactsetEtfClassCategoryNicheListGetWithHttpInfo(List<string> attributes = default(List<string>), decimal? paginationOffset = default(decimal?), decimal? paginationLimit = default(decimal?));
        /// <summary>
        /// List of ETP class geographies.
        /// </summary>
        /// <remarks>
        /// List of ETP class geographies.
        /// </remarks>
        /// <exception cref="FactSet.SDK.ETFProfileandPrices.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <returns>InlineResponse20011</returns>
        InlineResponse20011 FactsetEtfClassGeographyListGet(List<string> attributes = default(List<string>));

        /// <summary>
        /// List of ETP class geographies.
        /// </summary>
        /// <remarks>
        /// List of ETP class geographies.
        /// </remarks>
        /// <exception cref="FactSet.SDK.ETFProfileandPrices.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <returns>ApiResponse of InlineResponse20011</returns>
        ApiResponse<InlineResponse20011> FactsetEtfClassGeographyListGetWithHttpInfo(List<string> attributes = default(List<string>));
        /// <summary>
        /// Retrieve an ETP&#39;s classification specific to asset class, geography, or investment strategy.
        /// </summary>
        /// <remarks>
        /// ETP classification is divided into three categories: Asset Class, Geography, and Investment Strategy. Asset class is determined based on the various asset types held by the fund, A fund&#39;s geography can be classified by region (e.g. Asia-Pac), specific geography (e.g. China) or economic development (e.g. BRIC). An ETP&#39;s investment strategy is classified in broad categories (e.g. Large Cap) and more granular categorizations.
        /// </remarks>
        /// <exception cref="FactSet.SDK.ETFProfileandPrices.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">Market symbol of ETP defined by FactSet.</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <returns>InlineResponse2007</returns>
        InlineResponse2007 FactsetEtfClassGetBySymbolGet(string symbol, List<string> attributes = default(List<string>));

        /// <summary>
        /// Retrieve an ETP&#39;s classification specific to asset class, geography, or investment strategy.
        /// </summary>
        /// <remarks>
        /// ETP classification is divided into three categories: Asset Class, Geography, and Investment Strategy. Asset class is determined based on the various asset types held by the fund, A fund&#39;s geography can be classified by region (e.g. Asia-Pac), specific geography (e.g. China) or economic development (e.g. BRIC). An ETP&#39;s investment strategy is classified in broad categories (e.g. Large Cap) and more granular categorizations.
        /// </remarks>
        /// <exception cref="FactSet.SDK.ETFProfileandPrices.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">Market symbol of ETP defined by FactSet.</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <returns>ApiResponse of InlineResponse2007</returns>
        ApiResponse<InlineResponse2007> FactsetEtfClassGetBySymbolGetWithHttpInfo(string symbol, List<string> attributes = default(List<string>));
        /// <summary>
        /// Retrieve an ETP&#39;s current distribution details.
        /// </summary>
        /// <remarks>
        /// Retrieve distribution-related details for a specific ETP including dividend and capital gain distribution details.
        /// </remarks>
        /// <exception cref="FactSet.SDK.ETFProfileandPrices.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">Market symbol of ETP defined by FactSet.</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <returns>InlineResponse20012</returns>
        InlineResponse20012 FactsetEtfDistributionGetBySymbolGet(string symbol, List<string> attributes = default(List<string>));

        /// <summary>
        /// Retrieve an ETP&#39;s current distribution details.
        /// </summary>
        /// <remarks>
        /// Retrieve distribution-related details for a specific ETP including dividend and capital gain distribution details.
        /// </remarks>
        /// <exception cref="FactSet.SDK.ETFProfileandPrices.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">Market symbol of ETP defined by FactSet.</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <returns>ApiResponse of InlineResponse20012</returns>
        ApiResponse<InlineResponse20012> FactsetEtfDistributionGetBySymbolGetWithHttpInfo(string symbol, List<string> attributes = default(List<string>));
        /// <summary>
        /// Retrieve an ETP&#39;s cash inflow/outflows for various time periods.
        /// </summary>
        /// <remarks>
        /// Retrieve the amount invested or divested in a specific ETP over various time periods including one-day, one-week, one-month, one-year, and YTD.
        /// </remarks>
        /// <exception cref="FactSet.SDK.ETFProfileandPrices.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">Market symbol of ETP defined by FactSet.</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <returns>InlineResponse20013</returns>
        InlineResponse20013 FactsetEtfFundFlowsGetBySymbolGet(string symbol, List<string> attributes = default(List<string>));

        /// <summary>
        /// Retrieve an ETP&#39;s cash inflow/outflows for various time periods.
        /// </summary>
        /// <remarks>
        /// Retrieve the amount invested or divested in a specific ETP over various time periods including one-day, one-week, one-month, one-year, and YTD.
        /// </remarks>
        /// <exception cref="FactSet.SDK.ETFProfileandPrices.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">Market symbol of ETP defined by FactSet.</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <returns>ApiResponse of InlineResponse20013</returns>
        ApiResponse<InlineResponse20013> FactsetEtfFundFlowsGetBySymbolGetWithHttpInfo(string symbol, List<string> attributes = default(List<string>));
        /// <summary>
        /// Retrieve basic profile information for a specified ETP.
        /// </summary>
        /// <remarks>
        /// An ETP can be profiled by defining several common attributes such as issuer, fund description, and benchmark.
        /// </remarks>
        /// <exception cref="FactSet.SDK.ETFProfileandPrices.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">Market symbol of ETP defined by FactSet.</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <returns>InlineResponse200</returns>
        InlineResponse200 FactsetEtfGetBySymbolGet(string symbol, List<string> attributes = default(List<string>));

        /// <summary>
        /// Retrieve basic profile information for a specified ETP.
        /// </summary>
        /// <remarks>
        /// An ETP can be profiled by defining several common attributes such as issuer, fund description, and benchmark.
        /// </remarks>
        /// <exception cref="FactSet.SDK.ETFProfileandPrices.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">Market symbol of ETP defined by FactSet.</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <returns>ApiResponse of InlineResponse200</returns>
        ApiResponse<InlineResponse200> FactsetEtfGetBySymbolGetWithHttpInfo(string symbol, List<string> attributes = default(List<string>));
        /// <summary>
        /// This endpoint returns selected ETP&#39;s Growth of 10K calculated values.
        /// </summary>
        /// <remarks>
        /// Growth of 10K (or growth of 10,000) is a commonly used chart that highlights the change in the value of an initial 10,000 investment in the ETP during a given period of time. Often, this period of time is either since inception or the calculation between the pre-defined range.
        /// </remarks>
        /// <exception cref="FactSet.SDK.ETFProfileandPrices.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">Market symbol of ETP defined by FactSet.</param>
        /// <param name="timePeriod">Historice NAV date value. (optional)</param>
        /// <param name="calculationType">Historice NAV date value. (optional)</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="paginationOffset">Non-negative number of entries to skip, or 0 (default). (optional, default to 0.0M)</param>
        /// <param name="paginationLimit">Non-negative maximum number of entries to return. (optional, default to 20.0M)</param>
        /// <returns>InlineResponse20014</returns>
        InlineResponse20014 FactsetEtfGrowthOfTenKListBySymbolGet(string symbol, string timePeriod = default(string), string calculationType = default(string), List<string> attributes = default(List<string>), decimal? paginationOffset = default(decimal?), decimal? paginationLimit = default(decimal?));

        /// <summary>
        /// This endpoint returns selected ETP&#39;s Growth of 10K calculated values.
        /// </summary>
        /// <remarks>
        /// Growth of 10K (or growth of 10,000) is a commonly used chart that highlights the change in the value of an initial 10,000 investment in the ETP during a given period of time. Often, this period of time is either since inception or the calculation between the pre-defined range.
        /// </remarks>
        /// <exception cref="FactSet.SDK.ETFProfileandPrices.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">Market symbol of ETP defined by FactSet.</param>
        /// <param name="timePeriod">Historice NAV date value. (optional)</param>
        /// <param name="calculationType">Historice NAV date value. (optional)</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="paginationOffset">Non-negative number of entries to skip, or 0 (default). (optional, default to 0.0M)</param>
        /// <param name="paginationLimit">Non-negative maximum number of entries to return. (optional, default to 20.0M)</param>
        /// <returns>ApiResponse of InlineResponse20014</returns>
        ApiResponse<InlineResponse20014> FactsetEtfGrowthOfTenKListBySymbolGetWithHttpInfo(string symbol, string timePeriod = default(string), string calculationType = default(string), List<string> attributes = default(List<string>), decimal? paginationOffset = default(decimal?), decimal? paginationLimit = default(decimal?));
        /// <summary>
        /// Holdings details for an individual ETP.
        /// </summary>
        /// <remarks>
        /// Retrieve an ETP&#39;s holdings information including security, shares held, and weight.
        /// </remarks>
        /// <exception cref="FactSet.SDK.ETFProfileandPrices.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">Market symbol of ETP defined by FactSet.</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="paginationOffset">Non-negative number of entries to skip, or 0 (default). (optional, default to 0.0M)</param>
        /// <param name="paginationLimit">Non-negative maximum number of entries to return. (optional, default to 20.0M)</param>
        /// <returns>InlineResponse20015</returns>
        InlineResponse20015 FactsetEtfHoldingsListBySymbolGet(string symbol, List<string> attributes = default(List<string>), decimal? paginationOffset = default(decimal?), decimal? paginationLimit = default(decimal?));

        /// <summary>
        /// Holdings details for an individual ETP.
        /// </summary>
        /// <remarks>
        /// Retrieve an ETP&#39;s holdings information including security, shares held, and weight.
        /// </remarks>
        /// <exception cref="FactSet.SDK.ETFProfileandPrices.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">Market symbol of ETP defined by FactSet.</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="paginationOffset">Non-negative number of entries to skip, or 0 (default). (optional, default to 0.0M)</param>
        /// <param name="paginationLimit">Non-negative maximum number of entries to return. (optional, default to 20.0M)</param>
        /// <returns>ApiResponse of InlineResponse20015</returns>
        ApiResponse<InlineResponse20015> FactsetEtfHoldingsListBySymbolGetWithHttpInfo(string symbol, List<string> attributes = default(List<string>), decimal? paginationOffset = default(decimal?), decimal? paginationLimit = default(decimal?));
        /// <summary>
        /// Retrieve historical ETP NAV values.
        /// </summary>
        /// <remarks>
        /// Retrieve an ETP&#39;s historical NAV and shares outstanding for a specified time range.
        /// </remarks>
        /// <exception cref="FactSet.SDK.ETFProfileandPrices.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">Market symbol of ETP defined by FactSet.</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <returns>InlineResponse20016</returns>
        InlineResponse20016 FactsetEtfPriceGetBySymbolGet(string symbol, List<string> attributes = default(List<string>));

        /// <summary>
        /// Retrieve historical ETP NAV values.
        /// </summary>
        /// <remarks>
        /// Retrieve an ETP&#39;s historical NAV and shares outstanding for a specified time range.
        /// </remarks>
        /// <exception cref="FactSet.SDK.ETFProfileandPrices.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">Market symbol of ETP defined by FactSet.</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <returns>ApiResponse of InlineResponse20016</returns>
        ApiResponse<InlineResponse20016> FactsetEtfPriceGetBySymbolGetWithHttpInfo(string symbol, List<string> attributes = default(List<string>));
        /// <summary>
        /// Retrieve total return data for a specified ETP.
        /// </summary>
        /// <remarks>
        /// An ETP&#39;s total return data can be returned for various time frames including 1-month, 3-month, YTD, 1-year, 3-year, and 5-year. Total return market price is used to calcualte price returns. Total return nav is used to calcualte nav returns.
        /// </remarks>
        /// <exception cref="FactSet.SDK.ETFProfileandPrices.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">Market symbol of ETP defined by FactSet.</param>
        /// <param name="returnType">Return type. (optional, default to price)</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <returns>InlineResponse20017</returns>
        InlineResponse20017 FactsetEtfReturnsGetBySymbolGet(string symbol, string returnType = default(string), List<string> attributes = default(List<string>));

        /// <summary>
        /// Retrieve total return data for a specified ETP.
        /// </summary>
        /// <remarks>
        /// An ETP&#39;s total return data can be returned for various time frames including 1-month, 3-month, YTD, 1-year, 3-year, and 5-year. Total return market price is used to calcualte price returns. Total return nav is used to calcualte nav returns.
        /// </remarks>
        /// <exception cref="FactSet.SDK.ETFProfileandPrices.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">Market symbol of ETP defined by FactSet.</param>
        /// <param name="returnType">Return type. (optional, default to price)</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <returns>ApiResponse of InlineResponse20017</returns>
        ApiResponse<InlineResponse20017> FactsetEtfReturnsGetBySymbolGetWithHttpInfo(string symbol, string returnType = default(string), List<string> attributes = default(List<string>));
        /// <summary>
        /// Retrieve various classification details for a specified ETP.
        /// </summary>
        /// <remarks>
        /// ETP&#39;s can be classified in many different ways including investment strategy, security weightings, and fund composition.
        /// </remarks>
        /// <exception cref="FactSet.SDK.ETFProfileandPrices.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">Market symbol of ETP defined by FactSet.</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <returns>InlineResponse20018</returns>
        InlineResponse20018 FactsetEtfStrategyGetBySymbolGet(string symbol, List<string> attributes = default(List<string>));

        /// <summary>
        /// Retrieve various classification details for a specified ETP.
        /// </summary>
        /// <remarks>
        /// ETP&#39;s can be classified in many different ways including investment strategy, security weightings, and fund composition.
        /// </remarks>
        /// <exception cref="FactSet.SDK.ETFProfileandPrices.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">Market symbol of ETP defined by FactSet.</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <returns>ApiResponse of InlineResponse20018</returns>
        ApiResponse<InlineResponse20018> FactsetEtfStrategyGetBySymbolGetWithHttpInfo(string symbol, List<string> attributes = default(List<string>));
        /// <summary>
        /// Retrieve a list of ETP strategy segments.
        /// </summary>
        /// <remarks>
        /// Retrieve the various segments assigned to a specific ETP. Segment data is used to group funds for comparison and relative performance analyses.
        /// </remarks>
        /// <exception cref="FactSet.SDK.ETFProfileandPrices.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="paginationOffset">Non-negative number of entries to skip, or 0 (default). (optional, default to 0.0M)</param>
        /// <param name="paginationLimit">Non-negative maximum number of entries to return. (optional, default to 20.0M)</param>
        /// <returns>InlineResponse20019</returns>
        InlineResponse20019 FactsetEtfStrategySegmentListGet(List<string> attributes = default(List<string>), decimal? paginationOffset = default(decimal?), decimal? paginationLimit = default(decimal?));

        /// <summary>
        /// Retrieve a list of ETP strategy segments.
        /// </summary>
        /// <remarks>
        /// Retrieve the various segments assigned to a specific ETP. Segment data is used to group funds for comparison and relative performance analyses.
        /// </remarks>
        /// <exception cref="FactSet.SDK.ETFProfileandPrices.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="paginationOffset">Non-negative number of entries to skip, or 0 (default). (optional, default to 0.0M)</param>
        /// <param name="paginationLimit">Non-negative maximum number of entries to return. (optional, default to 20.0M)</param>
        /// <returns>ApiResponse of InlineResponse20019</returns>
        ApiResponse<InlineResponse20019> FactsetEtfStrategySegmentListGetWithHttpInfo(List<string> attributes = default(List<string>), decimal? paginationOffset = default(decimal?), decimal? paginationLimit = default(decimal?));
        /// <summary>
        /// Retrieve the basic structure information for a specified ETP.
        /// </summary>
        /// <remarks>
        /// Retrieve details on a fund&#39;s structure including its type, investment style (active/passive), and legal structure.
        /// </remarks>
        /// <exception cref="FactSet.SDK.ETFProfileandPrices.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">Market symbol of ETP defined by FactSet.</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <returns>InlineResponse20020</returns>
        InlineResponse20020 FactsetEtfStructureGetBySymbolGet(string symbol, List<string> attributes = default(List<string>));

        /// <summary>
        /// Retrieve the basic structure information for a specified ETP.
        /// </summary>
        /// <remarks>
        /// Retrieve details on a fund&#39;s structure including its type, investment style (active/passive), and legal structure.
        /// </remarks>
        /// <exception cref="FactSet.SDK.ETFProfileandPrices.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">Market symbol of ETP defined by FactSet.</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <returns>ApiResponse of InlineResponse20020</returns>
        ApiResponse<InlineResponse20020> FactsetEtfStructureGetBySymbolGetWithHttpInfo(string symbol, List<string> attributes = default(List<string>));
        /// <summary>
        /// Retrieve the tax and fee related information for a specified ETP.
        /// </summary>
        /// <remarks>
        /// Retrieve various fee and tax related details on a specified ETP including expense ratio and tax treatment for dividends and capital gains.
        /// </remarks>
        /// <exception cref="FactSet.SDK.ETFProfileandPrices.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">Market symbol of ETP defined by FactSet.</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <returns>InlineResponse20021</returns>
        InlineResponse20021 FactsetEtfTaxesAndFeesUsGetBySymbolGet(string symbol, List<string> attributes = default(List<string>));

        /// <summary>
        /// Retrieve the tax and fee related information for a specified ETP.
        /// </summary>
        /// <remarks>
        /// Retrieve various fee and tax related details on a specified ETP including expense ratio and tax treatment for dividends and capital gains.
        /// </remarks>
        /// <exception cref="FactSet.SDK.ETFProfileandPrices.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">Market symbol of ETP defined by FactSet.</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <returns>ApiResponse of InlineResponse20021</returns>
        ApiResponse<InlineResponse20021> FactsetEtfTaxesAndFeesUsGetBySymbolGetWithHttpInfo(string symbol, List<string> attributes = default(List<string>));
        /// <summary>
        /// Retrieve historical NAV data for a specified ETP.
        /// </summary>
        /// <remarks>
        /// Retrieve the historical NAV data and the respective fund flows and shares outstanding for a specified fund and time period. Please refer currency.fund in /factset/etf/getBySymbol for currency value.
        /// </remarks>
        /// <exception cref="FactSet.SDK.ETFProfileandPrices.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">Market symbol of ETP defined by FactSet.</param>
        /// <param name="timePeriod">Time frame of the data. (optional, default to 1Y)</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="paginationOffset">Non-negative number of entries to skip, or 0 (default). (optional, default to 0.0M)</param>
        /// <param name="paginationLimit">Non-negative maximum number of entries to return. (optional, default to 20.0M)</param>
        /// <returns>InlineResponse20022</returns>
        InlineResponse20022 FactsetEtfTimeSeriesListBySymbolGet(string symbol, string timePeriod = default(string), List<string> attributes = default(List<string>), decimal? paginationOffset = default(decimal?), decimal? paginationLimit = default(decimal?));

        /// <summary>
        /// Retrieve historical NAV data for a specified ETP.
        /// </summary>
        /// <remarks>
        /// Retrieve the historical NAV data and the respective fund flows and shares outstanding for a specified fund and time period. Please refer currency.fund in /factset/etf/getBySymbol for currency value.
        /// </remarks>
        /// <exception cref="FactSet.SDK.ETFProfileandPrices.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">Market symbol of ETP defined by FactSet.</param>
        /// <param name="timePeriod">Time frame of the data. (optional, default to 1Y)</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="paginationOffset">Non-negative number of entries to skip, or 0 (default). (optional, default to 0.0M)</param>
        /// <param name="paginationLimit">Non-negative maximum number of entries to return. (optional, default to 20.0M)</param>
        /// <returns>ApiResponse of InlineResponse20022</returns>
        ApiResponse<InlineResponse20022> FactsetEtfTimeSeriesListBySymbolGetWithHttpInfo(string symbol, string timePeriod = default(string), List<string> attributes = default(List<string>), decimal? paginationOffset = default(decimal?), decimal? paginationLimit = default(decimal?));
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IFactsetApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// This endpoint returns selected ETP&#39;s asset allocations.
        /// </summary>
        /// <remarks>
        /// This endpoint returns selected ETP&#39;s allocations grouped by asset class. The response will be sorted by weight in descending order.
        /// </remarks>
        /// <exception cref="FactSet.SDK.ETFProfileandPrices.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">Market symbol of ETP defined by FactSet.</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="paginationOffset">Non-negative number of entries to skip, or 0 (default). (optional, default to 0.0M)</param>
        /// <param name="paginationLimit">Non-negative maximum number of entries to return. (optional, default to 20.0M)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse2001</returns>
        System.Threading.Tasks.Task<InlineResponse2001> FactsetEtfAllocationAssetListBySymbolGetAsync(string symbol, List<string> attributes = default(List<string>), decimal? paginationOffset = default(decimal?), decimal? paginationLimit = default(decimal?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// This endpoint returns selected ETP&#39;s asset allocations.
        /// </summary>
        /// <remarks>
        /// This endpoint returns selected ETP&#39;s allocations grouped by asset class. The response will be sorted by weight in descending order.
        /// </remarks>
        /// <exception cref="FactSet.SDK.ETFProfileandPrices.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">Market symbol of ETP defined by FactSet.</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="paginationOffset">Non-negative number of entries to skip, or 0 (default). (optional, default to 0.0M)</param>
        /// <param name="paginationLimit">Non-negative maximum number of entries to return. (optional, default to 20.0M)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse2001)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse2001>> FactsetEtfAllocationAssetListBySymbolGetWithHttpInfoAsync(string symbol, List<string> attributes = default(List<string>), decimal? paginationOffset = default(decimal?), decimal? paginationLimit = default(decimal?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// This endpoint returns selected ETP&#39;s country allocations.
        /// </summary>
        /// <remarks>
        /// This endpoint returns selected ETP&#39;s allocations grouped by country names. The response will be sorted by weight in descending order.
        /// </remarks>
        /// <exception cref="FactSet.SDK.ETFProfileandPrices.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">Market symbol of ETP defined by FactSet.</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="paginationOffset">Non-negative number of entries to skip, or 0 (default). (optional, default to 0.0M)</param>
        /// <param name="paginationLimit">Non-negative maximum number of entries to return. (optional, default to 20.0M)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse2002</returns>
        System.Threading.Tasks.Task<InlineResponse2002> FactsetEtfAllocationCountryListBySymbolGetAsync(string symbol, List<string> attributes = default(List<string>), decimal? paginationOffset = default(decimal?), decimal? paginationLimit = default(decimal?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// This endpoint returns selected ETP&#39;s country allocations.
        /// </summary>
        /// <remarks>
        /// This endpoint returns selected ETP&#39;s allocations grouped by country names. The response will be sorted by weight in descending order.
        /// </remarks>
        /// <exception cref="FactSet.SDK.ETFProfileandPrices.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">Market symbol of ETP defined by FactSet.</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="paginationOffset">Non-negative number of entries to skip, or 0 (default). (optional, default to 0.0M)</param>
        /// <param name="paginationLimit">Non-negative maximum number of entries to return. (optional, default to 20.0M)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse2002)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse2002>> FactsetEtfAllocationCountryListBySymbolGetWithHttpInfoAsync(string symbol, List<string> attributes = default(List<string>), decimal? paginationOffset = default(decimal?), decimal? paginationLimit = default(decimal?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// This endpoint returns selected ETP&#39;s exchange allocations.
        /// </summary>
        /// <remarks>
        /// This endpoint returns selected ETP&#39;s allocations grouped by exchanges. The response will be sorted by weight in descending order.
        /// </remarks>
        /// <exception cref="FactSet.SDK.ETFProfileandPrices.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">Market symbol of ETP defined by FactSet.</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="paginationOffset">Non-negative number of entries to skip, or 0 (default). (optional, default to 0.0M)</param>
        /// <param name="paginationLimit">Non-negative maximum number of entries to return. (optional, default to 20.0M)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse2003</returns>
        System.Threading.Tasks.Task<InlineResponse2003> FactsetEtfAllocationExchangeListBySymbolGetAsync(string symbol, List<string> attributes = default(List<string>), decimal? paginationOffset = default(decimal?), decimal? paginationLimit = default(decimal?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// This endpoint returns selected ETP&#39;s exchange allocations.
        /// </summary>
        /// <remarks>
        /// This endpoint returns selected ETP&#39;s allocations grouped by exchanges. The response will be sorted by weight in descending order.
        /// </remarks>
        /// <exception cref="FactSet.SDK.ETFProfileandPrices.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">Market symbol of ETP defined by FactSet.</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="paginationOffset">Non-negative number of entries to skip, or 0 (default). (optional, default to 0.0M)</param>
        /// <param name="paginationLimit">Non-negative maximum number of entries to return. (optional, default to 20.0M)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse2003)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse2003>> FactsetEtfAllocationExchangeListBySymbolGetWithHttpInfoAsync(string symbol, List<string> attributes = default(List<string>), decimal? paginationOffset = default(decimal?), decimal? paginationLimit = default(decimal?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// This endpoint returns selected ETP&#39;s region allocations.
        /// </summary>
        /// <remarks>
        /// This endpoint returns selected ETP&#39;s allocations grouped by region names. The response will be sorted by weight in descending order.
        /// </remarks>
        /// <exception cref="FactSet.SDK.ETFProfileandPrices.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">Market symbol of ETP defined by FactSet.</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="paginationOffset">Non-negative number of entries to skip, or 0 (default). (optional, default to 0.0M)</param>
        /// <param name="paginationLimit">Non-negative maximum number of entries to return. (optional, default to 20.0M)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse2004</returns>
        System.Threading.Tasks.Task<InlineResponse2004> FactsetEtfAllocationRegionListBySymbolGetAsync(string symbol, List<string> attributes = default(List<string>), decimal? paginationOffset = default(decimal?), decimal? paginationLimit = default(decimal?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// This endpoint returns selected ETP&#39;s region allocations.
        /// </summary>
        /// <remarks>
        /// This endpoint returns selected ETP&#39;s allocations grouped by region names. The response will be sorted by weight in descending order.
        /// </remarks>
        /// <exception cref="FactSet.SDK.ETFProfileandPrices.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">Market symbol of ETP defined by FactSet.</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="paginationOffset">Non-negative number of entries to skip, or 0 (default). (optional, default to 0.0M)</param>
        /// <param name="paginationLimit">Non-negative maximum number of entries to return. (optional, default to 20.0M)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse2004)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse2004>> FactsetEtfAllocationRegionListBySymbolGetWithHttpInfoAsync(string symbol, List<string> attributes = default(List<string>), decimal? paginationOffset = default(decimal?), decimal? paginationLimit = default(decimal?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// This endpoint returns selected ETP&#39;s sector allocations.
        /// </summary>
        /// <remarks>
        /// This endpoint returns selected ETP&#39;s allocations grouped by sector names. The response will be sorted by weight in descending order.
        /// </remarks>
        /// <exception cref="FactSet.SDK.ETFProfileandPrices.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">Market symbol of ETP defined by FactSet.</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="paginationOffset">Non-negative number of entries to skip, or 0 (default). (optional, default to 0.0M)</param>
        /// <param name="paginationLimit">Non-negative maximum number of entries to return. (optional, default to 20.0M)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse2005</returns>
        System.Threading.Tasks.Task<InlineResponse2005> FactsetEtfAllocationSectorListBySymbolGetAsync(string symbol, List<string> attributes = default(List<string>), decimal? paginationOffset = default(decimal?), decimal? paginationLimit = default(decimal?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// This endpoint returns selected ETP&#39;s sector allocations.
        /// </summary>
        /// <remarks>
        /// This endpoint returns selected ETP&#39;s allocations grouped by sector names. The response will be sorted by weight in descending order.
        /// </remarks>
        /// <exception cref="FactSet.SDK.ETFProfileandPrices.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">Market symbol of ETP defined by FactSet.</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="paginationOffset">Non-negative number of entries to skip, or 0 (default). (optional, default to 0.0M)</param>
        /// <param name="paginationLimit">Non-negative maximum number of entries to return. (optional, default to 20.0M)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse2005)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse2005>> FactsetEtfAllocationSectorListBySymbolGetWithHttpInfoAsync(string symbol, List<string> attributes = default(List<string>), decimal? paginationOffset = default(decimal?), decimal? paginationLimit = default(decimal?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieve basic characteristic information for a specified ETP.
        /// </summary>
        /// <remarks>
        /// An ETP has many unique characteristics specific to its composition that differentiate it from other products. This includes details on leverage, hedging, derivatives, and service providers.
        /// </remarks>
        /// <exception cref="FactSet.SDK.ETFProfileandPrices.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">Market symbol of ETF defined by FactSet.</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse2006</returns>
        System.Threading.Tasks.Task<InlineResponse2006> FactsetEtfCharacteristicsGetBySymbolGetAsync(string symbol, List<string> attributes = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieve basic characteristic information for a specified ETP.
        /// </summary>
        /// <remarks>
        /// An ETP has many unique characteristics specific to its composition that differentiate it from other products. This includes details on leverage, hedging, derivatives, and service providers.
        /// </remarks>
        /// <exception cref="FactSet.SDK.ETFProfileandPrices.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">Market symbol of ETF defined by FactSet.</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse2006)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse2006>> FactsetEtfCharacteristicsGetBySymbolGetWithHttpInfoAsync(string symbol, List<string> attributes = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// List of ETP class broad categories.
        /// </summary>
        /// <remarks>
        /// List of ETP class broad categories.
        /// </remarks>
        /// <exception cref="FactSet.SDK.ETFProfileandPrices.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse2008</returns>
        System.Threading.Tasks.Task<InlineResponse2008> FactsetEtfClassCategoryBroadListGetAsync(List<string> attributes = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// List of ETP class broad categories.
        /// </summary>
        /// <remarks>
        /// List of ETP class broad categories.
        /// </remarks>
        /// <exception cref="FactSet.SDK.ETFProfileandPrices.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse2008)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse2008>> FactsetEtfClassCategoryBroadListGetWithHttpInfoAsync(List<string> attributes = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// List of ETP class focus categories.
        /// </summary>
        /// <remarks>
        /// List of ETP class focus categories.
        /// </remarks>
        /// <exception cref="FactSet.SDK.ETFProfileandPrices.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="paginationOffset">Non-negative number of entries to skip, or 0 (default). (optional, default to 0.0M)</param>
        /// <param name="paginationLimit">Non-negative maximum number of entries to return. (optional, default to 20.0M)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse2009</returns>
        System.Threading.Tasks.Task<InlineResponse2009> FactsetEtfClassCategoryFocusListGetAsync(List<string> attributes = default(List<string>), decimal? paginationOffset = default(decimal?), decimal? paginationLimit = default(decimal?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// List of ETP class focus categories.
        /// </summary>
        /// <remarks>
        /// List of ETP class focus categories.
        /// </remarks>
        /// <exception cref="FactSet.SDK.ETFProfileandPrices.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="paginationOffset">Non-negative number of entries to skip, or 0 (default). (optional, default to 0.0M)</param>
        /// <param name="paginationLimit">Non-negative maximum number of entries to return. (optional, default to 20.0M)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse2009)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse2009>> FactsetEtfClassCategoryFocusListGetWithHttpInfoAsync(List<string> attributes = default(List<string>), decimal? paginationOffset = default(decimal?), decimal? paginationLimit = default(decimal?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// List of ETP class niche categories.
        /// </summary>
        /// <remarks>
        /// List of ETP class niche categories.
        /// </remarks>
        /// <exception cref="FactSet.SDK.ETFProfileandPrices.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="paginationOffset">Non-negative number of entries to skip, or 0 (default). (optional, default to 0.0M)</param>
        /// <param name="paginationLimit">Non-negative maximum number of entries to return. (optional, default to 20.0M)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse20010</returns>
        System.Threading.Tasks.Task<InlineResponse20010> FactsetEtfClassCategoryNicheListGetAsync(List<string> attributes = default(List<string>), decimal? paginationOffset = default(decimal?), decimal? paginationLimit = default(decimal?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// List of ETP class niche categories.
        /// </summary>
        /// <remarks>
        /// List of ETP class niche categories.
        /// </remarks>
        /// <exception cref="FactSet.SDK.ETFProfileandPrices.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="paginationOffset">Non-negative number of entries to skip, or 0 (default). (optional, default to 0.0M)</param>
        /// <param name="paginationLimit">Non-negative maximum number of entries to return. (optional, default to 20.0M)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse20010)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20010>> FactsetEtfClassCategoryNicheListGetWithHttpInfoAsync(List<string> attributes = default(List<string>), decimal? paginationOffset = default(decimal?), decimal? paginationLimit = default(decimal?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// List of ETP class geographies.
        /// </summary>
        /// <remarks>
        /// List of ETP class geographies.
        /// </remarks>
        /// <exception cref="FactSet.SDK.ETFProfileandPrices.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse20011</returns>
        System.Threading.Tasks.Task<InlineResponse20011> FactsetEtfClassGeographyListGetAsync(List<string> attributes = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// List of ETP class geographies.
        /// </summary>
        /// <remarks>
        /// List of ETP class geographies.
        /// </remarks>
        /// <exception cref="FactSet.SDK.ETFProfileandPrices.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse20011)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20011>> FactsetEtfClassGeographyListGetWithHttpInfoAsync(List<string> attributes = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieve an ETP&#39;s classification specific to asset class, geography, or investment strategy.
        /// </summary>
        /// <remarks>
        /// ETP classification is divided into three categories: Asset Class, Geography, and Investment Strategy. Asset class is determined based on the various asset types held by the fund, A fund&#39;s geography can be classified by region (e.g. Asia-Pac), specific geography (e.g. China) or economic development (e.g. BRIC). An ETP&#39;s investment strategy is classified in broad categories (e.g. Large Cap) and more granular categorizations.
        /// </remarks>
        /// <exception cref="FactSet.SDK.ETFProfileandPrices.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">Market symbol of ETP defined by FactSet.</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse2007</returns>
        System.Threading.Tasks.Task<InlineResponse2007> FactsetEtfClassGetBySymbolGetAsync(string symbol, List<string> attributes = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieve an ETP&#39;s classification specific to asset class, geography, or investment strategy.
        /// </summary>
        /// <remarks>
        /// ETP classification is divided into three categories: Asset Class, Geography, and Investment Strategy. Asset class is determined based on the various asset types held by the fund, A fund&#39;s geography can be classified by region (e.g. Asia-Pac), specific geography (e.g. China) or economic development (e.g. BRIC). An ETP&#39;s investment strategy is classified in broad categories (e.g. Large Cap) and more granular categorizations.
        /// </remarks>
        /// <exception cref="FactSet.SDK.ETFProfileandPrices.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">Market symbol of ETP defined by FactSet.</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse2007)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse2007>> FactsetEtfClassGetBySymbolGetWithHttpInfoAsync(string symbol, List<string> attributes = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieve an ETP&#39;s current distribution details.
        /// </summary>
        /// <remarks>
        /// Retrieve distribution-related details for a specific ETP including dividend and capital gain distribution details.
        /// </remarks>
        /// <exception cref="FactSet.SDK.ETFProfileandPrices.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">Market symbol of ETP defined by FactSet.</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse20012</returns>
        System.Threading.Tasks.Task<InlineResponse20012> FactsetEtfDistributionGetBySymbolGetAsync(string symbol, List<string> attributes = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieve an ETP&#39;s current distribution details.
        /// </summary>
        /// <remarks>
        /// Retrieve distribution-related details for a specific ETP including dividend and capital gain distribution details.
        /// </remarks>
        /// <exception cref="FactSet.SDK.ETFProfileandPrices.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">Market symbol of ETP defined by FactSet.</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse20012)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20012>> FactsetEtfDistributionGetBySymbolGetWithHttpInfoAsync(string symbol, List<string> attributes = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieve an ETP&#39;s cash inflow/outflows for various time periods.
        /// </summary>
        /// <remarks>
        /// Retrieve the amount invested or divested in a specific ETP over various time periods including one-day, one-week, one-month, one-year, and YTD.
        /// </remarks>
        /// <exception cref="FactSet.SDK.ETFProfileandPrices.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">Market symbol of ETP defined by FactSet.</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse20013</returns>
        System.Threading.Tasks.Task<InlineResponse20013> FactsetEtfFundFlowsGetBySymbolGetAsync(string symbol, List<string> attributes = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieve an ETP&#39;s cash inflow/outflows for various time periods.
        /// </summary>
        /// <remarks>
        /// Retrieve the amount invested or divested in a specific ETP over various time periods including one-day, one-week, one-month, one-year, and YTD.
        /// </remarks>
        /// <exception cref="FactSet.SDK.ETFProfileandPrices.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">Market symbol of ETP defined by FactSet.</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse20013)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20013>> FactsetEtfFundFlowsGetBySymbolGetWithHttpInfoAsync(string symbol, List<string> attributes = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieve basic profile information for a specified ETP.
        /// </summary>
        /// <remarks>
        /// An ETP can be profiled by defining several common attributes such as issuer, fund description, and benchmark.
        /// </remarks>
        /// <exception cref="FactSet.SDK.ETFProfileandPrices.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">Market symbol of ETP defined by FactSet.</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse200</returns>
        System.Threading.Tasks.Task<InlineResponse200> FactsetEtfGetBySymbolGetAsync(string symbol, List<string> attributes = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieve basic profile information for a specified ETP.
        /// </summary>
        /// <remarks>
        /// An ETP can be profiled by defining several common attributes such as issuer, fund description, and benchmark.
        /// </remarks>
        /// <exception cref="FactSet.SDK.ETFProfileandPrices.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">Market symbol of ETP defined by FactSet.</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse200)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse200>> FactsetEtfGetBySymbolGetWithHttpInfoAsync(string symbol, List<string> attributes = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// This endpoint returns selected ETP&#39;s Growth of 10K calculated values.
        /// </summary>
        /// <remarks>
        /// Growth of 10K (or growth of 10,000) is a commonly used chart that highlights the change in the value of an initial 10,000 investment in the ETP during a given period of time. Often, this period of time is either since inception or the calculation between the pre-defined range.
        /// </remarks>
        /// <exception cref="FactSet.SDK.ETFProfileandPrices.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">Market symbol of ETP defined by FactSet.</param>
        /// <param name="timePeriod">Historice NAV date value. (optional)</param>
        /// <param name="calculationType">Historice NAV date value. (optional)</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="paginationOffset">Non-negative number of entries to skip, or 0 (default). (optional, default to 0.0M)</param>
        /// <param name="paginationLimit">Non-negative maximum number of entries to return. (optional, default to 20.0M)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse20014</returns>
        System.Threading.Tasks.Task<InlineResponse20014> FactsetEtfGrowthOfTenKListBySymbolGetAsync(string symbol, string timePeriod = default(string), string calculationType = default(string), List<string> attributes = default(List<string>), decimal? paginationOffset = default(decimal?), decimal? paginationLimit = default(decimal?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// This endpoint returns selected ETP&#39;s Growth of 10K calculated values.
        /// </summary>
        /// <remarks>
        /// Growth of 10K (or growth of 10,000) is a commonly used chart that highlights the change in the value of an initial 10,000 investment in the ETP during a given period of time. Often, this period of time is either since inception or the calculation between the pre-defined range.
        /// </remarks>
        /// <exception cref="FactSet.SDK.ETFProfileandPrices.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">Market symbol of ETP defined by FactSet.</param>
        /// <param name="timePeriod">Historice NAV date value. (optional)</param>
        /// <param name="calculationType">Historice NAV date value. (optional)</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="paginationOffset">Non-negative number of entries to skip, or 0 (default). (optional, default to 0.0M)</param>
        /// <param name="paginationLimit">Non-negative maximum number of entries to return. (optional, default to 20.0M)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse20014)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20014>> FactsetEtfGrowthOfTenKListBySymbolGetWithHttpInfoAsync(string symbol, string timePeriod = default(string), string calculationType = default(string), List<string> attributes = default(List<string>), decimal? paginationOffset = default(decimal?), decimal? paginationLimit = default(decimal?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Holdings details for an individual ETP.
        /// </summary>
        /// <remarks>
        /// Retrieve an ETP&#39;s holdings information including security, shares held, and weight.
        /// </remarks>
        /// <exception cref="FactSet.SDK.ETFProfileandPrices.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">Market symbol of ETP defined by FactSet.</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="paginationOffset">Non-negative number of entries to skip, or 0 (default). (optional, default to 0.0M)</param>
        /// <param name="paginationLimit">Non-negative maximum number of entries to return. (optional, default to 20.0M)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse20015</returns>
        System.Threading.Tasks.Task<InlineResponse20015> FactsetEtfHoldingsListBySymbolGetAsync(string symbol, List<string> attributes = default(List<string>), decimal? paginationOffset = default(decimal?), decimal? paginationLimit = default(decimal?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Holdings details for an individual ETP.
        /// </summary>
        /// <remarks>
        /// Retrieve an ETP&#39;s holdings information including security, shares held, and weight.
        /// </remarks>
        /// <exception cref="FactSet.SDK.ETFProfileandPrices.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">Market symbol of ETP defined by FactSet.</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="paginationOffset">Non-negative number of entries to skip, or 0 (default). (optional, default to 0.0M)</param>
        /// <param name="paginationLimit">Non-negative maximum number of entries to return. (optional, default to 20.0M)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse20015)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20015>> FactsetEtfHoldingsListBySymbolGetWithHttpInfoAsync(string symbol, List<string> attributes = default(List<string>), decimal? paginationOffset = default(decimal?), decimal? paginationLimit = default(decimal?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieve historical ETP NAV values.
        /// </summary>
        /// <remarks>
        /// Retrieve an ETP&#39;s historical NAV and shares outstanding for a specified time range.
        /// </remarks>
        /// <exception cref="FactSet.SDK.ETFProfileandPrices.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">Market symbol of ETP defined by FactSet.</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse20016</returns>
        System.Threading.Tasks.Task<InlineResponse20016> FactsetEtfPriceGetBySymbolGetAsync(string symbol, List<string> attributes = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieve historical ETP NAV values.
        /// </summary>
        /// <remarks>
        /// Retrieve an ETP&#39;s historical NAV and shares outstanding for a specified time range.
        /// </remarks>
        /// <exception cref="FactSet.SDK.ETFProfileandPrices.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">Market symbol of ETP defined by FactSet.</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse20016)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20016>> FactsetEtfPriceGetBySymbolGetWithHttpInfoAsync(string symbol, List<string> attributes = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieve total return data for a specified ETP.
        /// </summary>
        /// <remarks>
        /// An ETP&#39;s total return data can be returned for various time frames including 1-month, 3-month, YTD, 1-year, 3-year, and 5-year. Total return market price is used to calcualte price returns. Total return nav is used to calcualte nav returns.
        /// </remarks>
        /// <exception cref="FactSet.SDK.ETFProfileandPrices.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">Market symbol of ETP defined by FactSet.</param>
        /// <param name="returnType">Return type. (optional, default to price)</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse20017</returns>
        System.Threading.Tasks.Task<InlineResponse20017> FactsetEtfReturnsGetBySymbolGetAsync(string symbol, string returnType = default(string), List<string> attributes = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieve total return data for a specified ETP.
        /// </summary>
        /// <remarks>
        /// An ETP&#39;s total return data can be returned for various time frames including 1-month, 3-month, YTD, 1-year, 3-year, and 5-year. Total return market price is used to calcualte price returns. Total return nav is used to calcualte nav returns.
        /// </remarks>
        /// <exception cref="FactSet.SDK.ETFProfileandPrices.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">Market symbol of ETP defined by FactSet.</param>
        /// <param name="returnType">Return type. (optional, default to price)</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse20017)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20017>> FactsetEtfReturnsGetBySymbolGetWithHttpInfoAsync(string symbol, string returnType = default(string), List<string> attributes = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieve various classification details for a specified ETP.
        /// </summary>
        /// <remarks>
        /// ETP&#39;s can be classified in many different ways including investment strategy, security weightings, and fund composition.
        /// </remarks>
        /// <exception cref="FactSet.SDK.ETFProfileandPrices.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">Market symbol of ETP defined by FactSet.</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse20018</returns>
        System.Threading.Tasks.Task<InlineResponse20018> FactsetEtfStrategyGetBySymbolGetAsync(string symbol, List<string> attributes = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieve various classification details for a specified ETP.
        /// </summary>
        /// <remarks>
        /// ETP&#39;s can be classified in many different ways including investment strategy, security weightings, and fund composition.
        /// </remarks>
        /// <exception cref="FactSet.SDK.ETFProfileandPrices.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">Market symbol of ETP defined by FactSet.</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse20018)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20018>> FactsetEtfStrategyGetBySymbolGetWithHttpInfoAsync(string symbol, List<string> attributes = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieve a list of ETP strategy segments.
        /// </summary>
        /// <remarks>
        /// Retrieve the various segments assigned to a specific ETP. Segment data is used to group funds for comparison and relative performance analyses.
        /// </remarks>
        /// <exception cref="FactSet.SDK.ETFProfileandPrices.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="paginationOffset">Non-negative number of entries to skip, or 0 (default). (optional, default to 0.0M)</param>
        /// <param name="paginationLimit">Non-negative maximum number of entries to return. (optional, default to 20.0M)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse20019</returns>
        System.Threading.Tasks.Task<InlineResponse20019> FactsetEtfStrategySegmentListGetAsync(List<string> attributes = default(List<string>), decimal? paginationOffset = default(decimal?), decimal? paginationLimit = default(decimal?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieve a list of ETP strategy segments.
        /// </summary>
        /// <remarks>
        /// Retrieve the various segments assigned to a specific ETP. Segment data is used to group funds for comparison and relative performance analyses.
        /// </remarks>
        /// <exception cref="FactSet.SDK.ETFProfileandPrices.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="paginationOffset">Non-negative number of entries to skip, or 0 (default). (optional, default to 0.0M)</param>
        /// <param name="paginationLimit">Non-negative maximum number of entries to return. (optional, default to 20.0M)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse20019)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20019>> FactsetEtfStrategySegmentListGetWithHttpInfoAsync(List<string> attributes = default(List<string>), decimal? paginationOffset = default(decimal?), decimal? paginationLimit = default(decimal?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieve the basic structure information for a specified ETP.
        /// </summary>
        /// <remarks>
        /// Retrieve details on a fund&#39;s structure including its type, investment style (active/passive), and legal structure.
        /// </remarks>
        /// <exception cref="FactSet.SDK.ETFProfileandPrices.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">Market symbol of ETP defined by FactSet.</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse20020</returns>
        System.Threading.Tasks.Task<InlineResponse20020> FactsetEtfStructureGetBySymbolGetAsync(string symbol, List<string> attributes = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieve the basic structure information for a specified ETP.
        /// </summary>
        /// <remarks>
        /// Retrieve details on a fund&#39;s structure including its type, investment style (active/passive), and legal structure.
        /// </remarks>
        /// <exception cref="FactSet.SDK.ETFProfileandPrices.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">Market symbol of ETP defined by FactSet.</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse20020)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20020>> FactsetEtfStructureGetBySymbolGetWithHttpInfoAsync(string symbol, List<string> attributes = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieve the tax and fee related information for a specified ETP.
        /// </summary>
        /// <remarks>
        /// Retrieve various fee and tax related details on a specified ETP including expense ratio and tax treatment for dividends and capital gains.
        /// </remarks>
        /// <exception cref="FactSet.SDK.ETFProfileandPrices.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">Market symbol of ETP defined by FactSet.</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse20021</returns>
        System.Threading.Tasks.Task<InlineResponse20021> FactsetEtfTaxesAndFeesUsGetBySymbolGetAsync(string symbol, List<string> attributes = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieve the tax and fee related information for a specified ETP.
        /// </summary>
        /// <remarks>
        /// Retrieve various fee and tax related details on a specified ETP including expense ratio and tax treatment for dividends and capital gains.
        /// </remarks>
        /// <exception cref="FactSet.SDK.ETFProfileandPrices.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">Market symbol of ETP defined by FactSet.</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse20021)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20021>> FactsetEtfTaxesAndFeesUsGetBySymbolGetWithHttpInfoAsync(string symbol, List<string> attributes = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieve historical NAV data for a specified ETP.
        /// </summary>
        /// <remarks>
        /// Retrieve the historical NAV data and the respective fund flows and shares outstanding for a specified fund and time period. Please refer currency.fund in /factset/etf/getBySymbol for currency value.
        /// </remarks>
        /// <exception cref="FactSet.SDK.ETFProfileandPrices.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">Market symbol of ETP defined by FactSet.</param>
        /// <param name="timePeriod">Time frame of the data. (optional, default to 1Y)</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="paginationOffset">Non-negative number of entries to skip, or 0 (default). (optional, default to 0.0M)</param>
        /// <param name="paginationLimit">Non-negative maximum number of entries to return. (optional, default to 20.0M)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse20022</returns>
        System.Threading.Tasks.Task<InlineResponse20022> FactsetEtfTimeSeriesListBySymbolGetAsync(string symbol, string timePeriod = default(string), List<string> attributes = default(List<string>), decimal? paginationOffset = default(decimal?), decimal? paginationLimit = default(decimal?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieve historical NAV data for a specified ETP.
        /// </summary>
        /// <remarks>
        /// Retrieve the historical NAV data and the respective fund flows and shares outstanding for a specified fund and time period. Please refer currency.fund in /factset/etf/getBySymbol for currency value.
        /// </remarks>
        /// <exception cref="FactSet.SDK.ETFProfileandPrices.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">Market symbol of ETP defined by FactSet.</param>
        /// <param name="timePeriod">Time frame of the data. (optional, default to 1Y)</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="paginationOffset">Non-negative number of entries to skip, or 0 (default). (optional, default to 0.0M)</param>
        /// <param name="paginationLimit">Non-negative maximum number of entries to return. (optional, default to 20.0M)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse20022)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20022>> FactsetEtfTimeSeriesListBySymbolGetWithHttpInfoAsync(string symbol, string timePeriod = default(string), List<string> attributes = default(List<string>), decimal? paginationOffset = default(decimal?), decimal? paginationLimit = default(decimal?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IFactsetApi : IFactsetApiSync, IFactsetApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class FactsetApi : IFactsetApi
    {
        private FactSet.SDK.ETFProfileandPrices.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="FactsetApi"/> class.
        /// </summary>
        /// <returns></returns>
        public FactsetApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="FactsetApi"/> class.
        /// </summary>
        /// <returns></returns>
        public FactsetApi(string basePath)
        {
            this.Configuration = FactSet.SDK.ETFProfileandPrices.Client.Configuration.MergeConfigurations(
                FactSet.SDK.ETFProfileandPrices.Client.GlobalConfiguration.Instance,
                new FactSet.SDK.ETFProfileandPrices.Client.Configuration { BasePath = basePath }
            );
            this.Client = new FactSet.SDK.ETFProfileandPrices.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new FactSet.SDK.ETFProfileandPrices.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = FactSet.SDK.ETFProfileandPrices.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="FactsetApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public FactsetApi(FactSet.SDK.ETFProfileandPrices.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = FactSet.SDK.ETFProfileandPrices.Client.Configuration.MergeConfigurations(
                FactSet.SDK.ETFProfileandPrices.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new FactSet.SDK.ETFProfileandPrices.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new FactSet.SDK.ETFProfileandPrices.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = FactSet.SDK.ETFProfileandPrices.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="FactsetApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public FactsetApi(FactSet.SDK.ETFProfileandPrices.Client.ISynchronousClient client, FactSet.SDK.ETFProfileandPrices.Client.IAsynchronousClient asyncClient, FactSet.SDK.ETFProfileandPrices.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = FactSet.SDK.ETFProfileandPrices.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public FactSet.SDK.ETFProfileandPrices.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public FactSet.SDK.ETFProfileandPrices.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public FactSet.SDK.ETFProfileandPrices.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public FactSet.SDK.ETFProfileandPrices.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// This endpoint returns selected ETP&#39;s asset allocations. This endpoint returns selected ETP&#39;s allocations grouped by asset class. The response will be sorted by weight in descending order.
        /// </summary>
        /// <exception cref="FactSet.SDK.ETFProfileandPrices.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">Market symbol of ETP defined by FactSet.</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="paginationOffset">Non-negative number of entries to skip, or 0 (default). (optional, default to 0.0M)</param>
        /// <param name="paginationLimit">Non-negative maximum number of entries to return. (optional, default to 20.0M)</param>
        /// <returns>InlineResponse2001</returns>
        public InlineResponse2001 FactsetEtfAllocationAssetListBySymbolGet(string symbol, List<string> attributes = default(List<string>), decimal? paginationOffset = default(decimal?), decimal? paginationLimit = default(decimal?))
        {
            FactSet.SDK.ETFProfileandPrices.Client.ApiResponse<InlineResponse2001> localVarResponse = FactsetEtfAllocationAssetListBySymbolGetWithHttpInfo(symbol, attributes, paginationOffset, paginationLimit);
            return localVarResponse.Data;
        }

        /// <summary>
        /// This endpoint returns selected ETP&#39;s asset allocations. This endpoint returns selected ETP&#39;s allocations grouped by asset class. The response will be sorted by weight in descending order.
        /// </summary>
        /// <exception cref="FactSet.SDK.ETFProfileandPrices.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">Market symbol of ETP defined by FactSet.</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="paginationOffset">Non-negative number of entries to skip, or 0 (default). (optional, default to 0.0M)</param>
        /// <param name="paginationLimit">Non-negative maximum number of entries to return. (optional, default to 20.0M)</param>
        /// <returns>ApiResponse of InlineResponse2001</returns>
        public FactSet.SDK.ETFProfileandPrices.Client.ApiResponse<InlineResponse2001> FactsetEtfAllocationAssetListBySymbolGetWithHttpInfo(string symbol, List<string> attributes = default(List<string>), decimal? paginationOffset = default(decimal?), decimal? paginationLimit = default(decimal?))
        {
            // verify the required parameter 'symbol' is set
            if (symbol == null)
                throw new FactSet.SDK.ETFProfileandPrices.Client.ApiException(400, "Missing required parameter 'symbol' when calling FactsetApi->FactsetEtfAllocationAssetListBySymbolGet");

            FactSet.SDK.ETFProfileandPrices.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.ETFProfileandPrices.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.ParameterToMultiMap("", "symbol", symbol));
            if (attributes != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.ParameterToMultiMap("csv", "_attributes", attributes));
            }
            if (paginationOffset != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.ParameterToMultiMap("", "_paginationOffset", paginationOffset));
            }
            if (paginationLimit != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.ParameterToMultiMap("", "_paginationLimit", paginationLimit));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<InlineResponse2001>("/factset/etf/allocation/asset/listBySymbol", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("FactsetEtfAllocationAssetListBySymbolGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// This endpoint returns selected ETP&#39;s asset allocations. This endpoint returns selected ETP&#39;s allocations grouped by asset class. The response will be sorted by weight in descending order.
        /// </summary>
        /// <exception cref="FactSet.SDK.ETFProfileandPrices.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">Market symbol of ETP defined by FactSet.</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="paginationOffset">Non-negative number of entries to skip, or 0 (default). (optional, default to 0.0M)</param>
        /// <param name="paginationLimit">Non-negative maximum number of entries to return. (optional, default to 20.0M)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse2001</returns>
        public async System.Threading.Tasks.Task<InlineResponse2001> FactsetEtfAllocationAssetListBySymbolGetAsync(string symbol, List<string> attributes = default(List<string>), decimal? paginationOffset = default(decimal?), decimal? paginationLimit = default(decimal?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            FactSet.SDK.ETFProfileandPrices.Client.ApiResponse<InlineResponse2001> localVarResponse = await FactsetEtfAllocationAssetListBySymbolGetWithHttpInfoAsync(symbol, attributes, paginationOffset, paginationLimit, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// This endpoint returns selected ETP&#39;s asset allocations. This endpoint returns selected ETP&#39;s allocations grouped by asset class. The response will be sorted by weight in descending order.
        /// </summary>
        /// <exception cref="FactSet.SDK.ETFProfileandPrices.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">Market symbol of ETP defined by FactSet.</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="paginationOffset">Non-negative number of entries to skip, or 0 (default). (optional, default to 0.0M)</param>
        /// <param name="paginationLimit">Non-negative maximum number of entries to return. (optional, default to 20.0M)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse2001)</returns>
        public async System.Threading.Tasks.Task<FactSet.SDK.ETFProfileandPrices.Client.ApiResponse<InlineResponse2001>> FactsetEtfAllocationAssetListBySymbolGetWithHttpInfoAsync(string symbol, List<string> attributes = default(List<string>), decimal? paginationOffset = default(decimal?), decimal? paginationLimit = default(decimal?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'symbol' is set
            if (symbol == null)
                throw new FactSet.SDK.ETFProfileandPrices.Client.ApiException(400, "Missing required parameter 'symbol' when calling FactsetApi->FactsetEtfAllocationAssetListBySymbolGet");


            FactSet.SDK.ETFProfileandPrices.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.ETFProfileandPrices.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.ParameterToMultiMap("", "symbol", symbol));
            if (attributes != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.ParameterToMultiMap("csv", "_attributes", attributes));
            }
            if (paginationOffset != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.ParameterToMultiMap("", "_paginationOffset", paginationOffset));
            }
            if (paginationLimit != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.ParameterToMultiMap("", "_paginationLimit", paginationLimit));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<InlineResponse2001>("/factset/etf/allocation/asset/listBySymbol", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("FactsetEtfAllocationAssetListBySymbolGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// This endpoint returns selected ETP&#39;s country allocations. This endpoint returns selected ETP&#39;s allocations grouped by country names. The response will be sorted by weight in descending order.
        /// </summary>
        /// <exception cref="FactSet.SDK.ETFProfileandPrices.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">Market symbol of ETP defined by FactSet.</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="paginationOffset">Non-negative number of entries to skip, or 0 (default). (optional, default to 0.0M)</param>
        /// <param name="paginationLimit">Non-negative maximum number of entries to return. (optional, default to 20.0M)</param>
        /// <returns>InlineResponse2002</returns>
        public InlineResponse2002 FactsetEtfAllocationCountryListBySymbolGet(string symbol, List<string> attributes = default(List<string>), decimal? paginationOffset = default(decimal?), decimal? paginationLimit = default(decimal?))
        {
            FactSet.SDK.ETFProfileandPrices.Client.ApiResponse<InlineResponse2002> localVarResponse = FactsetEtfAllocationCountryListBySymbolGetWithHttpInfo(symbol, attributes, paginationOffset, paginationLimit);
            return localVarResponse.Data;
        }

        /// <summary>
        /// This endpoint returns selected ETP&#39;s country allocations. This endpoint returns selected ETP&#39;s allocations grouped by country names. The response will be sorted by weight in descending order.
        /// </summary>
        /// <exception cref="FactSet.SDK.ETFProfileandPrices.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">Market symbol of ETP defined by FactSet.</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="paginationOffset">Non-negative number of entries to skip, or 0 (default). (optional, default to 0.0M)</param>
        /// <param name="paginationLimit">Non-negative maximum number of entries to return. (optional, default to 20.0M)</param>
        /// <returns>ApiResponse of InlineResponse2002</returns>
        public FactSet.SDK.ETFProfileandPrices.Client.ApiResponse<InlineResponse2002> FactsetEtfAllocationCountryListBySymbolGetWithHttpInfo(string symbol, List<string> attributes = default(List<string>), decimal? paginationOffset = default(decimal?), decimal? paginationLimit = default(decimal?))
        {
            // verify the required parameter 'symbol' is set
            if (symbol == null)
                throw new FactSet.SDK.ETFProfileandPrices.Client.ApiException(400, "Missing required parameter 'symbol' when calling FactsetApi->FactsetEtfAllocationCountryListBySymbolGet");

            FactSet.SDK.ETFProfileandPrices.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.ETFProfileandPrices.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.ParameterToMultiMap("", "symbol", symbol));
            if (attributes != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.ParameterToMultiMap("csv", "_attributes", attributes));
            }
            if (paginationOffset != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.ParameterToMultiMap("", "_paginationOffset", paginationOffset));
            }
            if (paginationLimit != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.ParameterToMultiMap("", "_paginationLimit", paginationLimit));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<InlineResponse2002>("/factset/etf/allocation/country/listBySymbol", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("FactsetEtfAllocationCountryListBySymbolGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// This endpoint returns selected ETP&#39;s country allocations. This endpoint returns selected ETP&#39;s allocations grouped by country names. The response will be sorted by weight in descending order.
        /// </summary>
        /// <exception cref="FactSet.SDK.ETFProfileandPrices.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">Market symbol of ETP defined by FactSet.</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="paginationOffset">Non-negative number of entries to skip, or 0 (default). (optional, default to 0.0M)</param>
        /// <param name="paginationLimit">Non-negative maximum number of entries to return. (optional, default to 20.0M)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse2002</returns>
        public async System.Threading.Tasks.Task<InlineResponse2002> FactsetEtfAllocationCountryListBySymbolGetAsync(string symbol, List<string> attributes = default(List<string>), decimal? paginationOffset = default(decimal?), decimal? paginationLimit = default(decimal?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            FactSet.SDK.ETFProfileandPrices.Client.ApiResponse<InlineResponse2002> localVarResponse = await FactsetEtfAllocationCountryListBySymbolGetWithHttpInfoAsync(symbol, attributes, paginationOffset, paginationLimit, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// This endpoint returns selected ETP&#39;s country allocations. This endpoint returns selected ETP&#39;s allocations grouped by country names. The response will be sorted by weight in descending order.
        /// </summary>
        /// <exception cref="FactSet.SDK.ETFProfileandPrices.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">Market symbol of ETP defined by FactSet.</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="paginationOffset">Non-negative number of entries to skip, or 0 (default). (optional, default to 0.0M)</param>
        /// <param name="paginationLimit">Non-negative maximum number of entries to return. (optional, default to 20.0M)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse2002)</returns>
        public async System.Threading.Tasks.Task<FactSet.SDK.ETFProfileandPrices.Client.ApiResponse<InlineResponse2002>> FactsetEtfAllocationCountryListBySymbolGetWithHttpInfoAsync(string symbol, List<string> attributes = default(List<string>), decimal? paginationOffset = default(decimal?), decimal? paginationLimit = default(decimal?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'symbol' is set
            if (symbol == null)
                throw new FactSet.SDK.ETFProfileandPrices.Client.ApiException(400, "Missing required parameter 'symbol' when calling FactsetApi->FactsetEtfAllocationCountryListBySymbolGet");


            FactSet.SDK.ETFProfileandPrices.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.ETFProfileandPrices.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.ParameterToMultiMap("", "symbol", symbol));
            if (attributes != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.ParameterToMultiMap("csv", "_attributes", attributes));
            }
            if (paginationOffset != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.ParameterToMultiMap("", "_paginationOffset", paginationOffset));
            }
            if (paginationLimit != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.ParameterToMultiMap("", "_paginationLimit", paginationLimit));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<InlineResponse2002>("/factset/etf/allocation/country/listBySymbol", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("FactsetEtfAllocationCountryListBySymbolGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// This endpoint returns selected ETP&#39;s exchange allocations. This endpoint returns selected ETP&#39;s allocations grouped by exchanges. The response will be sorted by weight in descending order.
        /// </summary>
        /// <exception cref="FactSet.SDK.ETFProfileandPrices.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">Market symbol of ETP defined by FactSet.</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="paginationOffset">Non-negative number of entries to skip, or 0 (default). (optional, default to 0.0M)</param>
        /// <param name="paginationLimit">Non-negative maximum number of entries to return. (optional, default to 20.0M)</param>
        /// <returns>InlineResponse2003</returns>
        public InlineResponse2003 FactsetEtfAllocationExchangeListBySymbolGet(string symbol, List<string> attributes = default(List<string>), decimal? paginationOffset = default(decimal?), decimal? paginationLimit = default(decimal?))
        {
            FactSet.SDK.ETFProfileandPrices.Client.ApiResponse<InlineResponse2003> localVarResponse = FactsetEtfAllocationExchangeListBySymbolGetWithHttpInfo(symbol, attributes, paginationOffset, paginationLimit);
            return localVarResponse.Data;
        }

        /// <summary>
        /// This endpoint returns selected ETP&#39;s exchange allocations. This endpoint returns selected ETP&#39;s allocations grouped by exchanges. The response will be sorted by weight in descending order.
        /// </summary>
        /// <exception cref="FactSet.SDK.ETFProfileandPrices.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">Market symbol of ETP defined by FactSet.</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="paginationOffset">Non-negative number of entries to skip, or 0 (default). (optional, default to 0.0M)</param>
        /// <param name="paginationLimit">Non-negative maximum number of entries to return. (optional, default to 20.0M)</param>
        /// <returns>ApiResponse of InlineResponse2003</returns>
        public FactSet.SDK.ETFProfileandPrices.Client.ApiResponse<InlineResponse2003> FactsetEtfAllocationExchangeListBySymbolGetWithHttpInfo(string symbol, List<string> attributes = default(List<string>), decimal? paginationOffset = default(decimal?), decimal? paginationLimit = default(decimal?))
        {
            // verify the required parameter 'symbol' is set
            if (symbol == null)
                throw new FactSet.SDK.ETFProfileandPrices.Client.ApiException(400, "Missing required parameter 'symbol' when calling FactsetApi->FactsetEtfAllocationExchangeListBySymbolGet");

            FactSet.SDK.ETFProfileandPrices.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.ETFProfileandPrices.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.ParameterToMultiMap("", "symbol", symbol));
            if (attributes != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.ParameterToMultiMap("csv", "_attributes", attributes));
            }
            if (paginationOffset != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.ParameterToMultiMap("", "_paginationOffset", paginationOffset));
            }
            if (paginationLimit != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.ParameterToMultiMap("", "_paginationLimit", paginationLimit));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<InlineResponse2003>("/factset/etf/allocation/exchange/listBySymbol", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("FactsetEtfAllocationExchangeListBySymbolGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// This endpoint returns selected ETP&#39;s exchange allocations. This endpoint returns selected ETP&#39;s allocations grouped by exchanges. The response will be sorted by weight in descending order.
        /// </summary>
        /// <exception cref="FactSet.SDK.ETFProfileandPrices.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">Market symbol of ETP defined by FactSet.</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="paginationOffset">Non-negative number of entries to skip, or 0 (default). (optional, default to 0.0M)</param>
        /// <param name="paginationLimit">Non-negative maximum number of entries to return. (optional, default to 20.0M)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse2003</returns>
        public async System.Threading.Tasks.Task<InlineResponse2003> FactsetEtfAllocationExchangeListBySymbolGetAsync(string symbol, List<string> attributes = default(List<string>), decimal? paginationOffset = default(decimal?), decimal? paginationLimit = default(decimal?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            FactSet.SDK.ETFProfileandPrices.Client.ApiResponse<InlineResponse2003> localVarResponse = await FactsetEtfAllocationExchangeListBySymbolGetWithHttpInfoAsync(symbol, attributes, paginationOffset, paginationLimit, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// This endpoint returns selected ETP&#39;s exchange allocations. This endpoint returns selected ETP&#39;s allocations grouped by exchanges. The response will be sorted by weight in descending order.
        /// </summary>
        /// <exception cref="FactSet.SDK.ETFProfileandPrices.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">Market symbol of ETP defined by FactSet.</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="paginationOffset">Non-negative number of entries to skip, or 0 (default). (optional, default to 0.0M)</param>
        /// <param name="paginationLimit">Non-negative maximum number of entries to return. (optional, default to 20.0M)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse2003)</returns>
        public async System.Threading.Tasks.Task<FactSet.SDK.ETFProfileandPrices.Client.ApiResponse<InlineResponse2003>> FactsetEtfAllocationExchangeListBySymbolGetWithHttpInfoAsync(string symbol, List<string> attributes = default(List<string>), decimal? paginationOffset = default(decimal?), decimal? paginationLimit = default(decimal?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'symbol' is set
            if (symbol == null)
                throw new FactSet.SDK.ETFProfileandPrices.Client.ApiException(400, "Missing required parameter 'symbol' when calling FactsetApi->FactsetEtfAllocationExchangeListBySymbolGet");


            FactSet.SDK.ETFProfileandPrices.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.ETFProfileandPrices.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.ParameterToMultiMap("", "symbol", symbol));
            if (attributes != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.ParameterToMultiMap("csv", "_attributes", attributes));
            }
            if (paginationOffset != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.ParameterToMultiMap("", "_paginationOffset", paginationOffset));
            }
            if (paginationLimit != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.ParameterToMultiMap("", "_paginationLimit", paginationLimit));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<InlineResponse2003>("/factset/etf/allocation/exchange/listBySymbol", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("FactsetEtfAllocationExchangeListBySymbolGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// This endpoint returns selected ETP&#39;s region allocations. This endpoint returns selected ETP&#39;s allocations grouped by region names. The response will be sorted by weight in descending order.
        /// </summary>
        /// <exception cref="FactSet.SDK.ETFProfileandPrices.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">Market symbol of ETP defined by FactSet.</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="paginationOffset">Non-negative number of entries to skip, or 0 (default). (optional, default to 0.0M)</param>
        /// <param name="paginationLimit">Non-negative maximum number of entries to return. (optional, default to 20.0M)</param>
        /// <returns>InlineResponse2004</returns>
        public InlineResponse2004 FactsetEtfAllocationRegionListBySymbolGet(string symbol, List<string> attributes = default(List<string>), decimal? paginationOffset = default(decimal?), decimal? paginationLimit = default(decimal?))
        {
            FactSet.SDK.ETFProfileandPrices.Client.ApiResponse<InlineResponse2004> localVarResponse = FactsetEtfAllocationRegionListBySymbolGetWithHttpInfo(symbol, attributes, paginationOffset, paginationLimit);
            return localVarResponse.Data;
        }

        /// <summary>
        /// This endpoint returns selected ETP&#39;s region allocations. This endpoint returns selected ETP&#39;s allocations grouped by region names. The response will be sorted by weight in descending order.
        /// </summary>
        /// <exception cref="FactSet.SDK.ETFProfileandPrices.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">Market symbol of ETP defined by FactSet.</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="paginationOffset">Non-negative number of entries to skip, or 0 (default). (optional, default to 0.0M)</param>
        /// <param name="paginationLimit">Non-negative maximum number of entries to return. (optional, default to 20.0M)</param>
        /// <returns>ApiResponse of InlineResponse2004</returns>
        public FactSet.SDK.ETFProfileandPrices.Client.ApiResponse<InlineResponse2004> FactsetEtfAllocationRegionListBySymbolGetWithHttpInfo(string symbol, List<string> attributes = default(List<string>), decimal? paginationOffset = default(decimal?), decimal? paginationLimit = default(decimal?))
        {
            // verify the required parameter 'symbol' is set
            if (symbol == null)
                throw new FactSet.SDK.ETFProfileandPrices.Client.ApiException(400, "Missing required parameter 'symbol' when calling FactsetApi->FactsetEtfAllocationRegionListBySymbolGet");

            FactSet.SDK.ETFProfileandPrices.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.ETFProfileandPrices.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.ParameterToMultiMap("", "symbol", symbol));
            if (attributes != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.ParameterToMultiMap("csv", "_attributes", attributes));
            }
            if (paginationOffset != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.ParameterToMultiMap("", "_paginationOffset", paginationOffset));
            }
            if (paginationLimit != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.ParameterToMultiMap("", "_paginationLimit", paginationLimit));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<InlineResponse2004>("/factset/etf/allocation/region/listBySymbol", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("FactsetEtfAllocationRegionListBySymbolGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// This endpoint returns selected ETP&#39;s region allocations. This endpoint returns selected ETP&#39;s allocations grouped by region names. The response will be sorted by weight in descending order.
        /// </summary>
        /// <exception cref="FactSet.SDK.ETFProfileandPrices.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">Market symbol of ETP defined by FactSet.</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="paginationOffset">Non-negative number of entries to skip, or 0 (default). (optional, default to 0.0M)</param>
        /// <param name="paginationLimit">Non-negative maximum number of entries to return. (optional, default to 20.0M)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse2004</returns>
        public async System.Threading.Tasks.Task<InlineResponse2004> FactsetEtfAllocationRegionListBySymbolGetAsync(string symbol, List<string> attributes = default(List<string>), decimal? paginationOffset = default(decimal?), decimal? paginationLimit = default(decimal?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            FactSet.SDK.ETFProfileandPrices.Client.ApiResponse<InlineResponse2004> localVarResponse = await FactsetEtfAllocationRegionListBySymbolGetWithHttpInfoAsync(symbol, attributes, paginationOffset, paginationLimit, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// This endpoint returns selected ETP&#39;s region allocations. This endpoint returns selected ETP&#39;s allocations grouped by region names. The response will be sorted by weight in descending order.
        /// </summary>
        /// <exception cref="FactSet.SDK.ETFProfileandPrices.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">Market symbol of ETP defined by FactSet.</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="paginationOffset">Non-negative number of entries to skip, or 0 (default). (optional, default to 0.0M)</param>
        /// <param name="paginationLimit">Non-negative maximum number of entries to return. (optional, default to 20.0M)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse2004)</returns>
        public async System.Threading.Tasks.Task<FactSet.SDK.ETFProfileandPrices.Client.ApiResponse<InlineResponse2004>> FactsetEtfAllocationRegionListBySymbolGetWithHttpInfoAsync(string symbol, List<string> attributes = default(List<string>), decimal? paginationOffset = default(decimal?), decimal? paginationLimit = default(decimal?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'symbol' is set
            if (symbol == null)
                throw new FactSet.SDK.ETFProfileandPrices.Client.ApiException(400, "Missing required parameter 'symbol' when calling FactsetApi->FactsetEtfAllocationRegionListBySymbolGet");


            FactSet.SDK.ETFProfileandPrices.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.ETFProfileandPrices.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.ParameterToMultiMap("", "symbol", symbol));
            if (attributes != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.ParameterToMultiMap("csv", "_attributes", attributes));
            }
            if (paginationOffset != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.ParameterToMultiMap("", "_paginationOffset", paginationOffset));
            }
            if (paginationLimit != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.ParameterToMultiMap("", "_paginationLimit", paginationLimit));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<InlineResponse2004>("/factset/etf/allocation/region/listBySymbol", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("FactsetEtfAllocationRegionListBySymbolGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// This endpoint returns selected ETP&#39;s sector allocations. This endpoint returns selected ETP&#39;s allocations grouped by sector names. The response will be sorted by weight in descending order.
        /// </summary>
        /// <exception cref="FactSet.SDK.ETFProfileandPrices.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">Market symbol of ETP defined by FactSet.</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="paginationOffset">Non-negative number of entries to skip, or 0 (default). (optional, default to 0.0M)</param>
        /// <param name="paginationLimit">Non-negative maximum number of entries to return. (optional, default to 20.0M)</param>
        /// <returns>InlineResponse2005</returns>
        public InlineResponse2005 FactsetEtfAllocationSectorListBySymbolGet(string symbol, List<string> attributes = default(List<string>), decimal? paginationOffset = default(decimal?), decimal? paginationLimit = default(decimal?))
        {
            FactSet.SDK.ETFProfileandPrices.Client.ApiResponse<InlineResponse2005> localVarResponse = FactsetEtfAllocationSectorListBySymbolGetWithHttpInfo(symbol, attributes, paginationOffset, paginationLimit);
            return localVarResponse.Data;
        }

        /// <summary>
        /// This endpoint returns selected ETP&#39;s sector allocations. This endpoint returns selected ETP&#39;s allocations grouped by sector names. The response will be sorted by weight in descending order.
        /// </summary>
        /// <exception cref="FactSet.SDK.ETFProfileandPrices.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">Market symbol of ETP defined by FactSet.</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="paginationOffset">Non-negative number of entries to skip, or 0 (default). (optional, default to 0.0M)</param>
        /// <param name="paginationLimit">Non-negative maximum number of entries to return. (optional, default to 20.0M)</param>
        /// <returns>ApiResponse of InlineResponse2005</returns>
        public FactSet.SDK.ETFProfileandPrices.Client.ApiResponse<InlineResponse2005> FactsetEtfAllocationSectorListBySymbolGetWithHttpInfo(string symbol, List<string> attributes = default(List<string>), decimal? paginationOffset = default(decimal?), decimal? paginationLimit = default(decimal?))
        {
            // verify the required parameter 'symbol' is set
            if (symbol == null)
                throw new FactSet.SDK.ETFProfileandPrices.Client.ApiException(400, "Missing required parameter 'symbol' when calling FactsetApi->FactsetEtfAllocationSectorListBySymbolGet");

            FactSet.SDK.ETFProfileandPrices.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.ETFProfileandPrices.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.ParameterToMultiMap("", "symbol", symbol));
            if (attributes != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.ParameterToMultiMap("csv", "_attributes", attributes));
            }
            if (paginationOffset != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.ParameterToMultiMap("", "_paginationOffset", paginationOffset));
            }
            if (paginationLimit != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.ParameterToMultiMap("", "_paginationLimit", paginationLimit));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<InlineResponse2005>("/factset/etf/allocation/sector/listBySymbol", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("FactsetEtfAllocationSectorListBySymbolGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// This endpoint returns selected ETP&#39;s sector allocations. This endpoint returns selected ETP&#39;s allocations grouped by sector names. The response will be sorted by weight in descending order.
        /// </summary>
        /// <exception cref="FactSet.SDK.ETFProfileandPrices.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">Market symbol of ETP defined by FactSet.</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="paginationOffset">Non-negative number of entries to skip, or 0 (default). (optional, default to 0.0M)</param>
        /// <param name="paginationLimit">Non-negative maximum number of entries to return. (optional, default to 20.0M)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse2005</returns>
        public async System.Threading.Tasks.Task<InlineResponse2005> FactsetEtfAllocationSectorListBySymbolGetAsync(string symbol, List<string> attributes = default(List<string>), decimal? paginationOffset = default(decimal?), decimal? paginationLimit = default(decimal?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            FactSet.SDK.ETFProfileandPrices.Client.ApiResponse<InlineResponse2005> localVarResponse = await FactsetEtfAllocationSectorListBySymbolGetWithHttpInfoAsync(symbol, attributes, paginationOffset, paginationLimit, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// This endpoint returns selected ETP&#39;s sector allocations. This endpoint returns selected ETP&#39;s allocations grouped by sector names. The response will be sorted by weight in descending order.
        /// </summary>
        /// <exception cref="FactSet.SDK.ETFProfileandPrices.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">Market symbol of ETP defined by FactSet.</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="paginationOffset">Non-negative number of entries to skip, or 0 (default). (optional, default to 0.0M)</param>
        /// <param name="paginationLimit">Non-negative maximum number of entries to return. (optional, default to 20.0M)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse2005)</returns>
        public async System.Threading.Tasks.Task<FactSet.SDK.ETFProfileandPrices.Client.ApiResponse<InlineResponse2005>> FactsetEtfAllocationSectorListBySymbolGetWithHttpInfoAsync(string symbol, List<string> attributes = default(List<string>), decimal? paginationOffset = default(decimal?), decimal? paginationLimit = default(decimal?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'symbol' is set
            if (symbol == null)
                throw new FactSet.SDK.ETFProfileandPrices.Client.ApiException(400, "Missing required parameter 'symbol' when calling FactsetApi->FactsetEtfAllocationSectorListBySymbolGet");


            FactSet.SDK.ETFProfileandPrices.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.ETFProfileandPrices.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.ParameterToMultiMap("", "symbol", symbol));
            if (attributes != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.ParameterToMultiMap("csv", "_attributes", attributes));
            }
            if (paginationOffset != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.ParameterToMultiMap("", "_paginationOffset", paginationOffset));
            }
            if (paginationLimit != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.ParameterToMultiMap("", "_paginationLimit", paginationLimit));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<InlineResponse2005>("/factset/etf/allocation/sector/listBySymbol", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("FactsetEtfAllocationSectorListBySymbolGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve basic characteristic information for a specified ETP. An ETP has many unique characteristics specific to its composition that differentiate it from other products. This includes details on leverage, hedging, derivatives, and service providers.
        /// </summary>
        /// <exception cref="FactSet.SDK.ETFProfileandPrices.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">Market symbol of ETF defined by FactSet.</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <returns>InlineResponse2006</returns>
        public InlineResponse2006 FactsetEtfCharacteristicsGetBySymbolGet(string symbol, List<string> attributes = default(List<string>))
        {
            FactSet.SDK.ETFProfileandPrices.Client.ApiResponse<InlineResponse2006> localVarResponse = FactsetEtfCharacteristicsGetBySymbolGetWithHttpInfo(symbol, attributes);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve basic characteristic information for a specified ETP. An ETP has many unique characteristics specific to its composition that differentiate it from other products. This includes details on leverage, hedging, derivatives, and service providers.
        /// </summary>
        /// <exception cref="FactSet.SDK.ETFProfileandPrices.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">Market symbol of ETF defined by FactSet.</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <returns>ApiResponse of InlineResponse2006</returns>
        public FactSet.SDK.ETFProfileandPrices.Client.ApiResponse<InlineResponse2006> FactsetEtfCharacteristicsGetBySymbolGetWithHttpInfo(string symbol, List<string> attributes = default(List<string>))
        {
            // verify the required parameter 'symbol' is set
            if (symbol == null)
                throw new FactSet.SDK.ETFProfileandPrices.Client.ApiException(400, "Missing required parameter 'symbol' when calling FactsetApi->FactsetEtfCharacteristicsGetBySymbolGet");

            FactSet.SDK.ETFProfileandPrices.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.ETFProfileandPrices.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.ParameterToMultiMap("", "symbol", symbol));
            if (attributes != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.ParameterToMultiMap("csv", "_attributes", attributes));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<InlineResponse2006>("/factset/etf/characteristics/getBySymbol", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("FactsetEtfCharacteristicsGetBySymbolGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve basic characteristic information for a specified ETP. An ETP has many unique characteristics specific to its composition that differentiate it from other products. This includes details on leverage, hedging, derivatives, and service providers.
        /// </summary>
        /// <exception cref="FactSet.SDK.ETFProfileandPrices.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">Market symbol of ETF defined by FactSet.</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse2006</returns>
        public async System.Threading.Tasks.Task<InlineResponse2006> FactsetEtfCharacteristicsGetBySymbolGetAsync(string symbol, List<string> attributes = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            FactSet.SDK.ETFProfileandPrices.Client.ApiResponse<InlineResponse2006> localVarResponse = await FactsetEtfCharacteristicsGetBySymbolGetWithHttpInfoAsync(symbol, attributes, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve basic characteristic information for a specified ETP. An ETP has many unique characteristics specific to its composition that differentiate it from other products. This includes details on leverage, hedging, derivatives, and service providers.
        /// </summary>
        /// <exception cref="FactSet.SDK.ETFProfileandPrices.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">Market symbol of ETF defined by FactSet.</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse2006)</returns>
        public async System.Threading.Tasks.Task<FactSet.SDK.ETFProfileandPrices.Client.ApiResponse<InlineResponse2006>> FactsetEtfCharacteristicsGetBySymbolGetWithHttpInfoAsync(string symbol, List<string> attributes = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'symbol' is set
            if (symbol == null)
                throw new FactSet.SDK.ETFProfileandPrices.Client.ApiException(400, "Missing required parameter 'symbol' when calling FactsetApi->FactsetEtfCharacteristicsGetBySymbolGet");


            FactSet.SDK.ETFProfileandPrices.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.ETFProfileandPrices.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.ParameterToMultiMap("", "symbol", symbol));
            if (attributes != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.ParameterToMultiMap("csv", "_attributes", attributes));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<InlineResponse2006>("/factset/etf/characteristics/getBySymbol", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("FactsetEtfCharacteristicsGetBySymbolGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List of ETP class broad categories. List of ETP class broad categories.
        /// </summary>
        /// <exception cref="FactSet.SDK.ETFProfileandPrices.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <returns>InlineResponse2008</returns>
        public InlineResponse2008 FactsetEtfClassCategoryBroadListGet(List<string> attributes = default(List<string>))
        {
            FactSet.SDK.ETFProfileandPrices.Client.ApiResponse<InlineResponse2008> localVarResponse = FactsetEtfClassCategoryBroadListGetWithHttpInfo(attributes);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List of ETP class broad categories. List of ETP class broad categories.
        /// </summary>
        /// <exception cref="FactSet.SDK.ETFProfileandPrices.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <returns>ApiResponse of InlineResponse2008</returns>
        public FactSet.SDK.ETFProfileandPrices.Client.ApiResponse<InlineResponse2008> FactsetEtfClassCategoryBroadListGetWithHttpInfo(List<string> attributes = default(List<string>))
        {
            FactSet.SDK.ETFProfileandPrices.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.ETFProfileandPrices.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (attributes != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.ParameterToMultiMap("csv", "_attributes", attributes));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<InlineResponse2008>("/factset/etf/class/category/broad/list", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("FactsetEtfClassCategoryBroadListGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List of ETP class broad categories. List of ETP class broad categories.
        /// </summary>
        /// <exception cref="FactSet.SDK.ETFProfileandPrices.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse2008</returns>
        public async System.Threading.Tasks.Task<InlineResponse2008> FactsetEtfClassCategoryBroadListGetAsync(List<string> attributes = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            FactSet.SDK.ETFProfileandPrices.Client.ApiResponse<InlineResponse2008> localVarResponse = await FactsetEtfClassCategoryBroadListGetWithHttpInfoAsync(attributes, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List of ETP class broad categories. List of ETP class broad categories.
        /// </summary>
        /// <exception cref="FactSet.SDK.ETFProfileandPrices.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse2008)</returns>
        public async System.Threading.Tasks.Task<FactSet.SDK.ETFProfileandPrices.Client.ApiResponse<InlineResponse2008>> FactsetEtfClassCategoryBroadListGetWithHttpInfoAsync(List<string> attributes = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            FactSet.SDK.ETFProfileandPrices.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.ETFProfileandPrices.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (attributes != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.ParameterToMultiMap("csv", "_attributes", attributes));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<InlineResponse2008>("/factset/etf/class/category/broad/list", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("FactsetEtfClassCategoryBroadListGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List of ETP class focus categories. List of ETP class focus categories.
        /// </summary>
        /// <exception cref="FactSet.SDK.ETFProfileandPrices.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="paginationOffset">Non-negative number of entries to skip, or 0 (default). (optional, default to 0.0M)</param>
        /// <param name="paginationLimit">Non-negative maximum number of entries to return. (optional, default to 20.0M)</param>
        /// <returns>InlineResponse2009</returns>
        public InlineResponse2009 FactsetEtfClassCategoryFocusListGet(List<string> attributes = default(List<string>), decimal? paginationOffset = default(decimal?), decimal? paginationLimit = default(decimal?))
        {
            FactSet.SDK.ETFProfileandPrices.Client.ApiResponse<InlineResponse2009> localVarResponse = FactsetEtfClassCategoryFocusListGetWithHttpInfo(attributes, paginationOffset, paginationLimit);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List of ETP class focus categories. List of ETP class focus categories.
        /// </summary>
        /// <exception cref="FactSet.SDK.ETFProfileandPrices.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="paginationOffset">Non-negative number of entries to skip, or 0 (default). (optional, default to 0.0M)</param>
        /// <param name="paginationLimit">Non-negative maximum number of entries to return. (optional, default to 20.0M)</param>
        /// <returns>ApiResponse of InlineResponse2009</returns>
        public FactSet.SDK.ETFProfileandPrices.Client.ApiResponse<InlineResponse2009> FactsetEtfClassCategoryFocusListGetWithHttpInfo(List<string> attributes = default(List<string>), decimal? paginationOffset = default(decimal?), decimal? paginationLimit = default(decimal?))
        {
            FactSet.SDK.ETFProfileandPrices.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.ETFProfileandPrices.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (attributes != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.ParameterToMultiMap("csv", "_attributes", attributes));
            }
            if (paginationOffset != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.ParameterToMultiMap("", "_paginationOffset", paginationOffset));
            }
            if (paginationLimit != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.ParameterToMultiMap("", "_paginationLimit", paginationLimit));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<InlineResponse2009>("/factset/etf/class/category/focus/list", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("FactsetEtfClassCategoryFocusListGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List of ETP class focus categories. List of ETP class focus categories.
        /// </summary>
        /// <exception cref="FactSet.SDK.ETFProfileandPrices.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="paginationOffset">Non-negative number of entries to skip, or 0 (default). (optional, default to 0.0M)</param>
        /// <param name="paginationLimit">Non-negative maximum number of entries to return. (optional, default to 20.0M)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse2009</returns>
        public async System.Threading.Tasks.Task<InlineResponse2009> FactsetEtfClassCategoryFocusListGetAsync(List<string> attributes = default(List<string>), decimal? paginationOffset = default(decimal?), decimal? paginationLimit = default(decimal?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            FactSet.SDK.ETFProfileandPrices.Client.ApiResponse<InlineResponse2009> localVarResponse = await FactsetEtfClassCategoryFocusListGetWithHttpInfoAsync(attributes, paginationOffset, paginationLimit, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List of ETP class focus categories. List of ETP class focus categories.
        /// </summary>
        /// <exception cref="FactSet.SDK.ETFProfileandPrices.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="paginationOffset">Non-negative number of entries to skip, or 0 (default). (optional, default to 0.0M)</param>
        /// <param name="paginationLimit">Non-negative maximum number of entries to return. (optional, default to 20.0M)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse2009)</returns>
        public async System.Threading.Tasks.Task<FactSet.SDK.ETFProfileandPrices.Client.ApiResponse<InlineResponse2009>> FactsetEtfClassCategoryFocusListGetWithHttpInfoAsync(List<string> attributes = default(List<string>), decimal? paginationOffset = default(decimal?), decimal? paginationLimit = default(decimal?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            FactSet.SDK.ETFProfileandPrices.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.ETFProfileandPrices.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (attributes != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.ParameterToMultiMap("csv", "_attributes", attributes));
            }
            if (paginationOffset != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.ParameterToMultiMap("", "_paginationOffset", paginationOffset));
            }
            if (paginationLimit != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.ParameterToMultiMap("", "_paginationLimit", paginationLimit));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<InlineResponse2009>("/factset/etf/class/category/focus/list", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("FactsetEtfClassCategoryFocusListGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List of ETP class niche categories. List of ETP class niche categories.
        /// </summary>
        /// <exception cref="FactSet.SDK.ETFProfileandPrices.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="paginationOffset">Non-negative number of entries to skip, or 0 (default). (optional, default to 0.0M)</param>
        /// <param name="paginationLimit">Non-negative maximum number of entries to return. (optional, default to 20.0M)</param>
        /// <returns>InlineResponse20010</returns>
        public InlineResponse20010 FactsetEtfClassCategoryNicheListGet(List<string> attributes = default(List<string>), decimal? paginationOffset = default(decimal?), decimal? paginationLimit = default(decimal?))
        {
            FactSet.SDK.ETFProfileandPrices.Client.ApiResponse<InlineResponse20010> localVarResponse = FactsetEtfClassCategoryNicheListGetWithHttpInfo(attributes, paginationOffset, paginationLimit);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List of ETP class niche categories. List of ETP class niche categories.
        /// </summary>
        /// <exception cref="FactSet.SDK.ETFProfileandPrices.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="paginationOffset">Non-negative number of entries to skip, or 0 (default). (optional, default to 0.0M)</param>
        /// <param name="paginationLimit">Non-negative maximum number of entries to return. (optional, default to 20.0M)</param>
        /// <returns>ApiResponse of InlineResponse20010</returns>
        public FactSet.SDK.ETFProfileandPrices.Client.ApiResponse<InlineResponse20010> FactsetEtfClassCategoryNicheListGetWithHttpInfo(List<string> attributes = default(List<string>), decimal? paginationOffset = default(decimal?), decimal? paginationLimit = default(decimal?))
        {
            FactSet.SDK.ETFProfileandPrices.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.ETFProfileandPrices.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (attributes != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.ParameterToMultiMap("csv", "_attributes", attributes));
            }
            if (paginationOffset != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.ParameterToMultiMap("", "_paginationOffset", paginationOffset));
            }
            if (paginationLimit != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.ParameterToMultiMap("", "_paginationLimit", paginationLimit));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<InlineResponse20010>("/factset/etf/class/category/niche/list", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("FactsetEtfClassCategoryNicheListGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List of ETP class niche categories. List of ETP class niche categories.
        /// </summary>
        /// <exception cref="FactSet.SDK.ETFProfileandPrices.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="paginationOffset">Non-negative number of entries to skip, or 0 (default). (optional, default to 0.0M)</param>
        /// <param name="paginationLimit">Non-negative maximum number of entries to return. (optional, default to 20.0M)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse20010</returns>
        public async System.Threading.Tasks.Task<InlineResponse20010> FactsetEtfClassCategoryNicheListGetAsync(List<string> attributes = default(List<string>), decimal? paginationOffset = default(decimal?), decimal? paginationLimit = default(decimal?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            FactSet.SDK.ETFProfileandPrices.Client.ApiResponse<InlineResponse20010> localVarResponse = await FactsetEtfClassCategoryNicheListGetWithHttpInfoAsync(attributes, paginationOffset, paginationLimit, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List of ETP class niche categories. List of ETP class niche categories.
        /// </summary>
        /// <exception cref="FactSet.SDK.ETFProfileandPrices.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="paginationOffset">Non-negative number of entries to skip, or 0 (default). (optional, default to 0.0M)</param>
        /// <param name="paginationLimit">Non-negative maximum number of entries to return. (optional, default to 20.0M)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse20010)</returns>
        public async System.Threading.Tasks.Task<FactSet.SDK.ETFProfileandPrices.Client.ApiResponse<InlineResponse20010>> FactsetEtfClassCategoryNicheListGetWithHttpInfoAsync(List<string> attributes = default(List<string>), decimal? paginationOffset = default(decimal?), decimal? paginationLimit = default(decimal?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            FactSet.SDK.ETFProfileandPrices.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.ETFProfileandPrices.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (attributes != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.ParameterToMultiMap("csv", "_attributes", attributes));
            }
            if (paginationOffset != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.ParameterToMultiMap("", "_paginationOffset", paginationOffset));
            }
            if (paginationLimit != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.ParameterToMultiMap("", "_paginationLimit", paginationLimit));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<InlineResponse20010>("/factset/etf/class/category/niche/list", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("FactsetEtfClassCategoryNicheListGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List of ETP class geographies. List of ETP class geographies.
        /// </summary>
        /// <exception cref="FactSet.SDK.ETFProfileandPrices.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <returns>InlineResponse20011</returns>
        public InlineResponse20011 FactsetEtfClassGeographyListGet(List<string> attributes = default(List<string>))
        {
            FactSet.SDK.ETFProfileandPrices.Client.ApiResponse<InlineResponse20011> localVarResponse = FactsetEtfClassGeographyListGetWithHttpInfo(attributes);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List of ETP class geographies. List of ETP class geographies.
        /// </summary>
        /// <exception cref="FactSet.SDK.ETFProfileandPrices.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <returns>ApiResponse of InlineResponse20011</returns>
        public FactSet.SDK.ETFProfileandPrices.Client.ApiResponse<InlineResponse20011> FactsetEtfClassGeographyListGetWithHttpInfo(List<string> attributes = default(List<string>))
        {
            FactSet.SDK.ETFProfileandPrices.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.ETFProfileandPrices.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (attributes != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.ParameterToMultiMap("csv", "_attributes", attributes));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<InlineResponse20011>("/factset/etf/class/geography/list", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("FactsetEtfClassGeographyListGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List of ETP class geographies. List of ETP class geographies.
        /// </summary>
        /// <exception cref="FactSet.SDK.ETFProfileandPrices.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse20011</returns>
        public async System.Threading.Tasks.Task<InlineResponse20011> FactsetEtfClassGeographyListGetAsync(List<string> attributes = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            FactSet.SDK.ETFProfileandPrices.Client.ApiResponse<InlineResponse20011> localVarResponse = await FactsetEtfClassGeographyListGetWithHttpInfoAsync(attributes, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List of ETP class geographies. List of ETP class geographies.
        /// </summary>
        /// <exception cref="FactSet.SDK.ETFProfileandPrices.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse20011)</returns>
        public async System.Threading.Tasks.Task<FactSet.SDK.ETFProfileandPrices.Client.ApiResponse<InlineResponse20011>> FactsetEtfClassGeographyListGetWithHttpInfoAsync(List<string> attributes = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            FactSet.SDK.ETFProfileandPrices.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.ETFProfileandPrices.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (attributes != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.ParameterToMultiMap("csv", "_attributes", attributes));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<InlineResponse20011>("/factset/etf/class/geography/list", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("FactsetEtfClassGeographyListGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve an ETP&#39;s classification specific to asset class, geography, or investment strategy. ETP classification is divided into three categories: Asset Class, Geography, and Investment Strategy. Asset class is determined based on the various asset types held by the fund, A fund&#39;s geography can be classified by region (e.g. Asia-Pac), specific geography (e.g. China) or economic development (e.g. BRIC). An ETP&#39;s investment strategy is classified in broad categories (e.g. Large Cap) and more granular categorizations.
        /// </summary>
        /// <exception cref="FactSet.SDK.ETFProfileandPrices.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">Market symbol of ETP defined by FactSet.</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <returns>InlineResponse2007</returns>
        public InlineResponse2007 FactsetEtfClassGetBySymbolGet(string symbol, List<string> attributes = default(List<string>))
        {
            FactSet.SDK.ETFProfileandPrices.Client.ApiResponse<InlineResponse2007> localVarResponse = FactsetEtfClassGetBySymbolGetWithHttpInfo(symbol, attributes);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve an ETP&#39;s classification specific to asset class, geography, or investment strategy. ETP classification is divided into three categories: Asset Class, Geography, and Investment Strategy. Asset class is determined based on the various asset types held by the fund, A fund&#39;s geography can be classified by region (e.g. Asia-Pac), specific geography (e.g. China) or economic development (e.g. BRIC). An ETP&#39;s investment strategy is classified in broad categories (e.g. Large Cap) and more granular categorizations.
        /// </summary>
        /// <exception cref="FactSet.SDK.ETFProfileandPrices.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">Market symbol of ETP defined by FactSet.</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <returns>ApiResponse of InlineResponse2007</returns>
        public FactSet.SDK.ETFProfileandPrices.Client.ApiResponse<InlineResponse2007> FactsetEtfClassGetBySymbolGetWithHttpInfo(string symbol, List<string> attributes = default(List<string>))
        {
            // verify the required parameter 'symbol' is set
            if (symbol == null)
                throw new FactSet.SDK.ETFProfileandPrices.Client.ApiException(400, "Missing required parameter 'symbol' when calling FactsetApi->FactsetEtfClassGetBySymbolGet");

            FactSet.SDK.ETFProfileandPrices.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.ETFProfileandPrices.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.ParameterToMultiMap("", "symbol", symbol));
            if (attributes != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.ParameterToMultiMap("csv", "_attributes", attributes));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<InlineResponse2007>("/factset/etf/class/getBySymbol", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("FactsetEtfClassGetBySymbolGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve an ETP&#39;s classification specific to asset class, geography, or investment strategy. ETP classification is divided into three categories: Asset Class, Geography, and Investment Strategy. Asset class is determined based on the various asset types held by the fund, A fund&#39;s geography can be classified by region (e.g. Asia-Pac), specific geography (e.g. China) or economic development (e.g. BRIC). An ETP&#39;s investment strategy is classified in broad categories (e.g. Large Cap) and more granular categorizations.
        /// </summary>
        /// <exception cref="FactSet.SDK.ETFProfileandPrices.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">Market symbol of ETP defined by FactSet.</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse2007</returns>
        public async System.Threading.Tasks.Task<InlineResponse2007> FactsetEtfClassGetBySymbolGetAsync(string symbol, List<string> attributes = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            FactSet.SDK.ETFProfileandPrices.Client.ApiResponse<InlineResponse2007> localVarResponse = await FactsetEtfClassGetBySymbolGetWithHttpInfoAsync(symbol, attributes, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve an ETP&#39;s classification specific to asset class, geography, or investment strategy. ETP classification is divided into three categories: Asset Class, Geography, and Investment Strategy. Asset class is determined based on the various asset types held by the fund, A fund&#39;s geography can be classified by region (e.g. Asia-Pac), specific geography (e.g. China) or economic development (e.g. BRIC). An ETP&#39;s investment strategy is classified in broad categories (e.g. Large Cap) and more granular categorizations.
        /// </summary>
        /// <exception cref="FactSet.SDK.ETFProfileandPrices.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">Market symbol of ETP defined by FactSet.</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse2007)</returns>
        public async System.Threading.Tasks.Task<FactSet.SDK.ETFProfileandPrices.Client.ApiResponse<InlineResponse2007>> FactsetEtfClassGetBySymbolGetWithHttpInfoAsync(string symbol, List<string> attributes = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'symbol' is set
            if (symbol == null)
                throw new FactSet.SDK.ETFProfileandPrices.Client.ApiException(400, "Missing required parameter 'symbol' when calling FactsetApi->FactsetEtfClassGetBySymbolGet");


            FactSet.SDK.ETFProfileandPrices.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.ETFProfileandPrices.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.ParameterToMultiMap("", "symbol", symbol));
            if (attributes != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.ParameterToMultiMap("csv", "_attributes", attributes));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<InlineResponse2007>("/factset/etf/class/getBySymbol", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("FactsetEtfClassGetBySymbolGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve an ETP&#39;s current distribution details. Retrieve distribution-related details for a specific ETP including dividend and capital gain distribution details.
        /// </summary>
        /// <exception cref="FactSet.SDK.ETFProfileandPrices.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">Market symbol of ETP defined by FactSet.</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <returns>InlineResponse20012</returns>
        public InlineResponse20012 FactsetEtfDistributionGetBySymbolGet(string symbol, List<string> attributes = default(List<string>))
        {
            FactSet.SDK.ETFProfileandPrices.Client.ApiResponse<InlineResponse20012> localVarResponse = FactsetEtfDistributionGetBySymbolGetWithHttpInfo(symbol, attributes);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve an ETP&#39;s current distribution details. Retrieve distribution-related details for a specific ETP including dividend and capital gain distribution details.
        /// </summary>
        /// <exception cref="FactSet.SDK.ETFProfileandPrices.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">Market symbol of ETP defined by FactSet.</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <returns>ApiResponse of InlineResponse20012</returns>
        public FactSet.SDK.ETFProfileandPrices.Client.ApiResponse<InlineResponse20012> FactsetEtfDistributionGetBySymbolGetWithHttpInfo(string symbol, List<string> attributes = default(List<string>))
        {
            // verify the required parameter 'symbol' is set
            if (symbol == null)
                throw new FactSet.SDK.ETFProfileandPrices.Client.ApiException(400, "Missing required parameter 'symbol' when calling FactsetApi->FactsetEtfDistributionGetBySymbolGet");

            FactSet.SDK.ETFProfileandPrices.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.ETFProfileandPrices.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.ParameterToMultiMap("", "symbol", symbol));
            if (attributes != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.ParameterToMultiMap("csv", "_attributes", attributes));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<InlineResponse20012>("/factset/etf/distribution/getBySymbol", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("FactsetEtfDistributionGetBySymbolGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve an ETP&#39;s current distribution details. Retrieve distribution-related details for a specific ETP including dividend and capital gain distribution details.
        /// </summary>
        /// <exception cref="FactSet.SDK.ETFProfileandPrices.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">Market symbol of ETP defined by FactSet.</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse20012</returns>
        public async System.Threading.Tasks.Task<InlineResponse20012> FactsetEtfDistributionGetBySymbolGetAsync(string symbol, List<string> attributes = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            FactSet.SDK.ETFProfileandPrices.Client.ApiResponse<InlineResponse20012> localVarResponse = await FactsetEtfDistributionGetBySymbolGetWithHttpInfoAsync(symbol, attributes, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve an ETP&#39;s current distribution details. Retrieve distribution-related details for a specific ETP including dividend and capital gain distribution details.
        /// </summary>
        /// <exception cref="FactSet.SDK.ETFProfileandPrices.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">Market symbol of ETP defined by FactSet.</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse20012)</returns>
        public async System.Threading.Tasks.Task<FactSet.SDK.ETFProfileandPrices.Client.ApiResponse<InlineResponse20012>> FactsetEtfDistributionGetBySymbolGetWithHttpInfoAsync(string symbol, List<string> attributes = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'symbol' is set
            if (symbol == null)
                throw new FactSet.SDK.ETFProfileandPrices.Client.ApiException(400, "Missing required parameter 'symbol' when calling FactsetApi->FactsetEtfDistributionGetBySymbolGet");


            FactSet.SDK.ETFProfileandPrices.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.ETFProfileandPrices.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.ParameterToMultiMap("", "symbol", symbol));
            if (attributes != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.ParameterToMultiMap("csv", "_attributes", attributes));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<InlineResponse20012>("/factset/etf/distribution/getBySymbol", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("FactsetEtfDistributionGetBySymbolGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve an ETP&#39;s cash inflow/outflows for various time periods. Retrieve the amount invested or divested in a specific ETP over various time periods including one-day, one-week, one-month, one-year, and YTD.
        /// </summary>
        /// <exception cref="FactSet.SDK.ETFProfileandPrices.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">Market symbol of ETP defined by FactSet.</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <returns>InlineResponse20013</returns>
        public InlineResponse20013 FactsetEtfFundFlowsGetBySymbolGet(string symbol, List<string> attributes = default(List<string>))
        {
            FactSet.SDK.ETFProfileandPrices.Client.ApiResponse<InlineResponse20013> localVarResponse = FactsetEtfFundFlowsGetBySymbolGetWithHttpInfo(symbol, attributes);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve an ETP&#39;s cash inflow/outflows for various time periods. Retrieve the amount invested or divested in a specific ETP over various time periods including one-day, one-week, one-month, one-year, and YTD.
        /// </summary>
        /// <exception cref="FactSet.SDK.ETFProfileandPrices.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">Market symbol of ETP defined by FactSet.</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <returns>ApiResponse of InlineResponse20013</returns>
        public FactSet.SDK.ETFProfileandPrices.Client.ApiResponse<InlineResponse20013> FactsetEtfFundFlowsGetBySymbolGetWithHttpInfo(string symbol, List<string> attributes = default(List<string>))
        {
            // verify the required parameter 'symbol' is set
            if (symbol == null)
                throw new FactSet.SDK.ETFProfileandPrices.Client.ApiException(400, "Missing required parameter 'symbol' when calling FactsetApi->FactsetEtfFundFlowsGetBySymbolGet");

            FactSet.SDK.ETFProfileandPrices.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.ETFProfileandPrices.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.ParameterToMultiMap("", "symbol", symbol));
            if (attributes != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.ParameterToMultiMap("csv", "_attributes", attributes));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<InlineResponse20013>("/factset/etf/fundFlows/getBySymbol", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("FactsetEtfFundFlowsGetBySymbolGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve an ETP&#39;s cash inflow/outflows for various time periods. Retrieve the amount invested or divested in a specific ETP over various time periods including one-day, one-week, one-month, one-year, and YTD.
        /// </summary>
        /// <exception cref="FactSet.SDK.ETFProfileandPrices.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">Market symbol of ETP defined by FactSet.</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse20013</returns>
        public async System.Threading.Tasks.Task<InlineResponse20013> FactsetEtfFundFlowsGetBySymbolGetAsync(string symbol, List<string> attributes = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            FactSet.SDK.ETFProfileandPrices.Client.ApiResponse<InlineResponse20013> localVarResponse = await FactsetEtfFundFlowsGetBySymbolGetWithHttpInfoAsync(symbol, attributes, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve an ETP&#39;s cash inflow/outflows for various time periods. Retrieve the amount invested or divested in a specific ETP over various time periods including one-day, one-week, one-month, one-year, and YTD.
        /// </summary>
        /// <exception cref="FactSet.SDK.ETFProfileandPrices.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">Market symbol of ETP defined by FactSet.</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse20013)</returns>
        public async System.Threading.Tasks.Task<FactSet.SDK.ETFProfileandPrices.Client.ApiResponse<InlineResponse20013>> FactsetEtfFundFlowsGetBySymbolGetWithHttpInfoAsync(string symbol, List<string> attributes = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'symbol' is set
            if (symbol == null)
                throw new FactSet.SDK.ETFProfileandPrices.Client.ApiException(400, "Missing required parameter 'symbol' when calling FactsetApi->FactsetEtfFundFlowsGetBySymbolGet");


            FactSet.SDK.ETFProfileandPrices.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.ETFProfileandPrices.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.ParameterToMultiMap("", "symbol", symbol));
            if (attributes != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.ParameterToMultiMap("csv", "_attributes", attributes));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<InlineResponse20013>("/factset/etf/fundFlows/getBySymbol", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("FactsetEtfFundFlowsGetBySymbolGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve basic profile information for a specified ETP. An ETP can be profiled by defining several common attributes such as issuer, fund description, and benchmark.
        /// </summary>
        /// <exception cref="FactSet.SDK.ETFProfileandPrices.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">Market symbol of ETP defined by FactSet.</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <returns>InlineResponse200</returns>
        public InlineResponse200 FactsetEtfGetBySymbolGet(string symbol, List<string> attributes = default(List<string>))
        {
            FactSet.SDK.ETFProfileandPrices.Client.ApiResponse<InlineResponse200> localVarResponse = FactsetEtfGetBySymbolGetWithHttpInfo(symbol, attributes);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve basic profile information for a specified ETP. An ETP can be profiled by defining several common attributes such as issuer, fund description, and benchmark.
        /// </summary>
        /// <exception cref="FactSet.SDK.ETFProfileandPrices.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">Market symbol of ETP defined by FactSet.</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <returns>ApiResponse of InlineResponse200</returns>
        public FactSet.SDK.ETFProfileandPrices.Client.ApiResponse<InlineResponse200> FactsetEtfGetBySymbolGetWithHttpInfo(string symbol, List<string> attributes = default(List<string>))
        {
            // verify the required parameter 'symbol' is set
            if (symbol == null)
                throw new FactSet.SDK.ETFProfileandPrices.Client.ApiException(400, "Missing required parameter 'symbol' when calling FactsetApi->FactsetEtfGetBySymbolGet");

            FactSet.SDK.ETFProfileandPrices.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.ETFProfileandPrices.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.ParameterToMultiMap("", "symbol", symbol));
            if (attributes != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.ParameterToMultiMap("csv", "_attributes", attributes));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<InlineResponse200>("/factset/etf/getBySymbol", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("FactsetEtfGetBySymbolGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve basic profile information for a specified ETP. An ETP can be profiled by defining several common attributes such as issuer, fund description, and benchmark.
        /// </summary>
        /// <exception cref="FactSet.SDK.ETFProfileandPrices.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">Market symbol of ETP defined by FactSet.</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse200</returns>
        public async System.Threading.Tasks.Task<InlineResponse200> FactsetEtfGetBySymbolGetAsync(string symbol, List<string> attributes = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            FactSet.SDK.ETFProfileandPrices.Client.ApiResponse<InlineResponse200> localVarResponse = await FactsetEtfGetBySymbolGetWithHttpInfoAsync(symbol, attributes, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve basic profile information for a specified ETP. An ETP can be profiled by defining several common attributes such as issuer, fund description, and benchmark.
        /// </summary>
        /// <exception cref="FactSet.SDK.ETFProfileandPrices.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">Market symbol of ETP defined by FactSet.</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse200)</returns>
        public async System.Threading.Tasks.Task<FactSet.SDK.ETFProfileandPrices.Client.ApiResponse<InlineResponse200>> FactsetEtfGetBySymbolGetWithHttpInfoAsync(string symbol, List<string> attributes = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'symbol' is set
            if (symbol == null)
                throw new FactSet.SDK.ETFProfileandPrices.Client.ApiException(400, "Missing required parameter 'symbol' when calling FactsetApi->FactsetEtfGetBySymbolGet");


            FactSet.SDK.ETFProfileandPrices.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.ETFProfileandPrices.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.ParameterToMultiMap("", "symbol", symbol));
            if (attributes != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.ParameterToMultiMap("csv", "_attributes", attributes));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<InlineResponse200>("/factset/etf/getBySymbol", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("FactsetEtfGetBySymbolGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// This endpoint returns selected ETP&#39;s Growth of 10K calculated values. Growth of 10K (or growth of 10,000) is a commonly used chart that highlights the change in the value of an initial 10,000 investment in the ETP during a given period of time. Often, this period of time is either since inception or the calculation between the pre-defined range.
        /// </summary>
        /// <exception cref="FactSet.SDK.ETFProfileandPrices.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">Market symbol of ETP defined by FactSet.</param>
        /// <param name="timePeriod">Historice NAV date value. (optional)</param>
        /// <param name="calculationType">Historice NAV date value. (optional)</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="paginationOffset">Non-negative number of entries to skip, or 0 (default). (optional, default to 0.0M)</param>
        /// <param name="paginationLimit">Non-negative maximum number of entries to return. (optional, default to 20.0M)</param>
        /// <returns>InlineResponse20014</returns>
        public InlineResponse20014 FactsetEtfGrowthOfTenKListBySymbolGet(string symbol, string timePeriod = default(string), string calculationType = default(string), List<string> attributes = default(List<string>), decimal? paginationOffset = default(decimal?), decimal? paginationLimit = default(decimal?))
        {
            FactSet.SDK.ETFProfileandPrices.Client.ApiResponse<InlineResponse20014> localVarResponse = FactsetEtfGrowthOfTenKListBySymbolGetWithHttpInfo(symbol, timePeriod, calculationType, attributes, paginationOffset, paginationLimit);
            return localVarResponse.Data;
        }

        /// <summary>
        /// This endpoint returns selected ETP&#39;s Growth of 10K calculated values. Growth of 10K (or growth of 10,000) is a commonly used chart that highlights the change in the value of an initial 10,000 investment in the ETP during a given period of time. Often, this period of time is either since inception or the calculation between the pre-defined range.
        /// </summary>
        /// <exception cref="FactSet.SDK.ETFProfileandPrices.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">Market symbol of ETP defined by FactSet.</param>
        /// <param name="timePeriod">Historice NAV date value. (optional)</param>
        /// <param name="calculationType">Historice NAV date value. (optional)</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="paginationOffset">Non-negative number of entries to skip, or 0 (default). (optional, default to 0.0M)</param>
        /// <param name="paginationLimit">Non-negative maximum number of entries to return. (optional, default to 20.0M)</param>
        /// <returns>ApiResponse of InlineResponse20014</returns>
        public FactSet.SDK.ETFProfileandPrices.Client.ApiResponse<InlineResponse20014> FactsetEtfGrowthOfTenKListBySymbolGetWithHttpInfo(string symbol, string timePeriod = default(string), string calculationType = default(string), List<string> attributes = default(List<string>), decimal? paginationOffset = default(decimal?), decimal? paginationLimit = default(decimal?))
        {
            // verify the required parameter 'symbol' is set
            if (symbol == null)
                throw new FactSet.SDK.ETFProfileandPrices.Client.ApiException(400, "Missing required parameter 'symbol' when calling FactsetApi->FactsetEtfGrowthOfTenKListBySymbolGet");

            FactSet.SDK.ETFProfileandPrices.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.ETFProfileandPrices.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.ParameterToMultiMap("", "symbol", symbol));
            if (timePeriod != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.ParameterToMultiMap("", "timePeriod", timePeriod));
            }
            if (calculationType != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.ParameterToMultiMap("", "calculationType", calculationType));
            }
            if (attributes != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.ParameterToMultiMap("csv", "_attributes", attributes));
            }
            if (paginationOffset != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.ParameterToMultiMap("", "_paginationOffset", paginationOffset));
            }
            if (paginationLimit != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.ParameterToMultiMap("", "_paginationLimit", paginationLimit));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<InlineResponse20014>("/factset/etf/growthOfTenK/listBySymbol", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("FactsetEtfGrowthOfTenKListBySymbolGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// This endpoint returns selected ETP&#39;s Growth of 10K calculated values. Growth of 10K (or growth of 10,000) is a commonly used chart that highlights the change in the value of an initial 10,000 investment in the ETP during a given period of time. Often, this period of time is either since inception or the calculation between the pre-defined range.
        /// </summary>
        /// <exception cref="FactSet.SDK.ETFProfileandPrices.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">Market symbol of ETP defined by FactSet.</param>
        /// <param name="timePeriod">Historice NAV date value. (optional)</param>
        /// <param name="calculationType">Historice NAV date value. (optional)</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="paginationOffset">Non-negative number of entries to skip, or 0 (default). (optional, default to 0.0M)</param>
        /// <param name="paginationLimit">Non-negative maximum number of entries to return. (optional, default to 20.0M)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse20014</returns>
        public async System.Threading.Tasks.Task<InlineResponse20014> FactsetEtfGrowthOfTenKListBySymbolGetAsync(string symbol, string timePeriod = default(string), string calculationType = default(string), List<string> attributes = default(List<string>), decimal? paginationOffset = default(decimal?), decimal? paginationLimit = default(decimal?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            FactSet.SDK.ETFProfileandPrices.Client.ApiResponse<InlineResponse20014> localVarResponse = await FactsetEtfGrowthOfTenKListBySymbolGetWithHttpInfoAsync(symbol, timePeriod, calculationType, attributes, paginationOffset, paginationLimit, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// This endpoint returns selected ETP&#39;s Growth of 10K calculated values. Growth of 10K (or growth of 10,000) is a commonly used chart that highlights the change in the value of an initial 10,000 investment in the ETP during a given period of time. Often, this period of time is either since inception or the calculation between the pre-defined range.
        /// </summary>
        /// <exception cref="FactSet.SDK.ETFProfileandPrices.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">Market symbol of ETP defined by FactSet.</param>
        /// <param name="timePeriod">Historice NAV date value. (optional)</param>
        /// <param name="calculationType">Historice NAV date value. (optional)</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="paginationOffset">Non-negative number of entries to skip, or 0 (default). (optional, default to 0.0M)</param>
        /// <param name="paginationLimit">Non-negative maximum number of entries to return. (optional, default to 20.0M)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse20014)</returns>
        public async System.Threading.Tasks.Task<FactSet.SDK.ETFProfileandPrices.Client.ApiResponse<InlineResponse20014>> FactsetEtfGrowthOfTenKListBySymbolGetWithHttpInfoAsync(string symbol, string timePeriod = default(string), string calculationType = default(string), List<string> attributes = default(List<string>), decimal? paginationOffset = default(decimal?), decimal? paginationLimit = default(decimal?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'symbol' is set
            if (symbol == null)
                throw new FactSet.SDK.ETFProfileandPrices.Client.ApiException(400, "Missing required parameter 'symbol' when calling FactsetApi->FactsetEtfGrowthOfTenKListBySymbolGet");


            FactSet.SDK.ETFProfileandPrices.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.ETFProfileandPrices.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.ParameterToMultiMap("", "symbol", symbol));
            if (timePeriod != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.ParameterToMultiMap("", "timePeriod", timePeriod));
            }
            if (calculationType != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.ParameterToMultiMap("", "calculationType", calculationType));
            }
            if (attributes != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.ParameterToMultiMap("csv", "_attributes", attributes));
            }
            if (paginationOffset != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.ParameterToMultiMap("", "_paginationOffset", paginationOffset));
            }
            if (paginationLimit != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.ParameterToMultiMap("", "_paginationLimit", paginationLimit));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<InlineResponse20014>("/factset/etf/growthOfTenK/listBySymbol", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("FactsetEtfGrowthOfTenKListBySymbolGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Holdings details for an individual ETP. Retrieve an ETP&#39;s holdings information including security, shares held, and weight.
        /// </summary>
        /// <exception cref="FactSet.SDK.ETFProfileandPrices.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">Market symbol of ETP defined by FactSet.</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="paginationOffset">Non-negative number of entries to skip, or 0 (default). (optional, default to 0.0M)</param>
        /// <param name="paginationLimit">Non-negative maximum number of entries to return. (optional, default to 20.0M)</param>
        /// <returns>InlineResponse20015</returns>
        public InlineResponse20015 FactsetEtfHoldingsListBySymbolGet(string symbol, List<string> attributes = default(List<string>), decimal? paginationOffset = default(decimal?), decimal? paginationLimit = default(decimal?))
        {
            FactSet.SDK.ETFProfileandPrices.Client.ApiResponse<InlineResponse20015> localVarResponse = FactsetEtfHoldingsListBySymbolGetWithHttpInfo(symbol, attributes, paginationOffset, paginationLimit);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Holdings details for an individual ETP. Retrieve an ETP&#39;s holdings information including security, shares held, and weight.
        /// </summary>
        /// <exception cref="FactSet.SDK.ETFProfileandPrices.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">Market symbol of ETP defined by FactSet.</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="paginationOffset">Non-negative number of entries to skip, or 0 (default). (optional, default to 0.0M)</param>
        /// <param name="paginationLimit">Non-negative maximum number of entries to return. (optional, default to 20.0M)</param>
        /// <returns>ApiResponse of InlineResponse20015</returns>
        public FactSet.SDK.ETFProfileandPrices.Client.ApiResponse<InlineResponse20015> FactsetEtfHoldingsListBySymbolGetWithHttpInfo(string symbol, List<string> attributes = default(List<string>), decimal? paginationOffset = default(decimal?), decimal? paginationLimit = default(decimal?))
        {
            // verify the required parameter 'symbol' is set
            if (symbol == null)
                throw new FactSet.SDK.ETFProfileandPrices.Client.ApiException(400, "Missing required parameter 'symbol' when calling FactsetApi->FactsetEtfHoldingsListBySymbolGet");

            FactSet.SDK.ETFProfileandPrices.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.ETFProfileandPrices.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.ParameterToMultiMap("", "symbol", symbol));
            if (attributes != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.ParameterToMultiMap("csv", "_attributes", attributes));
            }
            if (paginationOffset != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.ParameterToMultiMap("", "_paginationOffset", paginationOffset));
            }
            if (paginationLimit != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.ParameterToMultiMap("", "_paginationLimit", paginationLimit));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<InlineResponse20015>("/factset/etf/holdings/listBySymbol", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("FactsetEtfHoldingsListBySymbolGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Holdings details for an individual ETP. Retrieve an ETP&#39;s holdings information including security, shares held, and weight.
        /// </summary>
        /// <exception cref="FactSet.SDK.ETFProfileandPrices.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">Market symbol of ETP defined by FactSet.</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="paginationOffset">Non-negative number of entries to skip, or 0 (default). (optional, default to 0.0M)</param>
        /// <param name="paginationLimit">Non-negative maximum number of entries to return. (optional, default to 20.0M)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse20015</returns>
        public async System.Threading.Tasks.Task<InlineResponse20015> FactsetEtfHoldingsListBySymbolGetAsync(string symbol, List<string> attributes = default(List<string>), decimal? paginationOffset = default(decimal?), decimal? paginationLimit = default(decimal?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            FactSet.SDK.ETFProfileandPrices.Client.ApiResponse<InlineResponse20015> localVarResponse = await FactsetEtfHoldingsListBySymbolGetWithHttpInfoAsync(symbol, attributes, paginationOffset, paginationLimit, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Holdings details for an individual ETP. Retrieve an ETP&#39;s holdings information including security, shares held, and weight.
        /// </summary>
        /// <exception cref="FactSet.SDK.ETFProfileandPrices.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">Market symbol of ETP defined by FactSet.</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="paginationOffset">Non-negative number of entries to skip, or 0 (default). (optional, default to 0.0M)</param>
        /// <param name="paginationLimit">Non-negative maximum number of entries to return. (optional, default to 20.0M)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse20015)</returns>
        public async System.Threading.Tasks.Task<FactSet.SDK.ETFProfileandPrices.Client.ApiResponse<InlineResponse20015>> FactsetEtfHoldingsListBySymbolGetWithHttpInfoAsync(string symbol, List<string> attributes = default(List<string>), decimal? paginationOffset = default(decimal?), decimal? paginationLimit = default(decimal?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'symbol' is set
            if (symbol == null)
                throw new FactSet.SDK.ETFProfileandPrices.Client.ApiException(400, "Missing required parameter 'symbol' when calling FactsetApi->FactsetEtfHoldingsListBySymbolGet");


            FactSet.SDK.ETFProfileandPrices.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.ETFProfileandPrices.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.ParameterToMultiMap("", "symbol", symbol));
            if (attributes != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.ParameterToMultiMap("csv", "_attributes", attributes));
            }
            if (paginationOffset != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.ParameterToMultiMap("", "_paginationOffset", paginationOffset));
            }
            if (paginationLimit != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.ParameterToMultiMap("", "_paginationLimit", paginationLimit));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<InlineResponse20015>("/factset/etf/holdings/listBySymbol", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("FactsetEtfHoldingsListBySymbolGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve historical ETP NAV values. Retrieve an ETP&#39;s historical NAV and shares outstanding for a specified time range.
        /// </summary>
        /// <exception cref="FactSet.SDK.ETFProfileandPrices.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">Market symbol of ETP defined by FactSet.</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <returns>InlineResponse20016</returns>
        public InlineResponse20016 FactsetEtfPriceGetBySymbolGet(string symbol, List<string> attributes = default(List<string>))
        {
            FactSet.SDK.ETFProfileandPrices.Client.ApiResponse<InlineResponse20016> localVarResponse = FactsetEtfPriceGetBySymbolGetWithHttpInfo(symbol, attributes);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve historical ETP NAV values. Retrieve an ETP&#39;s historical NAV and shares outstanding for a specified time range.
        /// </summary>
        /// <exception cref="FactSet.SDK.ETFProfileandPrices.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">Market symbol of ETP defined by FactSet.</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <returns>ApiResponse of InlineResponse20016</returns>
        public FactSet.SDK.ETFProfileandPrices.Client.ApiResponse<InlineResponse20016> FactsetEtfPriceGetBySymbolGetWithHttpInfo(string symbol, List<string> attributes = default(List<string>))
        {
            // verify the required parameter 'symbol' is set
            if (symbol == null)
                throw new FactSet.SDK.ETFProfileandPrices.Client.ApiException(400, "Missing required parameter 'symbol' when calling FactsetApi->FactsetEtfPriceGetBySymbolGet");

            FactSet.SDK.ETFProfileandPrices.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.ETFProfileandPrices.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.ParameterToMultiMap("", "symbol", symbol));
            if (attributes != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.ParameterToMultiMap("csv", "_attributes", attributes));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<InlineResponse20016>("/factset/etf/price/getBySymbol", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("FactsetEtfPriceGetBySymbolGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve historical ETP NAV values. Retrieve an ETP&#39;s historical NAV and shares outstanding for a specified time range.
        /// </summary>
        /// <exception cref="FactSet.SDK.ETFProfileandPrices.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">Market symbol of ETP defined by FactSet.</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse20016</returns>
        public async System.Threading.Tasks.Task<InlineResponse20016> FactsetEtfPriceGetBySymbolGetAsync(string symbol, List<string> attributes = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            FactSet.SDK.ETFProfileandPrices.Client.ApiResponse<InlineResponse20016> localVarResponse = await FactsetEtfPriceGetBySymbolGetWithHttpInfoAsync(symbol, attributes, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve historical ETP NAV values. Retrieve an ETP&#39;s historical NAV and shares outstanding for a specified time range.
        /// </summary>
        /// <exception cref="FactSet.SDK.ETFProfileandPrices.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">Market symbol of ETP defined by FactSet.</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse20016)</returns>
        public async System.Threading.Tasks.Task<FactSet.SDK.ETFProfileandPrices.Client.ApiResponse<InlineResponse20016>> FactsetEtfPriceGetBySymbolGetWithHttpInfoAsync(string symbol, List<string> attributes = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'symbol' is set
            if (symbol == null)
                throw new FactSet.SDK.ETFProfileandPrices.Client.ApiException(400, "Missing required parameter 'symbol' when calling FactsetApi->FactsetEtfPriceGetBySymbolGet");


            FactSet.SDK.ETFProfileandPrices.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.ETFProfileandPrices.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.ParameterToMultiMap("", "symbol", symbol));
            if (attributes != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.ParameterToMultiMap("csv", "_attributes", attributes));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<InlineResponse20016>("/factset/etf/price/getBySymbol", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("FactsetEtfPriceGetBySymbolGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve total return data for a specified ETP. An ETP&#39;s total return data can be returned for various time frames including 1-month, 3-month, YTD, 1-year, 3-year, and 5-year. Total return market price is used to calcualte price returns. Total return nav is used to calcualte nav returns.
        /// </summary>
        /// <exception cref="FactSet.SDK.ETFProfileandPrices.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">Market symbol of ETP defined by FactSet.</param>
        /// <param name="returnType">Return type. (optional, default to price)</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <returns>InlineResponse20017</returns>
        public InlineResponse20017 FactsetEtfReturnsGetBySymbolGet(string symbol, string returnType = default(string), List<string> attributes = default(List<string>))
        {
            FactSet.SDK.ETFProfileandPrices.Client.ApiResponse<InlineResponse20017> localVarResponse = FactsetEtfReturnsGetBySymbolGetWithHttpInfo(symbol, returnType, attributes);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve total return data for a specified ETP. An ETP&#39;s total return data can be returned for various time frames including 1-month, 3-month, YTD, 1-year, 3-year, and 5-year. Total return market price is used to calcualte price returns. Total return nav is used to calcualte nav returns.
        /// </summary>
        /// <exception cref="FactSet.SDK.ETFProfileandPrices.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">Market symbol of ETP defined by FactSet.</param>
        /// <param name="returnType">Return type. (optional, default to price)</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <returns>ApiResponse of InlineResponse20017</returns>
        public FactSet.SDK.ETFProfileandPrices.Client.ApiResponse<InlineResponse20017> FactsetEtfReturnsGetBySymbolGetWithHttpInfo(string symbol, string returnType = default(string), List<string> attributes = default(List<string>))
        {
            // verify the required parameter 'symbol' is set
            if (symbol == null)
                throw new FactSet.SDK.ETFProfileandPrices.Client.ApiException(400, "Missing required parameter 'symbol' when calling FactsetApi->FactsetEtfReturnsGetBySymbolGet");

            FactSet.SDK.ETFProfileandPrices.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.ETFProfileandPrices.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.ParameterToMultiMap("", "symbol", symbol));
            if (returnType != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.ParameterToMultiMap("", "returnType", returnType));
            }
            if (attributes != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.ParameterToMultiMap("csv", "_attributes", attributes));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<InlineResponse20017>("/factset/etf/returns/getBySymbol", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("FactsetEtfReturnsGetBySymbolGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve total return data for a specified ETP. An ETP&#39;s total return data can be returned for various time frames including 1-month, 3-month, YTD, 1-year, 3-year, and 5-year. Total return market price is used to calcualte price returns. Total return nav is used to calcualte nav returns.
        /// </summary>
        /// <exception cref="FactSet.SDK.ETFProfileandPrices.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">Market symbol of ETP defined by FactSet.</param>
        /// <param name="returnType">Return type. (optional, default to price)</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse20017</returns>
        public async System.Threading.Tasks.Task<InlineResponse20017> FactsetEtfReturnsGetBySymbolGetAsync(string symbol, string returnType = default(string), List<string> attributes = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            FactSet.SDK.ETFProfileandPrices.Client.ApiResponse<InlineResponse20017> localVarResponse = await FactsetEtfReturnsGetBySymbolGetWithHttpInfoAsync(symbol, returnType, attributes, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve total return data for a specified ETP. An ETP&#39;s total return data can be returned for various time frames including 1-month, 3-month, YTD, 1-year, 3-year, and 5-year. Total return market price is used to calcualte price returns. Total return nav is used to calcualte nav returns.
        /// </summary>
        /// <exception cref="FactSet.SDK.ETFProfileandPrices.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">Market symbol of ETP defined by FactSet.</param>
        /// <param name="returnType">Return type. (optional, default to price)</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse20017)</returns>
        public async System.Threading.Tasks.Task<FactSet.SDK.ETFProfileandPrices.Client.ApiResponse<InlineResponse20017>> FactsetEtfReturnsGetBySymbolGetWithHttpInfoAsync(string symbol, string returnType = default(string), List<string> attributes = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'symbol' is set
            if (symbol == null)
                throw new FactSet.SDK.ETFProfileandPrices.Client.ApiException(400, "Missing required parameter 'symbol' when calling FactsetApi->FactsetEtfReturnsGetBySymbolGet");


            FactSet.SDK.ETFProfileandPrices.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.ETFProfileandPrices.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.ParameterToMultiMap("", "symbol", symbol));
            if (returnType != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.ParameterToMultiMap("", "returnType", returnType));
            }
            if (attributes != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.ParameterToMultiMap("csv", "_attributes", attributes));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<InlineResponse20017>("/factset/etf/returns/getBySymbol", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("FactsetEtfReturnsGetBySymbolGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve various classification details for a specified ETP. ETP&#39;s can be classified in many different ways including investment strategy, security weightings, and fund composition.
        /// </summary>
        /// <exception cref="FactSet.SDK.ETFProfileandPrices.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">Market symbol of ETP defined by FactSet.</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <returns>InlineResponse20018</returns>
        public InlineResponse20018 FactsetEtfStrategyGetBySymbolGet(string symbol, List<string> attributes = default(List<string>))
        {
            FactSet.SDK.ETFProfileandPrices.Client.ApiResponse<InlineResponse20018> localVarResponse = FactsetEtfStrategyGetBySymbolGetWithHttpInfo(symbol, attributes);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve various classification details for a specified ETP. ETP&#39;s can be classified in many different ways including investment strategy, security weightings, and fund composition.
        /// </summary>
        /// <exception cref="FactSet.SDK.ETFProfileandPrices.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">Market symbol of ETP defined by FactSet.</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <returns>ApiResponse of InlineResponse20018</returns>
        public FactSet.SDK.ETFProfileandPrices.Client.ApiResponse<InlineResponse20018> FactsetEtfStrategyGetBySymbolGetWithHttpInfo(string symbol, List<string> attributes = default(List<string>))
        {
            // verify the required parameter 'symbol' is set
            if (symbol == null)
                throw new FactSet.SDK.ETFProfileandPrices.Client.ApiException(400, "Missing required parameter 'symbol' when calling FactsetApi->FactsetEtfStrategyGetBySymbolGet");

            FactSet.SDK.ETFProfileandPrices.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.ETFProfileandPrices.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.ParameterToMultiMap("", "symbol", symbol));
            if (attributes != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.ParameterToMultiMap("csv", "_attributes", attributes));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<InlineResponse20018>("/factset/etf/strategy/getBySymbol", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("FactsetEtfStrategyGetBySymbolGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve various classification details for a specified ETP. ETP&#39;s can be classified in many different ways including investment strategy, security weightings, and fund composition.
        /// </summary>
        /// <exception cref="FactSet.SDK.ETFProfileandPrices.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">Market symbol of ETP defined by FactSet.</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse20018</returns>
        public async System.Threading.Tasks.Task<InlineResponse20018> FactsetEtfStrategyGetBySymbolGetAsync(string symbol, List<string> attributes = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            FactSet.SDK.ETFProfileandPrices.Client.ApiResponse<InlineResponse20018> localVarResponse = await FactsetEtfStrategyGetBySymbolGetWithHttpInfoAsync(symbol, attributes, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve various classification details for a specified ETP. ETP&#39;s can be classified in many different ways including investment strategy, security weightings, and fund composition.
        /// </summary>
        /// <exception cref="FactSet.SDK.ETFProfileandPrices.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">Market symbol of ETP defined by FactSet.</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse20018)</returns>
        public async System.Threading.Tasks.Task<FactSet.SDK.ETFProfileandPrices.Client.ApiResponse<InlineResponse20018>> FactsetEtfStrategyGetBySymbolGetWithHttpInfoAsync(string symbol, List<string> attributes = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'symbol' is set
            if (symbol == null)
                throw new FactSet.SDK.ETFProfileandPrices.Client.ApiException(400, "Missing required parameter 'symbol' when calling FactsetApi->FactsetEtfStrategyGetBySymbolGet");


            FactSet.SDK.ETFProfileandPrices.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.ETFProfileandPrices.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.ParameterToMultiMap("", "symbol", symbol));
            if (attributes != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.ParameterToMultiMap("csv", "_attributes", attributes));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<InlineResponse20018>("/factset/etf/strategy/getBySymbol", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("FactsetEtfStrategyGetBySymbolGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve a list of ETP strategy segments. Retrieve the various segments assigned to a specific ETP. Segment data is used to group funds for comparison and relative performance analyses.
        /// </summary>
        /// <exception cref="FactSet.SDK.ETFProfileandPrices.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="paginationOffset">Non-negative number of entries to skip, or 0 (default). (optional, default to 0.0M)</param>
        /// <param name="paginationLimit">Non-negative maximum number of entries to return. (optional, default to 20.0M)</param>
        /// <returns>InlineResponse20019</returns>
        public InlineResponse20019 FactsetEtfStrategySegmentListGet(List<string> attributes = default(List<string>), decimal? paginationOffset = default(decimal?), decimal? paginationLimit = default(decimal?))
        {
            FactSet.SDK.ETFProfileandPrices.Client.ApiResponse<InlineResponse20019> localVarResponse = FactsetEtfStrategySegmentListGetWithHttpInfo(attributes, paginationOffset, paginationLimit);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve a list of ETP strategy segments. Retrieve the various segments assigned to a specific ETP. Segment data is used to group funds for comparison and relative performance analyses.
        /// </summary>
        /// <exception cref="FactSet.SDK.ETFProfileandPrices.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="paginationOffset">Non-negative number of entries to skip, or 0 (default). (optional, default to 0.0M)</param>
        /// <param name="paginationLimit">Non-negative maximum number of entries to return. (optional, default to 20.0M)</param>
        /// <returns>ApiResponse of InlineResponse20019</returns>
        public FactSet.SDK.ETFProfileandPrices.Client.ApiResponse<InlineResponse20019> FactsetEtfStrategySegmentListGetWithHttpInfo(List<string> attributes = default(List<string>), decimal? paginationOffset = default(decimal?), decimal? paginationLimit = default(decimal?))
        {
            FactSet.SDK.ETFProfileandPrices.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.ETFProfileandPrices.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (attributes != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.ParameterToMultiMap("csv", "_attributes", attributes));
            }
            if (paginationOffset != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.ParameterToMultiMap("", "_paginationOffset", paginationOffset));
            }
            if (paginationLimit != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.ParameterToMultiMap("", "_paginationLimit", paginationLimit));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<InlineResponse20019>("/factset/etf/strategy/segment/list", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("FactsetEtfStrategySegmentListGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve a list of ETP strategy segments. Retrieve the various segments assigned to a specific ETP. Segment data is used to group funds for comparison and relative performance analyses.
        /// </summary>
        /// <exception cref="FactSet.SDK.ETFProfileandPrices.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="paginationOffset">Non-negative number of entries to skip, or 0 (default). (optional, default to 0.0M)</param>
        /// <param name="paginationLimit">Non-negative maximum number of entries to return. (optional, default to 20.0M)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse20019</returns>
        public async System.Threading.Tasks.Task<InlineResponse20019> FactsetEtfStrategySegmentListGetAsync(List<string> attributes = default(List<string>), decimal? paginationOffset = default(decimal?), decimal? paginationLimit = default(decimal?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            FactSet.SDK.ETFProfileandPrices.Client.ApiResponse<InlineResponse20019> localVarResponse = await FactsetEtfStrategySegmentListGetWithHttpInfoAsync(attributes, paginationOffset, paginationLimit, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve a list of ETP strategy segments. Retrieve the various segments assigned to a specific ETP. Segment data is used to group funds for comparison and relative performance analyses.
        /// </summary>
        /// <exception cref="FactSet.SDK.ETFProfileandPrices.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="paginationOffset">Non-negative number of entries to skip, or 0 (default). (optional, default to 0.0M)</param>
        /// <param name="paginationLimit">Non-negative maximum number of entries to return. (optional, default to 20.0M)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse20019)</returns>
        public async System.Threading.Tasks.Task<FactSet.SDK.ETFProfileandPrices.Client.ApiResponse<InlineResponse20019>> FactsetEtfStrategySegmentListGetWithHttpInfoAsync(List<string> attributes = default(List<string>), decimal? paginationOffset = default(decimal?), decimal? paginationLimit = default(decimal?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            FactSet.SDK.ETFProfileandPrices.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.ETFProfileandPrices.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (attributes != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.ParameterToMultiMap("csv", "_attributes", attributes));
            }
            if (paginationOffset != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.ParameterToMultiMap("", "_paginationOffset", paginationOffset));
            }
            if (paginationLimit != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.ParameterToMultiMap("", "_paginationLimit", paginationLimit));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<InlineResponse20019>("/factset/etf/strategy/segment/list", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("FactsetEtfStrategySegmentListGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve the basic structure information for a specified ETP. Retrieve details on a fund&#39;s structure including its type, investment style (active/passive), and legal structure.
        /// </summary>
        /// <exception cref="FactSet.SDK.ETFProfileandPrices.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">Market symbol of ETP defined by FactSet.</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <returns>InlineResponse20020</returns>
        public InlineResponse20020 FactsetEtfStructureGetBySymbolGet(string symbol, List<string> attributes = default(List<string>))
        {
            FactSet.SDK.ETFProfileandPrices.Client.ApiResponse<InlineResponse20020> localVarResponse = FactsetEtfStructureGetBySymbolGetWithHttpInfo(symbol, attributes);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve the basic structure information for a specified ETP. Retrieve details on a fund&#39;s structure including its type, investment style (active/passive), and legal structure.
        /// </summary>
        /// <exception cref="FactSet.SDK.ETFProfileandPrices.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">Market symbol of ETP defined by FactSet.</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <returns>ApiResponse of InlineResponse20020</returns>
        public FactSet.SDK.ETFProfileandPrices.Client.ApiResponse<InlineResponse20020> FactsetEtfStructureGetBySymbolGetWithHttpInfo(string symbol, List<string> attributes = default(List<string>))
        {
            // verify the required parameter 'symbol' is set
            if (symbol == null)
                throw new FactSet.SDK.ETFProfileandPrices.Client.ApiException(400, "Missing required parameter 'symbol' when calling FactsetApi->FactsetEtfStructureGetBySymbolGet");

            FactSet.SDK.ETFProfileandPrices.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.ETFProfileandPrices.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.ParameterToMultiMap("", "symbol", symbol));
            if (attributes != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.ParameterToMultiMap("csv", "_attributes", attributes));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<InlineResponse20020>("/factset/etf/structure/getBySymbol", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("FactsetEtfStructureGetBySymbolGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve the basic structure information for a specified ETP. Retrieve details on a fund&#39;s structure including its type, investment style (active/passive), and legal structure.
        /// </summary>
        /// <exception cref="FactSet.SDK.ETFProfileandPrices.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">Market symbol of ETP defined by FactSet.</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse20020</returns>
        public async System.Threading.Tasks.Task<InlineResponse20020> FactsetEtfStructureGetBySymbolGetAsync(string symbol, List<string> attributes = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            FactSet.SDK.ETFProfileandPrices.Client.ApiResponse<InlineResponse20020> localVarResponse = await FactsetEtfStructureGetBySymbolGetWithHttpInfoAsync(symbol, attributes, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve the basic structure information for a specified ETP. Retrieve details on a fund&#39;s structure including its type, investment style (active/passive), and legal structure.
        /// </summary>
        /// <exception cref="FactSet.SDK.ETFProfileandPrices.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">Market symbol of ETP defined by FactSet.</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse20020)</returns>
        public async System.Threading.Tasks.Task<FactSet.SDK.ETFProfileandPrices.Client.ApiResponse<InlineResponse20020>> FactsetEtfStructureGetBySymbolGetWithHttpInfoAsync(string symbol, List<string> attributes = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'symbol' is set
            if (symbol == null)
                throw new FactSet.SDK.ETFProfileandPrices.Client.ApiException(400, "Missing required parameter 'symbol' when calling FactsetApi->FactsetEtfStructureGetBySymbolGet");


            FactSet.SDK.ETFProfileandPrices.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.ETFProfileandPrices.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.ParameterToMultiMap("", "symbol", symbol));
            if (attributes != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.ParameterToMultiMap("csv", "_attributes", attributes));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<InlineResponse20020>("/factset/etf/structure/getBySymbol", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("FactsetEtfStructureGetBySymbolGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve the tax and fee related information for a specified ETP. Retrieve various fee and tax related details on a specified ETP including expense ratio and tax treatment for dividends and capital gains.
        /// </summary>
        /// <exception cref="FactSet.SDK.ETFProfileandPrices.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">Market symbol of ETP defined by FactSet.</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <returns>InlineResponse20021</returns>
        public InlineResponse20021 FactsetEtfTaxesAndFeesUsGetBySymbolGet(string symbol, List<string> attributes = default(List<string>))
        {
            FactSet.SDK.ETFProfileandPrices.Client.ApiResponse<InlineResponse20021> localVarResponse = FactsetEtfTaxesAndFeesUsGetBySymbolGetWithHttpInfo(symbol, attributes);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve the tax and fee related information for a specified ETP. Retrieve various fee and tax related details on a specified ETP including expense ratio and tax treatment for dividends and capital gains.
        /// </summary>
        /// <exception cref="FactSet.SDK.ETFProfileandPrices.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">Market symbol of ETP defined by FactSet.</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <returns>ApiResponse of InlineResponse20021</returns>
        public FactSet.SDK.ETFProfileandPrices.Client.ApiResponse<InlineResponse20021> FactsetEtfTaxesAndFeesUsGetBySymbolGetWithHttpInfo(string symbol, List<string> attributes = default(List<string>))
        {
            // verify the required parameter 'symbol' is set
            if (symbol == null)
                throw new FactSet.SDK.ETFProfileandPrices.Client.ApiException(400, "Missing required parameter 'symbol' when calling FactsetApi->FactsetEtfTaxesAndFeesUsGetBySymbolGet");

            FactSet.SDK.ETFProfileandPrices.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.ETFProfileandPrices.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.ParameterToMultiMap("", "symbol", symbol));
            if (attributes != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.ParameterToMultiMap("csv", "_attributes", attributes));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<InlineResponse20021>("/factset/etf/taxesAndFees/us/getBySymbol", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("FactsetEtfTaxesAndFeesUsGetBySymbolGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve the tax and fee related information for a specified ETP. Retrieve various fee and tax related details on a specified ETP including expense ratio and tax treatment for dividends and capital gains.
        /// </summary>
        /// <exception cref="FactSet.SDK.ETFProfileandPrices.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">Market symbol of ETP defined by FactSet.</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse20021</returns>
        public async System.Threading.Tasks.Task<InlineResponse20021> FactsetEtfTaxesAndFeesUsGetBySymbolGetAsync(string symbol, List<string> attributes = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            FactSet.SDK.ETFProfileandPrices.Client.ApiResponse<InlineResponse20021> localVarResponse = await FactsetEtfTaxesAndFeesUsGetBySymbolGetWithHttpInfoAsync(symbol, attributes, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve the tax and fee related information for a specified ETP. Retrieve various fee and tax related details on a specified ETP including expense ratio and tax treatment for dividends and capital gains.
        /// </summary>
        /// <exception cref="FactSet.SDK.ETFProfileandPrices.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">Market symbol of ETP defined by FactSet.</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse20021)</returns>
        public async System.Threading.Tasks.Task<FactSet.SDK.ETFProfileandPrices.Client.ApiResponse<InlineResponse20021>> FactsetEtfTaxesAndFeesUsGetBySymbolGetWithHttpInfoAsync(string symbol, List<string> attributes = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'symbol' is set
            if (symbol == null)
                throw new FactSet.SDK.ETFProfileandPrices.Client.ApiException(400, "Missing required parameter 'symbol' when calling FactsetApi->FactsetEtfTaxesAndFeesUsGetBySymbolGet");


            FactSet.SDK.ETFProfileandPrices.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.ETFProfileandPrices.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.ParameterToMultiMap("", "symbol", symbol));
            if (attributes != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.ParameterToMultiMap("csv", "_attributes", attributes));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<InlineResponse20021>("/factset/etf/taxesAndFees/us/getBySymbol", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("FactsetEtfTaxesAndFeesUsGetBySymbolGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve historical NAV data for a specified ETP. Retrieve the historical NAV data and the respective fund flows and shares outstanding for a specified fund and time period. Please refer currency.fund in /factset/etf/getBySymbol for currency value.
        /// </summary>
        /// <exception cref="FactSet.SDK.ETFProfileandPrices.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">Market symbol of ETP defined by FactSet.</param>
        /// <param name="timePeriod">Time frame of the data. (optional, default to 1Y)</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="paginationOffset">Non-negative number of entries to skip, or 0 (default). (optional, default to 0.0M)</param>
        /// <param name="paginationLimit">Non-negative maximum number of entries to return. (optional, default to 20.0M)</param>
        /// <returns>InlineResponse20022</returns>
        public InlineResponse20022 FactsetEtfTimeSeriesListBySymbolGet(string symbol, string timePeriod = default(string), List<string> attributes = default(List<string>), decimal? paginationOffset = default(decimal?), decimal? paginationLimit = default(decimal?))
        {
            FactSet.SDK.ETFProfileandPrices.Client.ApiResponse<InlineResponse20022> localVarResponse = FactsetEtfTimeSeriesListBySymbolGetWithHttpInfo(symbol, timePeriod, attributes, paginationOffset, paginationLimit);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve historical NAV data for a specified ETP. Retrieve the historical NAV data and the respective fund flows and shares outstanding for a specified fund and time period. Please refer currency.fund in /factset/etf/getBySymbol for currency value.
        /// </summary>
        /// <exception cref="FactSet.SDK.ETFProfileandPrices.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">Market symbol of ETP defined by FactSet.</param>
        /// <param name="timePeriod">Time frame of the data. (optional, default to 1Y)</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="paginationOffset">Non-negative number of entries to skip, or 0 (default). (optional, default to 0.0M)</param>
        /// <param name="paginationLimit">Non-negative maximum number of entries to return. (optional, default to 20.0M)</param>
        /// <returns>ApiResponse of InlineResponse20022</returns>
        public FactSet.SDK.ETFProfileandPrices.Client.ApiResponse<InlineResponse20022> FactsetEtfTimeSeriesListBySymbolGetWithHttpInfo(string symbol, string timePeriod = default(string), List<string> attributes = default(List<string>), decimal? paginationOffset = default(decimal?), decimal? paginationLimit = default(decimal?))
        {
            // verify the required parameter 'symbol' is set
            if (symbol == null)
                throw new FactSet.SDK.ETFProfileandPrices.Client.ApiException(400, "Missing required parameter 'symbol' when calling FactsetApi->FactsetEtfTimeSeriesListBySymbolGet");

            FactSet.SDK.ETFProfileandPrices.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.ETFProfileandPrices.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.ParameterToMultiMap("", "symbol", symbol));
            if (timePeriod != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.ParameterToMultiMap("", "timePeriod", timePeriod));
            }
            if (attributes != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.ParameterToMultiMap("csv", "_attributes", attributes));
            }
            if (paginationOffset != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.ParameterToMultiMap("", "_paginationOffset", paginationOffset));
            }
            if (paginationLimit != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.ParameterToMultiMap("", "_paginationLimit", paginationLimit));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<InlineResponse20022>("/factset/etf/timeSeries/listBySymbol", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("FactsetEtfTimeSeriesListBySymbolGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve historical NAV data for a specified ETP. Retrieve the historical NAV data and the respective fund flows and shares outstanding for a specified fund and time period. Please refer currency.fund in /factset/etf/getBySymbol for currency value.
        /// </summary>
        /// <exception cref="FactSet.SDK.ETFProfileandPrices.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">Market symbol of ETP defined by FactSet.</param>
        /// <param name="timePeriod">Time frame of the data. (optional, default to 1Y)</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="paginationOffset">Non-negative number of entries to skip, or 0 (default). (optional, default to 0.0M)</param>
        /// <param name="paginationLimit">Non-negative maximum number of entries to return. (optional, default to 20.0M)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse20022</returns>
        public async System.Threading.Tasks.Task<InlineResponse20022> FactsetEtfTimeSeriesListBySymbolGetAsync(string symbol, string timePeriod = default(string), List<string> attributes = default(List<string>), decimal? paginationOffset = default(decimal?), decimal? paginationLimit = default(decimal?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            FactSet.SDK.ETFProfileandPrices.Client.ApiResponse<InlineResponse20022> localVarResponse = await FactsetEtfTimeSeriesListBySymbolGetWithHttpInfoAsync(symbol, timePeriod, attributes, paginationOffset, paginationLimit, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve historical NAV data for a specified ETP. Retrieve the historical NAV data and the respective fund flows and shares outstanding for a specified fund and time period. Please refer currency.fund in /factset/etf/getBySymbol for currency value.
        /// </summary>
        /// <exception cref="FactSet.SDK.ETFProfileandPrices.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">Market symbol of ETP defined by FactSet.</param>
        /// <param name="timePeriod">Time frame of the data. (optional, default to 1Y)</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="paginationOffset">Non-negative number of entries to skip, or 0 (default). (optional, default to 0.0M)</param>
        /// <param name="paginationLimit">Non-negative maximum number of entries to return. (optional, default to 20.0M)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse20022)</returns>
        public async System.Threading.Tasks.Task<FactSet.SDK.ETFProfileandPrices.Client.ApiResponse<InlineResponse20022>> FactsetEtfTimeSeriesListBySymbolGetWithHttpInfoAsync(string symbol, string timePeriod = default(string), List<string> attributes = default(List<string>), decimal? paginationOffset = default(decimal?), decimal? paginationLimit = default(decimal?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'symbol' is set
            if (symbol == null)
                throw new FactSet.SDK.ETFProfileandPrices.Client.ApiException(400, "Missing required parameter 'symbol' when calling FactsetApi->FactsetEtfTimeSeriesListBySymbolGet");


            FactSet.SDK.ETFProfileandPrices.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.ETFProfileandPrices.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.ParameterToMultiMap("", "symbol", symbol));
            if (timePeriod != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.ParameterToMultiMap("", "timePeriod", timePeriod));
            }
            if (attributes != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.ParameterToMultiMap("csv", "_attributes", attributes));
            }
            if (paginationOffset != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.ParameterToMultiMap("", "_paginationOffset", paginationOffset));
            }
            if (paginationLimit != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.ParameterToMultiMap("", "_paginationLimit", paginationLimit));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.ETFProfileandPrices.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<InlineResponse20022>("/factset/etf/timeSeries/listBySymbol", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("FactsetEtfTimeSeriesListBySymbolGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
