/*
 * Prime Developer Trial
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = FactSet.SDK.ETFProfileandPrices.Client.OpenAPIDateConverter;

namespace FactSet.SDK.ETFProfileandPrices.Model
{
    /// <summary>
    /// Trade analytics.
    /// </summary>
    [DataContract(Name = "inline_response_200_13_data")]
    public partial class InlineResponse20013Data : IEquatable<InlineResponse20013Data>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="InlineResponse20013Data" /> class.
        /// </summary>
        /// <param name="impedimentsToCreation">impedimentsToCreation.</param>
        /// <param name="premiumDiscount">premiumDiscount.</param>
        /// <param name="blockTrade">blockTrade.</param>
        /// <param name="spread">spread.</param>
        /// <param name="trackingDifference">trackingDifference.</param>
        public InlineResponse20013Data(InlineResponse20013DataImpedimentsToCreation impedimentsToCreation = default(InlineResponse20013DataImpedimentsToCreation), InlineResponse20013DataPremiumDiscount premiumDiscount = default(InlineResponse20013DataPremiumDiscount), InlineResponse20013DataBlockTrade blockTrade = default(InlineResponse20013DataBlockTrade), InlineResponse20013DataSpread spread = default(InlineResponse20013DataSpread), InlineResponse20013DataTrackingDifference trackingDifference = default(InlineResponse20013DataTrackingDifference))
        {
            this.ImpedimentsToCreation = impedimentsToCreation;
            this.PremiumDiscount = premiumDiscount;
            this.BlockTrade = blockTrade;
            this.Spread = spread;
            this.TrackingDifference = trackingDifference;
        }

        /// <summary>
        /// Gets or Sets ImpedimentsToCreation
        /// </summary>
        [DataMember(Name = "impedimentsToCreation", EmitDefaultValue = false)]
        public InlineResponse20013DataImpedimentsToCreation ImpedimentsToCreation { get; set; }

        /// <summary>
        /// Gets or Sets PremiumDiscount
        /// </summary>
        [DataMember(Name = "premiumDiscount", EmitDefaultValue = false)]
        public InlineResponse20013DataPremiumDiscount PremiumDiscount { get; set; }

        /// <summary>
        /// Gets or Sets BlockTrade
        /// </summary>
        [DataMember(Name = "blockTrade", EmitDefaultValue = false)]
        public InlineResponse20013DataBlockTrade BlockTrade { get; set; }

        /// <summary>
        /// Gets or Sets Spread
        /// </summary>
        [DataMember(Name = "spread", EmitDefaultValue = false)]
        public InlineResponse20013DataSpread Spread { get; set; }

        /// <summary>
        /// Gets or Sets TrackingDifference
        /// </summary>
        [DataMember(Name = "trackingDifference", EmitDefaultValue = false)]
        public InlineResponse20013DataTrackingDifference TrackingDifference { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class InlineResponse20013Data {\n");
            sb.Append("  ImpedimentsToCreation: ").Append(ImpedimentsToCreation).Append("\n");
            sb.Append("  PremiumDiscount: ").Append(PremiumDiscount).Append("\n");
            sb.Append("  BlockTrade: ").Append(BlockTrade).Append("\n");
            sb.Append("  Spread: ").Append(Spread).Append("\n");
            sb.Append("  TrackingDifference: ").Append(TrackingDifference).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as InlineResponse20013Data);
        }

        /// <summary>
        /// Returns true if InlineResponse20013Data instances are equal
        /// </summary>
        /// <param name="input">Instance of InlineResponse20013Data to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(InlineResponse20013Data input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.ImpedimentsToCreation == input.ImpedimentsToCreation ||
                    (this.ImpedimentsToCreation != null &&
                    this.ImpedimentsToCreation.Equals(input.ImpedimentsToCreation))
                ) && 
                (
                    this.PremiumDiscount == input.PremiumDiscount ||
                    (this.PremiumDiscount != null &&
                    this.PremiumDiscount.Equals(input.PremiumDiscount))
                ) && 
                (
                    this.BlockTrade == input.BlockTrade ||
                    (this.BlockTrade != null &&
                    this.BlockTrade.Equals(input.BlockTrade))
                ) && 
                (
                    this.Spread == input.Spread ||
                    (this.Spread != null &&
                    this.Spread.Equals(input.Spread))
                ) && 
                (
                    this.TrackingDifference == input.TrackingDifference ||
                    (this.TrackingDifference != null &&
                    this.TrackingDifference.Equals(input.TrackingDifference))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ImpedimentsToCreation != null)
                {
                    hashCode = (hashCode * 59) + this.ImpedimentsToCreation.GetHashCode();
                }
                if (this.PremiumDiscount != null)
                {
                    hashCode = (hashCode * 59) + this.PremiumDiscount.GetHashCode();
                }
                if (this.BlockTrade != null)
                {
                    hashCode = (hashCode * 59) + this.BlockTrade.GetHashCode();
                }
                if (this.Spread != null)
                {
                    hashCode = (hashCode * 59) + this.Spread.GetHashCode();
                }
                if (this.TrackingDifference != null)
                {
                    hashCode = (hashCode * 59) + this.TrackingDifference.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
