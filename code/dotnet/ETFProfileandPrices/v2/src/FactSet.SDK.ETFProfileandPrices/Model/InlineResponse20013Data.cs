/*
 * Prime Developer Trial
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = FactSet.SDK.ETFProfileandPrices.Client.OpenAPIDateConverter;

namespace FactSet.SDK.ETFProfileandPrices.Model
{
    /// <summary>
    /// Fund flows (i.e., the amount invested or divested from a fund) based on the creation/redemption process. The data returned may not be related to overall volume or price movement. All fund flow inputs use transaction-day values to ensure that all assets under management (AUM) and flows are fully comparable and reflective of the same, verified market conditions. This data is available for all the regions.
    /// </summary>
    [DataContract(Name = "inline_response_200_13_data")]
    public partial class InlineResponse20013Data : IEquatable<InlineResponse20013Data>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="InlineResponse20013Data" /> class.
        /// </summary>
        /// <param name="flows1D">One-day fund flows. This data is available for all the regions..</param>
        /// <param name="flows1W">One-week fund flows. This data is available for all the regions..</param>
        /// <param name="flows1M">One-month fund flows. This data is available for all the regions..</param>
        /// <param name="flowsYTD">Year-to-date fund flows. This data is available for all the regions..</param>
        /// <param name="flows1Y">One-year fund flows. This data is available for all the regions..</param>
        public InlineResponse20013Data(decimal flows1D = default(decimal), decimal flows1W = default(decimal), decimal flows1M = default(decimal), decimal flowsYTD = default(decimal), decimal flows1Y = default(decimal))
        {
            this.Flows1D = flows1D;
            this.Flows1W = flows1W;
            this.Flows1M = flows1M;
            this.FlowsYTD = flowsYTD;
            this.Flows1Y = flows1Y;
        }

        /// <summary>
        /// One-day fund flows. This data is available for all the regions.
        /// </summary>
        /// <value>One-day fund flows. This data is available for all the regions.</value>
        [DataMember(Name = "flows1D", EmitDefaultValue = false)]
        public decimal Flows1D { get; set; }

        /// <summary>
        /// One-week fund flows. This data is available for all the regions.
        /// </summary>
        /// <value>One-week fund flows. This data is available for all the regions.</value>
        [DataMember(Name = "flows1W", EmitDefaultValue = false)]
        public decimal Flows1W { get; set; }

        /// <summary>
        /// One-month fund flows. This data is available for all the regions.
        /// </summary>
        /// <value>One-month fund flows. This data is available for all the regions.</value>
        [DataMember(Name = "flows1M", EmitDefaultValue = false)]
        public decimal Flows1M { get; set; }

        /// <summary>
        /// Year-to-date fund flows. This data is available for all the regions.
        /// </summary>
        /// <value>Year-to-date fund flows. This data is available for all the regions.</value>
        [DataMember(Name = "flowsYTD", EmitDefaultValue = false)]
        public decimal FlowsYTD { get; set; }

        /// <summary>
        /// One-year fund flows. This data is available for all the regions.
        /// </summary>
        /// <value>One-year fund flows. This data is available for all the regions.</value>
        [DataMember(Name = "flows1Y", EmitDefaultValue = false)]
        public decimal Flows1Y { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class InlineResponse20013Data {\n");
            sb.Append("  Flows1D: ").Append(Flows1D).Append("\n");
            sb.Append("  Flows1W: ").Append(Flows1W).Append("\n");
            sb.Append("  Flows1M: ").Append(Flows1M).Append("\n");
            sb.Append("  FlowsYTD: ").Append(FlowsYTD).Append("\n");
            sb.Append("  Flows1Y: ").Append(Flows1Y).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as InlineResponse20013Data);
        }

        /// <summary>
        /// Returns true if InlineResponse20013Data instances are equal
        /// </summary>
        /// <param name="input">Instance of InlineResponse20013Data to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(InlineResponse20013Data input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Flows1D == input.Flows1D ||
                    this.Flows1D.Equals(input.Flows1D)
                ) && 
                (
                    this.Flows1W == input.Flows1W ||
                    this.Flows1W.Equals(input.Flows1W)
                ) && 
                (
                    this.Flows1M == input.Flows1M ||
                    this.Flows1M.Equals(input.Flows1M)
                ) && 
                (
                    this.FlowsYTD == input.FlowsYTD ||
                    this.FlowsYTD.Equals(input.FlowsYTD)
                ) && 
                (
                    this.Flows1Y == input.Flows1Y ||
                    this.Flows1Y.Equals(input.Flows1Y)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = hashCode * 59 + this.Flows1D.GetHashCode();
                hashCode = hashCode * 59 + this.Flows1W.GetHashCode();
                hashCode = hashCode * 59 + this.Flows1M.GetHashCode();
                hashCode = hashCode * 59 + this.FlowsYTD.GetHashCode();
                hashCode = hashCode * 59 + this.Flows1Y.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
