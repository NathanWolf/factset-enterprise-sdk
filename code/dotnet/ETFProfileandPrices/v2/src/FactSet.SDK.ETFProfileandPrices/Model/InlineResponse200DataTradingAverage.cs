/*
 * Prime Developer Trial
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = FactSet.SDK.ETFProfileandPrices.Client.OpenAPIDateConverter;

namespace FactSet.SDK.ETFProfileandPrices.Model
{
    /// <summary>
    /// Average.
    /// </summary>
    [DataContract(Name = "inline_response_200_data_trading_average")]
    public partial class InlineResponse200DataTradingAverage : IEquatable<InlineResponse200DataTradingAverage>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="InlineResponse200DataTradingAverage" /> class.
        /// </summary>
        /// <param name="volume">The average daily number of shares traded over the past 45 trading days. This data is available for the US regions..</param>
        /// <param name="value">The average daily value traded over the past 45-trading day period in ETP&#39;s listing currency. This data is available for the US regions..</param>
        public InlineResponse200DataTradingAverage(decimal volume = default(decimal), decimal value = default(decimal))
        {
            this.Volume = volume;
            this.Value = value;
        }

        /// <summary>
        /// The average daily number of shares traded over the past 45 trading days. This data is available for the US regions.
        /// </summary>
        /// <value>The average daily number of shares traded over the past 45 trading days. This data is available for the US regions.</value>
        [DataMember(Name = "volume", EmitDefaultValue = false)]
        public decimal Volume { get; set; }

        /// <summary>
        /// The average daily value traded over the past 45-trading day period in ETP&#39;s listing currency. This data is available for the US regions.
        /// </summary>
        /// <value>The average daily value traded over the past 45-trading day period in ETP&#39;s listing currency. This data is available for the US regions.</value>
        [DataMember(Name = "value", EmitDefaultValue = false)]
        public decimal Value { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class InlineResponse200DataTradingAverage {\n");
            sb.Append("  Volume: ").Append(Volume).Append("\n");
            sb.Append("  Value: ").Append(Value).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as InlineResponse200DataTradingAverage);
        }

        /// <summary>
        /// Returns true if InlineResponse200DataTradingAverage instances are equal
        /// </summary>
        /// <param name="input">Instance of InlineResponse200DataTradingAverage to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(InlineResponse200DataTradingAverage input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Volume == input.Volume ||
                    this.Volume.Equals(input.Volume)
                ) && 
                (
                    this.Value == input.Value ||
                    this.Value.Equals(input.Value)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = hashCode * 59 + this.Volume.GetHashCode();
                hashCode = hashCode * 59 + this.Value.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
