/*
 * Prime Developer Trial
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = FactSet.SDK.ETFProfileandPrices.Client.OpenAPIDateConverter;

namespace FactSet.SDK.ETFProfileandPrices.Model
{
    /// <summary>
    /// Financial report.
    /// </summary>
    [DataContract(Name = "inline_response_200_data_financialReport")]
    public partial class InlineResponse200DataFinancialReport : IEquatable<InlineResponse200DataFinancialReport>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="InlineResponse200DataFinancialReport" /> class.
        /// </summary>
        /// <param name="annual">annual.</param>
        /// <param name="semiAnnual">semiAnnual.</param>
        public InlineResponse200DataFinancialReport(InlineResponse200DataFinancialReportAnnual annual = default(InlineResponse200DataFinancialReportAnnual), InlineResponse200DataFinancialReportSemiAnnual semiAnnual = default(InlineResponse200DataFinancialReportSemiAnnual))
        {
            this.Annual = annual;
            this.SemiAnnual = semiAnnual;
        }

        /// <summary>
        /// Gets or Sets Annual
        /// </summary>
        [DataMember(Name = "annual", EmitDefaultValue = false)]
        public InlineResponse200DataFinancialReportAnnual Annual { get; set; }

        /// <summary>
        /// Gets or Sets SemiAnnual
        /// </summary>
        [DataMember(Name = "semiAnnual", EmitDefaultValue = false)]
        public InlineResponse200DataFinancialReportSemiAnnual SemiAnnual { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class InlineResponse200DataFinancialReport {\n");
            sb.Append("  Annual: ").Append(Annual).Append("\n");
            sb.Append("  SemiAnnual: ").Append(SemiAnnual).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as InlineResponse200DataFinancialReport);
        }

        /// <summary>
        /// Returns true if InlineResponse200DataFinancialReport instances are equal
        /// </summary>
        /// <param name="input">Instance of InlineResponse200DataFinancialReport to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(InlineResponse200DataFinancialReport input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Annual == input.Annual ||
                    (this.Annual != null &&
                    this.Annual.Equals(input.Annual))
                ) && 
                (
                    this.SemiAnnual == input.SemiAnnual ||
                    (this.SemiAnnual != null &&
                    this.SemiAnnual.Equals(input.SemiAnnual))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Annual != null)
                    hashCode = hashCode * 59 + this.Annual.GetHashCode();
                if (this.SemiAnnual != null)
                    hashCode = hashCode * 59 + this.SemiAnnual.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
