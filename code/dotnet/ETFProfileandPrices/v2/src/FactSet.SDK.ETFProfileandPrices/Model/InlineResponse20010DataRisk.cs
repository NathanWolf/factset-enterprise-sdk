/*
 * Prime Developer Trial
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = FactSet.SDK.ETFProfileandPrices.Client.OpenAPIDateConverter;

namespace FactSet.SDK.ETFProfileandPrices.Model
{
    /// <summary>
    /// Risk.
    /// </summary>
    [DataContract(Name = "inline_response_200_10_data_risk")]
    public partial class InlineResponse20010DataRisk : IEquatable<InlineResponse20010DataRisk>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="InlineResponse20010DataRisk" /> class.
        /// </summary>
        /// <param name="isCorporateActionPending">Indicates a fund whose issuer has any corporate actions pending (e.g. merger, purchase, and closing). Available for the regions: US..</param>
        /// <param name="counterParty">Score predicting the likelihood that an ETN counterparty will default, as measured by 1-year credit default swap rates. Possible values are Low, Medium, or High. Empty for non-ETNs. Available for the regions: US..</param>
        /// <param name="fundClosure">Score estimating the likelihood that a fund will close. Based on a quantitative model. Outputs are Low, Medium, or High. Available for the regions: US..</param>
        public InlineResponse20010DataRisk(bool isCorporateActionPending = default(bool), string counterParty = default(string), string fundClosure = default(string))
        {
            this.IsCorporateActionPending = isCorporateActionPending;
            this.CounterParty = counterParty;
            this.FundClosure = fundClosure;
        }

        /// <summary>
        /// Indicates a fund whose issuer has any corporate actions pending (e.g. merger, purchase, and closing). Available for the regions: US.
        /// </summary>
        /// <value>Indicates a fund whose issuer has any corporate actions pending (e.g. merger, purchase, and closing). Available for the regions: US.</value>
        [DataMember(Name = "isCorporateActionPending", EmitDefaultValue = true)]
        public bool IsCorporateActionPending { get; set; }

        /// <summary>
        /// Score predicting the likelihood that an ETN counterparty will default, as measured by 1-year credit default swap rates. Possible values are Low, Medium, or High. Empty for non-ETNs. Available for the regions: US.
        /// </summary>
        /// <value>Score predicting the likelihood that an ETN counterparty will default, as measured by 1-year credit default swap rates. Possible values are Low, Medium, or High. Empty for non-ETNs. Available for the regions: US.</value>
        [DataMember(Name = "counterParty", EmitDefaultValue = false)]
        public string CounterParty { get; set; }

        /// <summary>
        /// Score estimating the likelihood that a fund will close. Based on a quantitative model. Outputs are Low, Medium, or High. Available for the regions: US.
        /// </summary>
        /// <value>Score estimating the likelihood that a fund will close. Based on a quantitative model. Outputs are Low, Medium, or High. Available for the regions: US.</value>
        [DataMember(Name = "fundClosure", EmitDefaultValue = false)]
        public string FundClosure { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class InlineResponse20010DataRisk {\n");
            sb.Append("  IsCorporateActionPending: ").Append(IsCorporateActionPending).Append("\n");
            sb.Append("  CounterParty: ").Append(CounterParty).Append("\n");
            sb.Append("  FundClosure: ").Append(FundClosure).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as InlineResponse20010DataRisk);
        }

        /// <summary>
        /// Returns true if InlineResponse20010DataRisk instances are equal
        /// </summary>
        /// <param name="input">Instance of InlineResponse20010DataRisk to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(InlineResponse20010DataRisk input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.IsCorporateActionPending == input.IsCorporateActionPending ||
                    this.IsCorporateActionPending.Equals(input.IsCorporateActionPending)
                ) && 
                (
                    this.CounterParty == input.CounterParty ||
                    (this.CounterParty != null &&
                    this.CounterParty.Equals(input.CounterParty))
                ) && 
                (
                    this.FundClosure == input.FundClosure ||
                    (this.FundClosure != null &&
                    this.FundClosure.Equals(input.FundClosure))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.IsCorporateActionPending.GetHashCode();
                if (this.CounterParty != null)
                {
                    hashCode = (hashCode * 59) + this.CounterParty.GetHashCode();
                }
                if (this.FundClosure != null)
                {
                    hashCode = (hashCode * 59) + this.FundClosure.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
