/*
 * Prime Developer Trial
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = FactSet.SDK.ETFProfileandPrices.Client.OpenAPIDateConverter;

namespace FactSet.SDK.ETFProfileandPrices.Model
{
    /// <summary>
    /// InlineResponse20033Data
    /// </summary>
    [DataContract(Name = "inline_response_200_33_data")]
    public partial class InlineResponse20033Data : IEquatable<InlineResponse20033Data>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="InlineResponse20033Data" /> class.
        /// </summary>
        /// <param name="navDate">Historice NAV date value..</param>
        /// <param name="nav">Returns historic Net Asset Value of the ETP..</param>
        /// <param name="navChange">Absolute change in NAV value..</param>
        /// <param name="navChangePercent">Related change in the NAV value..</param>
        /// <param name="premiumDiscount">Difference between market price and NAV of the ETP..</param>
        /// <param name="fundFlows">This value returns factset&#39;s ETF fundflow history. Rolling one day fund flows are calculated using the difference of shares outstanding at previous close and shares outstanding one day prior to close mulitplied by the NAV of one day prior to close..</param>
        /// <param name="sharesOutstanding">Returns the historic share Outstanding values of the ETP..</param>
        /// <param name="aum">Returns the historic Total Asset Value of the ETP..</param>
        public InlineResponse20033Data(DateTime navDate = default(DateTime), decimal nav = default(decimal), decimal navChange = default(decimal), decimal navChangePercent = default(decimal), decimal premiumDiscount = default(decimal), decimal fundFlows = default(decimal), decimal sharesOutstanding = default(decimal), decimal aum = default(decimal))
        {
            this.NavDate = navDate;
            this.Nav = nav;
            this.NavChange = navChange;
            this.NavChangePercent = navChangePercent;
            this.PremiumDiscount = premiumDiscount;
            this.FundFlows = fundFlows;
            this.SharesOutstanding = sharesOutstanding;
            this.Aum = aum;
        }

        /// <summary>
        /// Historice NAV date value.
        /// </summary>
        /// <value>Historice NAV date value.</value>
        [DataMember(Name = "navDate", EmitDefaultValue = false)]
        [JsonConverter(typeof(OpenAPIDateConverter))]
        public DateTime NavDate { get; set; }

        /// <summary>
        /// Returns historic Net Asset Value of the ETP.
        /// </summary>
        /// <value>Returns historic Net Asset Value of the ETP.</value>
        [DataMember(Name = "nav", EmitDefaultValue = false)]
        public decimal Nav { get; set; }

        /// <summary>
        /// Absolute change in NAV value.
        /// </summary>
        /// <value>Absolute change in NAV value.</value>
        [DataMember(Name = "navChange", EmitDefaultValue = false)]
        public decimal NavChange { get; set; }

        /// <summary>
        /// Related change in the NAV value.
        /// </summary>
        /// <value>Related change in the NAV value.</value>
        [DataMember(Name = "navChangePercent", EmitDefaultValue = false)]
        public decimal NavChangePercent { get; set; }

        /// <summary>
        /// Difference between market price and NAV of the ETP.
        /// </summary>
        /// <value>Difference between market price and NAV of the ETP.</value>
        [DataMember(Name = "premiumDiscount", EmitDefaultValue = false)]
        public decimal PremiumDiscount { get; set; }

        /// <summary>
        /// This value returns factset&#39;s ETF fundflow history. Rolling one day fund flows are calculated using the difference of shares outstanding at previous close and shares outstanding one day prior to close mulitplied by the NAV of one day prior to close.
        /// </summary>
        /// <value>This value returns factset&#39;s ETF fundflow history. Rolling one day fund flows are calculated using the difference of shares outstanding at previous close and shares outstanding one day prior to close mulitplied by the NAV of one day prior to close.</value>
        [DataMember(Name = "fundFlows", EmitDefaultValue = false)]
        public decimal FundFlows { get; set; }

        /// <summary>
        /// Returns the historic share Outstanding values of the ETP.
        /// </summary>
        /// <value>Returns the historic share Outstanding values of the ETP.</value>
        [DataMember(Name = "sharesOutstanding", EmitDefaultValue = false)]
        public decimal SharesOutstanding { get; set; }

        /// <summary>
        /// Returns the historic Total Asset Value of the ETP.
        /// </summary>
        /// <value>Returns the historic Total Asset Value of the ETP.</value>
        [DataMember(Name = "aum", EmitDefaultValue = false)]
        public decimal Aum { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class InlineResponse20033Data {\n");
            sb.Append("  NavDate: ").Append(NavDate).Append("\n");
            sb.Append("  Nav: ").Append(Nav).Append("\n");
            sb.Append("  NavChange: ").Append(NavChange).Append("\n");
            sb.Append("  NavChangePercent: ").Append(NavChangePercent).Append("\n");
            sb.Append("  PremiumDiscount: ").Append(PremiumDiscount).Append("\n");
            sb.Append("  FundFlows: ").Append(FundFlows).Append("\n");
            sb.Append("  SharesOutstanding: ").Append(SharesOutstanding).Append("\n");
            sb.Append("  Aum: ").Append(Aum).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as InlineResponse20033Data);
        }

        /// <summary>
        /// Returns true if InlineResponse20033Data instances are equal
        /// </summary>
        /// <param name="input">Instance of InlineResponse20033Data to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(InlineResponse20033Data input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.NavDate == input.NavDate ||
                    (this.NavDate != null &&
                    this.NavDate.Equals(input.NavDate))
                ) && 
                (
                    this.Nav == input.Nav ||
                    this.Nav.Equals(input.Nav)
                ) && 
                (
                    this.NavChange == input.NavChange ||
                    this.NavChange.Equals(input.NavChange)
                ) && 
                (
                    this.NavChangePercent == input.NavChangePercent ||
                    this.NavChangePercent.Equals(input.NavChangePercent)
                ) && 
                (
                    this.PremiumDiscount == input.PremiumDiscount ||
                    this.PremiumDiscount.Equals(input.PremiumDiscount)
                ) && 
                (
                    this.FundFlows == input.FundFlows ||
                    this.FundFlows.Equals(input.FundFlows)
                ) && 
                (
                    this.SharesOutstanding == input.SharesOutstanding ||
                    this.SharesOutstanding.Equals(input.SharesOutstanding)
                ) && 
                (
                    this.Aum == input.Aum ||
                    this.Aum.Equals(input.Aum)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.NavDate != null)
                {
                    hashCode = (hashCode * 59) + this.NavDate.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Nav.GetHashCode();
                hashCode = (hashCode * 59) + this.NavChange.GetHashCode();
                hashCode = (hashCode * 59) + this.NavChangePercent.GetHashCode();
                hashCode = (hashCode * 59) + this.PremiumDiscount.GetHashCode();
                hashCode = (hashCode * 59) + this.FundFlows.GetHashCode();
                hashCode = (hashCode * 59) + this.SharesOutstanding.GetHashCode();
                hashCode = (hashCode * 59) + this.Aum.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
