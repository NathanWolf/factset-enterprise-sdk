/*
 * Prime Developer Trial
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = FactSet.SDK.ETFProfileandPrices.Client.OpenAPIDateConverter;

namespace FactSet.SDK.ETFProfileandPrices.Model
{
    /// <summary>
    /// Profile.
    /// </summary>
    [DataContract(Name = "inline_response_200_data")]
    public partial class InlineResponse200Data : IEquatable<InlineResponse200Data>, IValidatableObject
    {
        /// <summary>
        /// Staus of the ETP. This data is available for all the regions.
        /// </summary>
        /// <value>Staus of the ETP. This data is available for all the regions.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum StatusEnum
        {
            /// <summary>
            /// Enum Active for value: Active
            /// </summary>
            [EnumMember(Value = "Active")]
            Active = 1,

            /// <summary>
            /// Enum Delisted for value: Delisted
            /// </summary>
            [EnumMember(Value = "Delisted")]
            Delisted = 2,

            /// <summary>
            /// Enum NotTradingYet for value: Not trading yet
            /// </summary>
            [EnumMember(Value = "Not trading yet")]
            NotTradingYet = 3

        }


        /// <summary>
        /// Staus of the ETP. This data is available for all the regions.
        /// </summary>
        /// <value>Staus of the ETP. This data is available for all the regions.</value>
        [DataMember(Name = "status", EmitDefaultValue = false)]
        public StatusEnum? Status { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="InlineResponse200Data" /> class.
        /// </summary>
        /// <param name="asOfDate">Date data was published. This data is available only for US region..</param>
        /// <param name="holdingsDate">The as of data for holdings statistics. This data available only for US region.</param>
        /// <param name="symbol">Ticker of the ETP. This data is available for all region..</param>
        /// <param name="exchange">exchange.</param>
        /// <param name="name">Name of the ETP. This data is available for all the regions..</param>
        /// <param name="issuer">issuer.</param>
        /// <param name="brand">brand.</param>
        /// <param name="launchDate">Launch date of the ETP. This data is available for all the regions..</param>
        /// <param name="description">A brief description of the ETP. This data is available for all the regions..</param>
        /// <param name="website">Link to the ETP&#39;s homepage. This data is available for the US and Canada region..</param>
        /// <param name="domicile">ETP country of domicile. This data is available for all the regions and country code is in format ISO 3166-1 alpha-2..</param>
        /// <param name="status">Staus of the ETP. This data is available for all the regions..</param>
        /// <param name="currency">currency.</param>
        /// <param name="index">index.</param>
        /// <param name="financialReport">financialReport.</param>
        /// <param name="createRedeem">createRedeem.</param>
        /// <param name="aum">The market value of the total assets that a individual ETP manages on behalf of it&#39;s investors. This data is available for all the regions..</param>
        /// <param name="trading">trading.</param>
        /// <param name="documentation">documentation.</param>
        /// <param name="insight">insight.</param>
        public InlineResponse200Data(DateTime asOfDate = default(DateTime), DateTime holdingsDate = default(DateTime), string symbol = default(string), InlineResponse200DataExchange exchange = default(InlineResponse200DataExchange), string name = default(string), InlineResponse200DataIssuer issuer = default(InlineResponse200DataIssuer), InlineResponse200DataBrand brand = default(InlineResponse200DataBrand), DateTime launchDate = default(DateTime), string description = default(string), string website = default(string), string domicile = default(string), StatusEnum? status = default(StatusEnum?), InlineResponse200DataCurrency currency = default(InlineResponse200DataCurrency), InlineResponse200DataIndex index = default(InlineResponse200DataIndex), InlineResponse200DataFinancialReport financialReport = default(InlineResponse200DataFinancialReport), InlineResponse200DataCreateRedeem createRedeem = default(InlineResponse200DataCreateRedeem), decimal aum = default(decimal), InlineResponse200DataTrading trading = default(InlineResponse200DataTrading), InlineResponse200DataDocumentation documentation = default(InlineResponse200DataDocumentation), InlineResponse200DataInsight insight = default(InlineResponse200DataInsight))
        {
            this.AsOfDate = asOfDate;
            this.HoldingsDate = holdingsDate;
            this.Symbol = symbol;
            this.Exchange = exchange;
            this.Name = name;
            this.Issuer = issuer;
            this.Brand = brand;
            this.LaunchDate = launchDate;
            this.Description = description;
            this.Website = website;
            this.Domicile = domicile;
            this.Status = status;
            this.Currency = currency;
            this.Index = index;
            this.FinancialReport = financialReport;
            this.CreateRedeem = createRedeem;
            this.Aum = aum;
            this.Trading = trading;
            this.Documentation = documentation;
            this.Insight = insight;
        }

        /// <summary>
        /// Date data was published. This data is available only for US region.
        /// </summary>
        /// <value>Date data was published. This data is available only for US region.</value>
        [DataMember(Name = "asOfDate", EmitDefaultValue = false)]
        [JsonConverter(typeof(OpenAPIDateConverter))]
        public DateTime AsOfDate { get; set; }

        /// <summary>
        /// The as of data for holdings statistics. This data available only for US region
        /// </summary>
        /// <value>The as of data for holdings statistics. This data available only for US region</value>
        [DataMember(Name = "holdingsDate", EmitDefaultValue = false)]
        [JsonConverter(typeof(OpenAPIDateConverter))]
        public DateTime HoldingsDate { get; set; }

        /// <summary>
        /// Ticker of the ETP. This data is available for all region.
        /// </summary>
        /// <value>Ticker of the ETP. This data is available for all region.</value>
        [DataMember(Name = "symbol", EmitDefaultValue = false)]
        public string Symbol { get; set; }

        /// <summary>
        /// Gets or Sets Exchange
        /// </summary>
        [DataMember(Name = "exchange", EmitDefaultValue = false)]
        public InlineResponse200DataExchange Exchange { get; set; }

        /// <summary>
        /// Name of the ETP. This data is available for all the regions.
        /// </summary>
        /// <value>Name of the ETP. This data is available for all the regions.</value>
        [DataMember(Name = "name", EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets Issuer
        /// </summary>
        [DataMember(Name = "issuer", EmitDefaultValue = false)]
        public InlineResponse200DataIssuer Issuer { get; set; }

        /// <summary>
        /// Gets or Sets Brand
        /// </summary>
        [DataMember(Name = "brand", EmitDefaultValue = false)]
        public InlineResponse200DataBrand Brand { get; set; }

        /// <summary>
        /// Launch date of the ETP. This data is available for all the regions.
        /// </summary>
        /// <value>Launch date of the ETP. This data is available for all the regions.</value>
        [DataMember(Name = "launchDate", EmitDefaultValue = false)]
        [JsonConverter(typeof(OpenAPIDateConverter))]
        public DateTime LaunchDate { get; set; }

        /// <summary>
        /// A brief description of the ETP. This data is available for all the regions.
        /// </summary>
        /// <value>A brief description of the ETP. This data is available for all the regions.</value>
        [DataMember(Name = "description", EmitDefaultValue = false)]
        public string Description { get; set; }

        /// <summary>
        /// Link to the ETP&#39;s homepage. This data is available for the US and Canada region.
        /// </summary>
        /// <value>Link to the ETP&#39;s homepage. This data is available for the US and Canada region.</value>
        [DataMember(Name = "website", EmitDefaultValue = false)]
        public string Website { get; set; }

        /// <summary>
        /// ETP country of domicile. This data is available for all the regions and country code is in format ISO 3166-1 alpha-2.
        /// </summary>
        /// <value>ETP country of domicile. This data is available for all the regions and country code is in format ISO 3166-1 alpha-2.</value>
        [DataMember(Name = "domicile", EmitDefaultValue = false)]
        public string Domicile { get; set; }

        /// <summary>
        /// Gets or Sets Currency
        /// </summary>
        [DataMember(Name = "currency", EmitDefaultValue = false)]
        public InlineResponse200DataCurrency Currency { get; set; }

        /// <summary>
        /// Gets or Sets Index
        /// </summary>
        [DataMember(Name = "index", EmitDefaultValue = false)]
        public InlineResponse200DataIndex Index { get; set; }

        /// <summary>
        /// Gets or Sets FinancialReport
        /// </summary>
        [DataMember(Name = "financialReport", EmitDefaultValue = false)]
        public InlineResponse200DataFinancialReport FinancialReport { get; set; }

        /// <summary>
        /// Gets or Sets CreateRedeem
        /// </summary>
        [DataMember(Name = "createRedeem", EmitDefaultValue = false)]
        public InlineResponse200DataCreateRedeem CreateRedeem { get; set; }

        /// <summary>
        /// The market value of the total assets that a individual ETP manages on behalf of it&#39;s investors. This data is available for all the regions.
        /// </summary>
        /// <value>The market value of the total assets that a individual ETP manages on behalf of it&#39;s investors. This data is available for all the regions.</value>
        [DataMember(Name = "aum", EmitDefaultValue = false)]
        public decimal Aum { get; set; }

        /// <summary>
        /// Gets or Sets Trading
        /// </summary>
        [DataMember(Name = "trading", EmitDefaultValue = false)]
        public InlineResponse200DataTrading Trading { get; set; }

        /// <summary>
        /// Gets or Sets Documentation
        /// </summary>
        [DataMember(Name = "documentation", EmitDefaultValue = false)]
        public InlineResponse200DataDocumentation Documentation { get; set; }

        /// <summary>
        /// Gets or Sets Insight
        /// </summary>
        [DataMember(Name = "insight", EmitDefaultValue = false)]
        public InlineResponse200DataInsight Insight { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class InlineResponse200Data {\n");
            sb.Append("  AsOfDate: ").Append(AsOfDate).Append("\n");
            sb.Append("  HoldingsDate: ").Append(HoldingsDate).Append("\n");
            sb.Append("  Symbol: ").Append(Symbol).Append("\n");
            sb.Append("  Exchange: ").Append(Exchange).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Issuer: ").Append(Issuer).Append("\n");
            sb.Append("  Brand: ").Append(Brand).Append("\n");
            sb.Append("  LaunchDate: ").Append(LaunchDate).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Website: ").Append(Website).Append("\n");
            sb.Append("  Domicile: ").Append(Domicile).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  Currency: ").Append(Currency).Append("\n");
            sb.Append("  Index: ").Append(Index).Append("\n");
            sb.Append("  FinancialReport: ").Append(FinancialReport).Append("\n");
            sb.Append("  CreateRedeem: ").Append(CreateRedeem).Append("\n");
            sb.Append("  Aum: ").Append(Aum).Append("\n");
            sb.Append("  Trading: ").Append(Trading).Append("\n");
            sb.Append("  Documentation: ").Append(Documentation).Append("\n");
            sb.Append("  Insight: ").Append(Insight).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as InlineResponse200Data);
        }

        /// <summary>
        /// Returns true if InlineResponse200Data instances are equal
        /// </summary>
        /// <param name="input">Instance of InlineResponse200Data to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(InlineResponse200Data input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.AsOfDate == input.AsOfDate ||
                    (this.AsOfDate != null &&
                    this.AsOfDate.Equals(input.AsOfDate))
                ) && 
                (
                    this.HoldingsDate == input.HoldingsDate ||
                    (this.HoldingsDate != null &&
                    this.HoldingsDate.Equals(input.HoldingsDate))
                ) && 
                (
                    this.Symbol == input.Symbol ||
                    (this.Symbol != null &&
                    this.Symbol.Equals(input.Symbol))
                ) && 
                (
                    this.Exchange == input.Exchange ||
                    (this.Exchange != null &&
                    this.Exchange.Equals(input.Exchange))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Issuer == input.Issuer ||
                    (this.Issuer != null &&
                    this.Issuer.Equals(input.Issuer))
                ) && 
                (
                    this.Brand == input.Brand ||
                    (this.Brand != null &&
                    this.Brand.Equals(input.Brand))
                ) && 
                (
                    this.LaunchDate == input.LaunchDate ||
                    (this.LaunchDate != null &&
                    this.LaunchDate.Equals(input.LaunchDate))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.Website == input.Website ||
                    (this.Website != null &&
                    this.Website.Equals(input.Website))
                ) && 
                (
                    this.Domicile == input.Domicile ||
                    (this.Domicile != null &&
                    this.Domicile.Equals(input.Domicile))
                ) && 
                (
                    this.Status == input.Status ||
                    this.Status.Equals(input.Status)
                ) && 
                (
                    this.Currency == input.Currency ||
                    (this.Currency != null &&
                    this.Currency.Equals(input.Currency))
                ) && 
                (
                    this.Index == input.Index ||
                    (this.Index != null &&
                    this.Index.Equals(input.Index))
                ) && 
                (
                    this.FinancialReport == input.FinancialReport ||
                    (this.FinancialReport != null &&
                    this.FinancialReport.Equals(input.FinancialReport))
                ) && 
                (
                    this.CreateRedeem == input.CreateRedeem ||
                    (this.CreateRedeem != null &&
                    this.CreateRedeem.Equals(input.CreateRedeem))
                ) && 
                (
                    this.Aum == input.Aum ||
                    this.Aum.Equals(input.Aum)
                ) && 
                (
                    this.Trading == input.Trading ||
                    (this.Trading != null &&
                    this.Trading.Equals(input.Trading))
                ) && 
                (
                    this.Documentation == input.Documentation ||
                    (this.Documentation != null &&
                    this.Documentation.Equals(input.Documentation))
                ) && 
                (
                    this.Insight == input.Insight ||
                    (this.Insight != null &&
                    this.Insight.Equals(input.Insight))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AsOfDate != null)
                    hashCode = hashCode * 59 + this.AsOfDate.GetHashCode();
                if (this.HoldingsDate != null)
                    hashCode = hashCode * 59 + this.HoldingsDate.GetHashCode();
                if (this.Symbol != null)
                    hashCode = hashCode * 59 + this.Symbol.GetHashCode();
                if (this.Exchange != null)
                    hashCode = hashCode * 59 + this.Exchange.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.Issuer != null)
                    hashCode = hashCode * 59 + this.Issuer.GetHashCode();
                if (this.Brand != null)
                    hashCode = hashCode * 59 + this.Brand.GetHashCode();
                if (this.LaunchDate != null)
                    hashCode = hashCode * 59 + this.LaunchDate.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                if (this.Website != null)
                    hashCode = hashCode * 59 + this.Website.GetHashCode();
                if (this.Domicile != null)
                    hashCode = hashCode * 59 + this.Domicile.GetHashCode();
                hashCode = hashCode * 59 + this.Status.GetHashCode();
                if (this.Currency != null)
                    hashCode = hashCode * 59 + this.Currency.GetHashCode();
                if (this.Index != null)
                    hashCode = hashCode * 59 + this.Index.GetHashCode();
                if (this.FinancialReport != null)
                    hashCode = hashCode * 59 + this.FinancialReport.GetHashCode();
                if (this.CreateRedeem != null)
                    hashCode = hashCode * 59 + this.CreateRedeem.GetHashCode();
                hashCode = hashCode * 59 + this.Aum.GetHashCode();
                if (this.Trading != null)
                    hashCode = hashCode * 59 + this.Trading.GetHashCode();
                if (this.Documentation != null)
                    hashCode = hashCode * 59 + this.Documentation.GetHashCode();
                if (this.Insight != null)
                    hashCode = hashCode * 59 + this.Insight.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
