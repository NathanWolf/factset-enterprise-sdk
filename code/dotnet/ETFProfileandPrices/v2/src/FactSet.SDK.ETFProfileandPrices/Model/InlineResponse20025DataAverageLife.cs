/*
 * Prime Developer Trial
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = FactSet.SDK.ETFProfileandPrices.Client.OpenAPIDateConverter;

namespace FactSet.SDK.ETFProfileandPrices.Model
{
    /// <summary>
    /// Average life
    /// </summary>
    [DataContract(Name = "inline_response_200_25_data_averageLife")]
    public partial class InlineResponse20025DataAverageLife : IEquatable<InlineResponse20025DataAverageLife>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="InlineResponse20025DataAverageLife" /> class.
        /// </summary>
        /// <param name="span">Average life value of the ETP..</param>
        /// <param name="span0To1">Average life value of the ETP ranges between 0 and 1 years..</param>
        /// <param name="span1To2">Average life value of the ETP ranges between 1 and 2 years..</param>
        /// <param name="span2To3">Average life value of the ETP ranges between 2 and 3 years..</param>
        /// <param name="span3To5">Average life value of the ETP ranges between 3 and 5 years..</param>
        /// <param name="span5To7">Average life value of the ETP ranges between 5 and 7 years..</param>
        /// <param name="span7To10">Average life value of the ETP ranges between 7 and 10 years..</param>
        /// <param name="span10To15">Average life value of the ETP ranges between 10 and 15 years..</param>
        /// <param name="span15To20">Average life value of the ETP ranges between 15 and 20 years..</param>
        /// <param name="span20Plus">Average life value of the ETP ranges above 20 years..</param>
        public InlineResponse20025DataAverageLife(decimal span = default(decimal), decimal span0To1 = default(decimal), decimal span1To2 = default(decimal), decimal span2To3 = default(decimal), decimal span3To5 = default(decimal), decimal span5To7 = default(decimal), decimal span7To10 = default(decimal), decimal span10To15 = default(decimal), decimal span15To20 = default(decimal), decimal span20Plus = default(decimal))
        {
            this.Span = span;
            this.Span0To1 = span0To1;
            this.Span1To2 = span1To2;
            this.Span2To3 = span2To3;
            this.Span3To5 = span3To5;
            this.Span5To7 = span5To7;
            this.Span7To10 = span7To10;
            this.Span10To15 = span10To15;
            this.Span15To20 = span15To20;
            this.Span20Plus = span20Plus;
        }

        /// <summary>
        /// Average life value of the ETP.
        /// </summary>
        /// <value>Average life value of the ETP.</value>
        [DataMember(Name = "span", EmitDefaultValue = false)]
        public decimal Span { get; set; }

        /// <summary>
        /// Average life value of the ETP ranges between 0 and 1 years.
        /// </summary>
        /// <value>Average life value of the ETP ranges between 0 and 1 years.</value>
        [DataMember(Name = "span0To1", EmitDefaultValue = false)]
        public decimal Span0To1 { get; set; }

        /// <summary>
        /// Average life value of the ETP ranges between 1 and 2 years.
        /// </summary>
        /// <value>Average life value of the ETP ranges between 1 and 2 years.</value>
        [DataMember(Name = "span1To2", EmitDefaultValue = false)]
        public decimal Span1To2 { get; set; }

        /// <summary>
        /// Average life value of the ETP ranges between 2 and 3 years.
        /// </summary>
        /// <value>Average life value of the ETP ranges between 2 and 3 years.</value>
        [DataMember(Name = "span2To3", EmitDefaultValue = false)]
        public decimal Span2To3 { get; set; }

        /// <summary>
        /// Average life value of the ETP ranges between 3 and 5 years.
        /// </summary>
        /// <value>Average life value of the ETP ranges between 3 and 5 years.</value>
        [DataMember(Name = "span3To5", EmitDefaultValue = false)]
        public decimal Span3To5 { get; set; }

        /// <summary>
        /// Average life value of the ETP ranges between 5 and 7 years.
        /// </summary>
        /// <value>Average life value of the ETP ranges between 5 and 7 years.</value>
        [DataMember(Name = "span5To7", EmitDefaultValue = false)]
        public decimal Span5To7 { get; set; }

        /// <summary>
        /// Average life value of the ETP ranges between 7 and 10 years.
        /// </summary>
        /// <value>Average life value of the ETP ranges between 7 and 10 years.</value>
        [DataMember(Name = "span7To10", EmitDefaultValue = false)]
        public decimal Span7To10 { get; set; }

        /// <summary>
        /// Average life value of the ETP ranges between 10 and 15 years.
        /// </summary>
        /// <value>Average life value of the ETP ranges between 10 and 15 years.</value>
        [DataMember(Name = "span10To15", EmitDefaultValue = false)]
        public decimal Span10To15 { get; set; }

        /// <summary>
        /// Average life value of the ETP ranges between 15 and 20 years.
        /// </summary>
        /// <value>Average life value of the ETP ranges between 15 and 20 years.</value>
        [DataMember(Name = "span15To20", EmitDefaultValue = false)]
        public decimal Span15To20 { get; set; }

        /// <summary>
        /// Average life value of the ETP ranges above 20 years.
        /// </summary>
        /// <value>Average life value of the ETP ranges above 20 years.</value>
        [DataMember(Name = "span20Plus", EmitDefaultValue = false)]
        public decimal Span20Plus { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class InlineResponse20025DataAverageLife {\n");
            sb.Append("  Span: ").Append(Span).Append("\n");
            sb.Append("  Span0To1: ").Append(Span0To1).Append("\n");
            sb.Append("  Span1To2: ").Append(Span1To2).Append("\n");
            sb.Append("  Span2To3: ").Append(Span2To3).Append("\n");
            sb.Append("  Span3To5: ").Append(Span3To5).Append("\n");
            sb.Append("  Span5To7: ").Append(Span5To7).Append("\n");
            sb.Append("  Span7To10: ").Append(Span7To10).Append("\n");
            sb.Append("  Span10To15: ").Append(Span10To15).Append("\n");
            sb.Append("  Span15To20: ").Append(Span15To20).Append("\n");
            sb.Append("  Span20Plus: ").Append(Span20Plus).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as InlineResponse20025DataAverageLife);
        }

        /// <summary>
        /// Returns true if InlineResponse20025DataAverageLife instances are equal
        /// </summary>
        /// <param name="input">Instance of InlineResponse20025DataAverageLife to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(InlineResponse20025DataAverageLife input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Span == input.Span ||
                    this.Span.Equals(input.Span)
                ) && 
                (
                    this.Span0To1 == input.Span0To1 ||
                    this.Span0To1.Equals(input.Span0To1)
                ) && 
                (
                    this.Span1To2 == input.Span1To2 ||
                    this.Span1To2.Equals(input.Span1To2)
                ) && 
                (
                    this.Span2To3 == input.Span2To3 ||
                    this.Span2To3.Equals(input.Span2To3)
                ) && 
                (
                    this.Span3To5 == input.Span3To5 ||
                    this.Span3To5.Equals(input.Span3To5)
                ) && 
                (
                    this.Span5To7 == input.Span5To7 ||
                    this.Span5To7.Equals(input.Span5To7)
                ) && 
                (
                    this.Span7To10 == input.Span7To10 ||
                    this.Span7To10.Equals(input.Span7To10)
                ) && 
                (
                    this.Span10To15 == input.Span10To15 ||
                    this.Span10To15.Equals(input.Span10To15)
                ) && 
                (
                    this.Span15To20 == input.Span15To20 ||
                    this.Span15To20.Equals(input.Span15To20)
                ) && 
                (
                    this.Span20Plus == input.Span20Plus ||
                    this.Span20Plus.Equals(input.Span20Plus)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.Span.GetHashCode();
                hashCode = (hashCode * 59) + this.Span0To1.GetHashCode();
                hashCode = (hashCode * 59) + this.Span1To2.GetHashCode();
                hashCode = (hashCode * 59) + this.Span2To3.GetHashCode();
                hashCode = (hashCode * 59) + this.Span3To5.GetHashCode();
                hashCode = (hashCode * 59) + this.Span5To7.GetHashCode();
                hashCode = (hashCode * 59) + this.Span7To10.GetHashCode();
                hashCode = (hashCode * 59) + this.Span10To15.GetHashCode();
                hashCode = (hashCode * 59) + this.Span15To20.GetHashCode();
                hashCode = (hashCode * 59) + this.Span20Plus.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
