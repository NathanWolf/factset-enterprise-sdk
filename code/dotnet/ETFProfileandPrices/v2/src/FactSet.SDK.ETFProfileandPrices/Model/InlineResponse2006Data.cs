/*
 * Prime Developer Trial
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = FactSet.SDK.ETFProfileandPrices.Client.OpenAPIDateConverter;

namespace FactSet.SDK.ETFProfileandPrices.Model
{
    /// <summary>
    /// Characteristics.
    /// </summary>
    [DataContract(Name = "inline_response_200_6_data")]
    public partial class InlineResponse2006Data : IEquatable<InlineResponse2006Data>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="InlineResponse2006Data" /> class.
        /// </summary>
        /// <param name="gearing">gearing.</param>
        /// <param name="hedge">hedge.</param>
        /// <param name="counterParty">counterParty.</param>
        /// <param name="serviceProvider">serviceProvider.</param>
        public InlineResponse2006Data(InlineResponse2006DataGearing gearing = default(InlineResponse2006DataGearing), InlineResponse2006DataHedge hedge = default(InlineResponse2006DataHedge), InlineResponse2006DataCounterParty counterParty = default(InlineResponse2006DataCounterParty), InlineResponse2006DataServiceProvider serviceProvider = default(InlineResponse2006DataServiceProvider))
        {
            this.Gearing = gearing;
            this.Hedge = hedge;
            this.CounterParty = counterParty;
            this.ServiceProvider = serviceProvider;
        }

        /// <summary>
        /// Gets or Sets Gearing
        /// </summary>
        [DataMember(Name = "gearing", EmitDefaultValue = false)]
        public InlineResponse2006DataGearing Gearing { get; set; }

        /// <summary>
        /// Gets or Sets Hedge
        /// </summary>
        [DataMember(Name = "hedge", EmitDefaultValue = false)]
        public InlineResponse2006DataHedge Hedge { get; set; }

        /// <summary>
        /// Gets or Sets CounterParty
        /// </summary>
        [DataMember(Name = "counterParty", EmitDefaultValue = false)]
        public InlineResponse2006DataCounterParty CounterParty { get; set; }

        /// <summary>
        /// Gets or Sets ServiceProvider
        /// </summary>
        [DataMember(Name = "serviceProvider", EmitDefaultValue = false)]
        public InlineResponse2006DataServiceProvider ServiceProvider { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class InlineResponse2006Data {\n");
            sb.Append("  Gearing: ").Append(Gearing).Append("\n");
            sb.Append("  Hedge: ").Append(Hedge).Append("\n");
            sb.Append("  CounterParty: ").Append(CounterParty).Append("\n");
            sb.Append("  ServiceProvider: ").Append(ServiceProvider).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as InlineResponse2006Data);
        }

        /// <summary>
        /// Returns true if InlineResponse2006Data instances are equal
        /// </summary>
        /// <param name="input">Instance of InlineResponse2006Data to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(InlineResponse2006Data input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Gearing == input.Gearing ||
                    (this.Gearing != null &&
                    this.Gearing.Equals(input.Gearing))
                ) && 
                (
                    this.Hedge == input.Hedge ||
                    (this.Hedge != null &&
                    this.Hedge.Equals(input.Hedge))
                ) && 
                (
                    this.CounterParty == input.CounterParty ||
                    (this.CounterParty != null &&
                    this.CounterParty.Equals(input.CounterParty))
                ) && 
                (
                    this.ServiceProvider == input.ServiceProvider ||
                    (this.ServiceProvider != null &&
                    this.ServiceProvider.Equals(input.ServiceProvider))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Gearing != null)
                    hashCode = hashCode * 59 + this.Gearing.GetHashCode();
                if (this.Hedge != null)
                    hashCode = hashCode * 59 + this.Hedge.GetHashCode();
                if (this.CounterParty != null)
                    hashCode = hashCode * 59 + this.CounterParty.GetHashCode();
                if (this.ServiceProvider != null)
                    hashCode = hashCode * 59 + this.ServiceProvider.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
