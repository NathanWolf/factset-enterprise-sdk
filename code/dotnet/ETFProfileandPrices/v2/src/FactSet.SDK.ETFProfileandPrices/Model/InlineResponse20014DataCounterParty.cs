/*
 * Prime Developer Trial
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = FactSet.SDK.ETFProfileandPrices.Client.OpenAPIDateConverter;

namespace FactSet.SDK.ETFProfileandPrices.Model
{
    /// <summary>
    /// Counter Party.
    /// </summary>
    [DataContract(Name = "inline_response_200_14_data_counterParty")]
    public partial class InlineResponse20014DataCounterParty : IEquatable<InlineResponse20014DataCounterParty>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="InlineResponse20014DataCounterParty" /> class.
        /// </summary>
        /// <param name="credit">Name of the ETP&#39;s credit counterparty. This data is available for all the regions..</param>
        /// <param name="swap">Name of the ETP&#39;s swap counterparty. This data is available for all the regions..</param>
        /// <param name="holdsDerivatives">Flags ETPs that are expected to hold OTC derivatives in the course of normal fund operations. This data is available for the US and Canada regions..</param>
        public InlineResponse20014DataCounterParty(string credit = default(string), string swap = default(string), bool holdsDerivatives = default(bool))
        {
            this.Credit = credit;
            this.Swap = swap;
            this.HoldsDerivatives = holdsDerivatives;
        }

        /// <summary>
        /// Name of the ETP&#39;s credit counterparty. This data is available for all the regions.
        /// </summary>
        /// <value>Name of the ETP&#39;s credit counterparty. This data is available for all the regions.</value>
        [DataMember(Name = "credit", EmitDefaultValue = false)]
        public string Credit { get; set; }

        /// <summary>
        /// Name of the ETP&#39;s swap counterparty. This data is available for all the regions.
        /// </summary>
        /// <value>Name of the ETP&#39;s swap counterparty. This data is available for all the regions.</value>
        [DataMember(Name = "swap", EmitDefaultValue = false)]
        public string Swap { get; set; }

        /// <summary>
        /// Flags ETPs that are expected to hold OTC derivatives in the course of normal fund operations. This data is available for the US and Canada regions.
        /// </summary>
        /// <value>Flags ETPs that are expected to hold OTC derivatives in the course of normal fund operations. This data is available for the US and Canada regions.</value>
        [DataMember(Name = "holdsDerivatives", EmitDefaultValue = true)]
        public bool HoldsDerivatives { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class InlineResponse20014DataCounterParty {\n");
            sb.Append("  Credit: ").Append(Credit).Append("\n");
            sb.Append("  Swap: ").Append(Swap).Append("\n");
            sb.Append("  HoldsDerivatives: ").Append(HoldsDerivatives).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as InlineResponse20014DataCounterParty);
        }

        /// <summary>
        /// Returns true if InlineResponse20014DataCounterParty instances are equal
        /// </summary>
        /// <param name="input">Instance of InlineResponse20014DataCounterParty to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(InlineResponse20014DataCounterParty input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Credit == input.Credit ||
                    (this.Credit != null &&
                    this.Credit.Equals(input.Credit))
                ) && 
                (
                    this.Swap == input.Swap ||
                    (this.Swap != null &&
                    this.Swap.Equals(input.Swap))
                ) && 
                (
                    this.HoldsDerivatives == input.HoldsDerivatives ||
                    this.HoldsDerivatives.Equals(input.HoldsDerivatives)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Credit != null)
                {
                    hashCode = (hashCode * 59) + this.Credit.GetHashCode();
                }
                if (this.Swap != null)
                {
                    hashCode = (hashCode * 59) + this.Swap.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.HoldsDerivatives.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
