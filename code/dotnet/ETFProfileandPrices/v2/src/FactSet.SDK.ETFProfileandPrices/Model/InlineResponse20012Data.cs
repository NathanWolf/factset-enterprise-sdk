/*
 * Prime Developer Trial
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = FactSet.SDK.ETFProfileandPrices.Client.OpenAPIDateConverter;

namespace FactSet.SDK.ETFProfileandPrices.Model
{
    /// <summary>
    /// Score analytics.
    /// </summary>
    [DataContract(Name = "inline_response_200_12_data")]
    public partial class InlineResponse20012Data : IEquatable<InlineResponse20012Data>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="InlineResponse20012Data" /> class.
        /// </summary>
        /// <param name="efficiency">efficiency.</param>
        /// <param name="tradability">tradability.</param>
        /// <param name="fit">fit.</param>
        /// <param name="grade">Combining the efficiency and tradability scores, FactSet assigns a letter grade (A-F) that provides a concise view on how efficient and tradable each ETP is. Available for the regions: US..</param>
        /// <param name="analystPick">If true, this fund has been chosen by the FactSet ETP Analytics Team to provide comprehensive, market-like exposure to an area of the market/segment, keeping costs and liquidity in mind. Available for the regions: US..</param>
        /// <param name="onOpportunitiesList">If true, this fund has been chosen by the FactSet ETP Analytics Team as providing potentially valuable but alternative exposure to the market/segment, keeping costs and liquidity in mind. Available for the regions: US..</param>
        /// <param name="fitRsquared">The degree to which the daily returns of fund NAV and its FactSet designated segment benchmark move up and down in unison, ranging from 1.0 (perfect co-movement) to zero (no relation). Available for the regions: US..</param>
        /// <param name="beta">beta.</param>
        /// <param name="standardDeviationDown">A measure of the variability between the fund&#39;s returns and the FactSet designated segment benchmark returns on days when the fund underperforms the benchmark. Available for the regions: US..</param>
        public InlineResponse20012Data(InlineResponse20012DataEfficiency efficiency = default(InlineResponse20012DataEfficiency), InlineResponse20012DataTradability tradability = default(InlineResponse20012DataTradability), InlineResponse20012DataFit fit = default(InlineResponse20012DataFit), string grade = default(string), bool analystPick = default(bool), bool onOpportunitiesList = default(bool), decimal fitRsquared = default(decimal), InlineResponse20012DataBeta beta = default(InlineResponse20012DataBeta), decimal standardDeviationDown = default(decimal))
        {
            this.Efficiency = efficiency;
            this.Tradability = tradability;
            this.Fit = fit;
            this.Grade = grade;
            this.AnalystPick = analystPick;
            this.OnOpportunitiesList = onOpportunitiesList;
            this.FitRsquared = fitRsquared;
            this.Beta = beta;
            this.StandardDeviationDown = standardDeviationDown;
        }

        /// <summary>
        /// Gets or Sets Efficiency
        /// </summary>
        [DataMember(Name = "efficiency", EmitDefaultValue = false)]
        public InlineResponse20012DataEfficiency Efficiency { get; set; }

        /// <summary>
        /// Gets or Sets Tradability
        /// </summary>
        [DataMember(Name = "tradability", EmitDefaultValue = false)]
        public InlineResponse20012DataTradability Tradability { get; set; }

        /// <summary>
        /// Gets or Sets Fit
        /// </summary>
        [DataMember(Name = "fit", EmitDefaultValue = false)]
        public InlineResponse20012DataFit Fit { get; set; }

        /// <summary>
        /// Combining the efficiency and tradability scores, FactSet assigns a letter grade (A-F) that provides a concise view on how efficient and tradable each ETP is. Available for the regions: US.
        /// </summary>
        /// <value>Combining the efficiency and tradability scores, FactSet assigns a letter grade (A-F) that provides a concise view on how efficient and tradable each ETP is. Available for the regions: US.</value>
        [DataMember(Name = "grade", EmitDefaultValue = false)]
        public string Grade { get; set; }

        /// <summary>
        /// If true, this fund has been chosen by the FactSet ETP Analytics Team to provide comprehensive, market-like exposure to an area of the market/segment, keeping costs and liquidity in mind. Available for the regions: US.
        /// </summary>
        /// <value>If true, this fund has been chosen by the FactSet ETP Analytics Team to provide comprehensive, market-like exposure to an area of the market/segment, keeping costs and liquidity in mind. Available for the regions: US.</value>
        [DataMember(Name = "analystPick", EmitDefaultValue = true)]
        public bool AnalystPick { get; set; }

        /// <summary>
        /// If true, this fund has been chosen by the FactSet ETP Analytics Team as providing potentially valuable but alternative exposure to the market/segment, keeping costs and liquidity in mind. Available for the regions: US.
        /// </summary>
        /// <value>If true, this fund has been chosen by the FactSet ETP Analytics Team as providing potentially valuable but alternative exposure to the market/segment, keeping costs and liquidity in mind. Available for the regions: US.</value>
        [DataMember(Name = "onOpportunitiesList", EmitDefaultValue = true)]
        public bool OnOpportunitiesList { get; set; }

        /// <summary>
        /// The degree to which the daily returns of fund NAV and its FactSet designated segment benchmark move up and down in unison, ranging from 1.0 (perfect co-movement) to zero (no relation). Available for the regions: US.
        /// </summary>
        /// <value>The degree to which the daily returns of fund NAV and its FactSet designated segment benchmark move up and down in unison, ranging from 1.0 (perfect co-movement) to zero (no relation). Available for the regions: US.</value>
        [DataMember(Name = "fitRsquared", EmitDefaultValue = false)]
        public decimal FitRsquared { get; set; }

        /// <summary>
        /// Gets or Sets Beta
        /// </summary>
        [DataMember(Name = "beta", EmitDefaultValue = false)]
        public InlineResponse20012DataBeta Beta { get; set; }

        /// <summary>
        /// A measure of the variability between the fund&#39;s returns and the FactSet designated segment benchmark returns on days when the fund underperforms the benchmark. Available for the regions: US.
        /// </summary>
        /// <value>A measure of the variability between the fund&#39;s returns and the FactSet designated segment benchmark returns on days when the fund underperforms the benchmark. Available for the regions: US.</value>
        [DataMember(Name = "standardDeviationDown", EmitDefaultValue = false)]
        public decimal StandardDeviationDown { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class InlineResponse20012Data {\n");
            sb.Append("  Efficiency: ").Append(Efficiency).Append("\n");
            sb.Append("  Tradability: ").Append(Tradability).Append("\n");
            sb.Append("  Fit: ").Append(Fit).Append("\n");
            sb.Append("  Grade: ").Append(Grade).Append("\n");
            sb.Append("  AnalystPick: ").Append(AnalystPick).Append("\n");
            sb.Append("  OnOpportunitiesList: ").Append(OnOpportunitiesList).Append("\n");
            sb.Append("  FitRsquared: ").Append(FitRsquared).Append("\n");
            sb.Append("  Beta: ").Append(Beta).Append("\n");
            sb.Append("  StandardDeviationDown: ").Append(StandardDeviationDown).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as InlineResponse20012Data);
        }

        /// <summary>
        /// Returns true if InlineResponse20012Data instances are equal
        /// </summary>
        /// <param name="input">Instance of InlineResponse20012Data to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(InlineResponse20012Data input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Efficiency == input.Efficiency ||
                    (this.Efficiency != null &&
                    this.Efficiency.Equals(input.Efficiency))
                ) && 
                (
                    this.Tradability == input.Tradability ||
                    (this.Tradability != null &&
                    this.Tradability.Equals(input.Tradability))
                ) && 
                (
                    this.Fit == input.Fit ||
                    (this.Fit != null &&
                    this.Fit.Equals(input.Fit))
                ) && 
                (
                    this.Grade == input.Grade ||
                    (this.Grade != null &&
                    this.Grade.Equals(input.Grade))
                ) && 
                (
                    this.AnalystPick == input.AnalystPick ||
                    this.AnalystPick.Equals(input.AnalystPick)
                ) && 
                (
                    this.OnOpportunitiesList == input.OnOpportunitiesList ||
                    this.OnOpportunitiesList.Equals(input.OnOpportunitiesList)
                ) && 
                (
                    this.FitRsquared == input.FitRsquared ||
                    this.FitRsquared.Equals(input.FitRsquared)
                ) && 
                (
                    this.Beta == input.Beta ||
                    (this.Beta != null &&
                    this.Beta.Equals(input.Beta))
                ) && 
                (
                    this.StandardDeviationDown == input.StandardDeviationDown ||
                    this.StandardDeviationDown.Equals(input.StandardDeviationDown)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Efficiency != null)
                {
                    hashCode = (hashCode * 59) + this.Efficiency.GetHashCode();
                }
                if (this.Tradability != null)
                {
                    hashCode = (hashCode * 59) + this.Tradability.GetHashCode();
                }
                if (this.Fit != null)
                {
                    hashCode = (hashCode * 59) + this.Fit.GetHashCode();
                }
                if (this.Grade != null)
                {
                    hashCode = (hashCode * 59) + this.Grade.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.AnalystPick.GetHashCode();
                hashCode = (hashCode * 59) + this.OnOpportunitiesList.GetHashCode();
                hashCode = (hashCode * 59) + this.FitRsquared.GetHashCode();
                if (this.Beta != null)
                {
                    hashCode = (hashCode * 59) + this.Beta.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.StandardDeviationDown.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
