/*
 * Prime Developer Trial
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = FactSet.SDK.ETFProfileandPrices.Client.OpenAPIDateConverter;

namespace FactSet.SDK.ETFProfileandPrices.Model
{
    /// <summary>
    /// Distribution.
    /// </summary>
    [DataContract(Name = "inline_response_200_12_data")]
    public partial class InlineResponse20012Data : IEquatable<InlineResponse20012Data>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="InlineResponse20012Data" /> class.
        /// </summary>
        /// <param name="dividend">dividend.</param>
        /// <param name="capitalGains">capitalGains.</param>
        /// <param name="totalDistribution">Total Distribution on exDividend-date. Values are in the ETP&#39;s listing currency in the ISO 4217 format. This data is available for all regions. Please refer currency.listing in /factset/etf/getBySymbol for currency value..</param>
        /// <param name="distributionYield">Total 12-month distribution of the ETP multiplied by split factor then divided by its net asset value. Data is split adjusted. This data is available for the US regions..</param>
        public InlineResponse20012Data(InlineResponse20012DataDividend dividend = default(InlineResponse20012DataDividend), InlineResponse20012DataCapitalGains capitalGains = default(InlineResponse20012DataCapitalGains), decimal totalDistribution = default(decimal), decimal distributionYield = default(decimal))
        {
            this.Dividend = dividend;
            this.CapitalGains = capitalGains;
            this.TotalDistribution = totalDistribution;
            this.DistributionYield = distributionYield;
        }

        /// <summary>
        /// Gets or Sets Dividend
        /// </summary>
        [DataMember(Name = "dividend", EmitDefaultValue = false)]
        public InlineResponse20012DataDividend Dividend { get; set; }

        /// <summary>
        /// Gets or Sets CapitalGains
        /// </summary>
        [DataMember(Name = "capitalGains", EmitDefaultValue = false)]
        public InlineResponse20012DataCapitalGains CapitalGains { get; set; }

        /// <summary>
        /// Total Distribution on exDividend-date. Values are in the ETP&#39;s listing currency in the ISO 4217 format. This data is available for all regions. Please refer currency.listing in /factset/etf/getBySymbol for currency value.
        /// </summary>
        /// <value>Total Distribution on exDividend-date. Values are in the ETP&#39;s listing currency in the ISO 4217 format. This data is available for all regions. Please refer currency.listing in /factset/etf/getBySymbol for currency value.</value>
        [DataMember(Name = "totalDistribution", EmitDefaultValue = false)]
        public decimal TotalDistribution { get; set; }

        /// <summary>
        /// Total 12-month distribution of the ETP multiplied by split factor then divided by its net asset value. Data is split adjusted. This data is available for the US regions.
        /// </summary>
        /// <value>Total 12-month distribution of the ETP multiplied by split factor then divided by its net asset value. Data is split adjusted. This data is available for the US regions.</value>
        [DataMember(Name = "distributionYield", EmitDefaultValue = false)]
        public decimal DistributionYield { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class InlineResponse20012Data {\n");
            sb.Append("  Dividend: ").Append(Dividend).Append("\n");
            sb.Append("  CapitalGains: ").Append(CapitalGains).Append("\n");
            sb.Append("  TotalDistribution: ").Append(TotalDistribution).Append("\n");
            sb.Append("  DistributionYield: ").Append(DistributionYield).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as InlineResponse20012Data);
        }

        /// <summary>
        /// Returns true if InlineResponse20012Data instances are equal
        /// </summary>
        /// <param name="input">Instance of InlineResponse20012Data to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(InlineResponse20012Data input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Dividend == input.Dividend ||
                    (this.Dividend != null &&
                    this.Dividend.Equals(input.Dividend))
                ) && 
                (
                    this.CapitalGains == input.CapitalGains ||
                    (this.CapitalGains != null &&
                    this.CapitalGains.Equals(input.CapitalGains))
                ) && 
                (
                    this.TotalDistribution == input.TotalDistribution ||
                    this.TotalDistribution.Equals(input.TotalDistribution)
                ) && 
                (
                    this.DistributionYield == input.DistributionYield ||
                    this.DistributionYield.Equals(input.DistributionYield)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Dividend != null)
                    hashCode = hashCode * 59 + this.Dividend.GetHashCode();
                if (this.CapitalGains != null)
                    hashCode = hashCode * 59 + this.CapitalGains.GetHashCode();
                hashCode = hashCode * 59 + this.TotalDistribution.GetHashCode();
                hashCode = hashCode * 59 + this.DistributionYield.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
