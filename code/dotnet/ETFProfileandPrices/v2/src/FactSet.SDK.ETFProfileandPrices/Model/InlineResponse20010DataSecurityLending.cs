/*
 * Prime Developer Trial
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = FactSet.SDK.ETFProfileandPrices.Client.OpenAPIDateConverter;

namespace FactSet.SDK.ETFProfileandPrices.Model
{
    /// <summary>
    /// Security lending.
    /// </summary>
    [DataContract(Name = "inline_response_200_10_data_securityLending")]
    public partial class InlineResponse20010DataSecurityLending : IEquatable<InlineResponse20010DataSecurityLending>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="InlineResponse20010DataSecurityLending" /> class.
        /// </summary>
        /// <param name="isAllowed">Indicates whether a fund is permitted to lend securities based on their legal structure. Available for the regions: US, Europe, and Canada..</param>
        /// <param name="isActive">Indicates that revenue from lending securities was reported on the most recent annual or semi-annual report. Available for the regions: US, Europe, and Canada..</param>
        /// <param name="revenue">The fraction of securities lending revenue that is rebated to the fund rather than kept by the issuer. Available for the regions: US, Europe, and Canada..</param>
        /// <param name="revenuePolicy">English description of the securities lending revenue policy, if any. Available for the regions: US, Europe, and Canada..</param>
        public InlineResponse20010DataSecurityLending(bool isAllowed = default(bool), bool isActive = default(bool), decimal revenue = default(decimal), string revenuePolicy = default(string))
        {
            this.IsAllowed = isAllowed;
            this.IsActive = isActive;
            this.Revenue = revenue;
            this.RevenuePolicy = revenuePolicy;
        }

        /// <summary>
        /// Indicates whether a fund is permitted to lend securities based on their legal structure. Available for the regions: US, Europe, and Canada.
        /// </summary>
        /// <value>Indicates whether a fund is permitted to lend securities based on their legal structure. Available for the regions: US, Europe, and Canada.</value>
        [DataMember(Name = "isAllowed", EmitDefaultValue = true)]
        public bool IsAllowed { get; set; }

        /// <summary>
        /// Indicates that revenue from lending securities was reported on the most recent annual or semi-annual report. Available for the regions: US, Europe, and Canada.
        /// </summary>
        /// <value>Indicates that revenue from lending securities was reported on the most recent annual or semi-annual report. Available for the regions: US, Europe, and Canada.</value>
        [DataMember(Name = "isActive", EmitDefaultValue = true)]
        public bool IsActive { get; set; }

        /// <summary>
        /// The fraction of securities lending revenue that is rebated to the fund rather than kept by the issuer. Available for the regions: US, Europe, and Canada.
        /// </summary>
        /// <value>The fraction of securities lending revenue that is rebated to the fund rather than kept by the issuer. Available for the regions: US, Europe, and Canada.</value>
        [DataMember(Name = "revenue", EmitDefaultValue = false)]
        public decimal Revenue { get; set; }

        /// <summary>
        /// English description of the securities lending revenue policy, if any. Available for the regions: US, Europe, and Canada.
        /// </summary>
        /// <value>English description of the securities lending revenue policy, if any. Available for the regions: US, Europe, and Canada.</value>
        [DataMember(Name = "revenuePolicy", EmitDefaultValue = false)]
        public string RevenuePolicy { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class InlineResponse20010DataSecurityLending {\n");
            sb.Append("  IsAllowed: ").Append(IsAllowed).Append("\n");
            sb.Append("  IsActive: ").Append(IsActive).Append("\n");
            sb.Append("  Revenue: ").Append(Revenue).Append("\n");
            sb.Append("  RevenuePolicy: ").Append(RevenuePolicy).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as InlineResponse20010DataSecurityLending);
        }

        /// <summary>
        /// Returns true if InlineResponse20010DataSecurityLending instances are equal
        /// </summary>
        /// <param name="input">Instance of InlineResponse20010DataSecurityLending to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(InlineResponse20010DataSecurityLending input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.IsAllowed == input.IsAllowed ||
                    this.IsAllowed.Equals(input.IsAllowed)
                ) && 
                (
                    this.IsActive == input.IsActive ||
                    this.IsActive.Equals(input.IsActive)
                ) && 
                (
                    this.Revenue == input.Revenue ||
                    this.Revenue.Equals(input.Revenue)
                ) && 
                (
                    this.RevenuePolicy == input.RevenuePolicy ||
                    (this.RevenuePolicy != null &&
                    this.RevenuePolicy.Equals(input.RevenuePolicy))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.IsAllowed.GetHashCode();
                hashCode = (hashCode * 59) + this.IsActive.GetHashCode();
                hashCode = (hashCode * 59) + this.Revenue.GetHashCode();
                if (this.RevenuePolicy != null)
                {
                    hashCode = (hashCode * 59) + this.RevenuePolicy.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
