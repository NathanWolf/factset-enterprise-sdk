/*
 * Prime Developer Trial
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = FactSet.SDK.ETFProfileandPrices.Client.OpenAPIDateConverter;

namespace FactSet.SDK.ETFProfileandPrices.Model
{
    /// <summary>
    /// Taxes and fees.
    /// </summary>
    [DataContract(Name = "inline_response_200_32_data")]
    public partial class InlineResponse20032Data : IEquatable<InlineResponse20032Data>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="InlineResponse20032Data" /> class.
        /// </summary>
        /// <param name="maxCapitalGainsRate">maxCapitalGainsRate.</param>
        /// <param name="dividendTreatment">Describes whether dividend income received by the ETP is distributed to ETP shareholders or capitalised (reinvested) into the ETP, text and standardized value available. This data is available for all the Canada and Europe regions..</param>
        /// <param name="distributeK1">Flags ETPs that distribute K-1 tax forms. This data is available for the US regions..</param>
        /// <param name="taxType">Type of the tax applicable on the distribution. This data is available for the US regions..</param>
        /// <param name="taxOnDistributions">Tax treatment of the ETP&#39;s regular distributions. This data is available for the US regions..</param>
        /// <param name="expenseRatio">expenseRatio.</param>
        /// <param name="potentialCostIncreaseDate">Expiration date of any fee waivers. This data is available for the US and Canada regions..</param>
        /// <param name="contractAdvisoryFee">The advisors fee excluding any additional costs or fees; A subset of the total expense ratio. This data is available for the Canada regions..</param>
        /// <param name="capitalGains">Realized capital gains or losses reported on the ETP&#39;s most recent annual or semi-annual report. Gains must generally be paid out as a distribution at year-end, while losses can be banked to offset future gains. This data is available only for the US regions..</param>
        /// <param name="capitalGainsDistirbutions3Y">The average annual capital gains paid out to shareholders over the past 3 calendar years, measured as a percent of net asset value (NAV) on the final trading day of each previous year. This data is available for the US region only..</param>
        /// <param name="managementExpenseRatio">Total net annual cost associated with holding the ETP, expressed as a percentage. This data is available for the Canada regions..</param>
        /// <param name="managementFee">Annual fee collected by fund manager, expressed as a percentage. This data is available for the Canada region..</param>
        /// <param name="tradingExpenseRatio">Estimated annual costs associated with trading the underlying holdings. This data is available for the Canada region..</param>
        /// <param name="feeWaiver">A reduction in annual ETP expenses, expressed as a percentage. This data is available for the Canada region..</param>
        public InlineResponse20032Data(InlineResponse20032DataMaxCapitalGainsRate maxCapitalGainsRate = default(InlineResponse20032DataMaxCapitalGainsRate), string dividendTreatment = default(string), string distributeK1 = default(string), string taxType = default(string), string taxOnDistributions = default(string), InlineResponse20032DataExpenseRatio expenseRatio = default(InlineResponse20032DataExpenseRatio), DateTime potentialCostIncreaseDate = default(DateTime), decimal contractAdvisoryFee = default(decimal), decimal capitalGains = default(decimal), decimal capitalGainsDistirbutions3Y = default(decimal), decimal managementExpenseRatio = default(decimal), decimal managementFee = default(decimal), decimal tradingExpenseRatio = default(decimal), string feeWaiver = default(string))
        {
            this.MaxCapitalGainsRate = maxCapitalGainsRate;
            this.DividendTreatment = dividendTreatment;
            this.DistributeK1 = distributeK1;
            this.TaxType = taxType;
            this.TaxOnDistributions = taxOnDistributions;
            this.ExpenseRatio = expenseRatio;
            this.PotentialCostIncreaseDate = potentialCostIncreaseDate;
            this.ContractAdvisoryFee = contractAdvisoryFee;
            this.CapitalGains = capitalGains;
            this.CapitalGainsDistirbutions3Y = capitalGainsDistirbutions3Y;
            this.ManagementExpenseRatio = managementExpenseRatio;
            this.ManagementFee = managementFee;
            this.TradingExpenseRatio = tradingExpenseRatio;
            this.FeeWaiver = feeWaiver;
        }

        /// <summary>
        /// Gets or Sets MaxCapitalGainsRate
        /// </summary>
        [DataMember(Name = "maxCapitalGainsRate", EmitDefaultValue = false)]
        public InlineResponse20032DataMaxCapitalGainsRate MaxCapitalGainsRate { get; set; }

        /// <summary>
        /// Describes whether dividend income received by the ETP is distributed to ETP shareholders or capitalised (reinvested) into the ETP, text and standardized value available. This data is available for all the Canada and Europe regions.
        /// </summary>
        /// <value>Describes whether dividend income received by the ETP is distributed to ETP shareholders or capitalised (reinvested) into the ETP, text and standardized value available. This data is available for all the Canada and Europe regions.</value>
        [DataMember(Name = "dividendTreatment", EmitDefaultValue = false)]
        public string DividendTreatment { get; set; }

        /// <summary>
        /// Flags ETPs that distribute K-1 tax forms. This data is available for the US regions.
        /// </summary>
        /// <value>Flags ETPs that distribute K-1 tax forms. This data is available for the US regions.</value>
        [DataMember(Name = "distributeK1", EmitDefaultValue = false)]
        public string DistributeK1 { get; set; }

        /// <summary>
        /// Type of the tax applicable on the distribution. This data is available for the US regions.
        /// </summary>
        /// <value>Type of the tax applicable on the distribution. This data is available for the US regions.</value>
        [DataMember(Name = "taxType", EmitDefaultValue = false)]
        public string TaxType { get; set; }

        /// <summary>
        /// Tax treatment of the ETP&#39;s regular distributions. This data is available for the US regions.
        /// </summary>
        /// <value>Tax treatment of the ETP&#39;s regular distributions. This data is available for the US regions.</value>
        [DataMember(Name = "taxOnDistributions", EmitDefaultValue = false)]
        public string TaxOnDistributions { get; set; }

        /// <summary>
        /// Gets or Sets ExpenseRatio
        /// </summary>
        [DataMember(Name = "expenseRatio", EmitDefaultValue = false)]
        public InlineResponse20032DataExpenseRatio ExpenseRatio { get; set; }

        /// <summary>
        /// Expiration date of any fee waivers. This data is available for the US and Canada regions.
        /// </summary>
        /// <value>Expiration date of any fee waivers. This data is available for the US and Canada regions.</value>
        [DataMember(Name = "potentialCostIncreaseDate", EmitDefaultValue = false)]
        [JsonConverter(typeof(OpenAPIDateConverter))]
        public DateTime PotentialCostIncreaseDate { get; set; }

        /// <summary>
        /// The advisors fee excluding any additional costs or fees; A subset of the total expense ratio. This data is available for the Canada regions.
        /// </summary>
        /// <value>The advisors fee excluding any additional costs or fees; A subset of the total expense ratio. This data is available for the Canada regions.</value>
        [DataMember(Name = "contractAdvisoryFee", EmitDefaultValue = false)]
        public decimal ContractAdvisoryFee { get; set; }

        /// <summary>
        /// Realized capital gains or losses reported on the ETP&#39;s most recent annual or semi-annual report. Gains must generally be paid out as a distribution at year-end, while losses can be banked to offset future gains. This data is available only for the US regions.
        /// </summary>
        /// <value>Realized capital gains or losses reported on the ETP&#39;s most recent annual or semi-annual report. Gains must generally be paid out as a distribution at year-end, while losses can be banked to offset future gains. This data is available only for the US regions.</value>
        [DataMember(Name = "capitalGains", EmitDefaultValue = false)]
        public decimal CapitalGains { get; set; }

        /// <summary>
        /// The average annual capital gains paid out to shareholders over the past 3 calendar years, measured as a percent of net asset value (NAV) on the final trading day of each previous year. This data is available for the US region only.
        /// </summary>
        /// <value>The average annual capital gains paid out to shareholders over the past 3 calendar years, measured as a percent of net asset value (NAV) on the final trading day of each previous year. This data is available for the US region only.</value>
        [DataMember(Name = "capitalGainsDistirbutions3Y", EmitDefaultValue = false)]
        public decimal CapitalGainsDistirbutions3Y { get; set; }

        /// <summary>
        /// Total net annual cost associated with holding the ETP, expressed as a percentage. This data is available for the Canada regions.
        /// </summary>
        /// <value>Total net annual cost associated with holding the ETP, expressed as a percentage. This data is available for the Canada regions.</value>
        [DataMember(Name = "managementExpenseRatio", EmitDefaultValue = false)]
        public decimal ManagementExpenseRatio { get; set; }

        /// <summary>
        /// Annual fee collected by fund manager, expressed as a percentage. This data is available for the Canada region.
        /// </summary>
        /// <value>Annual fee collected by fund manager, expressed as a percentage. This data is available for the Canada region.</value>
        [DataMember(Name = "managementFee", EmitDefaultValue = false)]
        public decimal ManagementFee { get; set; }

        /// <summary>
        /// Estimated annual costs associated with trading the underlying holdings. This data is available for the Canada region.
        /// </summary>
        /// <value>Estimated annual costs associated with trading the underlying holdings. This data is available for the Canada region.</value>
        [DataMember(Name = "tradingExpenseRatio", EmitDefaultValue = false)]
        public decimal TradingExpenseRatio { get; set; }

        /// <summary>
        /// A reduction in annual ETP expenses, expressed as a percentage. This data is available for the Canada region.
        /// </summary>
        /// <value>A reduction in annual ETP expenses, expressed as a percentage. This data is available for the Canada region.</value>
        [DataMember(Name = "feeWaiver", EmitDefaultValue = false)]
        public string FeeWaiver { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class InlineResponse20032Data {\n");
            sb.Append("  MaxCapitalGainsRate: ").Append(MaxCapitalGainsRate).Append("\n");
            sb.Append("  DividendTreatment: ").Append(DividendTreatment).Append("\n");
            sb.Append("  DistributeK1: ").Append(DistributeK1).Append("\n");
            sb.Append("  TaxType: ").Append(TaxType).Append("\n");
            sb.Append("  TaxOnDistributions: ").Append(TaxOnDistributions).Append("\n");
            sb.Append("  ExpenseRatio: ").Append(ExpenseRatio).Append("\n");
            sb.Append("  PotentialCostIncreaseDate: ").Append(PotentialCostIncreaseDate).Append("\n");
            sb.Append("  ContractAdvisoryFee: ").Append(ContractAdvisoryFee).Append("\n");
            sb.Append("  CapitalGains: ").Append(CapitalGains).Append("\n");
            sb.Append("  CapitalGainsDistirbutions3Y: ").Append(CapitalGainsDistirbutions3Y).Append("\n");
            sb.Append("  ManagementExpenseRatio: ").Append(ManagementExpenseRatio).Append("\n");
            sb.Append("  ManagementFee: ").Append(ManagementFee).Append("\n");
            sb.Append("  TradingExpenseRatio: ").Append(TradingExpenseRatio).Append("\n");
            sb.Append("  FeeWaiver: ").Append(FeeWaiver).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as InlineResponse20032Data);
        }

        /// <summary>
        /// Returns true if InlineResponse20032Data instances are equal
        /// </summary>
        /// <param name="input">Instance of InlineResponse20032Data to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(InlineResponse20032Data input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.MaxCapitalGainsRate == input.MaxCapitalGainsRate ||
                    (this.MaxCapitalGainsRate != null &&
                    this.MaxCapitalGainsRate.Equals(input.MaxCapitalGainsRate))
                ) && 
                (
                    this.DividendTreatment == input.DividendTreatment ||
                    (this.DividendTreatment != null &&
                    this.DividendTreatment.Equals(input.DividendTreatment))
                ) && 
                (
                    this.DistributeK1 == input.DistributeK1 ||
                    (this.DistributeK1 != null &&
                    this.DistributeK1.Equals(input.DistributeK1))
                ) && 
                (
                    this.TaxType == input.TaxType ||
                    (this.TaxType != null &&
                    this.TaxType.Equals(input.TaxType))
                ) && 
                (
                    this.TaxOnDistributions == input.TaxOnDistributions ||
                    (this.TaxOnDistributions != null &&
                    this.TaxOnDistributions.Equals(input.TaxOnDistributions))
                ) && 
                (
                    this.ExpenseRatio == input.ExpenseRatio ||
                    (this.ExpenseRatio != null &&
                    this.ExpenseRatio.Equals(input.ExpenseRatio))
                ) && 
                (
                    this.PotentialCostIncreaseDate == input.PotentialCostIncreaseDate ||
                    (this.PotentialCostIncreaseDate != null &&
                    this.PotentialCostIncreaseDate.Equals(input.PotentialCostIncreaseDate))
                ) && 
                (
                    this.ContractAdvisoryFee == input.ContractAdvisoryFee ||
                    this.ContractAdvisoryFee.Equals(input.ContractAdvisoryFee)
                ) && 
                (
                    this.CapitalGains == input.CapitalGains ||
                    this.CapitalGains.Equals(input.CapitalGains)
                ) && 
                (
                    this.CapitalGainsDistirbutions3Y == input.CapitalGainsDistirbutions3Y ||
                    this.CapitalGainsDistirbutions3Y.Equals(input.CapitalGainsDistirbutions3Y)
                ) && 
                (
                    this.ManagementExpenseRatio == input.ManagementExpenseRatio ||
                    this.ManagementExpenseRatio.Equals(input.ManagementExpenseRatio)
                ) && 
                (
                    this.ManagementFee == input.ManagementFee ||
                    this.ManagementFee.Equals(input.ManagementFee)
                ) && 
                (
                    this.TradingExpenseRatio == input.TradingExpenseRatio ||
                    this.TradingExpenseRatio.Equals(input.TradingExpenseRatio)
                ) && 
                (
                    this.FeeWaiver == input.FeeWaiver ||
                    (this.FeeWaiver != null &&
                    this.FeeWaiver.Equals(input.FeeWaiver))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.MaxCapitalGainsRate != null)
                {
                    hashCode = (hashCode * 59) + this.MaxCapitalGainsRate.GetHashCode();
                }
                if (this.DividendTreatment != null)
                {
                    hashCode = (hashCode * 59) + this.DividendTreatment.GetHashCode();
                }
                if (this.DistributeK1 != null)
                {
                    hashCode = (hashCode * 59) + this.DistributeK1.GetHashCode();
                }
                if (this.TaxType != null)
                {
                    hashCode = (hashCode * 59) + this.TaxType.GetHashCode();
                }
                if (this.TaxOnDistributions != null)
                {
                    hashCode = (hashCode * 59) + this.TaxOnDistributions.GetHashCode();
                }
                if (this.ExpenseRatio != null)
                {
                    hashCode = (hashCode * 59) + this.ExpenseRatio.GetHashCode();
                }
                if (this.PotentialCostIncreaseDate != null)
                {
                    hashCode = (hashCode * 59) + this.PotentialCostIncreaseDate.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.ContractAdvisoryFee.GetHashCode();
                hashCode = (hashCode * 59) + this.CapitalGains.GetHashCode();
                hashCode = (hashCode * 59) + this.CapitalGainsDistirbutions3Y.GetHashCode();
                hashCode = (hashCode * 59) + this.ManagementExpenseRatio.GetHashCode();
                hashCode = (hashCode * 59) + this.ManagementFee.GetHashCode();
                hashCode = (hashCode * 59) + this.TradingExpenseRatio.GetHashCode();
                if (this.FeeWaiver != null)
                {
                    hashCode = (hashCode * 59) + this.FeeWaiver.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
