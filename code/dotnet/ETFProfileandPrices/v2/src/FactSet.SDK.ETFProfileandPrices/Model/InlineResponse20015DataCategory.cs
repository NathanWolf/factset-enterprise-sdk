/*
 * Prime Developer Trial
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = FactSet.SDK.ETFProfileandPrices.Client.OpenAPIDateConverter;

namespace FactSet.SDK.ETFProfileandPrices.Model
{
    /// <summary>
    /// category.
    /// </summary>
    [DataContract(Name = "inline_response_200_15_data_category")]
    public partial class InlineResponse20015DataCategory : IEquatable<InlineResponse20015DataCategory>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="InlineResponse20015DataCategory" /> class.
        /// </summary>
        /// <param name="broad">The 1st of 3 asset-class-specific, hierarchical exposure tiers; the broadest category the ETP falls under within its asset class (e.g., Size &amp; Style, Sector, Precious Metals, Absolute Returns), text and standardized value available. This data is available for all the regions. Please refer /factset/etf/class/category/broad/list for possible values..</param>
        /// <param name="focus">The 2nd of 3 asset-class-specific, hierarchical exposure tiers; the ETP&#39;s classification within its category (e.g., Small Cap, Energy, Palladium, Long/Short), text and standardized value available. This data is available for all the regions. Please refer /factset/etf/class/category/focus/list for possible values..</param>
        /// <param name="niche">The 3rd of 3 asset-class-specific, hierarchical exposure tiers; The ETP&#39;s classification within its Focus. Most granular tier of exposure sort (e.g., Growth, Coal, Physically held, Merger Arbitrage), text and standardized value available. This data is available for all the regions. Please refer /factset/etf/class/category/niche/list for possible values..</param>
        public InlineResponse20015DataCategory(string broad = default(string), string focus = default(string), string niche = default(string))
        {
            this.Broad = broad;
            this.Focus = focus;
            this.Niche = niche;
        }

        /// <summary>
        /// The 1st of 3 asset-class-specific, hierarchical exposure tiers; the broadest category the ETP falls under within its asset class (e.g., Size &amp; Style, Sector, Precious Metals, Absolute Returns), text and standardized value available. This data is available for all the regions. Please refer /factset/etf/class/category/broad/list for possible values.
        /// </summary>
        /// <value>The 1st of 3 asset-class-specific, hierarchical exposure tiers; the broadest category the ETP falls under within its asset class (e.g., Size &amp; Style, Sector, Precious Metals, Absolute Returns), text and standardized value available. This data is available for all the regions. Please refer /factset/etf/class/category/broad/list for possible values.</value>
        [DataMember(Name = "broad", EmitDefaultValue = false)]
        public string Broad { get; set; }

        /// <summary>
        /// The 2nd of 3 asset-class-specific, hierarchical exposure tiers; the ETP&#39;s classification within its category (e.g., Small Cap, Energy, Palladium, Long/Short), text and standardized value available. This data is available for all the regions. Please refer /factset/etf/class/category/focus/list for possible values.
        /// </summary>
        /// <value>The 2nd of 3 asset-class-specific, hierarchical exposure tiers; the ETP&#39;s classification within its category (e.g., Small Cap, Energy, Palladium, Long/Short), text and standardized value available. This data is available for all the regions. Please refer /factset/etf/class/category/focus/list for possible values.</value>
        [DataMember(Name = "focus", EmitDefaultValue = false)]
        public string Focus { get; set; }

        /// <summary>
        /// The 3rd of 3 asset-class-specific, hierarchical exposure tiers; The ETP&#39;s classification within its Focus. Most granular tier of exposure sort (e.g., Growth, Coal, Physically held, Merger Arbitrage), text and standardized value available. This data is available for all the regions. Please refer /factset/etf/class/category/niche/list for possible values.
        /// </summary>
        /// <value>The 3rd of 3 asset-class-specific, hierarchical exposure tiers; The ETP&#39;s classification within its Focus. Most granular tier of exposure sort (e.g., Growth, Coal, Physically held, Merger Arbitrage), text and standardized value available. This data is available for all the regions. Please refer /factset/etf/class/category/niche/list for possible values.</value>
        [DataMember(Name = "niche", EmitDefaultValue = false)]
        public string Niche { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class InlineResponse20015DataCategory {\n");
            sb.Append("  Broad: ").Append(Broad).Append("\n");
            sb.Append("  Focus: ").Append(Focus).Append("\n");
            sb.Append("  Niche: ").Append(Niche).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as InlineResponse20015DataCategory);
        }

        /// <summary>
        /// Returns true if InlineResponse20015DataCategory instances are equal
        /// </summary>
        /// <param name="input">Instance of InlineResponse20015DataCategory to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(InlineResponse20015DataCategory input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Broad == input.Broad ||
                    (this.Broad != null &&
                    this.Broad.Equals(input.Broad))
                ) && 
                (
                    this.Focus == input.Focus ||
                    (this.Focus != null &&
                    this.Focus.Equals(input.Focus))
                ) && 
                (
                    this.Niche == input.Niche ||
                    (this.Niche != null &&
                    this.Niche.Equals(input.Niche))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Broad != null)
                {
                    hashCode = (hashCode * 59) + this.Broad.GetHashCode();
                }
                if (this.Focus != null)
                {
                    hashCode = (hashCode * 59) + this.Focus.GetHashCode();
                }
                if (this.Niche != null)
                {
                    hashCode = (hashCode * 59) + this.Niche.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
