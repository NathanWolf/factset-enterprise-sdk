/*
 * Prime Developer Trial
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = FactSet.SDK.ETFProfileandPrices.Client.OpenAPIDateConverter;

namespace FactSet.SDK.ETFProfileandPrices.Model
{
    /// <summary>
    /// Tracking difference.
    /// </summary>
    [DataContract(Name = "inline_response_200_13_data_trackingDifference")]
    public partial class InlineResponse20013DataTrackingDifference : IEquatable<InlineResponse20013DataTrackingDifference>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="InlineResponse20013DataTrackingDifference" /> class.
        /// </summary>
        /// <param name="median">The median difference between NAV and fund index returns over a one-year set of rolling 12 month holding periods. This statistic captures all inputs to tracking difference: expense ratio, optimization, securities lending income, and tax recapture. Available for the regions: US..</param>
        /// <param name="maxUpside">Greatest, or least negative 12-month difference between NAV and index returns over a rolling 12 month period. Available for the regions: US..</param>
        /// <param name="maxDownside">Most negative or least positive 12-month difference between NAV and index returns over a rolling 12 month period. Available for the regions: US..</param>
        public InlineResponse20013DataTrackingDifference(decimal median = default(decimal), decimal maxUpside = default(decimal), decimal maxDownside = default(decimal))
        {
            this.Median = median;
            this.MaxUpside = maxUpside;
            this.MaxDownside = maxDownside;
        }

        /// <summary>
        /// The median difference between NAV and fund index returns over a one-year set of rolling 12 month holding periods. This statistic captures all inputs to tracking difference: expense ratio, optimization, securities lending income, and tax recapture. Available for the regions: US.
        /// </summary>
        /// <value>The median difference between NAV and fund index returns over a one-year set of rolling 12 month holding periods. This statistic captures all inputs to tracking difference: expense ratio, optimization, securities lending income, and tax recapture. Available for the regions: US.</value>
        [DataMember(Name = "median", EmitDefaultValue = false)]
        public decimal Median { get; set; }

        /// <summary>
        /// Greatest, or least negative 12-month difference between NAV and index returns over a rolling 12 month period. Available for the regions: US.
        /// </summary>
        /// <value>Greatest, or least negative 12-month difference between NAV and index returns over a rolling 12 month period. Available for the regions: US.</value>
        [DataMember(Name = "maxUpside", EmitDefaultValue = false)]
        public decimal MaxUpside { get; set; }

        /// <summary>
        /// Most negative or least positive 12-month difference between NAV and index returns over a rolling 12 month period. Available for the regions: US.
        /// </summary>
        /// <value>Most negative or least positive 12-month difference between NAV and index returns over a rolling 12 month period. Available for the regions: US.</value>
        [DataMember(Name = "maxDownside", EmitDefaultValue = false)]
        public decimal MaxDownside { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class InlineResponse20013DataTrackingDifference {\n");
            sb.Append("  Median: ").Append(Median).Append("\n");
            sb.Append("  MaxUpside: ").Append(MaxUpside).Append("\n");
            sb.Append("  MaxDownside: ").Append(MaxDownside).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as InlineResponse20013DataTrackingDifference);
        }

        /// <summary>
        /// Returns true if InlineResponse20013DataTrackingDifference instances are equal
        /// </summary>
        /// <param name="input">Instance of InlineResponse20013DataTrackingDifference to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(InlineResponse20013DataTrackingDifference input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Median == input.Median ||
                    this.Median.Equals(input.Median)
                ) && 
                (
                    this.MaxUpside == input.MaxUpside ||
                    this.MaxUpside.Equals(input.MaxUpside)
                ) && 
                (
                    this.MaxDownside == input.MaxDownside ||
                    this.MaxDownside.Equals(input.MaxDownside)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.Median.GetHashCode();
                hashCode = (hashCode * 59) + this.MaxUpside.GetHashCode();
                hashCode = (hashCode * 59) + this.MaxDownside.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
