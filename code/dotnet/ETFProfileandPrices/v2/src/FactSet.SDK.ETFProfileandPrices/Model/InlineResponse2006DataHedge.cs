/*
 * Prime Developer Trial
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = FactSet.SDK.ETFProfileandPrices.Client.OpenAPIDateConverter;

namespace FactSet.SDK.ETFProfileandPrices.Model
{
    /// <summary>
    /// Hedge.
    /// </summary>
    [DataContract(Name = "inline_response_200_6_data_hedge")]
    public partial class InlineResponse2006DataHedge : IEquatable<InlineResponse2006DataHedge>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="InlineResponse2006DataHedge" /> class.
        /// </summary>
        /// <param name="isHedged">Flags ETPs that are hedged to eliminate or reduce foreign currency exposure for US investors. This data is available for all the regions..</param>
        /// <param name="sourceCurrency">For currency-hedged funds, the values shows foreign currency the ETP is hedged against. Currency code is in ISO 4217 format. This data is available for all the regions..</param>
        /// <param name="targetCurrency">For currency-hedged funds, the currency the ETP is exposed to after hedging. Currency code is in ISO 4217 format. This data is available for all the regions..</param>
        public InlineResponse2006DataHedge(bool isHedged = default(bool), string sourceCurrency = default(string), string targetCurrency = default(string))
        {
            this.IsHedged = isHedged;
            this.SourceCurrency = sourceCurrency;
            this.TargetCurrency = targetCurrency;
        }

        /// <summary>
        /// Flags ETPs that are hedged to eliminate or reduce foreign currency exposure for US investors. This data is available for all the regions.
        /// </summary>
        /// <value>Flags ETPs that are hedged to eliminate or reduce foreign currency exposure for US investors. This data is available for all the regions.</value>
        [DataMember(Name = "isHedged", EmitDefaultValue = true)]
        public bool IsHedged { get; set; }

        /// <summary>
        /// For currency-hedged funds, the values shows foreign currency the ETP is hedged against. Currency code is in ISO 4217 format. This data is available for all the regions.
        /// </summary>
        /// <value>For currency-hedged funds, the values shows foreign currency the ETP is hedged against. Currency code is in ISO 4217 format. This data is available for all the regions.</value>
        [DataMember(Name = "sourceCurrency", EmitDefaultValue = false)]
        public string SourceCurrency { get; set; }

        /// <summary>
        /// For currency-hedged funds, the currency the ETP is exposed to after hedging. Currency code is in ISO 4217 format. This data is available for all the regions.
        /// </summary>
        /// <value>For currency-hedged funds, the currency the ETP is exposed to after hedging. Currency code is in ISO 4217 format. This data is available for all the regions.</value>
        [DataMember(Name = "targetCurrency", EmitDefaultValue = false)]
        public string TargetCurrency { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class InlineResponse2006DataHedge {\n");
            sb.Append("  IsHedged: ").Append(IsHedged).Append("\n");
            sb.Append("  SourceCurrency: ").Append(SourceCurrency).Append("\n");
            sb.Append("  TargetCurrency: ").Append(TargetCurrency).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as InlineResponse2006DataHedge);
        }

        /// <summary>
        /// Returns true if InlineResponse2006DataHedge instances are equal
        /// </summary>
        /// <param name="input">Instance of InlineResponse2006DataHedge to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(InlineResponse2006DataHedge input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.IsHedged == input.IsHedged ||
                    this.IsHedged.Equals(input.IsHedged)
                ) && 
                (
                    this.SourceCurrency == input.SourceCurrency ||
                    (this.SourceCurrency != null &&
                    this.SourceCurrency.Equals(input.SourceCurrency))
                ) && 
                (
                    this.TargetCurrency == input.TargetCurrency ||
                    (this.TargetCurrency != null &&
                    this.TargetCurrency.Equals(input.TargetCurrency))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = hashCode * 59 + this.IsHedged.GetHashCode();
                if (this.SourceCurrency != null)
                    hashCode = hashCode * 59 + this.SourceCurrency.GetHashCode();
                if (this.TargetCurrency != null)
                    hashCode = hashCode * 59 + this.TargetCurrency.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
