/*
 * Prime Developer Trial
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = FactSet.SDK.ETFProfileandPrices.Client.OpenAPIDateConverter;

namespace FactSet.SDK.ETFProfileandPrices.Model
{
    /// <summary>
    /// Currency.
    /// </summary>
    [DataContract(Name = "inline_response_200_data_currency")]
    public partial class InlineResponse200DataCurrency : IEquatable<InlineResponse200DataCurrency>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="InlineResponse200DataCurrency" /> class.
        /// </summary>
        /// <param name="listing">Currency of exchange specific listing. This data is available for all the regions and currency code is in the format ISO 4217..</param>
        /// <param name="fund">Base calculation currency of the ETP. This data is available for all the regions and currency code is in the format ISO 4217..</param>
        public InlineResponse200DataCurrency(string listing = default(string), string fund = default(string))
        {
            this.Listing = listing;
            this.Fund = fund;
        }

        /// <summary>
        /// Currency of exchange specific listing. This data is available for all the regions and currency code is in the format ISO 4217.
        /// </summary>
        /// <value>Currency of exchange specific listing. This data is available for all the regions and currency code is in the format ISO 4217.</value>
        [DataMember(Name = "listing", EmitDefaultValue = false)]
        public string Listing { get; set; }

        /// <summary>
        /// Base calculation currency of the ETP. This data is available for all the regions and currency code is in the format ISO 4217.
        /// </summary>
        /// <value>Base calculation currency of the ETP. This data is available for all the regions and currency code is in the format ISO 4217.</value>
        [DataMember(Name = "fund", EmitDefaultValue = false)]
        public string Fund { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class InlineResponse200DataCurrency {\n");
            sb.Append("  Listing: ").Append(Listing).Append("\n");
            sb.Append("  Fund: ").Append(Fund).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as InlineResponse200DataCurrency);
        }

        /// <summary>
        /// Returns true if InlineResponse200DataCurrency instances are equal
        /// </summary>
        /// <param name="input">Instance of InlineResponse200DataCurrency to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(InlineResponse200DataCurrency input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Listing == input.Listing ||
                    (this.Listing != null &&
                    this.Listing.Equals(input.Listing))
                ) && 
                (
                    this.Fund == input.Fund ||
                    (this.Fund != null &&
                    this.Fund.Equals(input.Fund))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Listing != null)
                {
                    hashCode = (hashCode * 59) + this.Listing.GetHashCode();
                }
                if (this.Fund != null)
                {
                    hashCode = (hashCode * 59) + this.Fund.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
