/*
 * Prime Developer Trial
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = FactSet.SDK.ETFProfileandPrices.Client.OpenAPIDateConverter;

namespace FactSet.SDK.ETFProfileandPrices.Model
{
    /// <summary>
    /// InlineResponse2004DataClassifications
    /// </summary>
    [DataContract(Name = "inline_response_200_4_data_classifications")]
    public partial class InlineResponse2004DataClassifications : IEquatable<InlineResponse2004DataClassifications>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="InlineResponse2004DataClassifications" /> class.
        /// </summary>
        /// <param name="name">Name of the classification. Possible values: \&quot;Developed Market\&quot;, \&quot;Frontier Market\&quot;, \&quot;Emerging Market\&quot;, \&quot;Rest of World Market\&quot;.</param>
        /// <param name="weight">Weight (net) of the classification..</param>
        public InlineResponse2004DataClassifications(string name = default(string), decimal weight = default(decimal))
        {
            this.Name = name;
            this.Weight = weight;
        }

        /// <summary>
        /// Name of the classification. Possible values: \&quot;Developed Market\&quot;, \&quot;Frontier Market\&quot;, \&quot;Emerging Market\&quot;, \&quot;Rest of World Market\&quot;
        /// </summary>
        /// <value>Name of the classification. Possible values: \&quot;Developed Market\&quot;, \&quot;Frontier Market\&quot;, \&quot;Emerging Market\&quot;, \&quot;Rest of World Market\&quot;</value>
        [DataMember(Name = "name", EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// Weight (net) of the classification.
        /// </summary>
        /// <value>Weight (net) of the classification.</value>
        [DataMember(Name = "weight", EmitDefaultValue = false)]
        public decimal Weight { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class InlineResponse2004DataClassifications {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Weight: ").Append(Weight).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as InlineResponse2004DataClassifications);
        }

        /// <summary>
        /// Returns true if InlineResponse2004DataClassifications instances are equal
        /// </summary>
        /// <param name="input">Instance of InlineResponse2004DataClassifications to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(InlineResponse2004DataClassifications input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Weight == input.Weight ||
                    this.Weight.Equals(input.Weight)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Weight.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
