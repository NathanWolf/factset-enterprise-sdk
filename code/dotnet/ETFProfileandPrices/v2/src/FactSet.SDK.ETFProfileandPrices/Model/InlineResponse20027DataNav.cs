/*
 * Prime Developer Trial
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = FactSet.SDK.ETFProfileandPrices.Client.OpenAPIDateConverter;

namespace FactSet.SDK.ETFProfileandPrices.Model
{
    /// <summary>
    /// Nav.
    /// </summary>
    [DataContract(Name = "inline_response_200_27_data_nav")]
    public partial class InlineResponse20027DataNav : IEquatable<InlineResponse20027DataNav>, IValidatableObject
    {
        /// <summary>
        /// Currency of the ETP&#39;s NAV in ISO 4217 format. This data is available for all the regions.
        /// </summary>
        /// <value>Currency of the ETP&#39;s NAV in ISO 4217 format. This data is available for all the regions.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum CurrencyEnum
        {
            /// <summary>
            /// Enum CHF for value: CHF
            /// </summary>
            [EnumMember(Value = "CHF")]
            CHF = 1,

            /// <summary>
            /// Enum CAD for value: CAD
            /// </summary>
            [EnumMember(Value = "CAD")]
            CAD = 2,

            /// <summary>
            /// Enum USD for value: USD
            /// </summary>
            [EnumMember(Value = "USD")]
            USD = 3,

            /// <summary>
            /// Enum EUR for value: EUR
            /// </summary>
            [EnumMember(Value = "EUR")]
            EUR = 4,

            /// <summary>
            /// Enum MXN for value: MXN
            /// </summary>
            [EnumMember(Value = "MXN")]
            MXN = 5,

            /// <summary>
            /// Enum GBP for value: GBP
            /// </summary>
            [EnumMember(Value = "GBP")]
            GBP = 6,

            /// <summary>
            /// Enum GBX for value: GBX
            /// </summary>
            [EnumMember(Value = "GBX")]
            GBX = 7,

            /// <summary>
            /// Enum SEK for value: SEK
            /// </summary>
            [EnumMember(Value = "SEK")]
            SEK = 8,

            /// <summary>
            /// Enum JPY for value: JPY
            /// </summary>
            [EnumMember(Value = "JPY")]
            JPY = 9

        }


        /// <summary>
        /// Currency of the ETP&#39;s NAV in ISO 4217 format. This data is available for all the regions.
        /// </summary>
        /// <value>Currency of the ETP&#39;s NAV in ISO 4217 format. This data is available for all the regions.</value>
        [DataMember(Name = "currency", EmitDefaultValue = false)]
        public CurrencyEnum? Currency { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="InlineResponse20027DataNav" /> class.
        /// </summary>
        /// <param name="value">Daily net asset value (NAV) of the ETP. This data is available for all the regions..</param>
        /// <param name="currency">Currency of the ETP&#39;s NAV in ISO 4217 format. This data is available for all the regions..</param>
        /// <param name="startDate">Date of first available NAV ex-date. This data is available for all the regions..</param>
        /// <param name="last">last.</param>
        /// <param name="totalReturn">ETP NAV calculated by reinvesting dividends and compounding returns. This data is available for all the regions..</param>
        public InlineResponse20027DataNav(decimal value = default(decimal), CurrencyEnum? currency = default(CurrencyEnum?), DateTime startDate = default(DateTime), InlineResponse20027DataNavLast last = default(InlineResponse20027DataNavLast), decimal totalReturn = default(decimal))
        {
            this.Value = value;
            this.Currency = currency;
            this.StartDate = startDate;
            this.Last = last;
            this.TotalReturn = totalReturn;
        }

        /// <summary>
        /// Daily net asset value (NAV) of the ETP. This data is available for all the regions.
        /// </summary>
        /// <value>Daily net asset value (NAV) of the ETP. This data is available for all the regions.</value>
        [DataMember(Name = "value", EmitDefaultValue = false)]
        public decimal Value { get; set; }

        /// <summary>
        /// Date of first available NAV ex-date. This data is available for all the regions.
        /// </summary>
        /// <value>Date of first available NAV ex-date. This data is available for all the regions.</value>
        [DataMember(Name = "startDate", EmitDefaultValue = false)]
        [JsonConverter(typeof(OpenAPIDateConverter))]
        public DateTime StartDate { get; set; }

        /// <summary>
        /// Gets or Sets Last
        /// </summary>
        [DataMember(Name = "last", EmitDefaultValue = false)]
        public InlineResponse20027DataNavLast Last { get; set; }

        /// <summary>
        /// ETP NAV calculated by reinvesting dividends and compounding returns. This data is available for all the regions.
        /// </summary>
        /// <value>ETP NAV calculated by reinvesting dividends and compounding returns. This data is available for all the regions.</value>
        [DataMember(Name = "totalReturn", EmitDefaultValue = false)]
        public decimal TotalReturn { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class InlineResponse20027DataNav {\n");
            sb.Append("  Value: ").Append(Value).Append("\n");
            sb.Append("  Currency: ").Append(Currency).Append("\n");
            sb.Append("  StartDate: ").Append(StartDate).Append("\n");
            sb.Append("  Last: ").Append(Last).Append("\n");
            sb.Append("  TotalReturn: ").Append(TotalReturn).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as InlineResponse20027DataNav);
        }

        /// <summary>
        /// Returns true if InlineResponse20027DataNav instances are equal
        /// </summary>
        /// <param name="input">Instance of InlineResponse20027DataNav to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(InlineResponse20027DataNav input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Value == input.Value ||
                    this.Value.Equals(input.Value)
                ) && 
                (
                    this.Currency == input.Currency ||
                    this.Currency.Equals(input.Currency)
                ) && 
                (
                    this.StartDate == input.StartDate ||
                    (this.StartDate != null &&
                    this.StartDate.Equals(input.StartDate))
                ) && 
                (
                    this.Last == input.Last ||
                    (this.Last != null &&
                    this.Last.Equals(input.Last))
                ) && 
                (
                    this.TotalReturn == input.TotalReturn ||
                    this.TotalReturn.Equals(input.TotalReturn)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.Value.GetHashCode();
                hashCode = (hashCode * 59) + this.Currency.GetHashCode();
                if (this.StartDate != null)
                {
                    hashCode = (hashCode * 59) + this.StartDate.GetHashCode();
                }
                if (this.Last != null)
                {
                    hashCode = (hashCode * 59) + this.Last.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.TotalReturn.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
