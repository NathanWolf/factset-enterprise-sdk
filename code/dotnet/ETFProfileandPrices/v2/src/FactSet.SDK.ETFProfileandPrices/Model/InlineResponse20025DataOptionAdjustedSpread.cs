/*
 * Prime Developer Trial
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = FactSet.SDK.ETFProfileandPrices.Client.OpenAPIDateConverter;

namespace FactSet.SDK.ETFProfileandPrices.Model
{
    /// <summary>
    /// Option-adjusted spread (OAS) value of the ETP; measurement of the yield spread calculated after removing any embedded options providing users with a spread of an option-free bond.
    /// </summary>
    [DataContract(Name = "inline_response_200_25_data_optionAdjustedSpread")]
    public partial class InlineResponse20025DataOptionAdjustedSpread : IEquatable<InlineResponse20025DataOptionAdjustedSpread>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="InlineResponse20025DataOptionAdjustedSpread" /> class.
        /// </summary>
        /// <param name="range0">OAS value of the ETP..</param>
        /// <param name="range0To100">OAS weight of the ETP ranges between 0 to 99.9..</param>
        /// <param name="range100To200">OAS weight of the ETP ranges between 100 to 199.99..</param>
        /// <param name="range200To300">OAS weight of the ETP ranges between 200 to 299.99..</param>
        /// <param name="range300To400">OAS weight of the ETF ranges between 300 to 399.99..</param>
        /// <param name="range400To500">OAS weight of the ETF ranges between 400 to 499.99..</param>
        /// <param name="range500To600">OAS weight of the ETF ranges between 500 to 599.99..</param>
        /// <param name="range600To700">OAS weight of the ETF ranges between 600 to 699.99..</param>
        /// <param name="range700To800">OAS weight of the ETF ranges between 700 to 799.99..</param>
        /// <param name="range800To900">OAS weight of the ETF ranges between 800 to 899.99..</param>
        /// <param name="range900To1000">OAS weight of the ETF ranges between 900 to 999.99..</param>
        /// <param name="range1000Plus">OAS weight of the ETF ranges above 1000..</param>
        public InlineResponse20025DataOptionAdjustedSpread(decimal range0 = default(decimal), decimal range0To100 = default(decimal), decimal range100To200 = default(decimal), decimal range200To300 = default(decimal), decimal range300To400 = default(decimal), decimal range400To500 = default(decimal), decimal range500To600 = default(decimal), decimal range600To700 = default(decimal), decimal range700To800 = default(decimal), decimal range800To900 = default(decimal), decimal range900To1000 = default(decimal), decimal range1000Plus = default(decimal))
        {
            this.Range0 = range0;
            this.Range0To100 = range0To100;
            this.Range100To200 = range100To200;
            this.Range200To300 = range200To300;
            this.Range300To400 = range300To400;
            this.Range400To500 = range400To500;
            this.Range500To600 = range500To600;
            this.Range600To700 = range600To700;
            this.Range700To800 = range700To800;
            this.Range800To900 = range800To900;
            this.Range900To1000 = range900To1000;
            this.Range1000Plus = range1000Plus;
        }

        /// <summary>
        /// OAS value of the ETP.
        /// </summary>
        /// <value>OAS value of the ETP.</value>
        [DataMember(Name = "range0", EmitDefaultValue = false)]
        public decimal Range0 { get; set; }

        /// <summary>
        /// OAS weight of the ETP ranges between 0 to 99.9.
        /// </summary>
        /// <value>OAS weight of the ETP ranges between 0 to 99.9.</value>
        [DataMember(Name = "range0To100", EmitDefaultValue = false)]
        public decimal Range0To100 { get; set; }

        /// <summary>
        /// OAS weight of the ETP ranges between 100 to 199.99.
        /// </summary>
        /// <value>OAS weight of the ETP ranges between 100 to 199.99.</value>
        [DataMember(Name = "range100To200", EmitDefaultValue = false)]
        public decimal Range100To200 { get; set; }

        /// <summary>
        /// OAS weight of the ETP ranges between 200 to 299.99.
        /// </summary>
        /// <value>OAS weight of the ETP ranges between 200 to 299.99.</value>
        [DataMember(Name = "range200To300", EmitDefaultValue = false)]
        public decimal Range200To300 { get; set; }

        /// <summary>
        /// OAS weight of the ETF ranges between 300 to 399.99.
        /// </summary>
        /// <value>OAS weight of the ETF ranges between 300 to 399.99.</value>
        [DataMember(Name = "range300To400", EmitDefaultValue = false)]
        public decimal Range300To400 { get; set; }

        /// <summary>
        /// OAS weight of the ETF ranges between 400 to 499.99.
        /// </summary>
        /// <value>OAS weight of the ETF ranges between 400 to 499.99.</value>
        [DataMember(Name = "range400To500", EmitDefaultValue = false)]
        public decimal Range400To500 { get; set; }

        /// <summary>
        /// OAS weight of the ETF ranges between 500 to 599.99.
        /// </summary>
        /// <value>OAS weight of the ETF ranges between 500 to 599.99.</value>
        [DataMember(Name = "range500To600", EmitDefaultValue = false)]
        public decimal Range500To600 { get; set; }

        /// <summary>
        /// OAS weight of the ETF ranges between 600 to 699.99.
        /// </summary>
        /// <value>OAS weight of the ETF ranges between 600 to 699.99.</value>
        [DataMember(Name = "range600To700", EmitDefaultValue = false)]
        public decimal Range600To700 { get; set; }

        /// <summary>
        /// OAS weight of the ETF ranges between 700 to 799.99.
        /// </summary>
        /// <value>OAS weight of the ETF ranges between 700 to 799.99.</value>
        [DataMember(Name = "range700To800", EmitDefaultValue = false)]
        public decimal Range700To800 { get; set; }

        /// <summary>
        /// OAS weight of the ETF ranges between 800 to 899.99.
        /// </summary>
        /// <value>OAS weight of the ETF ranges between 800 to 899.99.</value>
        [DataMember(Name = "range800To900", EmitDefaultValue = false)]
        public decimal Range800To900 { get; set; }

        /// <summary>
        /// OAS weight of the ETF ranges between 900 to 999.99.
        /// </summary>
        /// <value>OAS weight of the ETF ranges between 900 to 999.99.</value>
        [DataMember(Name = "range900To1000", EmitDefaultValue = false)]
        public decimal Range900To1000 { get; set; }

        /// <summary>
        /// OAS weight of the ETF ranges above 1000.
        /// </summary>
        /// <value>OAS weight of the ETF ranges above 1000.</value>
        [DataMember(Name = "range1000Plus", EmitDefaultValue = false)]
        public decimal Range1000Plus { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class InlineResponse20025DataOptionAdjustedSpread {\n");
            sb.Append("  Range0: ").Append(Range0).Append("\n");
            sb.Append("  Range0To100: ").Append(Range0To100).Append("\n");
            sb.Append("  Range100To200: ").Append(Range100To200).Append("\n");
            sb.Append("  Range200To300: ").Append(Range200To300).Append("\n");
            sb.Append("  Range300To400: ").Append(Range300To400).Append("\n");
            sb.Append("  Range400To500: ").Append(Range400To500).Append("\n");
            sb.Append("  Range500To600: ").Append(Range500To600).Append("\n");
            sb.Append("  Range600To700: ").Append(Range600To700).Append("\n");
            sb.Append("  Range700To800: ").Append(Range700To800).Append("\n");
            sb.Append("  Range800To900: ").Append(Range800To900).Append("\n");
            sb.Append("  Range900To1000: ").Append(Range900To1000).Append("\n");
            sb.Append("  Range1000Plus: ").Append(Range1000Plus).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as InlineResponse20025DataOptionAdjustedSpread);
        }

        /// <summary>
        /// Returns true if InlineResponse20025DataOptionAdjustedSpread instances are equal
        /// </summary>
        /// <param name="input">Instance of InlineResponse20025DataOptionAdjustedSpread to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(InlineResponse20025DataOptionAdjustedSpread input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Range0 == input.Range0 ||
                    this.Range0.Equals(input.Range0)
                ) && 
                (
                    this.Range0To100 == input.Range0To100 ||
                    this.Range0To100.Equals(input.Range0To100)
                ) && 
                (
                    this.Range100To200 == input.Range100To200 ||
                    this.Range100To200.Equals(input.Range100To200)
                ) && 
                (
                    this.Range200To300 == input.Range200To300 ||
                    this.Range200To300.Equals(input.Range200To300)
                ) && 
                (
                    this.Range300To400 == input.Range300To400 ||
                    this.Range300To400.Equals(input.Range300To400)
                ) && 
                (
                    this.Range400To500 == input.Range400To500 ||
                    this.Range400To500.Equals(input.Range400To500)
                ) && 
                (
                    this.Range500To600 == input.Range500To600 ||
                    this.Range500To600.Equals(input.Range500To600)
                ) && 
                (
                    this.Range600To700 == input.Range600To700 ||
                    this.Range600To700.Equals(input.Range600To700)
                ) && 
                (
                    this.Range700To800 == input.Range700To800 ||
                    this.Range700To800.Equals(input.Range700To800)
                ) && 
                (
                    this.Range800To900 == input.Range800To900 ||
                    this.Range800To900.Equals(input.Range800To900)
                ) && 
                (
                    this.Range900To1000 == input.Range900To1000 ||
                    this.Range900To1000.Equals(input.Range900To1000)
                ) && 
                (
                    this.Range1000Plus == input.Range1000Plus ||
                    this.Range1000Plus.Equals(input.Range1000Plus)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.Range0.GetHashCode();
                hashCode = (hashCode * 59) + this.Range0To100.GetHashCode();
                hashCode = (hashCode * 59) + this.Range100To200.GetHashCode();
                hashCode = (hashCode * 59) + this.Range200To300.GetHashCode();
                hashCode = (hashCode * 59) + this.Range300To400.GetHashCode();
                hashCode = (hashCode * 59) + this.Range400To500.GetHashCode();
                hashCode = (hashCode * 59) + this.Range500To600.GetHashCode();
                hashCode = (hashCode * 59) + this.Range600To700.GetHashCode();
                hashCode = (hashCode * 59) + this.Range700To800.GetHashCode();
                hashCode = (hashCode * 59) + this.Range800To900.GetHashCode();
                hashCode = (hashCode * 59) + this.Range900To1000.GetHashCode();
                hashCode = (hashCode * 59) + this.Range1000Plus.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
