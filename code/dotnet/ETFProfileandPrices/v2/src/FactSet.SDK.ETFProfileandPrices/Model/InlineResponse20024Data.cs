/*
 * Prime Developer Trial
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = FactSet.SDK.ETFProfileandPrices.Client.OpenAPIDateConverter;

namespace FactSet.SDK.ETFProfileandPrices.Model
{
    /// <summary>
    /// InlineResponse20024Data
    /// </summary>
    [DataContract(Name = "inline_response_200_24_data")]
    public partial class InlineResponse20024Data : IEquatable<InlineResponse20024Data>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="InlineResponse20024Data" /> class.
        /// </summary>
        /// <param name="symbol">Identifier of the holding. (when available)..</param>
        /// <param name="name">Name of the holding..</param>
        /// <param name="securityType">Financial instrument type of the holding..</param>
        /// <param name="exchange">exchange.</param>
        /// <param name="reportDate">Reporting date of the holding..</param>
        /// <param name="shares">Number of shares held, unadjusted for corporate actions..</param>
        /// <param name="marketValue">Market value of the holding, unadjusted for corporate actions..</param>
        /// <param name="currencyCode">Code representing the currency of the holding and  it&#39;s in format ISO 4217.</param>
        /// <param name="weight">Weight of the holding within the ETP..</param>
        public InlineResponse20024Data(string symbol = default(string), string name = default(string), string securityType = default(string), InlineResponse20024Exchange exchange = default(InlineResponse20024Exchange), DateTime reportDate = default(DateTime), decimal shares = default(decimal), decimal marketValue = default(decimal), string currencyCode = default(string), decimal weight = default(decimal))
        {
            this.Symbol = symbol;
            this.Name = name;
            this.SecurityType = securityType;
            this.Exchange = exchange;
            this.ReportDate = reportDate;
            this.Shares = shares;
            this.MarketValue = marketValue;
            this.CurrencyCode = currencyCode;
            this.Weight = weight;
        }

        /// <summary>
        /// Identifier of the holding. (when available).
        /// </summary>
        /// <value>Identifier of the holding. (when available).</value>
        [DataMember(Name = "symbol", EmitDefaultValue = false)]
        public string Symbol { get; set; }

        /// <summary>
        /// Name of the holding.
        /// </summary>
        /// <value>Name of the holding.</value>
        [DataMember(Name = "name", EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// Financial instrument type of the holding.
        /// </summary>
        /// <value>Financial instrument type of the holding.</value>
        [DataMember(Name = "securityType", EmitDefaultValue = false)]
        public string SecurityType { get; set; }

        /// <summary>
        /// Gets or Sets Exchange
        /// </summary>
        [DataMember(Name = "exchange", EmitDefaultValue = false)]
        public InlineResponse20024Exchange Exchange { get; set; }

        /// <summary>
        /// Reporting date of the holding.
        /// </summary>
        /// <value>Reporting date of the holding.</value>
        [DataMember(Name = "reportDate", EmitDefaultValue = false)]
        [JsonConverter(typeof(OpenAPIDateConverter))]
        public DateTime ReportDate { get; set; }

        /// <summary>
        /// Number of shares held, unadjusted for corporate actions.
        /// </summary>
        /// <value>Number of shares held, unadjusted for corporate actions.</value>
        [DataMember(Name = "shares", EmitDefaultValue = false)]
        public decimal Shares { get; set; }

        /// <summary>
        /// Market value of the holding, unadjusted for corporate actions.
        /// </summary>
        /// <value>Market value of the holding, unadjusted for corporate actions.</value>
        [DataMember(Name = "marketValue", EmitDefaultValue = false)]
        public decimal MarketValue { get; set; }

        /// <summary>
        /// Code representing the currency of the holding and  it&#39;s in format ISO 4217
        /// </summary>
        /// <value>Code representing the currency of the holding and  it&#39;s in format ISO 4217</value>
        [DataMember(Name = "currencyCode", EmitDefaultValue = false)]
        public string CurrencyCode { get; set; }

        /// <summary>
        /// Weight of the holding within the ETP.
        /// </summary>
        /// <value>Weight of the holding within the ETP.</value>
        [DataMember(Name = "weight", EmitDefaultValue = false)]
        public decimal Weight { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class InlineResponse20024Data {\n");
            sb.Append("  Symbol: ").Append(Symbol).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  SecurityType: ").Append(SecurityType).Append("\n");
            sb.Append("  Exchange: ").Append(Exchange).Append("\n");
            sb.Append("  ReportDate: ").Append(ReportDate).Append("\n");
            sb.Append("  Shares: ").Append(Shares).Append("\n");
            sb.Append("  MarketValue: ").Append(MarketValue).Append("\n");
            sb.Append("  CurrencyCode: ").Append(CurrencyCode).Append("\n");
            sb.Append("  Weight: ").Append(Weight).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as InlineResponse20024Data);
        }

        /// <summary>
        /// Returns true if InlineResponse20024Data instances are equal
        /// </summary>
        /// <param name="input">Instance of InlineResponse20024Data to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(InlineResponse20024Data input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Symbol == input.Symbol ||
                    (this.Symbol != null &&
                    this.Symbol.Equals(input.Symbol))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.SecurityType == input.SecurityType ||
                    (this.SecurityType != null &&
                    this.SecurityType.Equals(input.SecurityType))
                ) && 
                (
                    this.Exchange == input.Exchange ||
                    (this.Exchange != null &&
                    this.Exchange.Equals(input.Exchange))
                ) && 
                (
                    this.ReportDate == input.ReportDate ||
                    (this.ReportDate != null &&
                    this.ReportDate.Equals(input.ReportDate))
                ) && 
                (
                    this.Shares == input.Shares ||
                    this.Shares.Equals(input.Shares)
                ) && 
                (
                    this.MarketValue == input.MarketValue ||
                    this.MarketValue.Equals(input.MarketValue)
                ) && 
                (
                    this.CurrencyCode == input.CurrencyCode ||
                    (this.CurrencyCode != null &&
                    this.CurrencyCode.Equals(input.CurrencyCode))
                ) && 
                (
                    this.Weight == input.Weight ||
                    this.Weight.Equals(input.Weight)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Symbol != null)
                {
                    hashCode = (hashCode * 59) + this.Symbol.GetHashCode();
                }
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                if (this.SecurityType != null)
                {
                    hashCode = (hashCode * 59) + this.SecurityType.GetHashCode();
                }
                if (this.Exchange != null)
                {
                    hashCode = (hashCode * 59) + this.Exchange.GetHashCode();
                }
                if (this.ReportDate != null)
                {
                    hashCode = (hashCode * 59) + this.ReportDate.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Shares.GetHashCode();
                hashCode = (hashCode * 59) + this.MarketValue.GetHashCode();
                if (this.CurrencyCode != null)
                {
                    hashCode = (hashCode * 59) + this.CurrencyCode.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Weight.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
