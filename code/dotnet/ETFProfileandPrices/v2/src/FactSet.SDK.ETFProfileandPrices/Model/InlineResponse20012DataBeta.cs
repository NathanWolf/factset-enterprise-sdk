/*
 * Prime Developer Trial
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = FactSet.SDK.ETFProfileandPrices.Client.OpenAPIDateConverter;

namespace FactSet.SDK.ETFProfileandPrices.Model
{
    /// <summary>
    /// Beta.
    /// </summary>
    [DataContract(Name = "inline_response_200_12_data_beta")]
    public partial class InlineResponse20012DataBeta : IEquatable<InlineResponse20012DataBeta>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="InlineResponse20012DataBeta" /> class.
        /// </summary>
        /// <param name="value">The sensitivity of the returns of the fund to the movement of the FactSet designated &#39;segment benchmark&#39;. Beta of 1.0 means magnitude of fund returns equals that of segment benchmark returns. Available for the regions: US..</param>
        /// <param name="up">A comparison of a fund&#39;s return to the FactSet-designated benchmark&#39;s for days when the benchmark is up. Ideally down beta is less than or equal to overall beta. Available for the regions: US..</param>
        /// <param name="down">A comparison of a fund&#39;s return to the FactSet-designated benchmark&#39;s for days when the benchmark is down. Ideally down beta is less than or equal to overall beta. Available for the regions: US..</param>
        public InlineResponse20012DataBeta(decimal value = default(decimal), decimal up = default(decimal), decimal down = default(decimal))
        {
            this.Value = value;
            this.Up = up;
            this.Down = down;
        }

        /// <summary>
        /// The sensitivity of the returns of the fund to the movement of the FactSet designated &#39;segment benchmark&#39;. Beta of 1.0 means magnitude of fund returns equals that of segment benchmark returns. Available for the regions: US.
        /// </summary>
        /// <value>The sensitivity of the returns of the fund to the movement of the FactSet designated &#39;segment benchmark&#39;. Beta of 1.0 means magnitude of fund returns equals that of segment benchmark returns. Available for the regions: US.</value>
        [DataMember(Name = "value", EmitDefaultValue = false)]
        public decimal Value { get; set; }

        /// <summary>
        /// A comparison of a fund&#39;s return to the FactSet-designated benchmark&#39;s for days when the benchmark is up. Ideally down beta is less than or equal to overall beta. Available for the regions: US.
        /// </summary>
        /// <value>A comparison of a fund&#39;s return to the FactSet-designated benchmark&#39;s for days when the benchmark is up. Ideally down beta is less than or equal to overall beta. Available for the regions: US.</value>
        [DataMember(Name = "up", EmitDefaultValue = false)]
        public decimal Up { get; set; }

        /// <summary>
        /// A comparison of a fund&#39;s return to the FactSet-designated benchmark&#39;s for days when the benchmark is down. Ideally down beta is less than or equal to overall beta. Available for the regions: US.
        /// </summary>
        /// <value>A comparison of a fund&#39;s return to the FactSet-designated benchmark&#39;s for days when the benchmark is down. Ideally down beta is less than or equal to overall beta. Available for the regions: US.</value>
        [DataMember(Name = "down", EmitDefaultValue = false)]
        public decimal Down { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class InlineResponse20012DataBeta {\n");
            sb.Append("  Value: ").Append(Value).Append("\n");
            sb.Append("  Up: ").Append(Up).Append("\n");
            sb.Append("  Down: ").Append(Down).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as InlineResponse20012DataBeta);
        }

        /// <summary>
        /// Returns true if InlineResponse20012DataBeta instances are equal
        /// </summary>
        /// <param name="input">Instance of InlineResponse20012DataBeta to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(InlineResponse20012DataBeta input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Value == input.Value ||
                    this.Value.Equals(input.Value)
                ) && 
                (
                    this.Up == input.Up ||
                    this.Up.Equals(input.Up)
                ) && 
                (
                    this.Down == input.Down ||
                    this.Down.Equals(input.Down)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.Value.GetHashCode();
                hashCode = (hashCode * 59) + this.Up.GetHashCode();
                hashCode = (hashCode * 59) + this.Down.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
