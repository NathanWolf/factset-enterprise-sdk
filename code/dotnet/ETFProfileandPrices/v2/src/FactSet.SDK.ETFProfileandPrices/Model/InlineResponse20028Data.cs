/*
 * Prime Developer Trial
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = FactSet.SDK.ETFProfileandPrices.Client.OpenAPIDateConverter;

namespace FactSet.SDK.ETFProfileandPrices.Model
{
    /// <summary>
    /// Returns.
    /// </summary>
    [DataContract(Name = "inline_response_200_28_data")]
    public partial class InlineResponse20028Data : IEquatable<InlineResponse20028Data>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="InlineResponse20028Data" /> class.
        /// </summary>
        /// <param name="return1M">1 month performance. This data is available for the US regions..</param>
        /// <param name="return3M">3 month performance. This data is available for the US regions..</param>
        /// <param name="returnYTD">YTD performance. This data is available for the US regions..</param>
        /// <param name="return1Y">1 year performance. This data is available for the US regions..</param>
        /// <param name="return3Y">3 year performance. This data is available for the US regions..</param>
        /// <param name="return5Y">5 year performance. This data is available for the US regions..</param>
        public InlineResponse20028Data(decimal return1M = default(decimal), decimal return3M = default(decimal), decimal returnYTD = default(decimal), decimal return1Y = default(decimal), decimal return3Y = default(decimal), decimal return5Y = default(decimal))
        {
            this.Return1M = return1M;
            this.Return3M = return3M;
            this.ReturnYTD = returnYTD;
            this.Return1Y = return1Y;
            this.Return3Y = return3Y;
            this.Return5Y = return5Y;
        }

        /// <summary>
        /// 1 month performance. This data is available for the US regions.
        /// </summary>
        /// <value>1 month performance. This data is available for the US regions.</value>
        [DataMember(Name = "return1M", EmitDefaultValue = false)]
        public decimal Return1M { get; set; }

        /// <summary>
        /// 3 month performance. This data is available for the US regions.
        /// </summary>
        /// <value>3 month performance. This data is available for the US regions.</value>
        [DataMember(Name = "return3M", EmitDefaultValue = false)]
        public decimal Return3M { get; set; }

        /// <summary>
        /// YTD performance. This data is available for the US regions.
        /// </summary>
        /// <value>YTD performance. This data is available for the US regions.</value>
        [DataMember(Name = "returnYTD", EmitDefaultValue = false)]
        public decimal ReturnYTD { get; set; }

        /// <summary>
        /// 1 year performance. This data is available for the US regions.
        /// </summary>
        /// <value>1 year performance. This data is available for the US regions.</value>
        [DataMember(Name = "return1Y", EmitDefaultValue = false)]
        public decimal Return1Y { get; set; }

        /// <summary>
        /// 3 year performance. This data is available for the US regions.
        /// </summary>
        /// <value>3 year performance. This data is available for the US regions.</value>
        [DataMember(Name = "return3Y", EmitDefaultValue = false)]
        public decimal Return3Y { get; set; }

        /// <summary>
        /// 5 year performance. This data is available for the US regions.
        /// </summary>
        /// <value>5 year performance. This data is available for the US regions.</value>
        [DataMember(Name = "return5Y", EmitDefaultValue = false)]
        public decimal Return5Y { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class InlineResponse20028Data {\n");
            sb.Append("  Return1M: ").Append(Return1M).Append("\n");
            sb.Append("  Return3M: ").Append(Return3M).Append("\n");
            sb.Append("  ReturnYTD: ").Append(ReturnYTD).Append("\n");
            sb.Append("  Return1Y: ").Append(Return1Y).Append("\n");
            sb.Append("  Return3Y: ").Append(Return3Y).Append("\n");
            sb.Append("  Return5Y: ").Append(Return5Y).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as InlineResponse20028Data);
        }

        /// <summary>
        /// Returns true if InlineResponse20028Data instances are equal
        /// </summary>
        /// <param name="input">Instance of InlineResponse20028Data to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(InlineResponse20028Data input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Return1M == input.Return1M ||
                    this.Return1M.Equals(input.Return1M)
                ) && 
                (
                    this.Return3M == input.Return3M ||
                    this.Return3M.Equals(input.Return3M)
                ) && 
                (
                    this.ReturnYTD == input.ReturnYTD ||
                    this.ReturnYTD.Equals(input.ReturnYTD)
                ) && 
                (
                    this.Return1Y == input.Return1Y ||
                    this.Return1Y.Equals(input.Return1Y)
                ) && 
                (
                    this.Return3Y == input.Return3Y ||
                    this.Return3Y.Equals(input.Return3Y)
                ) && 
                (
                    this.Return5Y == input.Return5Y ||
                    this.Return5Y.Equals(input.Return5Y)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.Return1M.GetHashCode();
                hashCode = (hashCode * 59) + this.Return3M.GetHashCode();
                hashCode = (hashCode * 59) + this.ReturnYTD.GetHashCode();
                hashCode = (hashCode * 59) + this.Return1Y.GetHashCode();
                hashCode = (hashCode * 59) + this.Return3Y.GetHashCode();
                hashCode = (hashCode * 59) + this.Return5Y.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
