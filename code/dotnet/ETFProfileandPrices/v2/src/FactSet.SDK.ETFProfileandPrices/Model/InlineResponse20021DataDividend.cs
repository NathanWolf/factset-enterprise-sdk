/*
 * Prime Developer Trial
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = FactSet.SDK.ETFProfileandPrices.Client.OpenAPIDateConverter;

namespace FactSet.SDK.ETFProfileandPrices.Model
{
    /// <summary>
    /// Dividend information for the next dividend.
    /// </summary>
    [DataContract(Name = "inline_response_200_21_data_dividend")]
    public partial class InlineResponse20021DataDividend : IEquatable<InlineResponse20021DataDividend>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="InlineResponse20021DataDividend" /> class.
        /// </summary>
        /// <param name="isReported">States whether the ETP&#39;s next ex-dividend date is posted on the issuer&#39;s website. This data is available for all the regions..</param>
        /// <param name="exDividendDate">The ex-dividend date of the ETP&#39;s next distribution. This data is available for all the regions..</param>
        /// <param name="qualified">Qualified dividend payment on ex-dividend-date indicates the amount of distribution considered to have a more favorable tax treatment. This data is available for all regions..</param>
        /// <param name="nonQualified">Non-Qualified dividend payment on ex-dividend-date indicates the amount of distribution that is taxed as ordinary income. This data is available for all regions..</param>
        /// <param name="returnOfCapital">Return of Capital available on ex-dividend-date. This data is available for all regions..</param>
        public InlineResponse20021DataDividend(bool isReported = default(bool), DateTime exDividendDate = default(DateTime), decimal qualified = default(decimal), decimal nonQualified = default(decimal), decimal returnOfCapital = default(decimal))
        {
            this.IsReported = isReported;
            this.ExDividendDate = exDividendDate;
            this.Qualified = qualified;
            this.NonQualified = nonQualified;
            this.ReturnOfCapital = returnOfCapital;
        }

        /// <summary>
        /// States whether the ETP&#39;s next ex-dividend date is posted on the issuer&#39;s website. This data is available for all the regions.
        /// </summary>
        /// <value>States whether the ETP&#39;s next ex-dividend date is posted on the issuer&#39;s website. This data is available for all the regions.</value>
        [DataMember(Name = "isReported", EmitDefaultValue = true)]
        public bool IsReported { get; set; }

        /// <summary>
        /// The ex-dividend date of the ETP&#39;s next distribution. This data is available for all the regions.
        /// </summary>
        /// <value>The ex-dividend date of the ETP&#39;s next distribution. This data is available for all the regions.</value>
        [DataMember(Name = "exDividendDate", EmitDefaultValue = false)]
        [JsonConverter(typeof(OpenAPIDateConverter))]
        public DateTime ExDividendDate { get; set; }

        /// <summary>
        /// Qualified dividend payment on ex-dividend-date indicates the amount of distribution considered to have a more favorable tax treatment. This data is available for all regions.
        /// </summary>
        /// <value>Qualified dividend payment on ex-dividend-date indicates the amount of distribution considered to have a more favorable tax treatment. This data is available for all regions.</value>
        [DataMember(Name = "qualified", EmitDefaultValue = false)]
        public decimal Qualified { get; set; }

        /// <summary>
        /// Non-Qualified dividend payment on ex-dividend-date indicates the amount of distribution that is taxed as ordinary income. This data is available for all regions.
        /// </summary>
        /// <value>Non-Qualified dividend payment on ex-dividend-date indicates the amount of distribution that is taxed as ordinary income. This data is available for all regions.</value>
        [DataMember(Name = "nonQualified", EmitDefaultValue = false)]
        public decimal NonQualified { get; set; }

        /// <summary>
        /// Return of Capital available on ex-dividend-date. This data is available for all regions.
        /// </summary>
        /// <value>Return of Capital available on ex-dividend-date. This data is available for all regions.</value>
        [DataMember(Name = "returnOfCapital", EmitDefaultValue = false)]
        public decimal ReturnOfCapital { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class InlineResponse20021DataDividend {\n");
            sb.Append("  IsReported: ").Append(IsReported).Append("\n");
            sb.Append("  ExDividendDate: ").Append(ExDividendDate).Append("\n");
            sb.Append("  Qualified: ").Append(Qualified).Append("\n");
            sb.Append("  NonQualified: ").Append(NonQualified).Append("\n");
            sb.Append("  ReturnOfCapital: ").Append(ReturnOfCapital).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as InlineResponse20021DataDividend);
        }

        /// <summary>
        /// Returns true if InlineResponse20021DataDividend instances are equal
        /// </summary>
        /// <param name="input">Instance of InlineResponse20021DataDividend to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(InlineResponse20021DataDividend input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.IsReported == input.IsReported ||
                    this.IsReported.Equals(input.IsReported)
                ) && 
                (
                    this.ExDividendDate == input.ExDividendDate ||
                    (this.ExDividendDate != null &&
                    this.ExDividendDate.Equals(input.ExDividendDate))
                ) && 
                (
                    this.Qualified == input.Qualified ||
                    this.Qualified.Equals(input.Qualified)
                ) && 
                (
                    this.NonQualified == input.NonQualified ||
                    this.NonQualified.Equals(input.NonQualified)
                ) && 
                (
                    this.ReturnOfCapital == input.ReturnOfCapital ||
                    this.ReturnOfCapital.Equals(input.ReturnOfCapital)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.IsReported.GetHashCode();
                if (this.ExDividendDate != null)
                {
                    hashCode = (hashCode * 59) + this.ExDividendDate.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Qualified.GetHashCode();
                hashCode = (hashCode * 59) + this.NonQualified.GetHashCode();
                hashCode = (hashCode * 59) + this.ReturnOfCapital.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
