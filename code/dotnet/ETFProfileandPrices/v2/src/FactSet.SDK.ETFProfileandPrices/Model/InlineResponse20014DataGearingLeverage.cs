/*
 * Prime Developer Trial
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = FactSet.SDK.ETFProfileandPrices.Client.OpenAPIDateConverter;

namespace FactSet.SDK.ETFProfileandPrices.Model
{
    /// <summary>
    /// Leverage.
    /// </summary>
    [DataContract(Name = "inline_response_200_14_data_gearing_leverage")]
    public partial class InlineResponse20014DataGearingLeverage : IEquatable<InlineResponse20014DataGearingLeverage>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="InlineResponse20014DataGearingLeverage" /> class.
        /// </summary>
        /// <param name="isLeverageFund">Flags ETPs that deliver leveraged long exposure to an index. This data is available for all the regions..</param>
        /// <param name="factor">Leverage factor of leveraged and inverse ETPs (2x, 3x, 1.5x, -1.5x, -2x, -3x, variable). This data is available for all the regions..</param>
        /// <param name="type">Determines if leverage factor is fixed or variable. This data is available for all the regions..</param>
        public InlineResponse20014DataGearingLeverage(bool isLeverageFund = default(bool), decimal factor = default(decimal), string type = default(string))
        {
            this.IsLeverageFund = isLeverageFund;
            this.Factor = factor;
            this.Type = type;
        }

        /// <summary>
        /// Flags ETPs that deliver leveraged long exposure to an index. This data is available for all the regions.
        /// </summary>
        /// <value>Flags ETPs that deliver leveraged long exposure to an index. This data is available for all the regions.</value>
        [DataMember(Name = "isLeverageFund", EmitDefaultValue = true)]
        public bool IsLeverageFund { get; set; }

        /// <summary>
        /// Leverage factor of leveraged and inverse ETPs (2x, 3x, 1.5x, -1.5x, -2x, -3x, variable). This data is available for all the regions.
        /// </summary>
        /// <value>Leverage factor of leveraged and inverse ETPs (2x, 3x, 1.5x, -1.5x, -2x, -3x, variable). This data is available for all the regions.</value>
        [DataMember(Name = "factor", EmitDefaultValue = false)]
        public decimal Factor { get; set; }

        /// <summary>
        /// Determines if leverage factor is fixed or variable. This data is available for all the regions.
        /// </summary>
        /// <value>Determines if leverage factor is fixed or variable. This data is available for all the regions.</value>
        [DataMember(Name = "type", EmitDefaultValue = false)]
        public string Type { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class InlineResponse20014DataGearingLeverage {\n");
            sb.Append("  IsLeverageFund: ").Append(IsLeverageFund).Append("\n");
            sb.Append("  Factor: ").Append(Factor).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as InlineResponse20014DataGearingLeverage);
        }

        /// <summary>
        /// Returns true if InlineResponse20014DataGearingLeverage instances are equal
        /// </summary>
        /// <param name="input">Instance of InlineResponse20014DataGearingLeverage to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(InlineResponse20014DataGearingLeverage input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.IsLeverageFund == input.IsLeverageFund ||
                    this.IsLeverageFund.Equals(input.IsLeverageFund)
                ) && 
                (
                    this.Factor == input.Factor ||
                    this.Factor.Equals(input.Factor)
                ) && 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.IsLeverageFund.GetHashCode();
                hashCode = (hashCode * 59) + this.Factor.GetHashCode();
                if (this.Type != null)
                {
                    hashCode = (hashCode * 59) + this.Type.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
