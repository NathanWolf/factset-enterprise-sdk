/*
 * FactSet SCIM API
 *
 * FactSet's SCIM API implementation.
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = FactSet.SDK.ProcuretoPaySCIM.Client.OpenAPIDateConverter;

namespace FactSet.SDK.ProcuretoPaySCIM.Model
{
    /// <summary>
    /// UserResourceUrnScimSchemasExtensionCoreFactset10
    /// </summary>
    [DataContract(Name = "UserResource_urn_scim_schemas_extension_CoreFactset_1_0")]
    public partial class UserResourceUrnScimSchemasExtensionCoreFactset10 : IEquatable<UserResourceUrnScimSchemasExtensionCoreFactset10>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="UserResourceUrnScimSchemasExtensionCoreFactset10" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected UserResourceUrnScimSchemasExtensionCoreFactset10() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="UserResourceUrnScimSchemasExtensionCoreFactset10" /> class.
        /// </summary>
        /// <param name="username">A FactSet \&quot;username\&quot; is FactSet&#39;s logical structure for grouping serial numbers into like-groups based on roleName, geographical location or line of business. (required).</param>
        /// <param name="location">location (required).</param>
        /// <param name="roleName">Predetermined role of specific individual. Issues individual a base FactSet workstation and serial number. If passed as NULL a base-FactSet workstation will be allocated to the individual granting the individual a FactSet SerialNumber.</param>
        /// <param name="products">An array of FactSet products to allocate/remove from an individual. Individual must have a FactSet serial number associated with them..</param>
        /// <param name="assertionValue">Field containing the value, passed as nameID, used to assert the identity of an individual via SAML2.0 which maps service-provider-side to a FactSet serial number. Only applicable to individuals with a FactSet serial number with a Federation setup between your domain and FactSet&#39;s.</param>
        public UserResourceUrnScimSchemasExtensionCoreFactset10(string username = default(string), LocationResourceReference location = default(LocationResourceReference), string roleName = default(string), List<ProductResourceReference> products = default(List<ProductResourceReference>), string assertionValue = default(string))
        {
            // to ensure "username" is required (not null)
            if (username == null) {
                throw new ArgumentNullException("username is a required property for UserResourceUrnScimSchemasExtensionCoreFactset10 and cannot be null");
            }
            this.Username = username;
            // to ensure "location" is required (not null)
            if (location == null) {
                throw new ArgumentNullException("location is a required property for UserResourceUrnScimSchemasExtensionCoreFactset10 and cannot be null");
            }
            this.Location = location;
            this.RoleName = roleName;
            this.Products = products;
            this.AssertionValue = assertionValue;
        }

        /// <summary>
        /// A FactSet \&quot;username\&quot; is FactSet&#39;s logical structure for grouping serial numbers into like-groups based on roleName, geographical location or line of business.
        /// </summary>
        /// <value>A FactSet \&quot;username\&quot; is FactSet&#39;s logical structure for grouping serial numbers into like-groups based on roleName, geographical location or line of business.</value>
        [DataMember(Name = "username", IsRequired = true, EmitDefaultValue = false)]
        public string Username { get; set; }

        /// <summary>
        /// A serial number represents an individual&#39;s unique FactSet account identifier and base-workstation access. Serial numbers are allocated to an individual when a valid RoleName is present.
        /// </summary>
        /// <value>A serial number represents an individual&#39;s unique FactSet account identifier and base-workstation access. Serial numbers are allocated to an individual when a valid RoleName is present.</value>
        [DataMember(Name = "serialNumber", EmitDefaultValue = false)]
        public string SerialNumber { get; private set; }

        /// <summary>
        /// Returns false as SerialNumber should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeSerialNumber()
        {
            return false;
        }
        /// <summary>
        /// FactSet.net ID.
        /// </summary>
        /// <value>FactSet.net ID.</value>
        [DataMember(Name = "factSetNetId", EmitDefaultValue = false)]
        public string FactSetNetId { get; private set; }

        /// <summary>
        /// Returns false as FactSetNetId should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeFactSetNetId()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets Location
        /// </summary>
        [DataMember(Name = "location", IsRequired = true, EmitDefaultValue = false)]
        public LocationResourceReference Location { get; set; }

        /// <summary>
        /// Predetermined role of specific individual. Issues individual a base FactSet workstation and serial number. If passed as NULL a base-FactSet workstation will be allocated to the individual granting the individual a FactSet SerialNumber
        /// </summary>
        /// <value>Predetermined role of specific individual. Issues individual a base FactSet workstation and serial number. If passed as NULL a base-FactSet workstation will be allocated to the individual granting the individual a FactSet SerialNumber</value>
        [DataMember(Name = "roleName", EmitDefaultValue = false)]
        public string RoleName { get; set; }

        /// <summary>
        /// An array of FactSet products to allocate/remove from an individual. Individual must have a FactSet serial number associated with them.
        /// </summary>
        /// <value>An array of FactSet products to allocate/remove from an individual. Individual must have a FactSet serial number associated with them.</value>
        [DataMember(Name = "products", EmitDefaultValue = false)]
        public List<ProductResourceReference> Products { get; set; }

        /// <summary>
        /// An array of pending FactSet product orders.
        /// </summary>
        /// <value>An array of pending FactSet product orders.</value>
        [DataMember(Name = "pendingProductOrders", EmitDefaultValue = false)]
        public List<PendingProductOrder> PendingProductOrders { get; private set; }

        /// <summary>
        /// Returns false as PendingProductOrders should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializePendingProductOrders()
        {
            return false;
        }
        /// <summary>
        /// Field containing the value, passed as nameID, used to assert the identity of an individual via SAML2.0 which maps service-provider-side to a FactSet serial number. Only applicable to individuals with a FactSet serial number with a Federation setup between your domain and FactSet&#39;s
        /// </summary>
        /// <value>Field containing the value, passed as nameID, used to assert the identity of an individual via SAML2.0 which maps service-provider-side to a FactSet serial number. Only applicable to individuals with a FactSet serial number with a Federation setup between your domain and FactSet&#39;s</value>
        [DataMember(Name = "assertionValue", EmitDefaultValue = false)]
        public string AssertionValue { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class UserResourceUrnScimSchemasExtensionCoreFactset10 {\n");
            sb.Append("  Username: ").Append(Username).Append("\n");
            sb.Append("  SerialNumber: ").Append(SerialNumber).Append("\n");
            sb.Append("  FactSetNetId: ").Append(FactSetNetId).Append("\n");
            sb.Append("  Location: ").Append(Location).Append("\n");
            sb.Append("  RoleName: ").Append(RoleName).Append("\n");
            sb.Append("  Products: ").Append(Products).Append("\n");
            sb.Append("  PendingProductOrders: ").Append(PendingProductOrders).Append("\n");
            sb.Append("  AssertionValue: ").Append(AssertionValue).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as UserResourceUrnScimSchemasExtensionCoreFactset10);
        }

        /// <summary>
        /// Returns true if UserResourceUrnScimSchemasExtensionCoreFactset10 instances are equal
        /// </summary>
        /// <param name="input">Instance of UserResourceUrnScimSchemasExtensionCoreFactset10 to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(UserResourceUrnScimSchemasExtensionCoreFactset10 input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Username == input.Username ||
                    (this.Username != null &&
                    this.Username.Equals(input.Username))
                ) && 
                (
                    this.SerialNumber == input.SerialNumber ||
                    (this.SerialNumber != null &&
                    this.SerialNumber.Equals(input.SerialNumber))
                ) && 
                (
                    this.FactSetNetId == input.FactSetNetId ||
                    (this.FactSetNetId != null &&
                    this.FactSetNetId.Equals(input.FactSetNetId))
                ) && 
                (
                    this.Location == input.Location ||
                    (this.Location != null &&
                    this.Location.Equals(input.Location))
                ) && 
                (
                    this.RoleName == input.RoleName ||
                    (this.RoleName != null &&
                    this.RoleName.Equals(input.RoleName))
                ) && 
                (
                    this.Products == input.Products ||
                    this.Products != null &&
                    input.Products != null &&
                    this.Products.SequenceEqual(input.Products)
                ) && 
                (
                    this.PendingProductOrders == input.PendingProductOrders ||
                    this.PendingProductOrders != null &&
                    input.PendingProductOrders != null &&
                    this.PendingProductOrders.SequenceEqual(input.PendingProductOrders)
                ) && 
                (
                    this.AssertionValue == input.AssertionValue ||
                    (this.AssertionValue != null &&
                    this.AssertionValue.Equals(input.AssertionValue))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Username != null)
                {
                    hashCode = (hashCode * 59) + this.Username.GetHashCode();
                }
                if (this.SerialNumber != null)
                {
                    hashCode = (hashCode * 59) + this.SerialNumber.GetHashCode();
                }
                if (this.FactSetNetId != null)
                {
                    hashCode = (hashCode * 59) + this.FactSetNetId.GetHashCode();
                }
                if (this.Location != null)
                {
                    hashCode = (hashCode * 59) + this.Location.GetHashCode();
                }
                if (this.RoleName != null)
                {
                    hashCode = (hashCode * 59) + this.RoleName.GetHashCode();
                }
                if (this.Products != null)
                {
                    hashCode = (hashCode * 59) + this.Products.GetHashCode();
                }
                if (this.PendingProductOrders != null)
                {
                    hashCode = (hashCode * 59) + this.PendingProductOrders.GetHashCode();
                }
                if (this.AssertionValue != null)
                {
                    hashCode = (hashCode * 59) + this.AssertionValue.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
