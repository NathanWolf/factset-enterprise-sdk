/*
 * IRN API v1
 *
 * Allows users to create, update and configure IRN data.
 *
 * The version of the OpenAPI document: 1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using FactSet.SDK.IRNContacts.Client;
using FactSet.SDK.IRNContacts.Model;
using FactSet.SDK.Utils.Authentication;

namespace FactSet.SDK.IRNContacts.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IContactsApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Get the About field content for a specific contact
        /// </summary>
        /// <exception cref="FactSet.SDK.IRNContacts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactId">contactId of associated record</param>
        /// <returns>string</returns>
        string V1ContactsContactIdAboutGet(Guid contactId);

        /// <summary>
        /// Get the About field content for a specific contact
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FactSet.SDK.IRNContacts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactId">contactId of associated record</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> V1ContactsContactIdAboutGetWithHttpInfo(Guid contactId);
        /// <summary>
        /// Delete a contact
        /// </summary>
        /// <exception cref="FactSet.SDK.IRNContacts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactId">contactId to delete associated record</param>
        /// <returns></returns>
        void V1ContactsContactIdDelete(Guid contactId);

        /// <summary>
        /// Delete a contact
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FactSet.SDK.IRNContacts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactId">contactId to delete associated record</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> V1ContactsContactIdDeleteWithHttpInfo(Guid contactId);
        /// <summary>
        /// Get a contact’s audit history
        /// </summary>
        /// <exception cref="FactSet.SDK.IRNContacts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactId">contactId to get associated records</param>
        /// <returns>List&lt;ContactEventDto&gt;</returns>
        List<ContactEventDto> V1ContactsContactIdEventsGet(Guid contactId);

        /// <summary>
        /// Get a contact’s audit history
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FactSet.SDK.IRNContacts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactId">contactId to get associated records</param>
        /// <returns>ApiResponse of List&lt;ContactEventDto&gt;</returns>
        ApiResponse<List<ContactEventDto>> V1ContactsContactIdEventsGetWithHttpInfo(Guid contactId);
        /// <summary>
        /// Get all custom field and standard field details on a specific contact
        /// </summary>
        /// <exception cref="FactSet.SDK.IRNContacts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactId">contactId to get associated record</param>
        /// <returns>ContactDto</returns>
        ContactDto V1ContactsContactIdGet(Guid contactId);

        /// <summary>
        /// Get all custom field and standard field details on a specific contact
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FactSet.SDK.IRNContacts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactId">contactId to get associated record</param>
        /// <returns>ApiResponse of ContactDto</returns>
        ApiResponse<ContactDto> V1ContactsContactIdGetWithHttpInfo(Guid contactId);
        /// <summary>
        /// Edit a contact’s standard field and custom field data
        /// </summary>
        /// <exception cref="FactSet.SDK.IRNContacts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactId">contactId to update associated record</param>
        /// <param name="operation">contactSaveDtoPatch object to update (optional)</param>
        /// <returns></returns>
        void V1ContactsContactIdPatch(Guid contactId, List<Operation> operation = default(List<Operation>));

        /// <summary>
        /// Edit a contact’s standard field and custom field data
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FactSet.SDK.IRNContacts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactId">contactId to update associated record</param>
        /// <param name="operation">contactSaveDtoPatch object to update (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> V1ContactsContactIdPatchWithHttpInfo(Guid contactId, List<Operation> operation = default(List<Operation>));
        /// <summary>
        /// Get all notes and meetings where a specific contact was tagged
        /// </summary>
        /// <exception cref="FactSet.SDK.IRNContacts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactId">contactId to get associated records</param>
        /// <returns>List&lt;RecordPreviewDto&gt;</returns>
        List<RecordPreviewDto> V1ContactsContactIdRecordsGet(Guid contactId);

        /// <summary>
        /// Get all notes and meetings where a specific contact was tagged
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FactSet.SDK.IRNContacts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactId">contactId to get associated records</param>
        /// <returns>ApiResponse of List&lt;RecordPreviewDto&gt;</returns>
        ApiResponse<List<RecordPreviewDto>> V1ContactsContactIdRecordsGetWithHttpInfo(Guid contactId);
        /// <summary>
        /// Returns a list of a contact’s relationships
        /// </summary>
        /// <exception cref="FactSet.SDK.IRNContacts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactId">contactId to get associated records</param>
        /// <returns>List&lt;ContactRelationshipDto&gt;</returns>
        List<ContactRelationshipDto> V1ContactsContactIdRelationshipsGet(Guid contactId);

        /// <summary>
        /// Returns a list of a contact’s relationships
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FactSet.SDK.IRNContacts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactId">contactId to get associated records</param>
        /// <returns>ApiResponse of List&lt;ContactRelationshipDto&gt;</returns>
        ApiResponse<List<ContactRelationshipDto>> V1ContactsContactIdRelationshipsGetWithHttpInfo(Guid contactId);
        /// <summary>
        /// Get list of all contacts in your group along with some of their standard field data
        /// </summary>
        /// <exception cref="FactSet.SDK.IRNContacts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fullName">Filter results on fullName (optional)</param>
        /// <param name="emailAddress">Filter results on emailAddress (optional)</param>
        /// <param name="identifier">Filter results on identifier (optional)</param>
        /// <param name="employerName">Filter results on employerName (optional)</param>
        /// <param name="customFieldValues">Includes custom field values in response if true (optional, default to false)</param>
        /// <param name="search">Filter results on the combination of fullName, emailAddress, identifier and employerName (optional)</param>
        /// <param name="sort"> (optional)</param>
        /// <param name="includeLastMeetingDate">If true, returns when they were last tagged as an attendee in an IRN meeting (optional, default to false)</param>
        /// <param name="limit">Restrict number of records returned (optional, default to 0)</param>
        /// <returns>List&lt;ContactSummaryDto&gt;</returns>
        List<ContactSummaryDto> V1ContactsGet(string fullName = default(string), string emailAddress = default(string), string identifier = default(string), string employerName = default(string), bool? customFieldValues = default(bool?), string search = default(string), string sort = default(string), bool? includeLastMeetingDate = default(bool?), int? limit = default(int?));

        /// <summary>
        /// Get list of all contacts in your group along with some of their standard field data
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FactSet.SDK.IRNContacts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fullName">Filter results on fullName (optional)</param>
        /// <param name="emailAddress">Filter results on emailAddress (optional)</param>
        /// <param name="identifier">Filter results on identifier (optional)</param>
        /// <param name="employerName">Filter results on employerName (optional)</param>
        /// <param name="customFieldValues">Includes custom field values in response if true (optional, default to false)</param>
        /// <param name="search">Filter results on the combination of fullName, emailAddress, identifier and employerName (optional)</param>
        /// <param name="sort"> (optional)</param>
        /// <param name="includeLastMeetingDate">If true, returns when they were last tagged as an attendee in an IRN meeting (optional, default to false)</param>
        /// <param name="limit">Restrict number of records returned (optional, default to 0)</param>
        /// <returns>ApiResponse of List&lt;ContactSummaryDto&gt;</returns>
        ApiResponse<List<ContactSummaryDto>> V1ContactsGetWithHttpInfo(string fullName = default(string), string emailAddress = default(string), string identifier = default(string), string employerName = default(string), bool? customFieldValues = default(bool?), string search = default(string), string sort = default(string), bool? includeLastMeetingDate = default(bool?), int? limit = default(int?));
        /// <summary>
        /// Create a contact
        /// </summary>
        /// <exception cref="FactSet.SDK.IRNContacts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactSaveDto">contactSaveDto object to save (optional)</param>
        /// <returns>Guid</returns>
        Guid V1ContactsPost(ContactSaveDto contactSaveDto = default(ContactSaveDto));

        /// <summary>
        /// Create a contact
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FactSet.SDK.IRNContacts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactSaveDto">contactSaveDto object to save (optional)</param>
        /// <returns>ApiResponse of Guid</returns>
        ApiResponse<Guid> V1ContactsPostWithHttpInfo(ContactSaveDto contactSaveDto = default(ContactSaveDto));
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IContactsApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Get the About field content for a specific contact
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FactSet.SDK.IRNContacts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactId">contactId of associated record</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> V1ContactsContactIdAboutGetAsync(Guid contactId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get the About field content for a specific contact
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FactSet.SDK.IRNContacts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactId">contactId of associated record</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> V1ContactsContactIdAboutGetWithHttpInfoAsync(Guid contactId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Delete a contact
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FactSet.SDK.IRNContacts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactId">contactId to delete associated record</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task V1ContactsContactIdDeleteAsync(Guid contactId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Delete a contact
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FactSet.SDK.IRNContacts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactId">contactId to delete associated record</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> V1ContactsContactIdDeleteWithHttpInfoAsync(Guid contactId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get a contact’s audit history
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FactSet.SDK.IRNContacts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactId">contactId to get associated records</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;ContactEventDto&gt;</returns>
        System.Threading.Tasks.Task<List<ContactEventDto>> V1ContactsContactIdEventsGetAsync(Guid contactId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get a contact’s audit history
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FactSet.SDK.IRNContacts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactId">contactId to get associated records</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;ContactEventDto&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<ContactEventDto>>> V1ContactsContactIdEventsGetWithHttpInfoAsync(Guid contactId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get all custom field and standard field details on a specific contact
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FactSet.SDK.IRNContacts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactId">contactId to get associated record</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ContactDto</returns>
        System.Threading.Tasks.Task<ContactDto> V1ContactsContactIdGetAsync(Guid contactId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get all custom field and standard field details on a specific contact
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FactSet.SDK.IRNContacts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactId">contactId to get associated record</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ContactDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<ContactDto>> V1ContactsContactIdGetWithHttpInfoAsync(Guid contactId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Edit a contact’s standard field and custom field data
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FactSet.SDK.IRNContacts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactId">contactId to update associated record</param>
        /// <param name="operation">contactSaveDtoPatch object to update (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task V1ContactsContactIdPatchAsync(Guid contactId, List<Operation> operation = default(List<Operation>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Edit a contact’s standard field and custom field data
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FactSet.SDK.IRNContacts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactId">contactId to update associated record</param>
        /// <param name="operation">contactSaveDtoPatch object to update (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> V1ContactsContactIdPatchWithHttpInfoAsync(Guid contactId, List<Operation> operation = default(List<Operation>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get all notes and meetings where a specific contact was tagged
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FactSet.SDK.IRNContacts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactId">contactId to get associated records</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;RecordPreviewDto&gt;</returns>
        System.Threading.Tasks.Task<List<RecordPreviewDto>> V1ContactsContactIdRecordsGetAsync(Guid contactId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get all notes and meetings where a specific contact was tagged
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FactSet.SDK.IRNContacts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactId">contactId to get associated records</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;RecordPreviewDto&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<RecordPreviewDto>>> V1ContactsContactIdRecordsGetWithHttpInfoAsync(Guid contactId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Returns a list of a contact’s relationships
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FactSet.SDK.IRNContacts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactId">contactId to get associated records</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;ContactRelationshipDto&gt;</returns>
        System.Threading.Tasks.Task<List<ContactRelationshipDto>> V1ContactsContactIdRelationshipsGetAsync(Guid contactId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Returns a list of a contact’s relationships
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FactSet.SDK.IRNContacts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactId">contactId to get associated records</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;ContactRelationshipDto&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<ContactRelationshipDto>>> V1ContactsContactIdRelationshipsGetWithHttpInfoAsync(Guid contactId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get list of all contacts in your group along with some of their standard field data
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FactSet.SDK.IRNContacts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fullName">Filter results on fullName (optional)</param>
        /// <param name="emailAddress">Filter results on emailAddress (optional)</param>
        /// <param name="identifier">Filter results on identifier (optional)</param>
        /// <param name="employerName">Filter results on employerName (optional)</param>
        /// <param name="customFieldValues">Includes custom field values in response if true (optional, default to false)</param>
        /// <param name="search">Filter results on the combination of fullName, emailAddress, identifier and employerName (optional)</param>
        /// <param name="sort"> (optional)</param>
        /// <param name="includeLastMeetingDate">If true, returns when they were last tagged as an attendee in an IRN meeting (optional, default to false)</param>
        /// <param name="limit">Restrict number of records returned (optional, default to 0)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;ContactSummaryDto&gt;</returns>
        System.Threading.Tasks.Task<List<ContactSummaryDto>> V1ContactsGetAsync(string fullName = default(string), string emailAddress = default(string), string identifier = default(string), string employerName = default(string), bool? customFieldValues = default(bool?), string search = default(string), string sort = default(string), bool? includeLastMeetingDate = default(bool?), int? limit = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get list of all contacts in your group along with some of their standard field data
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FactSet.SDK.IRNContacts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fullName">Filter results on fullName (optional)</param>
        /// <param name="emailAddress">Filter results on emailAddress (optional)</param>
        /// <param name="identifier">Filter results on identifier (optional)</param>
        /// <param name="employerName">Filter results on employerName (optional)</param>
        /// <param name="customFieldValues">Includes custom field values in response if true (optional, default to false)</param>
        /// <param name="search">Filter results on the combination of fullName, emailAddress, identifier and employerName (optional)</param>
        /// <param name="sort"> (optional)</param>
        /// <param name="includeLastMeetingDate">If true, returns when they were last tagged as an attendee in an IRN meeting (optional, default to false)</param>
        /// <param name="limit">Restrict number of records returned (optional, default to 0)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;ContactSummaryDto&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<ContactSummaryDto>>> V1ContactsGetWithHttpInfoAsync(string fullName = default(string), string emailAddress = default(string), string identifier = default(string), string employerName = default(string), bool? customFieldValues = default(bool?), string search = default(string), string sort = default(string), bool? includeLastMeetingDate = default(bool?), int? limit = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Create a contact
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FactSet.SDK.IRNContacts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactSaveDto">contactSaveDto object to save (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Guid</returns>
        System.Threading.Tasks.Task<Guid> V1ContactsPostAsync(ContactSaveDto contactSaveDto = default(ContactSaveDto), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create a contact
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FactSet.SDK.IRNContacts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactSaveDto">contactSaveDto object to save (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Guid)</returns>
        System.Threading.Tasks.Task<ApiResponse<Guid>> V1ContactsPostWithHttpInfoAsync(ContactSaveDto contactSaveDto = default(ContactSaveDto), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IContactsApi : IContactsApiSync, IContactsApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ContactsApi : IContactsApi
    {
        private FactSet.SDK.IRNContacts.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ContactsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ContactsApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ContactsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ContactsApi(string basePath)
        {
            this.Configuration = FactSet.SDK.IRNContacts.Client.Configuration.MergeConfigurations(
                FactSet.SDK.IRNContacts.Client.GlobalConfiguration.Instance,
                new FactSet.SDK.IRNContacts.Client.Configuration { BasePath = basePath }
            );
            this.Client = new FactSet.SDK.IRNContacts.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new FactSet.SDK.IRNContacts.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = FactSet.SDK.IRNContacts.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ContactsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ContactsApi(FactSet.SDK.IRNContacts.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = FactSet.SDK.IRNContacts.Client.Configuration.MergeConfigurations(
                FactSet.SDK.IRNContacts.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new FactSet.SDK.IRNContacts.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new FactSet.SDK.IRNContacts.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = FactSet.SDK.IRNContacts.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ContactsApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public ContactsApi(FactSet.SDK.IRNContacts.Client.ISynchronousClient client, FactSet.SDK.IRNContacts.Client.IAsynchronousClient asyncClient, FactSet.SDK.IRNContacts.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = FactSet.SDK.IRNContacts.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public FactSet.SDK.IRNContacts.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public FactSet.SDK.IRNContacts.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public FactSet.SDK.IRNContacts.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public FactSet.SDK.IRNContacts.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Get the About field content for a specific contact 
        /// </summary>
        /// <exception cref="FactSet.SDK.IRNContacts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactId">contactId of associated record</param>
        /// <returns>string</returns>
        public string V1ContactsContactIdAboutGet(Guid contactId)
        {
            FactSet.SDK.IRNContacts.Client.ApiResponse<string> localVarResponse = V1ContactsContactIdAboutGetWithHttpInfo(contactId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get the About field content for a specific contact 
        /// </summary>
        /// <exception cref="FactSet.SDK.IRNContacts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactId">contactId of associated record</param>
        /// <returns>ApiResponse of string</returns>
        public FactSet.SDK.IRNContacts.Client.ApiResponse<string> V1ContactsContactIdAboutGetWithHttpInfo(Guid contactId)
        {
            FactSet.SDK.IRNContacts.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.IRNContacts.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.IRNContacts.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = FactSet.SDK.IRNContacts.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("contactId", FactSet.SDK.IRNContacts.Client.ClientUtils.ParameterToString(contactId)); // path parameter

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.IRNContacts.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<string>("/v1/contacts/{contactId}/about", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V1ContactsContactIdAboutGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get the About field content for a specific contact 
        /// </summary>
        /// <exception cref="FactSet.SDK.IRNContacts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactId">contactId of associated record</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> V1ContactsContactIdAboutGetAsync(Guid contactId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            FactSet.SDK.IRNContacts.Client.ApiResponse<string> localVarResponse = await V1ContactsContactIdAboutGetWithHttpInfoAsync(contactId, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get the About field content for a specific contact 
        /// </summary>
        /// <exception cref="FactSet.SDK.IRNContacts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactId">contactId of associated record</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<FactSet.SDK.IRNContacts.Client.ApiResponse<string>> V1ContactsContactIdAboutGetWithHttpInfoAsync(Guid contactId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            FactSet.SDK.IRNContacts.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.IRNContacts.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = FactSet.SDK.IRNContacts.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = FactSet.SDK.IRNContacts.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("contactId", FactSet.SDK.IRNContacts.Client.ClientUtils.ParameterToString(contactId)); // path parameter

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.IRNContacts.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<string>("/v1/contacts/{contactId}/about", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V1ContactsContactIdAboutGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete a contact 
        /// </summary>
        /// <exception cref="FactSet.SDK.IRNContacts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactId">contactId to delete associated record</param>
        /// <returns></returns>
        public void V1ContactsContactIdDelete(Guid contactId)
        {
            V1ContactsContactIdDeleteWithHttpInfo(contactId);
        }

        /// <summary>
        /// Delete a contact 
        /// </summary>
        /// <exception cref="FactSet.SDK.IRNContacts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactId">contactId to delete associated record</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public FactSet.SDK.IRNContacts.Client.ApiResponse<Object> V1ContactsContactIdDeleteWithHttpInfo(Guid contactId)
        {
            FactSet.SDK.IRNContacts.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.IRNContacts.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.IRNContacts.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = FactSet.SDK.IRNContacts.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("contactId", FactSet.SDK.IRNContacts.Client.ClientUtils.ParameterToString(contactId)); // path parameter

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.IRNContacts.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/v1/contacts/{contactId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V1ContactsContactIdDelete", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete a contact 
        /// </summary>
        /// <exception cref="FactSet.SDK.IRNContacts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactId">contactId to delete associated record</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task V1ContactsContactIdDeleteAsync(Guid contactId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await V1ContactsContactIdDeleteWithHttpInfoAsync(contactId, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Delete a contact 
        /// </summary>
        /// <exception cref="FactSet.SDK.IRNContacts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactId">contactId to delete associated record</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<FactSet.SDK.IRNContacts.Client.ApiResponse<Object>> V1ContactsContactIdDeleteWithHttpInfoAsync(Guid contactId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            FactSet.SDK.IRNContacts.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.IRNContacts.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = FactSet.SDK.IRNContacts.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = FactSet.SDK.IRNContacts.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("contactId", FactSet.SDK.IRNContacts.Client.ClientUtils.ParameterToString(contactId)); // path parameter

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.IRNContacts.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/v1/contacts/{contactId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V1ContactsContactIdDelete", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get a contact’s audit history 
        /// </summary>
        /// <exception cref="FactSet.SDK.IRNContacts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactId">contactId to get associated records</param>
        /// <returns>List&lt;ContactEventDto&gt;</returns>
        public List<ContactEventDto> V1ContactsContactIdEventsGet(Guid contactId)
        {
            FactSet.SDK.IRNContacts.Client.ApiResponse<List<ContactEventDto>> localVarResponse = V1ContactsContactIdEventsGetWithHttpInfo(contactId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get a contact’s audit history 
        /// </summary>
        /// <exception cref="FactSet.SDK.IRNContacts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactId">contactId to get associated records</param>
        /// <returns>ApiResponse of List&lt;ContactEventDto&gt;</returns>
        public FactSet.SDK.IRNContacts.Client.ApiResponse<List<ContactEventDto>> V1ContactsContactIdEventsGetWithHttpInfo(Guid contactId)
        {
            FactSet.SDK.IRNContacts.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.IRNContacts.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.IRNContacts.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = FactSet.SDK.IRNContacts.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("contactId", FactSet.SDK.IRNContacts.Client.ClientUtils.ParameterToString(contactId)); // path parameter

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.IRNContacts.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<ContactEventDto>>("/v1/contacts/{contactId}/events", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V1ContactsContactIdEventsGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get a contact’s audit history 
        /// </summary>
        /// <exception cref="FactSet.SDK.IRNContacts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactId">contactId to get associated records</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;ContactEventDto&gt;</returns>
        public async System.Threading.Tasks.Task<List<ContactEventDto>> V1ContactsContactIdEventsGetAsync(Guid contactId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            FactSet.SDK.IRNContacts.Client.ApiResponse<List<ContactEventDto>> localVarResponse = await V1ContactsContactIdEventsGetWithHttpInfoAsync(contactId, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get a contact’s audit history 
        /// </summary>
        /// <exception cref="FactSet.SDK.IRNContacts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactId">contactId to get associated records</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;ContactEventDto&gt;)</returns>
        public async System.Threading.Tasks.Task<FactSet.SDK.IRNContacts.Client.ApiResponse<List<ContactEventDto>>> V1ContactsContactIdEventsGetWithHttpInfoAsync(Guid contactId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            FactSet.SDK.IRNContacts.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.IRNContacts.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = FactSet.SDK.IRNContacts.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = FactSet.SDK.IRNContacts.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("contactId", FactSet.SDK.IRNContacts.Client.ClientUtils.ParameterToString(contactId)); // path parameter

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.IRNContacts.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<ContactEventDto>>("/v1/contacts/{contactId}/events", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V1ContactsContactIdEventsGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get all custom field and standard field details on a specific contact 
        /// </summary>
        /// <exception cref="FactSet.SDK.IRNContacts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactId">contactId to get associated record</param>
        /// <returns>ContactDto</returns>
        public ContactDto V1ContactsContactIdGet(Guid contactId)
        {
            FactSet.SDK.IRNContacts.Client.ApiResponse<ContactDto> localVarResponse = V1ContactsContactIdGetWithHttpInfo(contactId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get all custom field and standard field details on a specific contact 
        /// </summary>
        /// <exception cref="FactSet.SDK.IRNContacts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactId">contactId to get associated record</param>
        /// <returns>ApiResponse of ContactDto</returns>
        public FactSet.SDK.IRNContacts.Client.ApiResponse<ContactDto> V1ContactsContactIdGetWithHttpInfo(Guid contactId)
        {
            FactSet.SDK.IRNContacts.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.IRNContacts.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.IRNContacts.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = FactSet.SDK.IRNContacts.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("contactId", FactSet.SDK.IRNContacts.Client.ClientUtils.ParameterToString(contactId)); // path parameter

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.IRNContacts.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<ContactDto>("/v1/contacts/{contactId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V1ContactsContactIdGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get all custom field and standard field details on a specific contact 
        /// </summary>
        /// <exception cref="FactSet.SDK.IRNContacts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactId">contactId to get associated record</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ContactDto</returns>
        public async System.Threading.Tasks.Task<ContactDto> V1ContactsContactIdGetAsync(Guid contactId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            FactSet.SDK.IRNContacts.Client.ApiResponse<ContactDto> localVarResponse = await V1ContactsContactIdGetWithHttpInfoAsync(contactId, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get all custom field and standard field details on a specific contact 
        /// </summary>
        /// <exception cref="FactSet.SDK.IRNContacts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactId">contactId to get associated record</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ContactDto)</returns>
        public async System.Threading.Tasks.Task<FactSet.SDK.IRNContacts.Client.ApiResponse<ContactDto>> V1ContactsContactIdGetWithHttpInfoAsync(Guid contactId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            FactSet.SDK.IRNContacts.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.IRNContacts.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = FactSet.SDK.IRNContacts.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = FactSet.SDK.IRNContacts.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("contactId", FactSet.SDK.IRNContacts.Client.ClientUtils.ParameterToString(contactId)); // path parameter

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.IRNContacts.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<ContactDto>("/v1/contacts/{contactId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V1ContactsContactIdGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Edit a contact’s standard field and custom field data 
        /// </summary>
        /// <exception cref="FactSet.SDK.IRNContacts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactId">contactId to update associated record</param>
        /// <param name="operation">contactSaveDtoPatch object to update (optional)</param>
        /// <returns></returns>
        public void V1ContactsContactIdPatch(Guid contactId, List<Operation> operation = default(List<Operation>))
        {
            V1ContactsContactIdPatchWithHttpInfo(contactId, operation);
        }

        /// <summary>
        /// Edit a contact’s standard field and custom field data 
        /// </summary>
        /// <exception cref="FactSet.SDK.IRNContacts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactId">contactId to update associated record</param>
        /// <param name="operation">contactSaveDtoPatch object to update (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public FactSet.SDK.IRNContacts.Client.ApiResponse<Object> V1ContactsContactIdPatchWithHttpInfo(Guid contactId, List<Operation> operation = default(List<Operation>))
        {
            FactSet.SDK.IRNContacts.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.IRNContacts.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json-patch+json",
                "application/json",
                "text/json",
                "application/_*+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.IRNContacts.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = FactSet.SDK.IRNContacts.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("contactId", FactSet.SDK.IRNContacts.Client.ClientUtils.ParameterToString(contactId)); // path parameter
            localVarRequestOptions.Data = operation;

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.IRNContacts.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Patch<Object>("/v1/contacts/{contactId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V1ContactsContactIdPatch", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Edit a contact’s standard field and custom field data 
        /// </summary>
        /// <exception cref="FactSet.SDK.IRNContacts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactId">contactId to update associated record</param>
        /// <param name="operation">contactSaveDtoPatch object to update (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task V1ContactsContactIdPatchAsync(Guid contactId, List<Operation> operation = default(List<Operation>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await V1ContactsContactIdPatchWithHttpInfoAsync(contactId, operation, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Edit a contact’s standard field and custom field data 
        /// </summary>
        /// <exception cref="FactSet.SDK.IRNContacts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactId">contactId to update associated record</param>
        /// <param name="operation">contactSaveDtoPatch object to update (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<FactSet.SDK.IRNContacts.Client.ApiResponse<Object>> V1ContactsContactIdPatchWithHttpInfoAsync(Guid contactId, List<Operation> operation = default(List<Operation>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            FactSet.SDK.IRNContacts.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.IRNContacts.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = FactSet.SDK.IRNContacts.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = FactSet.SDK.IRNContacts.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("contactId", FactSet.SDK.IRNContacts.Client.ClientUtils.ParameterToString(contactId)); // path parameter
            localVarRequestOptions.Data = operation;

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.IRNContacts.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PatchAsync<Object>("/v1/contacts/{contactId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V1ContactsContactIdPatch", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get all notes and meetings where a specific contact was tagged 
        /// </summary>
        /// <exception cref="FactSet.SDK.IRNContacts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactId">contactId to get associated records</param>
        /// <returns>List&lt;RecordPreviewDto&gt;</returns>
        public List<RecordPreviewDto> V1ContactsContactIdRecordsGet(Guid contactId)
        {
            FactSet.SDK.IRNContacts.Client.ApiResponse<List<RecordPreviewDto>> localVarResponse = V1ContactsContactIdRecordsGetWithHttpInfo(contactId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get all notes and meetings where a specific contact was tagged 
        /// </summary>
        /// <exception cref="FactSet.SDK.IRNContacts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactId">contactId to get associated records</param>
        /// <returns>ApiResponse of List&lt;RecordPreviewDto&gt;</returns>
        public FactSet.SDK.IRNContacts.Client.ApiResponse<List<RecordPreviewDto>> V1ContactsContactIdRecordsGetWithHttpInfo(Guid contactId)
        {
            FactSet.SDK.IRNContacts.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.IRNContacts.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.IRNContacts.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = FactSet.SDK.IRNContacts.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("contactId", FactSet.SDK.IRNContacts.Client.ClientUtils.ParameterToString(contactId)); // path parameter

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.IRNContacts.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<RecordPreviewDto>>("/v1/contacts/{contactId}/records", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V1ContactsContactIdRecordsGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get all notes and meetings where a specific contact was tagged 
        /// </summary>
        /// <exception cref="FactSet.SDK.IRNContacts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactId">contactId to get associated records</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;RecordPreviewDto&gt;</returns>
        public async System.Threading.Tasks.Task<List<RecordPreviewDto>> V1ContactsContactIdRecordsGetAsync(Guid contactId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            FactSet.SDK.IRNContacts.Client.ApiResponse<List<RecordPreviewDto>> localVarResponse = await V1ContactsContactIdRecordsGetWithHttpInfoAsync(contactId, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get all notes and meetings where a specific contact was tagged 
        /// </summary>
        /// <exception cref="FactSet.SDK.IRNContacts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactId">contactId to get associated records</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;RecordPreviewDto&gt;)</returns>
        public async System.Threading.Tasks.Task<FactSet.SDK.IRNContacts.Client.ApiResponse<List<RecordPreviewDto>>> V1ContactsContactIdRecordsGetWithHttpInfoAsync(Guid contactId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            FactSet.SDK.IRNContacts.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.IRNContacts.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = FactSet.SDK.IRNContacts.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = FactSet.SDK.IRNContacts.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("contactId", FactSet.SDK.IRNContacts.Client.ClientUtils.ParameterToString(contactId)); // path parameter

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.IRNContacts.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<RecordPreviewDto>>("/v1/contacts/{contactId}/records", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V1ContactsContactIdRecordsGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Returns a list of a contact’s relationships 
        /// </summary>
        /// <exception cref="FactSet.SDK.IRNContacts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactId">contactId to get associated records</param>
        /// <returns>List&lt;ContactRelationshipDto&gt;</returns>
        public List<ContactRelationshipDto> V1ContactsContactIdRelationshipsGet(Guid contactId)
        {
            FactSet.SDK.IRNContacts.Client.ApiResponse<List<ContactRelationshipDto>> localVarResponse = V1ContactsContactIdRelationshipsGetWithHttpInfo(contactId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns a list of a contact’s relationships 
        /// </summary>
        /// <exception cref="FactSet.SDK.IRNContacts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactId">contactId to get associated records</param>
        /// <returns>ApiResponse of List&lt;ContactRelationshipDto&gt;</returns>
        public FactSet.SDK.IRNContacts.Client.ApiResponse<List<ContactRelationshipDto>> V1ContactsContactIdRelationshipsGetWithHttpInfo(Guid contactId)
        {
            FactSet.SDK.IRNContacts.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.IRNContacts.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.IRNContacts.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = FactSet.SDK.IRNContacts.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("contactId", FactSet.SDK.IRNContacts.Client.ClientUtils.ParameterToString(contactId)); // path parameter

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.IRNContacts.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<ContactRelationshipDto>>("/v1/contacts/{contactId}/relationships", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V1ContactsContactIdRelationshipsGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Returns a list of a contact’s relationships 
        /// </summary>
        /// <exception cref="FactSet.SDK.IRNContacts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactId">contactId to get associated records</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;ContactRelationshipDto&gt;</returns>
        public async System.Threading.Tasks.Task<List<ContactRelationshipDto>> V1ContactsContactIdRelationshipsGetAsync(Guid contactId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            FactSet.SDK.IRNContacts.Client.ApiResponse<List<ContactRelationshipDto>> localVarResponse = await V1ContactsContactIdRelationshipsGetWithHttpInfoAsync(contactId, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns a list of a contact’s relationships 
        /// </summary>
        /// <exception cref="FactSet.SDK.IRNContacts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactId">contactId to get associated records</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;ContactRelationshipDto&gt;)</returns>
        public async System.Threading.Tasks.Task<FactSet.SDK.IRNContacts.Client.ApiResponse<List<ContactRelationshipDto>>> V1ContactsContactIdRelationshipsGetWithHttpInfoAsync(Guid contactId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            FactSet.SDK.IRNContacts.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.IRNContacts.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = FactSet.SDK.IRNContacts.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = FactSet.SDK.IRNContacts.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("contactId", FactSet.SDK.IRNContacts.Client.ClientUtils.ParameterToString(contactId)); // path parameter

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.IRNContacts.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<ContactRelationshipDto>>("/v1/contacts/{contactId}/relationships", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V1ContactsContactIdRelationshipsGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get list of all contacts in your group along with some of their standard field data 
        /// </summary>
        /// <exception cref="FactSet.SDK.IRNContacts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fullName">Filter results on fullName (optional)</param>
        /// <param name="emailAddress">Filter results on emailAddress (optional)</param>
        /// <param name="identifier">Filter results on identifier (optional)</param>
        /// <param name="employerName">Filter results on employerName (optional)</param>
        /// <param name="customFieldValues">Includes custom field values in response if true (optional, default to false)</param>
        /// <param name="search">Filter results on the combination of fullName, emailAddress, identifier and employerName (optional)</param>
        /// <param name="sort"> (optional)</param>
        /// <param name="includeLastMeetingDate">If true, returns when they were last tagged as an attendee in an IRN meeting (optional, default to false)</param>
        /// <param name="limit">Restrict number of records returned (optional, default to 0)</param>
        /// <returns>List&lt;ContactSummaryDto&gt;</returns>
        public List<ContactSummaryDto> V1ContactsGet(string fullName = default(string), string emailAddress = default(string), string identifier = default(string), string employerName = default(string), bool? customFieldValues = default(bool?), string search = default(string), string sort = default(string), bool? includeLastMeetingDate = default(bool?), int? limit = default(int?))
        {
            FactSet.SDK.IRNContacts.Client.ApiResponse<List<ContactSummaryDto>> localVarResponse = V1ContactsGetWithHttpInfo(fullName, emailAddress, identifier, employerName, customFieldValues, search, sort, includeLastMeetingDate, limit);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get list of all contacts in your group along with some of their standard field data 
        /// </summary>
        /// <exception cref="FactSet.SDK.IRNContacts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fullName">Filter results on fullName (optional)</param>
        /// <param name="emailAddress">Filter results on emailAddress (optional)</param>
        /// <param name="identifier">Filter results on identifier (optional)</param>
        /// <param name="employerName">Filter results on employerName (optional)</param>
        /// <param name="customFieldValues">Includes custom field values in response if true (optional, default to false)</param>
        /// <param name="search">Filter results on the combination of fullName, emailAddress, identifier and employerName (optional)</param>
        /// <param name="sort"> (optional)</param>
        /// <param name="includeLastMeetingDate">If true, returns when they were last tagged as an attendee in an IRN meeting (optional, default to false)</param>
        /// <param name="limit">Restrict number of records returned (optional, default to 0)</param>
        /// <returns>ApiResponse of List&lt;ContactSummaryDto&gt;</returns>
        public FactSet.SDK.IRNContacts.Client.ApiResponse<List<ContactSummaryDto>> V1ContactsGetWithHttpInfo(string fullName = default(string), string emailAddress = default(string), string identifier = default(string), string employerName = default(string), bool? customFieldValues = default(bool?), string search = default(string), string sort = default(string), bool? includeLastMeetingDate = default(bool?), int? limit = default(int?))
        {
            FactSet.SDK.IRNContacts.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.IRNContacts.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.IRNContacts.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = FactSet.SDK.IRNContacts.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (fullName != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.IRNContacts.Client.ClientUtils.ParameterToMultiMap("", "fullName", fullName));
            }
            if (emailAddress != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.IRNContacts.Client.ClientUtils.ParameterToMultiMap("", "emailAddress", emailAddress));
            }
            if (identifier != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.IRNContacts.Client.ClientUtils.ParameterToMultiMap("", "identifier", identifier));
            }
            if (employerName != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.IRNContacts.Client.ClientUtils.ParameterToMultiMap("", "employerName", employerName));
            }
            if (customFieldValues != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.IRNContacts.Client.ClientUtils.ParameterToMultiMap("", "customFieldValues", customFieldValues));
            }
            if (search != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.IRNContacts.Client.ClientUtils.ParameterToMultiMap("", "search", search));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.IRNContacts.Client.ClientUtils.ParameterToMultiMap("", "sort", sort));
            }
            if (includeLastMeetingDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.IRNContacts.Client.ClientUtils.ParameterToMultiMap("", "includeLastMeetingDate", includeLastMeetingDate));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.IRNContacts.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.IRNContacts.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<ContactSummaryDto>>("/v1/contacts", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V1ContactsGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get list of all contacts in your group along with some of their standard field data 
        /// </summary>
        /// <exception cref="FactSet.SDK.IRNContacts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fullName">Filter results on fullName (optional)</param>
        /// <param name="emailAddress">Filter results on emailAddress (optional)</param>
        /// <param name="identifier">Filter results on identifier (optional)</param>
        /// <param name="employerName">Filter results on employerName (optional)</param>
        /// <param name="customFieldValues">Includes custom field values in response if true (optional, default to false)</param>
        /// <param name="search">Filter results on the combination of fullName, emailAddress, identifier and employerName (optional)</param>
        /// <param name="sort"> (optional)</param>
        /// <param name="includeLastMeetingDate">If true, returns when they were last tagged as an attendee in an IRN meeting (optional, default to false)</param>
        /// <param name="limit">Restrict number of records returned (optional, default to 0)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;ContactSummaryDto&gt;</returns>
        public async System.Threading.Tasks.Task<List<ContactSummaryDto>> V1ContactsGetAsync(string fullName = default(string), string emailAddress = default(string), string identifier = default(string), string employerName = default(string), bool? customFieldValues = default(bool?), string search = default(string), string sort = default(string), bool? includeLastMeetingDate = default(bool?), int? limit = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            FactSet.SDK.IRNContacts.Client.ApiResponse<List<ContactSummaryDto>> localVarResponse = await V1ContactsGetWithHttpInfoAsync(fullName, emailAddress, identifier, employerName, customFieldValues, search, sort, includeLastMeetingDate, limit, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get list of all contacts in your group along with some of their standard field data 
        /// </summary>
        /// <exception cref="FactSet.SDK.IRNContacts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fullName">Filter results on fullName (optional)</param>
        /// <param name="emailAddress">Filter results on emailAddress (optional)</param>
        /// <param name="identifier">Filter results on identifier (optional)</param>
        /// <param name="employerName">Filter results on employerName (optional)</param>
        /// <param name="customFieldValues">Includes custom field values in response if true (optional, default to false)</param>
        /// <param name="search">Filter results on the combination of fullName, emailAddress, identifier and employerName (optional)</param>
        /// <param name="sort"> (optional)</param>
        /// <param name="includeLastMeetingDate">If true, returns when they were last tagged as an attendee in an IRN meeting (optional, default to false)</param>
        /// <param name="limit">Restrict number of records returned (optional, default to 0)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;ContactSummaryDto&gt;)</returns>
        public async System.Threading.Tasks.Task<FactSet.SDK.IRNContacts.Client.ApiResponse<List<ContactSummaryDto>>> V1ContactsGetWithHttpInfoAsync(string fullName = default(string), string emailAddress = default(string), string identifier = default(string), string employerName = default(string), bool? customFieldValues = default(bool?), string search = default(string), string sort = default(string), bool? includeLastMeetingDate = default(bool?), int? limit = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            FactSet.SDK.IRNContacts.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.IRNContacts.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = FactSet.SDK.IRNContacts.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = FactSet.SDK.IRNContacts.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (fullName != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.IRNContacts.Client.ClientUtils.ParameterToMultiMap("", "fullName", fullName));
            }
            if (emailAddress != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.IRNContacts.Client.ClientUtils.ParameterToMultiMap("", "emailAddress", emailAddress));
            }
            if (identifier != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.IRNContacts.Client.ClientUtils.ParameterToMultiMap("", "identifier", identifier));
            }
            if (employerName != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.IRNContacts.Client.ClientUtils.ParameterToMultiMap("", "employerName", employerName));
            }
            if (customFieldValues != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.IRNContacts.Client.ClientUtils.ParameterToMultiMap("", "customFieldValues", customFieldValues));
            }
            if (search != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.IRNContacts.Client.ClientUtils.ParameterToMultiMap("", "search", search));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.IRNContacts.Client.ClientUtils.ParameterToMultiMap("", "sort", sort));
            }
            if (includeLastMeetingDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.IRNContacts.Client.ClientUtils.ParameterToMultiMap("", "includeLastMeetingDate", includeLastMeetingDate));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.IRNContacts.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.IRNContacts.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<ContactSummaryDto>>("/v1/contacts", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V1ContactsGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a contact 
        /// </summary>
        /// <exception cref="FactSet.SDK.IRNContacts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactSaveDto">contactSaveDto object to save (optional)</param>
        /// <returns>Guid</returns>
        public Guid V1ContactsPost(ContactSaveDto contactSaveDto = default(ContactSaveDto))
        {
            FactSet.SDK.IRNContacts.Client.ApiResponse<Guid> localVarResponse = V1ContactsPostWithHttpInfo(contactSaveDto);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a contact 
        /// </summary>
        /// <exception cref="FactSet.SDK.IRNContacts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactSaveDto">contactSaveDto object to save (optional)</param>
        /// <returns>ApiResponse of Guid</returns>
        public FactSet.SDK.IRNContacts.Client.ApiResponse<Guid> V1ContactsPostWithHttpInfo(ContactSaveDto contactSaveDto = default(ContactSaveDto))
        {
            FactSet.SDK.IRNContacts.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.IRNContacts.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json-patch+json",
                "application/json",
                "text/json",
                "application/_*+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.IRNContacts.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = FactSet.SDK.IRNContacts.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = contactSaveDto;

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.IRNContacts.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Guid>("/v1/contacts", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V1ContactsPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a contact 
        /// </summary>
        /// <exception cref="FactSet.SDK.IRNContacts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactSaveDto">contactSaveDto object to save (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Guid</returns>
        public async System.Threading.Tasks.Task<Guid> V1ContactsPostAsync(ContactSaveDto contactSaveDto = default(ContactSaveDto), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            FactSet.SDK.IRNContacts.Client.ApiResponse<Guid> localVarResponse = await V1ContactsPostWithHttpInfoAsync(contactSaveDto, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a contact 
        /// </summary>
        /// <exception cref="FactSet.SDK.IRNContacts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactSaveDto">contactSaveDto object to save (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Guid)</returns>
        public async System.Threading.Tasks.Task<FactSet.SDK.IRNContacts.Client.ApiResponse<Guid>> V1ContactsPostWithHttpInfoAsync(ContactSaveDto contactSaveDto = default(ContactSaveDto), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            FactSet.SDK.IRNContacts.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.IRNContacts.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = FactSet.SDK.IRNContacts.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = FactSet.SDK.IRNContacts.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = contactSaveDto;

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.IRNContacts.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Guid>("/v1/contacts", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V1ContactsPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
