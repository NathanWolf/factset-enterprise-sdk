/*
 * FactSet Estimates
 *
 * Gain access to 20+ years of comprehensive estimates and statistics of over 250+ estimated metrics, including financial statement items, product segments, geosegments, and industry metrics. FactSet's consensus estimates are aggregated from a wide base of over 800+ contributors and cover over 19,000 active companies across 90+ countries. Data returned can be accessed on the data frequencies based on quarterly, fiscal years, and calendar years. FactSet Estimates updates on a real time basis intraday (every 5 minutes). Updating times vary based on earning season vs. non-earning season but the goal is to have the data available to the client within a few hours that FactSet receives updated information. Often times updates times can be much faster as FactSet has always been known as one of the fastest estimate providers in the market. 
 *
 * The version of the OpenAPI document: 2.3.0
 * Contact: api@factset.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = FactSet.SDK.FactSetEstimates.Client.OpenAPIDateConverter;

namespace FactSet.SDK.FactSetEstimates.Model
{
    /// <summary>
    /// DetailEstimate
    /// </summary>
    [DataContract(Name = "detailEstimate")]
    public partial class DetailEstimate : IEquatable<DetailEstimate>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DetailEstimate" /> class.
        /// </summary>
        /// <param name="fsymId">fsymId.</param>
        /// <param name="metric">Company&#39;s Financial statement &#39;metric&#39; that is estimated. Use the factset-estimates/v#/metrics endpoint for a complete list. For more details, visit [Online Assistant Page #15034](https://oa.apps.factset.com/pages/15034)..</param>
        /// <param name="periodicity">Company&#39;s &#39;periodicity&#39; for the estimate record, reflecting Annual, Quarterly, or Semi-Annual report periods..</param>
        /// <param name="fiscalYear">Company&#39;s &#39;fiscal year&#39; for the estimate record.</param>
        /// <param name="fiscalPeriod">Company&#39;s &#39;fiscal period&#39; for the estimate record.  &#39;Periodicity&#39; defines context for period..</param>
        /// <param name="fiscalEndDate">Company&#39;s &#39;fiscal end date&#39; for the estimate record expressed in YYYY-MM-DD format.</param>
        /// <param name="relativePeriod">&#39;Fiscal period&#39; based on relationship to &#39;estimate date&#39;. This is not applicable for fixed-consensus endpoint. For more details, visit [Online Assistant Page #16598](https://oa.apps.factset.com/pages/16598).</param>
        /// <param name="currency">Currency used estimates in consensus calculations. Currency used estimates in consensus calculations. For a list of currency ISO codes, visit [Online Assistant Page #1470](https://oa.apps.factset.com/pages/1470)..</param>
        /// <param name="estimateDate">Date of estimate expressed in YYYY-MM-DD format. For more details, visit [Online Assistant Page #16598](https://oa.apps.factset.com/pages/16598).</param>
        /// <param name="estimateValue">The value of the estimate..</param>
        /// <param name="analystId">The FactSet Entity Identifier for the analyst making the estimate..</param>
        /// <param name="analystName">The name of the analyst making the estimate..</param>
        /// <param name="brokerId">The FactSet Entity Identifier for the broker making the estimate..</param>
        /// <param name="brokerName">The name of the broker making the estimate..</param>
        /// <param name="prevEstimateDate">Date the previous estimate was made expressed in YYYY-MM-DD format. For more details, visit [Online Assistant Page #16598](https://oa.apps.factset.com/pages/16598).</param>
        /// <param name="prevEstimateValue">The value of the previous estimate..</param>
        /// <param name="section">Section of the estimate.Returns the details of brokers inlcuded and excluded in the consensus.</param>
        /// <param name="statusCode">Status code of the estimate..</param>
        /// <param name="statusText">Status description of the estimate..</param>
        /// <param name="requestId">Identifier that was used for the request..</param>
        public DetailEstimate(string fsymId = default(string), string metric = default(string), string periodicity = default(string), int fiscalYear = default(int), int fiscalPeriod = default(int), DateTime fiscalEndDate = default(DateTime), int relativePeriod = default(int), string currency = default(string), DateTime estimateDate = default(DateTime), double estimateValue = default(double), string analystId = default(string), string analystName = default(string), string brokerId = default(string), string brokerName = default(string), DateTime prevEstimateDate = default(DateTime), double prevEstimateValue = default(double), string section = default(string), int statusCode = default(int), string statusText = default(string), string requestId = default(string))
        {
            this.FsymId = fsymId;
            this.Metric = metric;
            this.Periodicity = periodicity;
            this.FiscalYear = fiscalYear;
            this.FiscalPeriod = fiscalPeriod;
            this.FiscalEndDate = fiscalEndDate;
            this.RelativePeriod = relativePeriod;
            this.Currency = currency;
            this.EstimateDate = estimateDate;
            this.EstimateValue = estimateValue;
            this.AnalystId = analystId;
            this.AnalystName = analystName;
            this.BrokerId = brokerId;
            this.BrokerName = brokerName;
            this.PrevEstimateDate = prevEstimateDate;
            this.PrevEstimateValue = prevEstimateValue;
            this.Section = section;
            this.StatusCode = statusCode;
            this.StatusText = statusText;
            this.RequestId = requestId;
        }

        /// <summary>
        /// Gets or Sets FsymId
        /// </summary>
        [DataMember(Name = "fsymId", EmitDefaultValue = false)]
        public string FsymId { get; set; }

        /// <summary>
        /// Company&#39;s Financial statement &#39;metric&#39; that is estimated. Use the factset-estimates/v#/metrics endpoint for a complete list. For more details, visit [Online Assistant Page #15034](https://oa.apps.factset.com/pages/15034).
        /// </summary>
        /// <value>Company&#39;s Financial statement &#39;metric&#39; that is estimated. Use the factset-estimates/v#/metrics endpoint for a complete list. For more details, visit [Online Assistant Page #15034](https://oa.apps.factset.com/pages/15034).</value>
        [DataMember(Name = "metric", EmitDefaultValue = false)]
        public string Metric { get; set; }

        /// <summary>
        /// Company&#39;s &#39;periodicity&#39; for the estimate record, reflecting Annual, Quarterly, or Semi-Annual report periods.
        /// </summary>
        /// <value>Company&#39;s &#39;periodicity&#39; for the estimate record, reflecting Annual, Quarterly, or Semi-Annual report periods.</value>
        [DataMember(Name = "periodicity", EmitDefaultValue = false)]
        public string Periodicity { get; set; }

        /// <summary>
        /// Company&#39;s &#39;fiscal year&#39; for the estimate record
        /// </summary>
        /// <value>Company&#39;s &#39;fiscal year&#39; for the estimate record</value>
        [DataMember(Name = "fiscalYear", EmitDefaultValue = false)]
        public int FiscalYear { get; set; }

        /// <summary>
        /// Company&#39;s &#39;fiscal period&#39; for the estimate record.  &#39;Periodicity&#39; defines context for period.
        /// </summary>
        /// <value>Company&#39;s &#39;fiscal period&#39; for the estimate record.  &#39;Periodicity&#39; defines context for period.</value>
        [DataMember(Name = "fiscalPeriod", EmitDefaultValue = false)]
        public int FiscalPeriod { get; set; }

        /// <summary>
        /// Company&#39;s &#39;fiscal end date&#39; for the estimate record expressed in YYYY-MM-DD format
        /// </summary>
        /// <value>Company&#39;s &#39;fiscal end date&#39; for the estimate record expressed in YYYY-MM-DD format</value>
        [DataMember(Name = "fiscalEndDate", EmitDefaultValue = false)]
        [JsonConverter(typeof(OpenAPIDateConverter))]
        public DateTime FiscalEndDate { get; set; }

        /// <summary>
        /// &#39;Fiscal period&#39; based on relationship to &#39;estimate date&#39;. This is not applicable for fixed-consensus endpoint. For more details, visit [Online Assistant Page #16598](https://oa.apps.factset.com/pages/16598)
        /// </summary>
        /// <value>&#39;Fiscal period&#39; based on relationship to &#39;estimate date&#39;. This is not applicable for fixed-consensus endpoint. For more details, visit [Online Assistant Page #16598](https://oa.apps.factset.com/pages/16598)</value>
        [DataMember(Name = "relativePeriod", EmitDefaultValue = false)]
        public int RelativePeriod { get; set; }

        /// <summary>
        /// Currency used estimates in consensus calculations. Currency used estimates in consensus calculations. For a list of currency ISO codes, visit [Online Assistant Page #1470](https://oa.apps.factset.com/pages/1470).
        /// </summary>
        /// <value>Currency used estimates in consensus calculations. Currency used estimates in consensus calculations. For a list of currency ISO codes, visit [Online Assistant Page #1470](https://oa.apps.factset.com/pages/1470).</value>
        [DataMember(Name = "currency", EmitDefaultValue = false)]
        public string Currency { get; set; }

        /// <summary>
        /// Date of estimate expressed in YYYY-MM-DD format. For more details, visit [Online Assistant Page #16598](https://oa.apps.factset.com/pages/16598)
        /// </summary>
        /// <value>Date of estimate expressed in YYYY-MM-DD format. For more details, visit [Online Assistant Page #16598](https://oa.apps.factset.com/pages/16598)</value>
        [DataMember(Name = "estimateDate", EmitDefaultValue = false)]
        [JsonConverter(typeof(OpenAPIDateConverter))]
        public DateTime EstimateDate { get; set; }

        /// <summary>
        /// The value of the estimate.
        /// </summary>
        /// <value>The value of the estimate.</value>
        [DataMember(Name = "estimateValue", EmitDefaultValue = false)]
        public double EstimateValue { get; set; }

        /// <summary>
        /// The FactSet Entity Identifier for the analyst making the estimate.
        /// </summary>
        /// <value>The FactSet Entity Identifier for the analyst making the estimate.</value>
        [DataMember(Name = "analystId", EmitDefaultValue = false)]
        public string AnalystId { get; set; }

        /// <summary>
        /// The name of the analyst making the estimate.
        /// </summary>
        /// <value>The name of the analyst making the estimate.</value>
        [DataMember(Name = "analystName", EmitDefaultValue = false)]
        public string AnalystName { get; set; }

        /// <summary>
        /// The FactSet Entity Identifier for the broker making the estimate.
        /// </summary>
        /// <value>The FactSet Entity Identifier for the broker making the estimate.</value>
        [DataMember(Name = "brokerId", EmitDefaultValue = false)]
        public string BrokerId { get; set; }

        /// <summary>
        /// The name of the broker making the estimate.
        /// </summary>
        /// <value>The name of the broker making the estimate.</value>
        [DataMember(Name = "brokerName", EmitDefaultValue = false)]
        public string BrokerName { get; set; }

        /// <summary>
        /// Date the previous estimate was made expressed in YYYY-MM-DD format. For more details, visit [Online Assistant Page #16598](https://oa.apps.factset.com/pages/16598)
        /// </summary>
        /// <value>Date the previous estimate was made expressed in YYYY-MM-DD format. For more details, visit [Online Assistant Page #16598](https://oa.apps.factset.com/pages/16598)</value>
        [DataMember(Name = "prevEstimateDate", EmitDefaultValue = false)]
        [JsonConverter(typeof(OpenAPIDateConverter))]
        public DateTime PrevEstimateDate { get; set; }

        /// <summary>
        /// The value of the previous estimate.
        /// </summary>
        /// <value>The value of the previous estimate.</value>
        [DataMember(Name = "prevEstimateValue", EmitDefaultValue = false)]
        public double PrevEstimateValue { get; set; }

        /// <summary>
        /// Section of the estimate.Returns the details of brokers inlcuded and excluded in the consensus
        /// </summary>
        /// <value>Section of the estimate.Returns the details of brokers inlcuded and excluded in the consensus</value>
        [DataMember(Name = "section", EmitDefaultValue = false)]
        public string Section { get; set; }

        /// <summary>
        /// Status code of the estimate.
        /// </summary>
        /// <value>Status code of the estimate.</value>
        [DataMember(Name = "statusCode", EmitDefaultValue = false)]
        public int StatusCode { get; set; }

        /// <summary>
        /// Status description of the estimate.
        /// </summary>
        /// <value>Status description of the estimate.</value>
        [DataMember(Name = "statusText", EmitDefaultValue = false)]
        public string StatusText { get; set; }

        /// <summary>
        /// Identifier that was used for the request.
        /// </summary>
        /// <value>Identifier that was used for the request.</value>
        [DataMember(Name = "requestId", EmitDefaultValue = false)]
        public string RequestId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class DetailEstimate {\n");
            sb.Append("  FsymId: ").Append(FsymId).Append("\n");
            sb.Append("  Metric: ").Append(Metric).Append("\n");
            sb.Append("  Periodicity: ").Append(Periodicity).Append("\n");
            sb.Append("  FiscalYear: ").Append(FiscalYear).Append("\n");
            sb.Append("  FiscalPeriod: ").Append(FiscalPeriod).Append("\n");
            sb.Append("  FiscalEndDate: ").Append(FiscalEndDate).Append("\n");
            sb.Append("  RelativePeriod: ").Append(RelativePeriod).Append("\n");
            sb.Append("  Currency: ").Append(Currency).Append("\n");
            sb.Append("  EstimateDate: ").Append(EstimateDate).Append("\n");
            sb.Append("  EstimateValue: ").Append(EstimateValue).Append("\n");
            sb.Append("  AnalystId: ").Append(AnalystId).Append("\n");
            sb.Append("  AnalystName: ").Append(AnalystName).Append("\n");
            sb.Append("  BrokerId: ").Append(BrokerId).Append("\n");
            sb.Append("  BrokerName: ").Append(BrokerName).Append("\n");
            sb.Append("  PrevEstimateDate: ").Append(PrevEstimateDate).Append("\n");
            sb.Append("  PrevEstimateValue: ").Append(PrevEstimateValue).Append("\n");
            sb.Append("  Section: ").Append(Section).Append("\n");
            sb.Append("  StatusCode: ").Append(StatusCode).Append("\n");
            sb.Append("  StatusText: ").Append(StatusText).Append("\n");
            sb.Append("  RequestId: ").Append(RequestId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DetailEstimate);
        }

        /// <summary>
        /// Returns true if DetailEstimate instances are equal
        /// </summary>
        /// <param name="input">Instance of DetailEstimate to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DetailEstimate input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.FsymId == input.FsymId ||
                    (this.FsymId != null &&
                    this.FsymId.Equals(input.FsymId))
                ) && 
                (
                    this.Metric == input.Metric ||
                    (this.Metric != null &&
                    this.Metric.Equals(input.Metric))
                ) && 
                (
                    this.Periodicity == input.Periodicity ||
                    (this.Periodicity != null &&
                    this.Periodicity.Equals(input.Periodicity))
                ) && 
                (
                    this.FiscalYear == input.FiscalYear ||
                    this.FiscalYear.Equals(input.FiscalYear)
                ) && 
                (
                    this.FiscalPeriod == input.FiscalPeriod ||
                    this.FiscalPeriod.Equals(input.FiscalPeriod)
                ) && 
                (
                    this.FiscalEndDate == input.FiscalEndDate ||
                    (this.FiscalEndDate != null &&
                    this.FiscalEndDate.Equals(input.FiscalEndDate))
                ) && 
                (
                    this.RelativePeriod == input.RelativePeriod ||
                    this.RelativePeriod.Equals(input.RelativePeriod)
                ) && 
                (
                    this.Currency == input.Currency ||
                    (this.Currency != null &&
                    this.Currency.Equals(input.Currency))
                ) && 
                (
                    this.EstimateDate == input.EstimateDate ||
                    (this.EstimateDate != null &&
                    this.EstimateDate.Equals(input.EstimateDate))
                ) && 
                (
                    this.EstimateValue == input.EstimateValue ||
                    this.EstimateValue.Equals(input.EstimateValue)
                ) && 
                (
                    this.AnalystId == input.AnalystId ||
                    (this.AnalystId != null &&
                    this.AnalystId.Equals(input.AnalystId))
                ) && 
                (
                    this.AnalystName == input.AnalystName ||
                    (this.AnalystName != null &&
                    this.AnalystName.Equals(input.AnalystName))
                ) && 
                (
                    this.BrokerId == input.BrokerId ||
                    (this.BrokerId != null &&
                    this.BrokerId.Equals(input.BrokerId))
                ) && 
                (
                    this.BrokerName == input.BrokerName ||
                    (this.BrokerName != null &&
                    this.BrokerName.Equals(input.BrokerName))
                ) && 
                (
                    this.PrevEstimateDate == input.PrevEstimateDate ||
                    (this.PrevEstimateDate != null &&
                    this.PrevEstimateDate.Equals(input.PrevEstimateDate))
                ) && 
                (
                    this.PrevEstimateValue == input.PrevEstimateValue ||
                    this.PrevEstimateValue.Equals(input.PrevEstimateValue)
                ) && 
                (
                    this.Section == input.Section ||
                    (this.Section != null &&
                    this.Section.Equals(input.Section))
                ) && 
                (
                    this.StatusCode == input.StatusCode ||
                    this.StatusCode.Equals(input.StatusCode)
                ) && 
                (
                    this.StatusText == input.StatusText ||
                    (this.StatusText != null &&
                    this.StatusText.Equals(input.StatusText))
                ) && 
                (
                    this.RequestId == input.RequestId ||
                    (this.RequestId != null &&
                    this.RequestId.Equals(input.RequestId))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.FsymId != null)
                {
                    hashCode = (hashCode * 59) + this.FsymId.GetHashCode();
                }
                if (this.Metric != null)
                {
                    hashCode = (hashCode * 59) + this.Metric.GetHashCode();
                }
                if (this.Periodicity != null)
                {
                    hashCode = (hashCode * 59) + this.Periodicity.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.FiscalYear.GetHashCode();
                hashCode = (hashCode * 59) + this.FiscalPeriod.GetHashCode();
                if (this.FiscalEndDate != null)
                {
                    hashCode = (hashCode * 59) + this.FiscalEndDate.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.RelativePeriod.GetHashCode();
                if (this.Currency != null)
                {
                    hashCode = (hashCode * 59) + this.Currency.GetHashCode();
                }
                if (this.EstimateDate != null)
                {
                    hashCode = (hashCode * 59) + this.EstimateDate.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.EstimateValue.GetHashCode();
                if (this.AnalystId != null)
                {
                    hashCode = (hashCode * 59) + this.AnalystId.GetHashCode();
                }
                if (this.AnalystName != null)
                {
                    hashCode = (hashCode * 59) + this.AnalystName.GetHashCode();
                }
                if (this.BrokerId != null)
                {
                    hashCode = (hashCode * 59) + this.BrokerId.GetHashCode();
                }
                if (this.BrokerName != null)
                {
                    hashCode = (hashCode * 59) + this.BrokerName.GetHashCode();
                }
                if (this.PrevEstimateDate != null)
                {
                    hashCode = (hashCode * 59) + this.PrevEstimateDate.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.PrevEstimateValue.GetHashCode();
                if (this.Section != null)
                {
                    hashCode = (hashCode * 59) + this.Section.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.StatusCode.GetHashCode();
                if (this.StatusText != null)
                {
                    hashCode = (hashCode * 59) + this.StatusText.GetHashCode();
                }
                if (this.RequestId != null)
                {
                    hashCode = (hashCode * 59) + this.RequestId.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
