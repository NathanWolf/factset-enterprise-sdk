/*
 * FactSet Estimates
 *
 * Gain access to 20+ years of comprehensive estimates and statistics of over 250+ estimated metrics, including financial statement items, product segments, geosegments, and industry metrics. FactSet's consensus estimates are aggregated from a wide base of over 800+ contributors and cover over 19,000 active companies across 90+ countries. Data returned can be accessed on the data frequencies based on quarterly, fiscal years, and calendar years. FactSet Estimates updates on a real time basis intraday (every 5 minutes). Updating times vary based on earning season vs. non-earning season but the goal is to have the data available to the client within a few hours that FactSet receives updated information. Often times updates times can be much faster as FactSet has always been known as one of the fastest estimate providers in the market. 
 *
 * The version of the OpenAPI document: 2.3.0
 * Contact: api@factset.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = FactSet.SDK.FactSetEstimates.Client.OpenAPIDateConverter;

namespace FactSet.SDK.FactSetEstimates.Model
{
    /// <summary>
    /// Metric
    /// </summary>
    [DataContract(Name = "metric")]
    public partial class Metric : IEquatable<Metric>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Metric" /> class.
        /// </summary>
        /// <param name="metric">Metric identifier to be used as &#x60;metrics&#x60; input in the FactSet Estimate endpoints..</param>
        /// <param name="name">Plain text name of the metric..</param>
        /// <param name="category">Primary Category of metric item, such as, FINANCIAL_STATEMENT or INDUSTRY_METRIC.</param>
        /// <param name="subcategory">Sub-category of metric items, such as the INCOME_STATEMENT or AIRLINES..</param>
        /// <param name="oAurl">The Online Assistant Page URL, used to lookup the definition and methodology of the requested item..</param>
        public Metric(string metric = default(string), string name = default(string), string category = default(string), string subcategory = default(string), string oAurl = default(string))
        {
            this._Metric = metric;
            this.Name = name;
            this.Category = category;
            this.Subcategory = subcategory;
            this.OAurl = oAurl;
        }

        /// <summary>
        /// Metric identifier to be used as &#x60;metrics&#x60; input in the FactSet Estimate endpoints.
        /// </summary>
        /// <value>Metric identifier to be used as &#x60;metrics&#x60; input in the FactSet Estimate endpoints.</value>
        [DataMember(Name = "metric", EmitDefaultValue = false)]
        public string _Metric { get; set; }

        /// <summary>
        /// Plain text name of the metric.
        /// </summary>
        /// <value>Plain text name of the metric.</value>
        [DataMember(Name = "name", EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// Primary Category of metric item, such as, FINANCIAL_STATEMENT or INDUSTRY_METRIC
        /// </summary>
        /// <value>Primary Category of metric item, such as, FINANCIAL_STATEMENT or INDUSTRY_METRIC</value>
        [DataMember(Name = "category", EmitDefaultValue = false)]
        public string Category { get; set; }

        /// <summary>
        /// Sub-category of metric items, such as the INCOME_STATEMENT or AIRLINES.
        /// </summary>
        /// <value>Sub-category of metric items, such as the INCOME_STATEMENT or AIRLINES.</value>
        [DataMember(Name = "subcategory", EmitDefaultValue = false)]
        public string Subcategory { get; set; }

        /// <summary>
        /// The Online Assistant Page URL, used to lookup the definition and methodology of the requested item.
        /// </summary>
        /// <value>The Online Assistant Page URL, used to lookup the definition and methodology of the requested item.</value>
        [DataMember(Name = "OAurl", EmitDefaultValue = false)]
        public string OAurl { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Metric {\n");
            sb.Append("  _Metric: ").Append(_Metric).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Category: ").Append(Category).Append("\n");
            sb.Append("  Subcategory: ").Append(Subcategory).Append("\n");
            sb.Append("  OAurl: ").Append(OAurl).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Metric);
        }

        /// <summary>
        /// Returns true if Metric instances are equal
        /// </summary>
        /// <param name="input">Instance of Metric to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Metric input)
        {
            if (input == null)
                return false;

            return 
                (
                    this._Metric == input._Metric ||
                    (this._Metric != null &&
                    this._Metric.Equals(input._Metric))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Category == input.Category ||
                    (this.Category != null &&
                    this.Category.Equals(input.Category))
                ) && 
                (
                    this.Subcategory == input.Subcategory ||
                    (this.Subcategory != null &&
                    this.Subcategory.Equals(input.Subcategory))
                ) && 
                (
                    this.OAurl == input.OAurl ||
                    (this.OAurl != null &&
                    this.OAurl.Equals(input.OAurl))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this._Metric != null)
                    hashCode = hashCode * 59 + this._Metric.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.Category != null)
                    hashCode = hashCode * 59 + this.Category.GetHashCode();
                if (this.Subcategory != null)
                    hashCode = hashCode * 59 + this.Subcategory.GetHashCode();
                if (this.OAurl != null)
                    hashCode = hashCode * 59 + this.OAurl.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
