/*
 * Bonds API For Digital Portals
 *
 * Search for fixed income instruments, using a criteria-based screener. The API provides also fundamental data and key figures, basic interest rate information and derived coupon lists.  Available search criteria include:  * validation: filter for only active listings, by price quality and latest/previous available price dates * traded markets: filter and indicate a market priority for the validation * important dates in and features of the life cycle of the fixed income instruments * filter by issuer, its country of registration and the issued volume * coupon data: occurrence and frequency of coupon payments, current interest rate range * yield and yield to maturity range, spread * Macaulay duration * sensitivity ranges: base point value, modified duration, elasticity, convexity * cash flow for all transactions over a certain time range: sum or average * country-specific attributes: for Germany: is eligible for trustees        The key figures are calculated using delayed prices with an additional delay of 10 minutes after an update of the debt instrument's price. Special product features such as the right to a maturity extension, an attached option, or convertibility are not considered for the key figure calculation. Further, a calculation is not performed for perpetual products and for products with variable interest rate.  This API is fully integrated with the corresponding Quotes API, allowing access to detailed price and performance information of instruments, as well as basic security identifier cross-reference. For direct access to price histories, please refer to the Time Series API for Digital Portals.  Similar criteria based screener APIs exist for equity instruments and securitized derivatives: See the Stocks API and the Securitized Derivatives API for details.
 *
 * The version of the OpenAPI document: 2
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = FactSet.SDK.BondsAPIforDigitalPortals.Client.OpenAPIDateConverter;

namespace FactSet.SDK.BondsAPIforDigitalPortals.Model
{
    /// <summary>
    /// The meta member contains the meta information of the request.
    /// </summary>
    [DataContract(Name = "_debtInstrument_notation_screener_search_meta")]
    public partial class DebtInstrumentNotationScreenerSearchMeta : IEquatable<DebtInstrumentNotationScreenerSearchMeta>, IValidatableObject
    {
        /// <summary>
        /// Defines Sort
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum SortEnum
        {
            /// <summary>
            /// Enum ValueUnitCode for value: valueUnit.code
            /// </summary>
            [EnumMember(Value = "valueUnit.code")]
            ValueUnitCode = 1,

            /// <summary>
            /// Enum MINUS_ValueUnitCode for value: -valueUnit.code
            /// </summary>
            [EnumMember(Value = "-valueUnit.code")]
            MINUS_ValueUnitCode = 2,

            /// <summary>
            /// Enum MarketName for value: market.name
            /// </summary>
            [EnumMember(Value = "market.name")]
            MarketName = 3,

            /// <summary>
            /// Enum MINUS_MarketName for value: -market.name
            /// </summary>
            [EnumMember(Value = "-market.name")]
            MINUS_MarketName = 4,

            /// <summary>
            /// Enum Symbol for value: symbol
            /// </summary>
            [EnumMember(Value = "symbol")]
            Symbol = 5,

            /// <summary>
            /// Enum MINUS_Symbol for value: -symbol
            /// </summary>
            [EnumMember(Value = "-symbol")]
            MINUS_Symbol = 6,

            /// <summary>
            /// Enum InstrumentName for value: instrument.name
            /// </summary>
            [EnumMember(Value = "instrument.name")]
            InstrumentName = 7,

            /// <summary>
            /// Enum MINUS_InstrumentName for value: -instrument.name
            /// </summary>
            [EnumMember(Value = "-instrument.name")]
            MINUS_InstrumentName = 8,

            /// <summary>
            /// Enum InstrumentShortName for value: instrument.shortName
            /// </summary>
            [EnumMember(Value = "instrument.shortName")]
            InstrumentShortName = 9,

            /// <summary>
            /// Enum MINUS_InstrumentShortName for value: -instrument.shortName
            /// </summary>
            [EnumMember(Value = "-instrument.shortName")]
            MINUS_InstrumentShortName = 10,

            /// <summary>
            /// Enum InstrumentCategorizationLevel1Name for value: instrument.categorization.level1.name
            /// </summary>
            [EnumMember(Value = "instrument.categorization.level1.name")]
            InstrumentCategorizationLevel1Name = 11,

            /// <summary>
            /// Enum MINUS_InstrumentCategorizationLevel1Name for value: -instrument.categorization.level1.name
            /// </summary>
            [EnumMember(Value = "-instrument.categorization.level1.name")]
            MINUS_InstrumentCategorizationLevel1Name = 12,

            /// <summary>
            /// Enum InstrumentCategorizationLevel2Name for value: instrument.categorization.level2.name
            /// </summary>
            [EnumMember(Value = "instrument.categorization.level2.name")]
            InstrumentCategorizationLevel2Name = 13,

            /// <summary>
            /// Enum MINUS_InstrumentCategorizationLevel2Name for value: -instrument.categorization.level2.name
            /// </summary>
            [EnumMember(Value = "-instrument.categorization.level2.name")]
            MINUS_InstrumentCategorizationLevel2Name = 14,

            /// <summary>
            /// Enum InstrumentCategorizationLevel3Name for value: instrument.categorization.level3.name
            /// </summary>
            [EnumMember(Value = "instrument.categorization.level3.name")]
            InstrumentCategorizationLevel3Name = 15,

            /// <summary>
            /// Enum MINUS_InstrumentCategorizationLevel3Name for value: -instrument.categorization.level3.name
            /// </summary>
            [EnumMember(Value = "-instrument.categorization.level3.name")]
            MINUS_InstrumentCategorizationLevel3Name = 16,

            /// <summary>
            /// Enum InstrumentLifeCycleIssue for value: instrument.lifeCycle.issue
            /// </summary>
            [EnumMember(Value = "instrument.lifeCycle.issue")]
            InstrumentLifeCycleIssue = 17,

            /// <summary>
            /// Enum MINUS_InstrumentLifeCycleIssue for value: -instrument.lifeCycle.issue
            /// </summary>
            [EnumMember(Value = "-instrument.lifeCycle.issue")]
            MINUS_InstrumentLifeCycleIssue = 18,

            /// <summary>
            /// Enum InstrumentLifeCycleMaturityDate for value: instrument.lifeCycle.maturity.date
            /// </summary>
            [EnumMember(Value = "instrument.lifeCycle.maturity.date")]
            InstrumentLifeCycleMaturityDate = 19,

            /// <summary>
            /// Enum MINUS_InstrumentLifeCycleMaturityDate for value: -instrument.lifeCycle.maturity.date
            /// </summary>
            [EnumMember(Value = "-instrument.lifeCycle.maturity.date")]
            MINUS_InstrumentLifeCycleMaturityDate = 20,

            /// <summary>
            /// Enum InstrumentLifeCycleMaturityRemainingTermYears for value: instrument.lifeCycle.maturity.remainingTermYears
            /// </summary>
            [EnumMember(Value = "instrument.lifeCycle.maturity.remainingTermYears")]
            InstrumentLifeCycleMaturityRemainingTermYears = 21,

            /// <summary>
            /// Enum MINUS_InstrumentLifeCycleMaturityRemainingTermYears for value: -instrument.lifeCycle.maturity.remainingTermYears
            /// </summary>
            [EnumMember(Value = "-instrument.lifeCycle.maturity.remainingTermYears")]
            MINUS_InstrumentLifeCycleMaturityRemainingTermYears = 22,

            /// <summary>
            /// Enum InstrumentLifeCycleMaturityPerpetual for value: instrument.lifeCycle.maturity.perpetual
            /// </summary>
            [EnumMember(Value = "instrument.lifeCycle.maturity.perpetual")]
            InstrumentLifeCycleMaturityPerpetual = 23,

            /// <summary>
            /// Enum MINUS_InstrumentLifeCycleMaturityPerpetual for value: -instrument.lifeCycle.maturity.perpetual
            /// </summary>
            [EnumMember(Value = "-instrument.lifeCycle.maturity.perpetual")]
            MINUS_InstrumentLifeCycleMaturityPerpetual = 24,

            /// <summary>
            /// Enum InstrumentLifeCycleCallable for value: instrument.lifeCycle.callable
            /// </summary>
            [EnumMember(Value = "instrument.lifeCycle.callable")]
            InstrumentLifeCycleCallable = 25,

            /// <summary>
            /// Enum MINUS_InstrumentLifeCycleCallable for value: -instrument.lifeCycle.callable
            /// </summary>
            [EnumMember(Value = "-instrument.lifeCycle.callable")]
            MINUS_InstrumentLifeCycleCallable = 26,

            /// <summary>
            /// Enum InstrumentSubordinated for value: instrument.subordinated
            /// </summary>
            [EnumMember(Value = "instrument.subordinated")]
            InstrumentSubordinated = 27,

            /// <summary>
            /// Enum MINUS_InstrumentSubordinated for value: -instrument.subordinated
            /// </summary>
            [EnumMember(Value = "-instrument.subordinated")]
            MINUS_InstrumentSubordinated = 28,

            /// <summary>
            /// Enum InstrumentRatingSystem1RatingGrade for value: instrument.ratingSystem1.rating.grade
            /// </summary>
            [EnumMember(Value = "instrument.ratingSystem1.rating.grade")]
            InstrumentRatingSystem1RatingGrade = 29,

            /// <summary>
            /// Enum MINUS_InstrumentRatingSystem1RatingGrade for value: -instrument.ratingSystem1.rating.grade
            /// </summary>
            [EnumMember(Value = "-instrument.ratingSystem1.rating.grade")]
            MINUS_InstrumentRatingSystem1RatingGrade = 30,

            /// <summary>
            /// Enum InstrumentRatingSystem2RatingGrade for value: instrument.ratingSystem2.rating.grade
            /// </summary>
            [EnumMember(Value = "instrument.ratingSystem2.rating.grade")]
            InstrumentRatingSystem2RatingGrade = 31,

            /// <summary>
            /// Enum MINUS_InstrumentRatingSystem2RatingGrade for value: -instrument.ratingSystem2.rating.grade
            /// </summary>
            [EnumMember(Value = "-instrument.ratingSystem2.rating.grade")]
            MINUS_InstrumentRatingSystem2RatingGrade = 32,

            /// <summary>
            /// Enum InstrumentIssuerName for value: instrument.issuer.name
            /// </summary>
            [EnumMember(Value = "instrument.issuer.name")]
            InstrumentIssuerName = 33,

            /// <summary>
            /// Enum MINUS_InstrumentIssuerName for value: -instrument.issuer.name
            /// </summary>
            [EnumMember(Value = "-instrument.issuer.name")]
            MINUS_InstrumentIssuerName = 34,

            /// <summary>
            /// Enum InstrumentIssuerCountryName for value: instrument.issuer.country.name
            /// </summary>
            [EnumMember(Value = "instrument.issuer.country.name")]
            InstrumentIssuerCountryName = 35,

            /// <summary>
            /// Enum MINUS_InstrumentIssuerCountryName for value: -instrument.issuer.country.name
            /// </summary>
            [EnumMember(Value = "-instrument.issuer.country.name")]
            MINUS_InstrumentIssuerCountryName = 36,

            /// <summary>
            /// Enum InstrumentIssueVolumeCurrencyIsoCode for value: instrument.issue.volume.currency.isoCode
            /// </summary>
            [EnumMember(Value = "instrument.issue.volume.currency.isoCode")]
            InstrumentIssueVolumeCurrencyIsoCode = 37,

            /// <summary>
            /// Enum MINUS_InstrumentIssueVolumeCurrencyIsoCode for value: -instrument.issue.volume.currency.isoCode
            /// </summary>
            [EnumMember(Value = "-instrument.issue.volume.currency.isoCode")]
            MINUS_InstrumentIssueVolumeCurrencyIsoCode = 38,

            /// <summary>
            /// Enum InstrumentTradingVolumeOtcMinimum for value: instrument.tradingVolume.otc.minimum
            /// </summary>
            [EnumMember(Value = "instrument.tradingVolume.otc.minimum")]
            InstrumentTradingVolumeOtcMinimum = 39,

            /// <summary>
            /// Enum MINUS_InstrumentTradingVolumeOtcMinimum for value: -instrument.tradingVolume.otc.minimum
            /// </summary>
            [EnumMember(Value = "-instrument.tradingVolume.otc.minimum")]
            MINUS_InstrumentTradingVolumeOtcMinimum = 40,

            /// <summary>
            /// Enum InstrumentComplianceGermanyTrusteeEligible for value: instrument.compliance.germany.trusteeEligible
            /// </summary>
            [EnumMember(Value = "instrument.compliance.germany.trusteeEligible")]
            InstrumentComplianceGermanyTrusteeEligible = 41,

            /// <summary>
            /// Enum MINUS_InstrumentComplianceGermanyTrusteeEligible for value: -instrument.compliance.germany.trusteeEligible
            /// </summary>
            [EnumMember(Value = "-instrument.compliance.germany.trusteeEligible")]
            MINUS_InstrumentComplianceGermanyTrusteeEligible = 42,

            /// <summary>
            /// Enum InstrumentCouponOccurrenceFrequencyName for value: instrument.coupon.occurrence.frequency.name
            /// </summary>
            [EnumMember(Value = "instrument.coupon.occurrence.frequency.name")]
            InstrumentCouponOccurrenceFrequencyName = 43,

            /// <summary>
            /// Enum MINUS_InstrumentCouponOccurrenceFrequencyName for value: -instrument.coupon.occurrence.frequency.name
            /// </summary>
            [EnumMember(Value = "-instrument.coupon.occurrence.frequency.name")]
            MINUS_InstrumentCouponOccurrenceFrequencyName = 44,

            /// <summary>
            /// Enum InstrumentCouponCurrentInterestRateTypeName for value: instrument.coupon.currentInterestRate.type.name
            /// </summary>
            [EnumMember(Value = "instrument.coupon.currentInterestRate.type.name")]
            InstrumentCouponCurrentInterestRateTypeName = 45,

            /// <summary>
            /// Enum MINUS_InstrumentCouponCurrentInterestRateTypeName for value: -instrument.coupon.currentInterestRate.type.name
            /// </summary>
            [EnumMember(Value = "-instrument.coupon.currentInterestRate.type.name")]
            MINUS_InstrumentCouponCurrentInterestRateTypeName = 46,

            /// <summary>
            /// Enum InstrumentCouponCurrentInterestRateValue for value: instrument.coupon.currentInterestRate.value
            /// </summary>
            [EnumMember(Value = "instrument.coupon.currentInterestRate.value")]
            InstrumentCouponCurrentInterestRateValue = 47,

            /// <summary>
            /// Enum MINUS_InstrumentCouponCurrentInterestRateValue for value: -instrument.coupon.currentInterestRate.value
            /// </summary>
            [EnumMember(Value = "-instrument.coupon.currentInterestRate.value")]
            MINUS_InstrumentCouponCurrentInterestRateValue = 48,

            /// <summary>
            /// Enum YieldCurrent for value: yield.current
            /// </summary>
            [EnumMember(Value = "yield.current")]
            YieldCurrent = 49,

            /// <summary>
            /// Enum MINUS_YieldCurrent for value: -yield.current
            /// </summary>
            [EnumMember(Value = "-yield.current")]
            MINUS_YieldCurrent = 50,

            /// <summary>
            /// Enum YieldToMaturity for value: yield.toMaturity
            /// </summary>
            [EnumMember(Value = "yield.toMaturity")]
            YieldToMaturity = 51,

            /// <summary>
            /// Enum MINUS_YieldToMaturity for value: -yield.toMaturity
            /// </summary>
            [EnumMember(Value = "-yield.toMaturity")]
            MINUS_YieldToMaturity = 52,

            /// <summary>
            /// Enum YieldSpread for value: yield.spread
            /// </summary>
            [EnumMember(Value = "yield.spread")]
            YieldSpread = 53,

            /// <summary>
            /// Enum MINUS_YieldSpread for value: -yield.spread
            /// </summary>
            [EnumMember(Value = "-yield.spread")]
            MINUS_YieldSpread = 54,

            /// <summary>
            /// Enum MacaulayDuration for value: macaulayDuration
            /// </summary>
            [EnumMember(Value = "macaulayDuration")]
            MacaulayDuration = 55,

            /// <summary>
            /// Enum MINUS_MacaulayDuration for value: -macaulayDuration
            /// </summary>
            [EnumMember(Value = "-macaulayDuration")]
            MINUS_MacaulayDuration = 56,

            /// <summary>
            /// Enum SensitivitiesBasePointValue for value: sensitivities.basePointValue
            /// </summary>
            [EnumMember(Value = "sensitivities.basePointValue")]
            SensitivitiesBasePointValue = 57,

            /// <summary>
            /// Enum MINUS_SensitivitiesBasePointValue for value: -sensitivities.basePointValue
            /// </summary>
            [EnumMember(Value = "-sensitivities.basePointValue")]
            MINUS_SensitivitiesBasePointValue = 58,

            /// <summary>
            /// Enum SensitivitiesModifiedDuration for value: sensitivities.modifiedDuration
            /// </summary>
            [EnumMember(Value = "sensitivities.modifiedDuration")]
            SensitivitiesModifiedDuration = 59,

            /// <summary>
            /// Enum MINUS_SensitivitiesModifiedDuration for value: -sensitivities.modifiedDuration
            /// </summary>
            [EnumMember(Value = "-sensitivities.modifiedDuration")]
            MINUS_SensitivitiesModifiedDuration = 60,

            /// <summary>
            /// Enum SensitivitiesElasticity for value: sensitivities.elasticity
            /// </summary>
            [EnumMember(Value = "sensitivities.elasticity")]
            SensitivitiesElasticity = 61,

            /// <summary>
            /// Enum MINUS_SensitivitiesElasticity for value: -sensitivities.elasticity
            /// </summary>
            [EnumMember(Value = "-sensitivities.elasticity")]
            MINUS_SensitivitiesElasticity = 62,

            /// <summary>
            /// Enum SensitivitiesConvexity for value: sensitivities.convexity
            /// </summary>
            [EnumMember(Value = "sensitivities.convexity")]
            SensitivitiesConvexity = 63,

            /// <summary>
            /// Enum MINUS_SensitivitiesConvexity for value: -sensitivities.convexity
            /// </summary>
            [EnumMember(Value = "-sensitivities.convexity")]
            MINUS_SensitivitiesConvexity = 64,

            /// <summary>
            /// Enum TradedValueDays30Sum for value: tradedValue.days30.sum
            /// </summary>
            [EnumMember(Value = "tradedValue.days30.sum")]
            TradedValueDays30Sum = 65,

            /// <summary>
            /// Enum MINUS_TradedValueDays30Sum for value: -tradedValue.days30.sum
            /// </summary>
            [EnumMember(Value = "-tradedValue.days30.sum")]
            MINUS_TradedValueDays30Sum = 66,

            /// <summary>
            /// Enum TradedValueDays30Average for value: tradedValue.days30.average
            /// </summary>
            [EnumMember(Value = "tradedValue.days30.average")]
            TradedValueDays30Average = 67,

            /// <summary>
            /// Enum MINUS_TradedValueDays30Average for value: -tradedValue.days30.average
            /// </summary>
            [EnumMember(Value = "-tradedValue.days30.average")]
            MINUS_TradedValueDays30Average = 68

        }



        /// <summary>
        /// Sortable attributes. The sort order is ascending unless it is prefixed with a minus sign, in which case it is descending. A list of at most 10 (possibly prefixed) attribute name(s) is allowed.
        /// </summary>
        /// <value>Sortable attributes. The sort order is ascending unless it is prefixed with a minus sign, in which case it is descending. A list of at most 10 (possibly prefixed) attribute name(s) is allowed.</value>
        [DataMember(Name = "sort", EmitDefaultValue = false)]
        public List<SortEnum> Sort { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="DebtInstrumentNotationScreenerSearchMeta" /> class.
        /// </summary>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set..</param>
        /// <param name="language">ISO 639-1 code of the language..</param>
        /// <param name="sort">Sortable attributes. The sort order is ascending unless it is prefixed with a minus sign, in which case it is descending. A list of at most 10 (possibly prefixed) attribute name(s) is allowed..</param>
        /// <param name="pagination">pagination.</param>
        public DebtInstrumentNotationScreenerSearchMeta(List<string> attributes = default(List<string>), string language = default(string), List<SortEnum> sort = default(List<SortEnum>), DebtInstrumentNotationScreenerSearchMetaPagination pagination = default(DebtInstrumentNotationScreenerSearchMetaPagination))
        {
            this.Attributes = attributes;
            this.Language = language;
            this.Sort = sort;
            this.Pagination = pagination;
        }

        /// <summary>
        /// Limit the attributes returned in the response to the specified set.
        /// </summary>
        /// <value>Limit the attributes returned in the response to the specified set.</value>
        [DataMember(Name = "attributes", EmitDefaultValue = false)]
        public List<string> Attributes { get; set; }

        /// <summary>
        /// ISO 639-1 code of the language.
        /// </summary>
        /// <value>ISO 639-1 code of the language.</value>
        [DataMember(Name = "language", EmitDefaultValue = false)]
        public string Language { get; set; }

        /// <summary>
        /// Gets or Sets Pagination
        /// </summary>
        [DataMember(Name = "pagination", EmitDefaultValue = false)]
        public DebtInstrumentNotationScreenerSearchMetaPagination Pagination { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class DebtInstrumentNotationScreenerSearchMeta {\n");
            sb.Append("  Attributes: ").Append(Attributes).Append("\n");
            sb.Append("  Language: ").Append(Language).Append("\n");
            sb.Append("  Sort: ").Append(Sort).Append("\n");
            sb.Append("  Pagination: ").Append(Pagination).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DebtInstrumentNotationScreenerSearchMeta);
        }

        /// <summary>
        /// Returns true if DebtInstrumentNotationScreenerSearchMeta instances are equal
        /// </summary>
        /// <param name="input">Instance of DebtInstrumentNotationScreenerSearchMeta to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DebtInstrumentNotationScreenerSearchMeta input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Attributes == input.Attributes ||
                    this.Attributes != null &&
                    input.Attributes != null &&
                    this.Attributes.SequenceEqual(input.Attributes)
                ) && 
                (
                    this.Language == input.Language ||
                    (this.Language != null &&
                    this.Language.Equals(input.Language))
                ) && 
                (
                    this.Sort == input.Sort ||
                    this.Sort.SequenceEqual(input.Sort)
                ) && 
                (
                    this.Pagination == input.Pagination ||
                    (this.Pagination != null &&
                    this.Pagination.Equals(input.Pagination))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Attributes != null)
                {
                    hashCode = (hashCode * 59) + this.Attributes.GetHashCode();
                }
                if (this.Language != null)
                {
                    hashCode = (hashCode * 59) + this.Language.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Sort.GetHashCode();
                if (this.Pagination != null)
                {
                    hashCode = (hashCode * 59) + this.Pagination.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            // Language (string) maxLength
            if (this.Language != null && this.Language.Length > 2)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Language, length must be less than 2.", new [] { "Language" });
            }

            // Language (string) minLength
            if (this.Language != null && this.Language.Length < 2)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Language, length must be greater than 2.", new [] { "Language" });
            }

            yield break;
        }
    }

}
