/*
 * Prime Developer Trial
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = FactSet.SDK.BondsAPIforDigitalPortals.Client.OpenAPIDateConverter;

namespace FactSet.SDK.BondsAPIforDigitalPortals.Model
{
    /// <summary>
    /// Price sensitivities of the debt instrument with respect to the prevailing market interest rate.
    /// </summary>
    [DataContract(Name = "inline_response_200_2_data_sensitivities")]
    public partial class InlineResponse2002DataSensitivities : IEquatable<InlineResponse2002DataSensitivities>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="InlineResponse2002DataSensitivities" /> class.
        /// </summary>
        /// <param name="basePointValue">Base point value, which is the change of the debt instrument&#39;s price for a one base point change (nominally, not relatively) of the prevailing market interest rate. One base point is equivalent to 0,01 percent (1/100 of a percent). See attribute &#x60;price/valueUnit&#x60; for its value unit..</param>
        /// <param name="modifiedDuration">Modified duration, which is the percentage change of the debt instrument&#39;s price for a one percent change (nominally, not relatively) of the prevailing market interest rate..</param>
        /// <param name="elasticity">Yield elasticity, which is the ratio of the percentage change of the debt instrument&#39;s price for a one percent change (relatively, not nominally) of the prevailing market interest rate..</param>
        /// <param name="convexity">Convexity, which is a measure for the change of the modified duration as the prevailing market interest rate changes..</param>
        public InlineResponse2002DataSensitivities(decimal basePointValue = default(decimal), decimal modifiedDuration = default(decimal), decimal elasticity = default(decimal), decimal convexity = default(decimal))
        {
            this.BasePointValue = basePointValue;
            this.ModifiedDuration = modifiedDuration;
            this.Elasticity = elasticity;
            this.Convexity = convexity;
        }

        /// <summary>
        /// Base point value, which is the change of the debt instrument&#39;s price for a one base point change (nominally, not relatively) of the prevailing market interest rate. One base point is equivalent to 0,01 percent (1/100 of a percent). See attribute &#x60;price/valueUnit&#x60; for its value unit.
        /// </summary>
        /// <value>Base point value, which is the change of the debt instrument&#39;s price for a one base point change (nominally, not relatively) of the prevailing market interest rate. One base point is equivalent to 0,01 percent (1/100 of a percent). See attribute &#x60;price/valueUnit&#x60; for its value unit.</value>
        [DataMember(Name = "basePointValue", EmitDefaultValue = false)]
        public decimal BasePointValue { get; set; }

        /// <summary>
        /// Modified duration, which is the percentage change of the debt instrument&#39;s price for a one percent change (nominally, not relatively) of the prevailing market interest rate.
        /// </summary>
        /// <value>Modified duration, which is the percentage change of the debt instrument&#39;s price for a one percent change (nominally, not relatively) of the prevailing market interest rate.</value>
        [DataMember(Name = "modifiedDuration", EmitDefaultValue = false)]
        public decimal ModifiedDuration { get; set; }

        /// <summary>
        /// Yield elasticity, which is the ratio of the percentage change of the debt instrument&#39;s price for a one percent change (relatively, not nominally) of the prevailing market interest rate.
        /// </summary>
        /// <value>Yield elasticity, which is the ratio of the percentage change of the debt instrument&#39;s price for a one percent change (relatively, not nominally) of the prevailing market interest rate.</value>
        [DataMember(Name = "elasticity", EmitDefaultValue = false)]
        public decimal Elasticity { get; set; }

        /// <summary>
        /// Convexity, which is a measure for the change of the modified duration as the prevailing market interest rate changes.
        /// </summary>
        /// <value>Convexity, which is a measure for the change of the modified duration as the prevailing market interest rate changes.</value>
        [DataMember(Name = "convexity", EmitDefaultValue = false)]
        public decimal Convexity { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class InlineResponse2002DataSensitivities {\n");
            sb.Append("  BasePointValue: ").Append(BasePointValue).Append("\n");
            sb.Append("  ModifiedDuration: ").Append(ModifiedDuration).Append("\n");
            sb.Append("  Elasticity: ").Append(Elasticity).Append("\n");
            sb.Append("  Convexity: ").Append(Convexity).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as InlineResponse2002DataSensitivities);
        }

        /// <summary>
        /// Returns true if InlineResponse2002DataSensitivities instances are equal
        /// </summary>
        /// <param name="input">Instance of InlineResponse2002DataSensitivities to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(InlineResponse2002DataSensitivities input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.BasePointValue == input.BasePointValue ||
                    this.BasePointValue.Equals(input.BasePointValue)
                ) && 
                (
                    this.ModifiedDuration == input.ModifiedDuration ||
                    this.ModifiedDuration.Equals(input.ModifiedDuration)
                ) && 
                (
                    this.Elasticity == input.Elasticity ||
                    this.Elasticity.Equals(input.Elasticity)
                ) && 
                (
                    this.Convexity == input.Convexity ||
                    this.Convexity.Equals(input.Convexity)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.BasePointValue.GetHashCode();
                hashCode = (hashCode * 59) + this.ModifiedDuration.GetHashCode();
                hashCode = (hashCode * 59) + this.Elasticity.GetHashCode();
                hashCode = (hashCode * 59) + this.Convexity.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
