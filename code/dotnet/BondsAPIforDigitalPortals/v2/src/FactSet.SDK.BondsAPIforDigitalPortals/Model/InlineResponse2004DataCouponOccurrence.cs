/*
 * Prime Developer Trial
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = FactSet.SDK.BondsAPIforDigitalPortals.Client.OpenAPIDateConverter;

namespace FactSet.SDK.BondsAPIforDigitalPortals.Model
{
    /// <summary>
    /// Occurrence and frequency of the coupon payments.
    /// </summary>
    [DataContract(Name = "inline_response_200_4_data_coupon_occurrence")]
    public partial class InlineResponse2004DataCouponOccurrence : IEquatable<InlineResponse2004DataCouponOccurrence>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="InlineResponse2004DataCouponOccurrence" /> class.
        /// </summary>
        /// <param name="type">Occurrence types of the coupon payments..</param>
        /// <param name="frequency">Frequency of the coupon payments; applicable only to debt instruments with an occurrence type &#x60;repeated&#x60;. See endpoint &#x60;/basic/frequency/type/list&#x60; for possible values..</param>
        public InlineResponse2004DataCouponOccurrence(List<InlineResponse2004DataCouponOccurrenceType> type = default(List<InlineResponse2004DataCouponOccurrenceType>), List<InlineResponse2004DataCouponOccurrenceFrequency> frequency = default(List<InlineResponse2004DataCouponOccurrenceFrequency>))
        {
            this.Type = type;
            this.Frequency = frequency;
        }

        /// <summary>
        /// Occurrence types of the coupon payments.
        /// </summary>
        /// <value>Occurrence types of the coupon payments.</value>
        [DataMember(Name = "type", EmitDefaultValue = false)]
        public List<InlineResponse2004DataCouponOccurrenceType> Type { get; set; }

        /// <summary>
        /// Frequency of the coupon payments; applicable only to debt instruments with an occurrence type &#x60;repeated&#x60;. See endpoint &#x60;/basic/frequency/type/list&#x60; for possible values.
        /// </summary>
        /// <value>Frequency of the coupon payments; applicable only to debt instruments with an occurrence type &#x60;repeated&#x60;. See endpoint &#x60;/basic/frequency/type/list&#x60; for possible values.</value>
        [DataMember(Name = "frequency", EmitDefaultValue = false)]
        public List<InlineResponse2004DataCouponOccurrenceFrequency> Frequency { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class InlineResponse2004DataCouponOccurrence {\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Frequency: ").Append(Frequency).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as InlineResponse2004DataCouponOccurrence);
        }

        /// <summary>
        /// Returns true if InlineResponse2004DataCouponOccurrence instances are equal
        /// </summary>
        /// <param name="input">Instance of InlineResponse2004DataCouponOccurrence to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(InlineResponse2004DataCouponOccurrence input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Type == input.Type ||
                    this.Type != null &&
                    input.Type != null &&
                    this.Type.SequenceEqual(input.Type)
                ) && 
                (
                    this.Frequency == input.Frequency ||
                    this.Frequency != null &&
                    input.Frequency != null &&
                    this.Frequency.SequenceEqual(input.Frequency)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Type != null)
                {
                    hashCode = (hashCode * 59) + this.Type.GetHashCode();
                }
                if (this.Frequency != null)
                {
                    hashCode = (hashCode * 59) + this.Frequency.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
