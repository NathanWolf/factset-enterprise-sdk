/*
 * Bonds API For Digital Portals
 *
 * Search for fixed income instruments, using a criteria-based screener. The API provides also fundamental data and key figures, basic interest rate information and derived coupon lists.  Available search criteria include:  * validation: filter for only active listings, by price quality and latest/previous available price dates * traded markets: filter and indicate a market priority for the validation * important dates in and features of the life cycle of the fixed income instruments * filter by issuer, its country of registration and the issued volume * coupon data: occurrence and frequency of coupon payments, current interest rate range * yield and yield to maturity range, spread * Macaulay duration * sensitivity ranges: base point value, modified duration, elasticity, convexity * cash flow for all transactions over a certain time range: sum or average * country-specific attributes: for Germany: is eligible for trustees        The key figures are calculated using delayed prices with an additional delay of 10 minutes after an update of the debt instrument's price. Special product features such as the right to a maturity extension, an attached option, or convertibility are not considered for the key figure calculation. Further, a calculation is not performed for perpetual products and for products with variable interest rate.  This API is fully integrated with the corresponding Quotes API, allowing access to detailed price and performance information of instruments, as well as basic security identifier cross-reference. For direct access to price histories, please refer to the Time Series API for Digital Portals.  Similar criteria based screener APIs exist for equity instruments and securitized derivatives: See the Stocks API and the Securitized Derivatives API for details.
 *
 * The version of the OpenAPI document: 2
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = FactSet.SDK.BondsAPIforDigitalPortals.Client.OpenAPIDateConverter;

namespace FactSet.SDK.BondsAPIforDigitalPortals.Model
{
    /// <summary>
    /// Possible values and value ranges of the parameters.
    /// </summary>
    [DataContract(Name = "inline_response_200_4_data")]
    public partial class InlineResponse2004Data : IEquatable<InlineResponse2004Data>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="InlineResponse2004Data" /> class.
        /// </summary>
        /// <param name="totalCount">Number of notations that satisfy the request parameters, hence have been used to retrieve the possible values and value ranges..</param>
        /// <param name="valueUnit">List of value unit identifiers. See endpoint &#x60;/basic/valueUnit/list&#x60; for possible values..</param>
        /// <param name="market">List of market identifiers. See endpoint &#x60;/basic/market/list&#x60; for possible values..</param>
        /// <param name="categorization">Lists of categories of the debt instruments&#39; categorization. Starting with the most coarse level (one), for each level of the category system, the list of categories of the debt instruments, matching the parameters, is returned. See endpoint &#x60;/category/listBySystem&#x60; with &#x60;id&#x3D;18&#x60; for possible values..</param>
        /// <param name="lifeCycle">lifeCycle.</param>
        /// <param name="subordinated">Indicates whether subordinated and non-subordinated are among the results. In case of default, subordinated debt instruments are redeemed with a lower priority than non-subordinated..</param>
        /// <param name="ratingSystem1">ratingSystem1.</param>
        /// <param name="ratingSystem2">ratingSystem2.</param>
        /// <param name="issuer">issuer.</param>
        /// <param name="issue">issue.</param>
        /// <param name="tradingVolume">tradingVolume.</param>
        /// <param name="compliance">compliance.</param>
        /// <param name="coupon">coupon.</param>
        /// <param name="yield">yield.</param>
        /// <param name="macaulayDuration">macaulayDuration.</param>
        /// <param name="sensitivities">sensitivities.</param>
        /// <param name="tradedValue">tradedValue.</param>
        public InlineResponse2004Data(decimal totalCount = default(decimal), List<InlineResponse2004DataValueUnit> valueUnit = default(List<InlineResponse2004DataValueUnit>), List<InlineResponse2004DataMarket> market = default(List<InlineResponse2004DataMarket>), List<InlineResponse2004DataCategorization> categorization = default(List<InlineResponse2004DataCategorization>), InlineResponse2004DataLifeCycle lifeCycle = default(InlineResponse2004DataLifeCycle), List<InlineResponse2004DataLifeCycleMaturityPerpetual> subordinated = default(List<InlineResponse2004DataLifeCycleMaturityPerpetual>), InlineResponse2004DataRatingSystem1 ratingSystem1 = default(InlineResponse2004DataRatingSystem1), InlineResponse2004DataRatingSystem2 ratingSystem2 = default(InlineResponse2004DataRatingSystem2), InlineResponse2004DataIssuer issuer = default(InlineResponse2004DataIssuer), InlineResponse2004DataIssue issue = default(InlineResponse2004DataIssue), InlineResponse2004DataTradingVolume tradingVolume = default(InlineResponse2004DataTradingVolume), InlineResponse2004DataCompliance compliance = default(InlineResponse2004DataCompliance), InlineResponse2004DataCoupon coupon = default(InlineResponse2004DataCoupon), InlineResponse2004DataYield yield = default(InlineResponse2004DataYield), InlineResponse2004DataMacaulayDuration macaulayDuration = default(InlineResponse2004DataMacaulayDuration), InlineResponse2004DataSensitivities sensitivities = default(InlineResponse2004DataSensitivities), InlineResponse2004DataTradedValue tradedValue = default(InlineResponse2004DataTradedValue))
        {
            this.TotalCount = totalCount;
            this.ValueUnit = valueUnit;
            this.Market = market;
            this.Categorization = categorization;
            this.LifeCycle = lifeCycle;
            this.Subordinated = subordinated;
            this.RatingSystem1 = ratingSystem1;
            this.RatingSystem2 = ratingSystem2;
            this.Issuer = issuer;
            this.Issue = issue;
            this.TradingVolume = tradingVolume;
            this.Compliance = compliance;
            this.Coupon = coupon;
            this.Yield = yield;
            this.MacaulayDuration = macaulayDuration;
            this.Sensitivities = sensitivities;
            this.TradedValue = tradedValue;
        }

        /// <summary>
        /// Number of notations that satisfy the request parameters, hence have been used to retrieve the possible values and value ranges.
        /// </summary>
        /// <value>Number of notations that satisfy the request parameters, hence have been used to retrieve the possible values and value ranges.</value>
        [DataMember(Name = "totalCount", EmitDefaultValue = false)]
        public decimal TotalCount { get; set; }

        /// <summary>
        /// List of value unit identifiers. See endpoint &#x60;/basic/valueUnit/list&#x60; for possible values.
        /// </summary>
        /// <value>List of value unit identifiers. See endpoint &#x60;/basic/valueUnit/list&#x60; for possible values.</value>
        [DataMember(Name = "valueUnit", EmitDefaultValue = false)]
        public List<InlineResponse2004DataValueUnit> ValueUnit { get; set; }

        /// <summary>
        /// List of market identifiers. See endpoint &#x60;/basic/market/list&#x60; for possible values.
        /// </summary>
        /// <value>List of market identifiers. See endpoint &#x60;/basic/market/list&#x60; for possible values.</value>
        [DataMember(Name = "market", EmitDefaultValue = false)]
        public List<InlineResponse2004DataMarket> Market { get; set; }

        /// <summary>
        /// Lists of categories of the debt instruments&#39; categorization. Starting with the most coarse level (one), for each level of the category system, the list of categories of the debt instruments, matching the parameters, is returned. See endpoint &#x60;/category/listBySystem&#x60; with &#x60;id&#x3D;18&#x60; for possible values.
        /// </summary>
        /// <value>Lists of categories of the debt instruments&#39; categorization. Starting with the most coarse level (one), for each level of the category system, the list of categories of the debt instruments, matching the parameters, is returned. See endpoint &#x60;/category/listBySystem&#x60; with &#x60;id&#x3D;18&#x60; for possible values.</value>
        [DataMember(Name = "categorization", EmitDefaultValue = false)]
        public List<InlineResponse2004DataCategorization> Categorization { get; set; }

        /// <summary>
        /// Gets or Sets LifeCycle
        /// </summary>
        [DataMember(Name = "lifeCycle", EmitDefaultValue = false)]
        public InlineResponse2004DataLifeCycle LifeCycle { get; set; }

        /// <summary>
        /// Indicates whether subordinated and non-subordinated are among the results. In case of default, subordinated debt instruments are redeemed with a lower priority than non-subordinated.
        /// </summary>
        /// <value>Indicates whether subordinated and non-subordinated are among the results. In case of default, subordinated debt instruments are redeemed with a lower priority than non-subordinated.</value>
        [DataMember(Name = "subordinated", EmitDefaultValue = false)]
        public List<InlineResponse2004DataLifeCycleMaturityPerpetual> Subordinated { get; set; }

        /// <summary>
        /// Gets or Sets RatingSystem1
        /// </summary>
        [DataMember(Name = "ratingSystem1", EmitDefaultValue = false)]
        public InlineResponse2004DataRatingSystem1 RatingSystem1 { get; set; }

        /// <summary>
        /// Gets or Sets RatingSystem2
        /// </summary>
        [DataMember(Name = "ratingSystem2", EmitDefaultValue = false)]
        public InlineResponse2004DataRatingSystem2 RatingSystem2 { get; set; }

        /// <summary>
        /// Gets or Sets Issuer
        /// </summary>
        [DataMember(Name = "issuer", EmitDefaultValue = false)]
        public InlineResponse2004DataIssuer Issuer { get; set; }

        /// <summary>
        /// Gets or Sets Issue
        /// </summary>
        [DataMember(Name = "issue", EmitDefaultValue = false)]
        public InlineResponse2004DataIssue Issue { get; set; }

        /// <summary>
        /// Gets or Sets TradingVolume
        /// </summary>
        [DataMember(Name = "tradingVolume", EmitDefaultValue = false)]
        public InlineResponse2004DataTradingVolume TradingVolume { get; set; }

        /// <summary>
        /// Gets or Sets Compliance
        /// </summary>
        [DataMember(Name = "compliance", EmitDefaultValue = false)]
        public InlineResponse2004DataCompliance Compliance { get; set; }

        /// <summary>
        /// Gets or Sets Coupon
        /// </summary>
        [DataMember(Name = "coupon", EmitDefaultValue = false)]
        public InlineResponse2004DataCoupon Coupon { get; set; }

        /// <summary>
        /// Gets or Sets Yield
        /// </summary>
        [DataMember(Name = "yield", EmitDefaultValue = false)]
        public InlineResponse2004DataYield Yield { get; set; }

        /// <summary>
        /// Gets or Sets MacaulayDuration
        /// </summary>
        [DataMember(Name = "macaulayDuration", EmitDefaultValue = false)]
        public InlineResponse2004DataMacaulayDuration MacaulayDuration { get; set; }

        /// <summary>
        /// Gets or Sets Sensitivities
        /// </summary>
        [DataMember(Name = "sensitivities", EmitDefaultValue = false)]
        public InlineResponse2004DataSensitivities Sensitivities { get; set; }

        /// <summary>
        /// Gets or Sets TradedValue
        /// </summary>
        [DataMember(Name = "tradedValue", EmitDefaultValue = false)]
        public InlineResponse2004DataTradedValue TradedValue { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class InlineResponse2004Data {\n");
            sb.Append("  TotalCount: ").Append(TotalCount).Append("\n");
            sb.Append("  ValueUnit: ").Append(ValueUnit).Append("\n");
            sb.Append("  Market: ").Append(Market).Append("\n");
            sb.Append("  Categorization: ").Append(Categorization).Append("\n");
            sb.Append("  LifeCycle: ").Append(LifeCycle).Append("\n");
            sb.Append("  Subordinated: ").Append(Subordinated).Append("\n");
            sb.Append("  RatingSystem1: ").Append(RatingSystem1).Append("\n");
            sb.Append("  RatingSystem2: ").Append(RatingSystem2).Append("\n");
            sb.Append("  Issuer: ").Append(Issuer).Append("\n");
            sb.Append("  Issue: ").Append(Issue).Append("\n");
            sb.Append("  TradingVolume: ").Append(TradingVolume).Append("\n");
            sb.Append("  Compliance: ").Append(Compliance).Append("\n");
            sb.Append("  Coupon: ").Append(Coupon).Append("\n");
            sb.Append("  Yield: ").Append(Yield).Append("\n");
            sb.Append("  MacaulayDuration: ").Append(MacaulayDuration).Append("\n");
            sb.Append("  Sensitivities: ").Append(Sensitivities).Append("\n");
            sb.Append("  TradedValue: ").Append(TradedValue).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as InlineResponse2004Data);
        }

        /// <summary>
        /// Returns true if InlineResponse2004Data instances are equal
        /// </summary>
        /// <param name="input">Instance of InlineResponse2004Data to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(InlineResponse2004Data input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.TotalCount == input.TotalCount ||
                    this.TotalCount.Equals(input.TotalCount)
                ) && 
                (
                    this.ValueUnit == input.ValueUnit ||
                    this.ValueUnit != null &&
                    input.ValueUnit != null &&
                    this.ValueUnit.SequenceEqual(input.ValueUnit)
                ) && 
                (
                    this.Market == input.Market ||
                    this.Market != null &&
                    input.Market != null &&
                    this.Market.SequenceEqual(input.Market)
                ) && 
                (
                    this.Categorization == input.Categorization ||
                    this.Categorization != null &&
                    input.Categorization != null &&
                    this.Categorization.SequenceEqual(input.Categorization)
                ) && 
                (
                    this.LifeCycle == input.LifeCycle ||
                    (this.LifeCycle != null &&
                    this.LifeCycle.Equals(input.LifeCycle))
                ) && 
                (
                    this.Subordinated == input.Subordinated ||
                    this.Subordinated != null &&
                    input.Subordinated != null &&
                    this.Subordinated.SequenceEqual(input.Subordinated)
                ) && 
                (
                    this.RatingSystem1 == input.RatingSystem1 ||
                    (this.RatingSystem1 != null &&
                    this.RatingSystem1.Equals(input.RatingSystem1))
                ) && 
                (
                    this.RatingSystem2 == input.RatingSystem2 ||
                    (this.RatingSystem2 != null &&
                    this.RatingSystem2.Equals(input.RatingSystem2))
                ) && 
                (
                    this.Issuer == input.Issuer ||
                    (this.Issuer != null &&
                    this.Issuer.Equals(input.Issuer))
                ) && 
                (
                    this.Issue == input.Issue ||
                    (this.Issue != null &&
                    this.Issue.Equals(input.Issue))
                ) && 
                (
                    this.TradingVolume == input.TradingVolume ||
                    (this.TradingVolume != null &&
                    this.TradingVolume.Equals(input.TradingVolume))
                ) && 
                (
                    this.Compliance == input.Compliance ||
                    (this.Compliance != null &&
                    this.Compliance.Equals(input.Compliance))
                ) && 
                (
                    this.Coupon == input.Coupon ||
                    (this.Coupon != null &&
                    this.Coupon.Equals(input.Coupon))
                ) && 
                (
                    this.Yield == input.Yield ||
                    (this.Yield != null &&
                    this.Yield.Equals(input.Yield))
                ) && 
                (
                    this.MacaulayDuration == input.MacaulayDuration ||
                    (this.MacaulayDuration != null &&
                    this.MacaulayDuration.Equals(input.MacaulayDuration))
                ) && 
                (
                    this.Sensitivities == input.Sensitivities ||
                    (this.Sensitivities != null &&
                    this.Sensitivities.Equals(input.Sensitivities))
                ) && 
                (
                    this.TradedValue == input.TradedValue ||
                    (this.TradedValue != null &&
                    this.TradedValue.Equals(input.TradedValue))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.TotalCount.GetHashCode();
                if (this.ValueUnit != null)
                {
                    hashCode = (hashCode * 59) + this.ValueUnit.GetHashCode();
                }
                if (this.Market != null)
                {
                    hashCode = (hashCode * 59) + this.Market.GetHashCode();
                }
                if (this.Categorization != null)
                {
                    hashCode = (hashCode * 59) + this.Categorization.GetHashCode();
                }
                if (this.LifeCycle != null)
                {
                    hashCode = (hashCode * 59) + this.LifeCycle.GetHashCode();
                }
                if (this.Subordinated != null)
                {
                    hashCode = (hashCode * 59) + this.Subordinated.GetHashCode();
                }
                if (this.RatingSystem1 != null)
                {
                    hashCode = (hashCode * 59) + this.RatingSystem1.GetHashCode();
                }
                if (this.RatingSystem2 != null)
                {
                    hashCode = (hashCode * 59) + this.RatingSystem2.GetHashCode();
                }
                if (this.Issuer != null)
                {
                    hashCode = (hashCode * 59) + this.Issuer.GetHashCode();
                }
                if (this.Issue != null)
                {
                    hashCode = (hashCode * 59) + this.Issue.GetHashCode();
                }
                if (this.TradingVolume != null)
                {
                    hashCode = (hashCode * 59) + this.TradingVolume.GetHashCode();
                }
                if (this.Compliance != null)
                {
                    hashCode = (hashCode * 59) + this.Compliance.GetHashCode();
                }
                if (this.Coupon != null)
                {
                    hashCode = (hashCode * 59) + this.Coupon.GetHashCode();
                }
                if (this.Yield != null)
                {
                    hashCode = (hashCode * 59) + this.Yield.GetHashCode();
                }
                if (this.MacaulayDuration != null)
                {
                    hashCode = (hashCode * 59) + this.MacaulayDuration.GetHashCode();
                }
                if (this.Sensitivities != null)
                {
                    hashCode = (hashCode * 59) + this.Sensitivities.GetHashCode();
                }
                if (this.TradedValue != null)
                {
                    hashCode = (hashCode * 59) + this.TradedValue.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
