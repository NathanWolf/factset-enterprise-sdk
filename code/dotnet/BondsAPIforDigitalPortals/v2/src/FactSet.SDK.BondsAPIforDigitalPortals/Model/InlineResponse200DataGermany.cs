/*
 * Prime Developer Trial
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = FactSet.SDK.BondsAPIforDigitalPortals.Client.OpenAPIDateConverter;

namespace FactSet.SDK.BondsAPIforDigitalPortals.Model
{
    /// <summary>
    /// Specific data for Germany.
    /// </summary>
    [DataContract(Name = "inline_response_200_data_germany")]
    public partial class InlineResponse200DataGermany : IEquatable<InlineResponse200DataGermany>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="InlineResponse200DataGermany" /> class.
        /// </summary>
        /// <param name="isTrusteeEligible">If true, the debt instrument is eligible for investments by trustees according to §§1806ff of the BGB (German Civil Code). The German legislative has declared it to be virtually free of the risk of loss, such as government and state bonds. Eligible are primarily German securities..</param>
        public InlineResponse200DataGermany(bool isTrusteeEligible = default(bool))
        {
            this.IsTrusteeEligible = isTrusteeEligible;
        }

        /// <summary>
        /// If true, the debt instrument is eligible for investments by trustees according to §§1806ff of the BGB (German Civil Code). The German legislative has declared it to be virtually free of the risk of loss, such as government and state bonds. Eligible are primarily German securities.
        /// </summary>
        /// <value>If true, the debt instrument is eligible for investments by trustees according to §§1806ff of the BGB (German Civil Code). The German legislative has declared it to be virtually free of the risk of loss, such as government and state bonds. Eligible are primarily German securities.</value>
        [DataMember(Name = "isTrusteeEligible", EmitDefaultValue = true)]
        public bool IsTrusteeEligible { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class InlineResponse200DataGermany {\n");
            sb.Append("  IsTrusteeEligible: ").Append(IsTrusteeEligible).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as InlineResponse200DataGermany);
        }

        /// <summary>
        /// Returns true if InlineResponse200DataGermany instances are equal
        /// </summary>
        /// <param name="input">Instance of InlineResponse200DataGermany to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(InlineResponse200DataGermany input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.IsTrusteeEligible == input.IsTrusteeEligible ||
                    this.IsTrusteeEligible.Equals(input.IsTrusteeEligible)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.IsTrusteeEligible.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
