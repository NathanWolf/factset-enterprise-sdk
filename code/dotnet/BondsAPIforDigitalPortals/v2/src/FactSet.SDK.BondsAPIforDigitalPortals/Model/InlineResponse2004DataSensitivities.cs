/*
 * Prime Developer Trial
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = FactSet.SDK.BondsAPIforDigitalPortals.Client.OpenAPIDateConverter;

namespace FactSet.SDK.BondsAPIforDigitalPortals.Model
{
    /// <summary>
    /// Value ranges of the price sensitivities of the debt instruments with respect to the prevailing market interest rate.
    /// </summary>
    [DataContract(Name = "inline_response_200_4_data_sensitivities")]
    public partial class InlineResponse2004DataSensitivities : IEquatable<InlineResponse2004DataSensitivities>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="InlineResponse2004DataSensitivities" /> class.
        /// </summary>
        /// <param name="basePointValue">basePointValue.</param>
        /// <param name="modifiedDuration">modifiedDuration.</param>
        /// <param name="elasticity">elasticity.</param>
        /// <param name="convexity">convexity.</param>
        public InlineResponse2004DataSensitivities(InlineResponse2004DataSensitivitiesBasePointValue basePointValue = default(InlineResponse2004DataSensitivitiesBasePointValue), InlineResponse2004DataSensitivitiesModifiedDuration modifiedDuration = default(InlineResponse2004DataSensitivitiesModifiedDuration), InlineResponse2004DataSensitivitiesElasticity elasticity = default(InlineResponse2004DataSensitivitiesElasticity), InlineResponse2004DataSensitivitiesConvexity convexity = default(InlineResponse2004DataSensitivitiesConvexity))
        {
            this.BasePointValue = basePointValue;
            this.ModifiedDuration = modifiedDuration;
            this.Elasticity = elasticity;
            this.Convexity = convexity;
        }

        /// <summary>
        /// Gets or Sets BasePointValue
        /// </summary>
        [DataMember(Name = "basePointValue", EmitDefaultValue = false)]
        public InlineResponse2004DataSensitivitiesBasePointValue BasePointValue { get; set; }

        /// <summary>
        /// Gets or Sets ModifiedDuration
        /// </summary>
        [DataMember(Name = "modifiedDuration", EmitDefaultValue = false)]
        public InlineResponse2004DataSensitivitiesModifiedDuration ModifiedDuration { get; set; }

        /// <summary>
        /// Gets or Sets Elasticity
        /// </summary>
        [DataMember(Name = "elasticity", EmitDefaultValue = false)]
        public InlineResponse2004DataSensitivitiesElasticity Elasticity { get; set; }

        /// <summary>
        /// Gets or Sets Convexity
        /// </summary>
        [DataMember(Name = "convexity", EmitDefaultValue = false)]
        public InlineResponse2004DataSensitivitiesConvexity Convexity { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class InlineResponse2004DataSensitivities {\n");
            sb.Append("  BasePointValue: ").Append(BasePointValue).Append("\n");
            sb.Append("  ModifiedDuration: ").Append(ModifiedDuration).Append("\n");
            sb.Append("  Elasticity: ").Append(Elasticity).Append("\n");
            sb.Append("  Convexity: ").Append(Convexity).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as InlineResponse2004DataSensitivities);
        }

        /// <summary>
        /// Returns true if InlineResponse2004DataSensitivities instances are equal
        /// </summary>
        /// <param name="input">Instance of InlineResponse2004DataSensitivities to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(InlineResponse2004DataSensitivities input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.BasePointValue == input.BasePointValue ||
                    (this.BasePointValue != null &&
                    this.BasePointValue.Equals(input.BasePointValue))
                ) && 
                (
                    this.ModifiedDuration == input.ModifiedDuration ||
                    (this.ModifiedDuration != null &&
                    this.ModifiedDuration.Equals(input.ModifiedDuration))
                ) && 
                (
                    this.Elasticity == input.Elasticity ||
                    (this.Elasticity != null &&
                    this.Elasticity.Equals(input.Elasticity))
                ) && 
                (
                    this.Convexity == input.Convexity ||
                    (this.Convexity != null &&
                    this.Convexity.Equals(input.Convexity))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.BasePointValue != null)
                {
                    hashCode = (hashCode * 59) + this.BasePointValue.GetHashCode();
                }
                if (this.ModifiedDuration != null)
                {
                    hashCode = (hashCode * 59) + this.ModifiedDuration.GetHashCode();
                }
                if (this.Elasticity != null)
                {
                    hashCode = (hashCode * 59) + this.Elasticity.GetHashCode();
                }
                if (this.Convexity != null)
                {
                    hashCode = (hashCode * 59) + this.Convexity.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
