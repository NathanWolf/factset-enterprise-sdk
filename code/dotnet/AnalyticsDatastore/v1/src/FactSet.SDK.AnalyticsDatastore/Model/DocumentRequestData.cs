/*
 * Analytics Datastore  API
 *
 * Allow clients to fetch precalculated Analytics through predeterministic URLs.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: api@factset.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = FactSet.SDK.AnalyticsDatastore.Client.OpenAPIDateConverter;

namespace FactSet.SDK.AnalyticsDatastore.Model
{
    /// <summary>
    /// DocumentRequestData
    /// </summary>
    [DataContract(Name = "DocumentRequest_data")]
    public partial class DocumentRequestData : IEquatable<DocumentRequestData>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DocumentRequestData" /> class.
        /// </summary>
        /// <param name="path">The Document path to filter on. For example: path&#x3D;Client:/Test/Publisher/Example.pdf.</param>
        /// <param name="productType">The Document path to filter on. For example: path&#x3D;Client:/Test/Publisher/Example.pdf.</param>
        /// <param name="tags">The documents tags, represented in a key value format with the tag name as the key; and the tag&#39;s value as the value.</param>
        public DocumentRequestData(string path = default(string), string productType = default(string), Dictionary<string, string> tags = default(Dictionary<string, string>))
        {
            this.Path = path;
            this.ProductType = productType;
            this.Tags = tags;
        }

        /// <summary>
        /// The Document path to filter on. For example: path&#x3D;Client:/Test/Publisher/Example.pdf
        /// </summary>
        /// <value>The Document path to filter on. For example: path&#x3D;Client:/Test/Publisher/Example.pdf</value>
        [DataMember(Name = "path", EmitDefaultValue = false)]
        public string Path { get; set; }

        /// <summary>
        /// The Document path to filter on. For example: path&#x3D;Client:/Test/Publisher/Example.pdf
        /// </summary>
        /// <value>The Document path to filter on. For example: path&#x3D;Client:/Test/Publisher/Example.pdf</value>
        [DataMember(Name = "productType", EmitDefaultValue = false)]
        public string ProductType { get; set; }

        /// <summary>
        /// The documents tags, represented in a key value format with the tag name as the key; and the tag&#39;s value as the value
        /// </summary>
        /// <value>The documents tags, represented in a key value format with the tag name as the key; and the tag&#39;s value as the value</value>
        [DataMember(Name = "tags", EmitDefaultValue = false)]
        public Dictionary<string, string> Tags { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class DocumentRequestData {\n");
            sb.Append("  Path: ").Append(Path).Append("\n");
            sb.Append("  ProductType: ").Append(ProductType).Append("\n");
            sb.Append("  Tags: ").Append(Tags).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DocumentRequestData);
        }

        /// <summary>
        /// Returns true if DocumentRequestData instances are equal
        /// </summary>
        /// <param name="input">Instance of DocumentRequestData to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DocumentRequestData input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Path == input.Path ||
                    (this.Path != null &&
                    this.Path.Equals(input.Path))
                ) && 
                (
                    this.ProductType == input.ProductType ||
                    (this.ProductType != null &&
                    this.ProductType.Equals(input.ProductType))
                ) && 
                (
                    this.Tags == input.Tags ||
                    this.Tags != null &&
                    input.Tags != null &&
                    this.Tags.SequenceEqual(input.Tags)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Path != null)
                {
                    hashCode = (hashCode * 59) + this.Path.GetHashCode();
                }
                if (this.ProductType != null)
                {
                    hashCode = (hashCode * 59) + this.ProductType.GetHashCode();
                }
                if (this.Tags != null)
                {
                    hashCode = (hashCode * 59) + this.Tags.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
