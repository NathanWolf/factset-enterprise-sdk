/*
 * Analytics Datastore  API
 *
 * Allow clients to fetch precalculated Analytics through predeterministic URLs.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: api@factset.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using FactSet.SDK.AnalyticsDatastore.Client;
using FactSet.SDK.AnalyticsDatastore.Model;
using FactSet.SDK.Utils.Authentication;

namespace FactSet.SDK.AnalyticsDatastore.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IDocumentsApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Gets a list of Documents that a user has access to.
        /// </summary>
        /// <remarks>
        /// Retrieves metadata around documents stored in the Analytics Datastore Service. Each Document will have a &#39;url&#39; property which will act as a re-direct to the underlying document data    This end point supports pagination and filtering through the use of the request body listed below.    To discover what tags are available to filter on, see GET /tags and GET /tags/{name}/values to retrieve these filter values.    Similarly, to discover what product types are available to filter on, see POST /product-types/search to retrieve a list of product types.
        /// </remarks>
        /// <exception cref="FactSet.SDK.AnalyticsDatastore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentRequest">Example request of a filtered Documents search call</param>
        /// <returns>DocumentListResponse</returns>
        DocumentListResponse GetDocumentsEndPoint(DocumentRequest documentRequest);

        /// <summary>
        /// Gets a list of Documents that a user has access to.
        /// </summary>
        /// <remarks>
        /// Retrieves metadata around documents stored in the Analytics Datastore Service. Each Document will have a &#39;url&#39; property which will act as a re-direct to the underlying document data    This end point supports pagination and filtering through the use of the request body listed below.    To discover what tags are available to filter on, see GET /tags and GET /tags/{name}/values to retrieve these filter values.    Similarly, to discover what product types are available to filter on, see POST /product-types/search to retrieve a list of product types.
        /// </remarks>
        /// <exception cref="FactSet.SDK.AnalyticsDatastore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentRequest">Example request of a filtered Documents search call</param>
        /// <returns>ApiResponse of DocumentListResponse</returns>
        ApiResponse<DocumentListResponse> GetDocumentsEndPointWithHttpInfo(DocumentRequest documentRequest);
        /// <summary>
        /// Gets a list of product types that a user has access to.
        /// </summary>
        /// <remarks>
        /// Retrieves a list of product types that have been specified across all documents the user has access to
        /// </remarks>
        /// <exception cref="FactSet.SDK.AnalyticsDatastore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tagFilterModel">Request body to apply when filtering on this end point. Pagination controls are applied through the pagination object and additional tag filters can be used by supplying the tag name and its value in the tags object.</param>
        /// <returns>ProductTypeListResponse</returns>
        ProductTypeListResponse GetProductTypes(TagFilterModel tagFilterModel);

        /// <summary>
        /// Gets a list of product types that a user has access to.
        /// </summary>
        /// <remarks>
        /// Retrieves a list of product types that have been specified across all documents the user has access to
        /// </remarks>
        /// <exception cref="FactSet.SDK.AnalyticsDatastore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tagFilterModel">Request body to apply when filtering on this end point. Pagination controls are applied through the pagination object and additional tag filters can be used by supplying the tag name and its value in the tags object.</param>
        /// <returns>ApiResponse of ProductTypeListResponse</returns>
        ApiResponse<ProductTypeListResponse> GetProductTypesWithHttpInfo(TagFilterModel tagFilterModel);
        /// <summary>
        /// Get a single tag definition based on its name
        /// </summary>
        /// <remarks>
        /// Retrieve a tag definition based on its name
        /// </remarks>
        /// <exception cref="FactSet.SDK.AnalyticsDatastore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The name of the tag</param>
        /// <returns>TagResponse</returns>
        TagResponse GetSingleTagEndPoint(string name);

        /// <summary>
        /// Get a single tag definition based on its name
        /// </summary>
        /// <remarks>
        /// Retrieve a tag definition based on its name
        /// </remarks>
        /// <exception cref="FactSet.SDK.AnalyticsDatastore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The name of the tag</param>
        /// <returns>ApiResponse of TagResponse</returns>
        ApiResponse<TagResponse> GetSingleTagEndPointWithHttpInfo(string name);
        /// <summary>
        /// Gets a list of tag values for the given name
        /// </summary>
        /// <remarks>
        /// Returns a list of tag values depending on the name provided. Supports filtering on additional tag name value pairs, which operates as an &#39;AND&#39; where the Document must have the tag name specified in the path AND the filtered parameter.
        /// </remarks>
        /// <exception cref="FactSet.SDK.AnalyticsDatastore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The name of the tag</param>
        /// <param name="tagFilterModel">Request body to apply when filtering on this end point. Pagination controls are applied through the pagination object and additional tag filters can be used by supplying the tag name and its value in the tags object.</param>
        /// <returns>TagValuesListResponse</returns>
        TagValuesListResponse GetTagValuesEndPoint(string name, TagFilterModel tagFilterModel);

        /// <summary>
        /// Gets a list of tag values for the given name
        /// </summary>
        /// <remarks>
        /// Returns a list of tag values depending on the name provided. Supports filtering on additional tag name value pairs, which operates as an &#39;AND&#39; where the Document must have the tag name specified in the path AND the filtered parameter.
        /// </remarks>
        /// <exception cref="FactSet.SDK.AnalyticsDatastore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The name of the tag</param>
        /// <param name="tagFilterModel">Request body to apply when filtering on this end point. Pagination controls are applied through the pagination object and additional tag filters can be used by supplying the tag name and its value in the tags object.</param>
        /// <returns>ApiResponse of TagValuesListResponse</returns>
        ApiResponse<TagValuesListResponse> GetTagValuesEndPointWithHttpInfo(string name, TagFilterModel tagFilterModel);
        /// <summary>
        /// Gets a list of tag definitions for the user.
        /// </summary>
        /// <remarks>
        /// Tag definitions consist of a name and a type. Use this end point to see a list of pre-existing tags that can be used to filter on the Documents end point.
        /// </remarks>
        /// <exception cref="FactSet.SDK.AnalyticsDatastore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="paginationOffset">The offset integer on where to begin paginating (optional, default to 0)</param>
        /// <param name="paginationLimit">The limit of records to return when paginating (optional, default to 50)</param>
        /// <returns>TagListResponse</returns>
        TagListResponse GetTagsEndPoint(int? paginationOffset = default(int?), int? paginationLimit = default(int?));

        /// <summary>
        /// Gets a list of tag definitions for the user.
        /// </summary>
        /// <remarks>
        /// Tag definitions consist of a name and a type. Use this end point to see a list of pre-existing tags that can be used to filter on the Documents end point.
        /// </remarks>
        /// <exception cref="FactSet.SDK.AnalyticsDatastore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="paginationOffset">The offset integer on where to begin paginating (optional, default to 0)</param>
        /// <param name="paginationLimit">The limit of records to return when paginating (optional, default to 50)</param>
        /// <returns>ApiResponse of TagListResponse</returns>
        ApiResponse<TagListResponse> GetTagsEndPointWithHttpInfo(int? paginationOffset = default(int?), int? paginationLimit = default(int?));
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IDocumentsApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Gets a list of Documents that a user has access to.
        /// </summary>
        /// <remarks>
        /// Retrieves metadata around documents stored in the Analytics Datastore Service. Each Document will have a &#39;url&#39; property which will act as a re-direct to the underlying document data    This end point supports pagination and filtering through the use of the request body listed below.    To discover what tags are available to filter on, see GET /tags and GET /tags/{name}/values to retrieve these filter values.    Similarly, to discover what product types are available to filter on, see POST /product-types/search to retrieve a list of product types.
        /// </remarks>
        /// <exception cref="FactSet.SDK.AnalyticsDatastore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentRequest">Example request of a filtered Documents search call</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DocumentListResponse</returns>
        System.Threading.Tasks.Task<DocumentListResponse> GetDocumentsEndPointAsync(DocumentRequest documentRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Gets a list of Documents that a user has access to.
        /// </summary>
        /// <remarks>
        /// Retrieves metadata around documents stored in the Analytics Datastore Service. Each Document will have a &#39;url&#39; property which will act as a re-direct to the underlying document data    This end point supports pagination and filtering through the use of the request body listed below.    To discover what tags are available to filter on, see GET /tags and GET /tags/{name}/values to retrieve these filter values.    Similarly, to discover what product types are available to filter on, see POST /product-types/search to retrieve a list of product types.
        /// </remarks>
        /// <exception cref="FactSet.SDK.AnalyticsDatastore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentRequest">Example request of a filtered Documents search call</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DocumentListResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<DocumentListResponse>> GetDocumentsEndPointWithHttpInfoAsync(DocumentRequest documentRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Gets a list of product types that a user has access to.
        /// </summary>
        /// <remarks>
        /// Retrieves a list of product types that have been specified across all documents the user has access to
        /// </remarks>
        /// <exception cref="FactSet.SDK.AnalyticsDatastore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tagFilterModel">Request body to apply when filtering on this end point. Pagination controls are applied through the pagination object and additional tag filters can be used by supplying the tag name and its value in the tags object.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ProductTypeListResponse</returns>
        System.Threading.Tasks.Task<ProductTypeListResponse> GetProductTypesAsync(TagFilterModel tagFilterModel, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Gets a list of product types that a user has access to.
        /// </summary>
        /// <remarks>
        /// Retrieves a list of product types that have been specified across all documents the user has access to
        /// </remarks>
        /// <exception cref="FactSet.SDK.AnalyticsDatastore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tagFilterModel">Request body to apply when filtering on this end point. Pagination controls are applied through the pagination object and additional tag filters can be used by supplying the tag name and its value in the tags object.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ProductTypeListResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ProductTypeListResponse>> GetProductTypesWithHttpInfoAsync(TagFilterModel tagFilterModel, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get a single tag definition based on its name
        /// </summary>
        /// <remarks>
        /// Retrieve a tag definition based on its name
        /// </remarks>
        /// <exception cref="FactSet.SDK.AnalyticsDatastore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The name of the tag</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TagResponse</returns>
        System.Threading.Tasks.Task<TagResponse> GetSingleTagEndPointAsync(string name, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get a single tag definition based on its name
        /// </summary>
        /// <remarks>
        /// Retrieve a tag definition based on its name
        /// </remarks>
        /// <exception cref="FactSet.SDK.AnalyticsDatastore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The name of the tag</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TagResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TagResponse>> GetSingleTagEndPointWithHttpInfoAsync(string name, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Gets a list of tag values for the given name
        /// </summary>
        /// <remarks>
        /// Returns a list of tag values depending on the name provided. Supports filtering on additional tag name value pairs, which operates as an &#39;AND&#39; where the Document must have the tag name specified in the path AND the filtered parameter.
        /// </remarks>
        /// <exception cref="FactSet.SDK.AnalyticsDatastore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The name of the tag</param>
        /// <param name="tagFilterModel">Request body to apply when filtering on this end point. Pagination controls are applied through the pagination object and additional tag filters can be used by supplying the tag name and its value in the tags object.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TagValuesListResponse</returns>
        System.Threading.Tasks.Task<TagValuesListResponse> GetTagValuesEndPointAsync(string name, TagFilterModel tagFilterModel, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Gets a list of tag values for the given name
        /// </summary>
        /// <remarks>
        /// Returns a list of tag values depending on the name provided. Supports filtering on additional tag name value pairs, which operates as an &#39;AND&#39; where the Document must have the tag name specified in the path AND the filtered parameter.
        /// </remarks>
        /// <exception cref="FactSet.SDK.AnalyticsDatastore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The name of the tag</param>
        /// <param name="tagFilterModel">Request body to apply when filtering on this end point. Pagination controls are applied through the pagination object and additional tag filters can be used by supplying the tag name and its value in the tags object.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TagValuesListResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TagValuesListResponse>> GetTagValuesEndPointWithHttpInfoAsync(string name, TagFilterModel tagFilterModel, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Gets a list of tag definitions for the user.
        /// </summary>
        /// <remarks>
        /// Tag definitions consist of a name and a type. Use this end point to see a list of pre-existing tags that can be used to filter on the Documents end point.
        /// </remarks>
        /// <exception cref="FactSet.SDK.AnalyticsDatastore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="paginationOffset">The offset integer on where to begin paginating (optional, default to 0)</param>
        /// <param name="paginationLimit">The limit of records to return when paginating (optional, default to 50)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TagListResponse</returns>
        System.Threading.Tasks.Task<TagListResponse> GetTagsEndPointAsync(int? paginationOffset = default(int?), int? paginationLimit = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Gets a list of tag definitions for the user.
        /// </summary>
        /// <remarks>
        /// Tag definitions consist of a name and a type. Use this end point to see a list of pre-existing tags that can be used to filter on the Documents end point.
        /// </remarks>
        /// <exception cref="FactSet.SDK.AnalyticsDatastore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="paginationOffset">The offset integer on where to begin paginating (optional, default to 0)</param>
        /// <param name="paginationLimit">The limit of records to return when paginating (optional, default to 50)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TagListResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TagListResponse>> GetTagsEndPointWithHttpInfoAsync(int? paginationOffset = default(int?), int? paginationLimit = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IDocumentsApi : IDocumentsApiSync, IDocumentsApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class DocumentsApi : IDocumentsApi
    {
        private FactSet.SDK.AnalyticsDatastore.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        # region Response Type Disctionaries
        
        private static readonly Dictionary<HttpStatusCode, System.Type> GetDocumentsEndPointResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)200, typeof(DocumentListResponse) },
        };

        private static readonly Dictionary<HttpStatusCode, System.Type> GetProductTypesResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)200, typeof(ProductTypeListResponse) },
        };

        private static readonly Dictionary<HttpStatusCode, System.Type> GetSingleTagEndPointResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)200, typeof(TagResponse) },
        };

        private static readonly Dictionary<HttpStatusCode, System.Type> GetTagValuesEndPointResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)200, typeof(TagValuesListResponse) },
        };

        private static readonly Dictionary<HttpStatusCode, System.Type> GetTagsEndPointResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)200, typeof(TagListResponse) },
        };

        # endregion Response Type Disctionaries

        # region Api Response Objects
        

        # endregion Api Response Objects

        /// <summary>
        /// Initializes a new instance of the <see cref="DocumentsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public DocumentsApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DocumentsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public DocumentsApi(string basePath)
        {
            this.Configuration = FactSet.SDK.AnalyticsDatastore.Client.Configuration.MergeConfigurations(
                FactSet.SDK.AnalyticsDatastore.Client.GlobalConfiguration.Instance,
                new FactSet.SDK.AnalyticsDatastore.Client.Configuration { BasePath = basePath }
            );
            this.Client = new FactSet.SDK.AnalyticsDatastore.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new FactSet.SDK.AnalyticsDatastore.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = FactSet.SDK.AnalyticsDatastore.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DocumentsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public DocumentsApi(FactSet.SDK.AnalyticsDatastore.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = FactSet.SDK.AnalyticsDatastore.Client.Configuration.MergeConfigurations(
                FactSet.SDK.AnalyticsDatastore.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new FactSet.SDK.AnalyticsDatastore.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new FactSet.SDK.AnalyticsDatastore.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = FactSet.SDK.AnalyticsDatastore.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DocumentsApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public DocumentsApi(FactSet.SDK.AnalyticsDatastore.Client.ISynchronousClient client, FactSet.SDK.AnalyticsDatastore.Client.IAsynchronousClient asyncClient, FactSet.SDK.AnalyticsDatastore.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = FactSet.SDK.AnalyticsDatastore.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public FactSet.SDK.AnalyticsDatastore.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public FactSet.SDK.AnalyticsDatastore.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public FactSet.SDK.AnalyticsDatastore.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public FactSet.SDK.AnalyticsDatastore.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets a list of Documents that a user has access to. Retrieves metadata around documents stored in the Analytics Datastore Service. Each Document will have a &#39;url&#39; property which will act as a re-direct to the underlying document data    This end point supports pagination and filtering through the use of the request body listed below.    To discover what tags are available to filter on, see GET /tags and GET /tags/{name}/values to retrieve these filter values.    Similarly, to discover what product types are available to filter on, see POST /product-types/search to retrieve a list of product types.
        /// </summary>
        /// <exception cref="FactSet.SDK.AnalyticsDatastore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentRequest">Example request of a filtered Documents search call</param>
        /// <returns>DocumentListResponse</returns>
        public DocumentListResponse GetDocumentsEndPoint(DocumentRequest documentRequest)
        {
            var localVarResponse = GetDocumentsEndPointWithHttpInfo(documentRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Gets a list of Documents that a user has access to. Retrieves metadata around documents stored in the Analytics Datastore Service. Each Document will have a &#39;url&#39; property which will act as a re-direct to the underlying document data    This end point supports pagination and filtering through the use of the request body listed below.    To discover what tags are available to filter on, see GET /tags and GET /tags/{name}/values to retrieve these filter values.    Similarly, to discover what product types are available to filter on, see POST /product-types/search to retrieve a list of product types.
        /// </summary>
        /// <exception cref="FactSet.SDK.AnalyticsDatastore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentRequest">Example request of a filtered Documents search call</param>
        /// <returns>ApiResponse of DocumentListResponse</returns>
        public ApiResponse<DocumentListResponse> GetDocumentsEndPointWithHttpInfo(DocumentRequest documentRequest)
        {
            // verify the required parameter 'documentRequest' is set
            if (documentRequest == null)
            {
                throw new FactSet.SDK.AnalyticsDatastore.Client.ApiException(400, "Missing required parameter 'documentRequest' when calling DocumentsApi->GetDocumentsEndPoint");
            }

            FactSet.SDK.AnalyticsDatastore.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.AnalyticsDatastore.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.AnalyticsDatastore.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.AnalyticsDatastore.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = documentRequest;

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.AnalyticsDatastore.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = GetDocumentsEndPointResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Post<
            DocumentListResponse>("/analytics/pub-datastore/tag-search/v1/documents/search", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetDocumentsEndPoint", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// Gets a list of Documents that a user has access to. Retrieves metadata around documents stored in the Analytics Datastore Service. Each Document will have a &#39;url&#39; property which will act as a re-direct to the underlying document data    This end point supports pagination and filtering through the use of the request body listed below.    To discover what tags are available to filter on, see GET /tags and GET /tags/{name}/values to retrieve these filter values.    Similarly, to discover what product types are available to filter on, see POST /product-types/search to retrieve a list of product types.
        /// </summary>
        /// <exception cref="FactSet.SDK.AnalyticsDatastore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentRequest">Example request of a filtered Documents search call</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DocumentListResponse</returns>
        public async System.Threading.Tasks.Task<DocumentListResponse>GetDocumentsEndPointAsync(DocumentRequest documentRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await GetDocumentsEndPointWithHttpInfoAsync(documentRequest, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Gets a list of Documents that a user has access to. Retrieves metadata around documents stored in the Analytics Datastore Service. Each Document will have a &#39;url&#39; property which will act as a re-direct to the underlying document data    This end point supports pagination and filtering through the use of the request body listed below.    To discover what tags are available to filter on, see GET /tags and GET /tags/{name}/values to retrieve these filter values.    Similarly, to discover what product types are available to filter on, see POST /product-types/search to retrieve a list of product types.
        /// </summary>
        /// <exception cref="FactSet.SDK.AnalyticsDatastore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentRequest">Example request of a filtered Documents search call</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DocumentListResponse)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<DocumentListResponse>> GetDocumentsEndPointWithHttpInfoAsync(DocumentRequest documentRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'documentRequest' is set
            if (documentRequest == null)
            {
                throw new FactSet.SDK.AnalyticsDatastore.Client.ApiException(400, "Missing required parameter 'documentRequest' when calling DocumentsApi->GetDocumentsEndPoint");
            }


            FactSet.SDK.AnalyticsDatastore.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.AnalyticsDatastore.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.AnalyticsDatastore.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.AnalyticsDatastore.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = documentRequest;

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.AnalyticsDatastore.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = GetDocumentsEndPointResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<DocumentListResponse>("/analytics/pub-datastore/tag-search/v1/documents/search", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetDocumentsEndPoint", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Gets a list of product types that a user has access to. Retrieves a list of product types that have been specified across all documents the user has access to
        /// </summary>
        /// <exception cref="FactSet.SDK.AnalyticsDatastore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tagFilterModel">Request body to apply when filtering on this end point. Pagination controls are applied through the pagination object and additional tag filters can be used by supplying the tag name and its value in the tags object.</param>
        /// <returns>ProductTypeListResponse</returns>
        public ProductTypeListResponse GetProductTypes(TagFilterModel tagFilterModel)
        {
            var localVarResponse = GetProductTypesWithHttpInfo(tagFilterModel);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Gets a list of product types that a user has access to. Retrieves a list of product types that have been specified across all documents the user has access to
        /// </summary>
        /// <exception cref="FactSet.SDK.AnalyticsDatastore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tagFilterModel">Request body to apply when filtering on this end point. Pagination controls are applied through the pagination object and additional tag filters can be used by supplying the tag name and its value in the tags object.</param>
        /// <returns>ApiResponse of ProductTypeListResponse</returns>
        public ApiResponse<ProductTypeListResponse> GetProductTypesWithHttpInfo(TagFilterModel tagFilterModel)
        {
            // verify the required parameter 'tagFilterModel' is set
            if (tagFilterModel == null)
            {
                throw new FactSet.SDK.AnalyticsDatastore.Client.ApiException(400, "Missing required parameter 'tagFilterModel' when calling DocumentsApi->GetProductTypes");
            }

            FactSet.SDK.AnalyticsDatastore.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.AnalyticsDatastore.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.AnalyticsDatastore.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.AnalyticsDatastore.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = tagFilterModel;

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.AnalyticsDatastore.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = GetProductTypesResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Post<
            ProductTypeListResponse>("/analytics/pub-datastore/tag-search/v1/product-types/search", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetProductTypes", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// Gets a list of product types that a user has access to. Retrieves a list of product types that have been specified across all documents the user has access to
        /// </summary>
        /// <exception cref="FactSet.SDK.AnalyticsDatastore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tagFilterModel">Request body to apply when filtering on this end point. Pagination controls are applied through the pagination object and additional tag filters can be used by supplying the tag name and its value in the tags object.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ProductTypeListResponse</returns>
        public async System.Threading.Tasks.Task<ProductTypeListResponse>GetProductTypesAsync(TagFilterModel tagFilterModel, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await GetProductTypesWithHttpInfoAsync(tagFilterModel, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Gets a list of product types that a user has access to. Retrieves a list of product types that have been specified across all documents the user has access to
        /// </summary>
        /// <exception cref="FactSet.SDK.AnalyticsDatastore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tagFilterModel">Request body to apply when filtering on this end point. Pagination controls are applied through the pagination object and additional tag filters can be used by supplying the tag name and its value in the tags object.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ProductTypeListResponse)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<ProductTypeListResponse>> GetProductTypesWithHttpInfoAsync(TagFilterModel tagFilterModel, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'tagFilterModel' is set
            if (tagFilterModel == null)
            {
                throw new FactSet.SDK.AnalyticsDatastore.Client.ApiException(400, "Missing required parameter 'tagFilterModel' when calling DocumentsApi->GetProductTypes");
            }


            FactSet.SDK.AnalyticsDatastore.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.AnalyticsDatastore.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.AnalyticsDatastore.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.AnalyticsDatastore.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = tagFilterModel;

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.AnalyticsDatastore.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = GetProductTypesResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ProductTypeListResponse>("/analytics/pub-datastore/tag-search/v1/product-types/search", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetProductTypes", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get a single tag definition based on its name Retrieve a tag definition based on its name
        /// </summary>
        /// <exception cref="FactSet.SDK.AnalyticsDatastore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The name of the tag</param>
        /// <returns>TagResponse</returns>
        public TagResponse GetSingleTagEndPoint(string name)
        {
            var localVarResponse = GetSingleTagEndPointWithHttpInfo(name);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get a single tag definition based on its name Retrieve a tag definition based on its name
        /// </summary>
        /// <exception cref="FactSet.SDK.AnalyticsDatastore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The name of the tag</param>
        /// <returns>ApiResponse of TagResponse</returns>
        public ApiResponse<TagResponse> GetSingleTagEndPointWithHttpInfo(string name)
        {
            // verify the required parameter 'name' is set
            if (name == null)
            {
                throw new FactSet.SDK.AnalyticsDatastore.Client.ApiException(400, "Missing required parameter 'name' when calling DocumentsApi->GetSingleTagEndPoint");
            }

            FactSet.SDK.AnalyticsDatastore.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.AnalyticsDatastore.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.AnalyticsDatastore.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.AnalyticsDatastore.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("name", FactSet.SDK.AnalyticsDatastore.Client.ClientUtils.ParameterToString(name)); // path parameter

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.AnalyticsDatastore.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = GetSingleTagEndPointResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Get<
            TagResponse>("/analytics/pub-datastore/tag-search/v1/tags/{name}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetSingleTagEndPoint", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// Get a single tag definition based on its name Retrieve a tag definition based on its name
        /// </summary>
        /// <exception cref="FactSet.SDK.AnalyticsDatastore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The name of the tag</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TagResponse</returns>
        public async System.Threading.Tasks.Task<TagResponse>GetSingleTagEndPointAsync(string name, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await GetSingleTagEndPointWithHttpInfoAsync(name, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get a single tag definition based on its name Retrieve a tag definition based on its name
        /// </summary>
        /// <exception cref="FactSet.SDK.AnalyticsDatastore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The name of the tag</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TagResponse)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<TagResponse>> GetSingleTagEndPointWithHttpInfoAsync(string name, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'name' is set
            if (name == null)
            {
                throw new FactSet.SDK.AnalyticsDatastore.Client.ApiException(400, "Missing required parameter 'name' when calling DocumentsApi->GetSingleTagEndPoint");
            }


            FactSet.SDK.AnalyticsDatastore.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.AnalyticsDatastore.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.AnalyticsDatastore.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.AnalyticsDatastore.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("name", FactSet.SDK.AnalyticsDatastore.Client.ClientUtils.ParameterToString(name)); // path parameter

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.AnalyticsDatastore.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = GetSingleTagEndPointResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<TagResponse>("/analytics/pub-datastore/tag-search/v1/tags/{name}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetSingleTagEndPoint", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Gets a list of tag values for the given name Returns a list of tag values depending on the name provided. Supports filtering on additional tag name value pairs, which operates as an &#39;AND&#39; where the Document must have the tag name specified in the path AND the filtered parameter.
        /// </summary>
        /// <exception cref="FactSet.SDK.AnalyticsDatastore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The name of the tag</param>
        /// <param name="tagFilterModel">Request body to apply when filtering on this end point. Pagination controls are applied through the pagination object and additional tag filters can be used by supplying the tag name and its value in the tags object.</param>
        /// <returns>TagValuesListResponse</returns>
        public TagValuesListResponse GetTagValuesEndPoint(string name, TagFilterModel tagFilterModel)
        {
            var localVarResponse = GetTagValuesEndPointWithHttpInfo(name, tagFilterModel);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Gets a list of tag values for the given name Returns a list of tag values depending on the name provided. Supports filtering on additional tag name value pairs, which operates as an &#39;AND&#39; where the Document must have the tag name specified in the path AND the filtered parameter.
        /// </summary>
        /// <exception cref="FactSet.SDK.AnalyticsDatastore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The name of the tag</param>
        /// <param name="tagFilterModel">Request body to apply when filtering on this end point. Pagination controls are applied through the pagination object and additional tag filters can be used by supplying the tag name and its value in the tags object.</param>
        /// <returns>ApiResponse of TagValuesListResponse</returns>
        public ApiResponse<TagValuesListResponse> GetTagValuesEndPointWithHttpInfo(string name, TagFilterModel tagFilterModel)
        {
            // verify the required parameter 'name' is set
            if (name == null)
            {
                throw new FactSet.SDK.AnalyticsDatastore.Client.ApiException(400, "Missing required parameter 'name' when calling DocumentsApi->GetTagValuesEndPoint");
            }

            // verify the required parameter 'tagFilterModel' is set
            if (tagFilterModel == null)
            {
                throw new FactSet.SDK.AnalyticsDatastore.Client.ApiException(400, "Missing required parameter 'tagFilterModel' when calling DocumentsApi->GetTagValuesEndPoint");
            }

            FactSet.SDK.AnalyticsDatastore.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.AnalyticsDatastore.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.AnalyticsDatastore.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.AnalyticsDatastore.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("name", FactSet.SDK.AnalyticsDatastore.Client.ClientUtils.ParameterToString(name)); // path parameter
            localVarRequestOptions.Data = tagFilterModel;

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.AnalyticsDatastore.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = GetTagValuesEndPointResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Post<
            TagValuesListResponse>("/analytics/pub-datastore/tag-search/v1/tags/{name}/values", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetTagValuesEndPoint", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// Gets a list of tag values for the given name Returns a list of tag values depending on the name provided. Supports filtering on additional tag name value pairs, which operates as an &#39;AND&#39; where the Document must have the tag name specified in the path AND the filtered parameter.
        /// </summary>
        /// <exception cref="FactSet.SDK.AnalyticsDatastore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The name of the tag</param>
        /// <param name="tagFilterModel">Request body to apply when filtering on this end point. Pagination controls are applied through the pagination object and additional tag filters can be used by supplying the tag name and its value in the tags object.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TagValuesListResponse</returns>
        public async System.Threading.Tasks.Task<TagValuesListResponse>GetTagValuesEndPointAsync(string name, TagFilterModel tagFilterModel, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await GetTagValuesEndPointWithHttpInfoAsync(name, tagFilterModel, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Gets a list of tag values for the given name Returns a list of tag values depending on the name provided. Supports filtering on additional tag name value pairs, which operates as an &#39;AND&#39; where the Document must have the tag name specified in the path AND the filtered parameter.
        /// </summary>
        /// <exception cref="FactSet.SDK.AnalyticsDatastore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The name of the tag</param>
        /// <param name="tagFilterModel">Request body to apply when filtering on this end point. Pagination controls are applied through the pagination object and additional tag filters can be used by supplying the tag name and its value in the tags object.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TagValuesListResponse)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<TagValuesListResponse>> GetTagValuesEndPointWithHttpInfoAsync(string name, TagFilterModel tagFilterModel, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'name' is set
            if (name == null)
            {
                throw new FactSet.SDK.AnalyticsDatastore.Client.ApiException(400, "Missing required parameter 'name' when calling DocumentsApi->GetTagValuesEndPoint");
            }

            // verify the required parameter 'tagFilterModel' is set
            if (tagFilterModel == null)
            {
                throw new FactSet.SDK.AnalyticsDatastore.Client.ApiException(400, "Missing required parameter 'tagFilterModel' when calling DocumentsApi->GetTagValuesEndPoint");
            }


            FactSet.SDK.AnalyticsDatastore.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.AnalyticsDatastore.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.AnalyticsDatastore.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.AnalyticsDatastore.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("name", FactSet.SDK.AnalyticsDatastore.Client.ClientUtils.ParameterToString(name)); // path parameter
            localVarRequestOptions.Data = tagFilterModel;

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.AnalyticsDatastore.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = GetTagValuesEndPointResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<TagValuesListResponse>("/analytics/pub-datastore/tag-search/v1/tags/{name}/values", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetTagValuesEndPoint", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Gets a list of tag definitions for the user. Tag definitions consist of a name and a type. Use this end point to see a list of pre-existing tags that can be used to filter on the Documents end point.
        /// </summary>
        /// <exception cref="FactSet.SDK.AnalyticsDatastore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="paginationOffset">The offset integer on where to begin paginating (optional, default to 0)</param>
        /// <param name="paginationLimit">The limit of records to return when paginating (optional, default to 50)</param>
        /// <returns>TagListResponse</returns>
        public TagListResponse GetTagsEndPoint(int? paginationOffset = default(int?), int? paginationLimit = default(int?))
        {
            var localVarResponse = GetTagsEndPointWithHttpInfo(paginationOffset, paginationLimit);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Gets a list of tag definitions for the user. Tag definitions consist of a name and a type. Use this end point to see a list of pre-existing tags that can be used to filter on the Documents end point.
        /// </summary>
        /// <exception cref="FactSet.SDK.AnalyticsDatastore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="paginationOffset">The offset integer on where to begin paginating (optional, default to 0)</param>
        /// <param name="paginationLimit">The limit of records to return when paginating (optional, default to 50)</param>
        /// <returns>ApiResponse of TagListResponse</returns>
        public ApiResponse<TagListResponse> GetTagsEndPointWithHttpInfo(int? paginationOffset = default(int?), int? paginationLimit = default(int?))
        {
            FactSet.SDK.AnalyticsDatastore.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.AnalyticsDatastore.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.AnalyticsDatastore.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.AnalyticsDatastore.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (paginationOffset != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.AnalyticsDatastore.Client.ClientUtils.ParameterToMultiMap("", "_paginationOffset", paginationOffset));
            }
            if (paginationLimit != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.AnalyticsDatastore.Client.ClientUtils.ParameterToMultiMap("", "_paginationLimit", paginationLimit));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.AnalyticsDatastore.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = GetTagsEndPointResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Get<
            TagListResponse>("/analytics/pub-datastore/tag-search/v1/tags", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetTagsEndPoint", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// Gets a list of tag definitions for the user. Tag definitions consist of a name and a type. Use this end point to see a list of pre-existing tags that can be used to filter on the Documents end point.
        /// </summary>
        /// <exception cref="FactSet.SDK.AnalyticsDatastore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="paginationOffset">The offset integer on where to begin paginating (optional, default to 0)</param>
        /// <param name="paginationLimit">The limit of records to return when paginating (optional, default to 50)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TagListResponse</returns>
        public async System.Threading.Tasks.Task<TagListResponse>GetTagsEndPointAsync(int? paginationOffset = default(int?), int? paginationLimit = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await GetTagsEndPointWithHttpInfoAsync(paginationOffset, paginationLimit, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Gets a list of tag definitions for the user. Tag definitions consist of a name and a type. Use this end point to see a list of pre-existing tags that can be used to filter on the Documents end point.
        /// </summary>
        /// <exception cref="FactSet.SDK.AnalyticsDatastore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="paginationOffset">The offset integer on where to begin paginating (optional, default to 0)</param>
        /// <param name="paginationLimit">The limit of records to return when paginating (optional, default to 50)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TagListResponse)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<TagListResponse>> GetTagsEndPointWithHttpInfoAsync(int? paginationOffset = default(int?), int? paginationLimit = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            FactSet.SDK.AnalyticsDatastore.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.AnalyticsDatastore.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.AnalyticsDatastore.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.AnalyticsDatastore.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (paginationOffset != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.AnalyticsDatastore.Client.ClientUtils.ParameterToMultiMap("", "_paginationOffset", paginationOffset));
            }
            if (paginationLimit != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.AnalyticsDatastore.Client.ClientUtils.ParameterToMultiMap("", "_paginationLimit", paginationLimit));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.AnalyticsDatastore.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = GetTagsEndPointResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<TagListResponse>("/analytics/pub-datastore/tag-search/v1/tags", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetTagsEndPoint", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
