/*
 * StreetAccount News API
 *
 * The StreetAccount News API provides access to FactSet's proprietary news provider, StreetAccount. StreetAccount, is a premium real-time market intelligence news service that delivers comprehensive U.S., Canadian, and European coverage (and expanding Asia coverage). All possible sources for corporate news are scanned and key story facts are highlighted and presented in an easy-to-read format.  **StreetAccount Filters, Headlines, and Views:**  These endpoints allow for the retrieval of news headlines using filters such as Watchlists/Indices/Tickers, Company Filters, Market Topics, Regions, and Sectors.  Headlines can also be retrieved based on saved views within the Workstation.  **StreetAccount Historical Stories:**  These endpoints provide access to historical StreetAccount (SA) news. The API delivers SA stories in XML format based on user-specified date input parameters. Output files are securely available to users through a URL. This API has three endpoints: Request Files, Check Status, and Get Files.  Please note that this API only supports adhoc requests for historical files and does not support real-time files. If real-time push is required, consider using other methods such as SFTP, QNT account, or Azure Storage. Both historical and real-time Street Account news can be delivered via SFTP, QNT account, or Azure Storage.  The files delivered contain both metadata and content body, eliminating the need for multiple requests through multiple services to retrieve all the information.
 *
 * The version of the OpenAPI document: 0.1.0
 * Contact: api@factset.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using FactSet.SDK.StreetAccountNews.Client;
using FactSet.SDK.StreetAccountNews.Model;
using FactSet.SDK.Utils.Authentication;

namespace FactSet.SDK.StreetAccountNews.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IStreetAccountHistoricalStoriesApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Returns the status and percentage of completion for the requested jobID
        /// </summary>
        /// <remarks>
        /// Need to plug-in the jobID from /request-files into /check-status endpoint
        /// </remarks>
        /// <exception cref="FactSet.SDK.StreetAccountNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobID">jobID returned by the request-files endpoint to know the status and percentDone</param>
        /// <param name="paginationLimit">Specifies the maximum number of results to return per result (optional)</param>
        /// <param name="paginationOffset">Specifies the starting point for pagination. This parameter is used to identify the   beginning of next set of results (optional)</param>
        /// <returns>CheckstatusResponse</returns>
        CheckstatusResponse StreetaccountHistoricalCheckStatusGet(string jobID, int? paginationLimit = default(int?), int? paginationOffset = default(int?));

        /// <summary>
        /// Returns the status and percentage of completion for the requested jobID
        /// </summary>
        /// <remarks>
        /// Need to plug-in the jobID from /request-files into /check-status endpoint
        /// </remarks>
        /// <exception cref="FactSet.SDK.StreetAccountNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobID">jobID returned by the request-files endpoint to know the status and percentDone</param>
        /// <param name="paginationLimit">Specifies the maximum number of results to return per result (optional)</param>
        /// <param name="paginationOffset">Specifies the starting point for pagination. This parameter is used to identify the   beginning of next set of results (optional)</param>
        /// <returns>ApiResponse of CheckstatusResponse</returns>
        ApiResponse<CheckstatusResponse> StreetaccountHistoricalCheckStatusGetWithHttpInfo(string jobID, int? paginationLimit = default(int?), int? paginationOffset = default(int?));
        /// <summary>
        /// Returns the StreetAccount XML files for the specified date range
        /// </summary>
        /// <remarks>
        /// Need to plug-in the jobID from /check-status into /get-files endpoint
        /// </remarks>
        /// <exception cref="FactSet.SDK.StreetAccountNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobID">jobID returned by the request-files endpoint to collect the results of the query</param>
        /// <param name="paginationLimit">Specifies the maximum number of results to return per result (optional)</param>
        /// <param name="paginationOffset">Specifies the starting point for pagination. This parameter is used to identify the   beginning of next set of results (optional)</param>
        /// <returns>GetfilesResponse</returns>
        GetfilesResponse StreetaccountHistoricalGetFilesGet(string jobID, int? paginationLimit = default(int?), int? paginationOffset = default(int?));

        /// <summary>
        /// Returns the StreetAccount XML files for the specified date range
        /// </summary>
        /// <remarks>
        /// Need to plug-in the jobID from /check-status into /get-files endpoint
        /// </remarks>
        /// <exception cref="FactSet.SDK.StreetAccountNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobID">jobID returned by the request-files endpoint to collect the results of the query</param>
        /// <param name="paginationLimit">Specifies the maximum number of results to return per result (optional)</param>
        /// <param name="paginationOffset">Specifies the starting point for pagination. This parameter is used to identify the   beginning of next set of results (optional)</param>
        /// <returns>ApiResponse of GetfilesResponse</returns>
        ApiResponse<GetfilesResponse> StreetaccountHistoricalGetFilesGetWithHttpInfo(string jobID, int? paginationLimit = default(int?), int? paginationOffset = default(int?));
        /// <summary>
        /// Returns the jobID
        /// </summary>
        /// <remarks>
        /// Give the startDate and endDate parameters as request parameters in the /request-files endpoint, it returns the jobID. startDate and endDate should be in YYYY-MM-DDTHH:MM:SSZ format. This API only supports adhoc requests to retrieve historical files and does not support real-time files and if you interested in require real-time push should consider the other three methods (pushed via SFTP, to QNT account, or your Azure Storage). Per API request able to query till 2 years of data
        /// </remarks>
        /// <exception cref="FactSet.SDK.StreetAccountNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startDate">Date from which data is required. Should be YYYY-MM-DDTHH:MM:SSZ format</param>
        /// <param name="endDate">The date until which the data is to be fetched. Should be YYYY-MM-DDTHH:MM:SSZ format</param>
        /// <returns>RequestfilesResponse</returns>
        RequestfilesResponse StreetaccountHistoricalRequestFilesGet(DateTime startDate, DateTime endDate);

        /// <summary>
        /// Returns the jobID
        /// </summary>
        /// <remarks>
        /// Give the startDate and endDate parameters as request parameters in the /request-files endpoint, it returns the jobID. startDate and endDate should be in YYYY-MM-DDTHH:MM:SSZ format. This API only supports adhoc requests to retrieve historical files and does not support real-time files and if you interested in require real-time push should consider the other three methods (pushed via SFTP, to QNT account, or your Azure Storage). Per API request able to query till 2 years of data
        /// </remarks>
        /// <exception cref="FactSet.SDK.StreetAccountNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startDate">Date from which data is required. Should be YYYY-MM-DDTHH:MM:SSZ format</param>
        /// <param name="endDate">The date until which the data is to be fetched. Should be YYYY-MM-DDTHH:MM:SSZ format</param>
        /// <returns>ApiResponse of RequestfilesResponse</returns>
        ApiResponse<RequestfilesResponse> StreetaccountHistoricalRequestFilesGetWithHttpInfo(DateTime startDate, DateTime endDate);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IStreetAccountHistoricalStoriesApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Returns the status and percentage of completion for the requested jobID
        /// </summary>
        /// <remarks>
        /// Need to plug-in the jobID from /request-files into /check-status endpoint
        /// </remarks>
        /// <exception cref="FactSet.SDK.StreetAccountNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobID">jobID returned by the request-files endpoint to know the status and percentDone</param>
        /// <param name="paginationLimit">Specifies the maximum number of results to return per result (optional)</param>
        /// <param name="paginationOffset">Specifies the starting point for pagination. This parameter is used to identify the   beginning of next set of results (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CheckstatusResponse</returns>
        System.Threading.Tasks.Task<CheckstatusResponse> StreetaccountHistoricalCheckStatusGetAsync(string jobID, int? paginationLimit = default(int?), int? paginationOffset = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Returns the status and percentage of completion for the requested jobID
        /// </summary>
        /// <remarks>
        /// Need to plug-in the jobID from /request-files into /check-status endpoint
        /// </remarks>
        /// <exception cref="FactSet.SDK.StreetAccountNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobID">jobID returned by the request-files endpoint to know the status and percentDone</param>
        /// <param name="paginationLimit">Specifies the maximum number of results to return per result (optional)</param>
        /// <param name="paginationOffset">Specifies the starting point for pagination. This parameter is used to identify the   beginning of next set of results (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CheckstatusResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CheckstatusResponse>> StreetaccountHistoricalCheckStatusGetWithHttpInfoAsync(string jobID, int? paginationLimit = default(int?), int? paginationOffset = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Returns the StreetAccount XML files for the specified date range
        /// </summary>
        /// <remarks>
        /// Need to plug-in the jobID from /check-status into /get-files endpoint
        /// </remarks>
        /// <exception cref="FactSet.SDK.StreetAccountNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobID">jobID returned by the request-files endpoint to collect the results of the query</param>
        /// <param name="paginationLimit">Specifies the maximum number of results to return per result (optional)</param>
        /// <param name="paginationOffset">Specifies the starting point for pagination. This parameter is used to identify the   beginning of next set of results (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetfilesResponse</returns>
        System.Threading.Tasks.Task<GetfilesResponse> StreetaccountHistoricalGetFilesGetAsync(string jobID, int? paginationLimit = default(int?), int? paginationOffset = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Returns the StreetAccount XML files for the specified date range
        /// </summary>
        /// <remarks>
        /// Need to plug-in the jobID from /check-status into /get-files endpoint
        /// </remarks>
        /// <exception cref="FactSet.SDK.StreetAccountNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobID">jobID returned by the request-files endpoint to collect the results of the query</param>
        /// <param name="paginationLimit">Specifies the maximum number of results to return per result (optional)</param>
        /// <param name="paginationOffset">Specifies the starting point for pagination. This parameter is used to identify the   beginning of next set of results (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetfilesResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetfilesResponse>> StreetaccountHistoricalGetFilesGetWithHttpInfoAsync(string jobID, int? paginationLimit = default(int?), int? paginationOffset = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Returns the jobID
        /// </summary>
        /// <remarks>
        /// Give the startDate and endDate parameters as request parameters in the /request-files endpoint, it returns the jobID. startDate and endDate should be in YYYY-MM-DDTHH:MM:SSZ format. This API only supports adhoc requests to retrieve historical files and does not support real-time files and if you interested in require real-time push should consider the other three methods (pushed via SFTP, to QNT account, or your Azure Storage). Per API request able to query till 2 years of data
        /// </remarks>
        /// <exception cref="FactSet.SDK.StreetAccountNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startDate">Date from which data is required. Should be YYYY-MM-DDTHH:MM:SSZ format</param>
        /// <param name="endDate">The date until which the data is to be fetched. Should be YYYY-MM-DDTHH:MM:SSZ format</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RequestfilesResponse</returns>
        System.Threading.Tasks.Task<RequestfilesResponse> StreetaccountHistoricalRequestFilesGetAsync(DateTime startDate, DateTime endDate, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Returns the jobID
        /// </summary>
        /// <remarks>
        /// Give the startDate and endDate parameters as request parameters in the /request-files endpoint, it returns the jobID. startDate and endDate should be in YYYY-MM-DDTHH:MM:SSZ format. This API only supports adhoc requests to retrieve historical files and does not support real-time files and if you interested in require real-time push should consider the other three methods (pushed via SFTP, to QNT account, or your Azure Storage). Per API request able to query till 2 years of data
        /// </remarks>
        /// <exception cref="FactSet.SDK.StreetAccountNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startDate">Date from which data is required. Should be YYYY-MM-DDTHH:MM:SSZ format</param>
        /// <param name="endDate">The date until which the data is to be fetched. Should be YYYY-MM-DDTHH:MM:SSZ format</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RequestfilesResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<RequestfilesResponse>> StreetaccountHistoricalRequestFilesGetWithHttpInfoAsync(DateTime startDate, DateTime endDate, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IStreetAccountHistoricalStoriesApi : IStreetAccountHistoricalStoriesApiSync, IStreetAccountHistoricalStoriesApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class StreetAccountHistoricalStoriesApi : IStreetAccountHistoricalStoriesApi
    {
        private FactSet.SDK.StreetAccountNews.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        # region Response Type Disctionaries
        
        private static readonly Dictionary<HttpStatusCode, System.Type> StreetaccountHistoricalCheckStatusGetResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)200, typeof(CheckstatusResponse) },
            { (HttpStatusCode)400, typeof(StreetAccountStatus) },
            { (HttpStatusCode)401, typeof(StreetAccountStatus) },
            { (HttpStatusCode)403, typeof(StreetAccountStatus) },
            { (HttpStatusCode)500, typeof(StreetAccountStatus) },
        };

        private static readonly Dictionary<HttpStatusCode, System.Type> StreetaccountHistoricalGetFilesGetResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)200, typeof(GetfilesResponse) },
            { (HttpStatusCode)400, typeof(StreetAccountStatus) },
            { (HttpStatusCode)401, typeof(StreetAccountStatus) },
            { (HttpStatusCode)403, typeof(StreetAccountStatus) },
            { (HttpStatusCode)500, typeof(StreetAccountStatus) },
        };

        private static readonly Dictionary<HttpStatusCode, System.Type> StreetaccountHistoricalRequestFilesGetResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)200, typeof(RequestfilesResponse) },
            { (HttpStatusCode)400, typeof(StreetAccountStatus) },
            { (HttpStatusCode)401, typeof(StreetAccountStatus) },
            { (HttpStatusCode)403, typeof(StreetAccountStatus) },
            { (HttpStatusCode)500, typeof(StreetAccountStatus) },
        };

        # endregion Response Type Disctionaries

        # region Api Response Objects
        

        # endregion Api Response Objects

        /// <summary>
        /// Initializes a new instance of the <see cref="StreetAccountHistoricalStoriesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public StreetAccountHistoricalStoriesApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="StreetAccountHistoricalStoriesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public StreetAccountHistoricalStoriesApi(string basePath)
        {
            this.Configuration = FactSet.SDK.StreetAccountNews.Client.Configuration.MergeConfigurations(
                FactSet.SDK.StreetAccountNews.Client.GlobalConfiguration.Instance,
                new FactSet.SDK.StreetAccountNews.Client.Configuration { BasePath = basePath }
            );
            this.Client = new FactSet.SDK.StreetAccountNews.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new FactSet.SDK.StreetAccountNews.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = FactSet.SDK.StreetAccountNews.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="StreetAccountHistoricalStoriesApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public StreetAccountHistoricalStoriesApi(FactSet.SDK.StreetAccountNews.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = FactSet.SDK.StreetAccountNews.Client.Configuration.MergeConfigurations(
                FactSet.SDK.StreetAccountNews.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new FactSet.SDK.StreetAccountNews.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new FactSet.SDK.StreetAccountNews.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = FactSet.SDK.StreetAccountNews.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="StreetAccountHistoricalStoriesApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public StreetAccountHistoricalStoriesApi(FactSet.SDK.StreetAccountNews.Client.ISynchronousClient client, FactSet.SDK.StreetAccountNews.Client.IAsynchronousClient asyncClient, FactSet.SDK.StreetAccountNews.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = FactSet.SDK.StreetAccountNews.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public FactSet.SDK.StreetAccountNews.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public FactSet.SDK.StreetAccountNews.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public FactSet.SDK.StreetAccountNews.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public FactSet.SDK.StreetAccountNews.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Returns the status and percentage of completion for the requested jobID Need to plug-in the jobID from /request-files into /check-status endpoint
        /// </summary>
        /// <exception cref="FactSet.SDK.StreetAccountNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobID">jobID returned by the request-files endpoint to know the status and percentDone</param>
        /// <param name="paginationLimit">Specifies the maximum number of results to return per result (optional)</param>
        /// <param name="paginationOffset">Specifies the starting point for pagination. This parameter is used to identify the   beginning of next set of results (optional)</param>
        /// <returns>CheckstatusResponse</returns>
        public CheckstatusResponse StreetaccountHistoricalCheckStatusGet(string jobID, int? paginationLimit = default(int?), int? paginationOffset = default(int?))
        {
            var localVarResponse = StreetaccountHistoricalCheckStatusGetWithHttpInfo(jobID, paginationLimit, paginationOffset);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns the status and percentage of completion for the requested jobID Need to plug-in the jobID from /request-files into /check-status endpoint
        /// </summary>
        /// <exception cref="FactSet.SDK.StreetAccountNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobID">jobID returned by the request-files endpoint to know the status and percentDone</param>
        /// <param name="paginationLimit">Specifies the maximum number of results to return per result (optional)</param>
        /// <param name="paginationOffset">Specifies the starting point for pagination. This parameter is used to identify the   beginning of next set of results (optional)</param>
        /// <returns>ApiResponse of CheckstatusResponse</returns>
        public ApiResponse<CheckstatusResponse> StreetaccountHistoricalCheckStatusGetWithHttpInfo(string jobID, int? paginationLimit = default(int?), int? paginationOffset = default(int?))
        {
            // verify the required parameter 'jobID' is set
            if (jobID == null)
            {
                throw new FactSet.SDK.StreetAccountNews.Client.ApiException(400, "Missing required parameter 'jobID' when calling StreetAccountHistoricalStoriesApi->StreetaccountHistoricalCheckStatusGet");
            }

            FactSet.SDK.StreetAccountNews.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.StreetAccountNews.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.StreetAccountNews.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.StreetAccountNews.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.StreetAccountNews.Client.ClientUtils.ParameterToMultiMap("", "jobID", jobID));
            if (paginationLimit != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.StreetAccountNews.Client.ClientUtils.ParameterToMultiMap("", "_paginationLimit", paginationLimit));
            }
            if (paginationOffset != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.StreetAccountNews.Client.ClientUtils.ParameterToMultiMap("", "_paginationOffset", paginationOffset));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.StreetAccountNews.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = StreetaccountHistoricalCheckStatusGetResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Get<
            CheckstatusResponse>("/streetaccount/historical/check-status", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("StreetaccountHistoricalCheckStatusGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// Returns the status and percentage of completion for the requested jobID Need to plug-in the jobID from /request-files into /check-status endpoint
        /// </summary>
        /// <exception cref="FactSet.SDK.StreetAccountNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobID">jobID returned by the request-files endpoint to know the status and percentDone</param>
        /// <param name="paginationLimit">Specifies the maximum number of results to return per result (optional)</param>
        /// <param name="paginationOffset">Specifies the starting point for pagination. This parameter is used to identify the   beginning of next set of results (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CheckstatusResponse</returns>
        public async System.Threading.Tasks.Task<CheckstatusResponse>StreetaccountHistoricalCheckStatusGetAsync(string jobID, int? paginationLimit = default(int?), int? paginationOffset = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await StreetaccountHistoricalCheckStatusGetWithHttpInfoAsync(jobID, paginationLimit, paginationOffset, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns the status and percentage of completion for the requested jobID Need to plug-in the jobID from /request-files into /check-status endpoint
        /// </summary>
        /// <exception cref="FactSet.SDK.StreetAccountNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobID">jobID returned by the request-files endpoint to know the status and percentDone</param>
        /// <param name="paginationLimit">Specifies the maximum number of results to return per result (optional)</param>
        /// <param name="paginationOffset">Specifies the starting point for pagination. This parameter is used to identify the   beginning of next set of results (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CheckstatusResponse)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<CheckstatusResponse>> StreetaccountHistoricalCheckStatusGetWithHttpInfoAsync(string jobID, int? paginationLimit = default(int?), int? paginationOffset = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'jobID' is set
            if (jobID == null)
            {
                throw new FactSet.SDK.StreetAccountNews.Client.ApiException(400, "Missing required parameter 'jobID' when calling StreetAccountHistoricalStoriesApi->StreetaccountHistoricalCheckStatusGet");
            }


            FactSet.SDK.StreetAccountNews.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.StreetAccountNews.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.StreetAccountNews.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.StreetAccountNews.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.StreetAccountNews.Client.ClientUtils.ParameterToMultiMap("", "jobID", jobID));
            if (paginationLimit != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.StreetAccountNews.Client.ClientUtils.ParameterToMultiMap("", "_paginationLimit", paginationLimit));
            }
            if (paginationOffset != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.StreetAccountNews.Client.ClientUtils.ParameterToMultiMap("", "_paginationOffset", paginationOffset));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.StreetAccountNews.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = StreetaccountHistoricalCheckStatusGetResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<CheckstatusResponse>("/streetaccount/historical/check-status", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("StreetaccountHistoricalCheckStatusGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Returns the StreetAccount XML files for the specified date range Need to plug-in the jobID from /check-status into /get-files endpoint
        /// </summary>
        /// <exception cref="FactSet.SDK.StreetAccountNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobID">jobID returned by the request-files endpoint to collect the results of the query</param>
        /// <param name="paginationLimit">Specifies the maximum number of results to return per result (optional)</param>
        /// <param name="paginationOffset">Specifies the starting point for pagination. This parameter is used to identify the   beginning of next set of results (optional)</param>
        /// <returns>GetfilesResponse</returns>
        public GetfilesResponse StreetaccountHistoricalGetFilesGet(string jobID, int? paginationLimit = default(int?), int? paginationOffset = default(int?))
        {
            var localVarResponse = StreetaccountHistoricalGetFilesGetWithHttpInfo(jobID, paginationLimit, paginationOffset);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns the StreetAccount XML files for the specified date range Need to plug-in the jobID from /check-status into /get-files endpoint
        /// </summary>
        /// <exception cref="FactSet.SDK.StreetAccountNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobID">jobID returned by the request-files endpoint to collect the results of the query</param>
        /// <param name="paginationLimit">Specifies the maximum number of results to return per result (optional)</param>
        /// <param name="paginationOffset">Specifies the starting point for pagination. This parameter is used to identify the   beginning of next set of results (optional)</param>
        /// <returns>ApiResponse of GetfilesResponse</returns>
        public ApiResponse<GetfilesResponse> StreetaccountHistoricalGetFilesGetWithHttpInfo(string jobID, int? paginationLimit = default(int?), int? paginationOffset = default(int?))
        {
            // verify the required parameter 'jobID' is set
            if (jobID == null)
            {
                throw new FactSet.SDK.StreetAccountNews.Client.ApiException(400, "Missing required parameter 'jobID' when calling StreetAccountHistoricalStoriesApi->StreetaccountHistoricalGetFilesGet");
            }

            FactSet.SDK.StreetAccountNews.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.StreetAccountNews.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.StreetAccountNews.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.StreetAccountNews.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.StreetAccountNews.Client.ClientUtils.ParameterToMultiMap("", "jobID", jobID));
            if (paginationLimit != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.StreetAccountNews.Client.ClientUtils.ParameterToMultiMap("", "_paginationLimit", paginationLimit));
            }
            if (paginationOffset != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.StreetAccountNews.Client.ClientUtils.ParameterToMultiMap("", "_paginationOffset", paginationOffset));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.StreetAccountNews.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = StreetaccountHistoricalGetFilesGetResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Get<
            GetfilesResponse>("/streetaccount/historical/get-files", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("StreetaccountHistoricalGetFilesGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// Returns the StreetAccount XML files for the specified date range Need to plug-in the jobID from /check-status into /get-files endpoint
        /// </summary>
        /// <exception cref="FactSet.SDK.StreetAccountNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobID">jobID returned by the request-files endpoint to collect the results of the query</param>
        /// <param name="paginationLimit">Specifies the maximum number of results to return per result (optional)</param>
        /// <param name="paginationOffset">Specifies the starting point for pagination. This parameter is used to identify the   beginning of next set of results (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetfilesResponse</returns>
        public async System.Threading.Tasks.Task<GetfilesResponse>StreetaccountHistoricalGetFilesGetAsync(string jobID, int? paginationLimit = default(int?), int? paginationOffset = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await StreetaccountHistoricalGetFilesGetWithHttpInfoAsync(jobID, paginationLimit, paginationOffset, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns the StreetAccount XML files for the specified date range Need to plug-in the jobID from /check-status into /get-files endpoint
        /// </summary>
        /// <exception cref="FactSet.SDK.StreetAccountNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobID">jobID returned by the request-files endpoint to collect the results of the query</param>
        /// <param name="paginationLimit">Specifies the maximum number of results to return per result (optional)</param>
        /// <param name="paginationOffset">Specifies the starting point for pagination. This parameter is used to identify the   beginning of next set of results (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetfilesResponse)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<GetfilesResponse>> StreetaccountHistoricalGetFilesGetWithHttpInfoAsync(string jobID, int? paginationLimit = default(int?), int? paginationOffset = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'jobID' is set
            if (jobID == null)
            {
                throw new FactSet.SDK.StreetAccountNews.Client.ApiException(400, "Missing required parameter 'jobID' when calling StreetAccountHistoricalStoriesApi->StreetaccountHistoricalGetFilesGet");
            }


            FactSet.SDK.StreetAccountNews.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.StreetAccountNews.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.StreetAccountNews.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.StreetAccountNews.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.StreetAccountNews.Client.ClientUtils.ParameterToMultiMap("", "jobID", jobID));
            if (paginationLimit != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.StreetAccountNews.Client.ClientUtils.ParameterToMultiMap("", "_paginationLimit", paginationLimit));
            }
            if (paginationOffset != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.StreetAccountNews.Client.ClientUtils.ParameterToMultiMap("", "_paginationOffset", paginationOffset));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.StreetAccountNews.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = StreetaccountHistoricalGetFilesGetResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<GetfilesResponse>("/streetaccount/historical/get-files", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("StreetaccountHistoricalGetFilesGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Returns the jobID Give the startDate and endDate parameters as request parameters in the /request-files endpoint, it returns the jobID. startDate and endDate should be in YYYY-MM-DDTHH:MM:SSZ format. This API only supports adhoc requests to retrieve historical files and does not support real-time files and if you interested in require real-time push should consider the other three methods (pushed via SFTP, to QNT account, or your Azure Storage). Per API request able to query till 2 years of data
        /// </summary>
        /// <exception cref="FactSet.SDK.StreetAccountNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startDate">Date from which data is required. Should be YYYY-MM-DDTHH:MM:SSZ format</param>
        /// <param name="endDate">The date until which the data is to be fetched. Should be YYYY-MM-DDTHH:MM:SSZ format</param>
        /// <returns>RequestfilesResponse</returns>
        public RequestfilesResponse StreetaccountHistoricalRequestFilesGet(DateTime startDate, DateTime endDate)
        {
            var localVarResponse = StreetaccountHistoricalRequestFilesGetWithHttpInfo(startDate, endDate);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns the jobID Give the startDate and endDate parameters as request parameters in the /request-files endpoint, it returns the jobID. startDate and endDate should be in YYYY-MM-DDTHH:MM:SSZ format. This API only supports adhoc requests to retrieve historical files and does not support real-time files and if you interested in require real-time push should consider the other three methods (pushed via SFTP, to QNT account, or your Azure Storage). Per API request able to query till 2 years of data
        /// </summary>
        /// <exception cref="FactSet.SDK.StreetAccountNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startDate">Date from which data is required. Should be YYYY-MM-DDTHH:MM:SSZ format</param>
        /// <param name="endDate">The date until which the data is to be fetched. Should be YYYY-MM-DDTHH:MM:SSZ format</param>
        /// <returns>ApiResponse of RequestfilesResponse</returns>
        public ApiResponse<RequestfilesResponse> StreetaccountHistoricalRequestFilesGetWithHttpInfo(DateTime startDate, DateTime endDate)
        {
            FactSet.SDK.StreetAccountNews.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.StreetAccountNews.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.StreetAccountNews.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.StreetAccountNews.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.StreetAccountNews.Client.ClientUtils.ParameterToMultiMap("", "startDate", startDate));
            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.StreetAccountNews.Client.ClientUtils.ParameterToMultiMap("", "endDate", endDate));

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.StreetAccountNews.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = StreetaccountHistoricalRequestFilesGetResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Get<
            RequestfilesResponse>("/streetaccount/historical/request-files", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("StreetaccountHistoricalRequestFilesGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// Returns the jobID Give the startDate and endDate parameters as request parameters in the /request-files endpoint, it returns the jobID. startDate and endDate should be in YYYY-MM-DDTHH:MM:SSZ format. This API only supports adhoc requests to retrieve historical files and does not support real-time files and if you interested in require real-time push should consider the other three methods (pushed via SFTP, to QNT account, or your Azure Storage). Per API request able to query till 2 years of data
        /// </summary>
        /// <exception cref="FactSet.SDK.StreetAccountNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startDate">Date from which data is required. Should be YYYY-MM-DDTHH:MM:SSZ format</param>
        /// <param name="endDate">The date until which the data is to be fetched. Should be YYYY-MM-DDTHH:MM:SSZ format</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RequestfilesResponse</returns>
        public async System.Threading.Tasks.Task<RequestfilesResponse>StreetaccountHistoricalRequestFilesGetAsync(DateTime startDate, DateTime endDate, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await StreetaccountHistoricalRequestFilesGetWithHttpInfoAsync(startDate, endDate, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns the jobID Give the startDate and endDate parameters as request parameters in the /request-files endpoint, it returns the jobID. startDate and endDate should be in YYYY-MM-DDTHH:MM:SSZ format. This API only supports adhoc requests to retrieve historical files and does not support real-time files and if you interested in require real-time push should consider the other three methods (pushed via SFTP, to QNT account, or your Azure Storage). Per API request able to query till 2 years of data
        /// </summary>
        /// <exception cref="FactSet.SDK.StreetAccountNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startDate">Date from which data is required. Should be YYYY-MM-DDTHH:MM:SSZ format</param>
        /// <param name="endDate">The date until which the data is to be fetched. Should be YYYY-MM-DDTHH:MM:SSZ format</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RequestfilesResponse)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<RequestfilesResponse>> StreetaccountHistoricalRequestFilesGetWithHttpInfoAsync(DateTime startDate, DateTime endDate, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            FactSet.SDK.StreetAccountNews.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.StreetAccountNews.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.StreetAccountNews.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.StreetAccountNews.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.StreetAccountNews.Client.ClientUtils.ParameterToMultiMap("", "startDate", startDate));
            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.StreetAccountNews.Client.ClientUtils.ParameterToMultiMap("", "endDate", endDate));

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.StreetAccountNews.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = StreetaccountHistoricalRequestFilesGetResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<RequestfilesResponse>("/streetaccount/historical/request-files", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("StreetaccountHistoricalRequestFilesGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
