/*
 * StreetAccount API
 *
 * Collection of endpoints for retrieving StreetAccount headlines and filters
 *
 * The version of the OpenAPI document: 0.1.0
 * Contact: api@factset.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = FactSet.SDK.StreetAccountNews.Client.OpenAPIDateConverter;

namespace FactSet.SDK.StreetAccountNews.Model
{
    /// <summary>
    /// FilterResponseData
    /// </summary>
    [DataContract(Name = "FilterResponse_data")]
    public partial class FilterResponseData : IEquatable<FilterResponseData>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="FilterResponseData" /> class.
        /// </summary>
        /// <param name="structuredFilters">structuredFilters.</param>
        /// <param name="flattenedFilters">flattenedFilters.</param>
        public FilterResponseData(StructuredFilters structuredFilters = default(StructuredFilters), FlattenedFilters flattenedFilters = default(FlattenedFilters))
        {
            this.StructuredFilters = structuredFilters;
            this.FlattenedFilters = flattenedFilters;
        }

        /// <summary>
        /// Gets or Sets StructuredFilters
        /// </summary>
        [DataMember(Name = "structuredFilters", EmitDefaultValue = false)]
        public StructuredFilters StructuredFilters { get; set; }

        /// <summary>
        /// Gets or Sets FlattenedFilters
        /// </summary>
        [DataMember(Name = "flattenedFilters", EmitDefaultValue = false)]
        public FlattenedFilters FlattenedFilters { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class FilterResponseData {\n");
            sb.Append("  StructuredFilters: ").Append(StructuredFilters).Append("\n");
            sb.Append("  FlattenedFilters: ").Append(FlattenedFilters).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as FilterResponseData);
        }

        /// <summary>
        /// Returns true if FilterResponseData instances are equal
        /// </summary>
        /// <param name="input">Instance of FilterResponseData to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FilterResponseData input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.StructuredFilters == input.StructuredFilters ||
                    (this.StructuredFilters != null &&
                    this.StructuredFilters.Equals(input.StructuredFilters))
                ) && 
                (
                    this.FlattenedFilters == input.FlattenedFilters ||
                    (this.FlattenedFilters != null &&
                    this.FlattenedFilters.Equals(input.FlattenedFilters))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.StructuredFilters != null)
                {
                    hashCode = (hashCode * 59) + this.StructuredFilters.GetHashCode();
                }
                if (this.FlattenedFilters != null)
                {
                    hashCode = (hashCode * 59) + this.FlattenedFilters.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
