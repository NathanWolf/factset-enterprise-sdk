/*
 * StreetAccount News API
 *
 * The StreetAccount News API provides access to FactSet's proprietary news provider, StreetAccount. StreetAccount, is a premium real-time market intelligence news service that delivers comprehensive U.S., Canadian, and European coverage (and expanding Asia coverage). All possible sources for corporate news are scanned and key story facts are highlighted and presented in an easy-to-read format.  **StreetAccount Filters, Headlines, and Views:**  These endpoints allow for the retrieval of news headlines using filters such as Watchlists/Indices/Tickers, Company Filters, Market Topics, Regions, and Sectors.  Headlines can also be retrieved based on saved views within the Workstation.  **StreetAccount Historical Stories:**  These endpoints provide access to historical StreetAccount (SA) news. The API delivers SA stories in XML format based on user-specified date input parameters. Output files are securely available to users through a URL. This API has three endpoints: Request Files, Check Status, and Get Files.  Please note that this API only supports adhoc requests for historical files and does not support real-time files. If real-time push is required, consider using other methods such as SFTP, QNT account, or Azure Storage. Both historical and real-time Street Account news can be delivered via SFTP, QNT account, or Azure Storage.  The files delivered contain both metadata and content body, eliminating the need for multiple requests through multiple services to retrieve all the information.
 *
 * The version of the OpenAPI document: 0.1.0
 * Contact: api@factset.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = FactSet.SDK.StreetAccountNews.Client.OpenAPIDateConverter;

namespace FactSet.SDK.StreetAccountNews.Model
{
    /// <summary>
    /// Checkstatus
    /// </summary>
    [DataContract(Name = "checkstatus")]
    public partial class Checkstatus : IEquatable<Checkstatus>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Checkstatus" /> class.
        /// </summary>
        /// <param name="product">Defines the name of the product.</param>
        /// <param name="jobID">Unique id to get the xml files for the requested date.</param>
        /// <param name="status">Returns any of the 2 results Submitted -&gt;Running-&gt;Completed and Failed.</param>
        /// <param name="percentDone">Returns how much percentage of  task is completed for the requested jobID.</param>
        /// <param name="startDate">The date from which the data is required in YYYY-MM-DDTHH:MM:SSZ format.</param>
        /// <param name="endDate">The date until which the data is fetched in YYYY-MM-DDTHH:MM:SSZ format.</param>
        /// <param name="part">Returns the part number of the jobID.</param>
        public Checkstatus(string product = default(string), string jobID = default(string), string status = default(string), int percentDone = default(int), DateTime startDate = default(DateTime), DateTime endDate = default(DateTime), int part = default(int))
        {
            this.Product = product;
            this.JobID = jobID;
            this.Status = status;
            this.PercentDone = percentDone;
            this.StartDate = startDate;
            this.EndDate = endDate;
            this.Part = part;
        }

        /// <summary>
        /// Defines the name of the product
        /// </summary>
        /// <value>Defines the name of the product</value>
        [DataMember(Name = "product", EmitDefaultValue = false)]
        public string Product { get; set; }

        /// <summary>
        /// Unique id to get the xml files for the requested date
        /// </summary>
        /// <value>Unique id to get the xml files for the requested date</value>
        [DataMember(Name = "jobID", EmitDefaultValue = false)]
        public string JobID { get; set; }

        /// <summary>
        /// Returns any of the 2 results Submitted -&gt;Running-&gt;Completed and Failed
        /// </summary>
        /// <value>Returns any of the 2 results Submitted -&gt;Running-&gt;Completed and Failed</value>
        [DataMember(Name = "status", EmitDefaultValue = false)]
        public string Status { get; set; }

        /// <summary>
        /// Returns how much percentage of  task is completed for the requested jobID
        /// </summary>
        /// <value>Returns how much percentage of  task is completed for the requested jobID</value>
        [DataMember(Name = "percentDone", EmitDefaultValue = false)]
        public int PercentDone { get; set; }

        /// <summary>
        /// The date from which the data is required in YYYY-MM-DDTHH:MM:SSZ format
        /// </summary>
        /// <value>The date from which the data is required in YYYY-MM-DDTHH:MM:SSZ format</value>
        [DataMember(Name = "startDate", EmitDefaultValue = false)]
        [JsonConverter(typeof(OpenAPIDateConverter))]
        public DateTime StartDate { get; set; }

        /// <summary>
        /// The date until which the data is fetched in YYYY-MM-DDTHH:MM:SSZ format
        /// </summary>
        /// <value>The date until which the data is fetched in YYYY-MM-DDTHH:MM:SSZ format</value>
        [DataMember(Name = "endDate", EmitDefaultValue = false)]
        [JsonConverter(typeof(OpenAPIDateConverter))]
        public DateTime EndDate { get; set; }

        /// <summary>
        /// Returns the part number of the jobID
        /// </summary>
        /// <value>Returns the part number of the jobID</value>
        [DataMember(Name = "part", EmitDefaultValue = false)]
        public int Part { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Checkstatus {\n");
            sb.Append("  Product: ").Append(Product).Append("\n");
            sb.Append("  JobID: ").Append(JobID).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  PercentDone: ").Append(PercentDone).Append("\n");
            sb.Append("  StartDate: ").Append(StartDate).Append("\n");
            sb.Append("  EndDate: ").Append(EndDate).Append("\n");
            sb.Append("  Part: ").Append(Part).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Checkstatus);
        }

        /// <summary>
        /// Returns true if Checkstatus instances are equal
        /// </summary>
        /// <param name="input">Instance of Checkstatus to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Checkstatus input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Product == input.Product ||
                    (this.Product != null &&
                    this.Product.Equals(input.Product))
                ) && 
                (
                    this.JobID == input.JobID ||
                    (this.JobID != null &&
                    this.JobID.Equals(input.JobID))
                ) && 
                (
                    this.Status == input.Status ||
                    (this.Status != null &&
                    this.Status.Equals(input.Status))
                ) && 
                (
                    this.PercentDone == input.PercentDone ||
                    this.PercentDone.Equals(input.PercentDone)
                ) && 
                (
                    this.StartDate == input.StartDate ||
                    (this.StartDate != null &&
                    this.StartDate.Equals(input.StartDate))
                ) && 
                (
                    this.EndDate == input.EndDate ||
                    (this.EndDate != null &&
                    this.EndDate.Equals(input.EndDate))
                ) && 
                (
                    this.Part == input.Part ||
                    this.Part.Equals(input.Part)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Product != null)
                {
                    hashCode = (hashCode * 59) + this.Product.GetHashCode();
                }
                if (this.JobID != null)
                {
                    hashCode = (hashCode * 59) + this.JobID.GetHashCode();
                }
                if (this.Status != null)
                {
                    hashCode = (hashCode * 59) + this.Status.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.PercentDone.GetHashCode();
                if (this.StartDate != null)
                {
                    hashCode = (hashCode * 59) + this.StartDate.GetHashCode();
                }
                if (this.EndDate != null)
                {
                    hashCode = (hashCode * 59) + this.EndDate.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Part.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
