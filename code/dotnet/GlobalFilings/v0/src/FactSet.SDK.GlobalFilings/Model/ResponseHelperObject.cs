/*
 * Global Filings API
 *
 * The Filings API provides a comprehensive set of functionalities for searching and retrieving filing documents from various sources.  This API is designed to expose document search and document retrieval functionality. A document search will allow a request to query FactSetâ€™s document databases based on certain search criteria specified in the request.  In addition, a document count request will provide information on the number of stories available for a particular security.  Helper endpoint will provide dynamic information on the parameters of a document request. .
 *
 * The version of the OpenAPI document: 0.0.0
 * Contact: api@factset.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = FactSet.SDK.GlobalFilings.Client.OpenAPIDateConverter;

namespace FactSet.SDK.GlobalFilings.Model
{
    /// <summary>
    /// ResponseHelperObject
    /// </summary>
    [DataContract(Name = "responseHelperObject")]
    public partial class ResponseHelperObject : IEquatable<ResponseHelperObject>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ResponseHelperObject" /> class.
        /// </summary>
        /// <param name="sourcesObject">sourcesObject.</param>
        /// <param name="formtypesObject">formtypesObject.</param>
        /// <param name="timeZonesObject">timeZonesObject.</param>
        /// <param name="categoriesObject">categoriesObject.</param>
        public ResponseHelperObject(ResponseHelperObjectSourcesObject sourcesObject = default(ResponseHelperObjectSourcesObject), ResponseHelperObjectFormtypesObject formtypesObject = default(ResponseHelperObjectFormtypesObject), ResponseHelperObjectTimeZonesObject timeZonesObject = default(ResponseHelperObjectTimeZonesObject), ResponseHelperObjectCategoriesObject categoriesObject = default(ResponseHelperObjectCategoriesObject))
        {
            this.SourcesObject = sourcesObject;
            this.FormtypesObject = formtypesObject;
            this.TimeZonesObject = timeZonesObject;
            this.CategoriesObject = categoriesObject;
        }

        /// <summary>
        /// Gets or Sets SourcesObject
        /// </summary>
        [DataMember(Name = "sourcesObject", EmitDefaultValue = false)]
        public ResponseHelperObjectSourcesObject SourcesObject { get; set; }

        /// <summary>
        /// Gets or Sets FormtypesObject
        /// </summary>
        [DataMember(Name = "formtypesObject", EmitDefaultValue = false)]
        public ResponseHelperObjectFormtypesObject FormtypesObject { get; set; }

        /// <summary>
        /// Gets or Sets TimeZonesObject
        /// </summary>
        [DataMember(Name = "timeZonesObject", EmitDefaultValue = false)]
        public ResponseHelperObjectTimeZonesObject TimeZonesObject { get; set; }

        /// <summary>
        /// Gets or Sets CategoriesObject
        /// </summary>
        [DataMember(Name = "categoriesObject", EmitDefaultValue = false)]
        public ResponseHelperObjectCategoriesObject CategoriesObject { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ResponseHelperObject {\n");
            sb.Append("  SourcesObject: ").Append(SourcesObject).Append("\n");
            sb.Append("  FormtypesObject: ").Append(FormtypesObject).Append("\n");
            sb.Append("  TimeZonesObject: ").Append(TimeZonesObject).Append("\n");
            sb.Append("  CategoriesObject: ").Append(CategoriesObject).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ResponseHelperObject);
        }

        /// <summary>
        /// Returns true if ResponseHelperObject instances are equal
        /// </summary>
        /// <param name="input">Instance of ResponseHelperObject to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ResponseHelperObject input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.SourcesObject == input.SourcesObject ||
                    (this.SourcesObject != null &&
                    this.SourcesObject.Equals(input.SourcesObject))
                ) && 
                (
                    this.FormtypesObject == input.FormtypesObject ||
                    (this.FormtypesObject != null &&
                    this.FormtypesObject.Equals(input.FormtypesObject))
                ) && 
                (
                    this.TimeZonesObject == input.TimeZonesObject ||
                    (this.TimeZonesObject != null &&
                    this.TimeZonesObject.Equals(input.TimeZonesObject))
                ) && 
                (
                    this.CategoriesObject == input.CategoriesObject ||
                    (this.CategoriesObject != null &&
                    this.CategoriesObject.Equals(input.CategoriesObject))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.SourcesObject != null)
                {
                    hashCode = (hashCode * 59) + this.SourcesObject.GetHashCode();
                }
                if (this.FormtypesObject != null)
                {
                    hashCode = (hashCode * 59) + this.FormtypesObject.GetHashCode();
                }
                if (this.TimeZonesObject != null)
                {
                    hashCode = (hashCode * 59) + this.TimeZonesObject.GetHashCode();
                }
                if (this.CategoriesObject != null)
                {
                    hashCode = (hashCode * 59) + this.CategoriesObject.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
