/*
 * Tick History
 *
 * Tick History provides dynamic access to historical tick data for a specific security for specific dates or date range.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: api@factset.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = FactSet.SDK.FactSetTickHistory.Client.OpenAPIDateConverter;

namespace FactSet.SDK.FactSetTickHistory.Model
{
    /// <summary>
    /// Level2 request body elements
    /// </summary>
    [DataContract(Name = "level2RequestBody")]
    public partial class Level2RequestBody : IEquatable<Level2RequestBody>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Level2RequestBody" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Level2RequestBody() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Level2RequestBody" /> class.
        /// </summary>
        /// <param name="tickers">The requested list of one or more tickers. &lt;p&gt; NOTE: Maximum 500 tickers per request.&lt;/p&gt;.    (required).</param>
        /// <param name="mic">A four-character code used to identify exchanges in which securities are traded. &lt;p&gt;**NOTE**:Does not support multiple mic codes&lt;/p&gt;  (required).</param>
        /// <param name="dateRange">dateRange (required).</param>
        /// <param name="responseFileType">responseFileType.</param>
        public Level2RequestBody(List<string> tickers, string mic, DateRangeOne dateRange,ResponseFileType responseFileType = default(ResponseFileType))
        {
            // to ensure "tickers" is required (not null)
            if (tickers == null) {
                throw new ArgumentNullException("tickers is a required property for Level2RequestBody and cannot be null");
            }
            this.Tickers = tickers;
            // to ensure "mic" is required (not null)
            if (mic == null) {
                throw new ArgumentNullException("mic is a required property for Level2RequestBody and cannot be null");
            }
            this.Mic = mic;
            // to ensure "dateRange" is required (not null)
            if (dateRange == null) {
                throw new ArgumentNullException("dateRange is a required property for Level2RequestBody and cannot be null");
            }
            this.DateRange = dateRange;
            this.ResponseFileType = responseFileType;
        }

        /// <summary>
        /// The requested list of one or more tickers. &lt;p&gt; NOTE: Maximum 500 tickers per request.&lt;/p&gt;.   
        /// </summary>
        /// <value>The requested list of one or more tickers. &lt;p&gt; NOTE: Maximum 500 tickers per request.&lt;/p&gt;.   </value>
        [DataMember(Name = "tickers", IsRequired = true, EmitDefaultValue = false)]
        public List<string> Tickers { get; set; }

        /// <summary>
        /// A four-character code used to identify exchanges in which securities are traded. &lt;p&gt;**NOTE**:Does not support multiple mic codes&lt;/p&gt; 
        /// </summary>
        /// <value>A four-character code used to identify exchanges in which securities are traded. &lt;p&gt;**NOTE**:Does not support multiple mic codes&lt;/p&gt; </value>
        [DataMember(Name = "mic", IsRequired = true, EmitDefaultValue = false)]
        public string Mic { get; set; }

        /// <summary>
        /// Gets or Sets DateRange
        /// </summary>
        [DataMember(Name = "dateRange", IsRequired = true, EmitDefaultValue = false)]
        public DateRangeOne DateRange { get; set; }

        /// <summary>
        /// Gets or Sets ResponseFileType
        /// </summary>
        [DataMember(Name = "responseFileType", EmitDefaultValue = false)]
        public ResponseFileType ResponseFileType { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Level2RequestBody {\n");
            sb.Append("  Tickers: ").Append(Tickers).Append("\n");
            sb.Append("  Mic: ").Append(Mic).Append("\n");
            sb.Append("  DateRange: ").Append(DateRange).Append("\n");
            sb.Append("  ResponseFileType: ").Append(ResponseFileType).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Level2RequestBody);
        }

        /// <summary>
        /// Returns true if Level2RequestBody instances are equal
        /// </summary>
        /// <param name="input">Instance of Level2RequestBody to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Level2RequestBody input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Tickers == input.Tickers ||
                    this.Tickers != null &&
                    input.Tickers != null &&
                    this.Tickers.SequenceEqual(input.Tickers)
                ) && 
                (
                    this.Mic == input.Mic ||
                    (this.Mic != null &&
                    this.Mic.Equals(input.Mic))
                ) && 
                (
                    this.DateRange == input.DateRange ||
                    (this.DateRange != null &&
                    this.DateRange.Equals(input.DateRange))
                ) && 
                (
                    this.ResponseFileType == input.ResponseFileType ||
                    (this.ResponseFileType != null &&
                    this.ResponseFileType.Equals(input.ResponseFileType))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Tickers != null)
                {
                    hashCode = (hashCode * 59) + this.Tickers.GetHashCode();
                }
                if (this.Mic != null)
                {
                    hashCode = (hashCode * 59) + this.Mic.GetHashCode();
                }
                if (this.DateRange != null)
                {
                    hashCode = (hashCode * 59) + this.DateRange.GetHashCode();
                }
                if (this.ResponseFileType != null)
                {
                    hashCode = (hashCode * 59) + this.ResponseFileType.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
