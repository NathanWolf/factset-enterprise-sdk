/*
 * Tick History
 *
 * Tick History provides dynamic access to historical tick data for a specific security for specific dates or date range.
 *
 * The version of the OpenAPI document: 2.1.0
 * Contact: api@factset.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using FactSet.SDK.FactSetTickHistory.Client;
using FactSet.SDK.FactSetTickHistory.Model;
using FactSet.SDK.Utils.Authentication;

namespace FactSet.SDK.FactSetTickHistory.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ILevel2ApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Returns the status of the ID
        /// </summary>
        /// <remarks>
        /// Need to plug-in the id get from /create endpoint into /status endpoint
        /// </remarks>
        /// <exception cref="FactSet.SDK.FactSetTickHistory.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id returned by files create endpoint to poll and collect status of the query</param>
        /// <returns>Level2Api.GetLevel2FileStatusResponseWrapper</returns>
        Level2Api.GetLevel2FileStatusResponseWrapper GetLevel2FileStatus(string id);

        /// <summary>
        /// Returns the status of the ID
        /// </summary>
        /// <remarks>
        /// Need to plug-in the id get from /create endpoint into /status endpoint
        /// </remarks>
        /// <exception cref="FactSet.SDK.FactSetTickHistory.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id returned by files create endpoint to poll and collect status of the query</param>
        /// <returns>ApiResponse of Level2Api.GetLevel2FileStatusResponseWrapper</returns>
        ApiResponse<Level2Api.GetLevel2FileStatusResponseWrapper> GetLevel2FileStatusWithHttpInfo(string id);
        /// <summary>
        /// Returns the tick history files requested in the /create endpoint
        /// </summary>
        /// <remarks>
        /// Returns the files from tickhistory endpoint
        /// </remarks>
        /// <exception cref="FactSet.SDK.FactSetTickHistory.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id returned by files create endpoint to poll and collect results of the query</param>
        /// <param name="paginationLimit">Specifies the maximum number of results to return per response page (optional, default to 20)</param>
        /// <param name="paginationOffset">Specifies the starting point for pagination. This parameter is used to identify the beginning of next set of results (optional, default to 0)</param>
        /// <returns>Level2Api.GetTickHistoryLevel2FilesResponseWrapper</returns>
        Level2Api.GetTickHistoryLevel2FilesResponseWrapper GetTickHistoryLevel2Files(string id, int? paginationLimit = default(int?), int? paginationOffset = default(int?));

        /// <summary>
        /// Returns the tick history files requested in the /create endpoint
        /// </summary>
        /// <remarks>
        /// Returns the files from tickhistory endpoint
        /// </remarks>
        /// <exception cref="FactSet.SDK.FactSetTickHistory.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id returned by files create endpoint to poll and collect results of the query</param>
        /// <param name="paginationLimit">Specifies the maximum number of results to return per response page (optional, default to 20)</param>
        /// <param name="paginationOffset">Specifies the starting point for pagination. This parameter is used to identify the beginning of next set of results (optional, default to 0)</param>
        /// <returns>ApiResponse of Level2Api.GetTickHistoryLevel2FilesResponseWrapper</returns>
        ApiResponse<Level2Api.GetTickHistoryLevel2FilesResponseWrapper> GetTickHistoryLevel2FilesWithHttpInfo(string id, int? paginationLimit = default(int?), int? paginationOffset = default(int?));
        /// <summary>
        /// Returns the ID for the requested data.
        /// </summary>
        /// <remarks>
        /// Data available from past 6 years to previous day.
        /// </remarks>
        /// <exception cref="FactSet.SDK.FactSetTickHistory.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="levelTwoRequest"></param>
        /// <returns>SubmittedResponse</returns>
        SubmittedResponse RequestTickHistoryLeve2Files(LevelTwoRequest levelTwoRequest);

        /// <summary>
        /// Returns the ID for the requested data.
        /// </summary>
        /// <remarks>
        /// Data available from past 6 years to previous day.
        /// </remarks>
        /// <exception cref="FactSet.SDK.FactSetTickHistory.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="levelTwoRequest"></param>
        /// <returns>ApiResponse of SubmittedResponse</returns>
        ApiResponse<SubmittedResponse> RequestTickHistoryLeve2FilesWithHttpInfo(LevelTwoRequest levelTwoRequest);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ILevel2ApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Returns the status of the ID
        /// </summary>
        /// <remarks>
        /// Need to plug-in the id get from /create endpoint into /status endpoint
        /// </remarks>
        /// <exception cref="FactSet.SDK.FactSetTickHistory.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id returned by files create endpoint to poll and collect status of the query</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CompletedResponse</returns>
        System.Threading.Tasks.Task<Level2Api.GetLevel2FileStatusResponseWrapper> GetLevel2FileStatusAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Returns the status of the ID
        /// </summary>
        /// <remarks>
        /// Need to plug-in the id get from /create endpoint into /status endpoint
        /// </remarks>
        /// <exception cref="FactSet.SDK.FactSetTickHistory.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id returned by files create endpoint to poll and collect status of the query</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Level2Api.GetLevel2FileStatusResponseWrapper)</returns>
        System.Threading.Tasks.Task<ApiResponse<Level2Api.GetLevel2FileStatusResponseWrapper>> GetLevel2FileStatusWithHttpInfoAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Returns the tick history files requested in the /create endpoint
        /// </summary>
        /// <remarks>
        /// Returns the files from tickhistory endpoint
        /// </remarks>
        /// <exception cref="FactSet.SDK.FactSetTickHistory.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id returned by files create endpoint to poll and collect results of the query</param>
        /// <param name="paginationLimit">Specifies the maximum number of results to return per response page (optional, default to 20)</param>
        /// <param name="paginationOffset">Specifies the starting point for pagination. This parameter is used to identify the beginning of next set of results (optional, default to 0)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of LeveltwoGetFilesResponse</returns>
        System.Threading.Tasks.Task<Level2Api.GetTickHistoryLevel2FilesResponseWrapper> GetTickHistoryLevel2FilesAsync(string id, int? paginationLimit = default(int?), int? paginationOffset = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Returns the tick history files requested in the /create endpoint
        /// </summary>
        /// <remarks>
        /// Returns the files from tickhistory endpoint
        /// </remarks>
        /// <exception cref="FactSet.SDK.FactSetTickHistory.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id returned by files create endpoint to poll and collect results of the query</param>
        /// <param name="paginationLimit">Specifies the maximum number of results to return per response page (optional, default to 20)</param>
        /// <param name="paginationOffset">Specifies the starting point for pagination. This parameter is used to identify the beginning of next set of results (optional, default to 0)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Level2Api.GetTickHistoryLevel2FilesResponseWrapper)</returns>
        System.Threading.Tasks.Task<ApiResponse<Level2Api.GetTickHistoryLevel2FilesResponseWrapper>> GetTickHistoryLevel2FilesWithHttpInfoAsync(string id, int? paginationLimit = default(int?), int? paginationOffset = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Returns the ID for the requested data.
        /// </summary>
        /// <remarks>
        /// Data available from past 6 years to previous day.
        /// </remarks>
        /// <exception cref="FactSet.SDK.FactSetTickHistory.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="levelTwoRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SubmittedResponse</returns>
        System.Threading.Tasks.Task<SubmittedResponse> RequestTickHistoryLeve2FilesAsync(LevelTwoRequest levelTwoRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Returns the ID for the requested data.
        /// </summary>
        /// <remarks>
        /// Data available from past 6 years to previous day.
        /// </remarks>
        /// <exception cref="FactSet.SDK.FactSetTickHistory.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="levelTwoRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SubmittedResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SubmittedResponse>> RequestTickHistoryLeve2FilesWithHttpInfoAsync(LevelTwoRequest levelTwoRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ILevel2Api : ILevel2ApiSync, ILevel2ApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class Level2Api : ILevel2Api
    {
        private FactSet.SDK.FactSetTickHistory.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        # region Response Type Disctionaries
        
        private static readonly Dictionary<HttpStatusCode, System.Type> GetLevel2FileStatusResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)201, typeof(CompletedResponse) },
            { (HttpStatusCode)202, typeof(SubmittedResponse) },
            { (HttpStatusCode)401, typeof(Status) },
            { (HttpStatusCode)403, typeof(Status) },
            { (HttpStatusCode)404, typeof(Status) },
            { (HttpStatusCode)500, typeof(Status) },
        };

        private static readonly Dictionary<HttpStatusCode, System.Type> GetTickHistoryLevel2FilesResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)200, typeof(LeveltwoGetFilesResponse) },
            { (HttpStatusCode)202, typeof(SubmittedResponse) },
            { (HttpStatusCode)400, typeof(Status) },
            { (HttpStatusCode)401, typeof(Status) },
            { (HttpStatusCode)403, typeof(Status) },
            { (HttpStatusCode)404, typeof(Status) },
            { (HttpStatusCode)500, typeof(Status) },
        };

        private static readonly Dictionary<HttpStatusCode, System.Type> RequestTickHistoryLeve2FilesResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)202, typeof(SubmittedResponse) },
            { (HttpStatusCode)400, typeof(Status) },
            { (HttpStatusCode)401, typeof(Status) },
            { (HttpStatusCode)403, typeof(Status) },
            { (HttpStatusCode)429, typeof(Status) },
            { (HttpStatusCode)500, typeof(Status) },
        };

        # endregion Response Type Disctionaries

        # region Api Response Objects
        
        /// <summary>
        /// Wrapper to support GET /level2/files/status returning different types
        /// per status code.
        ///
        /// <list>
        /// <item>
        /// <description>
        /// 201 : CompletedResponse<br />
        /// The Request has been created and the response has been created. 
        /// </description>
        /// </item>
        /// 
        /// <item>
        /// <description>
        /// 202 : SubmittedResponse<br />
        /// The Request has not finished and the result has NOT been created. 
        /// </description>
        /// </item>
        /// </list>
        ///
        /// <example>
        /// <code>
        /// GetLevel2FileStatusResponseWrapper response = ...;
        /// switch (response.statusCode)
        /// {
        ///   case 201:
        ///     CompletedResponse data201 = response.getResponse201();
        ///     break;
        ///   case 202:
        ///     SubmittedResponse data202 = response.getResponse202();
        ///     break;
        ///  }
        /// </code>
        /// </example>
        /// </summary>
        public class GetLevel2FileStatusResponseWrapper {

            /// <summary>This constructor initializes the new GetLevel2FileStatusResponseWrapper to
            /// (<paramref name="statusCode"/>,<paramref name="response"/>).
            /// </summary>
            /// <param name="statusCode">Http status code of the response</param>
            /// <param name="response">Raw response</param>
            public GetLevel2FileStatusResponseWrapper(HttpStatusCode statusCode, object response)
            {
                StatusCode = statusCode;
                Response = response;
            }

            /// <summary>
            /// Http status code of the response
            /// </summary>
            public HttpStatusCode StatusCode { get; }

            /// <summary>
            /// Raw Object response
            /// </summary>
            public object Response { get; }

            
            /// <summary>
            /// The Request has been created and the response has been created. 
            /// </summary>
            public CompletedResponse Response201
            {
                get
                {
                    if (StatusCode != (HttpStatusCode) 201)
                    {
                        throw new FactSet.SDK.FactSetTickHistory.Client.ApiException(500, "Invalid response getter called. Response201 can't return a " + StatusCode + " response");
                    }
                    return (CompletedResponse) Response;
                }
            }
            
            /// <summary>
            /// The Request has not finished and the result has NOT been created. 
            /// </summary>
            public SubmittedResponse Response202
            {
                get
                {
                    if (StatusCode != (HttpStatusCode) 202)
                    {
                        throw new FactSet.SDK.FactSetTickHistory.Client.ApiException(500, "Invalid response getter called. Response202 can't return a " + StatusCode + " response");
                    }
                    return (SubmittedResponse) Response;
                }
            }
            
        }


        /// <summary>
        /// Wrapper to support GET /level2/files/get returning different types
        /// per status code.
        ///
        /// <list>
        /// <item>
        /// <description>
        /// 200 : LeveltwoGetFilesResponse<br />
        /// Success&lt;/p&gt; **To download the output file copy the response url in a browser**
        /// </description>
        /// </item>
        /// 
        /// <item>
        /// <description>
        /// 202 : SubmittedResponse<br />
        ///  The Request has not finished and the result has NOT been created. 
        /// </description>
        /// </item>
        /// </list>
        ///
        /// <example>
        /// <code>
        /// GetTickHistoryLevel2FilesResponseWrapper response = ...;
        /// switch (response.statusCode)
        /// {
        ///   case 200:
        ///     LeveltwoGetFilesResponse data200 = response.getResponse200();
        ///     break;
        ///   case 202:
        ///     SubmittedResponse data202 = response.getResponse202();
        ///     break;
        ///  }
        /// </code>
        /// </example>
        /// </summary>
        public class GetTickHistoryLevel2FilesResponseWrapper {

            /// <summary>This constructor initializes the new GetTickHistoryLevel2FilesResponseWrapper to
            /// (<paramref name="statusCode"/>,<paramref name="response"/>).
            /// </summary>
            /// <param name="statusCode">Http status code of the response</param>
            /// <param name="response">Raw response</param>
            public GetTickHistoryLevel2FilesResponseWrapper(HttpStatusCode statusCode, object response)
            {
                StatusCode = statusCode;
                Response = response;
            }

            /// <summary>
            /// Http status code of the response
            /// </summary>
            public HttpStatusCode StatusCode { get; }

            /// <summary>
            /// Raw Object response
            /// </summary>
            public object Response { get; }

            
            /// <summary>
            /// Success&lt;/p&gt; **To download the output file copy the response url in a browser**
            /// </summary>
            public LeveltwoGetFilesResponse Response200
            {
                get
                {
                    if (StatusCode != (HttpStatusCode) 200)
                    {
                        throw new FactSet.SDK.FactSetTickHistory.Client.ApiException(500, "Invalid response getter called. Response200 can't return a " + StatusCode + " response");
                    }
                    return (LeveltwoGetFilesResponse) Response;
                }
            }
            
            /// <summary>
            ///  The Request has not finished and the result has NOT been created. 
            /// </summary>
            public SubmittedResponse Response202
            {
                get
                {
                    if (StatusCode != (HttpStatusCode) 202)
                    {
                        throw new FactSet.SDK.FactSetTickHistory.Client.ApiException(500, "Invalid response getter called. Response202 can't return a " + StatusCode + " response");
                    }
                    return (SubmittedResponse) Response;
                }
            }
            
        }



        # endregion Api Response Objects

        /// <summary>
        /// Initializes a new instance of the <see cref="Level2Api"/> class.
        /// </summary>
        /// <returns></returns>
        public Level2Api() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="Level2Api"/> class.
        /// </summary>
        /// <returns></returns>
        public Level2Api(string basePath)
        {
            this.Configuration = FactSet.SDK.FactSetTickHistory.Client.Configuration.MergeConfigurations(
                FactSet.SDK.FactSetTickHistory.Client.GlobalConfiguration.Instance,
                new FactSet.SDK.FactSetTickHistory.Client.Configuration { BasePath = basePath }
            );
            this.Client = new FactSet.SDK.FactSetTickHistory.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new FactSet.SDK.FactSetTickHistory.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = FactSet.SDK.FactSetTickHistory.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="Level2Api"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public Level2Api(FactSet.SDK.FactSetTickHistory.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = FactSet.SDK.FactSetTickHistory.Client.Configuration.MergeConfigurations(
                FactSet.SDK.FactSetTickHistory.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new FactSet.SDK.FactSetTickHistory.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new FactSet.SDK.FactSetTickHistory.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = FactSet.SDK.FactSetTickHistory.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="Level2Api"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public Level2Api(FactSet.SDK.FactSetTickHistory.Client.ISynchronousClient client, FactSet.SDK.FactSetTickHistory.Client.IAsynchronousClient asyncClient, FactSet.SDK.FactSetTickHistory.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = FactSet.SDK.FactSetTickHistory.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public FactSet.SDK.FactSetTickHistory.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public FactSet.SDK.FactSetTickHistory.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public FactSet.SDK.FactSetTickHistory.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public FactSet.SDK.FactSetTickHistory.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Returns the status of the ID Need to plug-in the id get from /create endpoint into /status endpoint
        /// </summary>
        /// <exception cref="FactSet.SDK.FactSetTickHistory.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id returned by files create endpoint to poll and collect status of the query</param>
        /// <returns>Level2Api.GetLevel2FileStatusResponseWrapper</returns>
        public Level2Api.GetLevel2FileStatusResponseWrapper GetLevel2FileStatus(string id)
        {
            var localVarResponse = GetLevel2FileStatusWithHttpInfo(id);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns the status of the ID Need to plug-in the id get from /create endpoint into /status endpoint
        /// </summary>
        /// <exception cref="FactSet.SDK.FactSetTickHistory.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id returned by files create endpoint to poll and collect status of the query</param>
        /// <returns>ApiResponse of CompletedResponse</returns>
        public ApiResponse<Level2Api.GetLevel2FileStatusResponseWrapper> GetLevel2FileStatusWithHttpInfo(string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new FactSet.SDK.FactSetTickHistory.Client.ApiException(400, "Missing required parameter 'id' when calling Level2Api->GetLevel2FileStatus");
            }

            FactSet.SDK.FactSetTickHistory.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.FactSetTickHistory.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.FactSetTickHistory.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.FactSetTickHistory.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.FactSetTickHistory.Client.ClientUtils.ParameterToMultiMap("", "id", id));

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.FactSetTickHistory.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = GetLevel2FileStatusResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Get<
            Object>("/level2/files/status", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetLevel2FileStatus", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            var getlevel2filestatusResponse = new GetLevel2FileStatusResponseWrapper(localVarResponse.StatusCode, localVarResponse.Data);
            return new ApiResponse<GetLevel2FileStatusResponseWrapper>(localVarResponse.StatusCode, getlevel2filestatusResponse);
        }

        /// <summary>
        /// Returns the status of the ID Need to plug-in the id get from /create endpoint into /status endpoint
        /// </summary>
        /// <exception cref="FactSet.SDK.FactSetTickHistory.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id returned by files create endpoint to poll and collect status of the query</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CompletedResponse</returns>
        public async System.Threading.Tasks.Task<Level2Api.GetLevel2FileStatusResponseWrapper>GetLevel2FileStatusAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await GetLevel2FileStatusWithHttpInfoAsync(id, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns the status of the ID Need to plug-in the id get from /create endpoint into /status endpoint
        /// </summary>
        /// <exception cref="FactSet.SDK.FactSetTickHistory.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id returned by files create endpoint to poll and collect status of the query</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CompletedResponse)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<Level2Api.GetLevel2FileStatusResponseWrapper>> GetLevel2FileStatusWithHttpInfoAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new FactSet.SDK.FactSetTickHistory.Client.ApiException(400, "Missing required parameter 'id' when calling Level2Api->GetLevel2FileStatus");
            }


            FactSet.SDK.FactSetTickHistory.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.FactSetTickHistory.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.FactSetTickHistory.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.FactSetTickHistory.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.FactSetTickHistory.Client.ClientUtils.ParameterToMultiMap("", "id", id));

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.FactSetTickHistory.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = GetLevel2FileStatusResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/level2/files/status", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetLevel2FileStatus", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            var getlevel2filestatusResponse = new GetLevel2FileStatusResponseWrapper(localVarResponse.StatusCode, localVarResponse.Data);
            return new ApiResponse<GetLevel2FileStatusResponseWrapper>(localVarResponse.StatusCode, getlevel2filestatusResponse);
        }

        /// <summary>
        /// Returns the tick history files requested in the /create endpoint Returns the files from tickhistory endpoint
        /// </summary>
        /// <exception cref="FactSet.SDK.FactSetTickHistory.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id returned by files create endpoint to poll and collect results of the query</param>
        /// <param name="paginationLimit">Specifies the maximum number of results to return per response page (optional, default to 20)</param>
        /// <param name="paginationOffset">Specifies the starting point for pagination. This parameter is used to identify the beginning of next set of results (optional, default to 0)</param>
        /// <returns>Level2Api.GetTickHistoryLevel2FilesResponseWrapper</returns>
        public Level2Api.GetTickHistoryLevel2FilesResponseWrapper GetTickHistoryLevel2Files(string id, int? paginationLimit = default(int?), int? paginationOffset = default(int?))
        {
            var localVarResponse = GetTickHistoryLevel2FilesWithHttpInfo(id, paginationLimit, paginationOffset);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns the tick history files requested in the /create endpoint Returns the files from tickhistory endpoint
        /// </summary>
        /// <exception cref="FactSet.SDK.FactSetTickHistory.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id returned by files create endpoint to poll and collect results of the query</param>
        /// <param name="paginationLimit">Specifies the maximum number of results to return per response page (optional, default to 20)</param>
        /// <param name="paginationOffset">Specifies the starting point for pagination. This parameter is used to identify the beginning of next set of results (optional, default to 0)</param>
        /// <returns>ApiResponse of LeveltwoGetFilesResponse</returns>
        public ApiResponse<Level2Api.GetTickHistoryLevel2FilesResponseWrapper> GetTickHistoryLevel2FilesWithHttpInfo(string id, int? paginationLimit = default(int?), int? paginationOffset = default(int?))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new FactSet.SDK.FactSetTickHistory.Client.ApiException(400, "Missing required parameter 'id' when calling Level2Api->GetTickHistoryLevel2Files");
            }

            FactSet.SDK.FactSetTickHistory.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.FactSetTickHistory.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.FactSetTickHistory.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.FactSetTickHistory.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.FactSetTickHistory.Client.ClientUtils.ParameterToMultiMap("", "id", id));
            if (paginationLimit != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.FactSetTickHistory.Client.ClientUtils.ParameterToMultiMap("", "_paginationLimit", paginationLimit));
            }
            if (paginationOffset != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.FactSetTickHistory.Client.ClientUtils.ParameterToMultiMap("", "_paginationOffset", paginationOffset));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.FactSetTickHistory.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = GetTickHistoryLevel2FilesResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Get<
            Object>("/level2/files/get", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetTickHistoryLevel2Files", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            var gettickhistorylevel2filesResponse = new GetTickHistoryLevel2FilesResponseWrapper(localVarResponse.StatusCode, localVarResponse.Data);
            return new ApiResponse<GetTickHistoryLevel2FilesResponseWrapper>(localVarResponse.StatusCode, gettickhistorylevel2filesResponse);
        }

        /// <summary>
        /// Returns the tick history files requested in the /create endpoint Returns the files from tickhistory endpoint
        /// </summary>
        /// <exception cref="FactSet.SDK.FactSetTickHistory.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id returned by files create endpoint to poll and collect results of the query</param>
        /// <param name="paginationLimit">Specifies the maximum number of results to return per response page (optional, default to 20)</param>
        /// <param name="paginationOffset">Specifies the starting point for pagination. This parameter is used to identify the beginning of next set of results (optional, default to 0)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of LeveltwoGetFilesResponse</returns>
        public async System.Threading.Tasks.Task<Level2Api.GetTickHistoryLevel2FilesResponseWrapper>GetTickHistoryLevel2FilesAsync(string id, int? paginationLimit = default(int?), int? paginationOffset = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await GetTickHistoryLevel2FilesWithHttpInfoAsync(id, paginationLimit, paginationOffset, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns the tick history files requested in the /create endpoint Returns the files from tickhistory endpoint
        /// </summary>
        /// <exception cref="FactSet.SDK.FactSetTickHistory.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id returned by files create endpoint to poll and collect results of the query</param>
        /// <param name="paginationLimit">Specifies the maximum number of results to return per response page (optional, default to 20)</param>
        /// <param name="paginationOffset">Specifies the starting point for pagination. This parameter is used to identify the beginning of next set of results (optional, default to 0)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (LeveltwoGetFilesResponse)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<Level2Api.GetTickHistoryLevel2FilesResponseWrapper>> GetTickHistoryLevel2FilesWithHttpInfoAsync(string id, int? paginationLimit = default(int?), int? paginationOffset = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new FactSet.SDK.FactSetTickHistory.Client.ApiException(400, "Missing required parameter 'id' when calling Level2Api->GetTickHistoryLevel2Files");
            }


            FactSet.SDK.FactSetTickHistory.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.FactSetTickHistory.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.FactSetTickHistory.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.FactSetTickHistory.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.FactSetTickHistory.Client.ClientUtils.ParameterToMultiMap("", "id", id));
            if (paginationLimit != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.FactSetTickHistory.Client.ClientUtils.ParameterToMultiMap("", "_paginationLimit", paginationLimit));
            }
            if (paginationOffset != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.FactSetTickHistory.Client.ClientUtils.ParameterToMultiMap("", "_paginationOffset", paginationOffset));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.FactSetTickHistory.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = GetTickHistoryLevel2FilesResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/level2/files/get", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetTickHistoryLevel2Files", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            var gettickhistorylevel2filesResponse = new GetTickHistoryLevel2FilesResponseWrapper(localVarResponse.StatusCode, localVarResponse.Data);
            return new ApiResponse<GetTickHistoryLevel2FilesResponseWrapper>(localVarResponse.StatusCode, gettickhistorylevel2filesResponse);
        }

        /// <summary>
        /// Returns the ID for the requested data. Data available from past 6 years to previous day.
        /// </summary>
        /// <exception cref="FactSet.SDK.FactSetTickHistory.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="levelTwoRequest"></param>
        /// <returns>SubmittedResponse</returns>
        public SubmittedResponse RequestTickHistoryLeve2Files(LevelTwoRequest levelTwoRequest)
        {
            var localVarResponse = RequestTickHistoryLeve2FilesWithHttpInfo(levelTwoRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns the ID for the requested data. Data available from past 6 years to previous day.
        /// </summary>
        /// <exception cref="FactSet.SDK.FactSetTickHistory.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="levelTwoRequest"></param>
        /// <returns>ApiResponse of SubmittedResponse</returns>
        public ApiResponse<SubmittedResponse> RequestTickHistoryLeve2FilesWithHttpInfo(LevelTwoRequest levelTwoRequest)
        {
            // verify the required parameter 'levelTwoRequest' is set
            if (levelTwoRequest == null)
            {
                throw new FactSet.SDK.FactSetTickHistory.Client.ApiException(400, "Missing required parameter 'levelTwoRequest' when calling Level2Api->RequestTickHistoryLeve2Files");
            }

            FactSet.SDK.FactSetTickHistory.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.FactSetTickHistory.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.FactSetTickHistory.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.FactSetTickHistory.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = levelTwoRequest;

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.FactSetTickHistory.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = RequestTickHistoryLeve2FilesResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Post<
            SubmittedResponse>("/level2/files/create", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RequestTickHistoryLeve2Files", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// Returns the ID for the requested data. Data available from past 6 years to previous day.
        /// </summary>
        /// <exception cref="FactSet.SDK.FactSetTickHistory.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="levelTwoRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SubmittedResponse</returns>
        public async System.Threading.Tasks.Task<SubmittedResponse>RequestTickHistoryLeve2FilesAsync(LevelTwoRequest levelTwoRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await RequestTickHistoryLeve2FilesWithHttpInfoAsync(levelTwoRequest, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns the ID for the requested data. Data available from past 6 years to previous day.
        /// </summary>
        /// <exception cref="FactSet.SDK.FactSetTickHistory.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="levelTwoRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SubmittedResponse)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<SubmittedResponse>> RequestTickHistoryLeve2FilesWithHttpInfoAsync(LevelTwoRequest levelTwoRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'levelTwoRequest' is set
            if (levelTwoRequest == null)
            {
                throw new FactSet.SDK.FactSetTickHistory.Client.ApiException(400, "Missing required parameter 'levelTwoRequest' when calling Level2Api->RequestTickHistoryLeve2Files");
            }


            FactSet.SDK.FactSetTickHistory.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.FactSetTickHistory.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.FactSetTickHistory.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.FactSetTickHistory.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = levelTwoRequest;

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.FactSetTickHistory.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = RequestTickHistoryLeve2FilesResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<SubmittedResponse>("/level2/files/create", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RequestTickHistoryLeve2Files", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
