/*
 * Tick History Level 2 (Beta)
 *
 * Tick History **Level 2** provides dynamic access to the historical tick data up to 10 levels of depth for a specific security for specific dates or date range. The API generates output files with data based on client-specified input parameters. The input parameters include universe specification and date ranges for which the data will be generated. When the API request with specified input parameters has been completed, the output files will be made available back to the users through a secure URL to the location where the files are stored. Therefore, this API has two APIs (i) Request files API (ii) Get Files API.
 *
 * The version of the OpenAPI document: 0.0.0
 * Contact: api@factset.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using FactSet.SDK.FactSetTickHistory.Client;
using FactSet.SDK.FactSetTickHistory.Model;
using FactSet.SDK.Utils.Authentication;

namespace FactSet.SDK.FactSetTickHistory.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IRequestFilesLevel2BETAApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Returns the requestId and status
        /// </summary>
        /// <remarks>
        /// Returns the requestId and status.
        /// </remarks>
        /// <exception cref="FactSet.SDK.FactSetTickHistory.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ticker">The requested list of one or more Market tickers.</param>
        /// <param name="startDate">The date to which data is required.</param>
        /// <param name="endDate">The date to which data is required.</param>
        /// <param name="mic">This parameter is used to filter the results based on the exchange code. &lt;p&gt;**NOTE**:Does not support multiple mic codes&lt;/p&gt;</param>
        /// <param name="responseFileType">Specifies the fileType (optional, default to parquet)</param>
        /// <returns>Level2RequestFilesResponse</returns>
        Level2RequestFilesResponse GetrequestIdLevel2(List<string> ticker, DateTime startDate, DateTime endDate, string mic, string responseFileType = default(string));

        /// <summary>
        /// Returns the requestId and status
        /// </summary>
        /// <remarks>
        /// Returns the requestId and status.
        /// </remarks>
        /// <exception cref="FactSet.SDK.FactSetTickHistory.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ticker">The requested list of one or more Market tickers.</param>
        /// <param name="startDate">The date to which data is required.</param>
        /// <param name="endDate">The date to which data is required.</param>
        /// <param name="mic">This parameter is used to filter the results based on the exchange code. &lt;p&gt;**NOTE**:Does not support multiple mic codes&lt;/p&gt;</param>
        /// <param name="responseFileType">Specifies the fileType (optional, default to parquet)</param>
        /// <returns>ApiResponse of Level2RequestFilesResponse</returns>
        ApiResponse<Level2RequestFilesResponse> GetrequestIdLevel2WithHttpInfo(List<string> ticker, DateTime startDate, DateTime endDate, string mic, string responseFileType = default(string));
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IRequestFilesLevel2BETAApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Returns the requestId and status
        /// </summary>
        /// <remarks>
        /// Returns the requestId and status.
        /// </remarks>
        /// <exception cref="FactSet.SDK.FactSetTickHistory.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ticker">The requested list of one or more Market tickers.</param>
        /// <param name="startDate">The date to which data is required.</param>
        /// <param name="endDate">The date to which data is required.</param>
        /// <param name="mic">This parameter is used to filter the results based on the exchange code. &lt;p&gt;**NOTE**:Does not support multiple mic codes&lt;/p&gt;</param>
        /// <param name="responseFileType">Specifies the fileType (optional, default to parquet)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Level2RequestFilesResponse</returns>
        System.Threading.Tasks.Task<Level2RequestFilesResponse> GetrequestIdLevel2Async(List<string> ticker, DateTime startDate, DateTime endDate, string mic, string responseFileType = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Returns the requestId and status
        /// </summary>
        /// <remarks>
        /// Returns the requestId and status.
        /// </remarks>
        /// <exception cref="FactSet.SDK.FactSetTickHistory.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ticker">The requested list of one or more Market tickers.</param>
        /// <param name="startDate">The date to which data is required.</param>
        /// <param name="endDate">The date to which data is required.</param>
        /// <param name="mic">This parameter is used to filter the results based on the exchange code. &lt;p&gt;**NOTE**:Does not support multiple mic codes&lt;/p&gt;</param>
        /// <param name="responseFileType">Specifies the fileType (optional, default to parquet)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Level2RequestFilesResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<Level2RequestFilesResponse>> GetrequestIdLevel2WithHttpInfoAsync(List<string> ticker, DateTime startDate, DateTime endDate, string mic, string responseFileType = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IRequestFilesLevel2BETAApi : IRequestFilesLevel2BETAApiSync, IRequestFilesLevel2BETAApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class RequestFilesLevel2BETAApi : IRequestFilesLevel2BETAApi
    {
        private FactSet.SDK.FactSetTickHistory.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        # region Response Type Disctionaries
        
        private static readonly Dictionary<HttpStatusCode, System.Type> GetrequestIdLevel2ResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)200, typeof(Level2RequestFilesResponse) },
            { (HttpStatusCode)400, typeof(Status) },
            { (HttpStatusCode)401, typeof(Status) },
            { (HttpStatusCode)403, typeof(Status) },
            { (HttpStatusCode)429, typeof(Status) },
            { (HttpStatusCode)500, typeof(Status) },
        };

        # endregion Response Type Disctionaries

        # region Api Response Objects
        

        # endregion Api Response Objects

        /// <summary>
        /// Initializes a new instance of the <see cref="RequestFilesLevel2BETAApi"/> class.
        /// </summary>
        /// <returns></returns>
        public RequestFilesLevel2BETAApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="RequestFilesLevel2BETAApi"/> class.
        /// </summary>
        /// <returns></returns>
        public RequestFilesLevel2BETAApi(string basePath)
        {
            this.Configuration = FactSet.SDK.FactSetTickHistory.Client.Configuration.MergeConfigurations(
                FactSet.SDK.FactSetTickHistory.Client.GlobalConfiguration.Instance,
                new FactSet.SDK.FactSetTickHistory.Client.Configuration { BasePath = basePath }
            );
            this.Client = new FactSet.SDK.FactSetTickHistory.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new FactSet.SDK.FactSetTickHistory.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = FactSet.SDK.FactSetTickHistory.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="RequestFilesLevel2BETAApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public RequestFilesLevel2BETAApi(FactSet.SDK.FactSetTickHistory.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = FactSet.SDK.FactSetTickHistory.Client.Configuration.MergeConfigurations(
                FactSet.SDK.FactSetTickHistory.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new FactSet.SDK.FactSetTickHistory.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new FactSet.SDK.FactSetTickHistory.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = FactSet.SDK.FactSetTickHistory.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="RequestFilesLevel2BETAApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public RequestFilesLevel2BETAApi(FactSet.SDK.FactSetTickHistory.Client.ISynchronousClient client, FactSet.SDK.FactSetTickHistory.Client.IAsynchronousClient asyncClient, FactSet.SDK.FactSetTickHistory.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = FactSet.SDK.FactSetTickHistory.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public FactSet.SDK.FactSetTickHistory.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public FactSet.SDK.FactSetTickHistory.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public FactSet.SDK.FactSetTickHistory.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public FactSet.SDK.FactSetTickHistory.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Returns the requestId and status Returns the requestId and status.
        /// </summary>
        /// <exception cref="FactSet.SDK.FactSetTickHistory.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ticker">The requested list of one or more Market tickers.</param>
        /// <param name="startDate">The date to which data is required.</param>
        /// <param name="endDate">The date to which data is required.</param>
        /// <param name="mic">This parameter is used to filter the results based on the exchange code. &lt;p&gt;**NOTE**:Does not support multiple mic codes&lt;/p&gt;</param>
        /// <param name="responseFileType">Specifies the fileType (optional, default to parquet)</param>
        /// <returns>Level2RequestFilesResponse</returns>
        public Level2RequestFilesResponse GetrequestIdLevel2(List<string> ticker, DateTime startDate, DateTime endDate, string mic, string responseFileType = default(string))
        {
            var localVarResponse = GetrequestIdLevel2WithHttpInfo(ticker, startDate, endDate, mic, responseFileType);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns the requestId and status Returns the requestId and status.
        /// </summary>
        /// <exception cref="FactSet.SDK.FactSetTickHistory.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ticker">The requested list of one or more Market tickers.</param>
        /// <param name="startDate">The date to which data is required.</param>
        /// <param name="endDate">The date to which data is required.</param>
        /// <param name="mic">This parameter is used to filter the results based on the exchange code. &lt;p&gt;**NOTE**:Does not support multiple mic codes&lt;/p&gt;</param>
        /// <param name="responseFileType">Specifies the fileType (optional, default to parquet)</param>
        /// <returns>ApiResponse of Level2RequestFilesResponse</returns>
        public ApiResponse<Level2RequestFilesResponse> GetrequestIdLevel2WithHttpInfo(List<string> ticker, DateTime startDate, DateTime endDate, string mic, string responseFileType = default(string))
        {
            // verify the required parameter 'ticker' is set
            if (ticker == null)
            {
                throw new FactSet.SDK.FactSetTickHistory.Client.ApiException(400, "Missing required parameter 'ticker' when calling RequestFilesLevel2BETAApi->GetrequestIdLevel2");
            }

            // verify the required parameter 'mic' is set
            if (mic == null)
            {
                throw new FactSet.SDK.FactSetTickHistory.Client.ApiException(400, "Missing required parameter 'mic' when calling RequestFilesLevel2BETAApi->GetrequestIdLevel2");
            }

            FactSet.SDK.FactSetTickHistory.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.FactSetTickHistory.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.FactSetTickHistory.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.FactSetTickHistory.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.FactSetTickHistory.Client.ClientUtils.ParameterToMultiMap("csv", "ticker", ticker));
            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.FactSetTickHistory.Client.ClientUtils.ParameterToMultiMap("", "startDate", startDate));
            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.FactSetTickHistory.Client.ClientUtils.ParameterToMultiMap("", "endDate", endDate));
            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.FactSetTickHistory.Client.ClientUtils.ParameterToMultiMap("", "mic", mic));
            if (responseFileType != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.FactSetTickHistory.Client.ClientUtils.ParameterToMultiMap("", "responseFileType", responseFileType));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.FactSetTickHistory.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = GetrequestIdLevel2ResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Get<
            Level2RequestFilesResponse>("/level2/request-files", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetrequestIdLevel2", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// Returns the requestId and status Returns the requestId and status.
        /// </summary>
        /// <exception cref="FactSet.SDK.FactSetTickHistory.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ticker">The requested list of one or more Market tickers.</param>
        /// <param name="startDate">The date to which data is required.</param>
        /// <param name="endDate">The date to which data is required.</param>
        /// <param name="mic">This parameter is used to filter the results based on the exchange code. &lt;p&gt;**NOTE**:Does not support multiple mic codes&lt;/p&gt;</param>
        /// <param name="responseFileType">Specifies the fileType (optional, default to parquet)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Level2RequestFilesResponse</returns>
        public async System.Threading.Tasks.Task<Level2RequestFilesResponse>GetrequestIdLevel2Async(List<string> ticker, DateTime startDate, DateTime endDate, string mic, string responseFileType = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await GetrequestIdLevel2WithHttpInfoAsync(ticker, startDate, endDate, mic, responseFileType, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns the requestId and status Returns the requestId and status.
        /// </summary>
        /// <exception cref="FactSet.SDK.FactSetTickHistory.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ticker">The requested list of one or more Market tickers.</param>
        /// <param name="startDate">The date to which data is required.</param>
        /// <param name="endDate">The date to which data is required.</param>
        /// <param name="mic">This parameter is used to filter the results based on the exchange code. &lt;p&gt;**NOTE**:Does not support multiple mic codes&lt;/p&gt;</param>
        /// <param name="responseFileType">Specifies the fileType (optional, default to parquet)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Level2RequestFilesResponse)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<Level2RequestFilesResponse>> GetrequestIdLevel2WithHttpInfoAsync(List<string> ticker, DateTime startDate, DateTime endDate, string mic, string responseFileType = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'ticker' is set
            if (ticker == null)
            {
                throw new FactSet.SDK.FactSetTickHistory.Client.ApiException(400, "Missing required parameter 'ticker' when calling RequestFilesLevel2BETAApi->GetrequestIdLevel2");
            }

            // verify the required parameter 'mic' is set
            if (mic == null)
            {
                throw new FactSet.SDK.FactSetTickHistory.Client.ApiException(400, "Missing required parameter 'mic' when calling RequestFilesLevel2BETAApi->GetrequestIdLevel2");
            }


            FactSet.SDK.FactSetTickHistory.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.FactSetTickHistory.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.FactSetTickHistory.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.FactSetTickHistory.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.FactSetTickHistory.Client.ClientUtils.ParameterToMultiMap("csv", "ticker", ticker));
            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.FactSetTickHistory.Client.ClientUtils.ParameterToMultiMap("", "startDate", startDate));
            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.FactSetTickHistory.Client.ClientUtils.ParameterToMultiMap("", "endDate", endDate));
            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.FactSetTickHistory.Client.ClientUtils.ParameterToMultiMap("", "mic", mic));
            if (responseFileType != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.FactSetTickHistory.Client.ClientUtils.ParameterToMultiMap("", "responseFileType", responseFileType));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.FactSetTickHistory.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = GetrequestIdLevel2ResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Level2RequestFilesResponse>("/level2/request-files", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetrequestIdLevel2", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
