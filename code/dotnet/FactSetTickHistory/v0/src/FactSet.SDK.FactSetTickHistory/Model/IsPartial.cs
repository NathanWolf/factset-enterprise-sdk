/*
 * Tick History Level 2 (Beta)
 *
 * Tick History **Level 2** provides dynamic access to the historical tick data up to 10 levels of depth for a specific security for specific dates or date range. The API generates output files with data based on client-specified input parameters. The input parameters include universe specification and date ranges for which the data will be generated. When the API request with specified input parameters has been completed, the output files will be made available back to the users through a secure URL to the location where the files are stored. Therefore, this API has two APIs (i) Request files API (ii) Get Files API.
 *
 * The version of the OpenAPI document: 0.0.0
 * Contact: api@factset.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = FactSet.SDK.FactSetTickHistory.Client.OpenAPIDateConverter;

namespace FactSet.SDK.FactSetTickHistory.Model
{
    /// <summary>
    /// If the value is true, it indicates additional results are available. False represents that this is the last set of results for this request.
    /// </summary>
    [DataContract(Name = "isPartial")]
    public partial class IsPartial : IEquatable<IsPartial>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="IsPartial" /> class.
        /// </summary>
        /// <param name="isPartial">Returns boolean value.</param>
        public IsPartial(bool isPartial = default(bool))
        {
            this._IsPartial = isPartial;
        }

        /// <summary>
        /// Returns boolean value
        /// </summary>
        /// <value>Returns boolean value</value>
        [DataMember(Name = "isPartial", EmitDefaultValue = true)]
        public bool _IsPartial { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class IsPartial {\n");
            sb.Append("  _IsPartial: ").Append(_IsPartial).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as IsPartial);
        }

        /// <summary>
        /// Returns true if IsPartial instances are equal
        /// </summary>
        /// <param name="input">Instance of IsPartial to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(IsPartial input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this._IsPartial == input._IsPartial ||
                    this._IsPartial.Equals(input._IsPartial)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this._IsPartial.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
