/*
 * Market Intelligence
 *
 * Through the Market Intelligence API, stay up to date on the companies and sectors you care most about with ease. Request the templates you have made in Market Intelligence to receive news and data on your portfolio.
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = FactSet.SDK.MarketIntelligence.Client.OpenAPIDateConverter;

namespace FactSet.SDK.MarketIntelligence.Model
{
    /// <summary>
    /// Response for the get-data call in a scenario where the report has not been refreshed.
    /// </summary>
    [DataContract(Name = "Fetch_Report_PollID")]
    public partial class FetchReportPollID : IEquatable<FetchReportPollID>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="FetchReportPollID" /> class.
        /// </summary>
        /// <param name="pollurl">Poll URL..</param>
        public FetchReportPollID(Object pollurl = default(Object))
        {
            this.Pollurl = pollurl;
        }

        /// <summary>
        /// Poll URL.
        /// </summary>
        /// <value>Poll URL.</value>
        [DataMember(Name = "Pollurl", EmitDefaultValue = false)]
        public Object Pollurl { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class FetchReportPollID {\n");
            sb.Append("  Pollurl: ").Append(Pollurl).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as FetchReportPollID);
        }

        /// <summary>
        /// Returns true if FetchReportPollID instances are equal
        /// </summary>
        /// <param name="input">Instance of FetchReportPollID to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FetchReportPollID input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Pollurl == input.Pollurl ||
                    (this.Pollurl != null &&
                    this.Pollurl.Equals(input.Pollurl))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Pollurl != null)
                {
                    hashCode = (hashCode * 59) + this.Pollurl.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
