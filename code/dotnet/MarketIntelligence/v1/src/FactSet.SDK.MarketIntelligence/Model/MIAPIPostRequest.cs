/*
 * Market Intelligence
 *
 * Through the Market Intelligence API, stay up to date on the companies and sectors you care most about with ease. Request the templates you have made in Market Intelligence to receive news and data on your portfolio.
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = FactSet.SDK.MarketIntelligence.Client.OpenAPIDateConverter;

namespace FactSet.SDK.MarketIntelligence.Model
{
    /// <summary>
    /// Post request allows users to pass the necessary parameters such as the report name, identifier, id type, time zone, and report content.
    /// </summary>
    [DataContract(Name = "MIAPIPostRequest")]
    public partial class MIAPIPostRequest : IEquatable<MIAPIPostRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="MIAPIPostRequest" /> class.
        /// </summary>
        /// <param name="reportName">report name.</param>
        /// <param name="identifier">Index or portfolio for which the report to be created..</param>
        /// <param name="idType">identifier type.</param>
        /// <param name="timeZone">Time zone for the report (this shall be utilized if a user wants to use the report via API and also from Workstation/web)..</param>
        /// <param name="content">content.</param>
        public MIAPIPostRequest(string reportName = default(string), string identifier = default(string), string idType = default(string), string timeZone = default(string), List<PostRequestExample> content = default(List<PostRequestExample>))
        {
            this.ReportName = reportName;
            this.Identifier = identifier;
            this.IdType = idType;
            this.TimeZone = timeZone;
            this.Content = content;
        }

        /// <summary>
        /// report name
        /// </summary>
        /// <value>report name</value>
        [DataMember(Name = "report_name", EmitDefaultValue = false)]
        public string ReportName { get; set; }

        /// <summary>
        /// Index or portfolio for which the report to be created.
        /// </summary>
        /// <value>Index or portfolio for which the report to be created.</value>
        [DataMember(Name = "identifier", EmitDefaultValue = false)]
        public string Identifier { get; set; }

        /// <summary>
        /// identifier type
        /// </summary>
        /// <value>identifier type</value>
        [DataMember(Name = "id_type", EmitDefaultValue = false)]
        public string IdType { get; set; }

        /// <summary>
        /// Time zone for the report (this shall be utilized if a user wants to use the report via API and also from Workstation/web).
        /// </summary>
        /// <value>Time zone for the report (this shall be utilized if a user wants to use the report via API and also from Workstation/web).</value>
        [DataMember(Name = "time_zone", EmitDefaultValue = false)]
        public string TimeZone { get; set; }

        /// <summary>
        /// Gets or Sets Content
        /// </summary>
        [DataMember(Name = "content", EmitDefaultValue = false)]
        public List<PostRequestExample> Content { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class MIAPIPostRequest {\n");
            sb.Append("  ReportName: ").Append(ReportName).Append("\n");
            sb.Append("  Identifier: ").Append(Identifier).Append("\n");
            sb.Append("  IdType: ").Append(IdType).Append("\n");
            sb.Append("  TimeZone: ").Append(TimeZone).Append("\n");
            sb.Append("  Content: ").Append(Content).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as MIAPIPostRequest);
        }

        /// <summary>
        /// Returns true if MIAPIPostRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of MIAPIPostRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(MIAPIPostRequest input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.ReportName == input.ReportName ||
                    (this.ReportName != null &&
                    this.ReportName.Equals(input.ReportName))
                ) && 
                (
                    this.Identifier == input.Identifier ||
                    (this.Identifier != null &&
                    this.Identifier.Equals(input.Identifier))
                ) && 
                (
                    this.IdType == input.IdType ||
                    (this.IdType != null &&
                    this.IdType.Equals(input.IdType))
                ) && 
                (
                    this.TimeZone == input.TimeZone ||
                    (this.TimeZone != null &&
                    this.TimeZone.Equals(input.TimeZone))
                ) && 
                (
                    this.Content == input.Content ||
                    this.Content != null &&
                    input.Content != null &&
                    this.Content.SequenceEqual(input.Content)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ReportName != null)
                {
                    hashCode = (hashCode * 59) + this.ReportName.GetHashCode();
                }
                if (this.Identifier != null)
                {
                    hashCode = (hashCode * 59) + this.Identifier.GetHashCode();
                }
                if (this.IdType != null)
                {
                    hashCode = (hashCode * 59) + this.IdType.GetHashCode();
                }
                if (this.TimeZone != null)
                {
                    hashCode = (hashCode * 59) + this.TimeZone.GetHashCode();
                }
                if (this.Content != null)
                {
                    hashCode = (hashCode * 59) + this.Content.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
