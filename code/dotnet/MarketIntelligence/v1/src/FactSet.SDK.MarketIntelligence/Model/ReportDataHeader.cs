/*
 * Market Intelligence
 *
 * Through the Market Intelligence API, stay up to date on the companies and sectors you care most about with ease. Request the templates you have made in Market Intelligence to receive news and data on your portfolio.
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = FactSet.SDK.MarketIntelligence.Client.OpenAPIDateConverter;

namespace FactSet.SDK.MarketIntelligence.Model
{
    /// <summary>
    /// ReportDataHeader
    /// </summary>
    [DataContract(Name = "Report_Data_Header")]
    public partial class ReportDataHeader : IEquatable<ReportDataHeader>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ReportDataHeader" /> class.
        /// </summary>
        /// <param name="subjectCategory">Column Title.</param>
        /// <param name="data">data.</param>
        public ReportDataHeader(string subjectCategory = default(string), List<ReportContent> data = default(List<ReportContent>))
        {
            this.SubjectCategory = subjectCategory;
            this.Data = data;
        }

        /// <summary>
        /// Column Title
        /// </summary>
        /// <value>Column Title</value>
        [DataMember(Name = "subject_category", EmitDefaultValue = false)]
        public string SubjectCategory { get; set; }

        /// <summary>
        /// Gets or Sets Data
        /// </summary>
        [DataMember(Name = "data", EmitDefaultValue = false)]
        public List<ReportContent> Data { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ReportDataHeader {\n");
            sb.Append("  SubjectCategory: ").Append(SubjectCategory).Append("\n");
            sb.Append("  Data: ").Append(Data).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ReportDataHeader);
        }

        /// <summary>
        /// Returns true if ReportDataHeader instances are equal
        /// </summary>
        /// <param name="input">Instance of ReportDataHeader to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ReportDataHeader input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.SubjectCategory == input.SubjectCategory ||
                    (this.SubjectCategory != null &&
                    this.SubjectCategory.Equals(input.SubjectCategory))
                ) && 
                (
                    this.Data == input.Data ||
                    this.Data != null &&
                    input.Data != null &&
                    this.Data.SequenceEqual(input.Data)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.SubjectCategory != null)
                {
                    hashCode = (hashCode * 59) + this.SubjectCategory.GetHashCode();
                }
                if (this.Data != null)
                {
                    hashCode = (hashCode * 59) + this.Data.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
