/*
 * Market Intelligence
 *
 * Through the Market Intelligence API, stay up to date on the companies and sectors you care most about with ease. Request the templates you have made in Market Intelligence to receive news and data on your portfolio.
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = FactSet.SDK.MarketIntelligence.Client.OpenAPIDateConverter;

namespace FactSet.SDK.MarketIntelligence.Model
{
    /// <summary>
    /// lowest level of data for table return
    /// </summary>
    [DataContract(Name = "Report_Content")]
    public partial class ReportContent : IEquatable<ReportContent>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ReportContent" /> class.
        /// </summary>
        /// <param name="subjectMatchedOrder">subjectMatchedOrder.</param>
        /// <param name="headline">headline.</param>
        /// <param name="storyDt">Content publishing date.</param>
        /// <param name="docDispContent">MI Content.</param>
        public ReportContent(string subjectMatchedOrder = default(string), string headline = default(string), string storyDt = default(string), string docDispContent = default(string))
        {
            this.SubjectMatchedOrder = subjectMatchedOrder;
            this.Headline = headline;
            this.StoryDt = storyDt;
            this.DocDispContent = docDispContent;
        }

        /// <summary>
        /// Gets or Sets SubjectMatchedOrder
        /// </summary>
        [DataMember(Name = "subject_matched_order", EmitDefaultValue = false)]
        public string SubjectMatchedOrder { get; set; }

        /// <summary>
        /// Gets or Sets Headline
        /// </summary>
        [DataMember(Name = "headline", EmitDefaultValue = false)]
        public string Headline { get; set; }

        /// <summary>
        /// Content publishing date
        /// </summary>
        /// <value>Content publishing date</value>
        [DataMember(Name = "story_dt", EmitDefaultValue = false)]
        public string StoryDt { get; set; }

        /// <summary>
        /// MI Content
        /// </summary>
        /// <value>MI Content</value>
        [DataMember(Name = "doc_disp_content", EmitDefaultValue = false)]
        public string DocDispContent { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ReportContent {\n");
            sb.Append("  SubjectMatchedOrder: ").Append(SubjectMatchedOrder).Append("\n");
            sb.Append("  Headline: ").Append(Headline).Append("\n");
            sb.Append("  StoryDt: ").Append(StoryDt).Append("\n");
            sb.Append("  DocDispContent: ").Append(DocDispContent).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ReportContent);
        }

        /// <summary>
        /// Returns true if ReportContent instances are equal
        /// </summary>
        /// <param name="input">Instance of ReportContent to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ReportContent input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.SubjectMatchedOrder == input.SubjectMatchedOrder ||
                    (this.SubjectMatchedOrder != null &&
                    this.SubjectMatchedOrder.Equals(input.SubjectMatchedOrder))
                ) && 
                (
                    this.Headline == input.Headline ||
                    (this.Headline != null &&
                    this.Headline.Equals(input.Headline))
                ) && 
                (
                    this.StoryDt == input.StoryDt ||
                    (this.StoryDt != null &&
                    this.StoryDt.Equals(input.StoryDt))
                ) && 
                (
                    this.DocDispContent == input.DocDispContent ||
                    (this.DocDispContent != null &&
                    this.DocDispContent.Equals(input.DocDispContent))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.SubjectMatchedOrder != null)
                {
                    hashCode = (hashCode * 59) + this.SubjectMatchedOrder.GetHashCode();
                }
                if (this.Headline != null)
                {
                    hashCode = (hashCode * 59) + this.Headline.GetHashCode();
                }
                if (this.StoryDt != null)
                {
                    hashCode = (hashCode * 59) + this.StoryDt.GetHashCode();
                }
                if (this.DocDispContent != null)
                {
                    hashCode = (hashCode * 59) + this.DocDispContent.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
