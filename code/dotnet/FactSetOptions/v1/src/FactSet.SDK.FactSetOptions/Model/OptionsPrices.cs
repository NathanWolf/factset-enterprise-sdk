/*
 * FactSet Options API
 *
 * The Option Prices database provides pricing data such as mid bid-ask price, reference data (e.g., strike price), and risk measures (e.g., Greeks and implied volatility). Visit [Options Overview OA Page # 14925](https://my.apps.factset.com/oa/pages/14925) for details on database coverage. U.S. exchange-traded option bid and ask quotes are continuously updated throughout the day even when no trades have occurred on the option (zero volume). The end-of-day closing bid and ask quotes are always in line with the underlying closing price.  **Note** * Currently in Beta only **OPRA** exchanges are supported. 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: api@factset.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = FactSet.SDK.FactSetOptions.Client.OpenAPIDateConverter;

namespace FactSet.SDK.FactSetOptions.Model
{
    /// <summary>
    /// The Options prices response object
    /// </summary>
    [DataContract(Name = "optionsPrices")]
    public partial class OptionsPrices : IEquatable<OptionsPrices>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="OptionsPrices" /> class.
        /// </summary>
        /// <param name="askTime">Returns the Bid time.</param>
        /// <param name="bidTime">Returns the Last Trade time.</param>
        /// <param name="date">The date of data in YYYY-MM-DD format.</param>
        /// <param name="fsymId">FactSet&#39;s Option Symbol. For more detail, visit [OA 12636](https://my.apps.factset.com/oa/pages/12636#options).</param>
        /// <param name="price52WeekHigh">52-Week High Price.</param>
        /// <param name="price52WeekLow">52-Week Low Price.</param>
        /// <param name="priceAsk">Ask price of the option.</param>
        /// <param name="priceBid">Bid price of the option.</param>
        /// <param name="priceMidBidAsk">Mid/Bid/Ask price of the option.</param>
        /// <param name="priceOpen">Open price of the option.</param>
        /// <param name="priceHigh">High price of the option.</param>
        /// <param name="priceLow">Low price of the option.</param>
        /// <param name="priceSettlement">Settlement price of the option.</param>
        /// <param name="priceStrike">The stated price per share for which underlying stock may be purchased (for a call) or sold (for a put) by the option holder upon exercise of the option contract..</param>
        /// <param name="priceUnderlying">The price of the security that must be delivered when a derivative contract, such as a put or call option, is exercised..</param>
        /// <param name="price">The price of the option based on the &#x60;quoteType&#x60; calculation. For US Options - Returns \&quot;Ask Price\&quot; if calc status&#x3D;&#x3D;20, otherwise returns \&quot;Mid Bid/Ask Price\&quot;. For International Options - Returns \&quot;Settlement Price\&quot;. .</param>
        /// <param name="quoteType">The calculated quote type, based on the calculated status. This represents the type for &#x60;price&#x60; field. For US Options - Returns \&quot;Ask Price\&quot; if calc status&#x3D;&#x3D;20, otherwise returns \&quot;Mid Bid/Ask Price\&quot;. For International Options - Returns \&quot;Settlement Price\&quot;. .</param>
        /// <param name="requestId">The requested identifier submitted in the query..</param>
        public OptionsPrices(double askTime = default(double), double bidTime = default(double), DateTime date = default(DateTime), string fsymId = default(string), double price52WeekHigh = default(double), double price52WeekLow = default(double), double priceAsk = default(double), double priceBid = default(double), double priceMidBidAsk = default(double), double priceOpen = default(double), double priceHigh = default(double), double priceLow = default(double), decimal priceSettlement = default(decimal), double priceStrike = default(double), double priceUnderlying = default(double), double price = default(double), string quoteType = default(string), string requestId = default(string))
        {
            this.AskTime = askTime;
            this.BidTime = bidTime;
            this.Date = date;
            this.FsymId = fsymId;
            this.Price52WeekHigh = price52WeekHigh;
            this.Price52WeekLow = price52WeekLow;
            this.PriceAsk = priceAsk;
            this.PriceBid = priceBid;
            this.PriceMidBidAsk = priceMidBidAsk;
            this.PriceOpen = priceOpen;
            this.PriceHigh = priceHigh;
            this.PriceLow = priceLow;
            this.PriceSettlement = priceSettlement;
            this.PriceStrike = priceStrike;
            this.PriceUnderlying = priceUnderlying;
            this.Price = price;
            this.QuoteType = quoteType;
            this.RequestId = requestId;
        }

        /// <summary>
        /// Returns the Bid time
        /// </summary>
        /// <value>Returns the Bid time</value>
        [DataMember(Name = "askTime", EmitDefaultValue = false)]
        public double AskTime { get; set; }

        /// <summary>
        /// Returns the Last Trade time
        /// </summary>
        /// <value>Returns the Last Trade time</value>
        [DataMember(Name = "bidTime", EmitDefaultValue = false)]
        public double BidTime { get; set; }

        /// <summary>
        /// The date of data in YYYY-MM-DD format
        /// </summary>
        /// <value>The date of data in YYYY-MM-DD format</value>
        [DataMember(Name = "date", EmitDefaultValue = false)]
        [JsonConverter(typeof(OpenAPIDateConverter))]
        public DateTime Date { get; set; }

        /// <summary>
        /// FactSet&#39;s Option Symbol. For more detail, visit [OA 12636](https://my.apps.factset.com/oa/pages/12636#options)
        /// </summary>
        /// <value>FactSet&#39;s Option Symbol. For more detail, visit [OA 12636](https://my.apps.factset.com/oa/pages/12636#options)</value>
        [DataMember(Name = "fsymId", EmitDefaultValue = false)]
        public string FsymId { get; set; }

        /// <summary>
        /// 52-Week High Price
        /// </summary>
        /// <value>52-Week High Price</value>
        [DataMember(Name = "price52WeekHigh", EmitDefaultValue = false)]
        public double Price52WeekHigh { get; set; }

        /// <summary>
        /// 52-Week Low Price
        /// </summary>
        /// <value>52-Week Low Price</value>
        [DataMember(Name = "price52WeekLow", EmitDefaultValue = false)]
        public double Price52WeekLow { get; set; }

        /// <summary>
        /// Ask price of the option
        /// </summary>
        /// <value>Ask price of the option</value>
        [DataMember(Name = "priceAsk", EmitDefaultValue = false)]
        public double PriceAsk { get; set; }

        /// <summary>
        /// Bid price of the option
        /// </summary>
        /// <value>Bid price of the option</value>
        [DataMember(Name = "priceBid", EmitDefaultValue = false)]
        public double PriceBid { get; set; }

        /// <summary>
        /// Mid/Bid/Ask price of the option
        /// </summary>
        /// <value>Mid/Bid/Ask price of the option</value>
        [DataMember(Name = "priceMidBidAsk", EmitDefaultValue = false)]
        public double PriceMidBidAsk { get; set; }

        /// <summary>
        /// Open price of the option
        /// </summary>
        /// <value>Open price of the option</value>
        [DataMember(Name = "priceOpen", EmitDefaultValue = false)]
        public double PriceOpen { get; set; }

        /// <summary>
        /// High price of the option
        /// </summary>
        /// <value>High price of the option</value>
        [DataMember(Name = "priceHigh", EmitDefaultValue = false)]
        public double PriceHigh { get; set; }

        /// <summary>
        /// Low price of the option
        /// </summary>
        /// <value>Low price of the option</value>
        [DataMember(Name = "priceLow", EmitDefaultValue = false)]
        public double PriceLow { get; set; }

        /// <summary>
        /// Settlement price of the option
        /// </summary>
        /// <value>Settlement price of the option</value>
        [DataMember(Name = "priceSettlement", EmitDefaultValue = false)]
        public decimal PriceSettlement { get; set; }

        /// <summary>
        /// The stated price per share for which underlying stock may be purchased (for a call) or sold (for a put) by the option holder upon exercise of the option contract.
        /// </summary>
        /// <value>The stated price per share for which underlying stock may be purchased (for a call) or sold (for a put) by the option holder upon exercise of the option contract.</value>
        [DataMember(Name = "priceStrike", EmitDefaultValue = false)]
        public double PriceStrike { get; set; }

        /// <summary>
        /// The price of the security that must be delivered when a derivative contract, such as a put or call option, is exercised.
        /// </summary>
        /// <value>The price of the security that must be delivered when a derivative contract, such as a put or call option, is exercised.</value>
        [DataMember(Name = "priceUnderlying", EmitDefaultValue = false)]
        public double PriceUnderlying { get; set; }

        /// <summary>
        /// The price of the option based on the &#x60;quoteType&#x60; calculation. For US Options - Returns \&quot;Ask Price\&quot; if calc status&#x3D;&#x3D;20, otherwise returns \&quot;Mid Bid/Ask Price\&quot;. For International Options - Returns \&quot;Settlement Price\&quot;. 
        /// </summary>
        /// <value>The price of the option based on the &#x60;quoteType&#x60; calculation. For US Options - Returns \&quot;Ask Price\&quot; if calc status&#x3D;&#x3D;20, otherwise returns \&quot;Mid Bid/Ask Price\&quot;. For International Options - Returns \&quot;Settlement Price\&quot;. </value>
        [DataMember(Name = "price", EmitDefaultValue = false)]
        public double Price { get; set; }

        /// <summary>
        /// The calculated quote type, based on the calculated status. This represents the type for &#x60;price&#x60; field. For US Options - Returns \&quot;Ask Price\&quot; if calc status&#x3D;&#x3D;20, otherwise returns \&quot;Mid Bid/Ask Price\&quot;. For International Options - Returns \&quot;Settlement Price\&quot;. 
        /// </summary>
        /// <value>The calculated quote type, based on the calculated status. This represents the type for &#x60;price&#x60; field. For US Options - Returns \&quot;Ask Price\&quot; if calc status&#x3D;&#x3D;20, otherwise returns \&quot;Mid Bid/Ask Price\&quot;. For International Options - Returns \&quot;Settlement Price\&quot;. </value>
        [DataMember(Name = "quoteType", EmitDefaultValue = false)]
        public string QuoteType { get; set; }

        /// <summary>
        /// The requested identifier submitted in the query.
        /// </summary>
        /// <value>The requested identifier submitted in the query.</value>
        [DataMember(Name = "requestId", EmitDefaultValue = false)]
        public string RequestId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class OptionsPrices {\n");
            sb.Append("  AskTime: ").Append(AskTime).Append("\n");
            sb.Append("  BidTime: ").Append(BidTime).Append("\n");
            sb.Append("  Date: ").Append(Date).Append("\n");
            sb.Append("  FsymId: ").Append(FsymId).Append("\n");
            sb.Append("  Price52WeekHigh: ").Append(Price52WeekHigh).Append("\n");
            sb.Append("  Price52WeekLow: ").Append(Price52WeekLow).Append("\n");
            sb.Append("  PriceAsk: ").Append(PriceAsk).Append("\n");
            sb.Append("  PriceBid: ").Append(PriceBid).Append("\n");
            sb.Append("  PriceMidBidAsk: ").Append(PriceMidBidAsk).Append("\n");
            sb.Append("  PriceOpen: ").Append(PriceOpen).Append("\n");
            sb.Append("  PriceHigh: ").Append(PriceHigh).Append("\n");
            sb.Append("  PriceLow: ").Append(PriceLow).Append("\n");
            sb.Append("  PriceSettlement: ").Append(PriceSettlement).Append("\n");
            sb.Append("  PriceStrike: ").Append(PriceStrike).Append("\n");
            sb.Append("  PriceUnderlying: ").Append(PriceUnderlying).Append("\n");
            sb.Append("  Price: ").Append(Price).Append("\n");
            sb.Append("  QuoteType: ").Append(QuoteType).Append("\n");
            sb.Append("  RequestId: ").Append(RequestId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as OptionsPrices);
        }

        /// <summary>
        /// Returns true if OptionsPrices instances are equal
        /// </summary>
        /// <param name="input">Instance of OptionsPrices to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(OptionsPrices input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.AskTime == input.AskTime ||
                    this.AskTime.Equals(input.AskTime)
                ) && 
                (
                    this.BidTime == input.BidTime ||
                    this.BidTime.Equals(input.BidTime)
                ) && 
                (
                    this.Date == input.Date ||
                    (this.Date != null &&
                    this.Date.Equals(input.Date))
                ) && 
                (
                    this.FsymId == input.FsymId ||
                    (this.FsymId != null &&
                    this.FsymId.Equals(input.FsymId))
                ) && 
                (
                    this.Price52WeekHigh == input.Price52WeekHigh ||
                    this.Price52WeekHigh.Equals(input.Price52WeekHigh)
                ) && 
                (
                    this.Price52WeekLow == input.Price52WeekLow ||
                    this.Price52WeekLow.Equals(input.Price52WeekLow)
                ) && 
                (
                    this.PriceAsk == input.PriceAsk ||
                    this.PriceAsk.Equals(input.PriceAsk)
                ) && 
                (
                    this.PriceBid == input.PriceBid ||
                    this.PriceBid.Equals(input.PriceBid)
                ) && 
                (
                    this.PriceMidBidAsk == input.PriceMidBidAsk ||
                    this.PriceMidBidAsk.Equals(input.PriceMidBidAsk)
                ) && 
                (
                    this.PriceOpen == input.PriceOpen ||
                    this.PriceOpen.Equals(input.PriceOpen)
                ) && 
                (
                    this.PriceHigh == input.PriceHigh ||
                    this.PriceHigh.Equals(input.PriceHigh)
                ) && 
                (
                    this.PriceLow == input.PriceLow ||
                    this.PriceLow.Equals(input.PriceLow)
                ) && 
                (
                    this.PriceSettlement == input.PriceSettlement ||
                    this.PriceSettlement.Equals(input.PriceSettlement)
                ) && 
                (
                    this.PriceStrike == input.PriceStrike ||
                    this.PriceStrike.Equals(input.PriceStrike)
                ) && 
                (
                    this.PriceUnderlying == input.PriceUnderlying ||
                    this.PriceUnderlying.Equals(input.PriceUnderlying)
                ) && 
                (
                    this.Price == input.Price ||
                    this.Price.Equals(input.Price)
                ) && 
                (
                    this.QuoteType == input.QuoteType ||
                    (this.QuoteType != null &&
                    this.QuoteType.Equals(input.QuoteType))
                ) && 
                (
                    this.RequestId == input.RequestId ||
                    (this.RequestId != null &&
                    this.RequestId.Equals(input.RequestId))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.AskTime.GetHashCode();
                hashCode = (hashCode * 59) + this.BidTime.GetHashCode();
                if (this.Date != null)
                {
                    hashCode = (hashCode * 59) + this.Date.GetHashCode();
                }
                if (this.FsymId != null)
                {
                    hashCode = (hashCode * 59) + this.FsymId.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Price52WeekHigh.GetHashCode();
                hashCode = (hashCode * 59) + this.Price52WeekLow.GetHashCode();
                hashCode = (hashCode * 59) + this.PriceAsk.GetHashCode();
                hashCode = (hashCode * 59) + this.PriceBid.GetHashCode();
                hashCode = (hashCode * 59) + this.PriceMidBidAsk.GetHashCode();
                hashCode = (hashCode * 59) + this.PriceOpen.GetHashCode();
                hashCode = (hashCode * 59) + this.PriceHigh.GetHashCode();
                hashCode = (hashCode * 59) + this.PriceLow.GetHashCode();
                hashCode = (hashCode * 59) + this.PriceSettlement.GetHashCode();
                hashCode = (hashCode * 59) + this.PriceStrike.GetHashCode();
                hashCode = (hashCode * 59) + this.PriceUnderlying.GetHashCode();
                hashCode = (hashCode * 59) + this.Price.GetHashCode();
                if (this.QuoteType != null)
                {
                    hashCode = (hashCode * 59) + this.QuoteType.GetHashCode();
                }
                if (this.RequestId != null)
                {
                    hashCode = (hashCode * 59) + this.RequestId.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
