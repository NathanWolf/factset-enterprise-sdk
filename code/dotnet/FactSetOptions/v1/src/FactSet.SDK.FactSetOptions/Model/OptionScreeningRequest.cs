/*
 * FactSet Options API
 *
 * The Option Prices database provides pricing data such as mid bid-ask price, reference data (e.g., strike price), and risk measures (e.g., Greeks and implied volatility). Visit [Options Overview OA Page # 14925](https://my.apps.factset.com/oa/pages/14925) for details on database coverage. U.S. exchange-traded option bid and ask quotes are continuously updated throughout the day even when no trades have occurred on the option (zero volume). The end-of-day closing bid and ask quotes are always in line with the underlying closing price.  **Note** * Currently in Beta only **OPRA** exchanges are supported. 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: api@factset.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = FactSet.SDK.FactSetOptions.Client.OpenAPIDateConverter;

namespace FactSet.SDK.FactSetOptions.Model
{
    /// <summary>
    /// Options Screening Request allowing for up to three Conditions using AND Logic. |conditions|description| |- --|- --| |P_OPT_UNDERLYING_SECURITY_E|Underlying Security Equal To| |P_OPT_STRIKE_PRICE_E|Strike Price Equal To| |P_OPT_EXP_DATEN_E|Expiration Date (YYYYMMDD) Equal To| |P_OPT_VOLUME_G|Volume Greater Than| |P_OPT_VOLUME_GE|Volume Greater Than or Equal To| |P_OPT_VOLUME_L|Volume Less Than| |P_OPT_VOLUME_LE|Volume Less Than or Equal To| |P_OPT_VOLUME_E|Volume Equal To| |P_OPT_OPTION_TYPE_E|Option Type (1&#x3D; Equity, 2&#x3D;Index)| |P_OPT_CALL_OR_PUT_E|Call or Put (0&#x3D;Call, 1&#x3D;Put)| 
    /// </summary>
    [DataContract(Name = "optionScreeningRequest")]
    public partial class OptionScreeningRequest : IEquatable<OptionScreeningRequest>, IValidatableObject
    {
        /// <summary>
        /// The primary condition.
        /// </summary>
        /// <value>The primary condition.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ConditionOneEnum
        {
            /// <summary>
            /// Enum UNDERLYINGSECURITYE for value: P_OPT_UNDERLYING_SECURITY_E
            /// </summary>
            [EnumMember(Value = "P_OPT_UNDERLYING_SECURITY_E")]
            UNDERLYINGSECURITYE = 1,

            /// <summary>
            /// Enum STRIKEPRICEE for value: P_OPT_STRIKE_PRICE_E
            /// </summary>
            [EnumMember(Value = "P_OPT_STRIKE_PRICE_E")]
            STRIKEPRICEE = 2,

            /// <summary>
            /// Enum EXPDATENE for value: P_OPT_EXP_DATEN_E
            /// </summary>
            [EnumMember(Value = "P_OPT_EXP_DATEN_E")]
            EXPDATENE = 3,

            /// <summary>
            /// Enum VOLUMEG for value: P_OPT_VOLUME_G
            /// </summary>
            [EnumMember(Value = "P_OPT_VOLUME_G")]
            VOLUMEG = 4,

            /// <summary>
            /// Enum VOLUMEGE for value: P_OPT_VOLUME_GE
            /// </summary>
            [EnumMember(Value = "P_OPT_VOLUME_GE")]
            VOLUMEGE = 5,

            /// <summary>
            /// Enum VOLUMEL for value: P_OPT_VOLUME_L
            /// </summary>
            [EnumMember(Value = "P_OPT_VOLUME_L")]
            VOLUMEL = 6,

            /// <summary>
            /// Enum VOLUMELE for value: P_OPT_VOLUME_LE
            /// </summary>
            [EnumMember(Value = "P_OPT_VOLUME_LE")]
            VOLUMELE = 7,

            /// <summary>
            /// Enum VOLUMEE for value: P_OPT_VOLUME_E
            /// </summary>
            [EnumMember(Value = "P_OPT_VOLUME_E")]
            VOLUMEE = 8,

            /// <summary>
            /// Enum OPTIONTYPEE for value: P_OPT_OPTION_TYPE_E
            /// </summary>
            [EnumMember(Value = "P_OPT_OPTION_TYPE_E")]
            OPTIONTYPEE = 9,

            /// <summary>
            /// Enum CALLORPUTE for value: P_OPT_CALL_OR_PUT_E
            /// </summary>
            [EnumMember(Value = "P_OPT_CALL_OR_PUT_E")]
            CALLORPUTE = 10

        }


        /// <summary>
        /// The primary condition.
        /// </summary>
        /// <value>The primary condition.</value>
        [DataMember(Name = "conditionOne", IsRequired = true, EmitDefaultValue = false)]
        public ConditionOneEnum ConditionOne { get; set; }
        /// <summary>
        /// Defines ConditionTwo
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ConditionTwoEnum
        {
            /// <summary>
            /// Enum UNDERLYINGSECURITYE for value: P_OPT_UNDERLYING_SECURITY_E
            /// </summary>
            [EnumMember(Value = "P_OPT_UNDERLYING_SECURITY_E")]
            UNDERLYINGSECURITYE = 1,

            /// <summary>
            /// Enum STRIKEPRICEE for value: P_OPT_STRIKE_PRICE_E
            /// </summary>
            [EnumMember(Value = "P_OPT_STRIKE_PRICE_E")]
            STRIKEPRICEE = 2,

            /// <summary>
            /// Enum EXPDATENE for value: P_OPT_EXP_DATEN_E
            /// </summary>
            [EnumMember(Value = "P_OPT_EXP_DATEN_E")]
            EXPDATENE = 3,

            /// <summary>
            /// Enum VOLUMEG for value: P_OPT_VOLUME_G
            /// </summary>
            [EnumMember(Value = "P_OPT_VOLUME_G")]
            VOLUMEG = 4,

            /// <summary>
            /// Enum VOLUMEGE for value: P_OPT_VOLUME_GE
            /// </summary>
            [EnumMember(Value = "P_OPT_VOLUME_GE")]
            VOLUMEGE = 5,

            /// <summary>
            /// Enum VOLUMEL for value: P_OPT_VOLUME_L
            /// </summary>
            [EnumMember(Value = "P_OPT_VOLUME_L")]
            VOLUMEL = 6,

            /// <summary>
            /// Enum VOLUMELE for value: P_OPT_VOLUME_LE
            /// </summary>
            [EnumMember(Value = "P_OPT_VOLUME_LE")]
            VOLUMELE = 7,

            /// <summary>
            /// Enum VOLUMEE for value: P_OPT_VOLUME_E
            /// </summary>
            [EnumMember(Value = "P_OPT_VOLUME_E")]
            VOLUMEE = 8,

            /// <summary>
            /// Enum OPTIONTYPEE for value: P_OPT_OPTION_TYPE_E
            /// </summary>
            [EnumMember(Value = "P_OPT_OPTION_TYPE_E")]
            OPTIONTYPEE = 9,

            /// <summary>
            /// Enum CALLORPUTE for value: P_OPT_CALL_OR_PUT_E
            /// </summary>
            [EnumMember(Value = "P_OPT_CALL_OR_PUT_E")]
            CALLORPUTE = 10

        }


        /// <summary>
        /// Gets or Sets ConditionTwo
        /// </summary>
        [DataMember(Name = "conditionTwo", EmitDefaultValue = false)]
        public ConditionTwoEnum? ConditionTwo { get; set; }
        /// <summary>
        /// Defines ConditionThree
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ConditionThreeEnum
        {
            /// <summary>
            /// Enum UNDERLYINGSECURITYE for value: P_OPT_UNDERLYING_SECURITY_E
            /// </summary>
            [EnumMember(Value = "P_OPT_UNDERLYING_SECURITY_E")]
            UNDERLYINGSECURITYE = 1,

            /// <summary>
            /// Enum STRIKEPRICEE for value: P_OPT_STRIKE_PRICE_E
            /// </summary>
            [EnumMember(Value = "P_OPT_STRIKE_PRICE_E")]
            STRIKEPRICEE = 2,

            /// <summary>
            /// Enum EXPDATENE for value: P_OPT_EXP_DATEN_E
            /// </summary>
            [EnumMember(Value = "P_OPT_EXP_DATEN_E")]
            EXPDATENE = 3,

            /// <summary>
            /// Enum VOLUMEG for value: P_OPT_VOLUME_G
            /// </summary>
            [EnumMember(Value = "P_OPT_VOLUME_G")]
            VOLUMEG = 4,

            /// <summary>
            /// Enum VOLUMEGE for value: P_OPT_VOLUME_GE
            /// </summary>
            [EnumMember(Value = "P_OPT_VOLUME_GE")]
            VOLUMEGE = 5,

            /// <summary>
            /// Enum VOLUMEL for value: P_OPT_VOLUME_L
            /// </summary>
            [EnumMember(Value = "P_OPT_VOLUME_L")]
            VOLUMEL = 6,

            /// <summary>
            /// Enum VOLUMELE for value: P_OPT_VOLUME_LE
            /// </summary>
            [EnumMember(Value = "P_OPT_VOLUME_LE")]
            VOLUMELE = 7,

            /// <summary>
            /// Enum VOLUMEE for value: P_OPT_VOLUME_E
            /// </summary>
            [EnumMember(Value = "P_OPT_VOLUME_E")]
            VOLUMEE = 8,

            /// <summary>
            /// Enum OPTIONTYPEE for value: P_OPT_OPTION_TYPE_E
            /// </summary>
            [EnumMember(Value = "P_OPT_OPTION_TYPE_E")]
            OPTIONTYPEE = 9,

            /// <summary>
            /// Enum CALLORPUTE for value: P_OPT_CALL_OR_PUT_E
            /// </summary>
            [EnumMember(Value = "P_OPT_CALL_OR_PUT_E")]
            CALLORPUTE = 10

        }


        /// <summary>
        /// Gets or Sets ConditionThree
        /// </summary>
        [DataMember(Name = "conditionThree", EmitDefaultValue = false)]
        public ConditionThreeEnum? ConditionThree { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="OptionScreeningRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected OptionScreeningRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="OptionScreeningRequest" /> class.
        /// </summary>
        /// <param name="ids">ids (required).</param>
        /// <param name="conditionOne">The primary condition. (required).</param>
        /// <param name="conditionOneValue">conditionOneValue (required).</param>
        /// <param name="conditionTwo">conditionTwo.</param>
        /// <param name="conditionTwoValue">conditionTwoValue.</param>
        /// <param name="conditionThree">conditionThree.</param>
        /// <param name="conditionThreeValue">conditionThreeValue.</param>
        /// <param name="date">date.</param>
        public OptionScreeningRequest(ExchangeScreeningId ids, ConditionOneEnum conditionOne, string conditionOneValue,ConditionTwoEnum? conditionTwo = default(ConditionTwoEnum?), string conditionTwoValue = default(string), ConditionThreeEnum? conditionThree = default(ConditionThreeEnum?), string conditionThreeValue = default(string), string date = default(string))
        {
            // to ensure "ids" is required (not null)
            if (ids == null) {
                throw new ArgumentNullException("ids is a required property for OptionScreeningRequest and cannot be null");
            }
            this.Ids = ids;
            this.ConditionOne = conditionOne;
            // to ensure "conditionOneValue" is required (not null)
            if (conditionOneValue == null) {
                throw new ArgumentNullException("conditionOneValue is a required property for OptionScreeningRequest and cannot be null");
            }
            this.ConditionOneValue = conditionOneValue;
            this.ConditionTwo = conditionTwo;
            this.ConditionTwoValue = conditionTwoValue;
            this.ConditionThree = conditionThree;
            this.ConditionThreeValue = conditionThreeValue;
            this.Date = date;
        }

        /// <summary>
        /// Gets or Sets Ids
        /// </summary>
        [DataMember(Name = "ids", IsRequired = true, EmitDefaultValue = false)]
        public ExchangeScreeningId Ids { get; set; }

        /// <summary>
        /// Gets or Sets ConditionOneValue
        /// </summary>
        [DataMember(Name = "conditionOneValue", IsRequired = true, EmitDefaultValue = false)]
        public string ConditionOneValue { get; set; }

        /// <summary>
        /// Gets or Sets ConditionTwoValue
        /// </summary>
        [DataMember(Name = "conditionTwoValue", EmitDefaultValue = false)]
        public string ConditionTwoValue { get; set; }

        /// <summary>
        /// Gets or Sets ConditionThreeValue
        /// </summary>
        [DataMember(Name = "conditionThreeValue", EmitDefaultValue = false)]
        public string ConditionThreeValue { get; set; }

        /// <summary>
        /// Gets or Sets Date
        /// </summary>
        [DataMember(Name = "date", EmitDefaultValue = false)]
        public string Date { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class OptionScreeningRequest {\n");
            sb.Append("  Ids: ").Append(Ids).Append("\n");
            sb.Append("  ConditionOne: ").Append(ConditionOne).Append("\n");
            sb.Append("  ConditionOneValue: ").Append(ConditionOneValue).Append("\n");
            sb.Append("  ConditionTwo: ").Append(ConditionTwo).Append("\n");
            sb.Append("  ConditionTwoValue: ").Append(ConditionTwoValue).Append("\n");
            sb.Append("  ConditionThree: ").Append(ConditionThree).Append("\n");
            sb.Append("  ConditionThreeValue: ").Append(ConditionThreeValue).Append("\n");
            sb.Append("  Date: ").Append(Date).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as OptionScreeningRequest);
        }

        /// <summary>
        /// Returns true if OptionScreeningRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of OptionScreeningRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(OptionScreeningRequest input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Ids == input.Ids ||
                    (this.Ids != null &&
                    this.Ids.Equals(input.Ids))
                ) && 
                (
                    this.ConditionOne == input.ConditionOne ||
                    this.ConditionOne.Equals(input.ConditionOne)
                ) && 
                (
                    this.ConditionOneValue == input.ConditionOneValue ||
                    (this.ConditionOneValue != null &&
                    this.ConditionOneValue.Equals(input.ConditionOneValue))
                ) && 
                (
                    this.ConditionTwo == input.ConditionTwo ||
                    this.ConditionTwo.Equals(input.ConditionTwo)
                ) && 
                (
                    this.ConditionTwoValue == input.ConditionTwoValue ||
                    (this.ConditionTwoValue != null &&
                    this.ConditionTwoValue.Equals(input.ConditionTwoValue))
                ) && 
                (
                    this.ConditionThree == input.ConditionThree ||
                    this.ConditionThree.Equals(input.ConditionThree)
                ) && 
                (
                    this.ConditionThreeValue == input.ConditionThreeValue ||
                    (this.ConditionThreeValue != null &&
                    this.ConditionThreeValue.Equals(input.ConditionThreeValue))
                ) && 
                (
                    this.Date == input.Date ||
                    (this.Date != null &&
                    this.Date.Equals(input.Date))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Ids != null)
                {
                    hashCode = (hashCode * 59) + this.Ids.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.ConditionOne.GetHashCode();
                if (this.ConditionOneValue != null)
                {
                    hashCode = (hashCode * 59) + this.ConditionOneValue.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.ConditionTwo.GetHashCode();
                if (this.ConditionTwoValue != null)
                {
                    hashCode = (hashCode * 59) + this.ConditionTwoValue.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.ConditionThree.GetHashCode();
                if (this.ConditionThreeValue != null)
                {
                    hashCode = (hashCode * 59) + this.ConditionThreeValue.GetHashCode();
                }
                if (this.Date != null)
                {
                    hashCode = (hashCode * 59) + this.Date.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
