/*
 * FactSet Options API
 *
 * The Option Prices database provides pricing data such as mid bid-ask price, reference data (e.g., strike price), and risk measures (e.g., Greeks and implied volatility). Visit [Options Overview OA Page # 14925](https://my.apps.factset.com/oa/pages/14925) for details on database coverage. U.S. exchange-traded option bid and ask quotes are continuously updated throughout the day even when no trades have occurred on the option (zero volume). The end-of-day closing bid and ask quotes are always in line with the underlying closing price.  **Note** * Currently in Beta only **OPRA** exchanges are supported. 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: api@factset.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = FactSet.SDK.FactSetOptions.Client.OpenAPIDateConverter;

namespace FactSet.SDK.FactSetOptions.Model
{
    /// <summary>
    /// Underlying Volume response fields
    /// </summary>
    [DataContract(Name = "underlyingVolume")]
    public partial class UnderlyingVolume : IEquatable<UnderlyingVolume>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="UnderlyingVolume" /> class.
        /// </summary>
        /// <param name="date">The date of data as of the YYYY-MM-DD format..</param>
        /// <param name="exchange">Option Exchange ISO. Visit [OA 14925](https://my.apps.factset.com/oa/pages/14925) for a list of Exchange ISOs..</param>
        /// <param name="fsymId">FactSet&#39;s Security Permanent Identifier for input security in XXXXXX-S format..</param>
        /// <param name="putCallRatio">Put/Call Ratio (Open Interest).</param>
        /// <param name="requestId">The requested identifier submitted in the query..</param>
        /// <param name="totalCallOpenInterest">Total Call Open Interest.</param>
        /// <param name="totalCallVolume">Total Call Volume.</param>
        /// <param name="totalPutCallOpenInterest">Total Call/Put Open Interest.</param>
        /// <param name="totalPutCallVolume">Total Call/Put Volume.</param>
        /// <param name="totalPutOpenInterest">Total Put Open Interest.</param>
        /// <param name="totalPutVolume">Total Put Volume.</param>
        public UnderlyingVolume(DateTime? date = default(DateTime?), string exchange = default(string), string fsymId = default(string), double? putCallRatio = default(double?), string requestId = default(string), decimal? totalCallOpenInterest = default(decimal?), double? totalCallVolume = default(double?), decimal? totalPutCallOpenInterest = default(decimal?), double? totalPutCallVolume = default(double?), decimal? totalPutOpenInterest = default(decimal?), double? totalPutVolume = default(double?))
        {
            this.Date = date;
            this.Exchange = exchange;
            this.FsymId = fsymId;
            this.PutCallRatio = putCallRatio;
            this.RequestId = requestId;
            this.TotalCallOpenInterest = totalCallOpenInterest;
            this.TotalCallVolume = totalCallVolume;
            this.TotalPutCallOpenInterest = totalPutCallOpenInterest;
            this.TotalPutCallVolume = totalPutCallVolume;
            this.TotalPutOpenInterest = totalPutOpenInterest;
            this.TotalPutVolume = totalPutVolume;
        }

        /// <summary>
        /// The date of data as of the YYYY-MM-DD format.
        /// </summary>
        /// <value>The date of data as of the YYYY-MM-DD format.</value>
        [DataMember(Name = "date", EmitDefaultValue = true)]
        [JsonConverter(typeof(OpenAPIDateConverter))]
        public DateTime? Date { get; set; }

        /// <summary>
        /// Option Exchange ISO. Visit [OA 14925](https://my.apps.factset.com/oa/pages/14925) for a list of Exchange ISOs.
        /// </summary>
        /// <value>Option Exchange ISO. Visit [OA 14925](https://my.apps.factset.com/oa/pages/14925) for a list of Exchange ISOs.</value>
        [DataMember(Name = "exchange", EmitDefaultValue = true)]
        public string Exchange { get; set; }

        /// <summary>
        /// FactSet&#39;s Security Permanent Identifier for input security in XXXXXX-S format.
        /// </summary>
        /// <value>FactSet&#39;s Security Permanent Identifier for input security in XXXXXX-S format.</value>
        [DataMember(Name = "fsymId", EmitDefaultValue = true)]
        public string FsymId { get; set; }

        /// <summary>
        /// Put/Call Ratio (Open Interest)
        /// </summary>
        /// <value>Put/Call Ratio (Open Interest)</value>
        [DataMember(Name = "putCallRatio", EmitDefaultValue = true)]
        public double? PutCallRatio { get; set; }

        /// <summary>
        /// The requested identifier submitted in the query.
        /// </summary>
        /// <value>The requested identifier submitted in the query.</value>
        [DataMember(Name = "requestId", EmitDefaultValue = false)]
        public string RequestId { get; set; }

        /// <summary>
        /// Total Call Open Interest
        /// </summary>
        /// <value>Total Call Open Interest</value>
        [DataMember(Name = "totalCallOpenInterest", EmitDefaultValue = true)]
        public decimal? TotalCallOpenInterest { get; set; }

        /// <summary>
        /// Total Call Volume
        /// </summary>
        /// <value>Total Call Volume</value>
        [DataMember(Name = "totalCallVolume", EmitDefaultValue = true)]
        public double? TotalCallVolume { get; set; }

        /// <summary>
        /// Total Call/Put Open Interest
        /// </summary>
        /// <value>Total Call/Put Open Interest</value>
        [DataMember(Name = "totalPutCallOpenInterest", EmitDefaultValue = true)]
        public decimal? TotalPutCallOpenInterest { get; set; }

        /// <summary>
        /// Total Call/Put Volume
        /// </summary>
        /// <value>Total Call/Put Volume</value>
        [DataMember(Name = "totalPutCallVolume", EmitDefaultValue = true)]
        public double? TotalPutCallVolume { get; set; }

        /// <summary>
        /// Total Put Open Interest
        /// </summary>
        /// <value>Total Put Open Interest</value>
        [DataMember(Name = "totalPutOpenInterest", EmitDefaultValue = true)]
        public decimal? TotalPutOpenInterest { get; set; }

        /// <summary>
        /// Total Put Volume
        /// </summary>
        /// <value>Total Put Volume</value>
        [DataMember(Name = "totalPutVolume", EmitDefaultValue = true)]
        public double? TotalPutVolume { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class UnderlyingVolume {\n");
            sb.Append("  Date: ").Append(Date).Append("\n");
            sb.Append("  Exchange: ").Append(Exchange).Append("\n");
            sb.Append("  FsymId: ").Append(FsymId).Append("\n");
            sb.Append("  PutCallRatio: ").Append(PutCallRatio).Append("\n");
            sb.Append("  RequestId: ").Append(RequestId).Append("\n");
            sb.Append("  TotalCallOpenInterest: ").Append(TotalCallOpenInterest).Append("\n");
            sb.Append("  TotalCallVolume: ").Append(TotalCallVolume).Append("\n");
            sb.Append("  TotalPutCallOpenInterest: ").Append(TotalPutCallOpenInterest).Append("\n");
            sb.Append("  TotalPutCallVolume: ").Append(TotalPutCallVolume).Append("\n");
            sb.Append("  TotalPutOpenInterest: ").Append(TotalPutOpenInterest).Append("\n");
            sb.Append("  TotalPutVolume: ").Append(TotalPutVolume).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as UnderlyingVolume);
        }

        /// <summary>
        /// Returns true if UnderlyingVolume instances are equal
        /// </summary>
        /// <param name="input">Instance of UnderlyingVolume to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(UnderlyingVolume input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Date == input.Date ||
                    (this.Date != null &&
                    this.Date.Equals(input.Date))
                ) && 
                (
                    this.Exchange == input.Exchange ||
                    (this.Exchange != null &&
                    this.Exchange.Equals(input.Exchange))
                ) && 
                (
                    this.FsymId == input.FsymId ||
                    (this.FsymId != null &&
                    this.FsymId.Equals(input.FsymId))
                ) && 
                (
                    this.PutCallRatio == input.PutCallRatio ||
                    (this.PutCallRatio != null &&
                    this.PutCallRatio.Equals(input.PutCallRatio))
                ) && 
                (
                    this.RequestId == input.RequestId ||
                    (this.RequestId != null &&
                    this.RequestId.Equals(input.RequestId))
                ) && 
                (
                    this.TotalCallOpenInterest == input.TotalCallOpenInterest ||
                    (this.TotalCallOpenInterest != null &&
                    this.TotalCallOpenInterest.Equals(input.TotalCallOpenInterest))
                ) && 
                (
                    this.TotalCallVolume == input.TotalCallVolume ||
                    (this.TotalCallVolume != null &&
                    this.TotalCallVolume.Equals(input.TotalCallVolume))
                ) && 
                (
                    this.TotalPutCallOpenInterest == input.TotalPutCallOpenInterest ||
                    (this.TotalPutCallOpenInterest != null &&
                    this.TotalPutCallOpenInterest.Equals(input.TotalPutCallOpenInterest))
                ) && 
                (
                    this.TotalPutCallVolume == input.TotalPutCallVolume ||
                    (this.TotalPutCallVolume != null &&
                    this.TotalPutCallVolume.Equals(input.TotalPutCallVolume))
                ) && 
                (
                    this.TotalPutOpenInterest == input.TotalPutOpenInterest ||
                    (this.TotalPutOpenInterest != null &&
                    this.TotalPutOpenInterest.Equals(input.TotalPutOpenInterest))
                ) && 
                (
                    this.TotalPutVolume == input.TotalPutVolume ||
                    (this.TotalPutVolume != null &&
                    this.TotalPutVolume.Equals(input.TotalPutVolume))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Date != null)
                {
                    hashCode = (hashCode * 59) + this.Date.GetHashCode();
                }
                if (this.Exchange != null)
                {
                    hashCode = (hashCode * 59) + this.Exchange.GetHashCode();
                }
                if (this.FsymId != null)
                {
                    hashCode = (hashCode * 59) + this.FsymId.GetHashCode();
                }
                if (this.PutCallRatio != null)
                {
                    hashCode = (hashCode * 59) + this.PutCallRatio.GetHashCode();
                }
                if (this.RequestId != null)
                {
                    hashCode = (hashCode * 59) + this.RequestId.GetHashCode();
                }
                if (this.TotalCallOpenInterest != null)
                {
                    hashCode = (hashCode * 59) + this.TotalCallOpenInterest.GetHashCode();
                }
                if (this.TotalCallVolume != null)
                {
                    hashCode = (hashCode * 59) + this.TotalCallVolume.GetHashCode();
                }
                if (this.TotalPutCallOpenInterest != null)
                {
                    hashCode = (hashCode * 59) + this.TotalPutCallOpenInterest.GetHashCode();
                }
                if (this.TotalPutCallVolume != null)
                {
                    hashCode = (hashCode * 59) + this.TotalPutCallVolume.GetHashCode();
                }
                if (this.TotalPutOpenInterest != null)
                {
                    hashCode = (hashCode * 59) + this.TotalPutOpenInterest.GetHashCode();
                }
                if (this.TotalPutVolume != null)
                {
                    hashCode = (hashCode * 59) + this.TotalPutVolume.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
