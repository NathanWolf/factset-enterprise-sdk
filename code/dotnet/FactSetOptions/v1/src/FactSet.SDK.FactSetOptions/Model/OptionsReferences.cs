/*
 * FactSet Options API
 *
 * The Option Prices database provides pricing data such as mid bid-ask price, reference data (e.g., strike price), and risk measures (e.g., Greeks and implied volatility). Visit [Options Overview OA Page # 14925](https://my.apps.factset.com/oa/pages/14925) for details on database coverage. U.S. exchange-traded option bid and ask quotes are continuously updated throughout the day even when no trades have occurred on the option (zero volume). The end-of-day closing bid and ask quotes are always in line with the underlying closing price.  **Note** * Currently in Beta only **OPRA** exchanges are supported. 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: api@factset.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = FactSet.SDK.FactSetOptions.Client.OpenAPIDateConverter;

namespace FactSet.SDK.FactSetOptions.Model
{
    /// <summary>
    /// Options Reference Response Fields
    /// </summary>
    [DataContract(Name = "optionsReferences")]
    public partial class OptionsReferences : IEquatable<OptionsReferences>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="OptionsReferences" /> class.
        /// </summary>
        /// <param name="fsymId">FactSet&#39;s Option Symbol. For more detail, visit [OA 12636](https://my.apps.factset.com/oa/pages/12636#options).</param>
        /// <param name="adjustedFlag">Indicates whether or not a given option contract is adjusted for corporate actions in Y/N format..</param>
        /// <param name="callPutFlag">Returns a 0 if the option is a call, returns a 1 if the option is a put..</param>
        /// <param name="callPutPairSymbol">Returns the corresponding put symbol given a call symbol; and vice-versa..</param>
        /// <param name="contractSize">The Option Contract Size.</param>
        /// <param name="currency">Option Currency in ISO3 format..</param>
        /// <param name="exchange">Option Exchange ISO. Visit [OA 14925](https://my.apps.factset.com/oa/pages/14925) for a list of Exchange ISOs..</param>
        /// <param name="expirationDate">The date on which an options contract is no longer valid and, therefore, ceases to exist, in YYYY-MM-DD format.</param>
        /// <param name="expirationFrequency">Returns the corresponding expiration frequency for a given option symbol. If an option has more than four expiration months, then a Long-term Equity Anticipation Security (LEAPS) indicator will be returned..</param>
        /// <param name="expirationMonth">Option Expiration month in MMM format..</param>
        /// <param name="lepoFlag">Indicates whether or not a given options contract is a Low Exercise Price Option \&quot;LEPO\&quot; (0/1). This is unique to European Options (e.g. ASX exchange)..</param>
        /// <param name="name">Option Descriptive Security Name.</param>
        /// <param name="occ21Symbol">Options Clearing Corporation OSI Series Key This option symbol has up to 21 alphanumeric characters (excluding -ISO and # sign) and uses the following syntax- (Underlying Symbol + # + Expiration Year + Expiration Month + Expiration Day + Call/Put Indicator + Five-Digit Strike Dollar + Three-Digit Strike Decimal + - + ISO) .</param>
        /// <param name="opra17Symbol">Options Price Reporting Authority&#39;s OSI Series Key. This option symbol has up to 17 alphanumeric characters (excluding the -ISO and #) and uses the following syntax - (Underlying Symbol + # + Call/Put Expiration Month Code + Expiration Day + Expiration Year + Decimal Indicator + Strike Price + - + ISO) .</param>
        /// <param name="rootTicker">The Root Ticker for the underlying security..</param>
        /// <param name="style">Returns the style of the option id requested, where -   |style|description| |- --|- --| |0|American| |1|European|  An American style option can be exercised anytime during its life. The majority of exchange-traded options are American.  Since investors have the freedom to exercise their American options at any point during the life of the contract, they are more valuable than European options which can only be exercised at maturity.  Consider this example -  If you bought a Ford March Call option expiring in March of 2006 in March 2005, you would have the right to exercise the call option at anytime up until its expiration date. Had the Ford option been a European option, you could only exercise the option at the expiry date in March &#39;06. During the year, the share price could have been most optimal for exercise in December of 2005, but you would have to wait to exercise your option until March 2006, where it could be out-of-the-money and virtually worthless.  Note that the name of this option style has nothing to do with the geographic location. .</param>
        /// <param name="type">The option type code, where  |code|description| |- --|- --| |0|Equity Option| |2|Index Option| |99|Option on an ETF| |60|Option on a Future| |19|Option on a Spot FX Rate| .</param>
        /// <param name="underlyingFsymSecurityId">Underlying FactSet Security Permanent Identifier in XXXXXX-S format..</param>
        /// <param name="date">The date the data is as of in YYYY-MM-DD format..</param>
        /// <param name="settlementMethod">The contract settlement method. Possible values are - |method|description| |- --|- --| |C|Cash| |P|Physical| |NA|Not Covered| .</param>
        /// <param name="requestId">The requested identifier submitted in the query..</param>
        public OptionsReferences(string fsymId = default(string), string adjustedFlag = default(string), int? callPutFlag = default(int?), string callPutPairSymbol = default(string), int? contractSize = default(int?), string currency = default(string), string exchange = default(string), DateTime? expirationDate = default(DateTime?), string expirationFrequency = default(string), string expirationMonth = default(string), int? lepoFlag = default(int?), string name = default(string), string occ21Symbol = default(string), string opra17Symbol = default(string), string rootTicker = default(string), int? style = default(int?), int? type = default(int?), string underlyingFsymSecurityId = default(string), DateTime? date = default(DateTime?), string settlementMethod = default(string), string requestId = default(string))
        {
            this.FsymId = fsymId;
            this.AdjustedFlag = adjustedFlag;
            this.CallPutFlag = callPutFlag;
            this.CallPutPairSymbol = callPutPairSymbol;
            this.ContractSize = contractSize;
            this.Currency = currency;
            this.Exchange = exchange;
            this.ExpirationDate = expirationDate;
            this.ExpirationFrequency = expirationFrequency;
            this.ExpirationMonth = expirationMonth;
            this.LepoFlag = lepoFlag;
            this.Name = name;
            this.Occ21Symbol = occ21Symbol;
            this.Opra17Symbol = opra17Symbol;
            this.RootTicker = rootTicker;
            this.Style = style;
            this.Type = type;
            this.UnderlyingFsymSecurityId = underlyingFsymSecurityId;
            this.Date = date;
            this.SettlementMethod = settlementMethod;
            this.RequestId = requestId;
        }

        /// <summary>
        /// FactSet&#39;s Option Symbol. For more detail, visit [OA 12636](https://my.apps.factset.com/oa/pages/12636#options)
        /// </summary>
        /// <value>FactSet&#39;s Option Symbol. For more detail, visit [OA 12636](https://my.apps.factset.com/oa/pages/12636#options)</value>
        [DataMember(Name = "fsymId", EmitDefaultValue = true)]
        public string FsymId { get; set; }

        /// <summary>
        /// Indicates whether or not a given option contract is adjusted for corporate actions in Y/N format.
        /// </summary>
        /// <value>Indicates whether or not a given option contract is adjusted for corporate actions in Y/N format.</value>
        [DataMember(Name = "adjustedFlag", EmitDefaultValue = true)]
        public string AdjustedFlag { get; set; }

        /// <summary>
        /// Returns a 0 if the option is a call, returns a 1 if the option is a put.
        /// </summary>
        /// <value>Returns a 0 if the option is a call, returns a 1 if the option is a put.</value>
        [DataMember(Name = "callPutFlag", EmitDefaultValue = true)]
        public int? CallPutFlag { get; set; }

        /// <summary>
        /// Returns the corresponding put symbol given a call symbol; and vice-versa.
        /// </summary>
        /// <value>Returns the corresponding put symbol given a call symbol; and vice-versa.</value>
        [DataMember(Name = "callPutPairSymbol", EmitDefaultValue = true)]
        public string CallPutPairSymbol { get; set; }

        /// <summary>
        /// The Option Contract Size
        /// </summary>
        /// <value>The Option Contract Size</value>
        [DataMember(Name = "contractSize", EmitDefaultValue = true)]
        public int? ContractSize { get; set; }

        /// <summary>
        /// Option Currency in ISO3 format.
        /// </summary>
        /// <value>Option Currency in ISO3 format.</value>
        [DataMember(Name = "currency", EmitDefaultValue = true)]
        public string Currency { get; set; }

        /// <summary>
        /// Option Exchange ISO. Visit [OA 14925](https://my.apps.factset.com/oa/pages/14925) for a list of Exchange ISOs.
        /// </summary>
        /// <value>Option Exchange ISO. Visit [OA 14925](https://my.apps.factset.com/oa/pages/14925) for a list of Exchange ISOs.</value>
        [DataMember(Name = "exchange", EmitDefaultValue = true)]
        public string Exchange { get; set; }

        /// <summary>
        /// The date on which an options contract is no longer valid and, therefore, ceases to exist, in YYYY-MM-DD format
        /// </summary>
        /// <value>The date on which an options contract is no longer valid and, therefore, ceases to exist, in YYYY-MM-DD format</value>
        [DataMember(Name = "expirationDate", EmitDefaultValue = true)]
        [JsonConverter(typeof(OpenAPIDateConverter))]
        public DateTime? ExpirationDate { get; set; }

        /// <summary>
        /// Returns the corresponding expiration frequency for a given option symbol. If an option has more than four expiration months, then a Long-term Equity Anticipation Security (LEAPS) indicator will be returned.
        /// </summary>
        /// <value>Returns the corresponding expiration frequency for a given option symbol. If an option has more than four expiration months, then a Long-term Equity Anticipation Security (LEAPS) indicator will be returned.</value>
        [DataMember(Name = "expirationFrequency", EmitDefaultValue = true)]
        public string ExpirationFrequency { get; set; }

        /// <summary>
        /// Option Expiration month in MMM format.
        /// </summary>
        /// <value>Option Expiration month in MMM format.</value>
        [DataMember(Name = "expirationMonth", EmitDefaultValue = true)]
        public string ExpirationMonth { get; set; }

        /// <summary>
        /// Indicates whether or not a given options contract is a Low Exercise Price Option \&quot;LEPO\&quot; (0/1). This is unique to European Options (e.g. ASX exchange).
        /// </summary>
        /// <value>Indicates whether or not a given options contract is a Low Exercise Price Option \&quot;LEPO\&quot; (0/1). This is unique to European Options (e.g. ASX exchange).</value>
        [DataMember(Name = "lepoFlag", EmitDefaultValue = true)]
        public int? LepoFlag { get; set; }

        /// <summary>
        /// Option Descriptive Security Name
        /// </summary>
        /// <value>Option Descriptive Security Name</value>
        [DataMember(Name = "name", EmitDefaultValue = true)]
        public string Name { get; set; }

        /// <summary>
        /// Options Clearing Corporation OSI Series Key This option symbol has up to 21 alphanumeric characters (excluding -ISO and # sign) and uses the following syntax- (Underlying Symbol + # + Expiration Year + Expiration Month + Expiration Day + Call/Put Indicator + Five-Digit Strike Dollar + Three-Digit Strike Decimal + - + ISO) 
        /// </summary>
        /// <value>Options Clearing Corporation OSI Series Key This option symbol has up to 21 alphanumeric characters (excluding -ISO and # sign) and uses the following syntax- (Underlying Symbol + # + Expiration Year + Expiration Month + Expiration Day + Call/Put Indicator + Five-Digit Strike Dollar + Three-Digit Strike Decimal + - + ISO) </value>
        [DataMember(Name = "occ21Symbol", EmitDefaultValue = true)]
        public string Occ21Symbol { get; set; }

        /// <summary>
        /// Options Price Reporting Authority&#39;s OSI Series Key. This option symbol has up to 17 alphanumeric characters (excluding the -ISO and #) and uses the following syntax - (Underlying Symbol + # + Call/Put Expiration Month Code + Expiration Day + Expiration Year + Decimal Indicator + Strike Price + - + ISO) 
        /// </summary>
        /// <value>Options Price Reporting Authority&#39;s OSI Series Key. This option symbol has up to 17 alphanumeric characters (excluding the -ISO and #) and uses the following syntax - (Underlying Symbol + # + Call/Put Expiration Month Code + Expiration Day + Expiration Year + Decimal Indicator + Strike Price + - + ISO) </value>
        [DataMember(Name = "opra17Symbol", EmitDefaultValue = true)]
        public string Opra17Symbol { get; set; }

        /// <summary>
        /// The Root Ticker for the underlying security.
        /// </summary>
        /// <value>The Root Ticker for the underlying security.</value>
        [DataMember(Name = "rootTicker", EmitDefaultValue = true)]
        public string RootTicker { get; set; }

        /// <summary>
        /// Returns the style of the option id requested, where -   |style|description| |- --|- --| |0|American| |1|European|  An American style option can be exercised anytime during its life. The majority of exchange-traded options are American.  Since investors have the freedom to exercise their American options at any point during the life of the contract, they are more valuable than European options which can only be exercised at maturity.  Consider this example -  If you bought a Ford March Call option expiring in March of 2006 in March 2005, you would have the right to exercise the call option at anytime up until its expiration date. Had the Ford option been a European option, you could only exercise the option at the expiry date in March &#39;06. During the year, the share price could have been most optimal for exercise in December of 2005, but you would have to wait to exercise your option until March 2006, where it could be out-of-the-money and virtually worthless.  Note that the name of this option style has nothing to do with the geographic location. 
        /// </summary>
        /// <value>Returns the style of the option id requested, where -   |style|description| |- --|- --| |0|American| |1|European|  An American style option can be exercised anytime during its life. The majority of exchange-traded options are American.  Since investors have the freedom to exercise their American options at any point during the life of the contract, they are more valuable than European options which can only be exercised at maturity.  Consider this example -  If you bought a Ford March Call option expiring in March of 2006 in March 2005, you would have the right to exercise the call option at anytime up until its expiration date. Had the Ford option been a European option, you could only exercise the option at the expiry date in March &#39;06. During the year, the share price could have been most optimal for exercise in December of 2005, but you would have to wait to exercise your option until March 2006, where it could be out-of-the-money and virtually worthless.  Note that the name of this option style has nothing to do with the geographic location. </value>
        [DataMember(Name = "style", EmitDefaultValue = true)]
        public int? Style { get; set; }

        /// <summary>
        /// The option type code, where  |code|description| |- --|- --| |0|Equity Option| |2|Index Option| |99|Option on an ETF| |60|Option on a Future| |19|Option on a Spot FX Rate| 
        /// </summary>
        /// <value>The option type code, where  |code|description| |- --|- --| |0|Equity Option| |2|Index Option| |99|Option on an ETF| |60|Option on a Future| |19|Option on a Spot FX Rate| </value>
        [DataMember(Name = "type", EmitDefaultValue = true)]
        public int? Type { get; set; }

        /// <summary>
        /// Underlying FactSet Security Permanent Identifier in XXXXXX-S format.
        /// </summary>
        /// <value>Underlying FactSet Security Permanent Identifier in XXXXXX-S format.</value>
        [DataMember(Name = "underlyingFsymSecurityId", EmitDefaultValue = true)]
        public string UnderlyingFsymSecurityId { get; set; }

        /// <summary>
        /// The date the data is as of in YYYY-MM-DD format.
        /// </summary>
        /// <value>The date the data is as of in YYYY-MM-DD format.</value>
        [DataMember(Name = "date", EmitDefaultValue = true)]
        [JsonConverter(typeof(OpenAPIDateConverter))]
        public DateTime? Date { get; set; }

        /// <summary>
        /// The contract settlement method. Possible values are - |method|description| |- --|- --| |C|Cash| |P|Physical| |NA|Not Covered| 
        /// </summary>
        /// <value>The contract settlement method. Possible values are - |method|description| |- --|- --| |C|Cash| |P|Physical| |NA|Not Covered| </value>
        [DataMember(Name = "settlementMethod", EmitDefaultValue = true)]
        public string SettlementMethod { get; set; }

        /// <summary>
        /// The requested identifier submitted in the query.
        /// </summary>
        /// <value>The requested identifier submitted in the query.</value>
        [DataMember(Name = "requestId", EmitDefaultValue = false)]
        public string RequestId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class OptionsReferences {\n");
            sb.Append("  FsymId: ").Append(FsymId).Append("\n");
            sb.Append("  AdjustedFlag: ").Append(AdjustedFlag).Append("\n");
            sb.Append("  CallPutFlag: ").Append(CallPutFlag).Append("\n");
            sb.Append("  CallPutPairSymbol: ").Append(CallPutPairSymbol).Append("\n");
            sb.Append("  ContractSize: ").Append(ContractSize).Append("\n");
            sb.Append("  Currency: ").Append(Currency).Append("\n");
            sb.Append("  Exchange: ").Append(Exchange).Append("\n");
            sb.Append("  ExpirationDate: ").Append(ExpirationDate).Append("\n");
            sb.Append("  ExpirationFrequency: ").Append(ExpirationFrequency).Append("\n");
            sb.Append("  ExpirationMonth: ").Append(ExpirationMonth).Append("\n");
            sb.Append("  LepoFlag: ").Append(LepoFlag).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Occ21Symbol: ").Append(Occ21Symbol).Append("\n");
            sb.Append("  Opra17Symbol: ").Append(Opra17Symbol).Append("\n");
            sb.Append("  RootTicker: ").Append(RootTicker).Append("\n");
            sb.Append("  Style: ").Append(Style).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  UnderlyingFsymSecurityId: ").Append(UnderlyingFsymSecurityId).Append("\n");
            sb.Append("  Date: ").Append(Date).Append("\n");
            sb.Append("  SettlementMethod: ").Append(SettlementMethod).Append("\n");
            sb.Append("  RequestId: ").Append(RequestId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as OptionsReferences);
        }

        /// <summary>
        /// Returns true if OptionsReferences instances are equal
        /// </summary>
        /// <param name="input">Instance of OptionsReferences to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(OptionsReferences input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.FsymId == input.FsymId ||
                    (this.FsymId != null &&
                    this.FsymId.Equals(input.FsymId))
                ) && 
                (
                    this.AdjustedFlag == input.AdjustedFlag ||
                    (this.AdjustedFlag != null &&
                    this.AdjustedFlag.Equals(input.AdjustedFlag))
                ) && 
                (
                    this.CallPutFlag == input.CallPutFlag ||
                    (this.CallPutFlag != null &&
                    this.CallPutFlag.Equals(input.CallPutFlag))
                ) && 
                (
                    this.CallPutPairSymbol == input.CallPutPairSymbol ||
                    (this.CallPutPairSymbol != null &&
                    this.CallPutPairSymbol.Equals(input.CallPutPairSymbol))
                ) && 
                (
                    this.ContractSize == input.ContractSize ||
                    (this.ContractSize != null &&
                    this.ContractSize.Equals(input.ContractSize))
                ) && 
                (
                    this.Currency == input.Currency ||
                    (this.Currency != null &&
                    this.Currency.Equals(input.Currency))
                ) && 
                (
                    this.Exchange == input.Exchange ||
                    (this.Exchange != null &&
                    this.Exchange.Equals(input.Exchange))
                ) && 
                (
                    this.ExpirationDate == input.ExpirationDate ||
                    (this.ExpirationDate != null &&
                    this.ExpirationDate.Equals(input.ExpirationDate))
                ) && 
                (
                    this.ExpirationFrequency == input.ExpirationFrequency ||
                    (this.ExpirationFrequency != null &&
                    this.ExpirationFrequency.Equals(input.ExpirationFrequency))
                ) && 
                (
                    this.ExpirationMonth == input.ExpirationMonth ||
                    (this.ExpirationMonth != null &&
                    this.ExpirationMonth.Equals(input.ExpirationMonth))
                ) && 
                (
                    this.LepoFlag == input.LepoFlag ||
                    (this.LepoFlag != null &&
                    this.LepoFlag.Equals(input.LepoFlag))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Occ21Symbol == input.Occ21Symbol ||
                    (this.Occ21Symbol != null &&
                    this.Occ21Symbol.Equals(input.Occ21Symbol))
                ) && 
                (
                    this.Opra17Symbol == input.Opra17Symbol ||
                    (this.Opra17Symbol != null &&
                    this.Opra17Symbol.Equals(input.Opra17Symbol))
                ) && 
                (
                    this.RootTicker == input.RootTicker ||
                    (this.RootTicker != null &&
                    this.RootTicker.Equals(input.RootTicker))
                ) && 
                (
                    this.Style == input.Style ||
                    (this.Style != null &&
                    this.Style.Equals(input.Style))
                ) && 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.UnderlyingFsymSecurityId == input.UnderlyingFsymSecurityId ||
                    (this.UnderlyingFsymSecurityId != null &&
                    this.UnderlyingFsymSecurityId.Equals(input.UnderlyingFsymSecurityId))
                ) && 
                (
                    this.Date == input.Date ||
                    (this.Date != null &&
                    this.Date.Equals(input.Date))
                ) && 
                (
                    this.SettlementMethod == input.SettlementMethod ||
                    (this.SettlementMethod != null &&
                    this.SettlementMethod.Equals(input.SettlementMethod))
                ) && 
                (
                    this.RequestId == input.RequestId ||
                    (this.RequestId != null &&
                    this.RequestId.Equals(input.RequestId))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.FsymId != null)
                {
                    hashCode = (hashCode * 59) + this.FsymId.GetHashCode();
                }
                if (this.AdjustedFlag != null)
                {
                    hashCode = (hashCode * 59) + this.AdjustedFlag.GetHashCode();
                }
                if (this.CallPutFlag != null)
                {
                    hashCode = (hashCode * 59) + this.CallPutFlag.GetHashCode();
                }
                if (this.CallPutPairSymbol != null)
                {
                    hashCode = (hashCode * 59) + this.CallPutPairSymbol.GetHashCode();
                }
                if (this.ContractSize != null)
                {
                    hashCode = (hashCode * 59) + this.ContractSize.GetHashCode();
                }
                if (this.Currency != null)
                {
                    hashCode = (hashCode * 59) + this.Currency.GetHashCode();
                }
                if (this.Exchange != null)
                {
                    hashCode = (hashCode * 59) + this.Exchange.GetHashCode();
                }
                if (this.ExpirationDate != null)
                {
                    hashCode = (hashCode * 59) + this.ExpirationDate.GetHashCode();
                }
                if (this.ExpirationFrequency != null)
                {
                    hashCode = (hashCode * 59) + this.ExpirationFrequency.GetHashCode();
                }
                if (this.ExpirationMonth != null)
                {
                    hashCode = (hashCode * 59) + this.ExpirationMonth.GetHashCode();
                }
                if (this.LepoFlag != null)
                {
                    hashCode = (hashCode * 59) + this.LepoFlag.GetHashCode();
                }
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                if (this.Occ21Symbol != null)
                {
                    hashCode = (hashCode * 59) + this.Occ21Symbol.GetHashCode();
                }
                if (this.Opra17Symbol != null)
                {
                    hashCode = (hashCode * 59) + this.Opra17Symbol.GetHashCode();
                }
                if (this.RootTicker != null)
                {
                    hashCode = (hashCode * 59) + this.RootTicker.GetHashCode();
                }
                if (this.Style != null)
                {
                    hashCode = (hashCode * 59) + this.Style.GetHashCode();
                }
                if (this.Type != null)
                {
                    hashCode = (hashCode * 59) + this.Type.GetHashCode();
                }
                if (this.UnderlyingFsymSecurityId != null)
                {
                    hashCode = (hashCode * 59) + this.UnderlyingFsymSecurityId.GetHashCode();
                }
                if (this.Date != null)
                {
                    hashCode = (hashCode * 59) + this.Date.GetHashCode();
                }
                if (this.SettlementMethod != null)
                {
                    hashCode = (hashCode * 59) + this.SettlementMethod.GetHashCode();
                }
                if (this.RequestId != null)
                {
                    hashCode = (hashCode * 59) + this.RequestId.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
