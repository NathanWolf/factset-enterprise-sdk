/*
 * FactSet Options API
 *
 * The Option Prices database provides pricing data such as mid bid-ask price, reference data (e.g., strike price), and risk measures (e.g., Greeks and implied volatility). Visit [Options Overview OA Page # 14925](https://my.apps.factset.com/oa/pages/14925) for details on database coverage. U.S. exchange-traded option bid and ask quotes are continuously updated throughout the day even when no trades have occurred on the option (zero volume). The end-of-day closing bid and ask quotes are always in line with the underlying closing price.  **Note** * Currently in Beta only **OPRA** exchanges are supported. 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: api@factset.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using FactSet.SDK.FactSetOptions.Client;
using FactSet.SDK.FactSetOptions.Model;
using FactSet.SDK.Utils.Authentication;

namespace FactSet.SDK.FactSetOptions.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IOptionChainsScreeningApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Returns all the underlying option identifiers for the specified underlying Security identifier
        /// </summary>
        /// <remarks>
        /// Returns all the underlying option identifiers for the underlying security identifier. Specify the date and or exhcange for the list of options associated to the id.     *Currently only OPRA Exchange is supproted with exchange ISO \&quot;USA\&quot;* 
        /// </remarks>
        /// <exception cref="FactSet.SDK.FactSetOptions.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainsRequest">Options Chains Request Object</param>
        /// <returns>ChainsResponse</returns>
        ChainsResponse GetOptionsChainsForList(ChainsRequest chainsRequest);

        /// <summary>
        /// Returns all the underlying option identifiers for the specified underlying Security identifier
        /// </summary>
        /// <remarks>
        /// Returns all the underlying option identifiers for the underlying security identifier. Specify the date and or exhcange for the list of options associated to the id.     *Currently only OPRA Exchange is supproted with exchange ISO \&quot;USA\&quot;* 
        /// </remarks>
        /// <exception cref="FactSet.SDK.FactSetOptions.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainsRequest">Options Chains Request Object</param>
        /// <returns>ApiResponse of ChainsResponse</returns>
        ApiResponse<ChainsResponse> GetOptionsChainsForListWithHttpInfo(ChainsRequest chainsRequest);
        /// <summary>
        /// Returns all the option identifiers based on the conditions provided as input in the request
        /// </summary>
        /// <remarks>
        /// Returns all the option identifiers based on the conditions provided as input in the request. Conditions are as follows and will follow \&quot;AND\&quot; logic if more than one condition is applied. If a condition is used the accompanying value MUST be used -  |conditions|description| |- --|- --| |P_OPT_UNDERLYING_SECURITY_E|Underlying Security Equal To| |P_OPT_STRIKE_PRICE_E|Strike Price Equal To| |P_OPT_EXP_DATEN_E|Expiration Date (YYYYMMDD) Equal To| |P_OPT_VOLUME_G|Volume Greater Than| |P_OPT_VOLUME_GE|Volume Greater Than or Equal To| |P_OPT_VOLUME_L|Volume Less Than| |P_OPT_VOLUME_LE|Volume Less Than or Equal To| |P_OPT_VOLUME_E|Volume Equal To| |P_OPT_OPTION_TYPE_E|Option Type (1&#x3D; Equity, 2&#x3D;Index)| |P_OPT_CALL_OR_PUT_E|Call or Put (0&#x3D;Call, 1&#x3D;Put)|    *Currently only OPRA Exchange is supproted with exchange ISO \&quot;USA\&quot;* 
        /// </remarks>
        /// <exception cref="FactSet.SDK.FactSetOptions.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="optionScreeningRequest">Option Screening Request. Example request asks for Put Options where Underlying Security is AAPL and Volume is greater than 0 as of 2021-03-31.  </param>
        /// <returns>OptionScreeningResponse</returns>
        OptionScreeningResponse GetOptionsScreeningForList(OptionScreeningRequest optionScreeningRequest);

        /// <summary>
        /// Returns all the option identifiers based on the conditions provided as input in the request
        /// </summary>
        /// <remarks>
        /// Returns all the option identifiers based on the conditions provided as input in the request. Conditions are as follows and will follow \&quot;AND\&quot; logic if more than one condition is applied. If a condition is used the accompanying value MUST be used -  |conditions|description| |- --|- --| |P_OPT_UNDERLYING_SECURITY_E|Underlying Security Equal To| |P_OPT_STRIKE_PRICE_E|Strike Price Equal To| |P_OPT_EXP_DATEN_E|Expiration Date (YYYYMMDD) Equal To| |P_OPT_VOLUME_G|Volume Greater Than| |P_OPT_VOLUME_GE|Volume Greater Than or Equal To| |P_OPT_VOLUME_L|Volume Less Than| |P_OPT_VOLUME_LE|Volume Less Than or Equal To| |P_OPT_VOLUME_E|Volume Equal To| |P_OPT_OPTION_TYPE_E|Option Type (1&#x3D; Equity, 2&#x3D;Index)| |P_OPT_CALL_OR_PUT_E|Call or Put (0&#x3D;Call, 1&#x3D;Put)|    *Currently only OPRA Exchange is supproted with exchange ISO \&quot;USA\&quot;* 
        /// </remarks>
        /// <exception cref="FactSet.SDK.FactSetOptions.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="optionScreeningRequest">Option Screening Request. Example request asks for Put Options where Underlying Security is AAPL and Volume is greater than 0 as of 2021-03-31.  </param>
        /// <returns>ApiResponse of OptionScreeningResponse</returns>
        ApiResponse<OptionScreeningResponse> GetOptionsScreeningForListWithHttpInfo(OptionScreeningRequest optionScreeningRequest);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IOptionChainsScreeningApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Returns all the underlying option identifiers for the specified underlying Security identifier
        /// </summary>
        /// <remarks>
        /// Returns all the underlying option identifiers for the underlying security identifier. Specify the date and or exhcange for the list of options associated to the id.     *Currently only OPRA Exchange is supproted with exchange ISO \&quot;USA\&quot;* 
        /// </remarks>
        /// <exception cref="FactSet.SDK.FactSetOptions.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainsRequest">Options Chains Request Object</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ChainsResponse</returns>
        System.Threading.Tasks.Task<ChainsResponse> GetOptionsChainsForListAsync(ChainsRequest chainsRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Returns all the underlying option identifiers for the specified underlying Security identifier
        /// </summary>
        /// <remarks>
        /// Returns all the underlying option identifiers for the underlying security identifier. Specify the date and or exhcange for the list of options associated to the id.     *Currently only OPRA Exchange is supproted with exchange ISO \&quot;USA\&quot;* 
        /// </remarks>
        /// <exception cref="FactSet.SDK.FactSetOptions.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainsRequest">Options Chains Request Object</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ChainsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ChainsResponse>> GetOptionsChainsForListWithHttpInfoAsync(ChainsRequest chainsRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Returns all the option identifiers based on the conditions provided as input in the request
        /// </summary>
        /// <remarks>
        /// Returns all the option identifiers based on the conditions provided as input in the request. Conditions are as follows and will follow \&quot;AND\&quot; logic if more than one condition is applied. If a condition is used the accompanying value MUST be used -  |conditions|description| |- --|- --| |P_OPT_UNDERLYING_SECURITY_E|Underlying Security Equal To| |P_OPT_STRIKE_PRICE_E|Strike Price Equal To| |P_OPT_EXP_DATEN_E|Expiration Date (YYYYMMDD) Equal To| |P_OPT_VOLUME_G|Volume Greater Than| |P_OPT_VOLUME_GE|Volume Greater Than or Equal To| |P_OPT_VOLUME_L|Volume Less Than| |P_OPT_VOLUME_LE|Volume Less Than or Equal To| |P_OPT_VOLUME_E|Volume Equal To| |P_OPT_OPTION_TYPE_E|Option Type (1&#x3D; Equity, 2&#x3D;Index)| |P_OPT_CALL_OR_PUT_E|Call or Put (0&#x3D;Call, 1&#x3D;Put)|    *Currently only OPRA Exchange is supproted with exchange ISO \&quot;USA\&quot;* 
        /// </remarks>
        /// <exception cref="FactSet.SDK.FactSetOptions.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="optionScreeningRequest">Option Screening Request. Example request asks for Put Options where Underlying Security is AAPL and Volume is greater than 0 as of 2021-03-31.  </param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of OptionScreeningResponse</returns>
        System.Threading.Tasks.Task<OptionScreeningResponse> GetOptionsScreeningForListAsync(OptionScreeningRequest optionScreeningRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Returns all the option identifiers based on the conditions provided as input in the request
        /// </summary>
        /// <remarks>
        /// Returns all the option identifiers based on the conditions provided as input in the request. Conditions are as follows and will follow \&quot;AND\&quot; logic if more than one condition is applied. If a condition is used the accompanying value MUST be used -  |conditions|description| |- --|- --| |P_OPT_UNDERLYING_SECURITY_E|Underlying Security Equal To| |P_OPT_STRIKE_PRICE_E|Strike Price Equal To| |P_OPT_EXP_DATEN_E|Expiration Date (YYYYMMDD) Equal To| |P_OPT_VOLUME_G|Volume Greater Than| |P_OPT_VOLUME_GE|Volume Greater Than or Equal To| |P_OPT_VOLUME_L|Volume Less Than| |P_OPT_VOLUME_LE|Volume Less Than or Equal To| |P_OPT_VOLUME_E|Volume Equal To| |P_OPT_OPTION_TYPE_E|Option Type (1&#x3D; Equity, 2&#x3D;Index)| |P_OPT_CALL_OR_PUT_E|Call or Put (0&#x3D;Call, 1&#x3D;Put)|    *Currently only OPRA Exchange is supproted with exchange ISO \&quot;USA\&quot;* 
        /// </remarks>
        /// <exception cref="FactSet.SDK.FactSetOptions.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="optionScreeningRequest">Option Screening Request. Example request asks for Put Options where Underlying Security is AAPL and Volume is greater than 0 as of 2021-03-31.  </param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (OptionScreeningResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<OptionScreeningResponse>> GetOptionsScreeningForListWithHttpInfoAsync(OptionScreeningRequest optionScreeningRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IOptionChainsScreeningApi : IOptionChainsScreeningApiSync, IOptionChainsScreeningApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class OptionChainsScreeningApi : IOptionChainsScreeningApi
    {
        private FactSet.SDK.FactSetOptions.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        # region Response Type Disctionaries
                private static readonly Dictionary<HttpStatusCode, System.Type> GetOptionsChainsForListResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)200, typeof(ChainsResponse) },
            { (HttpStatusCode)400, typeof(ErrorResponse) },
            { (HttpStatusCode)401, typeof(ErrorResponse) },
            { (HttpStatusCode)403, typeof(ErrorResponse) },
            { (HttpStatusCode)415, typeof(ErrorResponse) },
            { (HttpStatusCode)500, typeof(ErrorResponse) },
        };
        private static readonly Dictionary<HttpStatusCode, System.Type> GetOptionsScreeningForListResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)200, typeof(OptionScreeningResponse) },
            { (HttpStatusCode)400, typeof(ErrorResponse) },
            { (HttpStatusCode)401, typeof(ErrorResponse) },
            { (HttpStatusCode)403, typeof(ErrorResponse) },
            { (HttpStatusCode)415, typeof(ErrorResponse) },
            { (HttpStatusCode)500, typeof(ErrorResponse) },
        };

        # endregion Response Type Disctionaries

        # region Api Response Objects
         

        # endregion Api Response Objects

        /// <summary>
        /// Initializes a new instance of the <see cref="OptionChainsScreeningApi"/> class.
        /// </summary>
        /// <returns></returns>
        public OptionChainsScreeningApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="OptionChainsScreeningApi"/> class.
        /// </summary>
        /// <returns></returns>
        public OptionChainsScreeningApi(string basePath)
        {
            this.Configuration = FactSet.SDK.FactSetOptions.Client.Configuration.MergeConfigurations(
                FactSet.SDK.FactSetOptions.Client.GlobalConfiguration.Instance,
                new FactSet.SDK.FactSetOptions.Client.Configuration { BasePath = basePath }
            );
            this.Client = new FactSet.SDK.FactSetOptions.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new FactSet.SDK.FactSetOptions.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = FactSet.SDK.FactSetOptions.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="OptionChainsScreeningApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public OptionChainsScreeningApi(FactSet.SDK.FactSetOptions.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = FactSet.SDK.FactSetOptions.Client.Configuration.MergeConfigurations(
                FactSet.SDK.FactSetOptions.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new FactSet.SDK.FactSetOptions.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new FactSet.SDK.FactSetOptions.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = FactSet.SDK.FactSetOptions.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="OptionChainsScreeningApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public OptionChainsScreeningApi(FactSet.SDK.FactSetOptions.Client.ISynchronousClient client, FactSet.SDK.FactSetOptions.Client.IAsynchronousClient asyncClient, FactSet.SDK.FactSetOptions.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = FactSet.SDK.FactSetOptions.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public FactSet.SDK.FactSetOptions.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public FactSet.SDK.FactSetOptions.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public FactSet.SDK.FactSetOptions.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public FactSet.SDK.FactSetOptions.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Returns all the underlying option identifiers for the specified underlying Security identifier Returns all the underlying option identifiers for the underlying security identifier. Specify the date and or exhcange for the list of options associated to the id.     *Currently only OPRA Exchange is supproted with exchange ISO \&quot;USA\&quot;* 
        /// </summary>
        /// <exception cref="FactSet.SDK.FactSetOptions.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainsRequest">Options Chains Request Object</param>
        /// <returns>ChainsResponse</returns>
        public ChainsResponse GetOptionsChainsForList(ChainsRequest chainsRequest)
        {
            var localVarResponse = GetOptionsChainsForListWithHttpInfo(chainsRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns all the underlying option identifiers for the specified underlying Security identifier Returns all the underlying option identifiers for the underlying security identifier. Specify the date and or exhcange for the list of options associated to the id.     *Currently only OPRA Exchange is supproted with exchange ISO \&quot;USA\&quot;* 
        /// </summary>
        /// <exception cref="FactSet.SDK.FactSetOptions.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainsRequest">Options Chains Request Object</param>
        /// <returns>ApiResponse of ChainsResponse</returns>
        public ApiResponse<ChainsResponse> GetOptionsChainsForListWithHttpInfo(ChainsRequest chainsRequest)
        {
            // verify the required parameter 'chainsRequest' is set
            if (chainsRequest == null)
            {
                throw new FactSet.SDK.FactSetOptions.Client.ApiException(400, "Missing required parameter 'chainsRequest' when calling OptionChainsScreeningApi->GetOptionsChainsForList");
            }

            FactSet.SDK.FactSetOptions.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.FactSetOptions.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.FactSetOptions.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.FactSetOptions.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = chainsRequest;

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.FactSetOptions.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = GetOptionsChainsForListResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Post<
            ChainsResponse>("/factset-options/v1/chains", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetOptionsChainsForList", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// Returns all the underlying option identifiers for the specified underlying Security identifier Returns all the underlying option identifiers for the underlying security identifier. Specify the date and or exhcange for the list of options associated to the id.     *Currently only OPRA Exchange is supproted with exchange ISO \&quot;USA\&quot;* 
        /// </summary>
        /// <exception cref="FactSet.SDK.FactSetOptions.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainsRequest">Options Chains Request Object</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ChainsResponse</returns>
        public async System.Threading.Tasks.Task<ChainsResponse>GetOptionsChainsForListAsync(ChainsRequest chainsRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await GetOptionsChainsForListWithHttpInfoAsync(chainsRequest, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns all the underlying option identifiers for the specified underlying Security identifier Returns all the underlying option identifiers for the underlying security identifier. Specify the date and or exhcange for the list of options associated to the id.     *Currently only OPRA Exchange is supproted with exchange ISO \&quot;USA\&quot;* 
        /// </summary>
        /// <exception cref="FactSet.SDK.FactSetOptions.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainsRequest">Options Chains Request Object</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ChainsResponse)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<ChainsResponse>> GetOptionsChainsForListWithHttpInfoAsync(ChainsRequest chainsRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'chainsRequest' is set
            if (chainsRequest == null)
            {
                throw new FactSet.SDK.FactSetOptions.Client.ApiException(400, "Missing required parameter 'chainsRequest' when calling OptionChainsScreeningApi->GetOptionsChainsForList");
            }


            FactSet.SDK.FactSetOptions.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.FactSetOptions.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.FactSetOptions.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.FactSetOptions.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = chainsRequest;

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.FactSetOptions.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = GetOptionsChainsForListResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ChainsResponse>("/factset-options/v1/chains", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetOptionsChainsForList", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Returns all the option identifiers based on the conditions provided as input in the request Returns all the option identifiers based on the conditions provided as input in the request. Conditions are as follows and will follow \&quot;AND\&quot; logic if more than one condition is applied. If a condition is used the accompanying value MUST be used -  |conditions|description| |- --|- --| |P_OPT_UNDERLYING_SECURITY_E|Underlying Security Equal To| |P_OPT_STRIKE_PRICE_E|Strike Price Equal To| |P_OPT_EXP_DATEN_E|Expiration Date (YYYYMMDD) Equal To| |P_OPT_VOLUME_G|Volume Greater Than| |P_OPT_VOLUME_GE|Volume Greater Than or Equal To| |P_OPT_VOLUME_L|Volume Less Than| |P_OPT_VOLUME_LE|Volume Less Than or Equal To| |P_OPT_VOLUME_E|Volume Equal To| |P_OPT_OPTION_TYPE_E|Option Type (1&#x3D; Equity, 2&#x3D;Index)| |P_OPT_CALL_OR_PUT_E|Call or Put (0&#x3D;Call, 1&#x3D;Put)|    *Currently only OPRA Exchange is supproted with exchange ISO \&quot;USA\&quot;* 
        /// </summary>
        /// <exception cref="FactSet.SDK.FactSetOptions.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="optionScreeningRequest">Option Screening Request. Example request asks for Put Options where Underlying Security is AAPL and Volume is greater than 0 as of 2021-03-31.  </param>
        /// <returns>OptionScreeningResponse</returns>
        public OptionScreeningResponse GetOptionsScreeningForList(OptionScreeningRequest optionScreeningRequest)
        {
            var localVarResponse = GetOptionsScreeningForListWithHttpInfo(optionScreeningRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns all the option identifiers based on the conditions provided as input in the request Returns all the option identifiers based on the conditions provided as input in the request. Conditions are as follows and will follow \&quot;AND\&quot; logic if more than one condition is applied. If a condition is used the accompanying value MUST be used -  |conditions|description| |- --|- --| |P_OPT_UNDERLYING_SECURITY_E|Underlying Security Equal To| |P_OPT_STRIKE_PRICE_E|Strike Price Equal To| |P_OPT_EXP_DATEN_E|Expiration Date (YYYYMMDD) Equal To| |P_OPT_VOLUME_G|Volume Greater Than| |P_OPT_VOLUME_GE|Volume Greater Than or Equal To| |P_OPT_VOLUME_L|Volume Less Than| |P_OPT_VOLUME_LE|Volume Less Than or Equal To| |P_OPT_VOLUME_E|Volume Equal To| |P_OPT_OPTION_TYPE_E|Option Type (1&#x3D; Equity, 2&#x3D;Index)| |P_OPT_CALL_OR_PUT_E|Call or Put (0&#x3D;Call, 1&#x3D;Put)|    *Currently only OPRA Exchange is supproted with exchange ISO \&quot;USA\&quot;* 
        /// </summary>
        /// <exception cref="FactSet.SDK.FactSetOptions.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="optionScreeningRequest">Option Screening Request. Example request asks for Put Options where Underlying Security is AAPL and Volume is greater than 0 as of 2021-03-31.  </param>
        /// <returns>ApiResponse of OptionScreeningResponse</returns>
        public ApiResponse<OptionScreeningResponse> GetOptionsScreeningForListWithHttpInfo(OptionScreeningRequest optionScreeningRequest)
        {
            // verify the required parameter 'optionScreeningRequest' is set
            if (optionScreeningRequest == null)
            {
                throw new FactSet.SDK.FactSetOptions.Client.ApiException(400, "Missing required parameter 'optionScreeningRequest' when calling OptionChainsScreeningApi->GetOptionsScreeningForList");
            }

            FactSet.SDK.FactSetOptions.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.FactSetOptions.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.FactSetOptions.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.FactSetOptions.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = optionScreeningRequest;

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.FactSetOptions.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = GetOptionsScreeningForListResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Post<
            OptionScreeningResponse>("/factset-options/v1/option-screening", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetOptionsScreeningForList", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// Returns all the option identifiers based on the conditions provided as input in the request Returns all the option identifiers based on the conditions provided as input in the request. Conditions are as follows and will follow \&quot;AND\&quot; logic if more than one condition is applied. If a condition is used the accompanying value MUST be used -  |conditions|description| |- --|- --| |P_OPT_UNDERLYING_SECURITY_E|Underlying Security Equal To| |P_OPT_STRIKE_PRICE_E|Strike Price Equal To| |P_OPT_EXP_DATEN_E|Expiration Date (YYYYMMDD) Equal To| |P_OPT_VOLUME_G|Volume Greater Than| |P_OPT_VOLUME_GE|Volume Greater Than or Equal To| |P_OPT_VOLUME_L|Volume Less Than| |P_OPT_VOLUME_LE|Volume Less Than or Equal To| |P_OPT_VOLUME_E|Volume Equal To| |P_OPT_OPTION_TYPE_E|Option Type (1&#x3D; Equity, 2&#x3D;Index)| |P_OPT_CALL_OR_PUT_E|Call or Put (0&#x3D;Call, 1&#x3D;Put)|    *Currently only OPRA Exchange is supproted with exchange ISO \&quot;USA\&quot;* 
        /// </summary>
        /// <exception cref="FactSet.SDK.FactSetOptions.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="optionScreeningRequest">Option Screening Request. Example request asks for Put Options where Underlying Security is AAPL and Volume is greater than 0 as of 2021-03-31.  </param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of OptionScreeningResponse</returns>
        public async System.Threading.Tasks.Task<OptionScreeningResponse>GetOptionsScreeningForListAsync(OptionScreeningRequest optionScreeningRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await GetOptionsScreeningForListWithHttpInfoAsync(optionScreeningRequest, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns all the option identifiers based on the conditions provided as input in the request Returns all the option identifiers based on the conditions provided as input in the request. Conditions are as follows and will follow \&quot;AND\&quot; logic if more than one condition is applied. If a condition is used the accompanying value MUST be used -  |conditions|description| |- --|- --| |P_OPT_UNDERLYING_SECURITY_E|Underlying Security Equal To| |P_OPT_STRIKE_PRICE_E|Strike Price Equal To| |P_OPT_EXP_DATEN_E|Expiration Date (YYYYMMDD) Equal To| |P_OPT_VOLUME_G|Volume Greater Than| |P_OPT_VOLUME_GE|Volume Greater Than or Equal To| |P_OPT_VOLUME_L|Volume Less Than| |P_OPT_VOLUME_LE|Volume Less Than or Equal To| |P_OPT_VOLUME_E|Volume Equal To| |P_OPT_OPTION_TYPE_E|Option Type (1&#x3D; Equity, 2&#x3D;Index)| |P_OPT_CALL_OR_PUT_E|Call or Put (0&#x3D;Call, 1&#x3D;Put)|    *Currently only OPRA Exchange is supproted with exchange ISO \&quot;USA\&quot;* 
        /// </summary>
        /// <exception cref="FactSet.SDK.FactSetOptions.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="optionScreeningRequest">Option Screening Request. Example request asks for Put Options where Underlying Security is AAPL and Volume is greater than 0 as of 2021-03-31.  </param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (OptionScreeningResponse)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<OptionScreeningResponse>> GetOptionsScreeningForListWithHttpInfoAsync(OptionScreeningRequest optionScreeningRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'optionScreeningRequest' is set
            if (optionScreeningRequest == null)
            {
                throw new FactSet.SDK.FactSetOptions.Client.ApiException(400, "Missing required parameter 'optionScreeningRequest' when calling OptionChainsScreeningApi->GetOptionsScreeningForList");
            }


            FactSet.SDK.FactSetOptions.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.FactSetOptions.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.FactSetOptions.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.FactSetOptions.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = optionScreeningRequest;

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.FactSetOptions.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = GetOptionsScreeningForListResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<OptionScreeningResponse>("/factset-options/v1/option-screening", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetOptionsScreeningForList", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
