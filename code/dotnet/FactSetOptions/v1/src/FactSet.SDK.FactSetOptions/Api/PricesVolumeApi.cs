/*
 * FactSet Options API
 *
 * The Option Prices database provides pricing data such as mid bid-ask price, reference data (e.g., strike price), and risk measures (e.g., Greeks and implied volatility). Visit [Options Overview OA Page # 14925](https://my.apps.factset.com/oa/pages/14925) for details on database coverage. U.S. exchange-traded option bid and ask quotes are continuously updated throughout the day even when no trades have occurred on the option (zero volume). The end-of-day closing bid and ask quotes are always in line with the underlying closing price.  **Note** * Currently in Beta only **OPRA** exchanges are supported. 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: api@factset.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using FactSet.SDK.FactSetOptions.Client;
using FactSet.SDK.FactSetOptions.Model;
using FactSet.SDK.Utils.Authentication;

namespace FactSet.SDK.FactSetOptions.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IPricesVolumeApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Returns the pricing related information for the specified option identifier
        /// </summary>
        /// <remarks>
        /// Returns the pricing related information for the specified option identifier. Items include -  * Ask * Bid * Mid * Mid Bid Ask * Settlement * Last Price Type (Settlement or MidBidAsk) * Last Price * Strike Price * Underlying Security Price * 52 Week High/Low * Open, High, Low for day. Note securities must be trading for day requested.    *Currently only OPRA Exchange is supported with exchange ISO \&quot;USA\&quot;* 
        /// </remarks>
        /// <exception cref="FactSet.SDK.FactSetOptions.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="optionsPricesRequest">Options Prices Request Body</param>
        /// <returns>OptionsPricesResponse</returns>
        OptionsPricesResponse GetOptionsPricesForList(OptionsPricesRequest optionsPricesRequest);

        /// <summary>
        /// Returns the pricing related information for the specified option identifier
        /// </summary>
        /// <remarks>
        /// Returns the pricing related information for the specified option identifier. Items include -  * Ask * Bid * Mid * Mid Bid Ask * Settlement * Last Price Type (Settlement or MidBidAsk) * Last Price * Strike Price * Underlying Security Price * 52 Week High/Low * Open, High, Low for day. Note securities must be trading for day requested.    *Currently only OPRA Exchange is supported with exchange ISO \&quot;USA\&quot;* 
        /// </remarks>
        /// <exception cref="FactSet.SDK.FactSetOptions.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="optionsPricesRequest">Options Prices Request Body</param>
        /// <returns>ApiResponse of OptionsPricesResponse</returns>
        ApiResponse<OptionsPricesResponse> GetOptionsPricesForListWithHttpInfo(OptionsPricesRequest optionsPricesRequest);
        /// <summary>
        /// Returns the volume details for the specified option identifier
        /// </summary>
        /// <remarks>
        /// Returns the volume details for the specified option identifier for a specified exchange. Data items include -  * Open Interest * Volume    *Currently only OPRA Exchange is supported with exchange ISO \&quot;USA\&quot;* 
        /// </remarks>
        /// <exception cref="FactSet.SDK.FactSetOptions.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="optionsVolumeRequest">Volume Request Object</param>
        /// <returns>OptionsVolumeResponse</returns>
        OptionsVolumeResponse GetOptionsVolumeForList(OptionsVolumeRequest optionsVolumeRequest);

        /// <summary>
        /// Returns the volume details for the specified option identifier
        /// </summary>
        /// <remarks>
        /// Returns the volume details for the specified option identifier for a specified exchange. Data items include -  * Open Interest * Volume    *Currently only OPRA Exchange is supported with exchange ISO \&quot;USA\&quot;* 
        /// </remarks>
        /// <exception cref="FactSet.SDK.FactSetOptions.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="optionsVolumeRequest">Volume Request Object</param>
        /// <returns>ApiResponse of OptionsVolumeResponse</returns>
        ApiResponse<OptionsVolumeResponse> GetOptionsVolumeForListWithHttpInfo(OptionsVolumeRequest optionsVolumeRequest);
        /// <summary>
        /// Returns the aggregate volume and open interest for the list of the options under the specified security identifier
        /// </summary>
        /// <remarks>
        /// Return the Volume and Open Interest details for list of the options for the specified underlying security identifier. The data is aggregated for all options contracts associated to the underlying id, or specified in the request only the contracts listed on a specific exchange. Data Includes -  * Put Call Ratio  * Total Put Volume &amp; Open Interest * Total Call Volume &amp; Open Interest * Total Put &amp; Call Volume &amp; Open Interest    *Currently only OPRA Exchange is supported with exchange ISO \&quot;USA\&quot;* 
        /// </remarks>
        /// <exception cref="FactSet.SDK.FactSetOptions.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="underlyingVolumeRequest">Underlying Volume Request Body</param>
        /// <returns>UnderlyingVolumeResponse</returns>
        UnderlyingVolumeResponse GetUnderlyingVolumeForList(UnderlyingVolumeRequest underlyingVolumeRequest);

        /// <summary>
        /// Returns the aggregate volume and open interest for the list of the options under the specified security identifier
        /// </summary>
        /// <remarks>
        /// Return the Volume and Open Interest details for list of the options for the specified underlying security identifier. The data is aggregated for all options contracts associated to the underlying id, or specified in the request only the contracts listed on a specific exchange. Data Includes -  * Put Call Ratio  * Total Put Volume &amp; Open Interest * Total Call Volume &amp; Open Interest * Total Put &amp; Call Volume &amp; Open Interest    *Currently only OPRA Exchange is supported with exchange ISO \&quot;USA\&quot;* 
        /// </remarks>
        /// <exception cref="FactSet.SDK.FactSetOptions.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="underlyingVolumeRequest">Underlying Volume Request Body</param>
        /// <returns>ApiResponse of UnderlyingVolumeResponse</returns>
        ApiResponse<UnderlyingVolumeResponse> GetUnderlyingVolumeForListWithHttpInfo(UnderlyingVolumeRequest underlyingVolumeRequest);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IPricesVolumeApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Returns the pricing related information for the specified option identifier
        /// </summary>
        /// <remarks>
        /// Returns the pricing related information for the specified option identifier. Items include -  * Ask * Bid * Mid * Mid Bid Ask * Settlement * Last Price Type (Settlement or MidBidAsk) * Last Price * Strike Price * Underlying Security Price * 52 Week High/Low * Open, High, Low for day. Note securities must be trading for day requested.    *Currently only OPRA Exchange is supported with exchange ISO \&quot;USA\&quot;* 
        /// </remarks>
        /// <exception cref="FactSet.SDK.FactSetOptions.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="optionsPricesRequest">Options Prices Request Body</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of OptionsPricesResponse</returns>
        System.Threading.Tasks.Task<OptionsPricesResponse> GetOptionsPricesForListAsync(OptionsPricesRequest optionsPricesRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Returns the pricing related information for the specified option identifier
        /// </summary>
        /// <remarks>
        /// Returns the pricing related information for the specified option identifier. Items include -  * Ask * Bid * Mid * Mid Bid Ask * Settlement * Last Price Type (Settlement or MidBidAsk) * Last Price * Strike Price * Underlying Security Price * 52 Week High/Low * Open, High, Low for day. Note securities must be trading for day requested.    *Currently only OPRA Exchange is supported with exchange ISO \&quot;USA\&quot;* 
        /// </remarks>
        /// <exception cref="FactSet.SDK.FactSetOptions.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="optionsPricesRequest">Options Prices Request Body</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (OptionsPricesResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<OptionsPricesResponse>> GetOptionsPricesForListWithHttpInfoAsync(OptionsPricesRequest optionsPricesRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Returns the volume details for the specified option identifier
        /// </summary>
        /// <remarks>
        /// Returns the volume details for the specified option identifier for a specified exchange. Data items include -  * Open Interest * Volume    *Currently only OPRA Exchange is supported with exchange ISO \&quot;USA\&quot;* 
        /// </remarks>
        /// <exception cref="FactSet.SDK.FactSetOptions.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="optionsVolumeRequest">Volume Request Object</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of OptionsVolumeResponse</returns>
        System.Threading.Tasks.Task<OptionsVolumeResponse> GetOptionsVolumeForListAsync(OptionsVolumeRequest optionsVolumeRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Returns the volume details for the specified option identifier
        /// </summary>
        /// <remarks>
        /// Returns the volume details for the specified option identifier for a specified exchange. Data items include -  * Open Interest * Volume    *Currently only OPRA Exchange is supported with exchange ISO \&quot;USA\&quot;* 
        /// </remarks>
        /// <exception cref="FactSet.SDK.FactSetOptions.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="optionsVolumeRequest">Volume Request Object</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (OptionsVolumeResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<OptionsVolumeResponse>> GetOptionsVolumeForListWithHttpInfoAsync(OptionsVolumeRequest optionsVolumeRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Returns the aggregate volume and open interest for the list of the options under the specified security identifier
        /// </summary>
        /// <remarks>
        /// Return the Volume and Open Interest details for list of the options for the specified underlying security identifier. The data is aggregated for all options contracts associated to the underlying id, or specified in the request only the contracts listed on a specific exchange. Data Includes -  * Put Call Ratio  * Total Put Volume &amp; Open Interest * Total Call Volume &amp; Open Interest * Total Put &amp; Call Volume &amp; Open Interest    *Currently only OPRA Exchange is supported with exchange ISO \&quot;USA\&quot;* 
        /// </remarks>
        /// <exception cref="FactSet.SDK.FactSetOptions.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="underlyingVolumeRequest">Underlying Volume Request Body</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UnderlyingVolumeResponse</returns>
        System.Threading.Tasks.Task<UnderlyingVolumeResponse> GetUnderlyingVolumeForListAsync(UnderlyingVolumeRequest underlyingVolumeRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Returns the aggregate volume and open interest for the list of the options under the specified security identifier
        /// </summary>
        /// <remarks>
        /// Return the Volume and Open Interest details for list of the options for the specified underlying security identifier. The data is aggregated for all options contracts associated to the underlying id, or specified in the request only the contracts listed on a specific exchange. Data Includes -  * Put Call Ratio  * Total Put Volume &amp; Open Interest * Total Call Volume &amp; Open Interest * Total Put &amp; Call Volume &amp; Open Interest    *Currently only OPRA Exchange is supported with exchange ISO \&quot;USA\&quot;* 
        /// </remarks>
        /// <exception cref="FactSet.SDK.FactSetOptions.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="underlyingVolumeRequest">Underlying Volume Request Body</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UnderlyingVolumeResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<UnderlyingVolumeResponse>> GetUnderlyingVolumeForListWithHttpInfoAsync(UnderlyingVolumeRequest underlyingVolumeRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IPricesVolumeApi : IPricesVolumeApiSync, IPricesVolumeApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class PricesVolumeApi : IPricesVolumeApi
    {
        private FactSet.SDK.FactSetOptions.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        # region Response Type Disctionaries
        
        private static readonly Dictionary<HttpStatusCode, System.Type> GetOptionsPricesForListResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)200, typeof(OptionsPricesResponse) },
            { (HttpStatusCode)400, typeof(ErrorResponse) },
            { (HttpStatusCode)401, typeof(ErrorResponse) },
            { (HttpStatusCode)403, typeof(ErrorResponse) },
            { (HttpStatusCode)415, typeof(ErrorResponse) },
            { (HttpStatusCode)500, typeof(ErrorResponse) },
        };

        private static readonly Dictionary<HttpStatusCode, System.Type> GetOptionsVolumeForListResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)200, typeof(OptionsVolumeResponse) },
            { (HttpStatusCode)400, typeof(ErrorResponse) },
            { (HttpStatusCode)401, typeof(ErrorResponse) },
            { (HttpStatusCode)403, typeof(ErrorResponse) },
            { (HttpStatusCode)415, typeof(ErrorResponse) },
            { (HttpStatusCode)500, typeof(ErrorResponse) },
        };

        private static readonly Dictionary<HttpStatusCode, System.Type> GetUnderlyingVolumeForListResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)200, typeof(UnderlyingVolumeResponse) },
            { (HttpStatusCode)400, typeof(ErrorResponse) },
            { (HttpStatusCode)401, typeof(ErrorResponse) },
            { (HttpStatusCode)403, typeof(ErrorResponse) },
            { (HttpStatusCode)415, typeof(ErrorResponse) },
            { (HttpStatusCode)500, typeof(ErrorResponse) },
        };

        # endregion Response Type Disctionaries

        # region Api Response Objects
        

        # endregion Api Response Objects

        /// <summary>
        /// Initializes a new instance of the <see cref="PricesVolumeApi"/> class.
        /// </summary>
        /// <returns></returns>
        public PricesVolumeApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PricesVolumeApi"/> class.
        /// </summary>
        /// <returns></returns>
        public PricesVolumeApi(string basePath)
        {
            this.Configuration = FactSet.SDK.FactSetOptions.Client.Configuration.MergeConfigurations(
                FactSet.SDK.FactSetOptions.Client.GlobalConfiguration.Instance,
                new FactSet.SDK.FactSetOptions.Client.Configuration { BasePath = basePath }
            );
            this.Client = new FactSet.SDK.FactSetOptions.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new FactSet.SDK.FactSetOptions.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = FactSet.SDK.FactSetOptions.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PricesVolumeApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public PricesVolumeApi(FactSet.SDK.FactSetOptions.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = FactSet.SDK.FactSetOptions.Client.Configuration.MergeConfigurations(
                FactSet.SDK.FactSetOptions.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new FactSet.SDK.FactSetOptions.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new FactSet.SDK.FactSetOptions.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = FactSet.SDK.FactSetOptions.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PricesVolumeApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public PricesVolumeApi(FactSet.SDK.FactSetOptions.Client.ISynchronousClient client, FactSet.SDK.FactSetOptions.Client.IAsynchronousClient asyncClient, FactSet.SDK.FactSetOptions.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = FactSet.SDK.FactSetOptions.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public FactSet.SDK.FactSetOptions.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public FactSet.SDK.FactSetOptions.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public FactSet.SDK.FactSetOptions.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public FactSet.SDK.FactSetOptions.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Returns the pricing related information for the specified option identifier Returns the pricing related information for the specified option identifier. Items include -  * Ask * Bid * Mid * Mid Bid Ask * Settlement * Last Price Type (Settlement or MidBidAsk) * Last Price * Strike Price * Underlying Security Price * 52 Week High/Low * Open, High, Low for day. Note securities must be trading for day requested.    *Currently only OPRA Exchange is supported with exchange ISO \&quot;USA\&quot;* 
        /// </summary>
        /// <exception cref="FactSet.SDK.FactSetOptions.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="optionsPricesRequest">Options Prices Request Body</param>
        /// <returns>OptionsPricesResponse</returns>
        public OptionsPricesResponse GetOptionsPricesForList(OptionsPricesRequest optionsPricesRequest)
        {
            var localVarResponse = GetOptionsPricesForListWithHttpInfo(optionsPricesRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns the pricing related information for the specified option identifier Returns the pricing related information for the specified option identifier. Items include -  * Ask * Bid * Mid * Mid Bid Ask * Settlement * Last Price Type (Settlement or MidBidAsk) * Last Price * Strike Price * Underlying Security Price * 52 Week High/Low * Open, High, Low for day. Note securities must be trading for day requested.    *Currently only OPRA Exchange is supported with exchange ISO \&quot;USA\&quot;* 
        /// </summary>
        /// <exception cref="FactSet.SDK.FactSetOptions.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="optionsPricesRequest">Options Prices Request Body</param>
        /// <returns>ApiResponse of OptionsPricesResponse</returns>
        public ApiResponse<OptionsPricesResponse> GetOptionsPricesForListWithHttpInfo(OptionsPricesRequest optionsPricesRequest)
        {
            // verify the required parameter 'optionsPricesRequest' is set
            if (optionsPricesRequest == null)
            {
                throw new FactSet.SDK.FactSetOptions.Client.ApiException(400, "Missing required parameter 'optionsPricesRequest' when calling PricesVolumeApi->GetOptionsPricesForList");
            }

            FactSet.SDK.FactSetOptions.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.FactSetOptions.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.FactSetOptions.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.FactSetOptions.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = optionsPricesRequest;

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.FactSetOptions.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = GetOptionsPricesForListResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Post<
            OptionsPricesResponse>("/factset-options/v1/prices", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetOptionsPricesForList", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// Returns the pricing related information for the specified option identifier Returns the pricing related information for the specified option identifier. Items include -  * Ask * Bid * Mid * Mid Bid Ask * Settlement * Last Price Type (Settlement or MidBidAsk) * Last Price * Strike Price * Underlying Security Price * 52 Week High/Low * Open, High, Low for day. Note securities must be trading for day requested.    *Currently only OPRA Exchange is supported with exchange ISO \&quot;USA\&quot;* 
        /// </summary>
        /// <exception cref="FactSet.SDK.FactSetOptions.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="optionsPricesRequest">Options Prices Request Body</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of OptionsPricesResponse</returns>
        public async System.Threading.Tasks.Task<OptionsPricesResponse>GetOptionsPricesForListAsync(OptionsPricesRequest optionsPricesRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await GetOptionsPricesForListWithHttpInfoAsync(optionsPricesRequest, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns the pricing related information for the specified option identifier Returns the pricing related information for the specified option identifier. Items include -  * Ask * Bid * Mid * Mid Bid Ask * Settlement * Last Price Type (Settlement or MidBidAsk) * Last Price * Strike Price * Underlying Security Price * 52 Week High/Low * Open, High, Low for day. Note securities must be trading for day requested.    *Currently only OPRA Exchange is supported with exchange ISO \&quot;USA\&quot;* 
        /// </summary>
        /// <exception cref="FactSet.SDK.FactSetOptions.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="optionsPricesRequest">Options Prices Request Body</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (OptionsPricesResponse)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<OptionsPricesResponse>> GetOptionsPricesForListWithHttpInfoAsync(OptionsPricesRequest optionsPricesRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'optionsPricesRequest' is set
            if (optionsPricesRequest == null)
            {
                throw new FactSet.SDK.FactSetOptions.Client.ApiException(400, "Missing required parameter 'optionsPricesRequest' when calling PricesVolumeApi->GetOptionsPricesForList");
            }


            FactSet.SDK.FactSetOptions.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.FactSetOptions.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.FactSetOptions.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.FactSetOptions.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = optionsPricesRequest;

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.FactSetOptions.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = GetOptionsPricesForListResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<OptionsPricesResponse>("/factset-options/v1/prices", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetOptionsPricesForList", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Returns the volume details for the specified option identifier Returns the volume details for the specified option identifier for a specified exchange. Data items include -  * Open Interest * Volume    *Currently only OPRA Exchange is supported with exchange ISO \&quot;USA\&quot;* 
        /// </summary>
        /// <exception cref="FactSet.SDK.FactSetOptions.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="optionsVolumeRequest">Volume Request Object</param>
        /// <returns>OptionsVolumeResponse</returns>
        public OptionsVolumeResponse GetOptionsVolumeForList(OptionsVolumeRequest optionsVolumeRequest)
        {
            var localVarResponse = GetOptionsVolumeForListWithHttpInfo(optionsVolumeRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns the volume details for the specified option identifier Returns the volume details for the specified option identifier for a specified exchange. Data items include -  * Open Interest * Volume    *Currently only OPRA Exchange is supported with exchange ISO \&quot;USA\&quot;* 
        /// </summary>
        /// <exception cref="FactSet.SDK.FactSetOptions.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="optionsVolumeRequest">Volume Request Object</param>
        /// <returns>ApiResponse of OptionsVolumeResponse</returns>
        public ApiResponse<OptionsVolumeResponse> GetOptionsVolumeForListWithHttpInfo(OptionsVolumeRequest optionsVolumeRequest)
        {
            // verify the required parameter 'optionsVolumeRequest' is set
            if (optionsVolumeRequest == null)
            {
                throw new FactSet.SDK.FactSetOptions.Client.ApiException(400, "Missing required parameter 'optionsVolumeRequest' when calling PricesVolumeApi->GetOptionsVolumeForList");
            }

            FactSet.SDK.FactSetOptions.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.FactSetOptions.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.FactSetOptions.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.FactSetOptions.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = optionsVolumeRequest;

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.FactSetOptions.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = GetOptionsVolumeForListResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Post<
            OptionsVolumeResponse>("/factset-options/v1/volume", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetOptionsVolumeForList", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// Returns the volume details for the specified option identifier Returns the volume details for the specified option identifier for a specified exchange. Data items include -  * Open Interest * Volume    *Currently only OPRA Exchange is supported with exchange ISO \&quot;USA\&quot;* 
        /// </summary>
        /// <exception cref="FactSet.SDK.FactSetOptions.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="optionsVolumeRequest">Volume Request Object</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of OptionsVolumeResponse</returns>
        public async System.Threading.Tasks.Task<OptionsVolumeResponse>GetOptionsVolumeForListAsync(OptionsVolumeRequest optionsVolumeRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await GetOptionsVolumeForListWithHttpInfoAsync(optionsVolumeRequest, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns the volume details for the specified option identifier Returns the volume details for the specified option identifier for a specified exchange. Data items include -  * Open Interest * Volume    *Currently only OPRA Exchange is supported with exchange ISO \&quot;USA\&quot;* 
        /// </summary>
        /// <exception cref="FactSet.SDK.FactSetOptions.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="optionsVolumeRequest">Volume Request Object</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (OptionsVolumeResponse)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<OptionsVolumeResponse>> GetOptionsVolumeForListWithHttpInfoAsync(OptionsVolumeRequest optionsVolumeRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'optionsVolumeRequest' is set
            if (optionsVolumeRequest == null)
            {
                throw new FactSet.SDK.FactSetOptions.Client.ApiException(400, "Missing required parameter 'optionsVolumeRequest' when calling PricesVolumeApi->GetOptionsVolumeForList");
            }


            FactSet.SDK.FactSetOptions.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.FactSetOptions.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.FactSetOptions.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.FactSetOptions.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = optionsVolumeRequest;

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.FactSetOptions.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = GetOptionsVolumeForListResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<OptionsVolumeResponse>("/factset-options/v1/volume", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetOptionsVolumeForList", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Returns the aggregate volume and open interest for the list of the options under the specified security identifier Return the Volume and Open Interest details for list of the options for the specified underlying security identifier. The data is aggregated for all options contracts associated to the underlying id, or specified in the request only the contracts listed on a specific exchange. Data Includes -  * Put Call Ratio  * Total Put Volume &amp; Open Interest * Total Call Volume &amp; Open Interest * Total Put &amp; Call Volume &amp; Open Interest    *Currently only OPRA Exchange is supported with exchange ISO \&quot;USA\&quot;* 
        /// </summary>
        /// <exception cref="FactSet.SDK.FactSetOptions.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="underlyingVolumeRequest">Underlying Volume Request Body</param>
        /// <returns>UnderlyingVolumeResponse</returns>
        public UnderlyingVolumeResponse GetUnderlyingVolumeForList(UnderlyingVolumeRequest underlyingVolumeRequest)
        {
            var localVarResponse = GetUnderlyingVolumeForListWithHttpInfo(underlyingVolumeRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns the aggregate volume and open interest for the list of the options under the specified security identifier Return the Volume and Open Interest details for list of the options for the specified underlying security identifier. The data is aggregated for all options contracts associated to the underlying id, or specified in the request only the contracts listed on a specific exchange. Data Includes -  * Put Call Ratio  * Total Put Volume &amp; Open Interest * Total Call Volume &amp; Open Interest * Total Put &amp; Call Volume &amp; Open Interest    *Currently only OPRA Exchange is supported with exchange ISO \&quot;USA\&quot;* 
        /// </summary>
        /// <exception cref="FactSet.SDK.FactSetOptions.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="underlyingVolumeRequest">Underlying Volume Request Body</param>
        /// <returns>ApiResponse of UnderlyingVolumeResponse</returns>
        public ApiResponse<UnderlyingVolumeResponse> GetUnderlyingVolumeForListWithHttpInfo(UnderlyingVolumeRequest underlyingVolumeRequest)
        {
            // verify the required parameter 'underlyingVolumeRequest' is set
            if (underlyingVolumeRequest == null)
            {
                throw new FactSet.SDK.FactSetOptions.Client.ApiException(400, "Missing required parameter 'underlyingVolumeRequest' when calling PricesVolumeApi->GetUnderlyingVolumeForList");
            }

            FactSet.SDK.FactSetOptions.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.FactSetOptions.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.FactSetOptions.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.FactSetOptions.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = underlyingVolumeRequest;

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.FactSetOptions.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = GetUnderlyingVolumeForListResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Post<
            UnderlyingVolumeResponse>("/factset-options/v1/underlying-volume", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetUnderlyingVolumeForList", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// Returns the aggregate volume and open interest for the list of the options under the specified security identifier Return the Volume and Open Interest details for list of the options for the specified underlying security identifier. The data is aggregated for all options contracts associated to the underlying id, or specified in the request only the contracts listed on a specific exchange. Data Includes -  * Put Call Ratio  * Total Put Volume &amp; Open Interest * Total Call Volume &amp; Open Interest * Total Put &amp; Call Volume &amp; Open Interest    *Currently only OPRA Exchange is supported with exchange ISO \&quot;USA\&quot;* 
        /// </summary>
        /// <exception cref="FactSet.SDK.FactSetOptions.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="underlyingVolumeRequest">Underlying Volume Request Body</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UnderlyingVolumeResponse</returns>
        public async System.Threading.Tasks.Task<UnderlyingVolumeResponse>GetUnderlyingVolumeForListAsync(UnderlyingVolumeRequest underlyingVolumeRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await GetUnderlyingVolumeForListWithHttpInfoAsync(underlyingVolumeRequest, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns the aggregate volume and open interest for the list of the options under the specified security identifier Return the Volume and Open Interest details for list of the options for the specified underlying security identifier. The data is aggregated for all options contracts associated to the underlying id, or specified in the request only the contracts listed on a specific exchange. Data Includes -  * Put Call Ratio  * Total Put Volume &amp; Open Interest * Total Call Volume &amp; Open Interest * Total Put &amp; Call Volume &amp; Open Interest    *Currently only OPRA Exchange is supported with exchange ISO \&quot;USA\&quot;* 
        /// </summary>
        /// <exception cref="FactSet.SDK.FactSetOptions.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="underlyingVolumeRequest">Underlying Volume Request Body</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UnderlyingVolumeResponse)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<UnderlyingVolumeResponse>> GetUnderlyingVolumeForListWithHttpInfoAsync(UnderlyingVolumeRequest underlyingVolumeRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'underlyingVolumeRequest' is set
            if (underlyingVolumeRequest == null)
            {
                throw new FactSet.SDK.FactSetOptions.Client.ApiException(400, "Missing required parameter 'underlyingVolumeRequest' when calling PricesVolumeApi->GetUnderlyingVolumeForList");
            }


            FactSet.SDK.FactSetOptions.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.FactSetOptions.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.FactSetOptions.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.FactSetOptions.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = underlyingVolumeRequest;

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.FactSetOptions.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = GetUnderlyingVolumeForListResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<UnderlyingVolumeResponse>("/factset-options/v1/underlying-volume", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetUnderlyingVolumeForList", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
