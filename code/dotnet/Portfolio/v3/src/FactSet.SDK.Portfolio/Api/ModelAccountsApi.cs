/*
 * ModelAccounts API
 *
 * Allow clients to fetch ModelAccounts Analytics through APIs.
 *
 * The version of the OpenAPI document: 3
 * Contact: analytics.api.support@factset.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using FactSet.SDK.Portfolio.Client;
using FactSet.SDK.Portfolio.Model;
using FactSet.SDK.Utils.Authentication;

namespace FactSet.SDK.Portfolio.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IModelAccountsApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Create or update an existing model account
        /// </summary>
        /// <exception cref="FactSet.SDK.Portfolio.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The path and filename of the model account to create or update</param>
        /// <param name="modelAccountFieldsRoot">The object containing the input values (optional)</param>
        /// <returns>void</returns>
        void CreateOrUpdateModelAccount(string name, ModelAccountFieldsRoot modelAccountFieldsRoot = default(ModelAccountFieldsRoot));

        /// <summary>
        /// Create or update an existing model account
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FactSet.SDK.Portfolio.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The path and filename of the model account to create or update</param>
        /// <param name="modelAccountFieldsRoot">The object containing the input values (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> CreateOrUpdateModelAccountWithHttpInfo(string name, ModelAccountFieldsRoot modelAccountFieldsRoot = default(ModelAccountFieldsRoot));
        /// <summary>
        /// Delete model account, takes an account path and name and deletes it.
        /// </summary>
        /// <exception cref="FactSet.SDK.Portfolio.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The path and filename of model account to delete</param>
        /// <returns>void</returns>
        void DeleteAModelAccount(string name);

        /// <summary>
        /// Delete model account, takes an account path and name and deletes it.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FactSet.SDK.Portfolio.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The path and filename of model account to delete</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteAModelAccountWithHttpInfo(string name);
        /// <summary>
        /// Get account endpoint, takes an account name, date and returns underlying data for that date
        /// </summary>
        /// <exception cref="FactSet.SDK.Portfolio.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The path and filename of the account to get</param>
        /// <param name="date">The date for which data needs to be updated</param>
        /// <param name="format">Optional format for the response, supported formats are JsonStach and AccountModel (optional, default to &quot;JsonStach&quot;)</param>
        /// <returns>string</returns>
        string GetAccountForDate(string name, string date, string format = default(string));

        /// <summary>
        /// Get account endpoint, takes an account name, date and returns underlying data for that date
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FactSet.SDK.Portfolio.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The path and filename of the account to get</param>
        /// <param name="date">The date for which data needs to be updated</param>
        /// <param name="format">Optional format for the response, supported formats are JsonStach and AccountModel (optional, default to &quot;JsonStach&quot;)</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> GetAccountForDateWithHttpInfo(string name, string date, string format = default(string));
        /// <summary>
        /// Get account endpoint, takes an account name and returns underlying data
        /// </summary>
        /// <exception cref="FactSet.SDK.Portfolio.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The path and filename of the account to get</param>
        /// <param name="symbol">The symbol for which data needs to be updated</param>
        /// <param name="date">The date for which data needs to be updated</param>
        /// <param name="format">Optional format for the response, supported formats are JsonStach and AccountModel (optional, default to &quot;JsonStach&quot;)</param>
        /// <returns>string</returns>
        string GetAccountForDateAndSymbol(string name, string symbol, string date, string format = default(string));

        /// <summary>
        /// Get account endpoint, takes an account name and returns underlying data
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FactSet.SDK.Portfolio.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The path and filename of the account to get</param>
        /// <param name="symbol">The symbol for which data needs to be updated</param>
        /// <param name="date">The date for which data needs to be updated</param>
        /// <param name="format">Optional format for the response, supported formats are JsonStach and AccountModel (optional, default to &quot;JsonStach&quot;)</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> GetAccountForDateAndSymbolWithHttpInfo(string name, string symbol, string date, string format = default(string));
        /// <summary>
        /// Get account endpoint, takes an account name, symbol and returns underlying data for that symbol
        /// </summary>
        /// <exception cref="FactSet.SDK.Portfolio.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The path and filename of the account to get</param>
        /// <param name="symbol">The symbol for which data needs to be updated</param>
        /// <param name="format">Optional format for the response, supported formats are JsonStach and AccountModel (optional, default to &quot;JsonStach&quot;)</param>
        /// <returns>string</returns>
        string GetAccountForSymbol(string name, string symbol, string format = default(string));

        /// <summary>
        /// Get account endpoint, takes an account name, symbol and returns underlying data for that symbol
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FactSet.SDK.Portfolio.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The path and filename of the account to get</param>
        /// <param name="symbol">The symbol for which data needs to be updated</param>
        /// <param name="format">Optional format for the response, supported formats are JsonStach and AccountModel (optional, default to &quot;JsonStach&quot;)</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> GetAccountForSymbolWithHttpInfo(string name, string symbol, string format = default(string));
        /// <summary>
        /// Get account schema endpoint, takes an account name and returns its schema
        /// </summary>
        /// <exception cref="FactSet.SDK.Portfolio.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The path and filename of the account to get its schema</param>
        /// <returns>string</returns>
        string GetAccountSchema(string name);

        /// <summary>
        /// Get account schema endpoint, takes an account name and returns its schema
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FactSet.SDK.Portfolio.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The path and filename of the account to get its schema</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> GetAccountSchemaWithHttpInfo(string name);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IModelAccountsApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Create or update an existing model account
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FactSet.SDK.Portfolio.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The path and filename of the model account to create or update</param>
        /// <param name="modelAccountFieldsRoot">The object containing the input values (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task CreateOrUpdateModelAccountAsync(string name, ModelAccountFieldsRoot modelAccountFieldsRoot = default(ModelAccountFieldsRoot), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create or update an existing model account
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FactSet.SDK.Portfolio.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The path and filename of the model account to create or update</param>
        /// <param name="modelAccountFieldsRoot">The object containing the input values (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> CreateOrUpdateModelAccountWithHttpInfoAsync(string name, ModelAccountFieldsRoot modelAccountFieldsRoot = default(ModelAccountFieldsRoot), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Delete model account, takes an account path and name and deletes it.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FactSet.SDK.Portfolio.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The path and filename of model account to delete</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteAModelAccountAsync(string name, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Delete model account, takes an account path and name and deletes it.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FactSet.SDK.Portfolio.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The path and filename of model account to delete</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteAModelAccountWithHttpInfoAsync(string name, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get account endpoint, takes an account name, date and returns underlying data for that date
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FactSet.SDK.Portfolio.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The path and filename of the account to get</param>
        /// <param name="date">The date for which data needs to be updated</param>
        /// <param name="format">Optional format for the response, supported formats are JsonStach and AccountModel (optional, default to &quot;JsonStach&quot;)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> GetAccountForDateAsync(string name, string date, string format = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get account endpoint, takes an account name, date and returns underlying data for that date
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FactSet.SDK.Portfolio.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The path and filename of the account to get</param>
        /// <param name="date">The date for which data needs to be updated</param>
        /// <param name="format">Optional format for the response, supported formats are JsonStach and AccountModel (optional, default to &quot;JsonStach&quot;)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> GetAccountForDateWithHttpInfoAsync(string name, string date, string format = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get account endpoint, takes an account name and returns underlying data
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FactSet.SDK.Portfolio.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The path and filename of the account to get</param>
        /// <param name="symbol">The symbol for which data needs to be updated</param>
        /// <param name="date">The date for which data needs to be updated</param>
        /// <param name="format">Optional format for the response, supported formats are JsonStach and AccountModel (optional, default to &quot;JsonStach&quot;)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> GetAccountForDateAndSymbolAsync(string name, string symbol, string date, string format = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get account endpoint, takes an account name and returns underlying data
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FactSet.SDK.Portfolio.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The path and filename of the account to get</param>
        /// <param name="symbol">The symbol for which data needs to be updated</param>
        /// <param name="date">The date for which data needs to be updated</param>
        /// <param name="format">Optional format for the response, supported formats are JsonStach and AccountModel (optional, default to &quot;JsonStach&quot;)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> GetAccountForDateAndSymbolWithHttpInfoAsync(string name, string symbol, string date, string format = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get account endpoint, takes an account name, symbol and returns underlying data for that symbol
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FactSet.SDK.Portfolio.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The path and filename of the account to get</param>
        /// <param name="symbol">The symbol for which data needs to be updated</param>
        /// <param name="format">Optional format for the response, supported formats are JsonStach and AccountModel (optional, default to &quot;JsonStach&quot;)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> GetAccountForSymbolAsync(string name, string symbol, string format = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get account endpoint, takes an account name, symbol and returns underlying data for that symbol
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FactSet.SDK.Portfolio.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The path and filename of the account to get</param>
        /// <param name="symbol">The symbol for which data needs to be updated</param>
        /// <param name="format">Optional format for the response, supported formats are JsonStach and AccountModel (optional, default to &quot;JsonStach&quot;)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> GetAccountForSymbolWithHttpInfoAsync(string name, string symbol, string format = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get account schema endpoint, takes an account name and returns its schema
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FactSet.SDK.Portfolio.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The path and filename of the account to get its schema</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> GetAccountSchemaAsync(string name, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get account schema endpoint, takes an account name and returns its schema
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FactSet.SDK.Portfolio.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The path and filename of the account to get its schema</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> GetAccountSchemaWithHttpInfoAsync(string name, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IModelAccountsApi : IModelAccountsApiSync, IModelAccountsApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ModelAccountsApi : IModelAccountsApi
    {
        private FactSet.SDK.Portfolio.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        # region Response Type Disctionaries
                private static readonly Dictionary<HttpStatusCode, System.Type> CreateOrUpdateModelAccountResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
        };
        private static readonly Dictionary<HttpStatusCode, System.Type> DeleteAModelAccountResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
        };
        private static readonly Dictionary<HttpStatusCode, System.Type> GetAccountForDateResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)200, typeof(string) },
        };
        private static readonly Dictionary<HttpStatusCode, System.Type> GetAccountForDateAndSymbolResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)200, typeof(string) },
        };
        private static readonly Dictionary<HttpStatusCode, System.Type> GetAccountForSymbolResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)200, typeof(string) },
        };
        private static readonly Dictionary<HttpStatusCode, System.Type> GetAccountSchemaResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)200, typeof(string) },
        };

        # endregion Response Type Disctionaries

        # region Api Response Objects
         

        # endregion Api Response Objects

        /// <summary>
        /// Initializes a new instance of the <see cref="ModelAccountsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ModelAccountsApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ModelAccountsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ModelAccountsApi(string basePath)
        {
            this.Configuration = FactSet.SDK.Portfolio.Client.Configuration.MergeConfigurations(
                FactSet.SDK.Portfolio.Client.GlobalConfiguration.Instance,
                new FactSet.SDK.Portfolio.Client.Configuration { BasePath = basePath }
            );
            this.Client = new FactSet.SDK.Portfolio.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new FactSet.SDK.Portfolio.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = FactSet.SDK.Portfolio.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ModelAccountsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ModelAccountsApi(FactSet.SDK.Portfolio.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = FactSet.SDK.Portfolio.Client.Configuration.MergeConfigurations(
                FactSet.SDK.Portfolio.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new FactSet.SDK.Portfolio.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new FactSet.SDK.Portfolio.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = FactSet.SDK.Portfolio.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ModelAccountsApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public ModelAccountsApi(FactSet.SDK.Portfolio.Client.ISynchronousClient client, FactSet.SDK.Portfolio.Client.IAsynchronousClient asyncClient, FactSet.SDK.Portfolio.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = FactSet.SDK.Portfolio.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public FactSet.SDK.Portfolio.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public FactSet.SDK.Portfolio.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public FactSet.SDK.Portfolio.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public FactSet.SDK.Portfolio.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Create or update an existing model account 
        /// </summary>
        /// <exception cref="FactSet.SDK.Portfolio.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The path and filename of the model account to create or update</param>
        /// <param name="modelAccountFieldsRoot">The object containing the input values (optional)</param>
        /// <returns>void</returns>
        public void CreateOrUpdateModelAccount(string name, ModelAccountFieldsRoot modelAccountFieldsRoot = default(ModelAccountFieldsRoot))
        {
            CreateOrUpdateModelAccountWithHttpInfo(name, modelAccountFieldsRoot);
        }

        /// <summary>
        /// Create or update an existing model account 
        /// </summary>
        /// <exception cref="FactSet.SDK.Portfolio.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The path and filename of the model account to create or update</param>
        /// <param name="modelAccountFieldsRoot">The object containing the input values (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> CreateOrUpdateModelAccountWithHttpInfo(string name, ModelAccountFieldsRoot modelAccountFieldsRoot = default(ModelAccountFieldsRoot))
        {
            // verify the required parameter 'name' is set
            if (name == null)
            {
                throw new FactSet.SDK.Portfolio.Client.ApiException(400, "Missing required parameter 'name' when calling ModelAccountsApi->CreateOrUpdateModelAccount");
            }

            FactSet.SDK.Portfolio.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.Portfolio.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = FactSet.SDK.Portfolio.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.Portfolio.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("name", FactSet.SDK.Portfolio.Client.ClientUtils.ParameterToString(name)); // path parameter
            localVarRequestOptions.Data = modelAccountFieldsRoot;

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.Portfolio.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = CreateOrUpdateModelAccountResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Put<
            Object>("/analytics/accounts/v3/models/{name}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateOrUpdateModelAccount", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// Create or update an existing model account 
        /// </summary>
        /// <exception cref="FactSet.SDK.Portfolio.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The path and filename of the model account to create or update</param>
        /// <param name="modelAccountFieldsRoot">The object containing the input values (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task CreateOrUpdateModelAccountAsync(string name, ModelAccountFieldsRoot modelAccountFieldsRoot = default(ModelAccountFieldsRoot), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await CreateOrUpdateModelAccountWithHttpInfoAsync(name, modelAccountFieldsRoot, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Create or update an existing model account 
        /// </summary>
        /// <exception cref="FactSet.SDK.Portfolio.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The path and filename of the model account to create or update</param>
        /// <param name="modelAccountFieldsRoot">The object containing the input values (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>

        public async System.Threading.Tasks.Task<ApiResponse<Object>> CreateOrUpdateModelAccountWithHttpInfoAsync(string name, ModelAccountFieldsRoot modelAccountFieldsRoot = default(ModelAccountFieldsRoot), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'name' is set
            if (name == null)
            {
                throw new FactSet.SDK.Portfolio.Client.ApiException(400, "Missing required parameter 'name' when calling ModelAccountsApi->CreateOrUpdateModelAccount");
            }


            FactSet.SDK.Portfolio.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.Portfolio.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = FactSet.SDK.Portfolio.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.Portfolio.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("name", FactSet.SDK.Portfolio.Client.ClientUtils.ParameterToString(name)); // path parameter
            localVarRequestOptions.Data = modelAccountFieldsRoot;

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.Portfolio.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = CreateOrUpdateModelAccountResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<Object>("/analytics/accounts/v3/models/{name}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateOrUpdateModelAccount", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete model account, takes an account path and name and deletes it. 
        /// </summary>
        /// <exception cref="FactSet.SDK.Portfolio.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The path and filename of model account to delete</param>
        /// <returns>void</returns>
        public void DeleteAModelAccount(string name)
        {
            DeleteAModelAccountWithHttpInfo(name);
        }

        /// <summary>
        /// Delete model account, takes an account path and name and deletes it. 
        /// </summary>
        /// <exception cref="FactSet.SDK.Portfolio.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The path and filename of model account to delete</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteAModelAccountWithHttpInfo(string name)
        {
            // verify the required parameter 'name' is set
            if (name == null)
            {
                throw new FactSet.SDK.Portfolio.Client.ApiException(400, "Missing required parameter 'name' when calling ModelAccountsApi->DeleteAModelAccount");
            }

            FactSet.SDK.Portfolio.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.Portfolio.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = FactSet.SDK.Portfolio.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.Portfolio.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("name", FactSet.SDK.Portfolio.Client.ClientUtils.ParameterToString(name)); // path parameter

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.Portfolio.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = DeleteAModelAccountResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Delete<
            Object>("/analytics/accounts/v3/models/{name}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteAModelAccount", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// Delete model account, takes an account path and name and deletes it. 
        /// </summary>
        /// <exception cref="FactSet.SDK.Portfolio.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The path and filename of model account to delete</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteAModelAccountAsync(string name, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await DeleteAModelAccountWithHttpInfoAsync(name, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Delete model account, takes an account path and name and deletes it. 
        /// </summary>
        /// <exception cref="FactSet.SDK.Portfolio.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The path and filename of model account to delete</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>

        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteAModelAccountWithHttpInfoAsync(string name, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'name' is set
            if (name == null)
            {
                throw new FactSet.SDK.Portfolio.Client.ApiException(400, "Missing required parameter 'name' when calling ModelAccountsApi->DeleteAModelAccount");
            }


            FactSet.SDK.Portfolio.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.Portfolio.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = FactSet.SDK.Portfolio.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.Portfolio.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("name", FactSet.SDK.Portfolio.Client.ClientUtils.ParameterToString(name)); // path parameter

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.Portfolio.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = DeleteAModelAccountResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/analytics/accounts/v3/models/{name}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteAModelAccount", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get account endpoint, takes an account name, date and returns underlying data for that date 
        /// </summary>
        /// <exception cref="FactSet.SDK.Portfolio.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The path and filename of the account to get</param>
        /// <param name="date">The date for which data needs to be updated</param>
        /// <param name="format">Optional format for the response, supported formats are JsonStach and AccountModel (optional, default to &quot;JsonStach&quot;)</param>
        /// <returns>string</returns>
        public string GetAccountForDate(string name, string date, string format = default(string))
        {
            var localVarResponse = GetAccountForDateWithHttpInfo(name, date, format);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get account endpoint, takes an account name, date and returns underlying data for that date 
        /// </summary>
        /// <exception cref="FactSet.SDK.Portfolio.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The path and filename of the account to get</param>
        /// <param name="date">The date for which data needs to be updated</param>
        /// <param name="format">Optional format for the response, supported formats are JsonStach and AccountModel (optional, default to &quot;JsonStach&quot;)</param>
        /// <returns>ApiResponse of string</returns>
        public ApiResponse<string> GetAccountForDateWithHttpInfo(string name, string date, string format = default(string))
        {
            // verify the required parameter 'name' is set
            if (name == null)
            {
                throw new FactSet.SDK.Portfolio.Client.ApiException(400, "Missing required parameter 'name' when calling ModelAccountsApi->GetAccountForDate");
            }

            // verify the required parameter 'date' is set
            if (date == null)
            {
                throw new FactSet.SDK.Portfolio.Client.ApiException(400, "Missing required parameter 'date' when calling ModelAccountsApi->GetAccountForDate");
            }

            FactSet.SDK.Portfolio.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.Portfolio.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.Portfolio.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.Portfolio.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("name", FactSet.SDK.Portfolio.Client.ClientUtils.ParameterToString(name)); // path parameter
            localVarRequestOptions.PathParameters.Add("date", FactSet.SDK.Portfolio.Client.ClientUtils.ParameterToString(date)); // path parameter
            if (format != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.Portfolio.Client.ClientUtils.ParameterToMultiMap("", "format", format));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.Portfolio.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = GetAccountForDateResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Get<
            string>("/analytics/accounts/v3/models/{name}/dates/{date}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAccountForDate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// Get account endpoint, takes an account name, date and returns underlying data for that date 
        /// </summary>
        /// <exception cref="FactSet.SDK.Portfolio.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The path and filename of the account to get</param>
        /// <param name="date">The date for which data needs to be updated</param>
        /// <param name="format">Optional format for the response, supported formats are JsonStach and AccountModel (optional, default to &quot;JsonStach&quot;)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string>GetAccountForDateAsync(string name, string date, string format = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await GetAccountForDateWithHttpInfoAsync(name, date, format, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get account endpoint, takes an account name, date and returns underlying data for that date 
        /// </summary>
        /// <exception cref="FactSet.SDK.Portfolio.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The path and filename of the account to get</param>
        /// <param name="date">The date for which data needs to be updated</param>
        /// <param name="format">Optional format for the response, supported formats are JsonStach and AccountModel (optional, default to &quot;JsonStach&quot;)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (string)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<string>> GetAccountForDateWithHttpInfoAsync(string name, string date, string format = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'name' is set
            if (name == null)
            {
                throw new FactSet.SDK.Portfolio.Client.ApiException(400, "Missing required parameter 'name' when calling ModelAccountsApi->GetAccountForDate");
            }

            // verify the required parameter 'date' is set
            if (date == null)
            {
                throw new FactSet.SDK.Portfolio.Client.ApiException(400, "Missing required parameter 'date' when calling ModelAccountsApi->GetAccountForDate");
            }


            FactSet.SDK.Portfolio.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.Portfolio.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.Portfolio.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.Portfolio.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("name", FactSet.SDK.Portfolio.Client.ClientUtils.ParameterToString(name)); // path parameter
            localVarRequestOptions.PathParameters.Add("date", FactSet.SDK.Portfolio.Client.ClientUtils.ParameterToString(date)); // path parameter
            if (format != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.Portfolio.Client.ClientUtils.ParameterToMultiMap("", "format", format));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.Portfolio.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = GetAccountForDateResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<string>("/analytics/accounts/v3/models/{name}/dates/{date}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAccountForDate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get account endpoint, takes an account name and returns underlying data 
        /// </summary>
        /// <exception cref="FactSet.SDK.Portfolio.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The path and filename of the account to get</param>
        /// <param name="symbol">The symbol for which data needs to be updated</param>
        /// <param name="date">The date for which data needs to be updated</param>
        /// <param name="format">Optional format for the response, supported formats are JsonStach and AccountModel (optional, default to &quot;JsonStach&quot;)</param>
        /// <returns>string</returns>
        public string GetAccountForDateAndSymbol(string name, string symbol, string date, string format = default(string))
        {
            var localVarResponse = GetAccountForDateAndSymbolWithHttpInfo(name, symbol, date, format);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get account endpoint, takes an account name and returns underlying data 
        /// </summary>
        /// <exception cref="FactSet.SDK.Portfolio.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The path and filename of the account to get</param>
        /// <param name="symbol">The symbol for which data needs to be updated</param>
        /// <param name="date">The date for which data needs to be updated</param>
        /// <param name="format">Optional format for the response, supported formats are JsonStach and AccountModel (optional, default to &quot;JsonStach&quot;)</param>
        /// <returns>ApiResponse of string</returns>
        public ApiResponse<string> GetAccountForDateAndSymbolWithHttpInfo(string name, string symbol, string date, string format = default(string))
        {
            // verify the required parameter 'name' is set
            if (name == null)
            {
                throw new FactSet.SDK.Portfolio.Client.ApiException(400, "Missing required parameter 'name' when calling ModelAccountsApi->GetAccountForDateAndSymbol");
            }

            // verify the required parameter 'symbol' is set
            if (symbol == null)
            {
                throw new FactSet.SDK.Portfolio.Client.ApiException(400, "Missing required parameter 'symbol' when calling ModelAccountsApi->GetAccountForDateAndSymbol");
            }

            // verify the required parameter 'date' is set
            if (date == null)
            {
                throw new FactSet.SDK.Portfolio.Client.ApiException(400, "Missing required parameter 'date' when calling ModelAccountsApi->GetAccountForDateAndSymbol");
            }

            FactSet.SDK.Portfolio.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.Portfolio.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.Portfolio.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.Portfolio.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("name", FactSet.SDK.Portfolio.Client.ClientUtils.ParameterToString(name)); // path parameter
            localVarRequestOptions.PathParameters.Add("symbol", FactSet.SDK.Portfolio.Client.ClientUtils.ParameterToString(symbol)); // path parameter
            localVarRequestOptions.PathParameters.Add("date", FactSet.SDK.Portfolio.Client.ClientUtils.ParameterToString(date)); // path parameter
            if (format != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.Portfolio.Client.ClientUtils.ParameterToMultiMap("", "format", format));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.Portfolio.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = GetAccountForDateAndSymbolResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Get<
            string>("/analytics/accounts/v3/models/{name}/dates/{date}/symbols/{symbol}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAccountForDateAndSymbol", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// Get account endpoint, takes an account name and returns underlying data 
        /// </summary>
        /// <exception cref="FactSet.SDK.Portfolio.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The path and filename of the account to get</param>
        /// <param name="symbol">The symbol for which data needs to be updated</param>
        /// <param name="date">The date for which data needs to be updated</param>
        /// <param name="format">Optional format for the response, supported formats are JsonStach and AccountModel (optional, default to &quot;JsonStach&quot;)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string>GetAccountForDateAndSymbolAsync(string name, string symbol, string date, string format = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await GetAccountForDateAndSymbolWithHttpInfoAsync(name, symbol, date, format, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get account endpoint, takes an account name and returns underlying data 
        /// </summary>
        /// <exception cref="FactSet.SDK.Portfolio.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The path and filename of the account to get</param>
        /// <param name="symbol">The symbol for which data needs to be updated</param>
        /// <param name="date">The date for which data needs to be updated</param>
        /// <param name="format">Optional format for the response, supported formats are JsonStach and AccountModel (optional, default to &quot;JsonStach&quot;)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (string)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<string>> GetAccountForDateAndSymbolWithHttpInfoAsync(string name, string symbol, string date, string format = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'name' is set
            if (name == null)
            {
                throw new FactSet.SDK.Portfolio.Client.ApiException(400, "Missing required parameter 'name' when calling ModelAccountsApi->GetAccountForDateAndSymbol");
            }

            // verify the required parameter 'symbol' is set
            if (symbol == null)
            {
                throw new FactSet.SDK.Portfolio.Client.ApiException(400, "Missing required parameter 'symbol' when calling ModelAccountsApi->GetAccountForDateAndSymbol");
            }

            // verify the required parameter 'date' is set
            if (date == null)
            {
                throw new FactSet.SDK.Portfolio.Client.ApiException(400, "Missing required parameter 'date' when calling ModelAccountsApi->GetAccountForDateAndSymbol");
            }


            FactSet.SDK.Portfolio.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.Portfolio.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.Portfolio.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.Portfolio.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("name", FactSet.SDK.Portfolio.Client.ClientUtils.ParameterToString(name)); // path parameter
            localVarRequestOptions.PathParameters.Add("symbol", FactSet.SDK.Portfolio.Client.ClientUtils.ParameterToString(symbol)); // path parameter
            localVarRequestOptions.PathParameters.Add("date", FactSet.SDK.Portfolio.Client.ClientUtils.ParameterToString(date)); // path parameter
            if (format != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.Portfolio.Client.ClientUtils.ParameterToMultiMap("", "format", format));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.Portfolio.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = GetAccountForDateAndSymbolResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<string>("/analytics/accounts/v3/models/{name}/dates/{date}/symbols/{symbol}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAccountForDateAndSymbol", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get account endpoint, takes an account name, symbol and returns underlying data for that symbol 
        /// </summary>
        /// <exception cref="FactSet.SDK.Portfolio.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The path and filename of the account to get</param>
        /// <param name="symbol">The symbol for which data needs to be updated</param>
        /// <param name="format">Optional format for the response, supported formats are JsonStach and AccountModel (optional, default to &quot;JsonStach&quot;)</param>
        /// <returns>string</returns>
        public string GetAccountForSymbol(string name, string symbol, string format = default(string))
        {
            var localVarResponse = GetAccountForSymbolWithHttpInfo(name, symbol, format);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get account endpoint, takes an account name, symbol and returns underlying data for that symbol 
        /// </summary>
        /// <exception cref="FactSet.SDK.Portfolio.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The path and filename of the account to get</param>
        /// <param name="symbol">The symbol for which data needs to be updated</param>
        /// <param name="format">Optional format for the response, supported formats are JsonStach and AccountModel (optional, default to &quot;JsonStach&quot;)</param>
        /// <returns>ApiResponse of string</returns>
        public ApiResponse<string> GetAccountForSymbolWithHttpInfo(string name, string symbol, string format = default(string))
        {
            // verify the required parameter 'name' is set
            if (name == null)
            {
                throw new FactSet.SDK.Portfolio.Client.ApiException(400, "Missing required parameter 'name' when calling ModelAccountsApi->GetAccountForSymbol");
            }

            // verify the required parameter 'symbol' is set
            if (symbol == null)
            {
                throw new FactSet.SDK.Portfolio.Client.ApiException(400, "Missing required parameter 'symbol' when calling ModelAccountsApi->GetAccountForSymbol");
            }

            FactSet.SDK.Portfolio.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.Portfolio.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.Portfolio.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.Portfolio.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("name", FactSet.SDK.Portfolio.Client.ClientUtils.ParameterToString(name)); // path parameter
            localVarRequestOptions.PathParameters.Add("symbol", FactSet.SDK.Portfolio.Client.ClientUtils.ParameterToString(symbol)); // path parameter
            if (format != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.Portfolio.Client.ClientUtils.ParameterToMultiMap("", "format", format));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.Portfolio.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = GetAccountForSymbolResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Get<
            string>("/analytics/accounts/v3/models/{name}/symbols/{symbol}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAccountForSymbol", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// Get account endpoint, takes an account name, symbol and returns underlying data for that symbol 
        /// </summary>
        /// <exception cref="FactSet.SDK.Portfolio.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The path and filename of the account to get</param>
        /// <param name="symbol">The symbol for which data needs to be updated</param>
        /// <param name="format">Optional format for the response, supported formats are JsonStach and AccountModel (optional, default to &quot;JsonStach&quot;)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string>GetAccountForSymbolAsync(string name, string symbol, string format = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await GetAccountForSymbolWithHttpInfoAsync(name, symbol, format, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get account endpoint, takes an account name, symbol and returns underlying data for that symbol 
        /// </summary>
        /// <exception cref="FactSet.SDK.Portfolio.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The path and filename of the account to get</param>
        /// <param name="symbol">The symbol for which data needs to be updated</param>
        /// <param name="format">Optional format for the response, supported formats are JsonStach and AccountModel (optional, default to &quot;JsonStach&quot;)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (string)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<string>> GetAccountForSymbolWithHttpInfoAsync(string name, string symbol, string format = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'name' is set
            if (name == null)
            {
                throw new FactSet.SDK.Portfolio.Client.ApiException(400, "Missing required parameter 'name' when calling ModelAccountsApi->GetAccountForSymbol");
            }

            // verify the required parameter 'symbol' is set
            if (symbol == null)
            {
                throw new FactSet.SDK.Portfolio.Client.ApiException(400, "Missing required parameter 'symbol' when calling ModelAccountsApi->GetAccountForSymbol");
            }


            FactSet.SDK.Portfolio.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.Portfolio.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.Portfolio.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.Portfolio.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("name", FactSet.SDK.Portfolio.Client.ClientUtils.ParameterToString(name)); // path parameter
            localVarRequestOptions.PathParameters.Add("symbol", FactSet.SDK.Portfolio.Client.ClientUtils.ParameterToString(symbol)); // path parameter
            if (format != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.Portfolio.Client.ClientUtils.ParameterToMultiMap("", "format", format));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.Portfolio.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = GetAccountForSymbolResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<string>("/analytics/accounts/v3/models/{name}/symbols/{symbol}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAccountForSymbol", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get account schema endpoint, takes an account name and returns its schema 
        /// </summary>
        /// <exception cref="FactSet.SDK.Portfolio.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The path and filename of the account to get its schema</param>
        /// <returns>string</returns>
        public string GetAccountSchema(string name)
        {
            var localVarResponse = GetAccountSchemaWithHttpInfo(name);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get account schema endpoint, takes an account name and returns its schema 
        /// </summary>
        /// <exception cref="FactSet.SDK.Portfolio.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The path and filename of the account to get its schema</param>
        /// <returns>ApiResponse of string</returns>
        public ApiResponse<string> GetAccountSchemaWithHttpInfo(string name)
        {
            // verify the required parameter 'name' is set
            if (name == null)
            {
                throw new FactSet.SDK.Portfolio.Client.ApiException(400, "Missing required parameter 'name' when calling ModelAccountsApi->GetAccountSchema");
            }

            FactSet.SDK.Portfolio.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.Portfolio.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.Portfolio.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.Portfolio.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("name", FactSet.SDK.Portfolio.Client.ClientUtils.ParameterToString(name)); // path parameter

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.Portfolio.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = GetAccountSchemaResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Get<
            string>("/analytics/accounts/v3/models/{name}/schema", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAccountSchema", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// Get account schema endpoint, takes an account name and returns its schema 
        /// </summary>
        /// <exception cref="FactSet.SDK.Portfolio.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The path and filename of the account to get its schema</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string>GetAccountSchemaAsync(string name, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await GetAccountSchemaWithHttpInfoAsync(name, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get account schema endpoint, takes an account name and returns its schema 
        /// </summary>
        /// <exception cref="FactSet.SDK.Portfolio.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The path and filename of the account to get its schema</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (string)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<string>> GetAccountSchemaWithHttpInfoAsync(string name, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'name' is set
            if (name == null)
            {
                throw new FactSet.SDK.Portfolio.Client.ApiException(400, "Missing required parameter 'name' when calling ModelAccountsApi->GetAccountSchema");
            }


            FactSet.SDK.Portfolio.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.Portfolio.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.Portfolio.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.Portfolio.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("name", FactSet.SDK.Portfolio.Client.ClientUtils.ParameterToString(name)); // path parameter

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.Portfolio.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = GetAccountSchemaResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<string>("/analytics/accounts/v3/models/{name}/schema", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAccountSchema", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
