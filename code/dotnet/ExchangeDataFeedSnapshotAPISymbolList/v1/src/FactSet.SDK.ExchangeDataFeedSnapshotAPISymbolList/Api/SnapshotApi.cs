/*
 * Exchange DataFeed Snapshot
 *
 * FactSetâ€™s Exchange DataFeed Snapshot API provides cost-effective access to real-time and delayed global exchange data. Proprietary technology normalizes over 200 global exchanges and 150+ data fields. Asset types integrated include equities, futures, options, warrants, fixed income, mutual funds, ETFs, indices, commodities, and FX rates. <p>Cutting-edge technology ensures reliability and provides scalability that allow applications to request multiple items at a time. To simplify client-side development an entire response can be placed in a matrix or table for effortless integration into internal and external applications. Using specified output formats (CSV, XML, JSON) receive all standard fields by default or customize the list based on specific needs.</p></p>Below are the current hosts:</p><p>Production: api.factset.com<p>Sandbox: api-sandbox.factset.com</p>
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: api@factset.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using FactSet.SDK.ExchangeDataFeedSnapshotAPISymbolList.Client;
using FactSet.SDK.ExchangeDataFeedSnapshotAPISymbolList.Model;
using FactSet.SDK.Utils.Authentication;

namespace FactSet.SDK.ExchangeDataFeedSnapshotAPISymbolList.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ISnapshotApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Request a snapshot of exchange data for a list of symbols.
        /// </summary>
        /// <remarks>
        ///  &#x60;ids&#x60; and &#x60;oc&#x60; are required parameters, but only one can be used based on request. Use &#x60;ids&#x60; for regular snapshot requests, and &#x60;oc&#x60; for requesting an option chain.   **Try it Out** feature is available using a pre-recorded sandbox environment. Follow Try it Out inscrutions on each parameter to develop a request and view a sample server response.  &#39;*You must be logged into the Developer Portal and obtain an **[API Key](https://developer.factset.com/factset/api-key-listing)** for &#39;&#39;Try it Out&#39;&#39; to receive a successful server response. Select **Authorize** button or visit **[Authentication Support](https://developer.factset.com/authentication)** for more details.*&#39; 
        /// </remarks>
        /// <exception cref="FactSet.SDK.ExchangeDataFeedSnapshotAPISymbolList.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">Requested symbols or securities. **Required** if not using &#x60;oc&#x60;. This is a comma-seperated list with a maximum of 500. Each symbol can be a FactSet Exchange Symbol, CUSIP, or SEDOL. This can be used in combination with &#x60;chain&#x60; parameter to pull in a custom portfolio.&lt;P&gt;**Try it out** - Choose one or multiple - IBM-USA, BABA-USA, WALMEX-MX, 7203-TKS, VOD-LON, NPN-JSE, MABAX, NZF, SPY-USA, AGG-USA, GLD-USA, AOR-USA, MNA-USA, UUP-USA, SP50-SPX, ESX-STX, XAO-ASX, WD-MSX, NG00-USA, GC00-USA, CC00-USA, C00-USA, FC00-USA, ER00-USA, EURUSD-FX1, USDMXN-FX1, AUDJPY-FX1, EURCZK-FX1, USDILS-FX1, USDZAR-FX1, US10YY-TU1, FDS#190621C00145000-USA, FDS#190621P00145000-USA. *Leave blank if you are trying the &#x60;oc&#x60; parameter*.&lt;/p&gt; (optional)</param>
        /// <param name="oc">Option Chain, accepts one underlying symbol for which the option chain will be returned. **Required** if not using &#x60;ids&#x60;. &lt;p&gt;**Try it Out** - Only available for BABA-USA&lt;/p&gt; (optional)</param>
        /// <param name="fields">All available fields. This is a comma-seperated list (no spaces). **Required** only when using &#x60;oc&#x60;. Otherwise, leave blank to return all fields by default. See definitions for details on available field names and Field ID #s. The Data Service Manual has complete reference.&lt;p&gt;**Try it Out** - All fields available. Use either FID # or name. For &#x60;oc&#x60;, recommend to use BID_1,ASK_1,STRIKE_PRICE. (optional)</param>
        /// <param name="sf">Symbol Filters, ability to apply filtering to the result of an option chain &#x60;oc&#x60; request based on available fields and values for the symbols. &#x60;sf&#x60;&#x3D;VALUE_[filter],[field],[value]   * **VALUE_MINMAX** -  Field value will be within specified interval. ex. - VALUE_MINMAX,BID_1,min,max   * **VALUE_EQUALS** - Field value will equal specified value. ex. - VALUE_EQUALS,BID_1,value   * **VALUE_NOT_EQUALS** - Field value will not equal specified value. ex. - VALUE_NOT_EQUALS,BID_1,value      **Try it Out** - depends on fields used. Example - VALUE_MINMAX,STRIKE_PRICE,120,130   (optional)</param>
        /// <param name="format">The format of the output file.&lt;p&gt;**Try it Out** - All formats available&lt;/p&gt; (optional, default to XML)</param>
        /// <param name="serv">The Data Service that handles the request for the specified symbols. Available live services are -    * **FDS1** -Production Data Service   * **FDS_FUND** -Fundamental Data Service used for End-of-Day data.  **Try it Out** - use FDS1  (optional)</param>
        /// <param name="reqId">Request Identification String. Can be used by the application to keep track of requests.  The id is not used by this service, however, it is included in the XML response.&lt;p&gt; **Try it Out** - any value can be passed through.&lt;/p&gt; (optional)</param>
        /// <returns>DFSnapshotResponse</returns>
        DFSnapshotResponse GetDFSnapshot(string ids = default(string), string oc = default(string), string fields = default(string), string sf = default(string), string format = default(string), string serv = default(string), string reqId = default(string));

        /// <summary>
        /// Request a snapshot of exchange data for a list of symbols.
        /// </summary>
        /// <remarks>
        ///  &#x60;ids&#x60; and &#x60;oc&#x60; are required parameters, but only one can be used based on request. Use &#x60;ids&#x60; for regular snapshot requests, and &#x60;oc&#x60; for requesting an option chain.   **Try it Out** feature is available using a pre-recorded sandbox environment. Follow Try it Out inscrutions on each parameter to develop a request and view a sample server response.  &#39;*You must be logged into the Developer Portal and obtain an **[API Key](https://developer.factset.com/factset/api-key-listing)** for &#39;&#39;Try it Out&#39;&#39; to receive a successful server response. Select **Authorize** button or visit **[Authentication Support](https://developer.factset.com/authentication)** for more details.*&#39; 
        /// </remarks>
        /// <exception cref="FactSet.SDK.ExchangeDataFeedSnapshotAPISymbolList.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">Requested symbols or securities. **Required** if not using &#x60;oc&#x60;. This is a comma-seperated list with a maximum of 500. Each symbol can be a FactSet Exchange Symbol, CUSIP, or SEDOL. This can be used in combination with &#x60;chain&#x60; parameter to pull in a custom portfolio.&lt;P&gt;**Try it out** - Choose one or multiple - IBM-USA, BABA-USA, WALMEX-MX, 7203-TKS, VOD-LON, NPN-JSE, MABAX, NZF, SPY-USA, AGG-USA, GLD-USA, AOR-USA, MNA-USA, UUP-USA, SP50-SPX, ESX-STX, XAO-ASX, WD-MSX, NG00-USA, GC00-USA, CC00-USA, C00-USA, FC00-USA, ER00-USA, EURUSD-FX1, USDMXN-FX1, AUDJPY-FX1, EURCZK-FX1, USDILS-FX1, USDZAR-FX1, US10YY-TU1, FDS#190621C00145000-USA, FDS#190621P00145000-USA. *Leave blank if you are trying the &#x60;oc&#x60; parameter*.&lt;/p&gt; (optional)</param>
        /// <param name="oc">Option Chain, accepts one underlying symbol for which the option chain will be returned. **Required** if not using &#x60;ids&#x60;. &lt;p&gt;**Try it Out** - Only available for BABA-USA&lt;/p&gt; (optional)</param>
        /// <param name="fields">All available fields. This is a comma-seperated list (no spaces). **Required** only when using &#x60;oc&#x60;. Otherwise, leave blank to return all fields by default. See definitions for details on available field names and Field ID #s. The Data Service Manual has complete reference.&lt;p&gt;**Try it Out** - All fields available. Use either FID # or name. For &#x60;oc&#x60;, recommend to use BID_1,ASK_1,STRIKE_PRICE. (optional)</param>
        /// <param name="sf">Symbol Filters, ability to apply filtering to the result of an option chain &#x60;oc&#x60; request based on available fields and values for the symbols. &#x60;sf&#x60;&#x3D;VALUE_[filter],[field],[value]   * **VALUE_MINMAX** -  Field value will be within specified interval. ex. - VALUE_MINMAX,BID_1,min,max   * **VALUE_EQUALS** - Field value will equal specified value. ex. - VALUE_EQUALS,BID_1,value   * **VALUE_NOT_EQUALS** - Field value will not equal specified value. ex. - VALUE_NOT_EQUALS,BID_1,value      **Try it Out** - depends on fields used. Example - VALUE_MINMAX,STRIKE_PRICE,120,130   (optional)</param>
        /// <param name="format">The format of the output file.&lt;p&gt;**Try it Out** - All formats available&lt;/p&gt; (optional, default to XML)</param>
        /// <param name="serv">The Data Service that handles the request for the specified symbols. Available live services are -    * **FDS1** -Production Data Service   * **FDS_FUND** -Fundamental Data Service used for End-of-Day data.  **Try it Out** - use FDS1  (optional)</param>
        /// <param name="reqId">Request Identification String. Can be used by the application to keep track of requests.  The id is not used by this service, however, it is included in the XML response.&lt;p&gt; **Try it Out** - any value can be passed through.&lt;/p&gt; (optional)</param>
        /// <returns>ApiResponse of DFSnapshotResponse</returns>
        ApiResponse<DFSnapshotResponse> GetDFSnapshotWithHttpInfo(string ids = default(string), string oc = default(string), string fields = default(string), string sf = default(string), string format = default(string), string serv = default(string), string reqId = default(string));
        /// <summary>
        /// Snap exchange data. Use if URL lengh of 2,048 is exceeded.
        /// </summary>
        /// <remarks>
        /// Request Snapshot exchange data. Use POST when your URL length exceeds 2,048 characters.
        /// </remarks>
        /// <exception cref="FactSet.SDK.ExchangeDataFeedSnapshotAPISymbolList.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">Requested symbols or securities. **Required** if not using &#x60;oc&#x60;. This is a comma-seperated list with a maximum of 500. Each symbol can be a FactSet Exchange Symbol, CUSIP, or SEDOL. This can be used in combination with &#x60;chain&#x60; parameter to pull in a custom portfolio.&lt;P&gt;**Try it out** - Choose one or multiple - IBM-USA, BABA-USA, WALMEX-MX, 7203-TKS, VOD-LON, NPN-JSE, MABAX, NZF, SPY-USA, AGG-USA, GLD-USA, AOR-USA, MNA-USA, UUP-USA, SP50-SPX, ESX-STX, XAO-ASX, WD-MSX, NG00-USA, GC00-USA, CC00-USA, C00-USA, FC00-USA, ER00-USA, EURUSD-FX1, USDMXN-FX1, AUDJPY-FX1, EURCZK-FX1, USDILS-FX1, USDZAR-FX1, US10YY-TU1, FDS#190621C00145000-USA, FDS#190621P00145000-USA. *Leave blank if you are trying the &#x60;oc&#x60; parameter*.&lt;/p&gt; (optional)</param>
        /// <param name="oc">Option Chain, accepts one underlying symbol for which the option chain will be returned. **Required** if not using &#x60;ids&#x60;. &lt;p&gt;**Try it Out** - Only available for BABA-USA&lt;/p&gt; (optional)</param>
        /// <param name="fields">All available fields. This is a comma-seperated list (no spaces). **Required** only when using &#x60;oc&#x60;. Otherwise, leave blank to return all fields by default. See definitions for details on available field names and Field ID #s. The Data Service Manual has complete reference.&lt;p&gt;**Try it Out** - All fields available. Use either FID # or name. For &#x60;oc&#x60;, recommend to use BID_1,ASK_1,STRIKE_PRICE. (optional)</param>
        /// <param name="sf">Symbol Filters, ability to apply filtering to the result of an option chain &#x60;oc&#x60; request based on available fields and values for the symbols. &#x60;sf&#x60;&#x3D;VALUE_[filter],[field],[value]   * **VALUE_MINMAX** -  Field value will be within specified interval. ex. - VALUE_MINMAX,BID_1,min,max   * **VALUE_EQUALS** - Field value will equal specified value. ex. - VALUE_EQUALS,BID_1,value   * **VALUE_NOT_EQUALS** - Field value will not equal specified value. ex. - VALUE_NOT_EQUALS,BID_1,value      **Try it Out** - depends on fields used. Example - VALUE_MINMAX,STRIKE_PRICE,120,130   (optional)</param>
        /// <param name="format">The format of the output file.&lt;p&gt;**Try it Out** - All formats available&lt;/p&gt; (optional, default to XML)</param>
        /// <param name="serv">The Data Service that handles the request for the specified symbols. Available live services are -    * **FDS1** -Production Data Service   * **FDS_FUND** -Fundamental Data Service used for End-of-Day data.  **Try it Out** - use FDS1  (optional)</param>
        /// <param name="reqId">Request Identification String. Can be used by the application to keep track of requests.  The id is not used by this service, however, it is included in the XML response.&lt;p&gt; **Try it Out** - any value can be passed through.&lt;/p&gt; (optional)</param>
        /// <returns>DFSnapshotResponse</returns>
        DFSnapshotResponse PostDFSnapshot(string ids = default(string), string oc = default(string), string fields = default(string), string sf = default(string), string format = default(string), string serv = default(string), string reqId = default(string));

        /// <summary>
        /// Snap exchange data. Use if URL lengh of 2,048 is exceeded.
        /// </summary>
        /// <remarks>
        /// Request Snapshot exchange data. Use POST when your URL length exceeds 2,048 characters.
        /// </remarks>
        /// <exception cref="FactSet.SDK.ExchangeDataFeedSnapshotAPISymbolList.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">Requested symbols or securities. **Required** if not using &#x60;oc&#x60;. This is a comma-seperated list with a maximum of 500. Each symbol can be a FactSet Exchange Symbol, CUSIP, or SEDOL. This can be used in combination with &#x60;chain&#x60; parameter to pull in a custom portfolio.&lt;P&gt;**Try it out** - Choose one or multiple - IBM-USA, BABA-USA, WALMEX-MX, 7203-TKS, VOD-LON, NPN-JSE, MABAX, NZF, SPY-USA, AGG-USA, GLD-USA, AOR-USA, MNA-USA, UUP-USA, SP50-SPX, ESX-STX, XAO-ASX, WD-MSX, NG00-USA, GC00-USA, CC00-USA, C00-USA, FC00-USA, ER00-USA, EURUSD-FX1, USDMXN-FX1, AUDJPY-FX1, EURCZK-FX1, USDILS-FX1, USDZAR-FX1, US10YY-TU1, FDS#190621C00145000-USA, FDS#190621P00145000-USA. *Leave blank if you are trying the &#x60;oc&#x60; parameter*.&lt;/p&gt; (optional)</param>
        /// <param name="oc">Option Chain, accepts one underlying symbol for which the option chain will be returned. **Required** if not using &#x60;ids&#x60;. &lt;p&gt;**Try it Out** - Only available for BABA-USA&lt;/p&gt; (optional)</param>
        /// <param name="fields">All available fields. This is a comma-seperated list (no spaces). **Required** only when using &#x60;oc&#x60;. Otherwise, leave blank to return all fields by default. See definitions for details on available field names and Field ID #s. The Data Service Manual has complete reference.&lt;p&gt;**Try it Out** - All fields available. Use either FID # or name. For &#x60;oc&#x60;, recommend to use BID_1,ASK_1,STRIKE_PRICE. (optional)</param>
        /// <param name="sf">Symbol Filters, ability to apply filtering to the result of an option chain &#x60;oc&#x60; request based on available fields and values for the symbols. &#x60;sf&#x60;&#x3D;VALUE_[filter],[field],[value]   * **VALUE_MINMAX** -  Field value will be within specified interval. ex. - VALUE_MINMAX,BID_1,min,max   * **VALUE_EQUALS** - Field value will equal specified value. ex. - VALUE_EQUALS,BID_1,value   * **VALUE_NOT_EQUALS** - Field value will not equal specified value. ex. - VALUE_NOT_EQUALS,BID_1,value      **Try it Out** - depends on fields used. Example - VALUE_MINMAX,STRIKE_PRICE,120,130   (optional)</param>
        /// <param name="format">The format of the output file.&lt;p&gt;**Try it Out** - All formats available&lt;/p&gt; (optional, default to XML)</param>
        /// <param name="serv">The Data Service that handles the request for the specified symbols. Available live services are -    * **FDS1** -Production Data Service   * **FDS_FUND** -Fundamental Data Service used for End-of-Day data.  **Try it Out** - use FDS1  (optional)</param>
        /// <param name="reqId">Request Identification String. Can be used by the application to keep track of requests.  The id is not used by this service, however, it is included in the XML response.&lt;p&gt; **Try it Out** - any value can be passed through.&lt;/p&gt; (optional)</param>
        /// <returns>ApiResponse of DFSnapshotResponse</returns>
        ApiResponse<DFSnapshotResponse> PostDFSnapshotWithHttpInfo(string ids = default(string), string oc = default(string), string fields = default(string), string sf = default(string), string format = default(string), string serv = default(string), string reqId = default(string));
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ISnapshotApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Request a snapshot of exchange data for a list of symbols.
        /// </summary>
        /// <remarks>
        ///  &#x60;ids&#x60; and &#x60;oc&#x60; are required parameters, but only one can be used based on request. Use &#x60;ids&#x60; for regular snapshot requests, and &#x60;oc&#x60; for requesting an option chain.   **Try it Out** feature is available using a pre-recorded sandbox environment. Follow Try it Out inscrutions on each parameter to develop a request and view a sample server response.  &#39;*You must be logged into the Developer Portal and obtain an **[API Key](https://developer.factset.com/factset/api-key-listing)** for &#39;&#39;Try it Out&#39;&#39; to receive a successful server response. Select **Authorize** button or visit **[Authentication Support](https://developer.factset.com/authentication)** for more details.*&#39; 
        /// </remarks>
        /// <exception cref="FactSet.SDK.ExchangeDataFeedSnapshotAPISymbolList.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">Requested symbols or securities. **Required** if not using &#x60;oc&#x60;. This is a comma-seperated list with a maximum of 500. Each symbol can be a FactSet Exchange Symbol, CUSIP, or SEDOL. This can be used in combination with &#x60;chain&#x60; parameter to pull in a custom portfolio.&lt;P&gt;**Try it out** - Choose one or multiple - IBM-USA, BABA-USA, WALMEX-MX, 7203-TKS, VOD-LON, NPN-JSE, MABAX, NZF, SPY-USA, AGG-USA, GLD-USA, AOR-USA, MNA-USA, UUP-USA, SP50-SPX, ESX-STX, XAO-ASX, WD-MSX, NG00-USA, GC00-USA, CC00-USA, C00-USA, FC00-USA, ER00-USA, EURUSD-FX1, USDMXN-FX1, AUDJPY-FX1, EURCZK-FX1, USDILS-FX1, USDZAR-FX1, US10YY-TU1, FDS#190621C00145000-USA, FDS#190621P00145000-USA. *Leave blank if you are trying the &#x60;oc&#x60; parameter*.&lt;/p&gt; (optional)</param>
        /// <param name="oc">Option Chain, accepts one underlying symbol for which the option chain will be returned. **Required** if not using &#x60;ids&#x60;. &lt;p&gt;**Try it Out** - Only available for BABA-USA&lt;/p&gt; (optional)</param>
        /// <param name="fields">All available fields. This is a comma-seperated list (no spaces). **Required** only when using &#x60;oc&#x60;. Otherwise, leave blank to return all fields by default. See definitions for details on available field names and Field ID #s. The Data Service Manual has complete reference.&lt;p&gt;**Try it Out** - All fields available. Use either FID # or name. For &#x60;oc&#x60;, recommend to use BID_1,ASK_1,STRIKE_PRICE. (optional)</param>
        /// <param name="sf">Symbol Filters, ability to apply filtering to the result of an option chain &#x60;oc&#x60; request based on available fields and values for the symbols. &#x60;sf&#x60;&#x3D;VALUE_[filter],[field],[value]   * **VALUE_MINMAX** -  Field value will be within specified interval. ex. - VALUE_MINMAX,BID_1,min,max   * **VALUE_EQUALS** - Field value will equal specified value. ex. - VALUE_EQUALS,BID_1,value   * **VALUE_NOT_EQUALS** - Field value will not equal specified value. ex. - VALUE_NOT_EQUALS,BID_1,value      **Try it Out** - depends on fields used. Example - VALUE_MINMAX,STRIKE_PRICE,120,130   (optional)</param>
        /// <param name="format">The format of the output file.&lt;p&gt;**Try it Out** - All formats available&lt;/p&gt; (optional, default to XML)</param>
        /// <param name="serv">The Data Service that handles the request for the specified symbols. Available live services are -    * **FDS1** -Production Data Service   * **FDS_FUND** -Fundamental Data Service used for End-of-Day data.  **Try it Out** - use FDS1  (optional)</param>
        /// <param name="reqId">Request Identification String. Can be used by the application to keep track of requests.  The id is not used by this service, however, it is included in the XML response.&lt;p&gt; **Try it Out** - any value can be passed through.&lt;/p&gt; (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DFSnapshotResponse</returns>
        System.Threading.Tasks.Task<DFSnapshotResponse> GetDFSnapshotAsync(string ids = default(string), string oc = default(string), string fields = default(string), string sf = default(string), string format = default(string), string serv = default(string), string reqId = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Request a snapshot of exchange data for a list of symbols.
        /// </summary>
        /// <remarks>
        ///  &#x60;ids&#x60; and &#x60;oc&#x60; are required parameters, but only one can be used based on request. Use &#x60;ids&#x60; for regular snapshot requests, and &#x60;oc&#x60; for requesting an option chain.   **Try it Out** feature is available using a pre-recorded sandbox environment. Follow Try it Out inscrutions on each parameter to develop a request and view a sample server response.  &#39;*You must be logged into the Developer Portal and obtain an **[API Key](https://developer.factset.com/factset/api-key-listing)** for &#39;&#39;Try it Out&#39;&#39; to receive a successful server response. Select **Authorize** button or visit **[Authentication Support](https://developer.factset.com/authentication)** for more details.*&#39; 
        /// </remarks>
        /// <exception cref="FactSet.SDK.ExchangeDataFeedSnapshotAPISymbolList.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">Requested symbols or securities. **Required** if not using &#x60;oc&#x60;. This is a comma-seperated list with a maximum of 500. Each symbol can be a FactSet Exchange Symbol, CUSIP, or SEDOL. This can be used in combination with &#x60;chain&#x60; parameter to pull in a custom portfolio.&lt;P&gt;**Try it out** - Choose one or multiple - IBM-USA, BABA-USA, WALMEX-MX, 7203-TKS, VOD-LON, NPN-JSE, MABAX, NZF, SPY-USA, AGG-USA, GLD-USA, AOR-USA, MNA-USA, UUP-USA, SP50-SPX, ESX-STX, XAO-ASX, WD-MSX, NG00-USA, GC00-USA, CC00-USA, C00-USA, FC00-USA, ER00-USA, EURUSD-FX1, USDMXN-FX1, AUDJPY-FX1, EURCZK-FX1, USDILS-FX1, USDZAR-FX1, US10YY-TU1, FDS#190621C00145000-USA, FDS#190621P00145000-USA. *Leave blank if you are trying the &#x60;oc&#x60; parameter*.&lt;/p&gt; (optional)</param>
        /// <param name="oc">Option Chain, accepts one underlying symbol for which the option chain will be returned. **Required** if not using &#x60;ids&#x60;. &lt;p&gt;**Try it Out** - Only available for BABA-USA&lt;/p&gt; (optional)</param>
        /// <param name="fields">All available fields. This is a comma-seperated list (no spaces). **Required** only when using &#x60;oc&#x60;. Otherwise, leave blank to return all fields by default. See definitions for details on available field names and Field ID #s. The Data Service Manual has complete reference.&lt;p&gt;**Try it Out** - All fields available. Use either FID # or name. For &#x60;oc&#x60;, recommend to use BID_1,ASK_1,STRIKE_PRICE. (optional)</param>
        /// <param name="sf">Symbol Filters, ability to apply filtering to the result of an option chain &#x60;oc&#x60; request based on available fields and values for the symbols. &#x60;sf&#x60;&#x3D;VALUE_[filter],[field],[value]   * **VALUE_MINMAX** -  Field value will be within specified interval. ex. - VALUE_MINMAX,BID_1,min,max   * **VALUE_EQUALS** - Field value will equal specified value. ex. - VALUE_EQUALS,BID_1,value   * **VALUE_NOT_EQUALS** - Field value will not equal specified value. ex. - VALUE_NOT_EQUALS,BID_1,value      **Try it Out** - depends on fields used. Example - VALUE_MINMAX,STRIKE_PRICE,120,130   (optional)</param>
        /// <param name="format">The format of the output file.&lt;p&gt;**Try it Out** - All formats available&lt;/p&gt; (optional, default to XML)</param>
        /// <param name="serv">The Data Service that handles the request for the specified symbols. Available live services are -    * **FDS1** -Production Data Service   * **FDS_FUND** -Fundamental Data Service used for End-of-Day data.  **Try it Out** - use FDS1  (optional)</param>
        /// <param name="reqId">Request Identification String. Can be used by the application to keep track of requests.  The id is not used by this service, however, it is included in the XML response.&lt;p&gt; **Try it Out** - any value can be passed through.&lt;/p&gt; (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DFSnapshotResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<DFSnapshotResponse>> GetDFSnapshotWithHttpInfoAsync(string ids = default(string), string oc = default(string), string fields = default(string), string sf = default(string), string format = default(string), string serv = default(string), string reqId = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Snap exchange data. Use if URL lengh of 2,048 is exceeded.
        /// </summary>
        /// <remarks>
        /// Request Snapshot exchange data. Use POST when your URL length exceeds 2,048 characters.
        /// </remarks>
        /// <exception cref="FactSet.SDK.ExchangeDataFeedSnapshotAPISymbolList.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">Requested symbols or securities. **Required** if not using &#x60;oc&#x60;. This is a comma-seperated list with a maximum of 500. Each symbol can be a FactSet Exchange Symbol, CUSIP, or SEDOL. This can be used in combination with &#x60;chain&#x60; parameter to pull in a custom portfolio.&lt;P&gt;**Try it out** - Choose one or multiple - IBM-USA, BABA-USA, WALMEX-MX, 7203-TKS, VOD-LON, NPN-JSE, MABAX, NZF, SPY-USA, AGG-USA, GLD-USA, AOR-USA, MNA-USA, UUP-USA, SP50-SPX, ESX-STX, XAO-ASX, WD-MSX, NG00-USA, GC00-USA, CC00-USA, C00-USA, FC00-USA, ER00-USA, EURUSD-FX1, USDMXN-FX1, AUDJPY-FX1, EURCZK-FX1, USDILS-FX1, USDZAR-FX1, US10YY-TU1, FDS#190621C00145000-USA, FDS#190621P00145000-USA. *Leave blank if you are trying the &#x60;oc&#x60; parameter*.&lt;/p&gt; (optional)</param>
        /// <param name="oc">Option Chain, accepts one underlying symbol for which the option chain will be returned. **Required** if not using &#x60;ids&#x60;. &lt;p&gt;**Try it Out** - Only available for BABA-USA&lt;/p&gt; (optional)</param>
        /// <param name="fields">All available fields. This is a comma-seperated list (no spaces). **Required** only when using &#x60;oc&#x60;. Otherwise, leave blank to return all fields by default. See definitions for details on available field names and Field ID #s. The Data Service Manual has complete reference.&lt;p&gt;**Try it Out** - All fields available. Use either FID # or name. For &#x60;oc&#x60;, recommend to use BID_1,ASK_1,STRIKE_PRICE. (optional)</param>
        /// <param name="sf">Symbol Filters, ability to apply filtering to the result of an option chain &#x60;oc&#x60; request based on available fields and values for the symbols. &#x60;sf&#x60;&#x3D;VALUE_[filter],[field],[value]   * **VALUE_MINMAX** -  Field value will be within specified interval. ex. - VALUE_MINMAX,BID_1,min,max   * **VALUE_EQUALS** - Field value will equal specified value. ex. - VALUE_EQUALS,BID_1,value   * **VALUE_NOT_EQUALS** - Field value will not equal specified value. ex. - VALUE_NOT_EQUALS,BID_1,value      **Try it Out** - depends on fields used. Example - VALUE_MINMAX,STRIKE_PRICE,120,130   (optional)</param>
        /// <param name="format">The format of the output file.&lt;p&gt;**Try it Out** - All formats available&lt;/p&gt; (optional, default to XML)</param>
        /// <param name="serv">The Data Service that handles the request for the specified symbols. Available live services are -    * **FDS1** -Production Data Service   * **FDS_FUND** -Fundamental Data Service used for End-of-Day data.  **Try it Out** - use FDS1  (optional)</param>
        /// <param name="reqId">Request Identification String. Can be used by the application to keep track of requests.  The id is not used by this service, however, it is included in the XML response.&lt;p&gt; **Try it Out** - any value can be passed through.&lt;/p&gt; (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DFSnapshotResponse</returns>
        System.Threading.Tasks.Task<DFSnapshotResponse> PostDFSnapshotAsync(string ids = default(string), string oc = default(string), string fields = default(string), string sf = default(string), string format = default(string), string serv = default(string), string reqId = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Snap exchange data. Use if URL lengh of 2,048 is exceeded.
        /// </summary>
        /// <remarks>
        /// Request Snapshot exchange data. Use POST when your URL length exceeds 2,048 characters.
        /// </remarks>
        /// <exception cref="FactSet.SDK.ExchangeDataFeedSnapshotAPISymbolList.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">Requested symbols or securities. **Required** if not using &#x60;oc&#x60;. This is a comma-seperated list with a maximum of 500. Each symbol can be a FactSet Exchange Symbol, CUSIP, or SEDOL. This can be used in combination with &#x60;chain&#x60; parameter to pull in a custom portfolio.&lt;P&gt;**Try it out** - Choose one or multiple - IBM-USA, BABA-USA, WALMEX-MX, 7203-TKS, VOD-LON, NPN-JSE, MABAX, NZF, SPY-USA, AGG-USA, GLD-USA, AOR-USA, MNA-USA, UUP-USA, SP50-SPX, ESX-STX, XAO-ASX, WD-MSX, NG00-USA, GC00-USA, CC00-USA, C00-USA, FC00-USA, ER00-USA, EURUSD-FX1, USDMXN-FX1, AUDJPY-FX1, EURCZK-FX1, USDILS-FX1, USDZAR-FX1, US10YY-TU1, FDS#190621C00145000-USA, FDS#190621P00145000-USA. *Leave blank if you are trying the &#x60;oc&#x60; parameter*.&lt;/p&gt; (optional)</param>
        /// <param name="oc">Option Chain, accepts one underlying symbol for which the option chain will be returned. **Required** if not using &#x60;ids&#x60;. &lt;p&gt;**Try it Out** - Only available for BABA-USA&lt;/p&gt; (optional)</param>
        /// <param name="fields">All available fields. This is a comma-seperated list (no spaces). **Required** only when using &#x60;oc&#x60;. Otherwise, leave blank to return all fields by default. See definitions for details on available field names and Field ID #s. The Data Service Manual has complete reference.&lt;p&gt;**Try it Out** - All fields available. Use either FID # or name. For &#x60;oc&#x60;, recommend to use BID_1,ASK_1,STRIKE_PRICE. (optional)</param>
        /// <param name="sf">Symbol Filters, ability to apply filtering to the result of an option chain &#x60;oc&#x60; request based on available fields and values for the symbols. &#x60;sf&#x60;&#x3D;VALUE_[filter],[field],[value]   * **VALUE_MINMAX** -  Field value will be within specified interval. ex. - VALUE_MINMAX,BID_1,min,max   * **VALUE_EQUALS** - Field value will equal specified value. ex. - VALUE_EQUALS,BID_1,value   * **VALUE_NOT_EQUALS** - Field value will not equal specified value. ex. - VALUE_NOT_EQUALS,BID_1,value      **Try it Out** - depends on fields used. Example - VALUE_MINMAX,STRIKE_PRICE,120,130   (optional)</param>
        /// <param name="format">The format of the output file.&lt;p&gt;**Try it Out** - All formats available&lt;/p&gt; (optional, default to XML)</param>
        /// <param name="serv">The Data Service that handles the request for the specified symbols. Available live services are -    * **FDS1** -Production Data Service   * **FDS_FUND** -Fundamental Data Service used for End-of-Day data.  **Try it Out** - use FDS1  (optional)</param>
        /// <param name="reqId">Request Identification String. Can be used by the application to keep track of requests.  The id is not used by this service, however, it is included in the XML response.&lt;p&gt; **Try it Out** - any value can be passed through.&lt;/p&gt; (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DFSnapshotResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<DFSnapshotResponse>> PostDFSnapshotWithHttpInfoAsync(string ids = default(string), string oc = default(string), string fields = default(string), string sf = default(string), string format = default(string), string serv = default(string), string reqId = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ISnapshotApi : ISnapshotApiSync, ISnapshotApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class SnapshotApi : ISnapshotApi
    {
        private FactSet.SDK.ExchangeDataFeedSnapshotAPISymbolList.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        # region Response Type Disctionaries
                private static readonly Dictionary<HttpStatusCode, System.Type> GetDFSnapshotResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)200, typeof(DFSnapshotResponse) },
            { (HttpStatusCode)402, typeof(ErrorResponse) },
            { (HttpStatusCode)403, typeof(ErrorResponse) },
        };
        private static readonly Dictionary<HttpStatusCode, System.Type> PostDFSnapshotResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)200, typeof(DFSnapshotResponse) },
            { (HttpStatusCode)402, typeof(ErrorResponse) },
            { (HttpStatusCode)403, typeof(ErrorResponse) },
        };

        # endregion Response Type Disctionaries

        # region Api Response Objects
         

        # endregion Api Response Objects

        /// <summary>
        /// Initializes a new instance of the <see cref="SnapshotApi"/> class.
        /// </summary>
        /// <returns></returns>
        public SnapshotApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SnapshotApi"/> class.
        /// </summary>
        /// <returns></returns>
        public SnapshotApi(string basePath)
        {
            this.Configuration = FactSet.SDK.ExchangeDataFeedSnapshotAPISymbolList.Client.Configuration.MergeConfigurations(
                FactSet.SDK.ExchangeDataFeedSnapshotAPISymbolList.Client.GlobalConfiguration.Instance,
                new FactSet.SDK.ExchangeDataFeedSnapshotAPISymbolList.Client.Configuration { BasePath = basePath }
            );
            this.Client = new FactSet.SDK.ExchangeDataFeedSnapshotAPISymbolList.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new FactSet.SDK.ExchangeDataFeedSnapshotAPISymbolList.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = FactSet.SDK.ExchangeDataFeedSnapshotAPISymbolList.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SnapshotApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public SnapshotApi(FactSet.SDK.ExchangeDataFeedSnapshotAPISymbolList.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = FactSet.SDK.ExchangeDataFeedSnapshotAPISymbolList.Client.Configuration.MergeConfigurations(
                FactSet.SDK.ExchangeDataFeedSnapshotAPISymbolList.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new FactSet.SDK.ExchangeDataFeedSnapshotAPISymbolList.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new FactSet.SDK.ExchangeDataFeedSnapshotAPISymbolList.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = FactSet.SDK.ExchangeDataFeedSnapshotAPISymbolList.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SnapshotApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public SnapshotApi(FactSet.SDK.ExchangeDataFeedSnapshotAPISymbolList.Client.ISynchronousClient client, FactSet.SDK.ExchangeDataFeedSnapshotAPISymbolList.Client.IAsynchronousClient asyncClient, FactSet.SDK.ExchangeDataFeedSnapshotAPISymbolList.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = FactSet.SDK.ExchangeDataFeedSnapshotAPISymbolList.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public FactSet.SDK.ExchangeDataFeedSnapshotAPISymbolList.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public FactSet.SDK.ExchangeDataFeedSnapshotAPISymbolList.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public FactSet.SDK.ExchangeDataFeedSnapshotAPISymbolList.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public FactSet.SDK.ExchangeDataFeedSnapshotAPISymbolList.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Request a snapshot of exchange data for a list of symbols.  &#x60;ids&#x60; and &#x60;oc&#x60; are required parameters, but only one can be used based on request. Use &#x60;ids&#x60; for regular snapshot requests, and &#x60;oc&#x60; for requesting an option chain.   **Try it Out** feature is available using a pre-recorded sandbox environment. Follow Try it Out inscrutions on each parameter to develop a request and view a sample server response.  &#39;*You must be logged into the Developer Portal and obtain an **[API Key](https://developer.factset.com/factset/api-key-listing)** for &#39;&#39;Try it Out&#39;&#39; to receive a successful server response. Select **Authorize** button or visit **[Authentication Support](https://developer.factset.com/authentication)** for more details.*&#39; 
        /// </summary>
        /// <exception cref="FactSet.SDK.ExchangeDataFeedSnapshotAPISymbolList.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">Requested symbols or securities. **Required** if not using &#x60;oc&#x60;. This is a comma-seperated list with a maximum of 500. Each symbol can be a FactSet Exchange Symbol, CUSIP, or SEDOL. This can be used in combination with &#x60;chain&#x60; parameter to pull in a custom portfolio.&lt;P&gt;**Try it out** - Choose one or multiple - IBM-USA, BABA-USA, WALMEX-MX, 7203-TKS, VOD-LON, NPN-JSE, MABAX, NZF, SPY-USA, AGG-USA, GLD-USA, AOR-USA, MNA-USA, UUP-USA, SP50-SPX, ESX-STX, XAO-ASX, WD-MSX, NG00-USA, GC00-USA, CC00-USA, C00-USA, FC00-USA, ER00-USA, EURUSD-FX1, USDMXN-FX1, AUDJPY-FX1, EURCZK-FX1, USDILS-FX1, USDZAR-FX1, US10YY-TU1, FDS#190621C00145000-USA, FDS#190621P00145000-USA. *Leave blank if you are trying the &#x60;oc&#x60; parameter*.&lt;/p&gt; (optional)</param>
        /// <param name="oc">Option Chain, accepts one underlying symbol for which the option chain will be returned. **Required** if not using &#x60;ids&#x60;. &lt;p&gt;**Try it Out** - Only available for BABA-USA&lt;/p&gt; (optional)</param>
        /// <param name="fields">All available fields. This is a comma-seperated list (no spaces). **Required** only when using &#x60;oc&#x60;. Otherwise, leave blank to return all fields by default. See definitions for details on available field names and Field ID #s. The Data Service Manual has complete reference.&lt;p&gt;**Try it Out** - All fields available. Use either FID # or name. For &#x60;oc&#x60;, recommend to use BID_1,ASK_1,STRIKE_PRICE. (optional)</param>
        /// <param name="sf">Symbol Filters, ability to apply filtering to the result of an option chain &#x60;oc&#x60; request based on available fields and values for the symbols. &#x60;sf&#x60;&#x3D;VALUE_[filter],[field],[value]   * **VALUE_MINMAX** -  Field value will be within specified interval. ex. - VALUE_MINMAX,BID_1,min,max   * **VALUE_EQUALS** - Field value will equal specified value. ex. - VALUE_EQUALS,BID_1,value   * **VALUE_NOT_EQUALS** - Field value will not equal specified value. ex. - VALUE_NOT_EQUALS,BID_1,value      **Try it Out** - depends on fields used. Example - VALUE_MINMAX,STRIKE_PRICE,120,130   (optional)</param>
        /// <param name="format">The format of the output file.&lt;p&gt;**Try it Out** - All formats available&lt;/p&gt; (optional, default to XML)</param>
        /// <param name="serv">The Data Service that handles the request for the specified symbols. Available live services are -    * **FDS1** -Production Data Service   * **FDS_FUND** -Fundamental Data Service used for End-of-Day data.  **Try it Out** - use FDS1  (optional)</param>
        /// <param name="reqId">Request Identification String. Can be used by the application to keep track of requests.  The id is not used by this service, however, it is included in the XML response.&lt;p&gt; **Try it Out** - any value can be passed through.&lt;/p&gt; (optional)</param>
        /// <returns>DFSnapshotResponse</returns>
        public DFSnapshotResponse GetDFSnapshot(string ids = default(string), string oc = default(string), string fields = default(string), string sf = default(string), string format = default(string), string serv = default(string), string reqId = default(string))
        {
            var localVarResponse = GetDFSnapshotWithHttpInfo(ids, oc, fields, sf, format, serv, reqId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Request a snapshot of exchange data for a list of symbols.  &#x60;ids&#x60; and &#x60;oc&#x60; are required parameters, but only one can be used based on request. Use &#x60;ids&#x60; for regular snapshot requests, and &#x60;oc&#x60; for requesting an option chain.   **Try it Out** feature is available using a pre-recorded sandbox environment. Follow Try it Out inscrutions on each parameter to develop a request and view a sample server response.  &#39;*You must be logged into the Developer Portal and obtain an **[API Key](https://developer.factset.com/factset/api-key-listing)** for &#39;&#39;Try it Out&#39;&#39; to receive a successful server response. Select **Authorize** button or visit **[Authentication Support](https://developer.factset.com/authentication)** for more details.*&#39; 
        /// </summary>
        /// <exception cref="FactSet.SDK.ExchangeDataFeedSnapshotAPISymbolList.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">Requested symbols or securities. **Required** if not using &#x60;oc&#x60;. This is a comma-seperated list with a maximum of 500. Each symbol can be a FactSet Exchange Symbol, CUSIP, or SEDOL. This can be used in combination with &#x60;chain&#x60; parameter to pull in a custom portfolio.&lt;P&gt;**Try it out** - Choose one or multiple - IBM-USA, BABA-USA, WALMEX-MX, 7203-TKS, VOD-LON, NPN-JSE, MABAX, NZF, SPY-USA, AGG-USA, GLD-USA, AOR-USA, MNA-USA, UUP-USA, SP50-SPX, ESX-STX, XAO-ASX, WD-MSX, NG00-USA, GC00-USA, CC00-USA, C00-USA, FC00-USA, ER00-USA, EURUSD-FX1, USDMXN-FX1, AUDJPY-FX1, EURCZK-FX1, USDILS-FX1, USDZAR-FX1, US10YY-TU1, FDS#190621C00145000-USA, FDS#190621P00145000-USA. *Leave blank if you are trying the &#x60;oc&#x60; parameter*.&lt;/p&gt; (optional)</param>
        /// <param name="oc">Option Chain, accepts one underlying symbol for which the option chain will be returned. **Required** if not using &#x60;ids&#x60;. &lt;p&gt;**Try it Out** - Only available for BABA-USA&lt;/p&gt; (optional)</param>
        /// <param name="fields">All available fields. This is a comma-seperated list (no spaces). **Required** only when using &#x60;oc&#x60;. Otherwise, leave blank to return all fields by default. See definitions for details on available field names and Field ID #s. The Data Service Manual has complete reference.&lt;p&gt;**Try it Out** - All fields available. Use either FID # or name. For &#x60;oc&#x60;, recommend to use BID_1,ASK_1,STRIKE_PRICE. (optional)</param>
        /// <param name="sf">Symbol Filters, ability to apply filtering to the result of an option chain &#x60;oc&#x60; request based on available fields and values for the symbols. &#x60;sf&#x60;&#x3D;VALUE_[filter],[field],[value]   * **VALUE_MINMAX** -  Field value will be within specified interval. ex. - VALUE_MINMAX,BID_1,min,max   * **VALUE_EQUALS** - Field value will equal specified value. ex. - VALUE_EQUALS,BID_1,value   * **VALUE_NOT_EQUALS** - Field value will not equal specified value. ex. - VALUE_NOT_EQUALS,BID_1,value      **Try it Out** - depends on fields used. Example - VALUE_MINMAX,STRIKE_PRICE,120,130   (optional)</param>
        /// <param name="format">The format of the output file.&lt;p&gt;**Try it Out** - All formats available&lt;/p&gt; (optional, default to XML)</param>
        /// <param name="serv">The Data Service that handles the request for the specified symbols. Available live services are -    * **FDS1** -Production Data Service   * **FDS_FUND** -Fundamental Data Service used for End-of-Day data.  **Try it Out** - use FDS1  (optional)</param>
        /// <param name="reqId">Request Identification String. Can be used by the application to keep track of requests.  The id is not used by this service, however, it is included in the XML response.&lt;p&gt; **Try it Out** - any value can be passed through.&lt;/p&gt; (optional)</param>
        /// <returns>ApiResponse of DFSnapshotResponse</returns>
        public ApiResponse<DFSnapshotResponse> GetDFSnapshotWithHttpInfo(string ids = default(string), string oc = default(string), string fields = default(string), string sf = default(string), string format = default(string), string serv = default(string), string reqId = default(string))
        {
            FactSet.SDK.ExchangeDataFeedSnapshotAPISymbolList.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.ExchangeDataFeedSnapshotAPISymbolList.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml",
                "text/csv"
            };

            var localVarContentType = FactSet.SDK.ExchangeDataFeedSnapshotAPISymbolList.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.ExchangeDataFeedSnapshotAPISymbolList.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (ids != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.ExchangeDataFeedSnapshotAPISymbolList.Client.ClientUtils.ParameterToMultiMap("", "ids", ids));
            }
            if (oc != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.ExchangeDataFeedSnapshotAPISymbolList.Client.ClientUtils.ParameterToMultiMap("", "oc", oc));
            }
            if (fields != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.ExchangeDataFeedSnapshotAPISymbolList.Client.ClientUtils.ParameterToMultiMap("", "fields", fields));
            }
            if (sf != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.ExchangeDataFeedSnapshotAPISymbolList.Client.ClientUtils.ParameterToMultiMap("", "sf", sf));
            }
            if (format != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.ExchangeDataFeedSnapshotAPISymbolList.Client.ClientUtils.ParameterToMultiMap("", "format", format));
            }
            if (serv != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.ExchangeDataFeedSnapshotAPISymbolList.Client.ClientUtils.ParameterToMultiMap("", "serv", serv));
            }
            if (reqId != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.ExchangeDataFeedSnapshotAPISymbolList.Client.ClientUtils.ParameterToMultiMap("", "req_id", reqId));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.ExchangeDataFeedSnapshotAPISymbolList.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = GetDFSnapshotResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Get<
            DFSnapshotResponse>("/DFSnapshot", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetDFSnapshot", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// Request a snapshot of exchange data for a list of symbols.  &#x60;ids&#x60; and &#x60;oc&#x60; are required parameters, but only one can be used based on request. Use &#x60;ids&#x60; for regular snapshot requests, and &#x60;oc&#x60; for requesting an option chain.   **Try it Out** feature is available using a pre-recorded sandbox environment. Follow Try it Out inscrutions on each parameter to develop a request and view a sample server response.  &#39;*You must be logged into the Developer Portal and obtain an **[API Key](https://developer.factset.com/factset/api-key-listing)** for &#39;&#39;Try it Out&#39;&#39; to receive a successful server response. Select **Authorize** button or visit **[Authentication Support](https://developer.factset.com/authentication)** for more details.*&#39; 
        /// </summary>
        /// <exception cref="FactSet.SDK.ExchangeDataFeedSnapshotAPISymbolList.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">Requested symbols or securities. **Required** if not using &#x60;oc&#x60;. This is a comma-seperated list with a maximum of 500. Each symbol can be a FactSet Exchange Symbol, CUSIP, or SEDOL. This can be used in combination with &#x60;chain&#x60; parameter to pull in a custom portfolio.&lt;P&gt;**Try it out** - Choose one or multiple - IBM-USA, BABA-USA, WALMEX-MX, 7203-TKS, VOD-LON, NPN-JSE, MABAX, NZF, SPY-USA, AGG-USA, GLD-USA, AOR-USA, MNA-USA, UUP-USA, SP50-SPX, ESX-STX, XAO-ASX, WD-MSX, NG00-USA, GC00-USA, CC00-USA, C00-USA, FC00-USA, ER00-USA, EURUSD-FX1, USDMXN-FX1, AUDJPY-FX1, EURCZK-FX1, USDILS-FX1, USDZAR-FX1, US10YY-TU1, FDS#190621C00145000-USA, FDS#190621P00145000-USA. *Leave blank if you are trying the &#x60;oc&#x60; parameter*.&lt;/p&gt; (optional)</param>
        /// <param name="oc">Option Chain, accepts one underlying symbol for which the option chain will be returned. **Required** if not using &#x60;ids&#x60;. &lt;p&gt;**Try it Out** - Only available for BABA-USA&lt;/p&gt; (optional)</param>
        /// <param name="fields">All available fields. This is a comma-seperated list (no spaces). **Required** only when using &#x60;oc&#x60;. Otherwise, leave blank to return all fields by default. See definitions for details on available field names and Field ID #s. The Data Service Manual has complete reference.&lt;p&gt;**Try it Out** - All fields available. Use either FID # or name. For &#x60;oc&#x60;, recommend to use BID_1,ASK_1,STRIKE_PRICE. (optional)</param>
        /// <param name="sf">Symbol Filters, ability to apply filtering to the result of an option chain &#x60;oc&#x60; request based on available fields and values for the symbols. &#x60;sf&#x60;&#x3D;VALUE_[filter],[field],[value]   * **VALUE_MINMAX** -  Field value will be within specified interval. ex. - VALUE_MINMAX,BID_1,min,max   * **VALUE_EQUALS** - Field value will equal specified value. ex. - VALUE_EQUALS,BID_1,value   * **VALUE_NOT_EQUALS** - Field value will not equal specified value. ex. - VALUE_NOT_EQUALS,BID_1,value      **Try it Out** - depends on fields used. Example - VALUE_MINMAX,STRIKE_PRICE,120,130   (optional)</param>
        /// <param name="format">The format of the output file.&lt;p&gt;**Try it Out** - All formats available&lt;/p&gt; (optional, default to XML)</param>
        /// <param name="serv">The Data Service that handles the request for the specified symbols. Available live services are -    * **FDS1** -Production Data Service   * **FDS_FUND** -Fundamental Data Service used for End-of-Day data.  **Try it Out** - use FDS1  (optional)</param>
        /// <param name="reqId">Request Identification String. Can be used by the application to keep track of requests.  The id is not used by this service, however, it is included in the XML response.&lt;p&gt; **Try it Out** - any value can be passed through.&lt;/p&gt; (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DFSnapshotResponse</returns>
        public async System.Threading.Tasks.Task<DFSnapshotResponse>GetDFSnapshotAsync(string ids = default(string), string oc = default(string), string fields = default(string), string sf = default(string), string format = default(string), string serv = default(string), string reqId = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await GetDFSnapshotWithHttpInfoAsync(ids, oc, fields, sf, format, serv, reqId, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Request a snapshot of exchange data for a list of symbols.  &#x60;ids&#x60; and &#x60;oc&#x60; are required parameters, but only one can be used based on request. Use &#x60;ids&#x60; for regular snapshot requests, and &#x60;oc&#x60; for requesting an option chain.   **Try it Out** feature is available using a pre-recorded sandbox environment. Follow Try it Out inscrutions on each parameter to develop a request and view a sample server response.  &#39;*You must be logged into the Developer Portal and obtain an **[API Key](https://developer.factset.com/factset/api-key-listing)** for &#39;&#39;Try it Out&#39;&#39; to receive a successful server response. Select **Authorize** button or visit **[Authentication Support](https://developer.factset.com/authentication)** for more details.*&#39; 
        /// </summary>
        /// <exception cref="FactSet.SDK.ExchangeDataFeedSnapshotAPISymbolList.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">Requested symbols or securities. **Required** if not using &#x60;oc&#x60;. This is a comma-seperated list with a maximum of 500. Each symbol can be a FactSet Exchange Symbol, CUSIP, or SEDOL. This can be used in combination with &#x60;chain&#x60; parameter to pull in a custom portfolio.&lt;P&gt;**Try it out** - Choose one or multiple - IBM-USA, BABA-USA, WALMEX-MX, 7203-TKS, VOD-LON, NPN-JSE, MABAX, NZF, SPY-USA, AGG-USA, GLD-USA, AOR-USA, MNA-USA, UUP-USA, SP50-SPX, ESX-STX, XAO-ASX, WD-MSX, NG00-USA, GC00-USA, CC00-USA, C00-USA, FC00-USA, ER00-USA, EURUSD-FX1, USDMXN-FX1, AUDJPY-FX1, EURCZK-FX1, USDILS-FX1, USDZAR-FX1, US10YY-TU1, FDS#190621C00145000-USA, FDS#190621P00145000-USA. *Leave blank if you are trying the &#x60;oc&#x60; parameter*.&lt;/p&gt; (optional)</param>
        /// <param name="oc">Option Chain, accepts one underlying symbol for which the option chain will be returned. **Required** if not using &#x60;ids&#x60;. &lt;p&gt;**Try it Out** - Only available for BABA-USA&lt;/p&gt; (optional)</param>
        /// <param name="fields">All available fields. This is a comma-seperated list (no spaces). **Required** only when using &#x60;oc&#x60;. Otherwise, leave blank to return all fields by default. See definitions for details on available field names and Field ID #s. The Data Service Manual has complete reference.&lt;p&gt;**Try it Out** - All fields available. Use either FID # or name. For &#x60;oc&#x60;, recommend to use BID_1,ASK_1,STRIKE_PRICE. (optional)</param>
        /// <param name="sf">Symbol Filters, ability to apply filtering to the result of an option chain &#x60;oc&#x60; request based on available fields and values for the symbols. &#x60;sf&#x60;&#x3D;VALUE_[filter],[field],[value]   * **VALUE_MINMAX** -  Field value will be within specified interval. ex. - VALUE_MINMAX,BID_1,min,max   * **VALUE_EQUALS** - Field value will equal specified value. ex. - VALUE_EQUALS,BID_1,value   * **VALUE_NOT_EQUALS** - Field value will not equal specified value. ex. - VALUE_NOT_EQUALS,BID_1,value      **Try it Out** - depends on fields used. Example - VALUE_MINMAX,STRIKE_PRICE,120,130   (optional)</param>
        /// <param name="format">The format of the output file.&lt;p&gt;**Try it Out** - All formats available&lt;/p&gt; (optional, default to XML)</param>
        /// <param name="serv">The Data Service that handles the request for the specified symbols. Available live services are -    * **FDS1** -Production Data Service   * **FDS_FUND** -Fundamental Data Service used for End-of-Day data.  **Try it Out** - use FDS1  (optional)</param>
        /// <param name="reqId">Request Identification String. Can be used by the application to keep track of requests.  The id is not used by this service, however, it is included in the XML response.&lt;p&gt; **Try it Out** - any value can be passed through.&lt;/p&gt; (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DFSnapshotResponse)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<DFSnapshotResponse>> GetDFSnapshotWithHttpInfoAsync(string ids = default(string), string oc = default(string), string fields = default(string), string sf = default(string), string format = default(string), string serv = default(string), string reqId = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            FactSet.SDK.ExchangeDataFeedSnapshotAPISymbolList.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.ExchangeDataFeedSnapshotAPISymbolList.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml",
                "text/csv"
            };

            var localVarContentType = FactSet.SDK.ExchangeDataFeedSnapshotAPISymbolList.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.ExchangeDataFeedSnapshotAPISymbolList.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (ids != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.ExchangeDataFeedSnapshotAPISymbolList.Client.ClientUtils.ParameterToMultiMap("", "ids", ids));
            }
            if (oc != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.ExchangeDataFeedSnapshotAPISymbolList.Client.ClientUtils.ParameterToMultiMap("", "oc", oc));
            }
            if (fields != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.ExchangeDataFeedSnapshotAPISymbolList.Client.ClientUtils.ParameterToMultiMap("", "fields", fields));
            }
            if (sf != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.ExchangeDataFeedSnapshotAPISymbolList.Client.ClientUtils.ParameterToMultiMap("", "sf", sf));
            }
            if (format != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.ExchangeDataFeedSnapshotAPISymbolList.Client.ClientUtils.ParameterToMultiMap("", "format", format));
            }
            if (serv != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.ExchangeDataFeedSnapshotAPISymbolList.Client.ClientUtils.ParameterToMultiMap("", "serv", serv));
            }
            if (reqId != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.ExchangeDataFeedSnapshotAPISymbolList.Client.ClientUtils.ParameterToMultiMap("", "req_id", reqId));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.ExchangeDataFeedSnapshotAPISymbolList.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = GetDFSnapshotResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<DFSnapshotResponse>("/DFSnapshot", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetDFSnapshot", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Snap exchange data. Use if URL lengh of 2,048 is exceeded. Request Snapshot exchange data. Use POST when your URL length exceeds 2,048 characters.
        /// </summary>
        /// <exception cref="FactSet.SDK.ExchangeDataFeedSnapshotAPISymbolList.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">Requested symbols or securities. **Required** if not using &#x60;oc&#x60;. This is a comma-seperated list with a maximum of 500. Each symbol can be a FactSet Exchange Symbol, CUSIP, or SEDOL. This can be used in combination with &#x60;chain&#x60; parameter to pull in a custom portfolio.&lt;P&gt;**Try it out** - Choose one or multiple - IBM-USA, BABA-USA, WALMEX-MX, 7203-TKS, VOD-LON, NPN-JSE, MABAX, NZF, SPY-USA, AGG-USA, GLD-USA, AOR-USA, MNA-USA, UUP-USA, SP50-SPX, ESX-STX, XAO-ASX, WD-MSX, NG00-USA, GC00-USA, CC00-USA, C00-USA, FC00-USA, ER00-USA, EURUSD-FX1, USDMXN-FX1, AUDJPY-FX1, EURCZK-FX1, USDILS-FX1, USDZAR-FX1, US10YY-TU1, FDS#190621C00145000-USA, FDS#190621P00145000-USA. *Leave blank if you are trying the &#x60;oc&#x60; parameter*.&lt;/p&gt; (optional)</param>
        /// <param name="oc">Option Chain, accepts one underlying symbol for which the option chain will be returned. **Required** if not using &#x60;ids&#x60;. &lt;p&gt;**Try it Out** - Only available for BABA-USA&lt;/p&gt; (optional)</param>
        /// <param name="fields">All available fields. This is a comma-seperated list (no spaces). **Required** only when using &#x60;oc&#x60;. Otherwise, leave blank to return all fields by default. See definitions for details on available field names and Field ID #s. The Data Service Manual has complete reference.&lt;p&gt;**Try it Out** - All fields available. Use either FID # or name. For &#x60;oc&#x60;, recommend to use BID_1,ASK_1,STRIKE_PRICE. (optional)</param>
        /// <param name="sf">Symbol Filters, ability to apply filtering to the result of an option chain &#x60;oc&#x60; request based on available fields and values for the symbols. &#x60;sf&#x60;&#x3D;VALUE_[filter],[field],[value]   * **VALUE_MINMAX** -  Field value will be within specified interval. ex. - VALUE_MINMAX,BID_1,min,max   * **VALUE_EQUALS** - Field value will equal specified value. ex. - VALUE_EQUALS,BID_1,value   * **VALUE_NOT_EQUALS** - Field value will not equal specified value. ex. - VALUE_NOT_EQUALS,BID_1,value      **Try it Out** - depends on fields used. Example - VALUE_MINMAX,STRIKE_PRICE,120,130   (optional)</param>
        /// <param name="format">The format of the output file.&lt;p&gt;**Try it Out** - All formats available&lt;/p&gt; (optional, default to XML)</param>
        /// <param name="serv">The Data Service that handles the request for the specified symbols. Available live services are -    * **FDS1** -Production Data Service   * **FDS_FUND** -Fundamental Data Service used for End-of-Day data.  **Try it Out** - use FDS1  (optional)</param>
        /// <param name="reqId">Request Identification String. Can be used by the application to keep track of requests.  The id is not used by this service, however, it is included in the XML response.&lt;p&gt; **Try it Out** - any value can be passed through.&lt;/p&gt; (optional)</param>
        /// <returns>DFSnapshotResponse</returns>
        public DFSnapshotResponse PostDFSnapshot(string ids = default(string), string oc = default(string), string fields = default(string), string sf = default(string), string format = default(string), string serv = default(string), string reqId = default(string))
        {
            var localVarResponse = PostDFSnapshotWithHttpInfo(ids, oc, fields, sf, format, serv, reqId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Snap exchange data. Use if URL lengh of 2,048 is exceeded. Request Snapshot exchange data. Use POST when your URL length exceeds 2,048 characters.
        /// </summary>
        /// <exception cref="FactSet.SDK.ExchangeDataFeedSnapshotAPISymbolList.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">Requested symbols or securities. **Required** if not using &#x60;oc&#x60;. This is a comma-seperated list with a maximum of 500. Each symbol can be a FactSet Exchange Symbol, CUSIP, or SEDOL. This can be used in combination with &#x60;chain&#x60; parameter to pull in a custom portfolio.&lt;P&gt;**Try it out** - Choose one or multiple - IBM-USA, BABA-USA, WALMEX-MX, 7203-TKS, VOD-LON, NPN-JSE, MABAX, NZF, SPY-USA, AGG-USA, GLD-USA, AOR-USA, MNA-USA, UUP-USA, SP50-SPX, ESX-STX, XAO-ASX, WD-MSX, NG00-USA, GC00-USA, CC00-USA, C00-USA, FC00-USA, ER00-USA, EURUSD-FX1, USDMXN-FX1, AUDJPY-FX1, EURCZK-FX1, USDILS-FX1, USDZAR-FX1, US10YY-TU1, FDS#190621C00145000-USA, FDS#190621P00145000-USA. *Leave blank if you are trying the &#x60;oc&#x60; parameter*.&lt;/p&gt; (optional)</param>
        /// <param name="oc">Option Chain, accepts one underlying symbol for which the option chain will be returned. **Required** if not using &#x60;ids&#x60;. &lt;p&gt;**Try it Out** - Only available for BABA-USA&lt;/p&gt; (optional)</param>
        /// <param name="fields">All available fields. This is a comma-seperated list (no spaces). **Required** only when using &#x60;oc&#x60;. Otherwise, leave blank to return all fields by default. See definitions for details on available field names and Field ID #s. The Data Service Manual has complete reference.&lt;p&gt;**Try it Out** - All fields available. Use either FID # or name. For &#x60;oc&#x60;, recommend to use BID_1,ASK_1,STRIKE_PRICE. (optional)</param>
        /// <param name="sf">Symbol Filters, ability to apply filtering to the result of an option chain &#x60;oc&#x60; request based on available fields and values for the symbols. &#x60;sf&#x60;&#x3D;VALUE_[filter],[field],[value]   * **VALUE_MINMAX** -  Field value will be within specified interval. ex. - VALUE_MINMAX,BID_1,min,max   * **VALUE_EQUALS** - Field value will equal specified value. ex. - VALUE_EQUALS,BID_1,value   * **VALUE_NOT_EQUALS** - Field value will not equal specified value. ex. - VALUE_NOT_EQUALS,BID_1,value      **Try it Out** - depends on fields used. Example - VALUE_MINMAX,STRIKE_PRICE,120,130   (optional)</param>
        /// <param name="format">The format of the output file.&lt;p&gt;**Try it Out** - All formats available&lt;/p&gt; (optional, default to XML)</param>
        /// <param name="serv">The Data Service that handles the request for the specified symbols. Available live services are -    * **FDS1** -Production Data Service   * **FDS_FUND** -Fundamental Data Service used for End-of-Day data.  **Try it Out** - use FDS1  (optional)</param>
        /// <param name="reqId">Request Identification String. Can be used by the application to keep track of requests.  The id is not used by this service, however, it is included in the XML response.&lt;p&gt; **Try it Out** - any value can be passed through.&lt;/p&gt; (optional)</param>
        /// <returns>ApiResponse of DFSnapshotResponse</returns>
        public ApiResponse<DFSnapshotResponse> PostDFSnapshotWithHttpInfo(string ids = default(string), string oc = default(string), string fields = default(string), string sf = default(string), string format = default(string), string serv = default(string), string reqId = default(string))
        {
            FactSet.SDK.ExchangeDataFeedSnapshotAPISymbolList.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.ExchangeDataFeedSnapshotAPISymbolList.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml",
                "text/csv"
            };

            var localVarContentType = FactSet.SDK.ExchangeDataFeedSnapshotAPISymbolList.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.ExchangeDataFeedSnapshotAPISymbolList.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (ids != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.ExchangeDataFeedSnapshotAPISymbolList.Client.ClientUtils.ParameterToMultiMap("", "ids", ids));
            }
            if (oc != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.ExchangeDataFeedSnapshotAPISymbolList.Client.ClientUtils.ParameterToMultiMap("", "oc", oc));
            }
            if (fields != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.ExchangeDataFeedSnapshotAPISymbolList.Client.ClientUtils.ParameterToMultiMap("", "fields", fields));
            }
            if (sf != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.ExchangeDataFeedSnapshotAPISymbolList.Client.ClientUtils.ParameterToMultiMap("", "sf", sf));
            }
            if (format != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.ExchangeDataFeedSnapshotAPISymbolList.Client.ClientUtils.ParameterToMultiMap("", "format", format));
            }
            if (serv != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.ExchangeDataFeedSnapshotAPISymbolList.Client.ClientUtils.ParameterToMultiMap("", "serv", serv));
            }
            if (reqId != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.ExchangeDataFeedSnapshotAPISymbolList.Client.ClientUtils.ParameterToMultiMap("", "req_id", reqId));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.ExchangeDataFeedSnapshotAPISymbolList.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = PostDFSnapshotResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Post<
            DFSnapshotResponse>("/DFSnapshot", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostDFSnapshot", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// Snap exchange data. Use if URL lengh of 2,048 is exceeded. Request Snapshot exchange data. Use POST when your URL length exceeds 2,048 characters.
        /// </summary>
        /// <exception cref="FactSet.SDK.ExchangeDataFeedSnapshotAPISymbolList.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">Requested symbols or securities. **Required** if not using &#x60;oc&#x60;. This is a comma-seperated list with a maximum of 500. Each symbol can be a FactSet Exchange Symbol, CUSIP, or SEDOL. This can be used in combination with &#x60;chain&#x60; parameter to pull in a custom portfolio.&lt;P&gt;**Try it out** - Choose one or multiple - IBM-USA, BABA-USA, WALMEX-MX, 7203-TKS, VOD-LON, NPN-JSE, MABAX, NZF, SPY-USA, AGG-USA, GLD-USA, AOR-USA, MNA-USA, UUP-USA, SP50-SPX, ESX-STX, XAO-ASX, WD-MSX, NG00-USA, GC00-USA, CC00-USA, C00-USA, FC00-USA, ER00-USA, EURUSD-FX1, USDMXN-FX1, AUDJPY-FX1, EURCZK-FX1, USDILS-FX1, USDZAR-FX1, US10YY-TU1, FDS#190621C00145000-USA, FDS#190621P00145000-USA. *Leave blank if you are trying the &#x60;oc&#x60; parameter*.&lt;/p&gt; (optional)</param>
        /// <param name="oc">Option Chain, accepts one underlying symbol for which the option chain will be returned. **Required** if not using &#x60;ids&#x60;. &lt;p&gt;**Try it Out** - Only available for BABA-USA&lt;/p&gt; (optional)</param>
        /// <param name="fields">All available fields. This is a comma-seperated list (no spaces). **Required** only when using &#x60;oc&#x60;. Otherwise, leave blank to return all fields by default. See definitions for details on available field names and Field ID #s. The Data Service Manual has complete reference.&lt;p&gt;**Try it Out** - All fields available. Use either FID # or name. For &#x60;oc&#x60;, recommend to use BID_1,ASK_1,STRIKE_PRICE. (optional)</param>
        /// <param name="sf">Symbol Filters, ability to apply filtering to the result of an option chain &#x60;oc&#x60; request based on available fields and values for the symbols. &#x60;sf&#x60;&#x3D;VALUE_[filter],[field],[value]   * **VALUE_MINMAX** -  Field value will be within specified interval. ex. - VALUE_MINMAX,BID_1,min,max   * **VALUE_EQUALS** - Field value will equal specified value. ex. - VALUE_EQUALS,BID_1,value   * **VALUE_NOT_EQUALS** - Field value will not equal specified value. ex. - VALUE_NOT_EQUALS,BID_1,value      **Try it Out** - depends on fields used. Example - VALUE_MINMAX,STRIKE_PRICE,120,130   (optional)</param>
        /// <param name="format">The format of the output file.&lt;p&gt;**Try it Out** - All formats available&lt;/p&gt; (optional, default to XML)</param>
        /// <param name="serv">The Data Service that handles the request for the specified symbols. Available live services are -    * **FDS1** -Production Data Service   * **FDS_FUND** -Fundamental Data Service used for End-of-Day data.  **Try it Out** - use FDS1  (optional)</param>
        /// <param name="reqId">Request Identification String. Can be used by the application to keep track of requests.  The id is not used by this service, however, it is included in the XML response.&lt;p&gt; **Try it Out** - any value can be passed through.&lt;/p&gt; (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DFSnapshotResponse</returns>
        public async System.Threading.Tasks.Task<DFSnapshotResponse>PostDFSnapshotAsync(string ids = default(string), string oc = default(string), string fields = default(string), string sf = default(string), string format = default(string), string serv = default(string), string reqId = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await PostDFSnapshotWithHttpInfoAsync(ids, oc, fields, sf, format, serv, reqId, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Snap exchange data. Use if URL lengh of 2,048 is exceeded. Request Snapshot exchange data. Use POST when your URL length exceeds 2,048 characters.
        /// </summary>
        /// <exception cref="FactSet.SDK.ExchangeDataFeedSnapshotAPISymbolList.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">Requested symbols or securities. **Required** if not using &#x60;oc&#x60;. This is a comma-seperated list with a maximum of 500. Each symbol can be a FactSet Exchange Symbol, CUSIP, or SEDOL. This can be used in combination with &#x60;chain&#x60; parameter to pull in a custom portfolio.&lt;P&gt;**Try it out** - Choose one or multiple - IBM-USA, BABA-USA, WALMEX-MX, 7203-TKS, VOD-LON, NPN-JSE, MABAX, NZF, SPY-USA, AGG-USA, GLD-USA, AOR-USA, MNA-USA, UUP-USA, SP50-SPX, ESX-STX, XAO-ASX, WD-MSX, NG00-USA, GC00-USA, CC00-USA, C00-USA, FC00-USA, ER00-USA, EURUSD-FX1, USDMXN-FX1, AUDJPY-FX1, EURCZK-FX1, USDILS-FX1, USDZAR-FX1, US10YY-TU1, FDS#190621C00145000-USA, FDS#190621P00145000-USA. *Leave blank if you are trying the &#x60;oc&#x60; parameter*.&lt;/p&gt; (optional)</param>
        /// <param name="oc">Option Chain, accepts one underlying symbol for which the option chain will be returned. **Required** if not using &#x60;ids&#x60;. &lt;p&gt;**Try it Out** - Only available for BABA-USA&lt;/p&gt; (optional)</param>
        /// <param name="fields">All available fields. This is a comma-seperated list (no spaces). **Required** only when using &#x60;oc&#x60;. Otherwise, leave blank to return all fields by default. See definitions for details on available field names and Field ID #s. The Data Service Manual has complete reference.&lt;p&gt;**Try it Out** - All fields available. Use either FID # or name. For &#x60;oc&#x60;, recommend to use BID_1,ASK_1,STRIKE_PRICE. (optional)</param>
        /// <param name="sf">Symbol Filters, ability to apply filtering to the result of an option chain &#x60;oc&#x60; request based on available fields and values for the symbols. &#x60;sf&#x60;&#x3D;VALUE_[filter],[field],[value]   * **VALUE_MINMAX** -  Field value will be within specified interval. ex. - VALUE_MINMAX,BID_1,min,max   * **VALUE_EQUALS** - Field value will equal specified value. ex. - VALUE_EQUALS,BID_1,value   * **VALUE_NOT_EQUALS** - Field value will not equal specified value. ex. - VALUE_NOT_EQUALS,BID_1,value      **Try it Out** - depends on fields used. Example - VALUE_MINMAX,STRIKE_PRICE,120,130   (optional)</param>
        /// <param name="format">The format of the output file.&lt;p&gt;**Try it Out** - All formats available&lt;/p&gt; (optional, default to XML)</param>
        /// <param name="serv">The Data Service that handles the request for the specified symbols. Available live services are -    * **FDS1** -Production Data Service   * **FDS_FUND** -Fundamental Data Service used for End-of-Day data.  **Try it Out** - use FDS1  (optional)</param>
        /// <param name="reqId">Request Identification String. Can be used by the application to keep track of requests.  The id is not used by this service, however, it is included in the XML response.&lt;p&gt; **Try it Out** - any value can be passed through.&lt;/p&gt; (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DFSnapshotResponse)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<DFSnapshotResponse>> PostDFSnapshotWithHttpInfoAsync(string ids = default(string), string oc = default(string), string fields = default(string), string sf = default(string), string format = default(string), string serv = default(string), string reqId = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            FactSet.SDK.ExchangeDataFeedSnapshotAPISymbolList.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.ExchangeDataFeedSnapshotAPISymbolList.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml",
                "text/csv"
            };

            var localVarContentType = FactSet.SDK.ExchangeDataFeedSnapshotAPISymbolList.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.ExchangeDataFeedSnapshotAPISymbolList.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (ids != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.ExchangeDataFeedSnapshotAPISymbolList.Client.ClientUtils.ParameterToMultiMap("", "ids", ids));
            }
            if (oc != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.ExchangeDataFeedSnapshotAPISymbolList.Client.ClientUtils.ParameterToMultiMap("", "oc", oc));
            }
            if (fields != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.ExchangeDataFeedSnapshotAPISymbolList.Client.ClientUtils.ParameterToMultiMap("", "fields", fields));
            }
            if (sf != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.ExchangeDataFeedSnapshotAPISymbolList.Client.ClientUtils.ParameterToMultiMap("", "sf", sf));
            }
            if (format != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.ExchangeDataFeedSnapshotAPISymbolList.Client.ClientUtils.ParameterToMultiMap("", "format", format));
            }
            if (serv != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.ExchangeDataFeedSnapshotAPISymbolList.Client.ClientUtils.ParameterToMultiMap("", "serv", serv));
            }
            if (reqId != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.ExchangeDataFeedSnapshotAPISymbolList.Client.ClientUtils.ParameterToMultiMap("", "req_id", reqId));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.ExchangeDataFeedSnapshotAPISymbolList.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = PostDFSnapshotResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<DFSnapshotResponse>("/DFSnapshot", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostDFSnapshot", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
