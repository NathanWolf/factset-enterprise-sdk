/*
 * Exchange DataFeed Snapshot
 *
 * FactSetâ€™s Exchange DataFeed Snapshot API provides cost-effective access to real-time and delayed global exchange data. Proprietary technology normalizes over 200 global exchanges and 150+ data fields. Asset types integrated include equities, futures, options, warrants, fixed income, mutual funds, ETFs, indices, commodities, and FX rates. <p>Cutting-edge technology ensures reliability and provides scalability that allow applications to request multiple items at a time. To simplify client-side development an entire response can be placed in a matrix or table for effortless integration into internal and external applications. Using specified output formats (CSV, XML, JSON) receive all standard fields by default or customize the list based on specific needs.</p></p>Below are the current hosts:</p><p>Production: api.factset.com<p>Sandbox: api-sandbox.factset.com</p>
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: api@factset.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = FactSet.SDK.ExchangeDataFeedSnapshotAPISymbolList.Client.OpenAPIDateConverter;

namespace FactSet.SDK.ExchangeDataFeedSnapshotAPISymbolList.Model
{
    /// <summary>
    /// All available fields in service. FID &#x3D; Field ID Number.
    /// </summary>
    [DataContract(Name = "fields")]
    public partial class Fields : IEquatable<Fields>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Fields" /> class.
        /// </summary>
        /// <param name="exchange">Field ID # 20. Exchange ISO-Code. Enumeration in Data Service Manual..</param>
        /// <param name="product">Field ID # 4. Product identifier. Enumeration in Data Service Manual..</param>
        /// <param name="bid">Field ID # 509. Current bid price.</param>
        /// <param name="bidDate">Field ID # 386. Current bid date.</param>
        /// <param name="bidTime">Field ID # 385. Current bid time.</param>
        /// <param name="bidVol">Field ID # 505. Current bid size.</param>
        /// <param name="bidTick">Field ID # 518. Current bid tick direction. Enumeration in Data Service Manual..</param>
        /// <param name="bidClose">Field ID # 648. Official Closing Bid.</param>
        /// <param name="bidCloseDate">Field ID # 1062. Official Closing Bid Date.</param>
        /// <param name="bidCloseVol">Field ID # 296. Official Closing Bid Volume.</param>
        /// <param name="bidExch">Field ID # 506. Exchange of the current bid price. Enumeration in Data Service Manual..</param>
        /// <param name="ask">Field ID # 609. Current ask price.</param>
        /// <param name="askDate">Field ID # 388. Current ask date.</param>
        /// <param name="askTime">Field ID # 387. Current ask time.</param>
        /// <param name="askVol">Field ID # 605. Current ask size.</param>
        /// <param name="askClose">Field ID # 649. Official Closing ask.</param>
        /// <param name="askCloseDate">Field ID # 1064. Official Closing ask Date.</param>
        /// <param name="askCloseVol">Field ID # 297. Official Closing ask Volume.</param>
        /// <param name="askExch">Field ID # 606. Exchange of the current ask price.  Enumeration in Data Service Manual..</param>
        /// <param name="shortSaleIndicator">Field ID # 277. Flag to indicate if a security is restricted from being sold short.</param>
        /// <param name="quoteCondition">Field ID # 38. Current Quote Condition.  Enumeration in Data Service Manual..</param>
        /// <param name="lastPrice">Field ID # 50. Official last trade price.</param>
        /// <param name="lastDate">Field ID # 384. Last Date.</param>
        /// <param name="lastTime">Field ID # 383. Official last traded time.</param>
        /// <param name="lastVol">Field ID # 31. Official last traded volume.</param>
        /// <param name="lastTick">Field ID # 25. Official last tick. Enumeration in Data Service Manual..</param>
        /// <param name="officialClose">Field ID # 526. Official Close/Close Range 1 Price.</param>
        /// <param name="officialCloseTime">Field ID # 1065. Official Close/Close Range 1 Time.</param>
        /// <param name="lastExch">Field ID # 33. Official last traded exchange. Enumeration in Data Service Manual..</param>
        /// <param name="settlement">Field ID # 815. Settle Price.</param>
        /// <param name="tradedPrice">Field ID # 912. Last traded Price.</param>
        /// <param name="tradedDate">Field ID # 868. Last traded Date.</param>
        /// <param name="tradedTime">Field ID # 916. Last traded Time.</param>
        /// <param name="tradedVol">Field ID # 918. Last traded Volume.</param>
        /// <param name="tradedCondition">Field ID # 1098. Last traded trade condition.</param>
        /// <param name="netChange">Field ID # 662. Official last change.</param>
        /// <param name="percentChange">Field ID # 816. Official last percentage change.</param>
        /// <param name="premktPrice">Field ID # 1019. Unofficial last premarket trade price.</param>
        /// <param name="premktTime">Field ID # 1075. Unofficial last premarket traded time.</param>
        /// <param name="premktVol">Field ID # 1832. Unofficial last premarket traded volume.</param>
        /// <param name="premktCVol">Field ID # 1836. Unofficial last premarket cumulative volume.</param>
        /// <param name="postmktPrice">Field ID # 2029. Unofficial last post market trade price.</param>
        /// <param name="postmktTime">Field ID # 1076. Unofficial last post market traded time.</param>
        /// <param name="postmktVol">Field ID # 1860. Unofficial last post market traded volume.</param>
        /// <param name="postmktCvol">Field ID # 1864. Unofficial last post market cumulative volume.</param>
        /// <param name="offbookCumVol">Field ID # 528. Off Book Cumulative Volume.</param>
        /// <param name="officialBidClose">Field ID # 448. The bid close price of today.</param>
        /// <param name="officialAskClose">Field ID # 476. The ask close price of today.</param>
        /// <param name="midDate">Field ID # 136. Current mid date.</param>
        /// <param name="midTime">Field ID # 135. Current mid price time.</param>
        /// <param name="cvol">Field ID # 132. Cumulative volume.</param>
        /// <param name="turnover">Field ID # 341. Turnover.</param>
        /// <param name="vwap">Field ID # 780. Volume Weighted Average Price.</param>
        /// <param name="tradeCount">Field ID # 267. Cumulative trade count.</param>
        /// <param name="blockTradeCount">Field ID # 269. Cumulative block count.</param>
        /// <param name="blockCvol">Field ID # 271. Cumulative block volume.</param>
        /// <param name="prevClose">Field ID # 208. Previous trading days Close.</param>
        /// <param name="closeDate">Field ID # 1051. Previous trading days Closing Date.</param>
        /// <param name="prevCloseUnadj">Field ID # 892. Unadjusted Previous trading days Close.</param>
        /// <param name="prevClose2">Field ID # 1172. Previous trading days Close  late rollover[1].</param>
        /// <param name="prevCloseUnadj2">Field ID # 1176. Unadjusted Previous trading days Close  late rollover.</param>
        /// <param name="lowerTradingBand">Field ID # 1093. Lower trading band.</param>
        /// <param name="upperTradingBand">Field ID # 1087. Upper trading band.</param>
        /// <param name="buyImbalance">Field ID # 495. NYSE buy imbalance.</param>
        /// <param name="sellImbalance">Field ID # 496. NYSE sell imbalance.</param>
        /// <param name="nasBuyImbalance">Field ID # 948. NAS buy imbalance.</param>
        /// <param name="nasSellImbalance">Field ID # 949. NAS sell imbalance.</param>
        /// <param name="open">Field ID # 158. The Open Range 1 or Open Price.</param>
        /// <param name="high">Field ID # 107. Current high for the day.</param>
        /// <param name="low">Field ID # 307. Current low for the day.</param>
        /// <param name="venue">Field ID # 530. Venue.</param>
        /// <param name="buyId">Field ID # 1820. Buy Id.</param>
        /// <param name="sellId">Field ID # 1824. Sell Id.</param>
        /// <param name="autoTradeVwap">Field ID # 637. VWAP including only order book (automatic) trades.</param>
        /// <param name="autoTradeCvol">Field ID # 635. Cumulative Volume calculated on all automated trading volumes for order-based segments.</param>
        /// <param name="autoTradeCount">Field ID # 636. Trade Quantity including only order book (automatic) trades.</param>
        /// <param name="exDateStatus">Field ID # 531. Ex-Date Status.</param>
        /// <param name="premktNetChange">Field ID # 896. Net change in pre-market session(US stocks only).</param>
        /// <param name="premktPercentChange">Field ID # 897. Percent change in pre-market session(US stocks only).</param>
        /// <param name="closingVol">Field ID # 1345. Volume of the closing trade.</param>
        /// <param name="primaryMarket">Field ID # 1517. FactSet Exchange Code of primary market for instrument. Determined by highest trading volume over a 3-day calendar period.</param>
        /// <param name="isoCountryExchange">Field ID # 1621. Three Letter Country Code from ISO-3166.</param>
        /// <param name="premktExch">Field ID # 1743. Premarket Exchange. Enumeration in Data Service Manual. .</param>
        /// <param name="postmktExch">Field ID # 1744. Post Market Exchange. Enumeration in Data Service Manual..</param>
        /// <param name="frefSecurityType">Field ID # 1751. The Security type returned by FREF_SECURITY_type.</param>
        /// <param name="securitySubType">Field ID # 1762. Sub type of the security populated for funds right now.</param>
        /// <param name="postmktNetChange">Field ID # 1881. Post Market Net Change.</param>
        /// <param name="postmktPercentChange">Field ID # 1882. Post Market Percent Change. .</param>
        /// <param name="isin">Field ID # 12. ISIN.</param>
        /// <param name="cusip">Field ID # 14. CUSIP.</param>
        /// <param name="sedol">Field ID # 15. SEDOL.</param>
        /// <param name="description">Field ID # 8. Security Description.</param>
        /// <param name="sharesOutstanding">Field ID # 29. Total number of shares outstanding.</param>
        /// <param name="priceCurrency">Field ID # 62. Price currency code.</param>
        /// <param name="securityStatus">Field ID # 2800. Security Status or Halt Indicator. Enumeration in Data manual.</param>
        /// <param name="gmtOffset">Field ID # 389. GMT Offset in Minutes.</param>
        /// <param name="marketSegment">Field ID # 650. Market segment.</param>
        /// <param name="marketSector">Field ID # 651. Market sector.</param>
        /// <param name="period">Field ID # 633. Period.</param>
        /// <param name="countryCode">Field ID # 652. ISO Country code.</param>
        /// <param name="financialStatus">Field ID # 1896. Financial Status Enumeration Table.</param>
        /// <param name="factsetIndustry">Field ID # 722. FactSet Industry Classification.</param>
        /// <param name="factsetSector">Field ID # 723. FactSet Sector Classification.</param>
        /// <param name="haltInfo">Field ID # 1414. Halt Status.</param>
        /// <param name="homepage">Field ID # 724. Company Homepage.</param>
        /// <param name="haltDescription">Field ID # 1184. Halt description.</param>
        /// <param name="feedCurrency">Field ID # 1182. Currency the Exchange sends the prices to FactSet in.</param>
        /// <param name="countryName">Field ID # 1190. Name of Country.</param>
        /// <param name="orderLotSize">Field ID # 427. Number of securities in a lot.</param>
        /// <param name="tradeLotSize">Field ID # 1335. The minimum number of lots required to trade.</param>
        /// <param name="tickSize">Field ID # 1499. Tick Size.</param>
        /// <param name="tickGroup">Field ID # 1507. Tick Group.</param>
        /// <param name="tickPilotEffDate">Field ID # 1508. Tick Pilot effective day.</param>
        /// <param name="avg30DayVol">Field ID # 709. Average cumulative volume for last 30 days.</param>
        /// <param name="avg5DayVol">Field ID # 719. Average cumulative volume over last 5 trading days.</param>
        /// <param name="high52Week">Field ID # 767. 52 Week High Price.</param>
        /// <param name="low52Week">Field ID # 768. 52 Week Low Price.</param>
        /// <param name="high52WeekDate">Field ID # 1220. 52 Week High Price Date.</param>
        /// <param name="low52WeekDate">Field ID # 1295. 52 Week Low Price Date.</param>
        /// <param name="tradeCondition">Field ID # 174. Trade Condition.</param>
        /// <param name="totalReturn3M">Field ID # 746. 3 Month return for US mutual funds.</param>
        /// <param name="totalReturn52W">Field ID # 747. 52-Week Total Return for US mutual funds.</param>
        public Fields(string exchange = default(string), string product = default(string), decimal bid = default(decimal), string bidDate = default(string), int bidTime = default(int), int bidVol = default(int), string bidTick = default(string), decimal bidClose = default(decimal), string bidCloseDate = default(string), int bidCloseVol = default(int), string bidExch = default(string), decimal ask = default(decimal), string askDate = default(string), int askTime = default(int), int askVol = default(int), decimal askClose = default(decimal), string askCloseDate = default(string), int askCloseVol = default(int), string askExch = default(string), int shortSaleIndicator = default(int), string quoteCondition = default(string), decimal lastPrice = default(decimal), string lastDate = default(string), int lastTime = default(int), int lastVol = default(int), string lastTick = default(string), decimal officialClose = default(decimal), int officialCloseTime = default(int), string lastExch = default(string), decimal settlement = default(decimal), decimal tradedPrice = default(decimal), string tradedDate = default(string), int tradedTime = default(int), int tradedVol = default(int), string tradedCondition = default(string), decimal netChange = default(decimal), decimal percentChange = default(decimal), decimal premktPrice = default(decimal), int premktTime = default(int), int premktVol = default(int), int premktCVol = default(int), decimal postmktPrice = default(decimal), int postmktTime = default(int), int postmktVol = default(int), int postmktCvol = default(int), int offbookCumVol = default(int), decimal officialBidClose = default(decimal), decimal officialAskClose = default(decimal), string midDate = default(string), int midTime = default(int), int cvol = default(int), decimal turnover = default(decimal), decimal vwap = default(decimal), int tradeCount = default(int), int blockTradeCount = default(int), int blockCvol = default(int), decimal prevClose = default(decimal), string closeDate = default(string), decimal prevCloseUnadj = default(decimal), decimal prevClose2 = default(decimal), decimal prevCloseUnadj2 = default(decimal), decimal lowerTradingBand = default(decimal), decimal upperTradingBand = default(decimal), int buyImbalance = default(int), int sellImbalance = default(int), int nasBuyImbalance = default(int), int nasSellImbalance = default(int), decimal open = default(decimal), decimal high = default(decimal), decimal low = default(decimal), string venue = default(string), string buyId = default(string), string sellId = default(string), decimal autoTradeVwap = default(decimal), int autoTradeCvol = default(int), int autoTradeCount = default(int), string exDateStatus = default(string), decimal premktNetChange = default(decimal), decimal premktPercentChange = default(decimal), int closingVol = default(int), string primaryMarket = default(string), string isoCountryExchange = default(string), string premktExch = default(string), string postmktExch = default(string), string frefSecurityType = default(string), string securitySubType = default(string), decimal postmktNetChange = default(decimal), decimal postmktPercentChange = default(decimal), string isin = default(string), string cusip = default(string), string sedol = default(string), string description = default(string), decimal sharesOutstanding = default(decimal), string priceCurrency = default(string), string securityStatus = default(string), int gmtOffset = default(int), string marketSegment = default(string), string marketSector = default(string), string period = default(string), string countryCode = default(string), int financialStatus = default(int), string factsetIndustry = default(string), string factsetSector = default(string), int haltInfo = default(int), string homepage = default(string), string haltDescription = default(string), string feedCurrency = default(string), string countryName = default(string), int orderLotSize = default(int), int tradeLotSize = default(int), decimal tickSize = default(decimal), string tickGroup = default(string), string tickPilotEffDate = default(string), decimal avg30DayVol = default(decimal), decimal avg5DayVol = default(decimal), decimal high52Week = default(decimal), decimal low52Week = default(decimal), string high52WeekDate = default(string), string low52WeekDate = default(string), string tradeCondition = default(string), decimal totalReturn3M = default(decimal), decimal totalReturn52W = default(decimal))
        {
            this.Exchange = exchange;
            this.Product = product;
            this.Bid = bid;
            this.BidDate = bidDate;
            this.BidTime = bidTime;
            this.BidVol = bidVol;
            this.BidTick = bidTick;
            this.BidClose = bidClose;
            this.BidCloseDate = bidCloseDate;
            this.BidCloseVol = bidCloseVol;
            this.BidExch = bidExch;
            this.Ask = ask;
            this.AskDate = askDate;
            this.AskTime = askTime;
            this.AskVol = askVol;
            this.AskClose = askClose;
            this.AskCloseDate = askCloseDate;
            this.AskCloseVol = askCloseVol;
            this.AskExch = askExch;
            this.ShortSaleIndicator = shortSaleIndicator;
            this.QuoteCondition = quoteCondition;
            this.LastPrice = lastPrice;
            this.LastDate = lastDate;
            this.LastTime = lastTime;
            this.LastVol = lastVol;
            this.LastTick = lastTick;
            this.OfficialClose = officialClose;
            this.OfficialCloseTime = officialCloseTime;
            this.LastExch = lastExch;
            this.Settlement = settlement;
            this.TradedPrice = tradedPrice;
            this.TradedDate = tradedDate;
            this.TradedTime = tradedTime;
            this.TradedVol = tradedVol;
            this.TradedCondition = tradedCondition;
            this.NetChange = netChange;
            this.PercentChange = percentChange;
            this.PremktPrice = premktPrice;
            this.PremktTime = premktTime;
            this.PremktVol = premktVol;
            this.PremktCVol = premktCVol;
            this.PostmktPrice = postmktPrice;
            this.PostmktTime = postmktTime;
            this.PostmktVol = postmktVol;
            this.PostmktCvol = postmktCvol;
            this.OffbookCumVol = offbookCumVol;
            this.OfficialBidClose = officialBidClose;
            this.OfficialAskClose = officialAskClose;
            this.MidDate = midDate;
            this.MidTime = midTime;
            this.Cvol = cvol;
            this.Turnover = turnover;
            this.Vwap = vwap;
            this.TradeCount = tradeCount;
            this.BlockTradeCount = blockTradeCount;
            this.BlockCvol = blockCvol;
            this.PrevClose = prevClose;
            this.CloseDate = closeDate;
            this.PrevCloseUnadj = prevCloseUnadj;
            this.PrevClose2 = prevClose2;
            this.PrevCloseUnadj2 = prevCloseUnadj2;
            this.LowerTradingBand = lowerTradingBand;
            this.UpperTradingBand = upperTradingBand;
            this.BuyImbalance = buyImbalance;
            this.SellImbalance = sellImbalance;
            this.NasBuyImbalance = nasBuyImbalance;
            this.NasSellImbalance = nasSellImbalance;
            this.Open = open;
            this.High = high;
            this.Low = low;
            this.Venue = venue;
            this.BuyId = buyId;
            this.SellId = sellId;
            this.AutoTradeVwap = autoTradeVwap;
            this.AutoTradeCvol = autoTradeCvol;
            this.AutoTradeCount = autoTradeCount;
            this.ExDateStatus = exDateStatus;
            this.PremktNetChange = premktNetChange;
            this.PremktPercentChange = premktPercentChange;
            this.ClosingVol = closingVol;
            this.PrimaryMarket = primaryMarket;
            this.IsoCountryExchange = isoCountryExchange;
            this.PremktExch = premktExch;
            this.PostmktExch = postmktExch;
            this.FrefSecurityType = frefSecurityType;
            this.SecuritySubType = securitySubType;
            this.PostmktNetChange = postmktNetChange;
            this.PostmktPercentChange = postmktPercentChange;
            this.Isin = isin;
            this.Cusip = cusip;
            this.Sedol = sedol;
            this.Description = description;
            this.SharesOutstanding = sharesOutstanding;
            this.PriceCurrency = priceCurrency;
            this.SecurityStatus = securityStatus;
            this.GmtOffset = gmtOffset;
            this.MarketSegment = marketSegment;
            this.MarketSector = marketSector;
            this.Period = period;
            this.CountryCode = countryCode;
            this.FinancialStatus = financialStatus;
            this.FactsetIndustry = factsetIndustry;
            this.FactsetSector = factsetSector;
            this.HaltInfo = haltInfo;
            this.Homepage = homepage;
            this.HaltDescription = haltDescription;
            this.FeedCurrency = feedCurrency;
            this.CountryName = countryName;
            this.OrderLotSize = orderLotSize;
            this.TradeLotSize = tradeLotSize;
            this.TickSize = tickSize;
            this.TickGroup = tickGroup;
            this.TickPilotEffDate = tickPilotEffDate;
            this.Avg30DayVol = avg30DayVol;
            this.Avg5DayVol = avg5DayVol;
            this.High52Week = high52Week;
            this.Low52Week = low52Week;
            this.High52WeekDate = high52WeekDate;
            this.Low52WeekDate = low52WeekDate;
            this.TradeCondition = tradeCondition;
            this.TotalReturn3M = totalReturn3M;
            this.TotalReturn52W = totalReturn52W;
        }

        /// <summary>
        /// Field ID # 20. Exchange ISO-Code. Enumeration in Data Service Manual.
        /// </summary>
        /// <value>Field ID # 20. Exchange ISO-Code. Enumeration in Data Service Manual.</value>
        [DataMember(Name = "Exchange", EmitDefaultValue = false)]
        public string Exchange { get; set; }

        /// <summary>
        /// Field ID # 4. Product identifier. Enumeration in Data Service Manual.
        /// </summary>
        /// <value>Field ID # 4. Product identifier. Enumeration in Data Service Manual.</value>
        [DataMember(Name = "product", EmitDefaultValue = false)]
        public string Product { get; set; }

        /// <summary>
        /// Field ID # 509. Current bid price
        /// </summary>
        /// <value>Field ID # 509. Current bid price</value>
        [DataMember(Name = "Bid", EmitDefaultValue = false)]
        public decimal Bid { get; set; }

        /// <summary>
        /// Field ID # 386. Current bid date
        /// </summary>
        /// <value>Field ID # 386. Current bid date</value>
        [DataMember(Name = "Bid_Date", EmitDefaultValue = false)]
        public string BidDate { get; set; }

        /// <summary>
        /// Field ID # 385. Current bid time
        /// </summary>
        /// <value>Field ID # 385. Current bid time</value>
        [DataMember(Name = "Bid_Time", EmitDefaultValue = false)]
        public int BidTime { get; set; }

        /// <summary>
        /// Field ID # 505. Current bid size
        /// </summary>
        /// <value>Field ID # 505. Current bid size</value>
        [DataMember(Name = "Bid_Vol", EmitDefaultValue = false)]
        public int BidVol { get; set; }

        /// <summary>
        /// Field ID # 518. Current bid tick direction. Enumeration in Data Service Manual.
        /// </summary>
        /// <value>Field ID # 518. Current bid tick direction. Enumeration in Data Service Manual.</value>
        [DataMember(Name = "Bid_Tick", EmitDefaultValue = false)]
        public string BidTick { get; set; }

        /// <summary>
        /// Field ID # 648. Official Closing Bid
        /// </summary>
        /// <value>Field ID # 648. Official Closing Bid</value>
        [DataMember(Name = "Bid_Close", EmitDefaultValue = false)]
        public decimal BidClose { get; set; }

        /// <summary>
        /// Field ID # 1062. Official Closing Bid Date
        /// </summary>
        /// <value>Field ID # 1062. Official Closing Bid Date</value>
        [DataMember(Name = "Bid_Close_Date", EmitDefaultValue = false)]
        public string BidCloseDate { get; set; }

        /// <summary>
        /// Field ID # 296. Official Closing Bid Volume
        /// </summary>
        /// <value>Field ID # 296. Official Closing Bid Volume</value>
        [DataMember(Name = "Bid_Close_Vol", EmitDefaultValue = false)]
        public int BidCloseVol { get; set; }

        /// <summary>
        /// Field ID # 506. Exchange of the current bid price. Enumeration in Data Service Manual.
        /// </summary>
        /// <value>Field ID # 506. Exchange of the current bid price. Enumeration in Data Service Manual.</value>
        [DataMember(Name = "Bid_Exch", EmitDefaultValue = false)]
        public string BidExch { get; set; }

        /// <summary>
        /// Field ID # 609. Current ask price
        /// </summary>
        /// <value>Field ID # 609. Current ask price</value>
        [DataMember(Name = "Ask", EmitDefaultValue = false)]
        public decimal Ask { get; set; }

        /// <summary>
        /// Field ID # 388. Current ask date
        /// </summary>
        /// <value>Field ID # 388. Current ask date</value>
        [DataMember(Name = "Ask_Date", EmitDefaultValue = false)]
        public string AskDate { get; set; }

        /// <summary>
        /// Field ID # 387. Current ask time
        /// </summary>
        /// <value>Field ID # 387. Current ask time</value>
        [DataMember(Name = "Ask_Time", EmitDefaultValue = false)]
        public int AskTime { get; set; }

        /// <summary>
        /// Field ID # 605. Current ask size
        /// </summary>
        /// <value>Field ID # 605. Current ask size</value>
        [DataMember(Name = "Ask_Vol", EmitDefaultValue = false)]
        public int AskVol { get; set; }

        /// <summary>
        /// Field ID # 649. Official Closing ask
        /// </summary>
        /// <value>Field ID # 649. Official Closing ask</value>
        [DataMember(Name = "Ask_Close", EmitDefaultValue = false)]
        public decimal AskClose { get; set; }

        /// <summary>
        /// Field ID # 1064. Official Closing ask Date
        /// </summary>
        /// <value>Field ID # 1064. Official Closing ask Date</value>
        [DataMember(Name = "Ask_Close_Date", EmitDefaultValue = false)]
        public string AskCloseDate { get; set; }

        /// <summary>
        /// Field ID # 297. Official Closing ask Volume
        /// </summary>
        /// <value>Field ID # 297. Official Closing ask Volume</value>
        [DataMember(Name = "Ask_Close_Vol", EmitDefaultValue = false)]
        public int AskCloseVol { get; set; }

        /// <summary>
        /// Field ID # 606. Exchange of the current ask price.  Enumeration in Data Service Manual.
        /// </summary>
        /// <value>Field ID # 606. Exchange of the current ask price.  Enumeration in Data Service Manual.</value>
        [DataMember(Name = "Ask_Exch", EmitDefaultValue = false)]
        public string AskExch { get; set; }

        /// <summary>
        /// Field ID # 277. Flag to indicate if a security is restricted from being sold short
        /// </summary>
        /// <value>Field ID # 277. Flag to indicate if a security is restricted from being sold short</value>
        [DataMember(Name = "Short_Sale_Indicator", EmitDefaultValue = false)]
        public int ShortSaleIndicator { get; set; }

        /// <summary>
        /// Field ID # 38. Current Quote Condition.  Enumeration in Data Service Manual.
        /// </summary>
        /// <value>Field ID # 38. Current Quote Condition.  Enumeration in Data Service Manual.</value>
        [DataMember(Name = "Quote_Condition", EmitDefaultValue = false)]
        public string QuoteCondition { get; set; }

        /// <summary>
        /// Field ID # 50. Official last trade price
        /// </summary>
        /// <value>Field ID # 50. Official last trade price</value>
        [DataMember(Name = "Last_Price", EmitDefaultValue = false)]
        public decimal LastPrice { get; set; }

        /// <summary>
        /// Field ID # 384. Last Date
        /// </summary>
        /// <value>Field ID # 384. Last Date</value>
        [DataMember(Name = "Last_Date", EmitDefaultValue = false)]
        public string LastDate { get; set; }

        /// <summary>
        /// Field ID # 383. Official last traded time
        /// </summary>
        /// <value>Field ID # 383. Official last traded time</value>
        [DataMember(Name = "Last_Time", EmitDefaultValue = false)]
        public int LastTime { get; set; }

        /// <summary>
        /// Field ID # 31. Official last traded volume
        /// </summary>
        /// <value>Field ID # 31. Official last traded volume</value>
        [DataMember(Name = "Last_Vol", EmitDefaultValue = false)]
        public int LastVol { get; set; }

        /// <summary>
        /// Field ID # 25. Official last tick. Enumeration in Data Service Manual.
        /// </summary>
        /// <value>Field ID # 25. Official last tick. Enumeration in Data Service Manual.</value>
        [DataMember(Name = "Last_Tick", EmitDefaultValue = false)]
        public string LastTick { get; set; }

        /// <summary>
        /// Field ID # 526. Official Close/Close Range 1 Price
        /// </summary>
        /// <value>Field ID # 526. Official Close/Close Range 1 Price</value>
        [DataMember(Name = "Official_Close", EmitDefaultValue = false)]
        public decimal OfficialClose { get; set; }

        /// <summary>
        /// Field ID # 1065. Official Close/Close Range 1 Time
        /// </summary>
        /// <value>Field ID # 1065. Official Close/Close Range 1 Time</value>
        [DataMember(Name = "Official_Close_Time", EmitDefaultValue = false)]
        public int OfficialCloseTime { get; set; }

        /// <summary>
        /// Field ID # 33. Official last traded exchange. Enumeration in Data Service Manual.
        /// </summary>
        /// <value>Field ID # 33. Official last traded exchange. Enumeration in Data Service Manual.</value>
        [DataMember(Name = "Last_Exch", EmitDefaultValue = false)]
        public string LastExch { get; set; }

        /// <summary>
        /// Field ID # 815. Settle Price
        /// </summary>
        /// <value>Field ID # 815. Settle Price</value>
        [DataMember(Name = "Settlement", EmitDefaultValue = false)]
        public decimal Settlement { get; set; }

        /// <summary>
        /// Field ID # 912. Last traded Price
        /// </summary>
        /// <value>Field ID # 912. Last traded Price</value>
        [DataMember(Name = "Traded_Price", EmitDefaultValue = false)]
        public decimal TradedPrice { get; set; }

        /// <summary>
        /// Field ID # 868. Last traded Date
        /// </summary>
        /// <value>Field ID # 868. Last traded Date</value>
        [DataMember(Name = "Traded_Date", EmitDefaultValue = false)]
        public string TradedDate { get; set; }

        /// <summary>
        /// Field ID # 916. Last traded Time
        /// </summary>
        /// <value>Field ID # 916. Last traded Time</value>
        [DataMember(Name = "Traded_Time", EmitDefaultValue = false)]
        public int TradedTime { get; set; }

        /// <summary>
        /// Field ID # 918. Last traded Volume
        /// </summary>
        /// <value>Field ID # 918. Last traded Volume</value>
        [DataMember(Name = "Traded_Vol", EmitDefaultValue = false)]
        public int TradedVol { get; set; }

        /// <summary>
        /// Field ID # 1098. Last traded trade condition
        /// </summary>
        /// <value>Field ID # 1098. Last traded trade condition</value>
        [DataMember(Name = "Traded_Condition", EmitDefaultValue = false)]
        public string TradedCondition { get; set; }

        /// <summary>
        /// Field ID # 662. Official last change
        /// </summary>
        /// <value>Field ID # 662. Official last change</value>
        [DataMember(Name = "Net_Change", EmitDefaultValue = false)]
        public decimal NetChange { get; set; }

        /// <summary>
        /// Field ID # 816. Official last percentage change
        /// </summary>
        /// <value>Field ID # 816. Official last percentage change</value>
        [DataMember(Name = "Percent_Change", EmitDefaultValue = false)]
        public decimal PercentChange { get; set; }

        /// <summary>
        /// Field ID # 1019. Unofficial last premarket trade price
        /// </summary>
        /// <value>Field ID # 1019. Unofficial last premarket trade price</value>
        [DataMember(Name = "Premkt_Price", EmitDefaultValue = false)]
        public decimal PremktPrice { get; set; }

        /// <summary>
        /// Field ID # 1075. Unofficial last premarket traded time
        /// </summary>
        /// <value>Field ID # 1075. Unofficial last premarket traded time</value>
        [DataMember(Name = "Premkt_Time", EmitDefaultValue = false)]
        public int PremktTime { get; set; }

        /// <summary>
        /// Field ID # 1832. Unofficial last premarket traded volume
        /// </summary>
        /// <value>Field ID # 1832. Unofficial last premarket traded volume</value>
        [DataMember(Name = "Premkt_Vol", EmitDefaultValue = false)]
        public int PremktVol { get; set; }

        /// <summary>
        /// Field ID # 1836. Unofficial last premarket cumulative volume
        /// </summary>
        /// <value>Field ID # 1836. Unofficial last premarket cumulative volume</value>
        [DataMember(Name = "Premkt_CVol", EmitDefaultValue = false)]
        public int PremktCVol { get; set; }

        /// <summary>
        /// Field ID # 2029. Unofficial last post market trade price
        /// </summary>
        /// <value>Field ID # 2029. Unofficial last post market trade price</value>
        [DataMember(Name = "Postmkt_Price", EmitDefaultValue = false)]
        public decimal PostmktPrice { get; set; }

        /// <summary>
        /// Field ID # 1076. Unofficial last post market traded time
        /// </summary>
        /// <value>Field ID # 1076. Unofficial last post market traded time</value>
        [DataMember(Name = "Postmkt_Time", EmitDefaultValue = false)]
        public int PostmktTime { get; set; }

        /// <summary>
        /// Field ID # 1860. Unofficial last post market traded volume
        /// </summary>
        /// <value>Field ID # 1860. Unofficial last post market traded volume</value>
        [DataMember(Name = "Postmkt_Vol", EmitDefaultValue = false)]
        public int PostmktVol { get; set; }

        /// <summary>
        /// Field ID # 1864. Unofficial last post market cumulative volume
        /// </summary>
        /// <value>Field ID # 1864. Unofficial last post market cumulative volume</value>
        [DataMember(Name = "Postmkt_Cvol", EmitDefaultValue = false)]
        public int PostmktCvol { get; set; }

        /// <summary>
        /// Field ID # 528. Off Book Cumulative Volume
        /// </summary>
        /// <value>Field ID # 528. Off Book Cumulative Volume</value>
        [DataMember(Name = "Offbook_Cum_Vol", EmitDefaultValue = false)]
        public int OffbookCumVol { get; set; }

        /// <summary>
        /// Field ID # 448. The bid close price of today
        /// </summary>
        /// <value>Field ID # 448. The bid close price of today</value>
        [DataMember(Name = "Official_Bid_Close", EmitDefaultValue = false)]
        public decimal OfficialBidClose { get; set; }

        /// <summary>
        /// Field ID # 476. The ask close price of today
        /// </summary>
        /// <value>Field ID # 476. The ask close price of today</value>
        [DataMember(Name = "Official_Ask_Close", EmitDefaultValue = false)]
        public decimal OfficialAskClose { get; set; }

        /// <summary>
        /// Field ID # 136. Current mid date
        /// </summary>
        /// <value>Field ID # 136. Current mid date</value>
        [DataMember(Name = "Mid_Date", EmitDefaultValue = false)]
        public string MidDate { get; set; }

        /// <summary>
        /// Field ID # 135. Current mid price time
        /// </summary>
        /// <value>Field ID # 135. Current mid price time</value>
        [DataMember(Name = "Mid_Time", EmitDefaultValue = false)]
        public int MidTime { get; set; }

        /// <summary>
        /// Field ID # 132. Cumulative volume
        /// </summary>
        /// <value>Field ID # 132. Cumulative volume</value>
        [DataMember(Name = "Cvol", EmitDefaultValue = false)]
        public int Cvol { get; set; }

        /// <summary>
        /// Field ID # 341. Turnover
        /// </summary>
        /// <value>Field ID # 341. Turnover</value>
        [DataMember(Name = "Turnover", EmitDefaultValue = false)]
        public decimal Turnover { get; set; }

        /// <summary>
        /// Field ID # 780. Volume Weighted Average Price
        /// </summary>
        /// <value>Field ID # 780. Volume Weighted Average Price</value>
        [DataMember(Name = "Vwap", EmitDefaultValue = false)]
        public decimal Vwap { get; set; }

        /// <summary>
        /// Field ID # 267. Cumulative trade count
        /// </summary>
        /// <value>Field ID # 267. Cumulative trade count</value>
        [DataMember(Name = "Trade_Count", EmitDefaultValue = false)]
        public int TradeCount { get; set; }

        /// <summary>
        /// Field ID # 269. Cumulative block count
        /// </summary>
        /// <value>Field ID # 269. Cumulative block count</value>
        [DataMember(Name = "Block_Trade_Count", EmitDefaultValue = false)]
        public int BlockTradeCount { get; set; }

        /// <summary>
        /// Field ID # 271. Cumulative block volume
        /// </summary>
        /// <value>Field ID # 271. Cumulative block volume</value>
        [DataMember(Name = "Block_Cvol", EmitDefaultValue = false)]
        public int BlockCvol { get; set; }

        /// <summary>
        /// Field ID # 208. Previous trading days Close
        /// </summary>
        /// <value>Field ID # 208. Previous trading days Close</value>
        [DataMember(Name = "Prev_Close", EmitDefaultValue = false)]
        public decimal PrevClose { get; set; }

        /// <summary>
        /// Field ID # 1051. Previous trading days Closing Date
        /// </summary>
        /// <value>Field ID # 1051. Previous trading days Closing Date</value>
        [DataMember(Name = "Close_Date", EmitDefaultValue = false)]
        public string CloseDate { get; set; }

        /// <summary>
        /// Field ID # 892. Unadjusted Previous trading days Close
        /// </summary>
        /// <value>Field ID # 892. Unadjusted Previous trading days Close</value>
        [DataMember(Name = "Prev_Close_Unadj", EmitDefaultValue = false)]
        public decimal PrevCloseUnadj { get; set; }

        /// <summary>
        /// Field ID # 1172. Previous trading days Close  late rollover[1]
        /// </summary>
        /// <value>Field ID # 1172. Previous trading days Close  late rollover[1]</value>
        [DataMember(Name = "Prev_Close_2", EmitDefaultValue = false)]
        public decimal PrevClose2 { get; set; }

        /// <summary>
        /// Field ID # 1176. Unadjusted Previous trading days Close  late rollover
        /// </summary>
        /// <value>Field ID # 1176. Unadjusted Previous trading days Close  late rollover</value>
        [DataMember(Name = "Prev_Close_Unadj_2", EmitDefaultValue = false)]
        public decimal PrevCloseUnadj2 { get; set; }

        /// <summary>
        /// Field ID # 1093. Lower trading band
        /// </summary>
        /// <value>Field ID # 1093. Lower trading band</value>
        [DataMember(Name = "Lower_Trading_Band", EmitDefaultValue = false)]
        public decimal LowerTradingBand { get; set; }

        /// <summary>
        /// Field ID # 1087. Upper trading band
        /// </summary>
        /// <value>Field ID # 1087. Upper trading band</value>
        [DataMember(Name = "Upper_Trading_Band", EmitDefaultValue = false)]
        public decimal UpperTradingBand { get; set; }

        /// <summary>
        /// Field ID # 495. NYSE buy imbalance
        /// </summary>
        /// <value>Field ID # 495. NYSE buy imbalance</value>
        [DataMember(Name = "Buy_Imbalance", EmitDefaultValue = false)]
        public int BuyImbalance { get; set; }

        /// <summary>
        /// Field ID # 496. NYSE sell imbalance
        /// </summary>
        /// <value>Field ID # 496. NYSE sell imbalance</value>
        [DataMember(Name = "Sell_Imbalance", EmitDefaultValue = false)]
        public int SellImbalance { get; set; }

        /// <summary>
        /// Field ID # 948. NAS buy imbalance
        /// </summary>
        /// <value>Field ID # 948. NAS buy imbalance</value>
        [DataMember(Name = "Nas_Buy_Imbalance", EmitDefaultValue = false)]
        public int NasBuyImbalance { get; set; }

        /// <summary>
        /// Field ID # 949. NAS sell imbalance
        /// </summary>
        /// <value>Field ID # 949. NAS sell imbalance</value>
        [DataMember(Name = "Nas_Sell_Imbalance", EmitDefaultValue = false)]
        public int NasSellImbalance { get; set; }

        /// <summary>
        /// Field ID # 158. The Open Range 1 or Open Price
        /// </summary>
        /// <value>Field ID # 158. The Open Range 1 or Open Price</value>
        [DataMember(Name = "Open", EmitDefaultValue = false)]
        public decimal Open { get; set; }

        /// <summary>
        /// Field ID # 107. Current high for the day
        /// </summary>
        /// <value>Field ID # 107. Current high for the day</value>
        [DataMember(Name = "High", EmitDefaultValue = false)]
        public decimal High { get; set; }

        /// <summary>
        /// Field ID # 307. Current low for the day
        /// </summary>
        /// <value>Field ID # 307. Current low for the day</value>
        [DataMember(Name = "Low", EmitDefaultValue = false)]
        public decimal Low { get; set; }

        /// <summary>
        /// Field ID # 530. Venue
        /// </summary>
        /// <value>Field ID # 530. Venue</value>
        [DataMember(Name = "Venue", EmitDefaultValue = false)]
        public string Venue { get; set; }

        /// <summary>
        /// Field ID # 1820. Buy Id
        /// </summary>
        /// <value>Field ID # 1820. Buy Id</value>
        [DataMember(Name = "Buy_Id", EmitDefaultValue = false)]
        public string BuyId { get; set; }

        /// <summary>
        /// Field ID # 1824. Sell Id
        /// </summary>
        /// <value>Field ID # 1824. Sell Id</value>
        [DataMember(Name = "Sell_Id", EmitDefaultValue = false)]
        public string SellId { get; set; }

        /// <summary>
        /// Field ID # 637. VWAP including only order book (automatic) trades
        /// </summary>
        /// <value>Field ID # 637. VWAP including only order book (automatic) trades</value>
        [DataMember(Name = "Auto_Trade_Vwap", EmitDefaultValue = false)]
        public decimal AutoTradeVwap { get; set; }

        /// <summary>
        /// Field ID # 635. Cumulative Volume calculated on all automated trading volumes for order-based segments
        /// </summary>
        /// <value>Field ID # 635. Cumulative Volume calculated on all automated trading volumes for order-based segments</value>
        [DataMember(Name = "Auto_Trade_Cvol", EmitDefaultValue = false)]
        public int AutoTradeCvol { get; set; }

        /// <summary>
        /// Field ID # 636. Trade Quantity including only order book (automatic) trades
        /// </summary>
        /// <value>Field ID # 636. Trade Quantity including only order book (automatic) trades</value>
        [DataMember(Name = "Auto_Trade_Count", EmitDefaultValue = false)]
        public int AutoTradeCount { get; set; }

        /// <summary>
        /// Field ID # 531. Ex-Date Status
        /// </summary>
        /// <value>Field ID # 531. Ex-Date Status</value>
        [DataMember(Name = "Ex_Date_Status", EmitDefaultValue = false)]
        public string ExDateStatus { get; set; }

        /// <summary>
        /// Field ID # 896. Net change in pre-market session(US stocks only)
        /// </summary>
        /// <value>Field ID # 896. Net change in pre-market session(US stocks only)</value>
        [DataMember(Name = "Premkt_Net_Change", EmitDefaultValue = false)]
        public decimal PremktNetChange { get; set; }

        /// <summary>
        /// Field ID # 897. Percent change in pre-market session(US stocks only)
        /// </summary>
        /// <value>Field ID # 897. Percent change in pre-market session(US stocks only)</value>
        [DataMember(Name = "Premkt_Percent_Change", EmitDefaultValue = false)]
        public decimal PremktPercentChange { get; set; }

        /// <summary>
        /// Field ID # 1345. Volume of the closing trade
        /// </summary>
        /// <value>Field ID # 1345. Volume of the closing trade</value>
        [DataMember(Name = "Closing_Vol", EmitDefaultValue = false)]
        public int ClosingVol { get; set; }

        /// <summary>
        /// Field ID # 1517. FactSet Exchange Code of primary market for instrument. Determined by highest trading volume over a 3-day calendar period
        /// </summary>
        /// <value>Field ID # 1517. FactSet Exchange Code of primary market for instrument. Determined by highest trading volume over a 3-day calendar period</value>
        [DataMember(Name = "Primary_Market", EmitDefaultValue = false)]
        public string PrimaryMarket { get; set; }

        /// <summary>
        /// Field ID # 1621. Three Letter Country Code from ISO-3166
        /// </summary>
        /// <value>Field ID # 1621. Three Letter Country Code from ISO-3166</value>
        [DataMember(Name = "Iso_Country_Exchange", EmitDefaultValue = false)]
        public string IsoCountryExchange { get; set; }

        /// <summary>
        /// Field ID # 1743. Premarket Exchange. Enumeration in Data Service Manual. 
        /// </summary>
        /// <value>Field ID # 1743. Premarket Exchange. Enumeration in Data Service Manual. </value>
        [DataMember(Name = "Premkt_Exch", EmitDefaultValue = false)]
        public string PremktExch { get; set; }

        /// <summary>
        /// Field ID # 1744. Post Market Exchange. Enumeration in Data Service Manual.
        /// </summary>
        /// <value>Field ID # 1744. Post Market Exchange. Enumeration in Data Service Manual.</value>
        [DataMember(Name = "Postmkt_Exch", EmitDefaultValue = false)]
        public string PostmktExch { get; set; }

        /// <summary>
        /// Field ID # 1751. The Security type returned by FREF_SECURITY_type
        /// </summary>
        /// <value>Field ID # 1751. The Security type returned by FREF_SECURITY_type</value>
        [DataMember(Name = "Fref_Security_type", EmitDefaultValue = false)]
        public string FrefSecurityType { get; set; }

        /// <summary>
        /// Field ID # 1762. Sub type of the security populated for funds right now
        /// </summary>
        /// <value>Field ID # 1762. Sub type of the security populated for funds right now</value>
        [DataMember(Name = "Security_Sub_type", EmitDefaultValue = false)]
        public string SecuritySubType { get; set; }

        /// <summary>
        /// Field ID # 1881. Post Market Net Change
        /// </summary>
        /// <value>Field ID # 1881. Post Market Net Change</value>
        [DataMember(Name = "Postmkt_Net_Change", EmitDefaultValue = false)]
        public decimal PostmktNetChange { get; set; }

        /// <summary>
        /// Field ID # 1882. Post Market Percent Change. 
        /// </summary>
        /// <value>Field ID # 1882. Post Market Percent Change. </value>
        [DataMember(Name = "Postmkt_Percent_Change", EmitDefaultValue = false)]
        public decimal PostmktPercentChange { get; set; }

        /// <summary>
        /// Field ID # 12. ISIN
        /// </summary>
        /// <value>Field ID # 12. ISIN</value>
        [DataMember(Name = "Isin", EmitDefaultValue = false)]
        public string Isin { get; set; }

        /// <summary>
        /// Field ID # 14. CUSIP
        /// </summary>
        /// <value>Field ID # 14. CUSIP</value>
        [DataMember(Name = "Cusip", EmitDefaultValue = false)]
        public string Cusip { get; set; }

        /// <summary>
        /// Field ID # 15. SEDOL
        /// </summary>
        /// <value>Field ID # 15. SEDOL</value>
        [DataMember(Name = "Sedol", EmitDefaultValue = false)]
        public string Sedol { get; set; }

        /// <summary>
        /// Field ID # 8. Security Description
        /// </summary>
        /// <value>Field ID # 8. Security Description</value>
        [DataMember(Name = "description", EmitDefaultValue = false)]
        public string Description { get; set; }

        /// <summary>
        /// Field ID # 29. Total number of shares outstanding
        /// </summary>
        /// <value>Field ID # 29. Total number of shares outstanding</value>
        [DataMember(Name = "Shares_Outstanding", EmitDefaultValue = false)]
        public decimal SharesOutstanding { get; set; }

        /// <summary>
        /// Field ID # 62. Price currency code
        /// </summary>
        /// <value>Field ID # 62. Price currency code</value>
        [DataMember(Name = "Price_Currency", EmitDefaultValue = false)]
        public string PriceCurrency { get; set; }

        /// <summary>
        /// Field ID # 2800. Security Status or Halt Indicator. Enumeration in Data manual
        /// </summary>
        /// <value>Field ID # 2800. Security Status or Halt Indicator. Enumeration in Data manual</value>
        [DataMember(Name = "Security_Status", EmitDefaultValue = false)]
        public string SecurityStatus { get; set; }

        /// <summary>
        /// Field ID # 389. GMT Offset in Minutes
        /// </summary>
        /// <value>Field ID # 389. GMT Offset in Minutes</value>
        [DataMember(Name = "Gmt_Offset", EmitDefaultValue = false)]
        public int GmtOffset { get; set; }

        /// <summary>
        /// Field ID # 650. Market segment
        /// </summary>
        /// <value>Field ID # 650. Market segment</value>
        [DataMember(Name = "Market_Segment", EmitDefaultValue = false)]
        public string MarketSegment { get; set; }

        /// <summary>
        /// Field ID # 651. Market sector
        /// </summary>
        /// <value>Field ID # 651. Market sector</value>
        [DataMember(Name = "Market_Sector", EmitDefaultValue = false)]
        public string MarketSector { get; set; }

        /// <summary>
        /// Field ID # 633. Period
        /// </summary>
        /// <value>Field ID # 633. Period</value>
        [DataMember(Name = "Period", EmitDefaultValue = false)]
        public string Period { get; set; }

        /// <summary>
        /// Field ID # 652. ISO Country code
        /// </summary>
        /// <value>Field ID # 652. ISO Country code</value>
        [DataMember(Name = "Country_Code", EmitDefaultValue = false)]
        public string CountryCode { get; set; }

        /// <summary>
        /// Field ID # 1896. Financial Status Enumeration Table
        /// </summary>
        /// <value>Field ID # 1896. Financial Status Enumeration Table</value>
        [DataMember(Name = "Financial_Status", EmitDefaultValue = false)]
        public int FinancialStatus { get; set; }

        /// <summary>
        /// Field ID # 722. FactSet Industry Classification
        /// </summary>
        /// <value>Field ID # 722. FactSet Industry Classification</value>
        [DataMember(Name = "Factset_Industry", EmitDefaultValue = false)]
        public string FactsetIndustry { get; set; }

        /// <summary>
        /// Field ID # 723. FactSet Sector Classification
        /// </summary>
        /// <value>Field ID # 723. FactSet Sector Classification</value>
        [DataMember(Name = "Factset_Sector", EmitDefaultValue = false)]
        public string FactsetSector { get; set; }

        /// <summary>
        /// Field ID # 1414. Halt Status
        /// </summary>
        /// <value>Field ID # 1414. Halt Status</value>
        [DataMember(Name = "Halt_Info", EmitDefaultValue = false)]
        public int HaltInfo { get; set; }

        /// <summary>
        /// Field ID # 724. Company Homepage
        /// </summary>
        /// <value>Field ID # 724. Company Homepage</value>
        [DataMember(Name = "Homepage", EmitDefaultValue = false)]
        public string Homepage { get; set; }

        /// <summary>
        /// Field ID # 1184. Halt description
        /// </summary>
        /// <value>Field ID # 1184. Halt description</value>
        [DataMember(Name = "Halt_description", EmitDefaultValue = false)]
        public string HaltDescription { get; set; }

        /// <summary>
        /// Field ID # 1182. Currency the Exchange sends the prices to FactSet in
        /// </summary>
        /// <value>Field ID # 1182. Currency the Exchange sends the prices to FactSet in</value>
        [DataMember(Name = "Feed_Currency", EmitDefaultValue = false)]
        public string FeedCurrency { get; set; }

        /// <summary>
        /// Field ID # 1190. Name of Country
        /// </summary>
        /// <value>Field ID # 1190. Name of Country</value>
        [DataMember(Name = "Country_Name", EmitDefaultValue = false)]
        public string CountryName { get; set; }

        /// <summary>
        /// Field ID # 427. Number of securities in a lot
        /// </summary>
        /// <value>Field ID # 427. Number of securities in a lot</value>
        [DataMember(Name = "Order_Lot_Size", EmitDefaultValue = false)]
        public int OrderLotSize { get; set; }

        /// <summary>
        /// Field ID # 1335. The minimum number of lots required to trade
        /// </summary>
        /// <value>Field ID # 1335. The minimum number of lots required to trade</value>
        [DataMember(Name = "Trade_Lot_Size", EmitDefaultValue = false)]
        public int TradeLotSize { get; set; }

        /// <summary>
        /// Field ID # 1499. Tick Size
        /// </summary>
        /// <value>Field ID # 1499. Tick Size</value>
        [DataMember(Name = "Tick_Size", EmitDefaultValue = false)]
        public decimal TickSize { get; set; }

        /// <summary>
        /// Field ID # 1507. Tick Group
        /// </summary>
        /// <value>Field ID # 1507. Tick Group</value>
        [DataMember(Name = "Tick_Group", EmitDefaultValue = false)]
        public string TickGroup { get; set; }

        /// <summary>
        /// Field ID # 1508. Tick Pilot effective day
        /// </summary>
        /// <value>Field ID # 1508. Tick Pilot effective day</value>
        [DataMember(Name = "Tick_Pilot_Eff_Date", EmitDefaultValue = false)]
        public string TickPilotEffDate { get; set; }

        /// <summary>
        /// Field ID # 709. Average cumulative volume for last 30 days
        /// </summary>
        /// <value>Field ID # 709. Average cumulative volume for last 30 days</value>
        [DataMember(Name = "Avg_30Day_Vol", EmitDefaultValue = false)]
        public decimal Avg30DayVol { get; set; }

        /// <summary>
        /// Field ID # 719. Average cumulative volume over last 5 trading days
        /// </summary>
        /// <value>Field ID # 719. Average cumulative volume over last 5 trading days</value>
        [DataMember(Name = "Avg_5Day_Vol", EmitDefaultValue = false)]
        public decimal Avg5DayVol { get; set; }

        /// <summary>
        /// Field ID # 767. 52 Week High Price
        /// </summary>
        /// <value>Field ID # 767. 52 Week High Price</value>
        [DataMember(Name = "High_52Week", EmitDefaultValue = false)]
        public decimal High52Week { get; set; }

        /// <summary>
        /// Field ID # 768. 52 Week Low Price
        /// </summary>
        /// <value>Field ID # 768. 52 Week Low Price</value>
        [DataMember(Name = "Low_52Week", EmitDefaultValue = false)]
        public decimal Low52Week { get; set; }

        /// <summary>
        /// Field ID # 1220. 52 Week High Price Date
        /// </summary>
        /// <value>Field ID # 1220. 52 Week High Price Date</value>
        [DataMember(Name = "High_52Week_Date", EmitDefaultValue = false)]
        public string High52WeekDate { get; set; }

        /// <summary>
        /// Field ID # 1295. 52 Week Low Price Date
        /// </summary>
        /// <value>Field ID # 1295. 52 Week Low Price Date</value>
        [DataMember(Name = "Low_52Week_Date", EmitDefaultValue = false)]
        public string Low52WeekDate { get; set; }

        /// <summary>
        /// Field ID # 174. Trade Condition
        /// </summary>
        /// <value>Field ID # 174. Trade Condition</value>
        [DataMember(Name = "Trade_Condition", EmitDefaultValue = false)]
        public string TradeCondition { get; set; }

        /// <summary>
        /// Field ID # 746. 3 Month return for US mutual funds
        /// </summary>
        /// <value>Field ID # 746. 3 Month return for US mutual funds</value>
        [DataMember(Name = "Total_Return_3M", EmitDefaultValue = false)]
        public decimal TotalReturn3M { get; set; }

        /// <summary>
        /// Field ID # 747. 52-Week Total Return for US mutual funds
        /// </summary>
        /// <value>Field ID # 747. 52-Week Total Return for US mutual funds</value>
        [DataMember(Name = "Total_Return_52W", EmitDefaultValue = false)]
        public decimal TotalReturn52W { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Fields {\n");
            sb.Append("  Exchange: ").Append(Exchange).Append("\n");
            sb.Append("  Product: ").Append(Product).Append("\n");
            sb.Append("  Bid: ").Append(Bid).Append("\n");
            sb.Append("  BidDate: ").Append(BidDate).Append("\n");
            sb.Append("  BidTime: ").Append(BidTime).Append("\n");
            sb.Append("  BidVol: ").Append(BidVol).Append("\n");
            sb.Append("  BidTick: ").Append(BidTick).Append("\n");
            sb.Append("  BidClose: ").Append(BidClose).Append("\n");
            sb.Append("  BidCloseDate: ").Append(BidCloseDate).Append("\n");
            sb.Append("  BidCloseVol: ").Append(BidCloseVol).Append("\n");
            sb.Append("  BidExch: ").Append(BidExch).Append("\n");
            sb.Append("  Ask: ").Append(Ask).Append("\n");
            sb.Append("  AskDate: ").Append(AskDate).Append("\n");
            sb.Append("  AskTime: ").Append(AskTime).Append("\n");
            sb.Append("  AskVol: ").Append(AskVol).Append("\n");
            sb.Append("  AskClose: ").Append(AskClose).Append("\n");
            sb.Append("  AskCloseDate: ").Append(AskCloseDate).Append("\n");
            sb.Append("  AskCloseVol: ").Append(AskCloseVol).Append("\n");
            sb.Append("  AskExch: ").Append(AskExch).Append("\n");
            sb.Append("  ShortSaleIndicator: ").Append(ShortSaleIndicator).Append("\n");
            sb.Append("  QuoteCondition: ").Append(QuoteCondition).Append("\n");
            sb.Append("  LastPrice: ").Append(LastPrice).Append("\n");
            sb.Append("  LastDate: ").Append(LastDate).Append("\n");
            sb.Append("  LastTime: ").Append(LastTime).Append("\n");
            sb.Append("  LastVol: ").Append(LastVol).Append("\n");
            sb.Append("  LastTick: ").Append(LastTick).Append("\n");
            sb.Append("  OfficialClose: ").Append(OfficialClose).Append("\n");
            sb.Append("  OfficialCloseTime: ").Append(OfficialCloseTime).Append("\n");
            sb.Append("  LastExch: ").Append(LastExch).Append("\n");
            sb.Append("  Settlement: ").Append(Settlement).Append("\n");
            sb.Append("  TradedPrice: ").Append(TradedPrice).Append("\n");
            sb.Append("  TradedDate: ").Append(TradedDate).Append("\n");
            sb.Append("  TradedTime: ").Append(TradedTime).Append("\n");
            sb.Append("  TradedVol: ").Append(TradedVol).Append("\n");
            sb.Append("  TradedCondition: ").Append(TradedCondition).Append("\n");
            sb.Append("  NetChange: ").Append(NetChange).Append("\n");
            sb.Append("  PercentChange: ").Append(PercentChange).Append("\n");
            sb.Append("  PremktPrice: ").Append(PremktPrice).Append("\n");
            sb.Append("  PremktTime: ").Append(PremktTime).Append("\n");
            sb.Append("  PremktVol: ").Append(PremktVol).Append("\n");
            sb.Append("  PremktCVol: ").Append(PremktCVol).Append("\n");
            sb.Append("  PostmktPrice: ").Append(PostmktPrice).Append("\n");
            sb.Append("  PostmktTime: ").Append(PostmktTime).Append("\n");
            sb.Append("  PostmktVol: ").Append(PostmktVol).Append("\n");
            sb.Append("  PostmktCvol: ").Append(PostmktCvol).Append("\n");
            sb.Append("  OffbookCumVol: ").Append(OffbookCumVol).Append("\n");
            sb.Append("  OfficialBidClose: ").Append(OfficialBidClose).Append("\n");
            sb.Append("  OfficialAskClose: ").Append(OfficialAskClose).Append("\n");
            sb.Append("  MidDate: ").Append(MidDate).Append("\n");
            sb.Append("  MidTime: ").Append(MidTime).Append("\n");
            sb.Append("  Cvol: ").Append(Cvol).Append("\n");
            sb.Append("  Turnover: ").Append(Turnover).Append("\n");
            sb.Append("  Vwap: ").Append(Vwap).Append("\n");
            sb.Append("  TradeCount: ").Append(TradeCount).Append("\n");
            sb.Append("  BlockTradeCount: ").Append(BlockTradeCount).Append("\n");
            sb.Append("  BlockCvol: ").Append(BlockCvol).Append("\n");
            sb.Append("  PrevClose: ").Append(PrevClose).Append("\n");
            sb.Append("  CloseDate: ").Append(CloseDate).Append("\n");
            sb.Append("  PrevCloseUnadj: ").Append(PrevCloseUnadj).Append("\n");
            sb.Append("  PrevClose2: ").Append(PrevClose2).Append("\n");
            sb.Append("  PrevCloseUnadj2: ").Append(PrevCloseUnadj2).Append("\n");
            sb.Append("  LowerTradingBand: ").Append(LowerTradingBand).Append("\n");
            sb.Append("  UpperTradingBand: ").Append(UpperTradingBand).Append("\n");
            sb.Append("  BuyImbalance: ").Append(BuyImbalance).Append("\n");
            sb.Append("  SellImbalance: ").Append(SellImbalance).Append("\n");
            sb.Append("  NasBuyImbalance: ").Append(NasBuyImbalance).Append("\n");
            sb.Append("  NasSellImbalance: ").Append(NasSellImbalance).Append("\n");
            sb.Append("  Open: ").Append(Open).Append("\n");
            sb.Append("  High: ").Append(High).Append("\n");
            sb.Append("  Low: ").Append(Low).Append("\n");
            sb.Append("  Venue: ").Append(Venue).Append("\n");
            sb.Append("  BuyId: ").Append(BuyId).Append("\n");
            sb.Append("  SellId: ").Append(SellId).Append("\n");
            sb.Append("  AutoTradeVwap: ").Append(AutoTradeVwap).Append("\n");
            sb.Append("  AutoTradeCvol: ").Append(AutoTradeCvol).Append("\n");
            sb.Append("  AutoTradeCount: ").Append(AutoTradeCount).Append("\n");
            sb.Append("  ExDateStatus: ").Append(ExDateStatus).Append("\n");
            sb.Append("  PremktNetChange: ").Append(PremktNetChange).Append("\n");
            sb.Append("  PremktPercentChange: ").Append(PremktPercentChange).Append("\n");
            sb.Append("  ClosingVol: ").Append(ClosingVol).Append("\n");
            sb.Append("  PrimaryMarket: ").Append(PrimaryMarket).Append("\n");
            sb.Append("  IsoCountryExchange: ").Append(IsoCountryExchange).Append("\n");
            sb.Append("  PremktExch: ").Append(PremktExch).Append("\n");
            sb.Append("  PostmktExch: ").Append(PostmktExch).Append("\n");
            sb.Append("  FrefSecurityType: ").Append(FrefSecurityType).Append("\n");
            sb.Append("  SecuritySubType: ").Append(SecuritySubType).Append("\n");
            sb.Append("  PostmktNetChange: ").Append(PostmktNetChange).Append("\n");
            sb.Append("  PostmktPercentChange: ").Append(PostmktPercentChange).Append("\n");
            sb.Append("  Isin: ").Append(Isin).Append("\n");
            sb.Append("  Cusip: ").Append(Cusip).Append("\n");
            sb.Append("  Sedol: ").Append(Sedol).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  SharesOutstanding: ").Append(SharesOutstanding).Append("\n");
            sb.Append("  PriceCurrency: ").Append(PriceCurrency).Append("\n");
            sb.Append("  SecurityStatus: ").Append(SecurityStatus).Append("\n");
            sb.Append("  GmtOffset: ").Append(GmtOffset).Append("\n");
            sb.Append("  MarketSegment: ").Append(MarketSegment).Append("\n");
            sb.Append("  MarketSector: ").Append(MarketSector).Append("\n");
            sb.Append("  Period: ").Append(Period).Append("\n");
            sb.Append("  CountryCode: ").Append(CountryCode).Append("\n");
            sb.Append("  FinancialStatus: ").Append(FinancialStatus).Append("\n");
            sb.Append("  FactsetIndustry: ").Append(FactsetIndustry).Append("\n");
            sb.Append("  FactsetSector: ").Append(FactsetSector).Append("\n");
            sb.Append("  HaltInfo: ").Append(HaltInfo).Append("\n");
            sb.Append("  Homepage: ").Append(Homepage).Append("\n");
            sb.Append("  HaltDescription: ").Append(HaltDescription).Append("\n");
            sb.Append("  FeedCurrency: ").Append(FeedCurrency).Append("\n");
            sb.Append("  CountryName: ").Append(CountryName).Append("\n");
            sb.Append("  OrderLotSize: ").Append(OrderLotSize).Append("\n");
            sb.Append("  TradeLotSize: ").Append(TradeLotSize).Append("\n");
            sb.Append("  TickSize: ").Append(TickSize).Append("\n");
            sb.Append("  TickGroup: ").Append(TickGroup).Append("\n");
            sb.Append("  TickPilotEffDate: ").Append(TickPilotEffDate).Append("\n");
            sb.Append("  Avg30DayVol: ").Append(Avg30DayVol).Append("\n");
            sb.Append("  Avg5DayVol: ").Append(Avg5DayVol).Append("\n");
            sb.Append("  High52Week: ").Append(High52Week).Append("\n");
            sb.Append("  Low52Week: ").Append(Low52Week).Append("\n");
            sb.Append("  High52WeekDate: ").Append(High52WeekDate).Append("\n");
            sb.Append("  Low52WeekDate: ").Append(Low52WeekDate).Append("\n");
            sb.Append("  TradeCondition: ").Append(TradeCondition).Append("\n");
            sb.Append("  TotalReturn3M: ").Append(TotalReturn3M).Append("\n");
            sb.Append("  TotalReturn52W: ").Append(TotalReturn52W).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Fields);
        }

        /// <summary>
        /// Returns true if Fields instances are equal
        /// </summary>
        /// <param name="input">Instance of Fields to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Fields input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Exchange == input.Exchange ||
                    (this.Exchange != null &&
                    this.Exchange.Equals(input.Exchange))
                ) && 
                (
                    this.Product == input.Product ||
                    (this.Product != null &&
                    this.Product.Equals(input.Product))
                ) && 
                (
                    this.Bid == input.Bid ||
                    this.Bid.Equals(input.Bid)
                ) && 
                (
                    this.BidDate == input.BidDate ||
                    (this.BidDate != null &&
                    this.BidDate.Equals(input.BidDate))
                ) && 
                (
                    this.BidTime == input.BidTime ||
                    this.BidTime.Equals(input.BidTime)
                ) && 
                (
                    this.BidVol == input.BidVol ||
                    this.BidVol.Equals(input.BidVol)
                ) && 
                (
                    this.BidTick == input.BidTick ||
                    (this.BidTick != null &&
                    this.BidTick.Equals(input.BidTick))
                ) && 
                (
                    this.BidClose == input.BidClose ||
                    this.BidClose.Equals(input.BidClose)
                ) && 
                (
                    this.BidCloseDate == input.BidCloseDate ||
                    (this.BidCloseDate != null &&
                    this.BidCloseDate.Equals(input.BidCloseDate))
                ) && 
                (
                    this.BidCloseVol == input.BidCloseVol ||
                    this.BidCloseVol.Equals(input.BidCloseVol)
                ) && 
                (
                    this.BidExch == input.BidExch ||
                    (this.BidExch != null &&
                    this.BidExch.Equals(input.BidExch))
                ) && 
                (
                    this.Ask == input.Ask ||
                    this.Ask.Equals(input.Ask)
                ) && 
                (
                    this.AskDate == input.AskDate ||
                    (this.AskDate != null &&
                    this.AskDate.Equals(input.AskDate))
                ) && 
                (
                    this.AskTime == input.AskTime ||
                    this.AskTime.Equals(input.AskTime)
                ) && 
                (
                    this.AskVol == input.AskVol ||
                    this.AskVol.Equals(input.AskVol)
                ) && 
                (
                    this.AskClose == input.AskClose ||
                    this.AskClose.Equals(input.AskClose)
                ) && 
                (
                    this.AskCloseDate == input.AskCloseDate ||
                    (this.AskCloseDate != null &&
                    this.AskCloseDate.Equals(input.AskCloseDate))
                ) && 
                (
                    this.AskCloseVol == input.AskCloseVol ||
                    this.AskCloseVol.Equals(input.AskCloseVol)
                ) && 
                (
                    this.AskExch == input.AskExch ||
                    (this.AskExch != null &&
                    this.AskExch.Equals(input.AskExch))
                ) && 
                (
                    this.ShortSaleIndicator == input.ShortSaleIndicator ||
                    this.ShortSaleIndicator.Equals(input.ShortSaleIndicator)
                ) && 
                (
                    this.QuoteCondition == input.QuoteCondition ||
                    (this.QuoteCondition != null &&
                    this.QuoteCondition.Equals(input.QuoteCondition))
                ) && 
                (
                    this.LastPrice == input.LastPrice ||
                    this.LastPrice.Equals(input.LastPrice)
                ) && 
                (
                    this.LastDate == input.LastDate ||
                    (this.LastDate != null &&
                    this.LastDate.Equals(input.LastDate))
                ) && 
                (
                    this.LastTime == input.LastTime ||
                    this.LastTime.Equals(input.LastTime)
                ) && 
                (
                    this.LastVol == input.LastVol ||
                    this.LastVol.Equals(input.LastVol)
                ) && 
                (
                    this.LastTick == input.LastTick ||
                    (this.LastTick != null &&
                    this.LastTick.Equals(input.LastTick))
                ) && 
                (
                    this.OfficialClose == input.OfficialClose ||
                    this.OfficialClose.Equals(input.OfficialClose)
                ) && 
                (
                    this.OfficialCloseTime == input.OfficialCloseTime ||
                    this.OfficialCloseTime.Equals(input.OfficialCloseTime)
                ) && 
                (
                    this.LastExch == input.LastExch ||
                    (this.LastExch != null &&
                    this.LastExch.Equals(input.LastExch))
                ) && 
                (
                    this.Settlement == input.Settlement ||
                    this.Settlement.Equals(input.Settlement)
                ) && 
                (
                    this.TradedPrice == input.TradedPrice ||
                    this.TradedPrice.Equals(input.TradedPrice)
                ) && 
                (
                    this.TradedDate == input.TradedDate ||
                    (this.TradedDate != null &&
                    this.TradedDate.Equals(input.TradedDate))
                ) && 
                (
                    this.TradedTime == input.TradedTime ||
                    this.TradedTime.Equals(input.TradedTime)
                ) && 
                (
                    this.TradedVol == input.TradedVol ||
                    this.TradedVol.Equals(input.TradedVol)
                ) && 
                (
                    this.TradedCondition == input.TradedCondition ||
                    (this.TradedCondition != null &&
                    this.TradedCondition.Equals(input.TradedCondition))
                ) && 
                (
                    this.NetChange == input.NetChange ||
                    this.NetChange.Equals(input.NetChange)
                ) && 
                (
                    this.PercentChange == input.PercentChange ||
                    this.PercentChange.Equals(input.PercentChange)
                ) && 
                (
                    this.PremktPrice == input.PremktPrice ||
                    this.PremktPrice.Equals(input.PremktPrice)
                ) && 
                (
                    this.PremktTime == input.PremktTime ||
                    this.PremktTime.Equals(input.PremktTime)
                ) && 
                (
                    this.PremktVol == input.PremktVol ||
                    this.PremktVol.Equals(input.PremktVol)
                ) && 
                (
                    this.PremktCVol == input.PremktCVol ||
                    this.PremktCVol.Equals(input.PremktCVol)
                ) && 
                (
                    this.PostmktPrice == input.PostmktPrice ||
                    this.PostmktPrice.Equals(input.PostmktPrice)
                ) && 
                (
                    this.PostmktTime == input.PostmktTime ||
                    this.PostmktTime.Equals(input.PostmktTime)
                ) && 
                (
                    this.PostmktVol == input.PostmktVol ||
                    this.PostmktVol.Equals(input.PostmktVol)
                ) && 
                (
                    this.PostmktCvol == input.PostmktCvol ||
                    this.PostmktCvol.Equals(input.PostmktCvol)
                ) && 
                (
                    this.OffbookCumVol == input.OffbookCumVol ||
                    this.OffbookCumVol.Equals(input.OffbookCumVol)
                ) && 
                (
                    this.OfficialBidClose == input.OfficialBidClose ||
                    this.OfficialBidClose.Equals(input.OfficialBidClose)
                ) && 
                (
                    this.OfficialAskClose == input.OfficialAskClose ||
                    this.OfficialAskClose.Equals(input.OfficialAskClose)
                ) && 
                (
                    this.MidDate == input.MidDate ||
                    (this.MidDate != null &&
                    this.MidDate.Equals(input.MidDate))
                ) && 
                (
                    this.MidTime == input.MidTime ||
                    this.MidTime.Equals(input.MidTime)
                ) && 
                (
                    this.Cvol == input.Cvol ||
                    this.Cvol.Equals(input.Cvol)
                ) && 
                (
                    this.Turnover == input.Turnover ||
                    this.Turnover.Equals(input.Turnover)
                ) && 
                (
                    this.Vwap == input.Vwap ||
                    this.Vwap.Equals(input.Vwap)
                ) && 
                (
                    this.TradeCount == input.TradeCount ||
                    this.TradeCount.Equals(input.TradeCount)
                ) && 
                (
                    this.BlockTradeCount == input.BlockTradeCount ||
                    this.BlockTradeCount.Equals(input.BlockTradeCount)
                ) && 
                (
                    this.BlockCvol == input.BlockCvol ||
                    this.BlockCvol.Equals(input.BlockCvol)
                ) && 
                (
                    this.PrevClose == input.PrevClose ||
                    this.PrevClose.Equals(input.PrevClose)
                ) && 
                (
                    this.CloseDate == input.CloseDate ||
                    (this.CloseDate != null &&
                    this.CloseDate.Equals(input.CloseDate))
                ) && 
                (
                    this.PrevCloseUnadj == input.PrevCloseUnadj ||
                    this.PrevCloseUnadj.Equals(input.PrevCloseUnadj)
                ) && 
                (
                    this.PrevClose2 == input.PrevClose2 ||
                    this.PrevClose2.Equals(input.PrevClose2)
                ) && 
                (
                    this.PrevCloseUnadj2 == input.PrevCloseUnadj2 ||
                    this.PrevCloseUnadj2.Equals(input.PrevCloseUnadj2)
                ) && 
                (
                    this.LowerTradingBand == input.LowerTradingBand ||
                    this.LowerTradingBand.Equals(input.LowerTradingBand)
                ) && 
                (
                    this.UpperTradingBand == input.UpperTradingBand ||
                    this.UpperTradingBand.Equals(input.UpperTradingBand)
                ) && 
                (
                    this.BuyImbalance == input.BuyImbalance ||
                    this.BuyImbalance.Equals(input.BuyImbalance)
                ) && 
                (
                    this.SellImbalance == input.SellImbalance ||
                    this.SellImbalance.Equals(input.SellImbalance)
                ) && 
                (
                    this.NasBuyImbalance == input.NasBuyImbalance ||
                    this.NasBuyImbalance.Equals(input.NasBuyImbalance)
                ) && 
                (
                    this.NasSellImbalance == input.NasSellImbalance ||
                    this.NasSellImbalance.Equals(input.NasSellImbalance)
                ) && 
                (
                    this.Open == input.Open ||
                    this.Open.Equals(input.Open)
                ) && 
                (
                    this.High == input.High ||
                    this.High.Equals(input.High)
                ) && 
                (
                    this.Low == input.Low ||
                    this.Low.Equals(input.Low)
                ) && 
                (
                    this.Venue == input.Venue ||
                    (this.Venue != null &&
                    this.Venue.Equals(input.Venue))
                ) && 
                (
                    this.BuyId == input.BuyId ||
                    (this.BuyId != null &&
                    this.BuyId.Equals(input.BuyId))
                ) && 
                (
                    this.SellId == input.SellId ||
                    (this.SellId != null &&
                    this.SellId.Equals(input.SellId))
                ) && 
                (
                    this.AutoTradeVwap == input.AutoTradeVwap ||
                    this.AutoTradeVwap.Equals(input.AutoTradeVwap)
                ) && 
                (
                    this.AutoTradeCvol == input.AutoTradeCvol ||
                    this.AutoTradeCvol.Equals(input.AutoTradeCvol)
                ) && 
                (
                    this.AutoTradeCount == input.AutoTradeCount ||
                    this.AutoTradeCount.Equals(input.AutoTradeCount)
                ) && 
                (
                    this.ExDateStatus == input.ExDateStatus ||
                    (this.ExDateStatus != null &&
                    this.ExDateStatus.Equals(input.ExDateStatus))
                ) && 
                (
                    this.PremktNetChange == input.PremktNetChange ||
                    this.PremktNetChange.Equals(input.PremktNetChange)
                ) && 
                (
                    this.PremktPercentChange == input.PremktPercentChange ||
                    this.PremktPercentChange.Equals(input.PremktPercentChange)
                ) && 
                (
                    this.ClosingVol == input.ClosingVol ||
                    this.ClosingVol.Equals(input.ClosingVol)
                ) && 
                (
                    this.PrimaryMarket == input.PrimaryMarket ||
                    (this.PrimaryMarket != null &&
                    this.PrimaryMarket.Equals(input.PrimaryMarket))
                ) && 
                (
                    this.IsoCountryExchange == input.IsoCountryExchange ||
                    (this.IsoCountryExchange != null &&
                    this.IsoCountryExchange.Equals(input.IsoCountryExchange))
                ) && 
                (
                    this.PremktExch == input.PremktExch ||
                    (this.PremktExch != null &&
                    this.PremktExch.Equals(input.PremktExch))
                ) && 
                (
                    this.PostmktExch == input.PostmktExch ||
                    (this.PostmktExch != null &&
                    this.PostmktExch.Equals(input.PostmktExch))
                ) && 
                (
                    this.FrefSecurityType == input.FrefSecurityType ||
                    (this.FrefSecurityType != null &&
                    this.FrefSecurityType.Equals(input.FrefSecurityType))
                ) && 
                (
                    this.SecuritySubType == input.SecuritySubType ||
                    (this.SecuritySubType != null &&
                    this.SecuritySubType.Equals(input.SecuritySubType))
                ) && 
                (
                    this.PostmktNetChange == input.PostmktNetChange ||
                    this.PostmktNetChange.Equals(input.PostmktNetChange)
                ) && 
                (
                    this.PostmktPercentChange == input.PostmktPercentChange ||
                    this.PostmktPercentChange.Equals(input.PostmktPercentChange)
                ) && 
                (
                    this.Isin == input.Isin ||
                    (this.Isin != null &&
                    this.Isin.Equals(input.Isin))
                ) && 
                (
                    this.Cusip == input.Cusip ||
                    (this.Cusip != null &&
                    this.Cusip.Equals(input.Cusip))
                ) && 
                (
                    this.Sedol == input.Sedol ||
                    (this.Sedol != null &&
                    this.Sedol.Equals(input.Sedol))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.SharesOutstanding == input.SharesOutstanding ||
                    this.SharesOutstanding.Equals(input.SharesOutstanding)
                ) && 
                (
                    this.PriceCurrency == input.PriceCurrency ||
                    (this.PriceCurrency != null &&
                    this.PriceCurrency.Equals(input.PriceCurrency))
                ) && 
                (
                    this.SecurityStatus == input.SecurityStatus ||
                    (this.SecurityStatus != null &&
                    this.SecurityStatus.Equals(input.SecurityStatus))
                ) && 
                (
                    this.GmtOffset == input.GmtOffset ||
                    this.GmtOffset.Equals(input.GmtOffset)
                ) && 
                (
                    this.MarketSegment == input.MarketSegment ||
                    (this.MarketSegment != null &&
                    this.MarketSegment.Equals(input.MarketSegment))
                ) && 
                (
                    this.MarketSector == input.MarketSector ||
                    (this.MarketSector != null &&
                    this.MarketSector.Equals(input.MarketSector))
                ) && 
                (
                    this.Period == input.Period ||
                    (this.Period != null &&
                    this.Period.Equals(input.Period))
                ) && 
                (
                    this.CountryCode == input.CountryCode ||
                    (this.CountryCode != null &&
                    this.CountryCode.Equals(input.CountryCode))
                ) && 
                (
                    this.FinancialStatus == input.FinancialStatus ||
                    this.FinancialStatus.Equals(input.FinancialStatus)
                ) && 
                (
                    this.FactsetIndustry == input.FactsetIndustry ||
                    (this.FactsetIndustry != null &&
                    this.FactsetIndustry.Equals(input.FactsetIndustry))
                ) && 
                (
                    this.FactsetSector == input.FactsetSector ||
                    (this.FactsetSector != null &&
                    this.FactsetSector.Equals(input.FactsetSector))
                ) && 
                (
                    this.HaltInfo == input.HaltInfo ||
                    this.HaltInfo.Equals(input.HaltInfo)
                ) && 
                (
                    this.Homepage == input.Homepage ||
                    (this.Homepage != null &&
                    this.Homepage.Equals(input.Homepage))
                ) && 
                (
                    this.HaltDescription == input.HaltDescription ||
                    (this.HaltDescription != null &&
                    this.HaltDescription.Equals(input.HaltDescription))
                ) && 
                (
                    this.FeedCurrency == input.FeedCurrency ||
                    (this.FeedCurrency != null &&
                    this.FeedCurrency.Equals(input.FeedCurrency))
                ) && 
                (
                    this.CountryName == input.CountryName ||
                    (this.CountryName != null &&
                    this.CountryName.Equals(input.CountryName))
                ) && 
                (
                    this.OrderLotSize == input.OrderLotSize ||
                    this.OrderLotSize.Equals(input.OrderLotSize)
                ) && 
                (
                    this.TradeLotSize == input.TradeLotSize ||
                    this.TradeLotSize.Equals(input.TradeLotSize)
                ) && 
                (
                    this.TickSize == input.TickSize ||
                    this.TickSize.Equals(input.TickSize)
                ) && 
                (
                    this.TickGroup == input.TickGroup ||
                    (this.TickGroup != null &&
                    this.TickGroup.Equals(input.TickGroup))
                ) && 
                (
                    this.TickPilotEffDate == input.TickPilotEffDate ||
                    (this.TickPilotEffDate != null &&
                    this.TickPilotEffDate.Equals(input.TickPilotEffDate))
                ) && 
                (
                    this.Avg30DayVol == input.Avg30DayVol ||
                    this.Avg30DayVol.Equals(input.Avg30DayVol)
                ) && 
                (
                    this.Avg5DayVol == input.Avg5DayVol ||
                    this.Avg5DayVol.Equals(input.Avg5DayVol)
                ) && 
                (
                    this.High52Week == input.High52Week ||
                    this.High52Week.Equals(input.High52Week)
                ) && 
                (
                    this.Low52Week == input.Low52Week ||
                    this.Low52Week.Equals(input.Low52Week)
                ) && 
                (
                    this.High52WeekDate == input.High52WeekDate ||
                    (this.High52WeekDate != null &&
                    this.High52WeekDate.Equals(input.High52WeekDate))
                ) && 
                (
                    this.Low52WeekDate == input.Low52WeekDate ||
                    (this.Low52WeekDate != null &&
                    this.Low52WeekDate.Equals(input.Low52WeekDate))
                ) && 
                (
                    this.TradeCondition == input.TradeCondition ||
                    (this.TradeCondition != null &&
                    this.TradeCondition.Equals(input.TradeCondition))
                ) && 
                (
                    this.TotalReturn3M == input.TotalReturn3M ||
                    this.TotalReturn3M.Equals(input.TotalReturn3M)
                ) && 
                (
                    this.TotalReturn52W == input.TotalReturn52W ||
                    this.TotalReturn52W.Equals(input.TotalReturn52W)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Exchange != null)
                    hashCode = hashCode * 59 + this.Exchange.GetHashCode();
                if (this.Product != null)
                    hashCode = hashCode * 59 + this.Product.GetHashCode();
                hashCode = hashCode * 59 + this.Bid.GetHashCode();
                if (this.BidDate != null)
                    hashCode = hashCode * 59 + this.BidDate.GetHashCode();
                hashCode = hashCode * 59 + this.BidTime.GetHashCode();
                hashCode = hashCode * 59 + this.BidVol.GetHashCode();
                if (this.BidTick != null)
                    hashCode = hashCode * 59 + this.BidTick.GetHashCode();
                hashCode = hashCode * 59 + this.BidClose.GetHashCode();
                if (this.BidCloseDate != null)
                    hashCode = hashCode * 59 + this.BidCloseDate.GetHashCode();
                hashCode = hashCode * 59 + this.BidCloseVol.GetHashCode();
                if (this.BidExch != null)
                    hashCode = hashCode * 59 + this.BidExch.GetHashCode();
                hashCode = hashCode * 59 + this.Ask.GetHashCode();
                if (this.AskDate != null)
                    hashCode = hashCode * 59 + this.AskDate.GetHashCode();
                hashCode = hashCode * 59 + this.AskTime.GetHashCode();
                hashCode = hashCode * 59 + this.AskVol.GetHashCode();
                hashCode = hashCode * 59 + this.AskClose.GetHashCode();
                if (this.AskCloseDate != null)
                    hashCode = hashCode * 59 + this.AskCloseDate.GetHashCode();
                hashCode = hashCode * 59 + this.AskCloseVol.GetHashCode();
                if (this.AskExch != null)
                    hashCode = hashCode * 59 + this.AskExch.GetHashCode();
                hashCode = hashCode * 59 + this.ShortSaleIndicator.GetHashCode();
                if (this.QuoteCondition != null)
                    hashCode = hashCode * 59 + this.QuoteCondition.GetHashCode();
                hashCode = hashCode * 59 + this.LastPrice.GetHashCode();
                if (this.LastDate != null)
                    hashCode = hashCode * 59 + this.LastDate.GetHashCode();
                hashCode = hashCode * 59 + this.LastTime.GetHashCode();
                hashCode = hashCode * 59 + this.LastVol.GetHashCode();
                if (this.LastTick != null)
                    hashCode = hashCode * 59 + this.LastTick.GetHashCode();
                hashCode = hashCode * 59 + this.OfficialClose.GetHashCode();
                hashCode = hashCode * 59 + this.OfficialCloseTime.GetHashCode();
                if (this.LastExch != null)
                    hashCode = hashCode * 59 + this.LastExch.GetHashCode();
                hashCode = hashCode * 59 + this.Settlement.GetHashCode();
                hashCode = hashCode * 59 + this.TradedPrice.GetHashCode();
                if (this.TradedDate != null)
                    hashCode = hashCode * 59 + this.TradedDate.GetHashCode();
                hashCode = hashCode * 59 + this.TradedTime.GetHashCode();
                hashCode = hashCode * 59 + this.TradedVol.GetHashCode();
                if (this.TradedCondition != null)
                    hashCode = hashCode * 59 + this.TradedCondition.GetHashCode();
                hashCode = hashCode * 59 + this.NetChange.GetHashCode();
                hashCode = hashCode * 59 + this.PercentChange.GetHashCode();
                hashCode = hashCode * 59 + this.PremktPrice.GetHashCode();
                hashCode = hashCode * 59 + this.PremktTime.GetHashCode();
                hashCode = hashCode * 59 + this.PremktVol.GetHashCode();
                hashCode = hashCode * 59 + this.PremktCVol.GetHashCode();
                hashCode = hashCode * 59 + this.PostmktPrice.GetHashCode();
                hashCode = hashCode * 59 + this.PostmktTime.GetHashCode();
                hashCode = hashCode * 59 + this.PostmktVol.GetHashCode();
                hashCode = hashCode * 59 + this.PostmktCvol.GetHashCode();
                hashCode = hashCode * 59 + this.OffbookCumVol.GetHashCode();
                hashCode = hashCode * 59 + this.OfficialBidClose.GetHashCode();
                hashCode = hashCode * 59 + this.OfficialAskClose.GetHashCode();
                if (this.MidDate != null)
                    hashCode = hashCode * 59 + this.MidDate.GetHashCode();
                hashCode = hashCode * 59 + this.MidTime.GetHashCode();
                hashCode = hashCode * 59 + this.Cvol.GetHashCode();
                hashCode = hashCode * 59 + this.Turnover.GetHashCode();
                hashCode = hashCode * 59 + this.Vwap.GetHashCode();
                hashCode = hashCode * 59 + this.TradeCount.GetHashCode();
                hashCode = hashCode * 59 + this.BlockTradeCount.GetHashCode();
                hashCode = hashCode * 59 + this.BlockCvol.GetHashCode();
                hashCode = hashCode * 59 + this.PrevClose.GetHashCode();
                if (this.CloseDate != null)
                    hashCode = hashCode * 59 + this.CloseDate.GetHashCode();
                hashCode = hashCode * 59 + this.PrevCloseUnadj.GetHashCode();
                hashCode = hashCode * 59 + this.PrevClose2.GetHashCode();
                hashCode = hashCode * 59 + this.PrevCloseUnadj2.GetHashCode();
                hashCode = hashCode * 59 + this.LowerTradingBand.GetHashCode();
                hashCode = hashCode * 59 + this.UpperTradingBand.GetHashCode();
                hashCode = hashCode * 59 + this.BuyImbalance.GetHashCode();
                hashCode = hashCode * 59 + this.SellImbalance.GetHashCode();
                hashCode = hashCode * 59 + this.NasBuyImbalance.GetHashCode();
                hashCode = hashCode * 59 + this.NasSellImbalance.GetHashCode();
                hashCode = hashCode * 59 + this.Open.GetHashCode();
                hashCode = hashCode * 59 + this.High.GetHashCode();
                hashCode = hashCode * 59 + this.Low.GetHashCode();
                if (this.Venue != null)
                    hashCode = hashCode * 59 + this.Venue.GetHashCode();
                if (this.BuyId != null)
                    hashCode = hashCode * 59 + this.BuyId.GetHashCode();
                if (this.SellId != null)
                    hashCode = hashCode * 59 + this.SellId.GetHashCode();
                hashCode = hashCode * 59 + this.AutoTradeVwap.GetHashCode();
                hashCode = hashCode * 59 + this.AutoTradeCvol.GetHashCode();
                hashCode = hashCode * 59 + this.AutoTradeCount.GetHashCode();
                if (this.ExDateStatus != null)
                    hashCode = hashCode * 59 + this.ExDateStatus.GetHashCode();
                hashCode = hashCode * 59 + this.PremktNetChange.GetHashCode();
                hashCode = hashCode * 59 + this.PremktPercentChange.GetHashCode();
                hashCode = hashCode * 59 + this.ClosingVol.GetHashCode();
                if (this.PrimaryMarket != null)
                    hashCode = hashCode * 59 + this.PrimaryMarket.GetHashCode();
                if (this.IsoCountryExchange != null)
                    hashCode = hashCode * 59 + this.IsoCountryExchange.GetHashCode();
                if (this.PremktExch != null)
                    hashCode = hashCode * 59 + this.PremktExch.GetHashCode();
                if (this.PostmktExch != null)
                    hashCode = hashCode * 59 + this.PostmktExch.GetHashCode();
                if (this.FrefSecurityType != null)
                    hashCode = hashCode * 59 + this.FrefSecurityType.GetHashCode();
                if (this.SecuritySubType != null)
                    hashCode = hashCode * 59 + this.SecuritySubType.GetHashCode();
                hashCode = hashCode * 59 + this.PostmktNetChange.GetHashCode();
                hashCode = hashCode * 59 + this.PostmktPercentChange.GetHashCode();
                if (this.Isin != null)
                    hashCode = hashCode * 59 + this.Isin.GetHashCode();
                if (this.Cusip != null)
                    hashCode = hashCode * 59 + this.Cusip.GetHashCode();
                if (this.Sedol != null)
                    hashCode = hashCode * 59 + this.Sedol.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                hashCode = hashCode * 59 + this.SharesOutstanding.GetHashCode();
                if (this.PriceCurrency != null)
                    hashCode = hashCode * 59 + this.PriceCurrency.GetHashCode();
                if (this.SecurityStatus != null)
                    hashCode = hashCode * 59 + this.SecurityStatus.GetHashCode();
                hashCode = hashCode * 59 + this.GmtOffset.GetHashCode();
                if (this.MarketSegment != null)
                    hashCode = hashCode * 59 + this.MarketSegment.GetHashCode();
                if (this.MarketSector != null)
                    hashCode = hashCode * 59 + this.MarketSector.GetHashCode();
                if (this.Period != null)
                    hashCode = hashCode * 59 + this.Period.GetHashCode();
                if (this.CountryCode != null)
                    hashCode = hashCode * 59 + this.CountryCode.GetHashCode();
                hashCode = hashCode * 59 + this.FinancialStatus.GetHashCode();
                if (this.FactsetIndustry != null)
                    hashCode = hashCode * 59 + this.FactsetIndustry.GetHashCode();
                if (this.FactsetSector != null)
                    hashCode = hashCode * 59 + this.FactsetSector.GetHashCode();
                hashCode = hashCode * 59 + this.HaltInfo.GetHashCode();
                if (this.Homepage != null)
                    hashCode = hashCode * 59 + this.Homepage.GetHashCode();
                if (this.HaltDescription != null)
                    hashCode = hashCode * 59 + this.HaltDescription.GetHashCode();
                if (this.FeedCurrency != null)
                    hashCode = hashCode * 59 + this.FeedCurrency.GetHashCode();
                if (this.CountryName != null)
                    hashCode = hashCode * 59 + this.CountryName.GetHashCode();
                hashCode = hashCode * 59 + this.OrderLotSize.GetHashCode();
                hashCode = hashCode * 59 + this.TradeLotSize.GetHashCode();
                hashCode = hashCode * 59 + this.TickSize.GetHashCode();
                if (this.TickGroup != null)
                    hashCode = hashCode * 59 + this.TickGroup.GetHashCode();
                if (this.TickPilotEffDate != null)
                    hashCode = hashCode * 59 + this.TickPilotEffDate.GetHashCode();
                hashCode = hashCode * 59 + this.Avg30DayVol.GetHashCode();
                hashCode = hashCode * 59 + this.Avg5DayVol.GetHashCode();
                hashCode = hashCode * 59 + this.High52Week.GetHashCode();
                hashCode = hashCode * 59 + this.Low52Week.GetHashCode();
                if (this.High52WeekDate != null)
                    hashCode = hashCode * 59 + this.High52WeekDate.GetHashCode();
                if (this.Low52WeekDate != null)
                    hashCode = hashCode * 59 + this.Low52WeekDate.GetHashCode();
                if (this.TradeCondition != null)
                    hashCode = hashCode * 59 + this.TradeCondition.GetHashCode();
                hashCode = hashCode * 59 + this.TotalReturn3M.GetHashCode();
                hashCode = hashCode * 59 + this.TotalReturn52W.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
