/*
 * Prime Developer Trial
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using FactSet.SDK.RecommendationListAPIforDigitalPortals.Client;
using FactSet.SDK.RecommendationListAPIforDigitalPortals.Model;
using FactSet.SDK.Utils.Authentication;

namespace FactSet.SDK.RecommendationListAPIforDigitalPortals.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IRecommendationListApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Attributes of a single list.
        /// </summary>
        /// <remarks>
        /// Attributes of a single list, including data about its active revision.
        /// </remarks>
        /// <exception cref="FactSet.SDK.RecommendationListAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of the list.</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="language">ISO 639-1 code of the language. (optional)</param>
        /// <returns>InlineResponse200</returns>
        InlineResponse200 GetRecommendationListGet(decimal id, List<string> attributes = default(List<string>), string language = default(string));

        /// <summary>
        /// Attributes of a single list.
        /// </summary>
        /// <remarks>
        /// Attributes of a single list, including data about its active revision.
        /// </remarks>
        /// <exception cref="FactSet.SDK.RecommendationListAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of the list.</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="language">ISO 639-1 code of the language. (optional)</param>
        /// <returns>ApiResponse of InlineResponse200</returns>
        ApiResponse<InlineResponse200> GetRecommendationListGetWithHttpInfo(decimal id, List<string> attributes = default(List<string>), string language = default(string));
        /// <summary>
        /// List of elements of a given revision.
        /// </summary>
        /// <remarks>
        /// List of elements of a given revision.
        /// </remarks>
        /// <exception cref="FactSet.SDK.RecommendationListAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idRevision">Identifier of the revision.</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="language">ISO 639-1 code of the language. (optional)</param>
        /// <returns>InlineResponse2005</returns>
        InlineResponse2005 GetRecommendationListRevisionElementList(decimal idRevision, List<string> attributes = default(List<string>), string language = default(string));

        /// <summary>
        /// List of elements of a given revision.
        /// </summary>
        /// <remarks>
        /// List of elements of a given revision.
        /// </remarks>
        /// <exception cref="FactSet.SDK.RecommendationListAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idRevision">Identifier of the revision.</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="language">ISO 639-1 code of the language. (optional)</param>
        /// <returns>ApiResponse of InlineResponse2005</returns>
        ApiResponse<InlineResponse2005> GetRecommendationListRevisionElementListWithHttpInfo(decimal idRevision, List<string> attributes = default(List<string>), string language = default(string));
        /// <summary>
        /// Attributes of a single revision.
        /// </summary>
        /// <remarks>
        /// Attributes of a single revision.
        /// </remarks>
        /// <exception cref="FactSet.SDK.RecommendationListAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of the revision.</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="language">ISO 639-1 code of the language. (optional)</param>
        /// <returns>InlineResponse2002</returns>
        InlineResponse2002 GetRecommendationListRevisionGet(decimal id, List<string> attributes = default(List<string>), string language = default(string));

        /// <summary>
        /// Attributes of a single revision.
        /// </summary>
        /// <remarks>
        /// Attributes of a single revision.
        /// </remarks>
        /// <exception cref="FactSet.SDK.RecommendationListAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of the revision.</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="language">ISO 639-1 code of the language. (optional)</param>
        /// <returns>ApiResponse of InlineResponse2002</returns>
        ApiResponse<InlineResponse2002> GetRecommendationListRevisionGetWithHttpInfo(decimal id, List<string> attributes = default(List<string>), string language = default(string));
        /// <summary>
        /// Search for revisions of a recommendation list.
        /// </summary>
        /// <remarks>
        /// Search for revisions of a recommendation list.
        /// </remarks>
        /// <exception cref="FactSet.SDK.RecommendationListAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idNotation">Restrict the search to revisions containing an element associated with the identified notation. (optional)</param>
        /// <param name="idInstrument">Restrict the search to revisions pointing to the identified instrument. (optional)</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="language">ISO 639-1 code of the language. (optional)</param>
        /// <returns>InlineResponse2004</returns>
        InlineResponse2004 GetRecommendationListRevisionSearch(string idNotation = default(string), string idInstrument = default(string), List<string> attributes = default(List<string>), string language = default(string));

        /// <summary>
        /// Search for revisions of a recommendation list.
        /// </summary>
        /// <remarks>
        /// Search for revisions of a recommendation list.
        /// </remarks>
        /// <exception cref="FactSet.SDK.RecommendationListAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idNotation">Restrict the search to revisions containing an element associated with the identified notation. (optional)</param>
        /// <param name="idInstrument">Restrict the search to revisions pointing to the identified instrument. (optional)</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="language">ISO 639-1 code of the language. (optional)</param>
        /// <returns>ApiResponse of InlineResponse2004</returns>
        ApiResponse<InlineResponse2004> GetRecommendationListRevisionSearchWithHttpInfo(string idNotation = default(string), string idInstrument = default(string), List<string> attributes = default(List<string>), string language = default(string));
        /// <summary>
        /// Search for recommendation lists.
        /// </summary>
        /// <remarks>
        /// Search for recommendation lists, delivering an array of recommendation lists matching the specified filter criteria. The data provided for each recommendation list includes the currently active revision (or null in case no active revision exists).
        /// </remarks>
        /// <exception cref="FactSet.SDK.RecommendationListAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Restricts the search to recommendation lists, which contain the provided string in their name attribute. The filter is a case-insensitive substring match. (optional)</param>
        /// <param name="onlyActive">Restrict the search to recommendation lists, which are currently active (e.g., current date is before the recommendation list&#39;s activeRange.end date). If set to false, recommendation lists will be returned regardless of their state. (optional)</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="language">ISO 639-1 code of the language. (optional)</param>
        /// <returns>InlineResponse2001</returns>
        InlineResponse2001 GetRecommendationListSearch(string name = default(string), bool? onlyActive = default(bool?), List<string> attributes = default(List<string>), string language = default(string));

        /// <summary>
        /// Search for recommendation lists.
        /// </summary>
        /// <remarks>
        /// Search for recommendation lists, delivering an array of recommendation lists matching the specified filter criteria. The data provided for each recommendation list includes the currently active revision (or null in case no active revision exists).
        /// </remarks>
        /// <exception cref="FactSet.SDK.RecommendationListAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Restricts the search to recommendation lists, which contain the provided string in their name attribute. The filter is a case-insensitive substring match. (optional)</param>
        /// <param name="onlyActive">Restrict the search to recommendation lists, which are currently active (e.g., current date is before the recommendation list&#39;s activeRange.end date). If set to false, recommendation lists will be returned regardless of their state. (optional)</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="language">ISO 639-1 code of the language. (optional)</param>
        /// <returns>ApiResponse of InlineResponse2001</returns>
        ApiResponse<InlineResponse2001> GetRecommendationListSearchWithHttpInfo(string name = default(string), bool? onlyActive = default(bool?), List<string> attributes = default(List<string>), string language = default(string));
        /// <summary>
        /// List of revisions of a recommendation list.
        /// </summary>
        /// <remarks>
        /// List of revisions of a recommendation list, excluding the elements of each revision.
        /// </remarks>
        /// <exception cref="FactSet.SDK.RecommendationListAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>InlineResponse2003</returns>
        InlineResponse2003 PostRecommendationListRevisionList(InlineObject body);

        /// <summary>
        /// List of revisions of a recommendation list.
        /// </summary>
        /// <remarks>
        /// List of revisions of a recommendation list, excluding the elements of each revision.
        /// </remarks>
        /// <exception cref="FactSet.SDK.RecommendationListAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of InlineResponse2003</returns>
        ApiResponse<InlineResponse2003> PostRecommendationListRevisionListWithHttpInfo(InlineObject body);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IRecommendationListApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Attributes of a single list.
        /// </summary>
        /// <remarks>
        /// Attributes of a single list, including data about its active revision.
        /// </remarks>
        /// <exception cref="FactSet.SDK.RecommendationListAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of the list.</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="language">ISO 639-1 code of the language. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse200</returns>
        System.Threading.Tasks.Task<InlineResponse200> GetRecommendationListGetAsync(decimal id, List<string> attributes = default(List<string>), string language = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Attributes of a single list.
        /// </summary>
        /// <remarks>
        /// Attributes of a single list, including data about its active revision.
        /// </remarks>
        /// <exception cref="FactSet.SDK.RecommendationListAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of the list.</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="language">ISO 639-1 code of the language. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse200)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse200>> GetRecommendationListGetWithHttpInfoAsync(decimal id, List<string> attributes = default(List<string>), string language = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// List of elements of a given revision.
        /// </summary>
        /// <remarks>
        /// List of elements of a given revision.
        /// </remarks>
        /// <exception cref="FactSet.SDK.RecommendationListAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idRevision">Identifier of the revision.</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="language">ISO 639-1 code of the language. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse2005</returns>
        System.Threading.Tasks.Task<InlineResponse2005> GetRecommendationListRevisionElementListAsync(decimal idRevision, List<string> attributes = default(List<string>), string language = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// List of elements of a given revision.
        /// </summary>
        /// <remarks>
        /// List of elements of a given revision.
        /// </remarks>
        /// <exception cref="FactSet.SDK.RecommendationListAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idRevision">Identifier of the revision.</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="language">ISO 639-1 code of the language. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse2005)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse2005>> GetRecommendationListRevisionElementListWithHttpInfoAsync(decimal idRevision, List<string> attributes = default(List<string>), string language = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Attributes of a single revision.
        /// </summary>
        /// <remarks>
        /// Attributes of a single revision.
        /// </remarks>
        /// <exception cref="FactSet.SDK.RecommendationListAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of the revision.</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="language">ISO 639-1 code of the language. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse2002</returns>
        System.Threading.Tasks.Task<InlineResponse2002> GetRecommendationListRevisionGetAsync(decimal id, List<string> attributes = default(List<string>), string language = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Attributes of a single revision.
        /// </summary>
        /// <remarks>
        /// Attributes of a single revision.
        /// </remarks>
        /// <exception cref="FactSet.SDK.RecommendationListAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of the revision.</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="language">ISO 639-1 code of the language. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse2002)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse2002>> GetRecommendationListRevisionGetWithHttpInfoAsync(decimal id, List<string> attributes = default(List<string>), string language = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Search for revisions of a recommendation list.
        /// </summary>
        /// <remarks>
        /// Search for revisions of a recommendation list.
        /// </remarks>
        /// <exception cref="FactSet.SDK.RecommendationListAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idNotation">Restrict the search to revisions containing an element associated with the identified notation. (optional)</param>
        /// <param name="idInstrument">Restrict the search to revisions pointing to the identified instrument. (optional)</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="language">ISO 639-1 code of the language. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse2004</returns>
        System.Threading.Tasks.Task<InlineResponse2004> GetRecommendationListRevisionSearchAsync(string idNotation = default(string), string idInstrument = default(string), List<string> attributes = default(List<string>), string language = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Search for revisions of a recommendation list.
        /// </summary>
        /// <remarks>
        /// Search for revisions of a recommendation list.
        /// </remarks>
        /// <exception cref="FactSet.SDK.RecommendationListAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idNotation">Restrict the search to revisions containing an element associated with the identified notation. (optional)</param>
        /// <param name="idInstrument">Restrict the search to revisions pointing to the identified instrument. (optional)</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="language">ISO 639-1 code of the language. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse2004)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse2004>> GetRecommendationListRevisionSearchWithHttpInfoAsync(string idNotation = default(string), string idInstrument = default(string), List<string> attributes = default(List<string>), string language = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Search for recommendation lists.
        /// </summary>
        /// <remarks>
        /// Search for recommendation lists, delivering an array of recommendation lists matching the specified filter criteria. The data provided for each recommendation list includes the currently active revision (or null in case no active revision exists).
        /// </remarks>
        /// <exception cref="FactSet.SDK.RecommendationListAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Restricts the search to recommendation lists, which contain the provided string in their name attribute. The filter is a case-insensitive substring match. (optional)</param>
        /// <param name="onlyActive">Restrict the search to recommendation lists, which are currently active (e.g., current date is before the recommendation list&#39;s activeRange.end date). If set to false, recommendation lists will be returned regardless of their state. (optional)</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="language">ISO 639-1 code of the language. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse2001</returns>
        System.Threading.Tasks.Task<InlineResponse2001> GetRecommendationListSearchAsync(string name = default(string), bool? onlyActive = default(bool?), List<string> attributes = default(List<string>), string language = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Search for recommendation lists.
        /// </summary>
        /// <remarks>
        /// Search for recommendation lists, delivering an array of recommendation lists matching the specified filter criteria. The data provided for each recommendation list includes the currently active revision (or null in case no active revision exists).
        /// </remarks>
        /// <exception cref="FactSet.SDK.RecommendationListAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Restricts the search to recommendation lists, which contain the provided string in their name attribute. The filter is a case-insensitive substring match. (optional)</param>
        /// <param name="onlyActive">Restrict the search to recommendation lists, which are currently active (e.g., current date is before the recommendation list&#39;s activeRange.end date). If set to false, recommendation lists will be returned regardless of their state. (optional)</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="language">ISO 639-1 code of the language. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse2001)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse2001>> GetRecommendationListSearchWithHttpInfoAsync(string name = default(string), bool? onlyActive = default(bool?), List<string> attributes = default(List<string>), string language = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// List of revisions of a recommendation list.
        /// </summary>
        /// <remarks>
        /// List of revisions of a recommendation list, excluding the elements of each revision.
        /// </remarks>
        /// <exception cref="FactSet.SDK.RecommendationListAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse2003</returns>
        System.Threading.Tasks.Task<InlineResponse2003> PostRecommendationListRevisionListAsync(InlineObject body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// List of revisions of a recommendation list.
        /// </summary>
        /// <remarks>
        /// List of revisions of a recommendation list, excluding the elements of each revision.
        /// </remarks>
        /// <exception cref="FactSet.SDK.RecommendationListAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse2003)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse2003>> PostRecommendationListRevisionListWithHttpInfoAsync(InlineObject body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IRecommendationListApi : IRecommendationListApiSync, IRecommendationListApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class RecommendationListApi : IRecommendationListApi
    {
        private FactSet.SDK.RecommendationListAPIforDigitalPortals.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="RecommendationListApi"/> class.
        /// </summary>
        /// <returns></returns>
        public RecommendationListApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="RecommendationListApi"/> class.
        /// </summary>
        /// <returns></returns>
        public RecommendationListApi(string basePath)
        {
            this.Configuration = FactSet.SDK.RecommendationListAPIforDigitalPortals.Client.Configuration.MergeConfigurations(
                FactSet.SDK.RecommendationListAPIforDigitalPortals.Client.GlobalConfiguration.Instance,
                new FactSet.SDK.RecommendationListAPIforDigitalPortals.Client.Configuration { BasePath = basePath }
            );
            this.Client = new FactSet.SDK.RecommendationListAPIforDigitalPortals.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new FactSet.SDK.RecommendationListAPIforDigitalPortals.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = FactSet.SDK.RecommendationListAPIforDigitalPortals.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="RecommendationListApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public RecommendationListApi(FactSet.SDK.RecommendationListAPIforDigitalPortals.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = FactSet.SDK.RecommendationListAPIforDigitalPortals.Client.Configuration.MergeConfigurations(
                FactSet.SDK.RecommendationListAPIforDigitalPortals.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new FactSet.SDK.RecommendationListAPIforDigitalPortals.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new FactSet.SDK.RecommendationListAPIforDigitalPortals.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = FactSet.SDK.RecommendationListAPIforDigitalPortals.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="RecommendationListApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public RecommendationListApi(FactSet.SDK.RecommendationListAPIforDigitalPortals.Client.ISynchronousClient client, FactSet.SDK.RecommendationListAPIforDigitalPortals.Client.IAsynchronousClient asyncClient, FactSet.SDK.RecommendationListAPIforDigitalPortals.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = FactSet.SDK.RecommendationListAPIforDigitalPortals.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public FactSet.SDK.RecommendationListAPIforDigitalPortals.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public FactSet.SDK.RecommendationListAPIforDigitalPortals.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public FactSet.SDK.RecommendationListAPIforDigitalPortals.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public FactSet.SDK.RecommendationListAPIforDigitalPortals.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Attributes of a single list. Attributes of a single list, including data about its active revision.
        /// </summary>
        /// <exception cref="FactSet.SDK.RecommendationListAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of the list.</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="language">ISO 639-1 code of the language. (optional)</param>
        /// <returns>InlineResponse200</returns>
        public InlineResponse200 GetRecommendationListGet(decimal id, List<string> attributes = default(List<string>), string language = default(string))
        {
            FactSet.SDK.RecommendationListAPIforDigitalPortals.Client.ApiResponse<InlineResponse200> localVarResponse = GetRecommendationListGetWithHttpInfo(id, attributes, language);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Attributes of a single list. Attributes of a single list, including data about its active revision.
        /// </summary>
        /// <exception cref="FactSet.SDK.RecommendationListAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of the list.</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="language">ISO 639-1 code of the language. (optional)</param>
        /// <returns>ApiResponse of InlineResponse200</returns>
        public FactSet.SDK.RecommendationListAPIforDigitalPortals.Client.ApiResponse<InlineResponse200> GetRecommendationListGetWithHttpInfo(decimal id, List<string> attributes = default(List<string>), string language = default(string))
        {
            FactSet.SDK.RecommendationListAPIforDigitalPortals.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.RecommendationListAPIforDigitalPortals.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.RecommendationListAPIforDigitalPortals.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = FactSet.SDK.RecommendationListAPIforDigitalPortals.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RecommendationListAPIforDigitalPortals.Client.ClientUtils.ParameterToMultiMap("", "id", id));
            if (attributes != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RecommendationListAPIforDigitalPortals.Client.ClientUtils.ParameterToMultiMap("csv", "_attributes", attributes));
            }
            if (language != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RecommendationListAPIforDigitalPortals.Client.ClientUtils.ParameterToMultiMap("", "_language", language));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.RecommendationListAPIforDigitalPortals.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<InlineResponse200>("/recommendationList/get", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetRecommendationListGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Attributes of a single list. Attributes of a single list, including data about its active revision.
        /// </summary>
        /// <exception cref="FactSet.SDK.RecommendationListAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of the list.</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="language">ISO 639-1 code of the language. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse200</returns>
        public async System.Threading.Tasks.Task<InlineResponse200> GetRecommendationListGetAsync(decimal id, List<string> attributes = default(List<string>), string language = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            FactSet.SDK.RecommendationListAPIforDigitalPortals.Client.ApiResponse<InlineResponse200> localVarResponse = await GetRecommendationListGetWithHttpInfoAsync(id, attributes, language, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Attributes of a single list. Attributes of a single list, including data about its active revision.
        /// </summary>
        /// <exception cref="FactSet.SDK.RecommendationListAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of the list.</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="language">ISO 639-1 code of the language. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse200)</returns>
        public async System.Threading.Tasks.Task<FactSet.SDK.RecommendationListAPIforDigitalPortals.Client.ApiResponse<InlineResponse200>> GetRecommendationListGetWithHttpInfoAsync(decimal id, List<string> attributes = default(List<string>), string language = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            FactSet.SDK.RecommendationListAPIforDigitalPortals.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.RecommendationListAPIforDigitalPortals.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = FactSet.SDK.RecommendationListAPIforDigitalPortals.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = FactSet.SDK.RecommendationListAPIforDigitalPortals.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RecommendationListAPIforDigitalPortals.Client.ClientUtils.ParameterToMultiMap("", "id", id));
            if (attributes != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RecommendationListAPIforDigitalPortals.Client.ClientUtils.ParameterToMultiMap("csv", "_attributes", attributes));
            }
            if (language != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RecommendationListAPIforDigitalPortals.Client.ClientUtils.ParameterToMultiMap("", "_language", language));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.RecommendationListAPIforDigitalPortals.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<InlineResponse200>("/recommendationList/get", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetRecommendationListGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List of elements of a given revision. List of elements of a given revision.
        /// </summary>
        /// <exception cref="FactSet.SDK.RecommendationListAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idRevision">Identifier of the revision.</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="language">ISO 639-1 code of the language. (optional)</param>
        /// <returns>InlineResponse2005</returns>
        public InlineResponse2005 GetRecommendationListRevisionElementList(decimal idRevision, List<string> attributes = default(List<string>), string language = default(string))
        {
            FactSet.SDK.RecommendationListAPIforDigitalPortals.Client.ApiResponse<InlineResponse2005> localVarResponse = GetRecommendationListRevisionElementListWithHttpInfo(idRevision, attributes, language);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List of elements of a given revision. List of elements of a given revision.
        /// </summary>
        /// <exception cref="FactSet.SDK.RecommendationListAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idRevision">Identifier of the revision.</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="language">ISO 639-1 code of the language. (optional)</param>
        /// <returns>ApiResponse of InlineResponse2005</returns>
        public FactSet.SDK.RecommendationListAPIforDigitalPortals.Client.ApiResponse<InlineResponse2005> GetRecommendationListRevisionElementListWithHttpInfo(decimal idRevision, List<string> attributes = default(List<string>), string language = default(string))
        {
            FactSet.SDK.RecommendationListAPIforDigitalPortals.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.RecommendationListAPIforDigitalPortals.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.RecommendationListAPIforDigitalPortals.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = FactSet.SDK.RecommendationListAPIforDigitalPortals.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RecommendationListAPIforDigitalPortals.Client.ClientUtils.ParameterToMultiMap("", "idRevision", idRevision));
            if (attributes != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RecommendationListAPIforDigitalPortals.Client.ClientUtils.ParameterToMultiMap("csv", "_attributes", attributes));
            }
            if (language != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RecommendationListAPIforDigitalPortals.Client.ClientUtils.ParameterToMultiMap("", "_language", language));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.RecommendationListAPIforDigitalPortals.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<InlineResponse2005>("/recommendationList/revision/element/list", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetRecommendationListRevisionElementList", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List of elements of a given revision. List of elements of a given revision.
        /// </summary>
        /// <exception cref="FactSet.SDK.RecommendationListAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idRevision">Identifier of the revision.</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="language">ISO 639-1 code of the language. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse2005</returns>
        public async System.Threading.Tasks.Task<InlineResponse2005> GetRecommendationListRevisionElementListAsync(decimal idRevision, List<string> attributes = default(List<string>), string language = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            FactSet.SDK.RecommendationListAPIforDigitalPortals.Client.ApiResponse<InlineResponse2005> localVarResponse = await GetRecommendationListRevisionElementListWithHttpInfoAsync(idRevision, attributes, language, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List of elements of a given revision. List of elements of a given revision.
        /// </summary>
        /// <exception cref="FactSet.SDK.RecommendationListAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idRevision">Identifier of the revision.</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="language">ISO 639-1 code of the language. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse2005)</returns>
        public async System.Threading.Tasks.Task<FactSet.SDK.RecommendationListAPIforDigitalPortals.Client.ApiResponse<InlineResponse2005>> GetRecommendationListRevisionElementListWithHttpInfoAsync(decimal idRevision, List<string> attributes = default(List<string>), string language = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            FactSet.SDK.RecommendationListAPIforDigitalPortals.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.RecommendationListAPIforDigitalPortals.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = FactSet.SDK.RecommendationListAPIforDigitalPortals.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = FactSet.SDK.RecommendationListAPIforDigitalPortals.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RecommendationListAPIforDigitalPortals.Client.ClientUtils.ParameterToMultiMap("", "idRevision", idRevision));
            if (attributes != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RecommendationListAPIforDigitalPortals.Client.ClientUtils.ParameterToMultiMap("csv", "_attributes", attributes));
            }
            if (language != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RecommendationListAPIforDigitalPortals.Client.ClientUtils.ParameterToMultiMap("", "_language", language));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.RecommendationListAPIforDigitalPortals.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<InlineResponse2005>("/recommendationList/revision/element/list", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetRecommendationListRevisionElementList", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Attributes of a single revision. Attributes of a single revision.
        /// </summary>
        /// <exception cref="FactSet.SDK.RecommendationListAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of the revision.</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="language">ISO 639-1 code of the language. (optional)</param>
        /// <returns>InlineResponse2002</returns>
        public InlineResponse2002 GetRecommendationListRevisionGet(decimal id, List<string> attributes = default(List<string>), string language = default(string))
        {
            FactSet.SDK.RecommendationListAPIforDigitalPortals.Client.ApiResponse<InlineResponse2002> localVarResponse = GetRecommendationListRevisionGetWithHttpInfo(id, attributes, language);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Attributes of a single revision. Attributes of a single revision.
        /// </summary>
        /// <exception cref="FactSet.SDK.RecommendationListAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of the revision.</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="language">ISO 639-1 code of the language. (optional)</param>
        /// <returns>ApiResponse of InlineResponse2002</returns>
        public FactSet.SDK.RecommendationListAPIforDigitalPortals.Client.ApiResponse<InlineResponse2002> GetRecommendationListRevisionGetWithHttpInfo(decimal id, List<string> attributes = default(List<string>), string language = default(string))
        {
            FactSet.SDK.RecommendationListAPIforDigitalPortals.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.RecommendationListAPIforDigitalPortals.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.RecommendationListAPIforDigitalPortals.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = FactSet.SDK.RecommendationListAPIforDigitalPortals.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RecommendationListAPIforDigitalPortals.Client.ClientUtils.ParameterToMultiMap("", "id", id));
            if (attributes != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RecommendationListAPIforDigitalPortals.Client.ClientUtils.ParameterToMultiMap("csv", "_attributes", attributes));
            }
            if (language != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RecommendationListAPIforDigitalPortals.Client.ClientUtils.ParameterToMultiMap("", "_language", language));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.RecommendationListAPIforDigitalPortals.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<InlineResponse2002>("/recommendationList/revision/get", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetRecommendationListRevisionGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Attributes of a single revision. Attributes of a single revision.
        /// </summary>
        /// <exception cref="FactSet.SDK.RecommendationListAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of the revision.</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="language">ISO 639-1 code of the language. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse2002</returns>
        public async System.Threading.Tasks.Task<InlineResponse2002> GetRecommendationListRevisionGetAsync(decimal id, List<string> attributes = default(List<string>), string language = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            FactSet.SDK.RecommendationListAPIforDigitalPortals.Client.ApiResponse<InlineResponse2002> localVarResponse = await GetRecommendationListRevisionGetWithHttpInfoAsync(id, attributes, language, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Attributes of a single revision. Attributes of a single revision.
        /// </summary>
        /// <exception cref="FactSet.SDK.RecommendationListAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of the revision.</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="language">ISO 639-1 code of the language. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse2002)</returns>
        public async System.Threading.Tasks.Task<FactSet.SDK.RecommendationListAPIforDigitalPortals.Client.ApiResponse<InlineResponse2002>> GetRecommendationListRevisionGetWithHttpInfoAsync(decimal id, List<string> attributes = default(List<string>), string language = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            FactSet.SDK.RecommendationListAPIforDigitalPortals.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.RecommendationListAPIforDigitalPortals.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = FactSet.SDK.RecommendationListAPIforDigitalPortals.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = FactSet.SDK.RecommendationListAPIforDigitalPortals.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RecommendationListAPIforDigitalPortals.Client.ClientUtils.ParameterToMultiMap("", "id", id));
            if (attributes != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RecommendationListAPIforDigitalPortals.Client.ClientUtils.ParameterToMultiMap("csv", "_attributes", attributes));
            }
            if (language != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RecommendationListAPIforDigitalPortals.Client.ClientUtils.ParameterToMultiMap("", "_language", language));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.RecommendationListAPIforDigitalPortals.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<InlineResponse2002>("/recommendationList/revision/get", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetRecommendationListRevisionGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Search for revisions of a recommendation list. Search for revisions of a recommendation list.
        /// </summary>
        /// <exception cref="FactSet.SDK.RecommendationListAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idNotation">Restrict the search to revisions containing an element associated with the identified notation. (optional)</param>
        /// <param name="idInstrument">Restrict the search to revisions pointing to the identified instrument. (optional)</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="language">ISO 639-1 code of the language. (optional)</param>
        /// <returns>InlineResponse2004</returns>
        public InlineResponse2004 GetRecommendationListRevisionSearch(string idNotation = default(string), string idInstrument = default(string), List<string> attributes = default(List<string>), string language = default(string))
        {
            FactSet.SDK.RecommendationListAPIforDigitalPortals.Client.ApiResponse<InlineResponse2004> localVarResponse = GetRecommendationListRevisionSearchWithHttpInfo(idNotation, idInstrument, attributes, language);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Search for revisions of a recommendation list. Search for revisions of a recommendation list.
        /// </summary>
        /// <exception cref="FactSet.SDK.RecommendationListAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idNotation">Restrict the search to revisions containing an element associated with the identified notation. (optional)</param>
        /// <param name="idInstrument">Restrict the search to revisions pointing to the identified instrument. (optional)</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="language">ISO 639-1 code of the language. (optional)</param>
        /// <returns>ApiResponse of InlineResponse2004</returns>
        public FactSet.SDK.RecommendationListAPIforDigitalPortals.Client.ApiResponse<InlineResponse2004> GetRecommendationListRevisionSearchWithHttpInfo(string idNotation = default(string), string idInstrument = default(string), List<string> attributes = default(List<string>), string language = default(string))
        {
            FactSet.SDK.RecommendationListAPIforDigitalPortals.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.RecommendationListAPIforDigitalPortals.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.RecommendationListAPIforDigitalPortals.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = FactSet.SDK.RecommendationListAPIforDigitalPortals.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (idNotation != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RecommendationListAPIforDigitalPortals.Client.ClientUtils.ParameterToMultiMap("", "idNotation", idNotation));
            }
            if (idInstrument != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RecommendationListAPIforDigitalPortals.Client.ClientUtils.ParameterToMultiMap("", "idInstrument", idInstrument));
            }
            if (attributes != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RecommendationListAPIforDigitalPortals.Client.ClientUtils.ParameterToMultiMap("csv", "_attributes", attributes));
            }
            if (language != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RecommendationListAPIforDigitalPortals.Client.ClientUtils.ParameterToMultiMap("", "_language", language));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.RecommendationListAPIforDigitalPortals.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<InlineResponse2004>("/recommendationList/revision/search", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetRecommendationListRevisionSearch", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Search for revisions of a recommendation list. Search for revisions of a recommendation list.
        /// </summary>
        /// <exception cref="FactSet.SDK.RecommendationListAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idNotation">Restrict the search to revisions containing an element associated with the identified notation. (optional)</param>
        /// <param name="idInstrument">Restrict the search to revisions pointing to the identified instrument. (optional)</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="language">ISO 639-1 code of the language. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse2004</returns>
        public async System.Threading.Tasks.Task<InlineResponse2004> GetRecommendationListRevisionSearchAsync(string idNotation = default(string), string idInstrument = default(string), List<string> attributes = default(List<string>), string language = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            FactSet.SDK.RecommendationListAPIforDigitalPortals.Client.ApiResponse<InlineResponse2004> localVarResponse = await GetRecommendationListRevisionSearchWithHttpInfoAsync(idNotation, idInstrument, attributes, language, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Search for revisions of a recommendation list. Search for revisions of a recommendation list.
        /// </summary>
        /// <exception cref="FactSet.SDK.RecommendationListAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idNotation">Restrict the search to revisions containing an element associated with the identified notation. (optional)</param>
        /// <param name="idInstrument">Restrict the search to revisions pointing to the identified instrument. (optional)</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="language">ISO 639-1 code of the language. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse2004)</returns>
        public async System.Threading.Tasks.Task<FactSet.SDK.RecommendationListAPIforDigitalPortals.Client.ApiResponse<InlineResponse2004>> GetRecommendationListRevisionSearchWithHttpInfoAsync(string idNotation = default(string), string idInstrument = default(string), List<string> attributes = default(List<string>), string language = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            FactSet.SDK.RecommendationListAPIforDigitalPortals.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.RecommendationListAPIforDigitalPortals.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = FactSet.SDK.RecommendationListAPIforDigitalPortals.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = FactSet.SDK.RecommendationListAPIforDigitalPortals.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (idNotation != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RecommendationListAPIforDigitalPortals.Client.ClientUtils.ParameterToMultiMap("", "idNotation", idNotation));
            }
            if (idInstrument != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RecommendationListAPIforDigitalPortals.Client.ClientUtils.ParameterToMultiMap("", "idInstrument", idInstrument));
            }
            if (attributes != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RecommendationListAPIforDigitalPortals.Client.ClientUtils.ParameterToMultiMap("csv", "_attributes", attributes));
            }
            if (language != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RecommendationListAPIforDigitalPortals.Client.ClientUtils.ParameterToMultiMap("", "_language", language));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.RecommendationListAPIforDigitalPortals.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<InlineResponse2004>("/recommendationList/revision/search", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetRecommendationListRevisionSearch", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Search for recommendation lists. Search for recommendation lists, delivering an array of recommendation lists matching the specified filter criteria. The data provided for each recommendation list includes the currently active revision (or null in case no active revision exists).
        /// </summary>
        /// <exception cref="FactSet.SDK.RecommendationListAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Restricts the search to recommendation lists, which contain the provided string in their name attribute. The filter is a case-insensitive substring match. (optional)</param>
        /// <param name="onlyActive">Restrict the search to recommendation lists, which are currently active (e.g., current date is before the recommendation list&#39;s activeRange.end date). If set to false, recommendation lists will be returned regardless of their state. (optional)</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="language">ISO 639-1 code of the language. (optional)</param>
        /// <returns>InlineResponse2001</returns>
        public InlineResponse2001 GetRecommendationListSearch(string name = default(string), bool? onlyActive = default(bool?), List<string> attributes = default(List<string>), string language = default(string))
        {
            FactSet.SDK.RecommendationListAPIforDigitalPortals.Client.ApiResponse<InlineResponse2001> localVarResponse = GetRecommendationListSearchWithHttpInfo(name, onlyActive, attributes, language);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Search for recommendation lists. Search for recommendation lists, delivering an array of recommendation lists matching the specified filter criteria. The data provided for each recommendation list includes the currently active revision (or null in case no active revision exists).
        /// </summary>
        /// <exception cref="FactSet.SDK.RecommendationListAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Restricts the search to recommendation lists, which contain the provided string in their name attribute. The filter is a case-insensitive substring match. (optional)</param>
        /// <param name="onlyActive">Restrict the search to recommendation lists, which are currently active (e.g., current date is before the recommendation list&#39;s activeRange.end date). If set to false, recommendation lists will be returned regardless of their state. (optional)</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="language">ISO 639-1 code of the language. (optional)</param>
        /// <returns>ApiResponse of InlineResponse2001</returns>
        public FactSet.SDK.RecommendationListAPIforDigitalPortals.Client.ApiResponse<InlineResponse2001> GetRecommendationListSearchWithHttpInfo(string name = default(string), bool? onlyActive = default(bool?), List<string> attributes = default(List<string>), string language = default(string))
        {
            FactSet.SDK.RecommendationListAPIforDigitalPortals.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.RecommendationListAPIforDigitalPortals.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.RecommendationListAPIforDigitalPortals.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = FactSet.SDK.RecommendationListAPIforDigitalPortals.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (name != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RecommendationListAPIforDigitalPortals.Client.ClientUtils.ParameterToMultiMap("", "name", name));
            }
            if (onlyActive != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RecommendationListAPIforDigitalPortals.Client.ClientUtils.ParameterToMultiMap("", "onlyActive", onlyActive));
            }
            if (attributes != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RecommendationListAPIforDigitalPortals.Client.ClientUtils.ParameterToMultiMap("csv", "_attributes", attributes));
            }
            if (language != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RecommendationListAPIforDigitalPortals.Client.ClientUtils.ParameterToMultiMap("", "_language", language));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.RecommendationListAPIforDigitalPortals.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<InlineResponse2001>("/recommendationList/search", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetRecommendationListSearch", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Search for recommendation lists. Search for recommendation lists, delivering an array of recommendation lists matching the specified filter criteria. The data provided for each recommendation list includes the currently active revision (or null in case no active revision exists).
        /// </summary>
        /// <exception cref="FactSet.SDK.RecommendationListAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Restricts the search to recommendation lists, which contain the provided string in their name attribute. The filter is a case-insensitive substring match. (optional)</param>
        /// <param name="onlyActive">Restrict the search to recommendation lists, which are currently active (e.g., current date is before the recommendation list&#39;s activeRange.end date). If set to false, recommendation lists will be returned regardless of their state. (optional)</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="language">ISO 639-1 code of the language. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse2001</returns>
        public async System.Threading.Tasks.Task<InlineResponse2001> GetRecommendationListSearchAsync(string name = default(string), bool? onlyActive = default(bool?), List<string> attributes = default(List<string>), string language = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            FactSet.SDK.RecommendationListAPIforDigitalPortals.Client.ApiResponse<InlineResponse2001> localVarResponse = await GetRecommendationListSearchWithHttpInfoAsync(name, onlyActive, attributes, language, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Search for recommendation lists. Search for recommendation lists, delivering an array of recommendation lists matching the specified filter criteria. The data provided for each recommendation list includes the currently active revision (or null in case no active revision exists).
        /// </summary>
        /// <exception cref="FactSet.SDK.RecommendationListAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Restricts the search to recommendation lists, which contain the provided string in their name attribute. The filter is a case-insensitive substring match. (optional)</param>
        /// <param name="onlyActive">Restrict the search to recommendation lists, which are currently active (e.g., current date is before the recommendation list&#39;s activeRange.end date). If set to false, recommendation lists will be returned regardless of their state. (optional)</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="language">ISO 639-1 code of the language. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse2001)</returns>
        public async System.Threading.Tasks.Task<FactSet.SDK.RecommendationListAPIforDigitalPortals.Client.ApiResponse<InlineResponse2001>> GetRecommendationListSearchWithHttpInfoAsync(string name = default(string), bool? onlyActive = default(bool?), List<string> attributes = default(List<string>), string language = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            FactSet.SDK.RecommendationListAPIforDigitalPortals.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.RecommendationListAPIforDigitalPortals.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = FactSet.SDK.RecommendationListAPIforDigitalPortals.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = FactSet.SDK.RecommendationListAPIforDigitalPortals.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (name != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RecommendationListAPIforDigitalPortals.Client.ClientUtils.ParameterToMultiMap("", "name", name));
            }
            if (onlyActive != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RecommendationListAPIforDigitalPortals.Client.ClientUtils.ParameterToMultiMap("", "onlyActive", onlyActive));
            }
            if (attributes != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RecommendationListAPIforDigitalPortals.Client.ClientUtils.ParameterToMultiMap("csv", "_attributes", attributes));
            }
            if (language != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RecommendationListAPIforDigitalPortals.Client.ClientUtils.ParameterToMultiMap("", "_language", language));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.RecommendationListAPIforDigitalPortals.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<InlineResponse2001>("/recommendationList/search", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetRecommendationListSearch", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List of revisions of a recommendation list. List of revisions of a recommendation list, excluding the elements of each revision.
        /// </summary>
        /// <exception cref="FactSet.SDK.RecommendationListAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>InlineResponse2003</returns>
        public InlineResponse2003 PostRecommendationListRevisionList(InlineObject body)
        {
            FactSet.SDK.RecommendationListAPIforDigitalPortals.Client.ApiResponse<InlineResponse2003> localVarResponse = PostRecommendationListRevisionListWithHttpInfo(body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List of revisions of a recommendation list. List of revisions of a recommendation list, excluding the elements of each revision.
        /// </summary>
        /// <exception cref="FactSet.SDK.RecommendationListAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of InlineResponse2003</returns>
        public FactSet.SDK.RecommendationListAPIforDigitalPortals.Client.ApiResponse<InlineResponse2003> PostRecommendationListRevisionListWithHttpInfo(InlineObject body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new FactSet.SDK.RecommendationListAPIforDigitalPortals.Client.ApiException(400, "Missing required parameter 'body' when calling RecommendationListApi->PostRecommendationListRevisionList");

            FactSet.SDK.RecommendationListAPIforDigitalPortals.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.RecommendationListAPIforDigitalPortals.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.RecommendationListAPIforDigitalPortals.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = FactSet.SDK.RecommendationListAPIforDigitalPortals.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.RecommendationListAPIforDigitalPortals.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<InlineResponse2003>("/recommendationList/revision/list", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostRecommendationListRevisionList", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List of revisions of a recommendation list. List of revisions of a recommendation list, excluding the elements of each revision.
        /// </summary>
        /// <exception cref="FactSet.SDK.RecommendationListAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse2003</returns>
        public async System.Threading.Tasks.Task<InlineResponse2003> PostRecommendationListRevisionListAsync(InlineObject body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            FactSet.SDK.RecommendationListAPIforDigitalPortals.Client.ApiResponse<InlineResponse2003> localVarResponse = await PostRecommendationListRevisionListWithHttpInfoAsync(body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List of revisions of a recommendation list. List of revisions of a recommendation list, excluding the elements of each revision.
        /// </summary>
        /// <exception cref="FactSet.SDK.RecommendationListAPIforDigitalPortals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse2003)</returns>
        public async System.Threading.Tasks.Task<FactSet.SDK.RecommendationListAPIforDigitalPortals.Client.ApiResponse<InlineResponse2003>> PostRecommendationListRevisionListWithHttpInfoAsync(InlineObject body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new FactSet.SDK.RecommendationListAPIforDigitalPortals.Client.ApiException(400, "Missing required parameter 'body' when calling RecommendationListApi->PostRecommendationListRevisionList");


            FactSet.SDK.RecommendationListAPIforDigitalPortals.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.RecommendationListAPIforDigitalPortals.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = FactSet.SDK.RecommendationListAPIforDigitalPortals.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = FactSet.SDK.RecommendationListAPIforDigitalPortals.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.RecommendationListAPIforDigitalPortals.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<InlineResponse2003>("/recommendationList/revision/list", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostRecommendationListRevisionList", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
