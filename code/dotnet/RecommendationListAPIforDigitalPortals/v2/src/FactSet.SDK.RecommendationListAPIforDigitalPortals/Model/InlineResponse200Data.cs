/*
 * Recommendation List API For Digital Portals
 *
 * A recommendation list is revision-controlled, with up to 5,000 revisions per recommendation list.  A recommendation list as of a given revision may optionally point to an instrument (e.g. an index) and contains a list of up to 1,000 elements, each referring to a security traded on a market (e.g. a financial product recommended by the bank). For listings that are not available in the Wealth Management platform, no information beyond a customer-defined name is available. Each element may optionally have a portfolio weight. Identifiers for revisions are globally unique.  See the Quotes API for Digital Portals for access to detailed price information.
 *
 * The version of the OpenAPI document: 2
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = FactSet.SDK.RecommendationListAPIforDigitalPortals.Client.OpenAPIDateConverter;

namespace FactSet.SDK.RecommendationListAPIforDigitalPortals.Model
{
    /// <summary>
    /// Details about the recommendation list.
    /// </summary>
    [DataContract(Name = "inline_response_200_data")]
    public partial class InlineResponse200Data : IEquatable<InlineResponse200Data>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="InlineResponse200Data" /> class.
        /// </summary>
        /// <param name="id">Identifier of the recommendation list..</param>
        /// <param name="name">Name of the recommendation list..</param>
        /// <param name="activeRange">activeRange.</param>
        /// <param name="numberRevisions">Number of all revisions of this recommendation list..</param>
        /// <param name="activeRevision">activeRevision.</param>
        public InlineResponse200Data(decimal id = default(decimal), string name = default(string), InlineResponse200DataActiveRange activeRange = default(InlineResponse200DataActiveRange), decimal numberRevisions = default(decimal), InlineResponse200DataActiveRevision activeRevision = default(InlineResponse200DataActiveRevision))
        {
            this.Id = id;
            this.Name = name;
            this.ActiveRange = activeRange;
            this.NumberRevisions = numberRevisions;
            this.ActiveRevision = activeRevision;
        }

        /// <summary>
        /// Identifier of the recommendation list.
        /// </summary>
        /// <value>Identifier of the recommendation list.</value>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public decimal Id { get; set; }

        /// <summary>
        /// Name of the recommendation list.
        /// </summary>
        /// <value>Name of the recommendation list.</value>
        [DataMember(Name = "name", EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets ActiveRange
        /// </summary>
        [DataMember(Name = "activeRange", EmitDefaultValue = false)]
        public InlineResponse200DataActiveRange ActiveRange { get; set; }

        /// <summary>
        /// Number of all revisions of this recommendation list.
        /// </summary>
        /// <value>Number of all revisions of this recommendation list.</value>
        [DataMember(Name = "numberRevisions", EmitDefaultValue = false)]
        public decimal NumberRevisions { get; set; }

        /// <summary>
        /// Gets or Sets ActiveRevision
        /// </summary>
        [DataMember(Name = "activeRevision", EmitDefaultValue = false)]
        public InlineResponse200DataActiveRevision ActiveRevision { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class InlineResponse200Data {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  ActiveRange: ").Append(ActiveRange).Append("\n");
            sb.Append("  NumberRevisions: ").Append(NumberRevisions).Append("\n");
            sb.Append("  ActiveRevision: ").Append(ActiveRevision).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as InlineResponse200Data);
        }

        /// <summary>
        /// Returns true if InlineResponse200Data instances are equal
        /// </summary>
        /// <param name="input">Instance of InlineResponse200Data to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(InlineResponse200Data input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Id == input.Id ||
                    this.Id.Equals(input.Id)
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.ActiveRange == input.ActiveRange ||
                    (this.ActiveRange != null &&
                    this.ActiveRange.Equals(input.ActiveRange))
                ) && 
                (
                    this.NumberRevisions == input.NumberRevisions ||
                    this.NumberRevisions.Equals(input.NumberRevisions)
                ) && 
                (
                    this.ActiveRevision == input.ActiveRevision ||
                    (this.ActiveRevision != null &&
                    this.ActiveRevision.Equals(input.ActiveRevision))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.Id.GetHashCode();
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                if (this.ActiveRange != null)
                {
                    hashCode = (hashCode * 59) + this.ActiveRange.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.NumberRevisions.GetHashCode();
                if (this.ActiveRevision != null)
                {
                    hashCode = (hashCode * 59) + this.ActiveRevision.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
