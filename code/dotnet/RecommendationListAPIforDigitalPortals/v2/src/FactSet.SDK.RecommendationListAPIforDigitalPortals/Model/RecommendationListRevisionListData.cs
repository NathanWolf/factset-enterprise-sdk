/*
 * Recommendation List API For Digital Portals
 *
 * A recommendation list is revision-controlled, with up to 5,000 revisions per recommendation list.  A recommendation list as of a given revision may optionally point to an instrument (e.g. an index) and contains a list of up to 1,000 elements, each referring to a security traded on a market (e.g. a financial product recommended by the bank). For listings that are not available in the Wealth Management platform, no information beyond a customer-defined name is available. Each element may optionally have a portfolio weight. Identifiers for revisions are globally unique.  See the Quotes API for Digital Portals for access to detailed price information.
 *
 * The version of the OpenAPI document: 2
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = FactSet.SDK.RecommendationListAPIforDigitalPortals.Client.OpenAPIDateConverter;

namespace FactSet.SDK.RecommendationListAPIforDigitalPortals.Model
{
    /// <summary>
    /// The data member contains the request&#39;s primary data.
    /// </summary>
    [DataContract(Name = "_recommendationList_revision_list_data")]
    public partial class RecommendationListRevisionListData : IEquatable<RecommendationListRevisionListData>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="RecommendationListRevisionListData" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected RecommendationListRevisionListData() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="RecommendationListRevisionListData" /> class.
        /// </summary>
        /// <param name="idList">Identifier of the recommendation list. (required).</param>
        /// <param name="idRevision">idRevision.</param>
        /// <param name="activeRange">activeRange.</param>
        public RecommendationListRevisionListData(decimal idList,List<decimal> idRevision = default(List<decimal>), RecommendationListRevisionListDataActiveRange activeRange = default(RecommendationListRevisionListDataActiveRange))
        {
            this.IdList = idList;
            this.IdRevision = idRevision;
            this.ActiveRange = activeRange;
        }

        /// <summary>
        /// Identifier of the recommendation list.
        /// </summary>
        /// <value>Identifier of the recommendation list.</value>
        [DataMember(Name = "idList", IsRequired = true, EmitDefaultValue = false)]
        public decimal IdList { get; set; }

        /// <summary>
        /// Gets or Sets IdRevision
        /// </summary>
        [DataMember(Name = "idRevision", EmitDefaultValue = false)]
        public List<decimal> IdRevision { get; set; }

        /// <summary>
        /// Gets or Sets ActiveRange
        /// </summary>
        [DataMember(Name = "activeRange", EmitDefaultValue = false)]
        public RecommendationListRevisionListDataActiveRange ActiveRange { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class RecommendationListRevisionListData {\n");
            sb.Append("  IdList: ").Append(IdList).Append("\n");
            sb.Append("  IdRevision: ").Append(IdRevision).Append("\n");
            sb.Append("  ActiveRange: ").Append(ActiveRange).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as RecommendationListRevisionListData);
        }

        /// <summary>
        /// Returns true if RecommendationListRevisionListData instances are equal
        /// </summary>
        /// <param name="input">Instance of RecommendationListRevisionListData to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(RecommendationListRevisionListData input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.IdList == input.IdList ||
                    this.IdList.Equals(input.IdList)
                ) && 
                (
                    this.IdRevision == input.IdRevision ||
                    this.IdRevision != null &&
                    input.IdRevision != null &&
                    this.IdRevision.SequenceEqual(input.IdRevision)
                ) && 
                (
                    this.ActiveRange == input.ActiveRange ||
                    (this.ActiveRange != null &&
                    this.ActiveRange.Equals(input.ActiveRange))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.IdList.GetHashCode();
                if (this.IdRevision != null)
                {
                    hashCode = (hashCode * 59) + this.IdRevision.GetHashCode();
                }
                if (this.ActiveRange != null)
                {
                    hashCode = (hashCode * 59) + this.ActiveRange.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
