/*
 * Prime Developer Trial
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = FactSet.SDK.RecommendationListAPIforDigitalPortals.Client.OpenAPIDateConverter;

namespace FactSet.SDK.RecommendationListAPIforDigitalPortals.Model
{
    /// <summary>
    /// InlineResponse2005Data
    /// </summary>
    [DataContract(Name = "inline_response_200_5_data")]
    public partial class InlineResponse2005Data : IEquatable<InlineResponse2005Data>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="InlineResponse2005Data" /> class.
        /// </summary>
        /// <param name="hasNotationData">Attributes referred to by the notation identifier, beyond notation.instrument.customName, are available.  If this flag is false, it indicates that some notation data for this element is no longer available because the notation may have expired. For answers without notation data, the members position, instrument.customName, weight, description and recommendationClass are retained..</param>
        /// <param name="position">Position of the element..</param>
        /// <param name="notation">notation.</param>
        /// <param name="description">description.</param>
        /// <param name="weight">Weight of this list element. If set for at least one list element, the sum off all weights of an element list must be 1..</param>
        /// <param name="recommendationClass">recommendationClass.</param>
        public InlineResponse2005Data(bool hasNotationData = default(bool), decimal position = default(decimal), InlineResponse2005Notation notation = default(InlineResponse2005Notation), InlineResponse2005Description description = default(InlineResponse2005Description), decimal weight = default(decimal), InlineResponse2005RecommendationClass recommendationClass = default(InlineResponse2005RecommendationClass))
        {
            this.HasNotationData = hasNotationData;
            this.Position = position;
            this.Notation = notation;
            this.Description = description;
            this.Weight = weight;
            this.RecommendationClass = recommendationClass;
        }

        /// <summary>
        /// Attributes referred to by the notation identifier, beyond notation.instrument.customName, are available.  If this flag is false, it indicates that some notation data for this element is no longer available because the notation may have expired. For answers without notation data, the members position, instrument.customName, weight, description and recommendationClass are retained.
        /// </summary>
        /// <value>Attributes referred to by the notation identifier, beyond notation.instrument.customName, are available.  If this flag is false, it indicates that some notation data for this element is no longer available because the notation may have expired. For answers without notation data, the members position, instrument.customName, weight, description and recommendationClass are retained.</value>
        [DataMember(Name = "hasNotationData", EmitDefaultValue = true)]
        public bool HasNotationData { get; set; }

        /// <summary>
        /// Position of the element.
        /// </summary>
        /// <value>Position of the element.</value>
        [DataMember(Name = "position", EmitDefaultValue = false)]
        public decimal Position { get; set; }

        /// <summary>
        /// Gets or Sets Notation
        /// </summary>
        [DataMember(Name = "notation", EmitDefaultValue = false)]
        public InlineResponse2005Notation Notation { get; set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name = "description", EmitDefaultValue = false)]
        public InlineResponse2005Description Description { get; set; }

        /// <summary>
        /// Weight of this list element. If set for at least one list element, the sum off all weights of an element list must be 1.
        /// </summary>
        /// <value>Weight of this list element. If set for at least one list element, the sum off all weights of an element list must be 1.</value>
        [DataMember(Name = "weight", EmitDefaultValue = false)]
        public decimal Weight { get; set; }

        /// <summary>
        /// Gets or Sets RecommendationClass
        /// </summary>
        [DataMember(Name = "recommendationClass", EmitDefaultValue = false)]
        public InlineResponse2005RecommendationClass RecommendationClass { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class InlineResponse2005Data {\n");
            sb.Append("  HasNotationData: ").Append(HasNotationData).Append("\n");
            sb.Append("  Position: ").Append(Position).Append("\n");
            sb.Append("  Notation: ").Append(Notation).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Weight: ").Append(Weight).Append("\n");
            sb.Append("  RecommendationClass: ").Append(RecommendationClass).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as InlineResponse2005Data);
        }

        /// <summary>
        /// Returns true if InlineResponse2005Data instances are equal
        /// </summary>
        /// <param name="input">Instance of InlineResponse2005Data to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(InlineResponse2005Data input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.HasNotationData == input.HasNotationData ||
                    this.HasNotationData.Equals(input.HasNotationData)
                ) && 
                (
                    this.Position == input.Position ||
                    this.Position.Equals(input.Position)
                ) && 
                (
                    this.Notation == input.Notation ||
                    (this.Notation != null &&
                    this.Notation.Equals(input.Notation))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.Weight == input.Weight ||
                    this.Weight.Equals(input.Weight)
                ) && 
                (
                    this.RecommendationClass == input.RecommendationClass ||
                    (this.RecommendationClass != null &&
                    this.RecommendationClass.Equals(input.RecommendationClass))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = hashCode * 59 + this.HasNotationData.GetHashCode();
                hashCode = hashCode * 59 + this.Position.GetHashCode();
                if (this.Notation != null)
                    hashCode = hashCode * 59 + this.Notation.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                hashCode = hashCode * 59 + this.Weight.GetHashCode();
                if (this.RecommendationClass != null)
                    hashCode = hashCode * 59 + this.RecommendationClass.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
