/*
 * Prime Developer Trial
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = FactSet.SDK.NewsAPIforDigitalPortals.Client.OpenAPIDateConverter;

namespace FactSet.SDK.NewsAPIforDigitalPortals.Model
{
    /// <summary>
    /// InlineResponse2002DataArticles
    /// </summary>
    [DataContract(Name = "inline_response_200_2_data_articles")]
    public partial class InlineResponse2002DataArticles : IEquatable<InlineResponse2002DataArticles>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="InlineResponse2002DataArticles" /> class.
        /// </summary>
        /// <param name="code">Identifier of the news article..</param>
        /// <param name="time">Date and time of the news article..</param>
        /// <param name="headline">Headline of the news article represented as text with HTML entity encoding but without HTML tags..</param>
        /// <param name="types">Types of news article. See endpoint &#x60;/news/article/type/list&#x60; for possible values..</param>
        /// <param name="language">language.</param>
        /// <param name="categories">Categories related to the news article. See endpoint &#x60;/category/list&#x60; for possible values..</param>
        public InlineResponse2002DataArticles(string code = default(string), string time = default(string), string headline = default(string), List<InlineResponse2001Types> types = default(List<InlineResponse2001Types>), InlineResponse2001Language language = default(InlineResponse2001Language), List<InlineResponse2001Categories> categories = default(List<InlineResponse2001Categories>))
        {
            this.Code = code;
            this.Time = time;
            this.Headline = headline;
            this.Types = types;
            this.Language = language;
            this.Categories = categories;
        }

        /// <summary>
        /// Identifier of the news article.
        /// </summary>
        /// <value>Identifier of the news article.</value>
        [DataMember(Name = "code", EmitDefaultValue = false)]
        public string Code { get; set; }

        /// <summary>
        /// Date and time of the news article.
        /// </summary>
        /// <value>Date and time of the news article.</value>
        [DataMember(Name = "time", EmitDefaultValue = false)]
        public string Time { get; set; }

        /// <summary>
        /// Headline of the news article represented as text with HTML entity encoding but without HTML tags.
        /// </summary>
        /// <value>Headline of the news article represented as text with HTML entity encoding but without HTML tags.</value>
        [DataMember(Name = "headline", EmitDefaultValue = false)]
        public string Headline { get; set; }

        /// <summary>
        /// Types of news article. See endpoint &#x60;/news/article/type/list&#x60; for possible values.
        /// </summary>
        /// <value>Types of news article. See endpoint &#x60;/news/article/type/list&#x60; for possible values.</value>
        [DataMember(Name = "types", EmitDefaultValue = false)]
        public List<InlineResponse2001Types> Types { get; set; }

        /// <summary>
        /// Gets or Sets Language
        /// </summary>
        [DataMember(Name = "language", EmitDefaultValue = false)]
        public InlineResponse2001Language Language { get; set; }

        /// <summary>
        /// Categories related to the news article. See endpoint &#x60;/category/list&#x60; for possible values.
        /// </summary>
        /// <value>Categories related to the news article. See endpoint &#x60;/category/list&#x60; for possible values.</value>
        [DataMember(Name = "categories", EmitDefaultValue = false)]
        public List<InlineResponse2001Categories> Categories { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class InlineResponse2002DataArticles {\n");
            sb.Append("  Code: ").Append(Code).Append("\n");
            sb.Append("  Time: ").Append(Time).Append("\n");
            sb.Append("  Headline: ").Append(Headline).Append("\n");
            sb.Append("  Types: ").Append(Types).Append("\n");
            sb.Append("  Language: ").Append(Language).Append("\n");
            sb.Append("  Categories: ").Append(Categories).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as InlineResponse2002DataArticles);
        }

        /// <summary>
        /// Returns true if InlineResponse2002DataArticles instances are equal
        /// </summary>
        /// <param name="input">Instance of InlineResponse2002DataArticles to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(InlineResponse2002DataArticles input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Code == input.Code ||
                    (this.Code != null &&
                    this.Code.Equals(input.Code))
                ) && 
                (
                    this.Time == input.Time ||
                    (this.Time != null &&
                    this.Time.Equals(input.Time))
                ) && 
                (
                    this.Headline == input.Headline ||
                    (this.Headline != null &&
                    this.Headline.Equals(input.Headline))
                ) && 
                (
                    this.Types == input.Types ||
                    this.Types != null &&
                    input.Types != null &&
                    this.Types.SequenceEqual(input.Types)
                ) && 
                (
                    this.Language == input.Language ||
                    (this.Language != null &&
                    this.Language.Equals(input.Language))
                ) && 
                (
                    this.Categories == input.Categories ||
                    this.Categories != null &&
                    input.Categories != null &&
                    this.Categories.SequenceEqual(input.Categories)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Code != null)
                    hashCode = hashCode * 59 + this.Code.GetHashCode();
                if (this.Time != null)
                    hashCode = hashCode * 59 + this.Time.GetHashCode();
                if (this.Headline != null)
                    hashCode = hashCode * 59 + this.Headline.GetHashCode();
                if (this.Types != null)
                    hashCode = hashCode * 59 + this.Types.GetHashCode();
                if (this.Language != null)
                    hashCode = hashCode * 59 + this.Language.GetHashCode();
                if (this.Categories != null)
                    hashCode = hashCode * 59 + this.Categories.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
