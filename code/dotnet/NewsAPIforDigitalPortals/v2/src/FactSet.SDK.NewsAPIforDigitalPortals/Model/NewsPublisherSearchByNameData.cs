/*
 * Prime Developer Trial
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = FactSet.SDK.NewsAPIforDigitalPortals.Client.OpenAPIDateConverter;

namespace FactSet.SDK.NewsAPIforDigitalPortals.Model
{
    /// <summary>
    /// The data member contains the request&#39;s primary data.
    /// </summary>
    [DataContract(Name = "_news_publisher_searchByName_data")]
    public partial class NewsPublisherSearchByNameData : IEquatable<NewsPublisherSearchByNameData>, IValidatableObject
    {
        /// <summary>
        /// The match type that is applied to the search.
        /// </summary>
        /// <value>The match type that is applied to the search.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum MatchTypeEnum
        {
            /// <summary>
            /// Enum Begins for value: begins
            /// </summary>
            [EnumMember(Value = "begins")]
            Begins = 1,

            /// <summary>
            /// Enum Ends for value: ends
            /// </summary>
            [EnumMember(Value = "ends")]
            Ends = 2,

            /// <summary>
            /// Enum Contains for value: contains
            /// </summary>
            [EnumMember(Value = "contains")]
            Contains = 3

        }


        /// <summary>
        /// The match type that is applied to the search.
        /// </summary>
        /// <value>The match type that is applied to the search.</value>
        [DataMember(Name = "matchType", IsRequired = true, EmitDefaultValue = false)]
        public MatchTypeEnum MatchType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="NewsPublisherSearchByNameData" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected NewsPublisherSearchByNameData() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="NewsPublisherSearchByNameData" /> class.
        /// </summary>
        /// <param name="searchValue">Restricts the search to publishers, which match the search value. The comparison for a match is case sensitive. (required).</param>
        /// <param name="matchType">The match type that is applied to the search. (required).</param>
        /// <param name="filter">filter.</param>
        public NewsPublisherSearchByNameData(string searchValue = default(string), MatchTypeEnum matchType = default(MatchTypeEnum), NewsPublisherSearchByNameDataFilter filter = default(NewsPublisherSearchByNameDataFilter))
        {
            // to ensure "searchValue" is required (not null)
            if (searchValue == null) {
                throw new ArgumentNullException("searchValue is a required property for NewsPublisherSearchByNameData and cannot be null");
            }
            this.SearchValue = searchValue;
            this.MatchType = matchType;
            this.Filter = filter;
        }

        /// <summary>
        /// Restricts the search to publishers, which match the search value. The comparison for a match is case sensitive.
        /// </summary>
        /// <value>Restricts the search to publishers, which match the search value. The comparison for a match is case sensitive.</value>
        [DataMember(Name = "searchValue", IsRequired = true, EmitDefaultValue = false)]
        public string SearchValue { get; set; }

        /// <summary>
        /// Gets or Sets Filter
        /// </summary>
        [DataMember(Name = "filter", EmitDefaultValue = false)]
        public NewsPublisherSearchByNameDataFilter Filter { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class NewsPublisherSearchByNameData {\n");
            sb.Append("  SearchValue: ").Append(SearchValue).Append("\n");
            sb.Append("  MatchType: ").Append(MatchType).Append("\n");
            sb.Append("  Filter: ").Append(Filter).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as NewsPublisherSearchByNameData);
        }

        /// <summary>
        /// Returns true if NewsPublisherSearchByNameData instances are equal
        /// </summary>
        /// <param name="input">Instance of NewsPublisherSearchByNameData to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(NewsPublisherSearchByNameData input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.SearchValue == input.SearchValue ||
                    (this.SearchValue != null &&
                    this.SearchValue.Equals(input.SearchValue))
                ) && 
                (
                    this.MatchType == input.MatchType ||
                    this.MatchType.Equals(input.MatchType)
                ) && 
                (
                    this.Filter == input.Filter ||
                    (this.Filter != null &&
                    this.Filter.Equals(input.Filter))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.SearchValue != null)
                    hashCode = hashCode * 59 + this.SearchValue.GetHashCode();
                hashCode = hashCode * 59 + this.MatchType.GetHashCode();
                if (this.Filter != null)
                    hashCode = hashCode * 59 + this.Filter.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            // SearchValue (string) maxLength
            if(this.SearchValue != null && this.SearchValue.Length > 50)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for SearchValue, length must be less than 50.", new [] { "SearchValue" });
            }

            // SearchValue (string) minLength
            if(this.SearchValue != null && this.SearchValue.Length < 2)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for SearchValue, length must be greater than 2.", new [] { "SearchValue" });
            }

            yield break;
        }
    }

}
