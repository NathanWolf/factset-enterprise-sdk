/*
 * FactSet Fundamentals API
 *
 * Gain access to current, comprehensive, and comparative information on securities in worldwide developed and emerging markets. Composed of annual and interim/quarterly data, detailed historical financial statement content, per share data, and calculated ratios, FactSet Fundamentals provides you with the information you need for a global investment perspective. 
 *
 * The version of the OpenAPI document: 1.0.2
 * Contact: api@factset.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = FactSet.SDK.FactSetFundamentals.Client.OpenAPIDateConverter;

namespace FactSet.SDK.FactSetFundamentals.Model
{
    /// <summary>
    /// Fundamentals request body elements
    /// </summary>
    [DataContract(Name = "fundamentalsRequest")]
    public partial class FundamentalsRequest : IEquatable<FundamentalsRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="FundamentalsRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected FundamentalsRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="FundamentalsRequest" /> class.
        /// </summary>
        /// <param name="ids">Security or Entity identifiers. FactSet Identifiers, tickers, CUSIP and SEDOL are accepted input.  (required).</param>
        /// <param name="periodicity">periodicity.</param>
        /// <param name="fiscalPeriodStart">Fiscal period start expressed as YYYY-MM-DD.  Calendar date that will fall back to most recent completed period during resolution. .</param>
        /// <param name="fiscalPeriodEnd">Fiscal period end expressed YYYY-MM-DD.  Calendar date that will fall back to most recent completed period during resolution. .</param>
        /// <param name="metrics">Requested List of Financial Statement Items or Ratios. Use /metrics endpoint for a complete list of available FF_* metric items.  (required).</param>
        /// <param name="currency">Currency code for currency values. For a list of currency ISO codes, visit [Online Assistant Page #1470](https://oa.apps.factset.com/pages/1470).  (default to &quot;LOCAL&quot;).</param>
        /// <param name="restated">restated.</param>
        public FundamentalsRequest(List<string> ids = default(List<string>), Periodicity periodicity = default(Periodicity), string fiscalPeriodStart = default(string), string fiscalPeriodEnd = default(string), List<string> metrics = default(List<string>), string currency = "LOCAL", Restated restated = default(Restated))
        {
            // to ensure "ids" is required (not null)
            if (ids == null) {
                throw new ArgumentNullException("ids is a required property for FundamentalsRequest and cannot be null");
            }
            this.Ids = ids;
            // to ensure "metrics" is required (not null)
            if (metrics == null) {
                throw new ArgumentNullException("metrics is a required property for FundamentalsRequest and cannot be null");
            }
            this.Metrics = metrics;
            this.Periodicity = periodicity;
            this.FiscalPeriodStart = fiscalPeriodStart;
            this.FiscalPeriodEnd = fiscalPeriodEnd;
            // use default value if no "currency" provided
            this.Currency = currency ?? "LOCAL";
            this.Restated = restated;
        }

        /// <summary>
        /// Security or Entity identifiers. FactSet Identifiers, tickers, CUSIP and SEDOL are accepted input. 
        /// </summary>
        /// <value>Security or Entity identifiers. FactSet Identifiers, tickers, CUSIP and SEDOL are accepted input. </value>
        [DataMember(Name = "ids", IsRequired = true, EmitDefaultValue = false)]
        public List<string> Ids { get; set; }

        /// <summary>
        /// Gets or Sets Periodicity
        /// </summary>
        [DataMember(Name = "periodicity", EmitDefaultValue = false)]
        public Periodicity Periodicity { get; set; }

        /// <summary>
        /// Fiscal period start expressed as YYYY-MM-DD.  Calendar date that will fall back to most recent completed period during resolution. 
        /// </summary>
        /// <value>Fiscal period start expressed as YYYY-MM-DD.  Calendar date that will fall back to most recent completed period during resolution. </value>
        [DataMember(Name = "fiscalPeriodStart", EmitDefaultValue = false)]
        public string FiscalPeriodStart { get; set; }

        /// <summary>
        /// Fiscal period end expressed YYYY-MM-DD.  Calendar date that will fall back to most recent completed period during resolution. 
        /// </summary>
        /// <value>Fiscal period end expressed YYYY-MM-DD.  Calendar date that will fall back to most recent completed period during resolution. </value>
        [DataMember(Name = "fiscalPeriodEnd", EmitDefaultValue = false)]
        public string FiscalPeriodEnd { get; set; }

        /// <summary>
        /// Requested List of Financial Statement Items or Ratios. Use /metrics endpoint for a complete list of available FF_* metric items. 
        /// </summary>
        /// <value>Requested List of Financial Statement Items or Ratios. Use /metrics endpoint for a complete list of available FF_* metric items. </value>
        [DataMember(Name = "metrics", IsRequired = true, EmitDefaultValue = false)]
        public List<string> Metrics { get; set; }

        /// <summary>
        /// Currency code for currency values. For a list of currency ISO codes, visit [Online Assistant Page #1470](https://oa.apps.factset.com/pages/1470). 
        /// </summary>
        /// <value>Currency code for currency values. For a list of currency ISO codes, visit [Online Assistant Page #1470](https://oa.apps.factset.com/pages/1470). </value>
        [DataMember(Name = "currency", EmitDefaultValue = false)]
        public string Currency { get; set; }

        /// <summary>
        /// Gets or Sets Restated
        /// </summary>
        [DataMember(Name = "restated", EmitDefaultValue = false)]
        public Restated Restated { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class FundamentalsRequest {\n");
            sb.Append("  Ids: ").Append(Ids).Append("\n");
            sb.Append("  Periodicity: ").Append(Periodicity).Append("\n");
            sb.Append("  FiscalPeriodStart: ").Append(FiscalPeriodStart).Append("\n");
            sb.Append("  FiscalPeriodEnd: ").Append(FiscalPeriodEnd).Append("\n");
            sb.Append("  Metrics: ").Append(Metrics).Append("\n");
            sb.Append("  Currency: ").Append(Currency).Append("\n");
            sb.Append("  Restated: ").Append(Restated).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as FundamentalsRequest);
        }

        /// <summary>
        /// Returns true if FundamentalsRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of FundamentalsRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FundamentalsRequest input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Ids == input.Ids ||
                    this.Ids != null &&
                    input.Ids != null &&
                    this.Ids.SequenceEqual(input.Ids)
                ) && 
                (
                    this.Periodicity == input.Periodicity ||
                    (this.Periodicity != null &&
                    this.Periodicity.Equals(input.Periodicity))
                ) && 
                (
                    this.FiscalPeriodStart == input.FiscalPeriodStart ||
                    (this.FiscalPeriodStart != null &&
                    this.FiscalPeriodStart.Equals(input.FiscalPeriodStart))
                ) && 
                (
                    this.FiscalPeriodEnd == input.FiscalPeriodEnd ||
                    (this.FiscalPeriodEnd != null &&
                    this.FiscalPeriodEnd.Equals(input.FiscalPeriodEnd))
                ) && 
                (
                    this.Metrics == input.Metrics ||
                    this.Metrics != null &&
                    input.Metrics != null &&
                    this.Metrics.SequenceEqual(input.Metrics)
                ) && 
                (
                    this.Currency == input.Currency ||
                    (this.Currency != null &&
                    this.Currency.Equals(input.Currency))
                ) && 
                (
                    this.Restated == input.Restated ||
                    (this.Restated != null &&
                    this.Restated.Equals(input.Restated))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Ids != null)
                    hashCode = hashCode * 59 + this.Ids.GetHashCode();
                if (this.Periodicity != null)
                    hashCode = hashCode * 59 + this.Periodicity.GetHashCode();
                if (this.FiscalPeriodStart != null)
                    hashCode = hashCode * 59 + this.FiscalPeriodStart.GetHashCode();
                if (this.FiscalPeriodEnd != null)
                    hashCode = hashCode * 59 + this.FiscalPeriodEnd.GetHashCode();
                if (this.Metrics != null)
                    hashCode = hashCode * 59 + this.Metrics.GetHashCode();
                if (this.Currency != null)
                    hashCode = hashCode * 59 + this.Currency.GetHashCode();
                if (this.Restated != null)
                    hashCode = hashCode * 59 + this.Restated.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
