/*
 * OFDB API
 *
 * OFDB API
 *
 * The version of the OpenAPI document: 2.1.0
 * Contact: api@factset.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using FactSet.SDK.OFDB.Client;
using FactSet.SDK.OFDB.Model;
using FactSet.SDK.Utils.Authentication;

namespace FactSet.SDK.OFDB.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ILongRunningApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the end results of a long running request. The full URL is normally provided for you in the Location header of a finished long running response.
        /// </remarks>
        /// <exception cref="FactSet.SDK.OFDB.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">Encode database path</param>
        /// <param name="id">A unique pickup ID returned by the original request</param>
        /// <returns>InlineResponse2003</returns>
        InlineResponse2003 GetResourceDeleteBulkItems(string path, string id);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the end results of a long running request. The full URL is normally provided for you in the Location header of a finished long running response.
        /// </remarks>
        /// <exception cref="FactSet.SDK.OFDB.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">Encode database path</param>
        /// <param name="id">A unique pickup ID returned by the original request</param>
        /// <returns>ApiResponse of InlineResponse2003</returns>
        ApiResponse<InlineResponse2003> GetResourceDeleteBulkItemsWithHttpInfo(string path, string id);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the end results of a long running request. The full URL is normally provided for you in the Location header of a finished long running response.
        /// </remarks>
        /// <exception cref="FactSet.SDK.OFDB.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">Encode database path</param>
        /// <param name="date">Date in YYYYMMDD format</param>
        /// <param name="id">A unique pickup ID returned by the original request</param>
        /// <returns>void</returns>
        void GetResourceDeleteDate(string path, int date, string id);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the end results of a long running request. The full URL is normally provided for you in the Location header of a finished long running response.
        /// </remarks>
        /// <exception cref="FactSet.SDK.OFDB.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">Encode database path</param>
        /// <param name="date">Date in YYYYMMDD format</param>
        /// <param name="id">A unique pickup ID returned by the original request</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetResourceDeleteDateWithHttpInfo(string path, int date, string id);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the end results of a long running request. The full URL is normally provided for you in the Location header of a finished long running response.
        /// </remarks>
        /// <exception cref="FactSet.SDK.OFDB.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">Encode database path</param>
        /// <param name="date">Date in YYYYMMDD format</param>
        /// <param name="symbol">Symbol with in the ofdb</param>
        /// <param name="id">A unique pickup ID returned by the original request</param>
        /// <returns>void</returns>
        void GetResourceDeleteDateFromSymbol(string path, int date, string symbol, string id);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the end results of a long running request. The full URL is normally provided for you in the Location header of a finished long running response.
        /// </remarks>
        /// <exception cref="FactSet.SDK.OFDB.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">Encode database path</param>
        /// <param name="date">Date in YYYYMMDD format</param>
        /// <param name="symbol">Symbol with in the ofdb</param>
        /// <param name="id">A unique pickup ID returned by the original request</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetResourceDeleteDateFromSymbolWithHttpInfo(string path, int date, string symbol, string id);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the end results of a long running request. The full URL is normally provided for you in the Location header of a finished long running response.
        /// </remarks>
        /// <exception cref="FactSet.SDK.OFDB.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">Encode database path</param>
        /// <param name="symbol">Symbol with in the ofdb</param>
        /// <param name="id">A unique pickup ID returned by the original request</param>
        /// <returns>void</returns>
        void GetResourceDeleteSymbol(string path, string symbol, string id);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the end results of a long running request. The full URL is normally provided for you in the Location header of a finished long running response.
        /// </remarks>
        /// <exception cref="FactSet.SDK.OFDB.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">Encode database path</param>
        /// <param name="symbol">Symbol with in the ofdb</param>
        /// <param name="id">A unique pickup ID returned by the original request</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetResourceDeleteSymbolWithHttpInfo(string path, string symbol, string id);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the end results of a long running request. The full URL is normally provided for you in the Location header of a finished long running response.
        /// </remarks>
        /// <exception cref="FactSet.SDK.OFDB.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">Encode database path</param>
        /// <param name="id">A unique pickup ID returned by the original request</param>
        /// <returns>InlineResponse200</returns>
        InlineResponse200 GetResourceGetAudit(string path, string id);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the end results of a long running request. The full URL is normally provided for you in the Location header of a finished long running response.
        /// </remarks>
        /// <exception cref="FactSet.SDK.OFDB.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">Encode database path</param>
        /// <param name="id">A unique pickup ID returned by the original request</param>
        /// <returns>ApiResponse of InlineResponse200</returns>
        ApiResponse<InlineResponse200> GetResourceGetAuditWithHttpInfo(string path, string id);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the end results of a long running request. The full URL is normally provided for you in the Location header of a finished long running response.
        /// </remarks>
        /// <exception cref="FactSet.SDK.OFDB.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">Encode database path</param>
        /// <param name="id">A unique pickup ID returned by the original request</param>
        /// <returns>InlineResponse2008</returns>
        InlineResponse2008 GetResourceGetData(string path, string id);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the end results of a long running request. The full URL is normally provided for you in the Location header of a finished long running response.
        /// </remarks>
        /// <exception cref="FactSet.SDK.OFDB.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">Encode database path</param>
        /// <param name="id">A unique pickup ID returned by the original request</param>
        /// <returns>ApiResponse of InlineResponse2008</returns>
        ApiResponse<InlineResponse2008> GetResourceGetDataWithHttpInfo(string path, string id);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the end results of a long running request. The full URL is normally provided for you in the Location header of a finished long running response.
        /// </remarks>
        /// <exception cref="FactSet.SDK.OFDB.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">Encode database path</param>
        /// <param name="id">A unique pickup ID returned by the original request</param>
        /// <returns>InlineResponse2006</returns>
        InlineResponse2006 GetResourceGetDates(string path, string id);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the end results of a long running request. The full URL is normally provided for you in the Location header of a finished long running response.
        /// </remarks>
        /// <exception cref="FactSet.SDK.OFDB.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">Encode database path</param>
        /// <param name="id">A unique pickup ID returned by the original request</param>
        /// <returns>ApiResponse of InlineResponse2006</returns>
        ApiResponse<InlineResponse2006> GetResourceGetDatesWithHttpInfo(string path, string id);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the end results of a long running request. The full URL is normally provided for you in the Location header of a finished long running response.
        /// </remarks>
        /// <exception cref="FactSet.SDK.OFDB.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">Encode database path</param>
        /// <param name="id">A unique pickup ID returned by the original request</param>
        /// <returns>InlineResponse2002</returns>
        InlineResponse2002 GetResourceGetFields(string path, string id);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the end results of a long running request. The full URL is normally provided for you in the Location header of a finished long running response.
        /// </remarks>
        /// <exception cref="FactSet.SDK.OFDB.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">Encode database path</param>
        /// <param name="id">A unique pickup ID returned by the original request</param>
        /// <returns>ApiResponse of InlineResponse2002</returns>
        ApiResponse<InlineResponse2002> GetResourceGetFieldsWithHttpInfo(string path, string id);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the end results of a long running request. The full URL is normally provided for you in the Location header of a finished long running response.
        /// </remarks>
        /// <exception cref="FactSet.SDK.OFDB.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">Encode database path</param>
        /// <param name="id">A unique pickup ID returned by the original request</param>
        /// <returns>InlineResponse2001</returns>
        InlineResponse2001 GetResourceGetStats(string path, string id);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the end results of a long running request. The full URL is normally provided for you in the Location header of a finished long running response.
        /// </remarks>
        /// <exception cref="FactSet.SDK.OFDB.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">Encode database path</param>
        /// <param name="id">A unique pickup ID returned by the original request</param>
        /// <returns>ApiResponse of InlineResponse2001</returns>
        ApiResponse<InlineResponse2001> GetResourceGetStatsWithHttpInfo(string path, string id);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the end results of a long running request. The full URL is normally provided for you in the Location header of a finished long running response.
        /// </remarks>
        /// <exception cref="FactSet.SDK.OFDB.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">Encode database path</param>
        /// <param name="id">A unique pickup ID returned by the original request</param>
        /// <returns>InlineResponse2004</returns>
        InlineResponse2004 GetResourceGetSymbols(string path, string id);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the end results of a long running request. The full URL is normally provided for you in the Location header of a finished long running response.
        /// </remarks>
        /// <exception cref="FactSet.SDK.OFDB.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">Encode database path</param>
        /// <param name="id">A unique pickup ID returned by the original request</param>
        /// <returns>ApiResponse of InlineResponse2004</returns>
        ApiResponse<InlineResponse2004> GetResourceGetSymbolsWithHttpInfo(string path, string id);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the end results of a long running request. The full URL is normally provided for you in the Location header of a finished long running response.
        /// </remarks>
        /// <exception cref="FactSet.SDK.OFDB.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique pickup ID returned by the original request</param>
        /// <returns>CreateDatabase</returns>
        CreateDatabase GetResourcePostDatabase(string id);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the end results of a long running request. The full URL is normally provided for you in the Location header of a finished long running response.
        /// </remarks>
        /// <exception cref="FactSet.SDK.OFDB.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique pickup ID returned by the original request</param>
        /// <returns>ApiResponse of CreateDatabase</returns>
        ApiResponse<CreateDatabase> GetResourcePostDatabaseWithHttpInfo(string id);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the end results of a long running request. The full URL is normally provided for you in the Location header of a finished long running response.
        /// </remarks>
        /// <exception cref="FactSet.SDK.OFDB.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">Encode database path</param>
        /// <param name="id">A unique pickup ID returned by the original request</param>
        /// <returns>InlineResponse2007</returns>
        InlineResponse2007 GetResourcePostDates(string path, string id);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the end results of a long running request. The full URL is normally provided for you in the Location header of a finished long running response.
        /// </remarks>
        /// <exception cref="FactSet.SDK.OFDB.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">Encode database path</param>
        /// <param name="id">A unique pickup ID returned by the original request</param>
        /// <returns>ApiResponse of InlineResponse2007</returns>
        ApiResponse<InlineResponse2007> GetResourcePostDatesWithHttpInfo(string path, string id);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the end results of a long running request. The full URL is normally provided for you in the Location header of a finished long running response.
        /// </remarks>
        /// <exception cref="FactSet.SDK.OFDB.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">Encode database path</param>
        /// <param name="id">A unique pickup ID returned by the original request</param>
        /// <returns>InlineResponse2002</returns>
        InlineResponse2002 GetResourcePostFields(string path, string id);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the end results of a long running request. The full URL is normally provided for you in the Location header of a finished long running response.
        /// </remarks>
        /// <exception cref="FactSet.SDK.OFDB.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">Encode database path</param>
        /// <param name="id">A unique pickup ID returned by the original request</param>
        /// <returns>ApiResponse of InlineResponse2002</returns>
        ApiResponse<InlineResponse2002> GetResourcePostFieldsWithHttpInfo(string path, string id);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the end results of a long running request. The full URL is normally provided for you in the Location header of a finished long running response.
        /// </remarks>
        /// <exception cref="FactSet.SDK.OFDB.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">Encode database path</param>
        /// <param name="id">A unique pickup ID returned by the original request</param>
        /// <returns>InlineResponse2005</returns>
        InlineResponse2005 GetResourcePostSymbols(string path, string id);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the end results of a long running request. The full URL is normally provided for you in the Location header of a finished long running response.
        /// </remarks>
        /// <exception cref="FactSet.SDK.OFDB.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">Encode database path</param>
        /// <param name="id">A unique pickup ID returned by the original request</param>
        /// <returns>ApiResponse of InlineResponse2005</returns>
        ApiResponse<InlineResponse2005> GetResourcePostSymbolsWithHttpInfo(string path, string id);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the end results of a long running request. The full URL is normally provided for you in the Location header of a finished long running response.
        /// </remarks>
        /// <exception cref="FactSet.SDK.OFDB.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">Encode database path</param>
        /// <param name="date">Date in YYYYMMDD format</param>
        /// <param name="id">A unique pickup ID returned by the original request</param>
        /// <returns>SuccessPostResponse</returns>
        SuccessPostResponse GetResourcePutDate(string path, int date, string id);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the end results of a long running request. The full URL is normally provided for you in the Location header of a finished long running response.
        /// </remarks>
        /// <exception cref="FactSet.SDK.OFDB.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">Encode database path</param>
        /// <param name="date">Date in YYYYMMDD format</param>
        /// <param name="id">A unique pickup ID returned by the original request</param>
        /// <returns>ApiResponse of SuccessPostResponse</returns>
        ApiResponse<SuccessPostResponse> GetResourcePutDateWithHttpInfo(string path, int date, string id);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the end results of a long running request. The full URL is normally provided for you in the Location header of a finished long running response.
        /// </remarks>
        /// <exception cref="FactSet.SDK.OFDB.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">Encode database path</param>
        /// <param name="id">A unique pickup ID returned by the original request</param>
        /// <returns>InlineResponse2007</returns>
        InlineResponse2007 GetResourcePutDates(string path, string id);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the end results of a long running request. The full URL is normally provided for you in the Location header of a finished long running response.
        /// </remarks>
        /// <exception cref="FactSet.SDK.OFDB.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">Encode database path</param>
        /// <param name="id">A unique pickup ID returned by the original request</param>
        /// <returns>ApiResponse of InlineResponse2007</returns>
        ApiResponse<InlineResponse2007> GetResourcePutDatesWithHttpInfo(string path, string id);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the end results of a long running request. The full URL is normally provided for you in the Location header of a finished long running response.
        /// </remarks>
        /// <exception cref="FactSet.SDK.OFDB.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">Encode database path</param>
        /// <param name="symbol">Symbol with in the ofdb</param>
        /// <param name="id">A unique pickup ID returned by the original request</param>
        /// <returns>SuccessPostResponse</returns>
        SuccessPostResponse GetResourcePutSymbol(string path, string symbol, string id);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the end results of a long running request. The full URL is normally provided for you in the Location header of a finished long running response.
        /// </remarks>
        /// <exception cref="FactSet.SDK.OFDB.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">Encode database path</param>
        /// <param name="symbol">Symbol with in the ofdb</param>
        /// <param name="id">A unique pickup ID returned by the original request</param>
        /// <returns>ApiResponse of SuccessPostResponse</returns>
        ApiResponse<SuccessPostResponse> GetResourcePutSymbolWithHttpInfo(string path, string symbol, string id);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the end results of a long running request. The full URL is normally provided for you in the Location header of a finished long running response.
        /// </remarks>
        /// <exception cref="FactSet.SDK.OFDB.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">Encode database path</param>
        /// <param name="id">A unique pickup ID returned by the original request</param>
        /// <returns>InlineResponse2005</returns>
        InlineResponse2005 GetResourcePutSymbols(string path, string id);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the end results of a long running request. The full URL is normally provided for you in the Location header of a finished long running response.
        /// </remarks>
        /// <exception cref="FactSet.SDK.OFDB.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">Encode database path</param>
        /// <param name="id">A unique pickup ID returned by the original request</param>
        /// <returns>ApiResponse of InlineResponse2005</returns>
        ApiResponse<InlineResponse2005> GetResourcePutSymbolsWithHttpInfo(string path, string id);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the current status of a long running request. The full URL is normally provided for you in the Location header of a long running response.
        /// </remarks>
        /// <exception cref="FactSet.SDK.OFDB.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique pickup ID returned by the original request</param>
        /// <returns>InlineResponse201</returns>
        InlineResponse201 GetStatus(string id);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the current status of a long running request. The full URL is normally provided for you in the Location header of a long running response.
        /// </remarks>
        /// <exception cref="FactSet.SDK.OFDB.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique pickup ID returned by the original request</param>
        /// <returns>ApiResponse of InlineResponse201</returns>
        ApiResponse<InlineResponse201> GetStatusWithHttpInfo(string id);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ILongRunningApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the end results of a long running request. The full URL is normally provided for you in the Location header of a finished long running response.
        /// </remarks>
        /// <exception cref="FactSet.SDK.OFDB.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">Encode database path</param>
        /// <param name="id">A unique pickup ID returned by the original request</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse2003</returns>
        System.Threading.Tasks.Task<InlineResponse2003> GetResourceDeleteBulkItemsAsync(string path, string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the end results of a long running request. The full URL is normally provided for you in the Location header of a finished long running response.
        /// </remarks>
        /// <exception cref="FactSet.SDK.OFDB.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">Encode database path</param>
        /// <param name="id">A unique pickup ID returned by the original request</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse2003)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse2003>> GetResourceDeleteBulkItemsWithHttpInfoAsync(string path, string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the end results of a long running request. The full URL is normally provided for you in the Location header of a finished long running response.
        /// </remarks>
        /// <exception cref="FactSet.SDK.OFDB.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">Encode database path</param>
        /// <param name="date">Date in YYYYMMDD format</param>
        /// <param name="id">A unique pickup ID returned by the original request</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task GetResourceDeleteDateAsync(string path, int date, string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the end results of a long running request. The full URL is normally provided for you in the Location header of a finished long running response.
        /// </remarks>
        /// <exception cref="FactSet.SDK.OFDB.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">Encode database path</param>
        /// <param name="date">Date in YYYYMMDD format</param>
        /// <param name="id">A unique pickup ID returned by the original request</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GetResourceDeleteDateWithHttpInfoAsync(string path, int date, string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the end results of a long running request. The full URL is normally provided for you in the Location header of a finished long running response.
        /// </remarks>
        /// <exception cref="FactSet.SDK.OFDB.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">Encode database path</param>
        /// <param name="date">Date in YYYYMMDD format</param>
        /// <param name="symbol">Symbol with in the ofdb</param>
        /// <param name="id">A unique pickup ID returned by the original request</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task GetResourceDeleteDateFromSymbolAsync(string path, int date, string symbol, string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the end results of a long running request. The full URL is normally provided for you in the Location header of a finished long running response.
        /// </remarks>
        /// <exception cref="FactSet.SDK.OFDB.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">Encode database path</param>
        /// <param name="date">Date in YYYYMMDD format</param>
        /// <param name="symbol">Symbol with in the ofdb</param>
        /// <param name="id">A unique pickup ID returned by the original request</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GetResourceDeleteDateFromSymbolWithHttpInfoAsync(string path, int date, string symbol, string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the end results of a long running request. The full URL is normally provided for you in the Location header of a finished long running response.
        /// </remarks>
        /// <exception cref="FactSet.SDK.OFDB.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">Encode database path</param>
        /// <param name="symbol">Symbol with in the ofdb</param>
        /// <param name="id">A unique pickup ID returned by the original request</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task GetResourceDeleteSymbolAsync(string path, string symbol, string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the end results of a long running request. The full URL is normally provided for you in the Location header of a finished long running response.
        /// </remarks>
        /// <exception cref="FactSet.SDK.OFDB.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">Encode database path</param>
        /// <param name="symbol">Symbol with in the ofdb</param>
        /// <param name="id">A unique pickup ID returned by the original request</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GetResourceDeleteSymbolWithHttpInfoAsync(string path, string symbol, string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the end results of a long running request. The full URL is normally provided for you in the Location header of a finished long running response.
        /// </remarks>
        /// <exception cref="FactSet.SDK.OFDB.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">Encode database path</param>
        /// <param name="id">A unique pickup ID returned by the original request</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse200</returns>
        System.Threading.Tasks.Task<InlineResponse200> GetResourceGetAuditAsync(string path, string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the end results of a long running request. The full URL is normally provided for you in the Location header of a finished long running response.
        /// </remarks>
        /// <exception cref="FactSet.SDK.OFDB.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">Encode database path</param>
        /// <param name="id">A unique pickup ID returned by the original request</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse200)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse200>> GetResourceGetAuditWithHttpInfoAsync(string path, string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the end results of a long running request. The full URL is normally provided for you in the Location header of a finished long running response.
        /// </remarks>
        /// <exception cref="FactSet.SDK.OFDB.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">Encode database path</param>
        /// <param name="id">A unique pickup ID returned by the original request</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse2008</returns>
        System.Threading.Tasks.Task<InlineResponse2008> GetResourceGetDataAsync(string path, string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the end results of a long running request. The full URL is normally provided for you in the Location header of a finished long running response.
        /// </remarks>
        /// <exception cref="FactSet.SDK.OFDB.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">Encode database path</param>
        /// <param name="id">A unique pickup ID returned by the original request</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse2008)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse2008>> GetResourceGetDataWithHttpInfoAsync(string path, string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the end results of a long running request. The full URL is normally provided for you in the Location header of a finished long running response.
        /// </remarks>
        /// <exception cref="FactSet.SDK.OFDB.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">Encode database path</param>
        /// <param name="id">A unique pickup ID returned by the original request</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse2006</returns>
        System.Threading.Tasks.Task<InlineResponse2006> GetResourceGetDatesAsync(string path, string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the end results of a long running request. The full URL is normally provided for you in the Location header of a finished long running response.
        /// </remarks>
        /// <exception cref="FactSet.SDK.OFDB.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">Encode database path</param>
        /// <param name="id">A unique pickup ID returned by the original request</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse2006)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse2006>> GetResourceGetDatesWithHttpInfoAsync(string path, string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the end results of a long running request. The full URL is normally provided for you in the Location header of a finished long running response.
        /// </remarks>
        /// <exception cref="FactSet.SDK.OFDB.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">Encode database path</param>
        /// <param name="id">A unique pickup ID returned by the original request</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse2002</returns>
        System.Threading.Tasks.Task<InlineResponse2002> GetResourceGetFieldsAsync(string path, string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the end results of a long running request. The full URL is normally provided for you in the Location header of a finished long running response.
        /// </remarks>
        /// <exception cref="FactSet.SDK.OFDB.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">Encode database path</param>
        /// <param name="id">A unique pickup ID returned by the original request</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse2002)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse2002>> GetResourceGetFieldsWithHttpInfoAsync(string path, string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the end results of a long running request. The full URL is normally provided for you in the Location header of a finished long running response.
        /// </remarks>
        /// <exception cref="FactSet.SDK.OFDB.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">Encode database path</param>
        /// <param name="id">A unique pickup ID returned by the original request</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse2001</returns>
        System.Threading.Tasks.Task<InlineResponse2001> GetResourceGetStatsAsync(string path, string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the end results of a long running request. The full URL is normally provided for you in the Location header of a finished long running response.
        /// </remarks>
        /// <exception cref="FactSet.SDK.OFDB.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">Encode database path</param>
        /// <param name="id">A unique pickup ID returned by the original request</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse2001)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse2001>> GetResourceGetStatsWithHttpInfoAsync(string path, string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the end results of a long running request. The full URL is normally provided for you in the Location header of a finished long running response.
        /// </remarks>
        /// <exception cref="FactSet.SDK.OFDB.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">Encode database path</param>
        /// <param name="id">A unique pickup ID returned by the original request</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse2004</returns>
        System.Threading.Tasks.Task<InlineResponse2004> GetResourceGetSymbolsAsync(string path, string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the end results of a long running request. The full URL is normally provided for you in the Location header of a finished long running response.
        /// </remarks>
        /// <exception cref="FactSet.SDK.OFDB.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">Encode database path</param>
        /// <param name="id">A unique pickup ID returned by the original request</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse2004)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse2004>> GetResourceGetSymbolsWithHttpInfoAsync(string path, string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the end results of a long running request. The full URL is normally provided for you in the Location header of a finished long running response.
        /// </remarks>
        /// <exception cref="FactSet.SDK.OFDB.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique pickup ID returned by the original request</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CreateDatabase</returns>
        System.Threading.Tasks.Task<CreateDatabase> GetResourcePostDatabaseAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the end results of a long running request. The full URL is normally provided for you in the Location header of a finished long running response.
        /// </remarks>
        /// <exception cref="FactSet.SDK.OFDB.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique pickup ID returned by the original request</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CreateDatabase)</returns>
        System.Threading.Tasks.Task<ApiResponse<CreateDatabase>> GetResourcePostDatabaseWithHttpInfoAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the end results of a long running request. The full URL is normally provided for you in the Location header of a finished long running response.
        /// </remarks>
        /// <exception cref="FactSet.SDK.OFDB.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">Encode database path</param>
        /// <param name="id">A unique pickup ID returned by the original request</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse2007</returns>
        System.Threading.Tasks.Task<InlineResponse2007> GetResourcePostDatesAsync(string path, string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the end results of a long running request. The full URL is normally provided for you in the Location header of a finished long running response.
        /// </remarks>
        /// <exception cref="FactSet.SDK.OFDB.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">Encode database path</param>
        /// <param name="id">A unique pickup ID returned by the original request</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse2007)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse2007>> GetResourcePostDatesWithHttpInfoAsync(string path, string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the end results of a long running request. The full URL is normally provided for you in the Location header of a finished long running response.
        /// </remarks>
        /// <exception cref="FactSet.SDK.OFDB.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">Encode database path</param>
        /// <param name="id">A unique pickup ID returned by the original request</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse2002</returns>
        System.Threading.Tasks.Task<InlineResponse2002> GetResourcePostFieldsAsync(string path, string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the end results of a long running request. The full URL is normally provided for you in the Location header of a finished long running response.
        /// </remarks>
        /// <exception cref="FactSet.SDK.OFDB.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">Encode database path</param>
        /// <param name="id">A unique pickup ID returned by the original request</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse2002)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse2002>> GetResourcePostFieldsWithHttpInfoAsync(string path, string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the end results of a long running request. The full URL is normally provided for you in the Location header of a finished long running response.
        /// </remarks>
        /// <exception cref="FactSet.SDK.OFDB.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">Encode database path</param>
        /// <param name="id">A unique pickup ID returned by the original request</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse2005</returns>
        System.Threading.Tasks.Task<InlineResponse2005> GetResourcePostSymbolsAsync(string path, string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the end results of a long running request. The full URL is normally provided for you in the Location header of a finished long running response.
        /// </remarks>
        /// <exception cref="FactSet.SDK.OFDB.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">Encode database path</param>
        /// <param name="id">A unique pickup ID returned by the original request</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse2005)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse2005>> GetResourcePostSymbolsWithHttpInfoAsync(string path, string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the end results of a long running request. The full URL is normally provided for you in the Location header of a finished long running response.
        /// </remarks>
        /// <exception cref="FactSet.SDK.OFDB.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">Encode database path</param>
        /// <param name="date">Date in YYYYMMDD format</param>
        /// <param name="id">A unique pickup ID returned by the original request</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SuccessPostResponse</returns>
        System.Threading.Tasks.Task<SuccessPostResponse> GetResourcePutDateAsync(string path, int date, string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the end results of a long running request. The full URL is normally provided for you in the Location header of a finished long running response.
        /// </remarks>
        /// <exception cref="FactSet.SDK.OFDB.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">Encode database path</param>
        /// <param name="date">Date in YYYYMMDD format</param>
        /// <param name="id">A unique pickup ID returned by the original request</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SuccessPostResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SuccessPostResponse>> GetResourcePutDateWithHttpInfoAsync(string path, int date, string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the end results of a long running request. The full URL is normally provided for you in the Location header of a finished long running response.
        /// </remarks>
        /// <exception cref="FactSet.SDK.OFDB.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">Encode database path</param>
        /// <param name="id">A unique pickup ID returned by the original request</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse2007</returns>
        System.Threading.Tasks.Task<InlineResponse2007> GetResourcePutDatesAsync(string path, string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the end results of a long running request. The full URL is normally provided for you in the Location header of a finished long running response.
        /// </remarks>
        /// <exception cref="FactSet.SDK.OFDB.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">Encode database path</param>
        /// <param name="id">A unique pickup ID returned by the original request</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse2007)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse2007>> GetResourcePutDatesWithHttpInfoAsync(string path, string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the end results of a long running request. The full URL is normally provided for you in the Location header of a finished long running response.
        /// </remarks>
        /// <exception cref="FactSet.SDK.OFDB.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">Encode database path</param>
        /// <param name="symbol">Symbol with in the ofdb</param>
        /// <param name="id">A unique pickup ID returned by the original request</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SuccessPostResponse</returns>
        System.Threading.Tasks.Task<SuccessPostResponse> GetResourcePutSymbolAsync(string path, string symbol, string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the end results of a long running request. The full URL is normally provided for you in the Location header of a finished long running response.
        /// </remarks>
        /// <exception cref="FactSet.SDK.OFDB.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">Encode database path</param>
        /// <param name="symbol">Symbol with in the ofdb</param>
        /// <param name="id">A unique pickup ID returned by the original request</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SuccessPostResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SuccessPostResponse>> GetResourcePutSymbolWithHttpInfoAsync(string path, string symbol, string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the end results of a long running request. The full URL is normally provided for you in the Location header of a finished long running response.
        /// </remarks>
        /// <exception cref="FactSet.SDK.OFDB.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">Encode database path</param>
        /// <param name="id">A unique pickup ID returned by the original request</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse2005</returns>
        System.Threading.Tasks.Task<InlineResponse2005> GetResourcePutSymbolsAsync(string path, string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the end results of a long running request. The full URL is normally provided for you in the Location header of a finished long running response.
        /// </remarks>
        /// <exception cref="FactSet.SDK.OFDB.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">Encode database path</param>
        /// <param name="id">A unique pickup ID returned by the original request</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse2005)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse2005>> GetResourcePutSymbolsWithHttpInfoAsync(string path, string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the current status of a long running request. The full URL is normally provided for you in the Location header of a long running response.
        /// </remarks>
        /// <exception cref="FactSet.SDK.OFDB.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique pickup ID returned by the original request</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse201</returns>
        System.Threading.Tasks.Task<InlineResponse201> GetStatusAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the current status of a long running request. The full URL is normally provided for you in the Location header of a long running response.
        /// </remarks>
        /// <exception cref="FactSet.SDK.OFDB.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique pickup ID returned by the original request</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse201)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse201>> GetStatusWithHttpInfoAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ILongRunningApi : ILongRunningApiSync, ILongRunningApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class LongRunningApi : ILongRunningApi
    {
        private FactSet.SDK.OFDB.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        # region Response Type Disctionaries
        
        private static readonly Dictionary<HttpStatusCode, System.Type> GetResourceDeleteBulkItemsResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)200, typeof(InlineResponse2003) },
            { (HttpStatusCode)400, typeof(InlineResponse400) },
            { (HttpStatusCode)403, typeof(InlineResponse403) },
            { (HttpStatusCode)404, typeof(InlineResponse403) },
            { (HttpStatusCode)406, typeof(InlineResponse403) },
            { (HttpStatusCode)429, typeof(InlineResponse403) },
        };

        private static readonly Dictionary<HttpStatusCode, System.Type> GetResourceDeleteDateResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
        };

        private static readonly Dictionary<HttpStatusCode, System.Type> GetResourceDeleteDateFromSymbolResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
        };

        private static readonly Dictionary<HttpStatusCode, System.Type> GetResourceDeleteSymbolResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
        };

        private static readonly Dictionary<HttpStatusCode, System.Type> GetResourceGetAuditResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)200, typeof(InlineResponse200) },
            { (HttpStatusCode)400, typeof(InlineResponse400) },
            { (HttpStatusCode)403, typeof(InlineResponse403) },
            { (HttpStatusCode)404, typeof(InlineResponse403) },
            { (HttpStatusCode)406, typeof(InlineResponse403) },
            { (HttpStatusCode)429, typeof(InlineResponse403) },
        };

        private static readonly Dictionary<HttpStatusCode, System.Type> GetResourceGetDataResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)200, typeof(InlineResponse2008) },
            { (HttpStatusCode)400, typeof(InlineResponse400) },
            { (HttpStatusCode)403, typeof(InlineResponse403) },
            { (HttpStatusCode)404, typeof(InlineResponse403) },
            { (HttpStatusCode)406, typeof(InlineResponse403) },
            { (HttpStatusCode)429, typeof(InlineResponse403) },
        };

        private static readonly Dictionary<HttpStatusCode, System.Type> GetResourceGetDatesResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)200, typeof(InlineResponse2006) },
            { (HttpStatusCode)400, typeof(InlineResponse400) },
            { (HttpStatusCode)403, typeof(InlineResponse403) },
            { (HttpStatusCode)404, typeof(InlineResponse403) },
            { (HttpStatusCode)406, typeof(InlineResponse403) },
            { (HttpStatusCode)429, typeof(InlineResponse403) },
        };

        private static readonly Dictionary<HttpStatusCode, System.Type> GetResourceGetFieldsResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)200, typeof(InlineResponse2002) },
            { (HttpStatusCode)400, typeof(InlineResponse400) },
            { (HttpStatusCode)403, typeof(InlineResponse403) },
            { (HttpStatusCode)404, typeof(InlineResponse403) },
            { (HttpStatusCode)406, typeof(InlineResponse403) },
            { (HttpStatusCode)429, typeof(InlineResponse403) },
        };

        private static readonly Dictionary<HttpStatusCode, System.Type> GetResourceGetStatsResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)200, typeof(InlineResponse2001) },
            { (HttpStatusCode)400, typeof(InlineResponse400) },
            { (HttpStatusCode)403, typeof(InlineResponse403) },
            { (HttpStatusCode)404, typeof(InlineResponse403) },
            { (HttpStatusCode)406, typeof(InlineResponse403) },
            { (HttpStatusCode)429, typeof(InlineResponse403) },
        };

        private static readonly Dictionary<HttpStatusCode, System.Type> GetResourceGetSymbolsResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)200, typeof(InlineResponse2004) },
            { (HttpStatusCode)400, typeof(InlineResponse400) },
            { (HttpStatusCode)403, typeof(InlineResponse403) },
            { (HttpStatusCode)404, typeof(InlineResponse403) },
            { (HttpStatusCode)406, typeof(InlineResponse403) },
            { (HttpStatusCode)429, typeof(InlineResponse403) },
        };

        private static readonly Dictionary<HttpStatusCode, System.Type> GetResourcePostDatabaseResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)200, typeof(CreateDatabase) },
            { (HttpStatusCode)400, typeof(InlineResponse400) },
            { (HttpStatusCode)403, typeof(InlineResponse403) },
            { (HttpStatusCode)404, typeof(InlineResponse403) },
            { (HttpStatusCode)406, typeof(InlineResponse403) },
            { (HttpStatusCode)429, typeof(InlineResponse403) },
        };

        private static readonly Dictionary<HttpStatusCode, System.Type> GetResourcePostDatesResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)200, typeof(InlineResponse2007) },
            { (HttpStatusCode)400, typeof(InlineResponse400) },
            { (HttpStatusCode)403, typeof(InlineResponse403) },
            { (HttpStatusCode)404, typeof(InlineResponse403) },
            { (HttpStatusCode)406, typeof(InlineResponse403) },
            { (HttpStatusCode)429, typeof(InlineResponse403) },
        };

        private static readonly Dictionary<HttpStatusCode, System.Type> GetResourcePostFieldsResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)200, typeof(InlineResponse2002) },
            { (HttpStatusCode)400, typeof(InlineResponse400) },
            { (HttpStatusCode)403, typeof(InlineResponse403) },
            { (HttpStatusCode)404, typeof(InlineResponse403) },
            { (HttpStatusCode)406, typeof(InlineResponse403) },
            { (HttpStatusCode)429, typeof(InlineResponse403) },
        };

        private static readonly Dictionary<HttpStatusCode, System.Type> GetResourcePostSymbolsResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)200, typeof(InlineResponse2005) },
            { (HttpStatusCode)400, typeof(InlineResponse400) },
            { (HttpStatusCode)403, typeof(InlineResponse403) },
            { (HttpStatusCode)404, typeof(InlineResponse403) },
            { (HttpStatusCode)406, typeof(InlineResponse403) },
            { (HttpStatusCode)429, typeof(InlineResponse403) },
        };

        private static readonly Dictionary<HttpStatusCode, System.Type> GetResourcePutDateResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)200, typeof(SuccessPostResponse) },
            { (HttpStatusCode)202, typeof(InlineResponse202) },
            { (HttpStatusCode)400, typeof(InlineResponse400) },
            { (HttpStatusCode)403, typeof(InlineResponse403) },
            { (HttpStatusCode)404, typeof(InlineResponse403) },
            { (HttpStatusCode)406, typeof(InlineResponse403) },
            { (HttpStatusCode)429, typeof(InlineResponse403) },
        };

        private static readonly Dictionary<HttpStatusCode, System.Type> GetResourcePutDatesResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)200, typeof(InlineResponse2007) },
            { (HttpStatusCode)400, typeof(InlineResponse400) },
            { (HttpStatusCode)403, typeof(InlineResponse403) },
            { (HttpStatusCode)404, typeof(InlineResponse403) },
            { (HttpStatusCode)406, typeof(InlineResponse403) },
            { (HttpStatusCode)429, typeof(InlineResponse403) },
        };

        private static readonly Dictionary<HttpStatusCode, System.Type> GetResourcePutSymbolResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)200, typeof(SuccessPostResponse) },
            { (HttpStatusCode)400, typeof(InlineResponse400) },
            { (HttpStatusCode)403, typeof(InlineResponse403) },
            { (HttpStatusCode)404, typeof(InlineResponse403) },
            { (HttpStatusCode)406, typeof(InlineResponse403) },
            { (HttpStatusCode)429, typeof(InlineResponse403) },
        };

        private static readonly Dictionary<HttpStatusCode, System.Type> GetResourcePutSymbolsResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)200, typeof(InlineResponse2005) },
            { (HttpStatusCode)400, typeof(InlineResponse400) },
            { (HttpStatusCode)403, typeof(InlineResponse403) },
            { (HttpStatusCode)404, typeof(InlineResponse403) },
            { (HttpStatusCode)406, typeof(InlineResponse403) },
            { (HttpStatusCode)429, typeof(InlineResponse403) },
        };

        private static readonly Dictionary<HttpStatusCode, System.Type> GetStatusResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)201, typeof(InlineResponse201) },
            { (HttpStatusCode)202, typeof(InlineResponse202) },
            { (HttpStatusCode)400, typeof(InlineResponse400) },
            { (HttpStatusCode)403, typeof(InlineResponse403) },
            { (HttpStatusCode)404, typeof(InlineResponse403) },
            { (HttpStatusCode)406, typeof(InlineResponse403) },
            { (HttpStatusCode)429, typeof(InlineResponse403) },
        };

        # endregion Response Type Disctionaries

        # region Api Response Objects
        

        # endregion Api Response Objects

        /// <summary>
        /// Initializes a new instance of the <see cref="LongRunningApi"/> class.
        /// </summary>
        /// <returns></returns>
        public LongRunningApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="LongRunningApi"/> class.
        /// </summary>
        /// <returns></returns>
        public LongRunningApi(string basePath)
        {
            this.Configuration = FactSet.SDK.OFDB.Client.Configuration.MergeConfigurations(
                FactSet.SDK.OFDB.Client.GlobalConfiguration.Instance,
                new FactSet.SDK.OFDB.Client.Configuration { BasePath = basePath }
            );
            this.Client = new FactSet.SDK.OFDB.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new FactSet.SDK.OFDB.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = FactSet.SDK.OFDB.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="LongRunningApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public LongRunningApi(FactSet.SDK.OFDB.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = FactSet.SDK.OFDB.Client.Configuration.MergeConfigurations(
                FactSet.SDK.OFDB.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new FactSet.SDK.OFDB.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new FactSet.SDK.OFDB.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = FactSet.SDK.OFDB.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="LongRunningApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public LongRunningApi(FactSet.SDK.OFDB.Client.ISynchronousClient client, FactSet.SDK.OFDB.Client.IAsynchronousClient asyncClient, FactSet.SDK.OFDB.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = FactSet.SDK.OFDB.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public FactSet.SDK.OFDB.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public FactSet.SDK.OFDB.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public FactSet.SDK.OFDB.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public FactSet.SDK.OFDB.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        ///  Returns the end results of a long running request. The full URL is normally provided for you in the Location header of a finished long running response.
        /// </summary>
        /// <exception cref="FactSet.SDK.OFDB.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">Encode database path</param>
        /// <param name="id">A unique pickup ID returned by the original request</param>
        /// <returns>InlineResponse2003</returns>
        public InlineResponse2003 GetResourceDeleteBulkItems(string path, string id)
        {
            var localVarResponse = GetResourceDeleteBulkItemsWithHttpInfo(path, id);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns the end results of a long running request. The full URL is normally provided for you in the Location header of a finished long running response.
        /// </summary>
        /// <exception cref="FactSet.SDK.OFDB.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">Encode database path</param>
        /// <param name="id">A unique pickup ID returned by the original request</param>
        /// <returns>ApiResponse of InlineResponse2003</returns>
        public ApiResponse<InlineResponse2003> GetResourceDeleteBulkItemsWithHttpInfo(string path, string id)
        {
            // verify the required parameter 'path' is set
            if (path == null)
            {
                throw new FactSet.SDK.OFDB.Client.ApiException(400, "Missing required parameter 'path' when calling LongRunningApi->GetResourceDeleteBulkItems");
            }

            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new FactSet.SDK.OFDB.Client.ApiException(400, "Missing required parameter 'id' when calling LongRunningApi->GetResourceDeleteBulkItems");
            }

            FactSet.SDK.OFDB.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.OFDB.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.OFDB.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.OFDB.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("path", FactSet.SDK.OFDB.Client.ClientUtils.ParameterToString(path)); // path parameter
            localVarRequestOptions.PathParameters.Add("id", FactSet.SDK.OFDB.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.OFDB.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = GetResourceDeleteBulkItemsResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Get<
            InlineResponse2003>("/database/{path}/delete/jobs/post/{id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetResourceDeleteBulkItems", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        ///  Returns the end results of a long running request. The full URL is normally provided for you in the Location header of a finished long running response.
        /// </summary>
        /// <exception cref="FactSet.SDK.OFDB.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">Encode database path</param>
        /// <param name="id">A unique pickup ID returned by the original request</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse2003</returns>
        public async System.Threading.Tasks.Task<InlineResponse2003>GetResourceDeleteBulkItemsAsync(string path, string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await GetResourceDeleteBulkItemsWithHttpInfoAsync(path, id, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns the end results of a long running request. The full URL is normally provided for you in the Location header of a finished long running response.
        /// </summary>
        /// <exception cref="FactSet.SDK.OFDB.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">Encode database path</param>
        /// <param name="id">A unique pickup ID returned by the original request</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse2003)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse2003>> GetResourceDeleteBulkItemsWithHttpInfoAsync(string path, string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'path' is set
            if (path == null)
            {
                throw new FactSet.SDK.OFDB.Client.ApiException(400, "Missing required parameter 'path' when calling LongRunningApi->GetResourceDeleteBulkItems");
            }

            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new FactSet.SDK.OFDB.Client.ApiException(400, "Missing required parameter 'id' when calling LongRunningApi->GetResourceDeleteBulkItems");
            }


            FactSet.SDK.OFDB.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.OFDB.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.OFDB.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.OFDB.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("path", FactSet.SDK.OFDB.Client.ClientUtils.ParameterToString(path)); // path parameter
            localVarRequestOptions.PathParameters.Add("id", FactSet.SDK.OFDB.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.OFDB.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = GetResourceDeleteBulkItemsResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<InlineResponse2003>("/database/{path}/delete/jobs/post/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetResourceDeleteBulkItems", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Returns the end results of a long running request. The full URL is normally provided for you in the Location header of a finished long running response.
        /// </summary>
        /// <exception cref="FactSet.SDK.OFDB.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">Encode database path</param>
        /// <param name="date">Date in YYYYMMDD format</param>
        /// <param name="id">A unique pickup ID returned by the original request</param>
        /// <returns>void</returns>
        public void GetResourceDeleteDate(string path, int date, string id)
        {
            GetResourceDeleteDateWithHttpInfo(path, date, id);
        }

        /// <summary>
        ///  Returns the end results of a long running request. The full URL is normally provided for you in the Location header of a finished long running response.
        /// </summary>
        /// <exception cref="FactSet.SDK.OFDB.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">Encode database path</param>
        /// <param name="date">Date in YYYYMMDD format</param>
        /// <param name="id">A unique pickup ID returned by the original request</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> GetResourceDeleteDateWithHttpInfo(string path, int date, string id)
        {
            // verify the required parameter 'path' is set
            if (path == null)
            {
                throw new FactSet.SDK.OFDB.Client.ApiException(400, "Missing required parameter 'path' when calling LongRunningApi->GetResourceDeleteDate");
            }

            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new FactSet.SDK.OFDB.Client.ApiException(400, "Missing required parameter 'id' when calling LongRunningApi->GetResourceDeleteDate");
            }

            FactSet.SDK.OFDB.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.OFDB.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.OFDB.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.OFDB.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("path", FactSet.SDK.OFDB.Client.ClientUtils.ParameterToString(path)); // path parameter
            localVarRequestOptions.PathParameters.Add("date", FactSet.SDK.OFDB.Client.ClientUtils.ParameterToString(date)); // path parameter
            localVarRequestOptions.PathParameters.Add("id", FactSet.SDK.OFDB.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.OFDB.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = GetResourceDeleteDateResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Get<
            Object>("/database/{path}/dates/{date}/jobs/delete/{id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetResourceDeleteDate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        ///  Returns the end results of a long running request. The full URL is normally provided for you in the Location header of a finished long running response.
        /// </summary>
        /// <exception cref="FactSet.SDK.OFDB.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">Encode database path</param>
        /// <param name="date">Date in YYYYMMDD format</param>
        /// <param name="id">A unique pickup ID returned by the original request</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task GetResourceDeleteDateAsync(string path, int date, string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await GetResourceDeleteDateWithHttpInfoAsync(path, date, id, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  Returns the end results of a long running request. The full URL is normally provided for you in the Location header of a finished long running response.
        /// </summary>
        /// <exception cref="FactSet.SDK.OFDB.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">Encode database path</param>
        /// <param name="date">Date in YYYYMMDD format</param>
        /// <param name="id">A unique pickup ID returned by the original request</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>

        public async System.Threading.Tasks.Task<ApiResponse<Object>> GetResourceDeleteDateWithHttpInfoAsync(string path, int date, string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'path' is set
            if (path == null)
            {
                throw new FactSet.SDK.OFDB.Client.ApiException(400, "Missing required parameter 'path' when calling LongRunningApi->GetResourceDeleteDate");
            }

            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new FactSet.SDK.OFDB.Client.ApiException(400, "Missing required parameter 'id' when calling LongRunningApi->GetResourceDeleteDate");
            }


            FactSet.SDK.OFDB.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.OFDB.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.OFDB.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.OFDB.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("path", FactSet.SDK.OFDB.Client.ClientUtils.ParameterToString(path)); // path parameter
            localVarRequestOptions.PathParameters.Add("date", FactSet.SDK.OFDB.Client.ClientUtils.ParameterToString(date)); // path parameter
            localVarRequestOptions.PathParameters.Add("id", FactSet.SDK.OFDB.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.OFDB.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = GetResourceDeleteDateResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/database/{path}/dates/{date}/jobs/delete/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetResourceDeleteDate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Returns the end results of a long running request. The full URL is normally provided for you in the Location header of a finished long running response.
        /// </summary>
        /// <exception cref="FactSet.SDK.OFDB.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">Encode database path</param>
        /// <param name="date">Date in YYYYMMDD format</param>
        /// <param name="symbol">Symbol with in the ofdb</param>
        /// <param name="id">A unique pickup ID returned by the original request</param>
        /// <returns>void</returns>
        public void GetResourceDeleteDateFromSymbol(string path, int date, string symbol, string id)
        {
            GetResourceDeleteDateFromSymbolWithHttpInfo(path, date, symbol, id);
        }

        /// <summary>
        ///  Returns the end results of a long running request. The full URL is normally provided for you in the Location header of a finished long running response.
        /// </summary>
        /// <exception cref="FactSet.SDK.OFDB.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">Encode database path</param>
        /// <param name="date">Date in YYYYMMDD format</param>
        /// <param name="symbol">Symbol with in the ofdb</param>
        /// <param name="id">A unique pickup ID returned by the original request</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> GetResourceDeleteDateFromSymbolWithHttpInfo(string path, int date, string symbol, string id)
        {
            // verify the required parameter 'path' is set
            if (path == null)
            {
                throw new FactSet.SDK.OFDB.Client.ApiException(400, "Missing required parameter 'path' when calling LongRunningApi->GetResourceDeleteDateFromSymbol");
            }

            // verify the required parameter 'symbol' is set
            if (symbol == null)
            {
                throw new FactSet.SDK.OFDB.Client.ApiException(400, "Missing required parameter 'symbol' when calling LongRunningApi->GetResourceDeleteDateFromSymbol");
            }

            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new FactSet.SDK.OFDB.Client.ApiException(400, "Missing required parameter 'id' when calling LongRunningApi->GetResourceDeleteDateFromSymbol");
            }

            FactSet.SDK.OFDB.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.OFDB.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.OFDB.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.OFDB.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("path", FactSet.SDK.OFDB.Client.ClientUtils.ParameterToString(path)); // path parameter
            localVarRequestOptions.PathParameters.Add("date", FactSet.SDK.OFDB.Client.ClientUtils.ParameterToString(date)); // path parameter
            localVarRequestOptions.PathParameters.Add("symbol", FactSet.SDK.OFDB.Client.ClientUtils.ParameterToString(symbol)); // path parameter
            localVarRequestOptions.PathParameters.Add("id", FactSet.SDK.OFDB.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.OFDB.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = GetResourceDeleteDateFromSymbolResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Get<
            Object>("/database/{path}/dates/{date}/symbols/{symbol}/jobs/delete/{id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetResourceDeleteDateFromSymbol", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        ///  Returns the end results of a long running request. The full URL is normally provided for you in the Location header of a finished long running response.
        /// </summary>
        /// <exception cref="FactSet.SDK.OFDB.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">Encode database path</param>
        /// <param name="date">Date in YYYYMMDD format</param>
        /// <param name="symbol">Symbol with in the ofdb</param>
        /// <param name="id">A unique pickup ID returned by the original request</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task GetResourceDeleteDateFromSymbolAsync(string path, int date, string symbol, string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await GetResourceDeleteDateFromSymbolWithHttpInfoAsync(path, date, symbol, id, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  Returns the end results of a long running request. The full URL is normally provided for you in the Location header of a finished long running response.
        /// </summary>
        /// <exception cref="FactSet.SDK.OFDB.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">Encode database path</param>
        /// <param name="date">Date in YYYYMMDD format</param>
        /// <param name="symbol">Symbol with in the ofdb</param>
        /// <param name="id">A unique pickup ID returned by the original request</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>

        public async System.Threading.Tasks.Task<ApiResponse<Object>> GetResourceDeleteDateFromSymbolWithHttpInfoAsync(string path, int date, string symbol, string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'path' is set
            if (path == null)
            {
                throw new FactSet.SDK.OFDB.Client.ApiException(400, "Missing required parameter 'path' when calling LongRunningApi->GetResourceDeleteDateFromSymbol");
            }

            // verify the required parameter 'symbol' is set
            if (symbol == null)
            {
                throw new FactSet.SDK.OFDB.Client.ApiException(400, "Missing required parameter 'symbol' when calling LongRunningApi->GetResourceDeleteDateFromSymbol");
            }

            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new FactSet.SDK.OFDB.Client.ApiException(400, "Missing required parameter 'id' when calling LongRunningApi->GetResourceDeleteDateFromSymbol");
            }


            FactSet.SDK.OFDB.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.OFDB.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.OFDB.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.OFDB.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("path", FactSet.SDK.OFDB.Client.ClientUtils.ParameterToString(path)); // path parameter
            localVarRequestOptions.PathParameters.Add("date", FactSet.SDK.OFDB.Client.ClientUtils.ParameterToString(date)); // path parameter
            localVarRequestOptions.PathParameters.Add("symbol", FactSet.SDK.OFDB.Client.ClientUtils.ParameterToString(symbol)); // path parameter
            localVarRequestOptions.PathParameters.Add("id", FactSet.SDK.OFDB.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.OFDB.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = GetResourceDeleteDateFromSymbolResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/database/{path}/dates/{date}/symbols/{symbol}/jobs/delete/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetResourceDeleteDateFromSymbol", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Returns the end results of a long running request. The full URL is normally provided for you in the Location header of a finished long running response.
        /// </summary>
        /// <exception cref="FactSet.SDK.OFDB.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">Encode database path</param>
        /// <param name="symbol">Symbol with in the ofdb</param>
        /// <param name="id">A unique pickup ID returned by the original request</param>
        /// <returns>void</returns>
        public void GetResourceDeleteSymbol(string path, string symbol, string id)
        {
            GetResourceDeleteSymbolWithHttpInfo(path, symbol, id);
        }

        /// <summary>
        ///  Returns the end results of a long running request. The full URL is normally provided for you in the Location header of a finished long running response.
        /// </summary>
        /// <exception cref="FactSet.SDK.OFDB.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">Encode database path</param>
        /// <param name="symbol">Symbol with in the ofdb</param>
        /// <param name="id">A unique pickup ID returned by the original request</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> GetResourceDeleteSymbolWithHttpInfo(string path, string symbol, string id)
        {
            // verify the required parameter 'path' is set
            if (path == null)
            {
                throw new FactSet.SDK.OFDB.Client.ApiException(400, "Missing required parameter 'path' when calling LongRunningApi->GetResourceDeleteSymbol");
            }

            // verify the required parameter 'symbol' is set
            if (symbol == null)
            {
                throw new FactSet.SDK.OFDB.Client.ApiException(400, "Missing required parameter 'symbol' when calling LongRunningApi->GetResourceDeleteSymbol");
            }

            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new FactSet.SDK.OFDB.Client.ApiException(400, "Missing required parameter 'id' when calling LongRunningApi->GetResourceDeleteSymbol");
            }

            FactSet.SDK.OFDB.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.OFDB.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.OFDB.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.OFDB.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("path", FactSet.SDK.OFDB.Client.ClientUtils.ParameterToString(path)); // path parameter
            localVarRequestOptions.PathParameters.Add("symbol", FactSet.SDK.OFDB.Client.ClientUtils.ParameterToString(symbol)); // path parameter
            localVarRequestOptions.PathParameters.Add("id", FactSet.SDK.OFDB.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.OFDB.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = GetResourceDeleteSymbolResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Get<
            Object>("/database/{path}/symbols/{symbol}/jobs/delete/{id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetResourceDeleteSymbol", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        ///  Returns the end results of a long running request. The full URL is normally provided for you in the Location header of a finished long running response.
        /// </summary>
        /// <exception cref="FactSet.SDK.OFDB.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">Encode database path</param>
        /// <param name="symbol">Symbol with in the ofdb</param>
        /// <param name="id">A unique pickup ID returned by the original request</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task GetResourceDeleteSymbolAsync(string path, string symbol, string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await GetResourceDeleteSymbolWithHttpInfoAsync(path, symbol, id, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  Returns the end results of a long running request. The full URL is normally provided for you in the Location header of a finished long running response.
        /// </summary>
        /// <exception cref="FactSet.SDK.OFDB.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">Encode database path</param>
        /// <param name="symbol">Symbol with in the ofdb</param>
        /// <param name="id">A unique pickup ID returned by the original request</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>

        public async System.Threading.Tasks.Task<ApiResponse<Object>> GetResourceDeleteSymbolWithHttpInfoAsync(string path, string symbol, string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'path' is set
            if (path == null)
            {
                throw new FactSet.SDK.OFDB.Client.ApiException(400, "Missing required parameter 'path' when calling LongRunningApi->GetResourceDeleteSymbol");
            }

            // verify the required parameter 'symbol' is set
            if (symbol == null)
            {
                throw new FactSet.SDK.OFDB.Client.ApiException(400, "Missing required parameter 'symbol' when calling LongRunningApi->GetResourceDeleteSymbol");
            }

            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new FactSet.SDK.OFDB.Client.ApiException(400, "Missing required parameter 'id' when calling LongRunningApi->GetResourceDeleteSymbol");
            }


            FactSet.SDK.OFDB.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.OFDB.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.OFDB.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.OFDB.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("path", FactSet.SDK.OFDB.Client.ClientUtils.ParameterToString(path)); // path parameter
            localVarRequestOptions.PathParameters.Add("symbol", FactSet.SDK.OFDB.Client.ClientUtils.ParameterToString(symbol)); // path parameter
            localVarRequestOptions.PathParameters.Add("id", FactSet.SDK.OFDB.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.OFDB.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = GetResourceDeleteSymbolResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/database/{path}/symbols/{symbol}/jobs/delete/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetResourceDeleteSymbol", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Returns the end results of a long running request. The full URL is normally provided for you in the Location header of a finished long running response.
        /// </summary>
        /// <exception cref="FactSet.SDK.OFDB.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">Encode database path</param>
        /// <param name="id">A unique pickup ID returned by the original request</param>
        /// <returns>InlineResponse200</returns>
        public InlineResponse200 GetResourceGetAudit(string path, string id)
        {
            var localVarResponse = GetResourceGetAuditWithHttpInfo(path, id);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns the end results of a long running request. The full URL is normally provided for you in the Location header of a finished long running response.
        /// </summary>
        /// <exception cref="FactSet.SDK.OFDB.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">Encode database path</param>
        /// <param name="id">A unique pickup ID returned by the original request</param>
        /// <returns>ApiResponse of InlineResponse200</returns>
        public ApiResponse<InlineResponse200> GetResourceGetAuditWithHttpInfo(string path, string id)
        {
            // verify the required parameter 'path' is set
            if (path == null)
            {
                throw new FactSet.SDK.OFDB.Client.ApiException(400, "Missing required parameter 'path' when calling LongRunningApi->GetResourceGetAudit");
            }

            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new FactSet.SDK.OFDB.Client.ApiException(400, "Missing required parameter 'id' when calling LongRunningApi->GetResourceGetAudit");
            }

            FactSet.SDK.OFDB.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.OFDB.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.OFDB.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.OFDB.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("path", FactSet.SDK.OFDB.Client.ClientUtils.ParameterToString(path)); // path parameter
            localVarRequestOptions.PathParameters.Add("id", FactSet.SDK.OFDB.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.OFDB.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = GetResourceGetAuditResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Get<
            InlineResponse200>("/database/{path}/audit/jobs/get/{id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetResourceGetAudit", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        ///  Returns the end results of a long running request. The full URL is normally provided for you in the Location header of a finished long running response.
        /// </summary>
        /// <exception cref="FactSet.SDK.OFDB.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">Encode database path</param>
        /// <param name="id">A unique pickup ID returned by the original request</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse200</returns>
        public async System.Threading.Tasks.Task<InlineResponse200>GetResourceGetAuditAsync(string path, string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await GetResourceGetAuditWithHttpInfoAsync(path, id, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns the end results of a long running request. The full URL is normally provided for you in the Location header of a finished long running response.
        /// </summary>
        /// <exception cref="FactSet.SDK.OFDB.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">Encode database path</param>
        /// <param name="id">A unique pickup ID returned by the original request</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse200)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse200>> GetResourceGetAuditWithHttpInfoAsync(string path, string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'path' is set
            if (path == null)
            {
                throw new FactSet.SDK.OFDB.Client.ApiException(400, "Missing required parameter 'path' when calling LongRunningApi->GetResourceGetAudit");
            }

            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new FactSet.SDK.OFDB.Client.ApiException(400, "Missing required parameter 'id' when calling LongRunningApi->GetResourceGetAudit");
            }


            FactSet.SDK.OFDB.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.OFDB.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.OFDB.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.OFDB.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("path", FactSet.SDK.OFDB.Client.ClientUtils.ParameterToString(path)); // path parameter
            localVarRequestOptions.PathParameters.Add("id", FactSet.SDK.OFDB.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.OFDB.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = GetResourceGetAuditResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<InlineResponse200>("/database/{path}/audit/jobs/get/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetResourceGetAudit", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Returns the end results of a long running request. The full URL is normally provided for you in the Location header of a finished long running response.
        /// </summary>
        /// <exception cref="FactSet.SDK.OFDB.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">Encode database path</param>
        /// <param name="id">A unique pickup ID returned by the original request</param>
        /// <returns>InlineResponse2008</returns>
        public InlineResponse2008 GetResourceGetData(string path, string id)
        {
            var localVarResponse = GetResourceGetDataWithHttpInfo(path, id);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns the end results of a long running request. The full URL is normally provided for you in the Location header of a finished long running response.
        /// </summary>
        /// <exception cref="FactSet.SDK.OFDB.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">Encode database path</param>
        /// <param name="id">A unique pickup ID returned by the original request</param>
        /// <returns>ApiResponse of InlineResponse2008</returns>
        public ApiResponse<InlineResponse2008> GetResourceGetDataWithHttpInfo(string path, string id)
        {
            // verify the required parameter 'path' is set
            if (path == null)
            {
                throw new FactSet.SDK.OFDB.Client.ApiException(400, "Missing required parameter 'path' when calling LongRunningApi->GetResourceGetData");
            }

            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new FactSet.SDK.OFDB.Client.ApiException(400, "Missing required parameter 'id' when calling LongRunningApi->GetResourceGetData");
            }

            FactSet.SDK.OFDB.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.OFDB.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.OFDB.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.OFDB.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("path", FactSet.SDK.OFDB.Client.ClientUtils.ParameterToString(path)); // path parameter
            localVarRequestOptions.PathParameters.Add("id", FactSet.SDK.OFDB.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.OFDB.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = GetResourceGetDataResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Get<
            InlineResponse2008>("/database/{path}/jobs/get/{id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetResourceGetData", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        ///  Returns the end results of a long running request. The full URL is normally provided for you in the Location header of a finished long running response.
        /// </summary>
        /// <exception cref="FactSet.SDK.OFDB.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">Encode database path</param>
        /// <param name="id">A unique pickup ID returned by the original request</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse2008</returns>
        public async System.Threading.Tasks.Task<InlineResponse2008>GetResourceGetDataAsync(string path, string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await GetResourceGetDataWithHttpInfoAsync(path, id, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns the end results of a long running request. The full URL is normally provided for you in the Location header of a finished long running response.
        /// </summary>
        /// <exception cref="FactSet.SDK.OFDB.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">Encode database path</param>
        /// <param name="id">A unique pickup ID returned by the original request</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse2008)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse2008>> GetResourceGetDataWithHttpInfoAsync(string path, string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'path' is set
            if (path == null)
            {
                throw new FactSet.SDK.OFDB.Client.ApiException(400, "Missing required parameter 'path' when calling LongRunningApi->GetResourceGetData");
            }

            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new FactSet.SDK.OFDB.Client.ApiException(400, "Missing required parameter 'id' when calling LongRunningApi->GetResourceGetData");
            }


            FactSet.SDK.OFDB.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.OFDB.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.OFDB.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.OFDB.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("path", FactSet.SDK.OFDB.Client.ClientUtils.ParameterToString(path)); // path parameter
            localVarRequestOptions.PathParameters.Add("id", FactSet.SDK.OFDB.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.OFDB.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = GetResourceGetDataResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<InlineResponse2008>("/database/{path}/jobs/get/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetResourceGetData", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Returns the end results of a long running request. The full URL is normally provided for you in the Location header of a finished long running response.
        /// </summary>
        /// <exception cref="FactSet.SDK.OFDB.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">Encode database path</param>
        /// <param name="id">A unique pickup ID returned by the original request</param>
        /// <returns>InlineResponse2006</returns>
        public InlineResponse2006 GetResourceGetDates(string path, string id)
        {
            var localVarResponse = GetResourceGetDatesWithHttpInfo(path, id);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns the end results of a long running request. The full URL is normally provided for you in the Location header of a finished long running response.
        /// </summary>
        /// <exception cref="FactSet.SDK.OFDB.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">Encode database path</param>
        /// <param name="id">A unique pickup ID returned by the original request</param>
        /// <returns>ApiResponse of InlineResponse2006</returns>
        public ApiResponse<InlineResponse2006> GetResourceGetDatesWithHttpInfo(string path, string id)
        {
            // verify the required parameter 'path' is set
            if (path == null)
            {
                throw new FactSet.SDK.OFDB.Client.ApiException(400, "Missing required parameter 'path' when calling LongRunningApi->GetResourceGetDates");
            }

            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new FactSet.SDK.OFDB.Client.ApiException(400, "Missing required parameter 'id' when calling LongRunningApi->GetResourceGetDates");
            }

            FactSet.SDK.OFDB.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.OFDB.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.OFDB.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.OFDB.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("path", FactSet.SDK.OFDB.Client.ClientUtils.ParameterToString(path)); // path parameter
            localVarRequestOptions.PathParameters.Add("id", FactSet.SDK.OFDB.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.OFDB.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = GetResourceGetDatesResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Get<
            InlineResponse2006>("/database/{path}/dates/jobs/get/{id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetResourceGetDates", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        ///  Returns the end results of a long running request. The full URL is normally provided for you in the Location header of a finished long running response.
        /// </summary>
        /// <exception cref="FactSet.SDK.OFDB.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">Encode database path</param>
        /// <param name="id">A unique pickup ID returned by the original request</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse2006</returns>
        public async System.Threading.Tasks.Task<InlineResponse2006>GetResourceGetDatesAsync(string path, string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await GetResourceGetDatesWithHttpInfoAsync(path, id, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns the end results of a long running request. The full URL is normally provided for you in the Location header of a finished long running response.
        /// </summary>
        /// <exception cref="FactSet.SDK.OFDB.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">Encode database path</param>
        /// <param name="id">A unique pickup ID returned by the original request</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse2006)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse2006>> GetResourceGetDatesWithHttpInfoAsync(string path, string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'path' is set
            if (path == null)
            {
                throw new FactSet.SDK.OFDB.Client.ApiException(400, "Missing required parameter 'path' when calling LongRunningApi->GetResourceGetDates");
            }

            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new FactSet.SDK.OFDB.Client.ApiException(400, "Missing required parameter 'id' when calling LongRunningApi->GetResourceGetDates");
            }


            FactSet.SDK.OFDB.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.OFDB.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.OFDB.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.OFDB.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("path", FactSet.SDK.OFDB.Client.ClientUtils.ParameterToString(path)); // path parameter
            localVarRequestOptions.PathParameters.Add("id", FactSet.SDK.OFDB.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.OFDB.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = GetResourceGetDatesResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<InlineResponse2006>("/database/{path}/dates/jobs/get/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetResourceGetDates", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Returns the end results of a long running request. The full URL is normally provided for you in the Location header of a finished long running response.
        /// </summary>
        /// <exception cref="FactSet.SDK.OFDB.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">Encode database path</param>
        /// <param name="id">A unique pickup ID returned by the original request</param>
        /// <returns>InlineResponse2002</returns>
        public InlineResponse2002 GetResourceGetFields(string path, string id)
        {
            var localVarResponse = GetResourceGetFieldsWithHttpInfo(path, id);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns the end results of a long running request. The full URL is normally provided for you in the Location header of a finished long running response.
        /// </summary>
        /// <exception cref="FactSet.SDK.OFDB.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">Encode database path</param>
        /// <param name="id">A unique pickup ID returned by the original request</param>
        /// <returns>ApiResponse of InlineResponse2002</returns>
        public ApiResponse<InlineResponse2002> GetResourceGetFieldsWithHttpInfo(string path, string id)
        {
            // verify the required parameter 'path' is set
            if (path == null)
            {
                throw new FactSet.SDK.OFDB.Client.ApiException(400, "Missing required parameter 'path' when calling LongRunningApi->GetResourceGetFields");
            }

            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new FactSet.SDK.OFDB.Client.ApiException(400, "Missing required parameter 'id' when calling LongRunningApi->GetResourceGetFields");
            }

            FactSet.SDK.OFDB.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.OFDB.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.OFDB.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.OFDB.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("path", FactSet.SDK.OFDB.Client.ClientUtils.ParameterToString(path)); // path parameter
            localVarRequestOptions.PathParameters.Add("id", FactSet.SDK.OFDB.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.OFDB.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = GetResourceGetFieldsResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Get<
            InlineResponse2002>("/database/{path}/fields/jobs/get/{id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetResourceGetFields", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        ///  Returns the end results of a long running request. The full URL is normally provided for you in the Location header of a finished long running response.
        /// </summary>
        /// <exception cref="FactSet.SDK.OFDB.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">Encode database path</param>
        /// <param name="id">A unique pickup ID returned by the original request</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse2002</returns>
        public async System.Threading.Tasks.Task<InlineResponse2002>GetResourceGetFieldsAsync(string path, string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await GetResourceGetFieldsWithHttpInfoAsync(path, id, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns the end results of a long running request. The full URL is normally provided for you in the Location header of a finished long running response.
        /// </summary>
        /// <exception cref="FactSet.SDK.OFDB.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">Encode database path</param>
        /// <param name="id">A unique pickup ID returned by the original request</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse2002)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse2002>> GetResourceGetFieldsWithHttpInfoAsync(string path, string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'path' is set
            if (path == null)
            {
                throw new FactSet.SDK.OFDB.Client.ApiException(400, "Missing required parameter 'path' when calling LongRunningApi->GetResourceGetFields");
            }

            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new FactSet.SDK.OFDB.Client.ApiException(400, "Missing required parameter 'id' when calling LongRunningApi->GetResourceGetFields");
            }


            FactSet.SDK.OFDB.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.OFDB.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.OFDB.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.OFDB.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("path", FactSet.SDK.OFDB.Client.ClientUtils.ParameterToString(path)); // path parameter
            localVarRequestOptions.PathParameters.Add("id", FactSet.SDK.OFDB.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.OFDB.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = GetResourceGetFieldsResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<InlineResponse2002>("/database/{path}/fields/jobs/get/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetResourceGetFields", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Returns the end results of a long running request. The full URL is normally provided for you in the Location header of a finished long running response.
        /// </summary>
        /// <exception cref="FactSet.SDK.OFDB.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">Encode database path</param>
        /// <param name="id">A unique pickup ID returned by the original request</param>
        /// <returns>InlineResponse2001</returns>
        public InlineResponse2001 GetResourceGetStats(string path, string id)
        {
            var localVarResponse = GetResourceGetStatsWithHttpInfo(path, id);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns the end results of a long running request. The full URL is normally provided for you in the Location header of a finished long running response.
        /// </summary>
        /// <exception cref="FactSet.SDK.OFDB.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">Encode database path</param>
        /// <param name="id">A unique pickup ID returned by the original request</param>
        /// <returns>ApiResponse of InlineResponse2001</returns>
        public ApiResponse<InlineResponse2001> GetResourceGetStatsWithHttpInfo(string path, string id)
        {
            // verify the required parameter 'path' is set
            if (path == null)
            {
                throw new FactSet.SDK.OFDB.Client.ApiException(400, "Missing required parameter 'path' when calling LongRunningApi->GetResourceGetStats");
            }

            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new FactSet.SDK.OFDB.Client.ApiException(400, "Missing required parameter 'id' when calling LongRunningApi->GetResourceGetStats");
            }

            FactSet.SDK.OFDB.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.OFDB.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.OFDB.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.OFDB.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("path", FactSet.SDK.OFDB.Client.ClientUtils.ParameterToString(path)); // path parameter
            localVarRequestOptions.PathParameters.Add("id", FactSet.SDK.OFDB.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.OFDB.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = GetResourceGetStatsResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Get<
            InlineResponse2001>("/database/{path}/stats/jobs/get/{id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetResourceGetStats", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        ///  Returns the end results of a long running request. The full URL is normally provided for you in the Location header of a finished long running response.
        /// </summary>
        /// <exception cref="FactSet.SDK.OFDB.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">Encode database path</param>
        /// <param name="id">A unique pickup ID returned by the original request</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse2001</returns>
        public async System.Threading.Tasks.Task<InlineResponse2001>GetResourceGetStatsAsync(string path, string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await GetResourceGetStatsWithHttpInfoAsync(path, id, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns the end results of a long running request. The full URL is normally provided for you in the Location header of a finished long running response.
        /// </summary>
        /// <exception cref="FactSet.SDK.OFDB.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">Encode database path</param>
        /// <param name="id">A unique pickup ID returned by the original request</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse2001)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse2001>> GetResourceGetStatsWithHttpInfoAsync(string path, string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'path' is set
            if (path == null)
            {
                throw new FactSet.SDK.OFDB.Client.ApiException(400, "Missing required parameter 'path' when calling LongRunningApi->GetResourceGetStats");
            }

            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new FactSet.SDK.OFDB.Client.ApiException(400, "Missing required parameter 'id' when calling LongRunningApi->GetResourceGetStats");
            }


            FactSet.SDK.OFDB.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.OFDB.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.OFDB.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.OFDB.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("path", FactSet.SDK.OFDB.Client.ClientUtils.ParameterToString(path)); // path parameter
            localVarRequestOptions.PathParameters.Add("id", FactSet.SDK.OFDB.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.OFDB.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = GetResourceGetStatsResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<InlineResponse2001>("/database/{path}/stats/jobs/get/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetResourceGetStats", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Returns the end results of a long running request. The full URL is normally provided for you in the Location header of a finished long running response.
        /// </summary>
        /// <exception cref="FactSet.SDK.OFDB.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">Encode database path</param>
        /// <param name="id">A unique pickup ID returned by the original request</param>
        /// <returns>InlineResponse2004</returns>
        public InlineResponse2004 GetResourceGetSymbols(string path, string id)
        {
            var localVarResponse = GetResourceGetSymbolsWithHttpInfo(path, id);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns the end results of a long running request. The full URL is normally provided for you in the Location header of a finished long running response.
        /// </summary>
        /// <exception cref="FactSet.SDK.OFDB.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">Encode database path</param>
        /// <param name="id">A unique pickup ID returned by the original request</param>
        /// <returns>ApiResponse of InlineResponse2004</returns>
        public ApiResponse<InlineResponse2004> GetResourceGetSymbolsWithHttpInfo(string path, string id)
        {
            // verify the required parameter 'path' is set
            if (path == null)
            {
                throw new FactSet.SDK.OFDB.Client.ApiException(400, "Missing required parameter 'path' when calling LongRunningApi->GetResourceGetSymbols");
            }

            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new FactSet.SDK.OFDB.Client.ApiException(400, "Missing required parameter 'id' when calling LongRunningApi->GetResourceGetSymbols");
            }

            FactSet.SDK.OFDB.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.OFDB.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.OFDB.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.OFDB.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("path", FactSet.SDK.OFDB.Client.ClientUtils.ParameterToString(path)); // path parameter
            localVarRequestOptions.PathParameters.Add("id", FactSet.SDK.OFDB.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.OFDB.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = GetResourceGetSymbolsResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Get<
            InlineResponse2004>("/database/{path}/symbols/jobs/get/{id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetResourceGetSymbols", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        ///  Returns the end results of a long running request. The full URL is normally provided for you in the Location header of a finished long running response.
        /// </summary>
        /// <exception cref="FactSet.SDK.OFDB.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">Encode database path</param>
        /// <param name="id">A unique pickup ID returned by the original request</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse2004</returns>
        public async System.Threading.Tasks.Task<InlineResponse2004>GetResourceGetSymbolsAsync(string path, string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await GetResourceGetSymbolsWithHttpInfoAsync(path, id, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns the end results of a long running request. The full URL is normally provided for you in the Location header of a finished long running response.
        /// </summary>
        /// <exception cref="FactSet.SDK.OFDB.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">Encode database path</param>
        /// <param name="id">A unique pickup ID returned by the original request</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse2004)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse2004>> GetResourceGetSymbolsWithHttpInfoAsync(string path, string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'path' is set
            if (path == null)
            {
                throw new FactSet.SDK.OFDB.Client.ApiException(400, "Missing required parameter 'path' when calling LongRunningApi->GetResourceGetSymbols");
            }

            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new FactSet.SDK.OFDB.Client.ApiException(400, "Missing required parameter 'id' when calling LongRunningApi->GetResourceGetSymbols");
            }


            FactSet.SDK.OFDB.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.OFDB.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.OFDB.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.OFDB.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("path", FactSet.SDK.OFDB.Client.ClientUtils.ParameterToString(path)); // path parameter
            localVarRequestOptions.PathParameters.Add("id", FactSet.SDK.OFDB.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.OFDB.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = GetResourceGetSymbolsResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<InlineResponse2004>("/database/{path}/symbols/jobs/get/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetResourceGetSymbols", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Returns the end results of a long running request. The full URL is normally provided for you in the Location header of a finished long running response.
        /// </summary>
        /// <exception cref="FactSet.SDK.OFDB.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique pickup ID returned by the original request</param>
        /// <returns>CreateDatabase</returns>
        public CreateDatabase GetResourcePostDatabase(string id)
        {
            var localVarResponse = GetResourcePostDatabaseWithHttpInfo(id);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns the end results of a long running request. The full URL is normally provided for you in the Location header of a finished long running response.
        /// </summary>
        /// <exception cref="FactSet.SDK.OFDB.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique pickup ID returned by the original request</param>
        /// <returns>ApiResponse of CreateDatabase</returns>
        public ApiResponse<CreateDatabase> GetResourcePostDatabaseWithHttpInfo(string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new FactSet.SDK.OFDB.Client.ApiException(400, "Missing required parameter 'id' when calling LongRunningApi->GetResourcePostDatabase");
            }

            FactSet.SDK.OFDB.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.OFDB.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.OFDB.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.OFDB.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", FactSet.SDK.OFDB.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.OFDB.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = GetResourcePostDatabaseResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Get<
            CreateDatabase>("/database/jobs/post/{id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetResourcePostDatabase", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        ///  Returns the end results of a long running request. The full URL is normally provided for you in the Location header of a finished long running response.
        /// </summary>
        /// <exception cref="FactSet.SDK.OFDB.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique pickup ID returned by the original request</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CreateDatabase</returns>
        public async System.Threading.Tasks.Task<CreateDatabase>GetResourcePostDatabaseAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await GetResourcePostDatabaseWithHttpInfoAsync(id, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns the end results of a long running request. The full URL is normally provided for you in the Location header of a finished long running response.
        /// </summary>
        /// <exception cref="FactSet.SDK.OFDB.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique pickup ID returned by the original request</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CreateDatabase)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<CreateDatabase>> GetResourcePostDatabaseWithHttpInfoAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new FactSet.SDK.OFDB.Client.ApiException(400, "Missing required parameter 'id' when calling LongRunningApi->GetResourcePostDatabase");
            }


            FactSet.SDK.OFDB.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.OFDB.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.OFDB.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.OFDB.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", FactSet.SDK.OFDB.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.OFDB.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = GetResourcePostDatabaseResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<CreateDatabase>("/database/jobs/post/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetResourcePostDatabase", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Returns the end results of a long running request. The full URL is normally provided for you in the Location header of a finished long running response.
        /// </summary>
        /// <exception cref="FactSet.SDK.OFDB.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">Encode database path</param>
        /// <param name="id">A unique pickup ID returned by the original request</param>
        /// <returns>InlineResponse2007</returns>
        public InlineResponse2007 GetResourcePostDates(string path, string id)
        {
            var localVarResponse = GetResourcePostDatesWithHttpInfo(path, id);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns the end results of a long running request. The full URL is normally provided for you in the Location header of a finished long running response.
        /// </summary>
        /// <exception cref="FactSet.SDK.OFDB.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">Encode database path</param>
        /// <param name="id">A unique pickup ID returned by the original request</param>
        /// <returns>ApiResponse of InlineResponse2007</returns>
        public ApiResponse<InlineResponse2007> GetResourcePostDatesWithHttpInfo(string path, string id)
        {
            // verify the required parameter 'path' is set
            if (path == null)
            {
                throw new FactSet.SDK.OFDB.Client.ApiException(400, "Missing required parameter 'path' when calling LongRunningApi->GetResourcePostDates");
            }

            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new FactSet.SDK.OFDB.Client.ApiException(400, "Missing required parameter 'id' when calling LongRunningApi->GetResourcePostDates");
            }

            FactSet.SDK.OFDB.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.OFDB.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.OFDB.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.OFDB.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("path", FactSet.SDK.OFDB.Client.ClientUtils.ParameterToString(path)); // path parameter
            localVarRequestOptions.PathParameters.Add("id", FactSet.SDK.OFDB.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.OFDB.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = GetResourcePostDatesResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Get<
            InlineResponse2007>("/database/{path}/dates/jobs/post/{id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetResourcePostDates", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        ///  Returns the end results of a long running request. The full URL is normally provided for you in the Location header of a finished long running response.
        /// </summary>
        /// <exception cref="FactSet.SDK.OFDB.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">Encode database path</param>
        /// <param name="id">A unique pickup ID returned by the original request</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse2007</returns>
        public async System.Threading.Tasks.Task<InlineResponse2007>GetResourcePostDatesAsync(string path, string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await GetResourcePostDatesWithHttpInfoAsync(path, id, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns the end results of a long running request. The full URL is normally provided for you in the Location header of a finished long running response.
        /// </summary>
        /// <exception cref="FactSet.SDK.OFDB.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">Encode database path</param>
        /// <param name="id">A unique pickup ID returned by the original request</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse2007)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse2007>> GetResourcePostDatesWithHttpInfoAsync(string path, string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'path' is set
            if (path == null)
            {
                throw new FactSet.SDK.OFDB.Client.ApiException(400, "Missing required parameter 'path' when calling LongRunningApi->GetResourcePostDates");
            }

            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new FactSet.SDK.OFDB.Client.ApiException(400, "Missing required parameter 'id' when calling LongRunningApi->GetResourcePostDates");
            }


            FactSet.SDK.OFDB.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.OFDB.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.OFDB.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.OFDB.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("path", FactSet.SDK.OFDB.Client.ClientUtils.ParameterToString(path)); // path parameter
            localVarRequestOptions.PathParameters.Add("id", FactSet.SDK.OFDB.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.OFDB.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = GetResourcePostDatesResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<InlineResponse2007>("/database/{path}/dates/jobs/post/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetResourcePostDates", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Returns the end results of a long running request. The full URL is normally provided for you in the Location header of a finished long running response.
        /// </summary>
        /// <exception cref="FactSet.SDK.OFDB.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">Encode database path</param>
        /// <param name="id">A unique pickup ID returned by the original request</param>
        /// <returns>InlineResponse2002</returns>
        public InlineResponse2002 GetResourcePostFields(string path, string id)
        {
            var localVarResponse = GetResourcePostFieldsWithHttpInfo(path, id);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns the end results of a long running request. The full URL is normally provided for you in the Location header of a finished long running response.
        /// </summary>
        /// <exception cref="FactSet.SDK.OFDB.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">Encode database path</param>
        /// <param name="id">A unique pickup ID returned by the original request</param>
        /// <returns>ApiResponse of InlineResponse2002</returns>
        public ApiResponse<InlineResponse2002> GetResourcePostFieldsWithHttpInfo(string path, string id)
        {
            // verify the required parameter 'path' is set
            if (path == null)
            {
                throw new FactSet.SDK.OFDB.Client.ApiException(400, "Missing required parameter 'path' when calling LongRunningApi->GetResourcePostFields");
            }

            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new FactSet.SDK.OFDB.Client.ApiException(400, "Missing required parameter 'id' when calling LongRunningApi->GetResourcePostFields");
            }

            FactSet.SDK.OFDB.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.OFDB.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.OFDB.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.OFDB.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("path", FactSet.SDK.OFDB.Client.ClientUtils.ParameterToString(path)); // path parameter
            localVarRequestOptions.PathParameters.Add("id", FactSet.SDK.OFDB.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.OFDB.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = GetResourcePostFieldsResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Get<
            InlineResponse2002>("/database/{path}/fields/jobs/post/{id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetResourcePostFields", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        ///  Returns the end results of a long running request. The full URL is normally provided for you in the Location header of a finished long running response.
        /// </summary>
        /// <exception cref="FactSet.SDK.OFDB.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">Encode database path</param>
        /// <param name="id">A unique pickup ID returned by the original request</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse2002</returns>
        public async System.Threading.Tasks.Task<InlineResponse2002>GetResourcePostFieldsAsync(string path, string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await GetResourcePostFieldsWithHttpInfoAsync(path, id, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns the end results of a long running request. The full URL is normally provided for you in the Location header of a finished long running response.
        /// </summary>
        /// <exception cref="FactSet.SDK.OFDB.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">Encode database path</param>
        /// <param name="id">A unique pickup ID returned by the original request</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse2002)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse2002>> GetResourcePostFieldsWithHttpInfoAsync(string path, string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'path' is set
            if (path == null)
            {
                throw new FactSet.SDK.OFDB.Client.ApiException(400, "Missing required parameter 'path' when calling LongRunningApi->GetResourcePostFields");
            }

            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new FactSet.SDK.OFDB.Client.ApiException(400, "Missing required parameter 'id' when calling LongRunningApi->GetResourcePostFields");
            }


            FactSet.SDK.OFDB.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.OFDB.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.OFDB.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.OFDB.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("path", FactSet.SDK.OFDB.Client.ClientUtils.ParameterToString(path)); // path parameter
            localVarRequestOptions.PathParameters.Add("id", FactSet.SDK.OFDB.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.OFDB.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = GetResourcePostFieldsResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<InlineResponse2002>("/database/{path}/fields/jobs/post/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetResourcePostFields", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Returns the end results of a long running request. The full URL is normally provided for you in the Location header of a finished long running response.
        /// </summary>
        /// <exception cref="FactSet.SDK.OFDB.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">Encode database path</param>
        /// <param name="id">A unique pickup ID returned by the original request</param>
        /// <returns>InlineResponse2005</returns>
        public InlineResponse2005 GetResourcePostSymbols(string path, string id)
        {
            var localVarResponse = GetResourcePostSymbolsWithHttpInfo(path, id);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns the end results of a long running request. The full URL is normally provided for you in the Location header of a finished long running response.
        /// </summary>
        /// <exception cref="FactSet.SDK.OFDB.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">Encode database path</param>
        /// <param name="id">A unique pickup ID returned by the original request</param>
        /// <returns>ApiResponse of InlineResponse2005</returns>
        public ApiResponse<InlineResponse2005> GetResourcePostSymbolsWithHttpInfo(string path, string id)
        {
            // verify the required parameter 'path' is set
            if (path == null)
            {
                throw new FactSet.SDK.OFDB.Client.ApiException(400, "Missing required parameter 'path' when calling LongRunningApi->GetResourcePostSymbols");
            }

            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new FactSet.SDK.OFDB.Client.ApiException(400, "Missing required parameter 'id' when calling LongRunningApi->GetResourcePostSymbols");
            }

            FactSet.SDK.OFDB.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.OFDB.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.OFDB.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.OFDB.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("path", FactSet.SDK.OFDB.Client.ClientUtils.ParameterToString(path)); // path parameter
            localVarRequestOptions.PathParameters.Add("id", FactSet.SDK.OFDB.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.OFDB.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = GetResourcePostSymbolsResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Get<
            InlineResponse2005>("/database/{path}/symbols/jobs/post/{id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetResourcePostSymbols", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        ///  Returns the end results of a long running request. The full URL is normally provided for you in the Location header of a finished long running response.
        /// </summary>
        /// <exception cref="FactSet.SDK.OFDB.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">Encode database path</param>
        /// <param name="id">A unique pickup ID returned by the original request</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse2005</returns>
        public async System.Threading.Tasks.Task<InlineResponse2005>GetResourcePostSymbolsAsync(string path, string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await GetResourcePostSymbolsWithHttpInfoAsync(path, id, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns the end results of a long running request. The full URL is normally provided for you in the Location header of a finished long running response.
        /// </summary>
        /// <exception cref="FactSet.SDK.OFDB.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">Encode database path</param>
        /// <param name="id">A unique pickup ID returned by the original request</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse2005)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse2005>> GetResourcePostSymbolsWithHttpInfoAsync(string path, string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'path' is set
            if (path == null)
            {
                throw new FactSet.SDK.OFDB.Client.ApiException(400, "Missing required parameter 'path' when calling LongRunningApi->GetResourcePostSymbols");
            }

            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new FactSet.SDK.OFDB.Client.ApiException(400, "Missing required parameter 'id' when calling LongRunningApi->GetResourcePostSymbols");
            }


            FactSet.SDK.OFDB.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.OFDB.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.OFDB.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.OFDB.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("path", FactSet.SDK.OFDB.Client.ClientUtils.ParameterToString(path)); // path parameter
            localVarRequestOptions.PathParameters.Add("id", FactSet.SDK.OFDB.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.OFDB.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = GetResourcePostSymbolsResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<InlineResponse2005>("/database/{path}/symbols/jobs/post/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetResourcePostSymbols", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Returns the end results of a long running request. The full URL is normally provided for you in the Location header of a finished long running response.
        /// </summary>
        /// <exception cref="FactSet.SDK.OFDB.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">Encode database path</param>
        /// <param name="date">Date in YYYYMMDD format</param>
        /// <param name="id">A unique pickup ID returned by the original request</param>
        /// <returns>SuccessPostResponse</returns>
        public SuccessPostResponse GetResourcePutDate(string path, int date, string id)
        {
            var localVarResponse = GetResourcePutDateWithHttpInfo(path, date, id);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns the end results of a long running request. The full URL is normally provided for you in the Location header of a finished long running response.
        /// </summary>
        /// <exception cref="FactSet.SDK.OFDB.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">Encode database path</param>
        /// <param name="date">Date in YYYYMMDD format</param>
        /// <param name="id">A unique pickup ID returned by the original request</param>
        /// <returns>ApiResponse of SuccessPostResponse</returns>
        public ApiResponse<SuccessPostResponse> GetResourcePutDateWithHttpInfo(string path, int date, string id)
        {
            // verify the required parameter 'path' is set
            if (path == null)
            {
                throw new FactSet.SDK.OFDB.Client.ApiException(400, "Missing required parameter 'path' when calling LongRunningApi->GetResourcePutDate");
            }

            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new FactSet.SDK.OFDB.Client.ApiException(400, "Missing required parameter 'id' when calling LongRunningApi->GetResourcePutDate");
            }

            FactSet.SDK.OFDB.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.OFDB.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.OFDB.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.OFDB.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("path", FactSet.SDK.OFDB.Client.ClientUtils.ParameterToString(path)); // path parameter
            localVarRequestOptions.PathParameters.Add("date", FactSet.SDK.OFDB.Client.ClientUtils.ParameterToString(date)); // path parameter
            localVarRequestOptions.PathParameters.Add("id", FactSet.SDK.OFDB.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.OFDB.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = GetResourcePutDateResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Get<
            SuccessPostResponse>("/database/{path}/dates/{date}/jobs/put/{id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetResourcePutDate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        ///  Returns the end results of a long running request. The full URL is normally provided for you in the Location header of a finished long running response.
        /// </summary>
        /// <exception cref="FactSet.SDK.OFDB.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">Encode database path</param>
        /// <param name="date">Date in YYYYMMDD format</param>
        /// <param name="id">A unique pickup ID returned by the original request</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SuccessPostResponse</returns>
        public async System.Threading.Tasks.Task<SuccessPostResponse>GetResourcePutDateAsync(string path, int date, string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await GetResourcePutDateWithHttpInfoAsync(path, date, id, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns the end results of a long running request. The full URL is normally provided for you in the Location header of a finished long running response.
        /// </summary>
        /// <exception cref="FactSet.SDK.OFDB.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">Encode database path</param>
        /// <param name="date">Date in YYYYMMDD format</param>
        /// <param name="id">A unique pickup ID returned by the original request</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SuccessPostResponse)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<SuccessPostResponse>> GetResourcePutDateWithHttpInfoAsync(string path, int date, string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'path' is set
            if (path == null)
            {
                throw new FactSet.SDK.OFDB.Client.ApiException(400, "Missing required parameter 'path' when calling LongRunningApi->GetResourcePutDate");
            }

            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new FactSet.SDK.OFDB.Client.ApiException(400, "Missing required parameter 'id' when calling LongRunningApi->GetResourcePutDate");
            }


            FactSet.SDK.OFDB.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.OFDB.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.OFDB.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.OFDB.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("path", FactSet.SDK.OFDB.Client.ClientUtils.ParameterToString(path)); // path parameter
            localVarRequestOptions.PathParameters.Add("date", FactSet.SDK.OFDB.Client.ClientUtils.ParameterToString(date)); // path parameter
            localVarRequestOptions.PathParameters.Add("id", FactSet.SDK.OFDB.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.OFDB.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = GetResourcePutDateResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<SuccessPostResponse>("/database/{path}/dates/{date}/jobs/put/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetResourcePutDate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Returns the end results of a long running request. The full URL is normally provided for you in the Location header of a finished long running response.
        /// </summary>
        /// <exception cref="FactSet.SDK.OFDB.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">Encode database path</param>
        /// <param name="id">A unique pickup ID returned by the original request</param>
        /// <returns>InlineResponse2007</returns>
        public InlineResponse2007 GetResourcePutDates(string path, string id)
        {
            var localVarResponse = GetResourcePutDatesWithHttpInfo(path, id);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns the end results of a long running request. The full URL is normally provided for you in the Location header of a finished long running response.
        /// </summary>
        /// <exception cref="FactSet.SDK.OFDB.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">Encode database path</param>
        /// <param name="id">A unique pickup ID returned by the original request</param>
        /// <returns>ApiResponse of InlineResponse2007</returns>
        public ApiResponse<InlineResponse2007> GetResourcePutDatesWithHttpInfo(string path, string id)
        {
            // verify the required parameter 'path' is set
            if (path == null)
            {
                throw new FactSet.SDK.OFDB.Client.ApiException(400, "Missing required parameter 'path' when calling LongRunningApi->GetResourcePutDates");
            }

            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new FactSet.SDK.OFDB.Client.ApiException(400, "Missing required parameter 'id' when calling LongRunningApi->GetResourcePutDates");
            }

            FactSet.SDK.OFDB.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.OFDB.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.OFDB.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.OFDB.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("path", FactSet.SDK.OFDB.Client.ClientUtils.ParameterToString(path)); // path parameter
            localVarRequestOptions.PathParameters.Add("id", FactSet.SDK.OFDB.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.OFDB.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = GetResourcePutDatesResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Get<
            InlineResponse2007>("/database/{path}/dates/jobs/put/{id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetResourcePutDates", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        ///  Returns the end results of a long running request. The full URL is normally provided for you in the Location header of a finished long running response.
        /// </summary>
        /// <exception cref="FactSet.SDK.OFDB.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">Encode database path</param>
        /// <param name="id">A unique pickup ID returned by the original request</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse2007</returns>
        public async System.Threading.Tasks.Task<InlineResponse2007>GetResourcePutDatesAsync(string path, string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await GetResourcePutDatesWithHttpInfoAsync(path, id, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns the end results of a long running request. The full URL is normally provided for you in the Location header of a finished long running response.
        /// </summary>
        /// <exception cref="FactSet.SDK.OFDB.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">Encode database path</param>
        /// <param name="id">A unique pickup ID returned by the original request</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse2007)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse2007>> GetResourcePutDatesWithHttpInfoAsync(string path, string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'path' is set
            if (path == null)
            {
                throw new FactSet.SDK.OFDB.Client.ApiException(400, "Missing required parameter 'path' when calling LongRunningApi->GetResourcePutDates");
            }

            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new FactSet.SDK.OFDB.Client.ApiException(400, "Missing required parameter 'id' when calling LongRunningApi->GetResourcePutDates");
            }


            FactSet.SDK.OFDB.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.OFDB.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.OFDB.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.OFDB.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("path", FactSet.SDK.OFDB.Client.ClientUtils.ParameterToString(path)); // path parameter
            localVarRequestOptions.PathParameters.Add("id", FactSet.SDK.OFDB.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.OFDB.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = GetResourcePutDatesResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<InlineResponse2007>("/database/{path}/dates/jobs/put/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetResourcePutDates", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Returns the end results of a long running request. The full URL is normally provided for you in the Location header of a finished long running response.
        /// </summary>
        /// <exception cref="FactSet.SDK.OFDB.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">Encode database path</param>
        /// <param name="symbol">Symbol with in the ofdb</param>
        /// <param name="id">A unique pickup ID returned by the original request</param>
        /// <returns>SuccessPostResponse</returns>
        public SuccessPostResponse GetResourcePutSymbol(string path, string symbol, string id)
        {
            var localVarResponse = GetResourcePutSymbolWithHttpInfo(path, symbol, id);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns the end results of a long running request. The full URL is normally provided for you in the Location header of a finished long running response.
        /// </summary>
        /// <exception cref="FactSet.SDK.OFDB.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">Encode database path</param>
        /// <param name="symbol">Symbol with in the ofdb</param>
        /// <param name="id">A unique pickup ID returned by the original request</param>
        /// <returns>ApiResponse of SuccessPostResponse</returns>
        public ApiResponse<SuccessPostResponse> GetResourcePutSymbolWithHttpInfo(string path, string symbol, string id)
        {
            // verify the required parameter 'path' is set
            if (path == null)
            {
                throw new FactSet.SDK.OFDB.Client.ApiException(400, "Missing required parameter 'path' when calling LongRunningApi->GetResourcePutSymbol");
            }

            // verify the required parameter 'symbol' is set
            if (symbol == null)
            {
                throw new FactSet.SDK.OFDB.Client.ApiException(400, "Missing required parameter 'symbol' when calling LongRunningApi->GetResourcePutSymbol");
            }

            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new FactSet.SDK.OFDB.Client.ApiException(400, "Missing required parameter 'id' when calling LongRunningApi->GetResourcePutSymbol");
            }

            FactSet.SDK.OFDB.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.OFDB.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.OFDB.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.OFDB.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("path", FactSet.SDK.OFDB.Client.ClientUtils.ParameterToString(path)); // path parameter
            localVarRequestOptions.PathParameters.Add("symbol", FactSet.SDK.OFDB.Client.ClientUtils.ParameterToString(symbol)); // path parameter
            localVarRequestOptions.PathParameters.Add("id", FactSet.SDK.OFDB.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.OFDB.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = GetResourcePutSymbolResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Get<
            SuccessPostResponse>("/database/{path}/symbols/{symbol}/jobs/put/{id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetResourcePutSymbol", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        ///  Returns the end results of a long running request. The full URL is normally provided for you in the Location header of a finished long running response.
        /// </summary>
        /// <exception cref="FactSet.SDK.OFDB.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">Encode database path</param>
        /// <param name="symbol">Symbol with in the ofdb</param>
        /// <param name="id">A unique pickup ID returned by the original request</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SuccessPostResponse</returns>
        public async System.Threading.Tasks.Task<SuccessPostResponse>GetResourcePutSymbolAsync(string path, string symbol, string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await GetResourcePutSymbolWithHttpInfoAsync(path, symbol, id, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns the end results of a long running request. The full URL is normally provided for you in the Location header of a finished long running response.
        /// </summary>
        /// <exception cref="FactSet.SDK.OFDB.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">Encode database path</param>
        /// <param name="symbol">Symbol with in the ofdb</param>
        /// <param name="id">A unique pickup ID returned by the original request</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SuccessPostResponse)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<SuccessPostResponse>> GetResourcePutSymbolWithHttpInfoAsync(string path, string symbol, string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'path' is set
            if (path == null)
            {
                throw new FactSet.SDK.OFDB.Client.ApiException(400, "Missing required parameter 'path' when calling LongRunningApi->GetResourcePutSymbol");
            }

            // verify the required parameter 'symbol' is set
            if (symbol == null)
            {
                throw new FactSet.SDK.OFDB.Client.ApiException(400, "Missing required parameter 'symbol' when calling LongRunningApi->GetResourcePutSymbol");
            }

            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new FactSet.SDK.OFDB.Client.ApiException(400, "Missing required parameter 'id' when calling LongRunningApi->GetResourcePutSymbol");
            }


            FactSet.SDK.OFDB.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.OFDB.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.OFDB.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.OFDB.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("path", FactSet.SDK.OFDB.Client.ClientUtils.ParameterToString(path)); // path parameter
            localVarRequestOptions.PathParameters.Add("symbol", FactSet.SDK.OFDB.Client.ClientUtils.ParameterToString(symbol)); // path parameter
            localVarRequestOptions.PathParameters.Add("id", FactSet.SDK.OFDB.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.OFDB.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = GetResourcePutSymbolResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<SuccessPostResponse>("/database/{path}/symbols/{symbol}/jobs/put/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetResourcePutSymbol", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Returns the end results of a long running request. The full URL is normally provided for you in the Location header of a finished long running response.
        /// </summary>
        /// <exception cref="FactSet.SDK.OFDB.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">Encode database path</param>
        /// <param name="id">A unique pickup ID returned by the original request</param>
        /// <returns>InlineResponse2005</returns>
        public InlineResponse2005 GetResourcePutSymbols(string path, string id)
        {
            var localVarResponse = GetResourcePutSymbolsWithHttpInfo(path, id);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns the end results of a long running request. The full URL is normally provided for you in the Location header of a finished long running response.
        /// </summary>
        /// <exception cref="FactSet.SDK.OFDB.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">Encode database path</param>
        /// <param name="id">A unique pickup ID returned by the original request</param>
        /// <returns>ApiResponse of InlineResponse2005</returns>
        public ApiResponse<InlineResponse2005> GetResourcePutSymbolsWithHttpInfo(string path, string id)
        {
            // verify the required parameter 'path' is set
            if (path == null)
            {
                throw new FactSet.SDK.OFDB.Client.ApiException(400, "Missing required parameter 'path' when calling LongRunningApi->GetResourcePutSymbols");
            }

            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new FactSet.SDK.OFDB.Client.ApiException(400, "Missing required parameter 'id' when calling LongRunningApi->GetResourcePutSymbols");
            }

            FactSet.SDK.OFDB.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.OFDB.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.OFDB.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.OFDB.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("path", FactSet.SDK.OFDB.Client.ClientUtils.ParameterToString(path)); // path parameter
            localVarRequestOptions.PathParameters.Add("id", FactSet.SDK.OFDB.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.OFDB.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = GetResourcePutSymbolsResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Get<
            InlineResponse2005>("/database/{path}/symbols/jobs/put/{id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetResourcePutSymbols", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        ///  Returns the end results of a long running request. The full URL is normally provided for you in the Location header of a finished long running response.
        /// </summary>
        /// <exception cref="FactSet.SDK.OFDB.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">Encode database path</param>
        /// <param name="id">A unique pickup ID returned by the original request</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse2005</returns>
        public async System.Threading.Tasks.Task<InlineResponse2005>GetResourcePutSymbolsAsync(string path, string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await GetResourcePutSymbolsWithHttpInfoAsync(path, id, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns the end results of a long running request. The full URL is normally provided for you in the Location header of a finished long running response.
        /// </summary>
        /// <exception cref="FactSet.SDK.OFDB.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">Encode database path</param>
        /// <param name="id">A unique pickup ID returned by the original request</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse2005)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse2005>> GetResourcePutSymbolsWithHttpInfoAsync(string path, string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'path' is set
            if (path == null)
            {
                throw new FactSet.SDK.OFDB.Client.ApiException(400, "Missing required parameter 'path' when calling LongRunningApi->GetResourcePutSymbols");
            }

            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new FactSet.SDK.OFDB.Client.ApiException(400, "Missing required parameter 'id' when calling LongRunningApi->GetResourcePutSymbols");
            }


            FactSet.SDK.OFDB.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.OFDB.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.OFDB.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.OFDB.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("path", FactSet.SDK.OFDB.Client.ClientUtils.ParameterToString(path)); // path parameter
            localVarRequestOptions.PathParameters.Add("id", FactSet.SDK.OFDB.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.OFDB.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = GetResourcePutSymbolsResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<InlineResponse2005>("/database/{path}/symbols/jobs/put/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetResourcePutSymbols", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Returns the current status of a long running request. The full URL is normally provided for you in the Location header of a long running response.
        /// </summary>
        /// <exception cref="FactSet.SDK.OFDB.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique pickup ID returned by the original request</param>
        /// <returns>InlineResponse201</returns>
        public InlineResponse201 GetStatus(string id)
        {
            var localVarResponse = GetStatusWithHttpInfo(id);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns the current status of a long running request. The full URL is normally provided for you in the Location header of a long running response.
        /// </summary>
        /// <exception cref="FactSet.SDK.OFDB.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique pickup ID returned by the original request</param>
        /// <returns>ApiResponse of InlineResponse201</returns>
        public ApiResponse<InlineResponse201> GetStatusWithHttpInfo(string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new FactSet.SDK.OFDB.Client.ApiException(400, "Missing required parameter 'id' when calling LongRunningApi->GetStatus");
            }

            FactSet.SDK.OFDB.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.OFDB.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.OFDB.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.OFDB.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", FactSet.SDK.OFDB.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.OFDB.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = GetStatusResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Get<
            InlineResponse201>("/database/jobs/{id}/status", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetStatus", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        ///  Returns the current status of a long running request. The full URL is normally provided for you in the Location header of a long running response.
        /// </summary>
        /// <exception cref="FactSet.SDK.OFDB.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique pickup ID returned by the original request</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse201</returns>
        public async System.Threading.Tasks.Task<InlineResponse201>GetStatusAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await GetStatusWithHttpInfoAsync(id, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns the current status of a long running request. The full URL is normally provided for you in the Location header of a long running response.
        /// </summary>
        /// <exception cref="FactSet.SDK.OFDB.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique pickup ID returned by the original request</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse201)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse201>> GetStatusWithHttpInfoAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new FactSet.SDK.OFDB.Client.ApiException(400, "Missing required parameter 'id' when calling LongRunningApi->GetStatus");
            }


            FactSet.SDK.OFDB.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.OFDB.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.OFDB.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.OFDB.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", FactSet.SDK.OFDB.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.OFDB.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = GetStatusResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<InlineResponse201>("/database/jobs/{id}/status", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetStatus", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
