/*
 * OFDB API
 *
 * OFDB API
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: api@factset.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = FactSet.SDK.OFDB.Client.OpenAPIDateConverter;

namespace FactSet.SDK.OFDB.Model
{
    /// <summary>
    /// InlineResponse2001Data
    /// </summary>
    [DataContract(Name = "inline_response_200_1_data")]
    public partial class InlineResponse2001Data : IEquatable<InlineResponse2001Data>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="InlineResponse2001Data" /> class.
        /// </summary>
        /// <param name="symbols">symbols.</param>
        /// <param name="iteratedFields">iteratedFields.</param>
        /// <param name="nonIteratedFields">nonIteratedFields.</param>
        /// <param name="totalFields">totalFields.</param>
        /// <param name="dates">dates.</param>
        public InlineResponse2001Data(int symbols = default(int), int iteratedFields = default(int), int nonIteratedFields = default(int), int totalFields = default(int), int dates = default(int))
        {
            this.Symbols = symbols;
            this.IteratedFields = iteratedFields;
            this.NonIteratedFields = nonIteratedFields;
            this.TotalFields = totalFields;
            this.Dates = dates;
        }

        /// <summary>
        /// Gets or Sets Symbols
        /// </summary>
        [DataMember(Name = "symbols", EmitDefaultValue = false)]
        public int Symbols { get; set; }

        /// <summary>
        /// Gets or Sets IteratedFields
        /// </summary>
        [DataMember(Name = "iteratedFields", EmitDefaultValue = false)]
        public int IteratedFields { get; set; }

        /// <summary>
        /// Gets or Sets NonIteratedFields
        /// </summary>
        [DataMember(Name = "nonIteratedFields", EmitDefaultValue = false)]
        public int NonIteratedFields { get; set; }

        /// <summary>
        /// Gets or Sets TotalFields
        /// </summary>
        [DataMember(Name = "totalFields", EmitDefaultValue = false)]
        public int TotalFields { get; set; }

        /// <summary>
        /// Gets or Sets Dates
        /// </summary>
        [DataMember(Name = "dates", EmitDefaultValue = false)]
        public int Dates { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class InlineResponse2001Data {\n");
            sb.Append("  Symbols: ").Append(Symbols).Append("\n");
            sb.Append("  IteratedFields: ").Append(IteratedFields).Append("\n");
            sb.Append("  NonIteratedFields: ").Append(NonIteratedFields).Append("\n");
            sb.Append("  TotalFields: ").Append(TotalFields).Append("\n");
            sb.Append("  Dates: ").Append(Dates).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as InlineResponse2001Data);
        }

        /// <summary>
        /// Returns true if InlineResponse2001Data instances are equal
        /// </summary>
        /// <param name="input">Instance of InlineResponse2001Data to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(InlineResponse2001Data input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Symbols == input.Symbols ||
                    this.Symbols.Equals(input.Symbols)
                ) && 
                (
                    this.IteratedFields == input.IteratedFields ||
                    this.IteratedFields.Equals(input.IteratedFields)
                ) && 
                (
                    this.NonIteratedFields == input.NonIteratedFields ||
                    this.NonIteratedFields.Equals(input.NonIteratedFields)
                ) && 
                (
                    this.TotalFields == input.TotalFields ||
                    this.TotalFields.Equals(input.TotalFields)
                ) && 
                (
                    this.Dates == input.Dates ||
                    this.Dates.Equals(input.Dates)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.Symbols.GetHashCode();
                hashCode = (hashCode * 59) + this.IteratedFields.GetHashCode();
                hashCode = (hashCode * 59) + this.NonIteratedFields.GetHashCode();
                hashCode = (hashCode * 59) + this.TotalFields.GetHashCode();
                hashCode = (hashCode * 59) + this.Dates.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
