/*
 * OFDB API
 *
 * OFDB api
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: cpd-hyd-engineering@factset.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using FactSet.SDK.OFDB.Client;
using FactSet.SDK.OFDB.Model;
using FactSet.SDK.Utils.Authentication;

namespace FactSet.SDK.OFDB.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ICreateApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Creates a 2d or 3d database(OFDB)
        /// </remarks>
        /// <exception cref="FactSet.SDK.OFDB.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="databaseSchema"> (optional)</param>
        /// <returns>InlineResponse201</returns>
        InlineResponse201 CreateDatabase(DatabaseSchema databaseSchema = default(DatabaseSchema));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Creates a 2d or 3d database(OFDB)
        /// </remarks>
        /// <exception cref="FactSet.SDK.OFDB.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="databaseSchema"> (optional)</param>
        /// <returns>ApiResponse of InlineResponse201</returns>
        ApiResponse<InlineResponse201> CreateDatabaseWithHttpInfo(DatabaseSchema databaseSchema = default(DatabaseSchema));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Creates a new symbol for a given date in 3d database(OFDB)
        /// </remarks>
        /// <exception cref="FactSet.SDK.OFDB.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">Encode database path</param>
        /// <param name="date">Date in YYYYMMDD format</param>
        /// <param name="postnewsymboldate">Data for creating symbol specific to a date in the database. At least one 3d field is required along with symbol.</param>
        /// <returns>SuccessPostResponse</returns>
        SuccessPostResponse V1DatabasePathDatesDateSymbolsPost(string path, int date, Postnewsymboldate postnewsymboldate);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Creates a new symbol for a given date in 3d database(OFDB)
        /// </remarks>
        /// <exception cref="FactSet.SDK.OFDB.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">Encode database path</param>
        /// <param name="date">Date in YYYYMMDD format</param>
        /// <param name="postnewsymboldate">Data for creating symbol specific to a date in the database. At least one 3d field is required along with symbol.</param>
        /// <returns>ApiResponse of SuccessPostResponse</returns>
        ApiResponse<SuccessPostResponse> V1DatabasePathDatesDateSymbolsPostWithHttpInfo(string path, int date, Postnewsymboldate postnewsymboldate);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Creates a new date with single/multiple symbols for a 3d database(OFDB).
        /// </remarks>
        /// <exception cref="FactSet.SDK.OFDB.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">Encode database path</param>
        /// <param name="postDatesymbol">Required data for creating date in the database. At least one iterative field is required otherwise it will throw 400.</param>
        /// <returns>SuccessPostResponse</returns>
        SuccessPostResponse V1DatabasePathDatesPost(string path, PostDatesymbol postDatesymbol);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Creates a new date with single/multiple symbols for a 3d database(OFDB).
        /// </remarks>
        /// <exception cref="FactSet.SDK.OFDB.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">Encode database path</param>
        /// <param name="postDatesymbol">Required data for creating date in the database. At least one iterative field is required otherwise it will throw 400.</param>
        /// <returns>ApiResponse of SuccessPostResponse</returns>
        ApiResponse<SuccessPostResponse> V1DatabasePathDatesPostWithHttpInfo(string path, PostDatesymbol postDatesymbol);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Creates a new symbol with single/multiple dates for 3d database(OFDB). Creates a symbol for 2d database(OFDB)
        /// </remarks>
        /// <exception cref="FactSet.SDK.OFDB.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">Encode database path</param>
        /// <param name="createSymbols">Data for creating symbol in the database</param>
        /// <returns>SuccessPostResponse</returns>
        SuccessPostResponse V1DatabasePathSymbolsPost(string path, CreateSymbols createSymbols);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Creates a new symbol with single/multiple dates for 3d database(OFDB). Creates a symbol for 2d database(OFDB)
        /// </remarks>
        /// <exception cref="FactSet.SDK.OFDB.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">Encode database path</param>
        /// <param name="createSymbols">Data for creating symbol in the database</param>
        /// <returns>ApiResponse of SuccessPostResponse</returns>
        ApiResponse<SuccessPostResponse> V1DatabasePathSymbolsPostWithHttpInfo(string path, CreateSymbols createSymbols);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ICreateApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Creates a 2d or 3d database(OFDB)
        /// </remarks>
        /// <exception cref="FactSet.SDK.OFDB.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="databaseSchema"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse201</returns>
        System.Threading.Tasks.Task<InlineResponse201> CreateDatabaseAsync(DatabaseSchema databaseSchema = default(DatabaseSchema), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Creates a 2d or 3d database(OFDB)
        /// </remarks>
        /// <exception cref="FactSet.SDK.OFDB.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="databaseSchema"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse201)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse201>> CreateDatabaseWithHttpInfoAsync(DatabaseSchema databaseSchema = default(DatabaseSchema), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Creates a new symbol for a given date in 3d database(OFDB)
        /// </remarks>
        /// <exception cref="FactSet.SDK.OFDB.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">Encode database path</param>
        /// <param name="date">Date in YYYYMMDD format</param>
        /// <param name="postnewsymboldate">Data for creating symbol specific to a date in the database. At least one 3d field is required along with symbol.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SuccessPostResponse</returns>
        System.Threading.Tasks.Task<SuccessPostResponse> V1DatabasePathDatesDateSymbolsPostAsync(string path, int date, Postnewsymboldate postnewsymboldate, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Creates a new symbol for a given date in 3d database(OFDB)
        /// </remarks>
        /// <exception cref="FactSet.SDK.OFDB.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">Encode database path</param>
        /// <param name="date">Date in YYYYMMDD format</param>
        /// <param name="postnewsymboldate">Data for creating symbol specific to a date in the database. At least one 3d field is required along with symbol.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SuccessPostResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SuccessPostResponse>> V1DatabasePathDatesDateSymbolsPostWithHttpInfoAsync(string path, int date, Postnewsymboldate postnewsymboldate, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Creates a new date with single/multiple symbols for a 3d database(OFDB).
        /// </remarks>
        /// <exception cref="FactSet.SDK.OFDB.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">Encode database path</param>
        /// <param name="postDatesymbol">Required data for creating date in the database. At least one iterative field is required otherwise it will throw 400.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SuccessPostResponse</returns>
        System.Threading.Tasks.Task<SuccessPostResponse> V1DatabasePathDatesPostAsync(string path, PostDatesymbol postDatesymbol, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Creates a new date with single/multiple symbols for a 3d database(OFDB).
        /// </remarks>
        /// <exception cref="FactSet.SDK.OFDB.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">Encode database path</param>
        /// <param name="postDatesymbol">Required data for creating date in the database. At least one iterative field is required otherwise it will throw 400.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SuccessPostResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SuccessPostResponse>> V1DatabasePathDatesPostWithHttpInfoAsync(string path, PostDatesymbol postDatesymbol, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Creates a new symbol with single/multiple dates for 3d database(OFDB). Creates a symbol for 2d database(OFDB)
        /// </remarks>
        /// <exception cref="FactSet.SDK.OFDB.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">Encode database path</param>
        /// <param name="createSymbols">Data for creating symbol in the database</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SuccessPostResponse</returns>
        System.Threading.Tasks.Task<SuccessPostResponse> V1DatabasePathSymbolsPostAsync(string path, CreateSymbols createSymbols, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Creates a new symbol with single/multiple dates for 3d database(OFDB). Creates a symbol for 2d database(OFDB)
        /// </remarks>
        /// <exception cref="FactSet.SDK.OFDB.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">Encode database path</param>
        /// <param name="createSymbols">Data for creating symbol in the database</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SuccessPostResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SuccessPostResponse>> V1DatabasePathSymbolsPostWithHttpInfoAsync(string path, CreateSymbols createSymbols, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ICreateApi : ICreateApiSync, ICreateApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class CreateApi : ICreateApi
    {
        private FactSet.SDK.OFDB.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        # region Response Type Disctionaries
                private static readonly Dictionary<HttpStatusCode, System.Type> CreateDatabaseResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)201, typeof(InlineResponse201) },
            { (HttpStatusCode)202, typeof(Object) },
            { (HttpStatusCode)400, typeof(Object) },
            { (HttpStatusCode)403, typeof(Object) },
            { (HttpStatusCode)404, typeof(Object) },
            { (HttpStatusCode)429, typeof(Object) },
        };
        private static readonly Dictionary<HttpStatusCode, System.Type> V1DatabasePathDatesDateSymbolsPostResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)201, typeof(SuccessPostResponse) },
            { (HttpStatusCode)202, typeof(Object) },
            { (HttpStatusCode)400, typeof(Object) },
            { (HttpStatusCode)403, typeof(Object) },
            { (HttpStatusCode)404, typeof(Object) },
            { (HttpStatusCode)429, typeof(Object) },
        };
        private static readonly Dictionary<HttpStatusCode, System.Type> V1DatabasePathDatesPostResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)201, typeof(SuccessPostResponse) },
            { (HttpStatusCode)202, typeof(Object) },
            { (HttpStatusCode)400, typeof(Object) },
            { (HttpStatusCode)403, typeof(Object) },
            { (HttpStatusCode)404, typeof(Object) },
            { (HttpStatusCode)413, typeof(Object) },
            { (HttpStatusCode)429, typeof(Object) },
        };
        private static readonly Dictionary<HttpStatusCode, System.Type> V1DatabasePathSymbolsPostResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)201, typeof(SuccessPostResponse) },
            { (HttpStatusCode)202, typeof(Object) },
            { (HttpStatusCode)400, typeof(Object) },
            { (HttpStatusCode)403, typeof(Object) },
            { (HttpStatusCode)404, typeof(Object) },
            { (HttpStatusCode)413, typeof(Object) },
            { (HttpStatusCode)429, typeof(Object) },
        };

        # endregion Response Type Disctionaries

        # region Api Response Objects
         

        # endregion Api Response Objects

        /// <summary>
        /// Initializes a new instance of the <see cref="CreateApi"/> class.
        /// </summary>
        /// <returns></returns>
        public CreateApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CreateApi"/> class.
        /// </summary>
        /// <returns></returns>
        public CreateApi(string basePath)
        {
            this.Configuration = FactSet.SDK.OFDB.Client.Configuration.MergeConfigurations(
                FactSet.SDK.OFDB.Client.GlobalConfiguration.Instance,
                new FactSet.SDK.OFDB.Client.Configuration { BasePath = basePath }
            );
            this.Client = new FactSet.SDK.OFDB.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new FactSet.SDK.OFDB.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = FactSet.SDK.OFDB.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CreateApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public CreateApi(FactSet.SDK.OFDB.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = FactSet.SDK.OFDB.Client.Configuration.MergeConfigurations(
                FactSet.SDK.OFDB.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new FactSet.SDK.OFDB.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new FactSet.SDK.OFDB.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = FactSet.SDK.OFDB.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CreateApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public CreateApi(FactSet.SDK.OFDB.Client.ISynchronousClient client, FactSet.SDK.OFDB.Client.IAsynchronousClient asyncClient, FactSet.SDK.OFDB.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = FactSet.SDK.OFDB.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public FactSet.SDK.OFDB.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public FactSet.SDK.OFDB.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public FactSet.SDK.OFDB.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public FactSet.SDK.OFDB.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        ///  Creates a 2d or 3d database(OFDB)
        /// </summary>
        /// <exception cref="FactSet.SDK.OFDB.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="databaseSchema"> (optional)</param>
        /// <returns>InlineResponse201</returns>
        public InlineResponse201 CreateDatabase(DatabaseSchema databaseSchema = default(DatabaseSchema))
        {
            var localVarResponse = CreateDatabaseWithHttpInfo(databaseSchema);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Creates a 2d or 3d database(OFDB)
        /// </summary>
        /// <exception cref="FactSet.SDK.OFDB.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="databaseSchema"> (optional)</param>
        /// <returns>ApiResponse of InlineResponse201</returns>
        public ApiResponse<InlineResponse201> CreateDatabaseWithHttpInfo(DatabaseSchema databaseSchema = default(DatabaseSchema))
        {
            FactSet.SDK.OFDB.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.OFDB.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.OFDB.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.OFDB.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = databaseSchema;

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.OFDB.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = CreateDatabaseResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Post<
            InlineResponse201>("/v1/database/", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateDatabase", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        ///  Creates a 2d or 3d database(OFDB)
        /// </summary>
        /// <exception cref="FactSet.SDK.OFDB.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="databaseSchema"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse201</returns>
        public async System.Threading.Tasks.Task<InlineResponse201>CreateDatabaseAsync(DatabaseSchema databaseSchema = default(DatabaseSchema), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await CreateDatabaseWithHttpInfoAsync(databaseSchema, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Creates a 2d or 3d database(OFDB)
        /// </summary>
        /// <exception cref="FactSet.SDK.OFDB.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="databaseSchema"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse201)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse201>> CreateDatabaseWithHttpInfoAsync(DatabaseSchema databaseSchema = default(DatabaseSchema), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            FactSet.SDK.OFDB.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.OFDB.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.OFDB.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.OFDB.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = databaseSchema;

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.OFDB.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = CreateDatabaseResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<InlineResponse201>("/v1/database/", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateDatabase", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Creates a new symbol for a given date in 3d database(OFDB)
        /// </summary>
        /// <exception cref="FactSet.SDK.OFDB.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">Encode database path</param>
        /// <param name="date">Date in YYYYMMDD format</param>
        /// <param name="postnewsymboldate">Data for creating symbol specific to a date in the database. At least one 3d field is required along with symbol.</param>
        /// <returns>SuccessPostResponse</returns>
        public SuccessPostResponse V1DatabasePathDatesDateSymbolsPost(string path, int date, Postnewsymboldate postnewsymboldate)
        {
            var localVarResponse = V1DatabasePathDatesDateSymbolsPostWithHttpInfo(path, date, postnewsymboldate);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Creates a new symbol for a given date in 3d database(OFDB)
        /// </summary>
        /// <exception cref="FactSet.SDK.OFDB.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">Encode database path</param>
        /// <param name="date">Date in YYYYMMDD format</param>
        /// <param name="postnewsymboldate">Data for creating symbol specific to a date in the database. At least one 3d field is required along with symbol.</param>
        /// <returns>ApiResponse of SuccessPostResponse</returns>
        public ApiResponse<SuccessPostResponse> V1DatabasePathDatesDateSymbolsPostWithHttpInfo(string path, int date, Postnewsymboldate postnewsymboldate)
        {
            // verify the required parameter 'path' is set
            if (path == null)
            {
                throw new FactSet.SDK.OFDB.Client.ApiException(400, "Missing required parameter 'path' when calling CreateApi->V1DatabasePathDatesDateSymbolsPost");
            }

            // verify the required parameter 'postnewsymboldate' is set
            if (postnewsymboldate == null)
            {
                throw new FactSet.SDK.OFDB.Client.ApiException(400, "Missing required parameter 'postnewsymboldate' when calling CreateApi->V1DatabasePathDatesDateSymbolsPost");
            }

            FactSet.SDK.OFDB.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.OFDB.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.OFDB.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.OFDB.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("path", FactSet.SDK.OFDB.Client.ClientUtils.ParameterToString(path)); // path parameter
            localVarRequestOptions.PathParameters.Add("date", FactSet.SDK.OFDB.Client.ClientUtils.ParameterToString(date)); // path parameter
            localVarRequestOptions.Data = postnewsymboldate;

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.OFDB.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = V1DatabasePathDatesDateSymbolsPostResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Post<
            SuccessPostResponse>("/v1/database/{path}/dates/{date}/symbols", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V1DatabasePathDatesDateSymbolsPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        ///  Creates a new symbol for a given date in 3d database(OFDB)
        /// </summary>
        /// <exception cref="FactSet.SDK.OFDB.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">Encode database path</param>
        /// <param name="date">Date in YYYYMMDD format</param>
        /// <param name="postnewsymboldate">Data for creating symbol specific to a date in the database. At least one 3d field is required along with symbol.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SuccessPostResponse</returns>
        public async System.Threading.Tasks.Task<SuccessPostResponse>V1DatabasePathDatesDateSymbolsPostAsync(string path, int date, Postnewsymboldate postnewsymboldate, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await V1DatabasePathDatesDateSymbolsPostWithHttpInfoAsync(path, date, postnewsymboldate, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Creates a new symbol for a given date in 3d database(OFDB)
        /// </summary>
        /// <exception cref="FactSet.SDK.OFDB.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">Encode database path</param>
        /// <param name="date">Date in YYYYMMDD format</param>
        /// <param name="postnewsymboldate">Data for creating symbol specific to a date in the database. At least one 3d field is required along with symbol.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SuccessPostResponse)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<SuccessPostResponse>> V1DatabasePathDatesDateSymbolsPostWithHttpInfoAsync(string path, int date, Postnewsymboldate postnewsymboldate, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'path' is set
            if (path == null)
            {
                throw new FactSet.SDK.OFDB.Client.ApiException(400, "Missing required parameter 'path' when calling CreateApi->V1DatabasePathDatesDateSymbolsPost");
            }

            // verify the required parameter 'postnewsymboldate' is set
            if (postnewsymboldate == null)
            {
                throw new FactSet.SDK.OFDB.Client.ApiException(400, "Missing required parameter 'postnewsymboldate' when calling CreateApi->V1DatabasePathDatesDateSymbolsPost");
            }


            FactSet.SDK.OFDB.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.OFDB.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.OFDB.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.OFDB.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("path", FactSet.SDK.OFDB.Client.ClientUtils.ParameterToString(path)); // path parameter
            localVarRequestOptions.PathParameters.Add("date", FactSet.SDK.OFDB.Client.ClientUtils.ParameterToString(date)); // path parameter
            localVarRequestOptions.Data = postnewsymboldate;

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.OFDB.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = V1DatabasePathDatesDateSymbolsPostResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<SuccessPostResponse>("/v1/database/{path}/dates/{date}/symbols", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V1DatabasePathDatesDateSymbolsPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Creates a new date with single/multiple symbols for a 3d database(OFDB).
        /// </summary>
        /// <exception cref="FactSet.SDK.OFDB.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">Encode database path</param>
        /// <param name="postDatesymbol">Required data for creating date in the database. At least one iterative field is required otherwise it will throw 400.</param>
        /// <returns>SuccessPostResponse</returns>
        public SuccessPostResponse V1DatabasePathDatesPost(string path, PostDatesymbol postDatesymbol)
        {
            var localVarResponse = V1DatabasePathDatesPostWithHttpInfo(path, postDatesymbol);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Creates a new date with single/multiple symbols for a 3d database(OFDB).
        /// </summary>
        /// <exception cref="FactSet.SDK.OFDB.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">Encode database path</param>
        /// <param name="postDatesymbol">Required data for creating date in the database. At least one iterative field is required otherwise it will throw 400.</param>
        /// <returns>ApiResponse of SuccessPostResponse</returns>
        public ApiResponse<SuccessPostResponse> V1DatabasePathDatesPostWithHttpInfo(string path, PostDatesymbol postDatesymbol)
        {
            // verify the required parameter 'path' is set
            if (path == null)
            {
                throw new FactSet.SDK.OFDB.Client.ApiException(400, "Missing required parameter 'path' when calling CreateApi->V1DatabasePathDatesPost");
            }

            // verify the required parameter 'postDatesymbol' is set
            if (postDatesymbol == null)
            {
                throw new FactSet.SDK.OFDB.Client.ApiException(400, "Missing required parameter 'postDatesymbol' when calling CreateApi->V1DatabasePathDatesPost");
            }

            FactSet.SDK.OFDB.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.OFDB.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.OFDB.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.OFDB.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("path", FactSet.SDK.OFDB.Client.ClientUtils.ParameterToString(path)); // path parameter
            localVarRequestOptions.Data = postDatesymbol;

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.OFDB.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = V1DatabasePathDatesPostResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Post<
            SuccessPostResponse>("/v1/database/{path}/dates", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V1DatabasePathDatesPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        ///  Creates a new date with single/multiple symbols for a 3d database(OFDB).
        /// </summary>
        /// <exception cref="FactSet.SDK.OFDB.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">Encode database path</param>
        /// <param name="postDatesymbol">Required data for creating date in the database. At least one iterative field is required otherwise it will throw 400.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SuccessPostResponse</returns>
        public async System.Threading.Tasks.Task<SuccessPostResponse>V1DatabasePathDatesPostAsync(string path, PostDatesymbol postDatesymbol, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await V1DatabasePathDatesPostWithHttpInfoAsync(path, postDatesymbol, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Creates a new date with single/multiple symbols for a 3d database(OFDB).
        /// </summary>
        /// <exception cref="FactSet.SDK.OFDB.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">Encode database path</param>
        /// <param name="postDatesymbol">Required data for creating date in the database. At least one iterative field is required otherwise it will throw 400.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SuccessPostResponse)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<SuccessPostResponse>> V1DatabasePathDatesPostWithHttpInfoAsync(string path, PostDatesymbol postDatesymbol, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'path' is set
            if (path == null)
            {
                throw new FactSet.SDK.OFDB.Client.ApiException(400, "Missing required parameter 'path' when calling CreateApi->V1DatabasePathDatesPost");
            }

            // verify the required parameter 'postDatesymbol' is set
            if (postDatesymbol == null)
            {
                throw new FactSet.SDK.OFDB.Client.ApiException(400, "Missing required parameter 'postDatesymbol' when calling CreateApi->V1DatabasePathDatesPost");
            }


            FactSet.SDK.OFDB.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.OFDB.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.OFDB.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.OFDB.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("path", FactSet.SDK.OFDB.Client.ClientUtils.ParameterToString(path)); // path parameter
            localVarRequestOptions.Data = postDatesymbol;

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.OFDB.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = V1DatabasePathDatesPostResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<SuccessPostResponse>("/v1/database/{path}/dates", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V1DatabasePathDatesPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Creates a new symbol with single/multiple dates for 3d database(OFDB). Creates a symbol for 2d database(OFDB)
        /// </summary>
        /// <exception cref="FactSet.SDK.OFDB.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">Encode database path</param>
        /// <param name="createSymbols">Data for creating symbol in the database</param>
        /// <returns>SuccessPostResponse</returns>
        public SuccessPostResponse V1DatabasePathSymbolsPost(string path, CreateSymbols createSymbols)
        {
            var localVarResponse = V1DatabasePathSymbolsPostWithHttpInfo(path, createSymbols);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Creates a new symbol with single/multiple dates for 3d database(OFDB). Creates a symbol for 2d database(OFDB)
        /// </summary>
        /// <exception cref="FactSet.SDK.OFDB.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">Encode database path</param>
        /// <param name="createSymbols">Data for creating symbol in the database</param>
        /// <returns>ApiResponse of SuccessPostResponse</returns>
        public ApiResponse<SuccessPostResponse> V1DatabasePathSymbolsPostWithHttpInfo(string path, CreateSymbols createSymbols)
        {
            // verify the required parameter 'path' is set
            if (path == null)
            {
                throw new FactSet.SDK.OFDB.Client.ApiException(400, "Missing required parameter 'path' when calling CreateApi->V1DatabasePathSymbolsPost");
            }

            // verify the required parameter 'createSymbols' is set
            if (createSymbols == null)
            {
                throw new FactSet.SDK.OFDB.Client.ApiException(400, "Missing required parameter 'createSymbols' when calling CreateApi->V1DatabasePathSymbolsPost");
            }

            FactSet.SDK.OFDB.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.OFDB.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.OFDB.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.OFDB.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("path", FactSet.SDK.OFDB.Client.ClientUtils.ParameterToString(path)); // path parameter
            localVarRequestOptions.Data = createSymbols;

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.OFDB.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = V1DatabasePathSymbolsPostResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Post<
            SuccessPostResponse>("/v1/database/{path}/symbols", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V1DatabasePathSymbolsPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        ///  Creates a new symbol with single/multiple dates for 3d database(OFDB). Creates a symbol for 2d database(OFDB)
        /// </summary>
        /// <exception cref="FactSet.SDK.OFDB.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">Encode database path</param>
        /// <param name="createSymbols">Data for creating symbol in the database</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SuccessPostResponse</returns>
        public async System.Threading.Tasks.Task<SuccessPostResponse>V1DatabasePathSymbolsPostAsync(string path, CreateSymbols createSymbols, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await V1DatabasePathSymbolsPostWithHttpInfoAsync(path, createSymbols, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Creates a new symbol with single/multiple dates for 3d database(OFDB). Creates a symbol for 2d database(OFDB)
        /// </summary>
        /// <exception cref="FactSet.SDK.OFDB.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">Encode database path</param>
        /// <param name="createSymbols">Data for creating symbol in the database</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SuccessPostResponse)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<SuccessPostResponse>> V1DatabasePathSymbolsPostWithHttpInfoAsync(string path, CreateSymbols createSymbols, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'path' is set
            if (path == null)
            {
                throw new FactSet.SDK.OFDB.Client.ApiException(400, "Missing required parameter 'path' when calling CreateApi->V1DatabasePathSymbolsPost");
            }

            // verify the required parameter 'createSymbols' is set
            if (createSymbols == null)
            {
                throw new FactSet.SDK.OFDB.Client.ApiException(400, "Missing required parameter 'createSymbols' when calling CreateApi->V1DatabasePathSymbolsPost");
            }


            FactSet.SDK.OFDB.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.OFDB.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.OFDB.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.OFDB.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("path", FactSet.SDK.OFDB.Client.ClientUtils.ParameterToString(path)); // path parameter
            localVarRequestOptions.Data = createSymbols;

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.OFDB.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = V1DatabasePathSymbolsPostResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<SuccessPostResponse>("/v1/database/{path}/symbols", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V1DatabasePathSymbolsPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
