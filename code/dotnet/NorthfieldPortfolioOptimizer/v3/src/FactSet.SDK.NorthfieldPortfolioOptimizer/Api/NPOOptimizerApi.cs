/*
 * Northfield Portfolio API
 *
 * Allow clients to fetch Analytics through APIs.
 *
 * The version of the OpenAPI document: 3
 * Contact: analytics.api.support@factset.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using FactSet.SDK.NorthfieldPortfolioOptimizer.Client;
using FactSet.SDK.NorthfieldPortfolioOptimizer.Model;
using FactSet.SDK.Utils.Authentication;

namespace FactSet.SDK.NorthfieldPortfolioOptimizer.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface INPOOptimizerApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Cancel NPO optimization by id
        /// </summary>
        /// <remarks>
        /// This is the endpoint to cancel a previously submitted optimization.
        /// </remarks>
        /// <exception cref="FactSet.SDK.NorthfieldPortfolioOptimizer.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">from url, provided from the location header in the Create and Run NPO optimization endpoint</param>
        /// <returns>void</returns>
        void CancelOptimizationById(string id);

        /// <summary>
        /// Cancel NPO optimization by id
        /// </summary>
        /// <remarks>
        /// This is the endpoint to cancel a previously submitted optimization.
        /// </remarks>
        /// <exception cref="FactSet.SDK.NorthfieldPortfolioOptimizer.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">from url, provided from the location header in the Create and Run NPO optimization endpoint</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> CancelOptimizationByIdWithHttpInfo(string id);
        /// <summary>
        /// Get NPO optimization parameters by id
        /// </summary>
        /// <remarks>
        /// This is the endpoint that returns the optimization parameters passed for an optimization.
        /// </remarks>
        /// <exception cref="FactSet.SDK.NorthfieldPortfolioOptimizer.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">from url, provided from the location header in the Create and Run NPO optimization endpoint</param>
        /// <returns>NPOOptimizationParametersRoot</returns>
        NPOOptimizationParametersRoot GetOptimizationParameters(string id);

        /// <summary>
        /// Get NPO optimization parameters by id
        /// </summary>
        /// <remarks>
        /// This is the endpoint that returns the optimization parameters passed for an optimization.
        /// </remarks>
        /// <exception cref="FactSet.SDK.NorthfieldPortfolioOptimizer.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">from url, provided from the location header in the Create and Run NPO optimization endpoint</param>
        /// <returns>ApiResponse of NPOOptimizationParametersRoot</returns>
        ApiResponse<NPOOptimizationParametersRoot> GetOptimizationParametersWithHttpInfo(string id);
        /// <summary>
        /// Get NPO optimization result by id
        /// </summary>
        /// <remarks>
        /// This is the endpoint to get the result of a previously requested optimization.
        /// </remarks>
        /// <exception cref="FactSet.SDK.NorthfieldPortfolioOptimizer.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">from url, provided from the location header in the Get NPO optimization status by id endpoint</param>
        /// <returns>ObjectRoot</returns>
        ObjectRoot GetOptimizationResult(string id);

        /// <summary>
        /// Get NPO optimization result by id
        /// </summary>
        /// <remarks>
        /// This is the endpoint to get the result of a previously requested optimization.
        /// </remarks>
        /// <exception cref="FactSet.SDK.NorthfieldPortfolioOptimizer.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">from url, provided from the location header in the Get NPO optimization status by id endpoint</param>
        /// <returns>ApiResponse of ObjectRoot</returns>
        ApiResponse<ObjectRoot> GetOptimizationResultWithHttpInfo(string id);
        /// <summary>
        /// Get NPO optimization status by id
        /// </summary>
        /// <remarks>
        /// This is the endpoint to check on the progress of a previously requested optimization.  If the optimization has finished computing, the body of the response will contain result in JSON.  Otherwise, the optimization is still running and the X-FactSet-Api-PickUp-Progress header will contain a progress percentage.
        /// </remarks>
        /// <exception cref="FactSet.SDK.NorthfieldPortfolioOptimizer.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">from url, provided from the location header in the Create and Run NPO optimization endpoint</param>
        /// <returns>ObjectRoot</returns>
        ObjectRoot GetOptimizationStatusById(string id);

        /// <summary>
        /// Get NPO optimization status by id
        /// </summary>
        /// <remarks>
        /// This is the endpoint to check on the progress of a previously requested optimization.  If the optimization has finished computing, the body of the response will contain result in JSON.  Otherwise, the optimization is still running and the X-FactSet-Api-PickUp-Progress header will contain a progress percentage.
        /// </remarks>
        /// <exception cref="FactSet.SDK.NorthfieldPortfolioOptimizer.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">from url, provided from the location header in the Create and Run NPO optimization endpoint</param>
        /// <returns>ApiResponse of ObjectRoot</returns>
        ApiResponse<ObjectRoot> GetOptimizationStatusByIdWithHttpInfo(string id);
        /// <summary>
        /// Create and Run NPO optimization
        /// </summary>
        /// <remarks>
        /// This endpoint creates and runs NPO optimization specified in the POST body parameters.                Remarks:                * Any settings in POST body will act as a one-time override over the settings saved in the strategy document.
        /// </remarks>
        /// <exception cref="FactSet.SDK.NorthfieldPortfolioOptimizer.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xFactSetApiLongRunningDeadline">Long running deadline in seconds. (optional)</param>
        /// <param name="cacheControl">Standard HTTP header.  Accepts no-store, max-age, max-stale. (optional)</param>
        /// <param name="nPOOptimizationParametersRoot">Optimization Parameters (optional)</param>
        /// <returns>NPOOptimizerApi.PostAndOptimizeResponseWrapper</returns>
        NPOOptimizerApi.PostAndOptimizeResponseWrapper PostAndOptimize(int? xFactSetApiLongRunningDeadline = default(int?), string cacheControl = default(string), NPOOptimizationParametersRoot nPOOptimizationParametersRoot = default(NPOOptimizationParametersRoot));

        /// <summary>
        /// Create and Run NPO optimization
        /// </summary>
        /// <remarks>
        /// This endpoint creates and runs NPO optimization specified in the POST body parameters.                Remarks:                * Any settings in POST body will act as a one-time override over the settings saved in the strategy document.
        /// </remarks>
        /// <exception cref="FactSet.SDK.NorthfieldPortfolioOptimizer.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xFactSetApiLongRunningDeadline">Long running deadline in seconds. (optional)</param>
        /// <param name="cacheControl">Standard HTTP header.  Accepts no-store, max-age, max-stale. (optional)</param>
        /// <param name="nPOOptimizationParametersRoot">Optimization Parameters (optional)</param>
        /// <returns>ApiResponse of NPOOptimizerApi.PostAndOptimizeResponseWrapper</returns>
        ApiResponse<NPOOptimizerApi.PostAndOptimizeResponseWrapper> PostAndOptimizeWithHttpInfo(int? xFactSetApiLongRunningDeadline = default(int?), string cacheControl = default(string), NPOOptimizationParametersRoot nPOOptimizationParametersRoot = default(NPOOptimizationParametersRoot));
        /// <summary>
        /// Create or Update NPO optimization and run it.
        /// </summary>
        /// <remarks>
        /// This endpoint updates and run the NPO optimization specified in the PUT body parameters. It also allows the creation of new NPO optimization with custom id.
        /// </remarks>
        /// <exception cref="FactSet.SDK.NorthfieldPortfolioOptimizer.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">from url, provided from the location header in the Create and Run NPO optimization endpoint</param>
        /// <param name="xFactSetApiLongRunningDeadline">Long running deadline in seconds. (optional)</param>
        /// <param name="cacheControl">Standard HTTP header.  Accepts no-store, max-age, max-stale. (optional)</param>
        /// <param name="nPOOptimizationParametersRoot">Optimization Parameters (optional)</param>
        /// <returns>NPOOptimizerApi.PutAndOptimizeResponseWrapper</returns>
        NPOOptimizerApi.PutAndOptimizeResponseWrapper PutAndOptimize(string id, int? xFactSetApiLongRunningDeadline = default(int?), string cacheControl = default(string), NPOOptimizationParametersRoot nPOOptimizationParametersRoot = default(NPOOptimizationParametersRoot));

        /// <summary>
        /// Create or Update NPO optimization and run it.
        /// </summary>
        /// <remarks>
        /// This endpoint updates and run the NPO optimization specified in the PUT body parameters. It also allows the creation of new NPO optimization with custom id.
        /// </remarks>
        /// <exception cref="FactSet.SDK.NorthfieldPortfolioOptimizer.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">from url, provided from the location header in the Create and Run NPO optimization endpoint</param>
        /// <param name="xFactSetApiLongRunningDeadline">Long running deadline in seconds. (optional)</param>
        /// <param name="cacheControl">Standard HTTP header.  Accepts no-store, max-age, max-stale. (optional)</param>
        /// <param name="nPOOptimizationParametersRoot">Optimization Parameters (optional)</param>
        /// <returns>ApiResponse of NPOOptimizerApi.PutAndOptimizeResponseWrapper</returns>
        ApiResponse<NPOOptimizerApi.PutAndOptimizeResponseWrapper> PutAndOptimizeWithHttpInfo(string id, int? xFactSetApiLongRunningDeadline = default(int?), string cacheControl = default(string), NPOOptimizationParametersRoot nPOOptimizationParametersRoot = default(NPOOptimizationParametersRoot));
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface INPOOptimizerApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Cancel NPO optimization by id
        /// </summary>
        /// <remarks>
        /// This is the endpoint to cancel a previously submitted optimization.
        /// </remarks>
        /// <exception cref="FactSet.SDK.NorthfieldPortfolioOptimizer.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">from url, provided from the location header in the Create and Run NPO optimization endpoint</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task CancelOptimizationByIdAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Cancel NPO optimization by id
        /// </summary>
        /// <remarks>
        /// This is the endpoint to cancel a previously submitted optimization.
        /// </remarks>
        /// <exception cref="FactSet.SDK.NorthfieldPortfolioOptimizer.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">from url, provided from the location header in the Create and Run NPO optimization endpoint</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> CancelOptimizationByIdWithHttpInfoAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get NPO optimization parameters by id
        /// </summary>
        /// <remarks>
        /// This is the endpoint that returns the optimization parameters passed for an optimization.
        /// </remarks>
        /// <exception cref="FactSet.SDK.NorthfieldPortfolioOptimizer.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">from url, provided from the location header in the Create and Run NPO optimization endpoint</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of NPOOptimizationParametersRoot</returns>
        System.Threading.Tasks.Task<NPOOptimizationParametersRoot> GetOptimizationParametersAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get NPO optimization parameters by id
        /// </summary>
        /// <remarks>
        /// This is the endpoint that returns the optimization parameters passed for an optimization.
        /// </remarks>
        /// <exception cref="FactSet.SDK.NorthfieldPortfolioOptimizer.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">from url, provided from the location header in the Create and Run NPO optimization endpoint</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (NPOOptimizationParametersRoot)</returns>
        System.Threading.Tasks.Task<ApiResponse<NPOOptimizationParametersRoot>> GetOptimizationParametersWithHttpInfoAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get NPO optimization result by id
        /// </summary>
        /// <remarks>
        /// This is the endpoint to get the result of a previously requested optimization.
        /// </remarks>
        /// <exception cref="FactSet.SDK.NorthfieldPortfolioOptimizer.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">from url, provided from the location header in the Get NPO optimization status by id endpoint</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ObjectRoot</returns>
        System.Threading.Tasks.Task<ObjectRoot> GetOptimizationResultAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get NPO optimization result by id
        /// </summary>
        /// <remarks>
        /// This is the endpoint to get the result of a previously requested optimization.
        /// </remarks>
        /// <exception cref="FactSet.SDK.NorthfieldPortfolioOptimizer.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">from url, provided from the location header in the Get NPO optimization status by id endpoint</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ObjectRoot)</returns>
        System.Threading.Tasks.Task<ApiResponse<ObjectRoot>> GetOptimizationResultWithHttpInfoAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get NPO optimization status by id
        /// </summary>
        /// <remarks>
        /// This is the endpoint to check on the progress of a previously requested optimization.  If the optimization has finished computing, the body of the response will contain result in JSON.  Otherwise, the optimization is still running and the X-FactSet-Api-PickUp-Progress header will contain a progress percentage.
        /// </remarks>
        /// <exception cref="FactSet.SDK.NorthfieldPortfolioOptimizer.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">from url, provided from the location header in the Create and Run NPO optimization endpoint</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ObjectRoot</returns>
        System.Threading.Tasks.Task<ObjectRoot> GetOptimizationStatusByIdAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get NPO optimization status by id
        /// </summary>
        /// <remarks>
        /// This is the endpoint to check on the progress of a previously requested optimization.  If the optimization has finished computing, the body of the response will contain result in JSON.  Otherwise, the optimization is still running and the X-FactSet-Api-PickUp-Progress header will contain a progress percentage.
        /// </remarks>
        /// <exception cref="FactSet.SDK.NorthfieldPortfolioOptimizer.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">from url, provided from the location header in the Create and Run NPO optimization endpoint</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ObjectRoot)</returns>
        System.Threading.Tasks.Task<ApiResponse<ObjectRoot>> GetOptimizationStatusByIdWithHttpInfoAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Create and Run NPO optimization
        /// </summary>
        /// <remarks>
        /// This endpoint creates and runs NPO optimization specified in the POST body parameters.                Remarks:                * Any settings in POST body will act as a one-time override over the settings saved in the strategy document.
        /// </remarks>
        /// <exception cref="FactSet.SDK.NorthfieldPortfolioOptimizer.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xFactSetApiLongRunningDeadline">Long running deadline in seconds. (optional)</param>
        /// <param name="cacheControl">Standard HTTP header.  Accepts no-store, max-age, max-stale. (optional)</param>
        /// <param name="nPOOptimizationParametersRoot">Optimization Parameters (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ObjectRoot</returns>
        System.Threading.Tasks.Task<NPOOptimizerApi.PostAndOptimizeResponseWrapper> PostAndOptimizeAsync(int? xFactSetApiLongRunningDeadline = default(int?), string cacheControl = default(string), NPOOptimizationParametersRoot nPOOptimizationParametersRoot = default(NPOOptimizationParametersRoot), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create and Run NPO optimization
        /// </summary>
        /// <remarks>
        /// This endpoint creates and runs NPO optimization specified in the POST body parameters.                Remarks:                * Any settings in POST body will act as a one-time override over the settings saved in the strategy document.
        /// </remarks>
        /// <exception cref="FactSet.SDK.NorthfieldPortfolioOptimizer.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xFactSetApiLongRunningDeadline">Long running deadline in seconds. (optional)</param>
        /// <param name="cacheControl">Standard HTTP header.  Accepts no-store, max-age, max-stale. (optional)</param>
        /// <param name="nPOOptimizationParametersRoot">Optimization Parameters (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (NPOOptimizerApi.PostAndOptimizeResponseWrapper)</returns>
        System.Threading.Tasks.Task<ApiResponse<NPOOptimizerApi.PostAndOptimizeResponseWrapper>> PostAndOptimizeWithHttpInfoAsync(int? xFactSetApiLongRunningDeadline = default(int?), string cacheControl = default(string), NPOOptimizationParametersRoot nPOOptimizationParametersRoot = default(NPOOptimizationParametersRoot), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Create or Update NPO optimization and run it.
        /// </summary>
        /// <remarks>
        /// This endpoint updates and run the NPO optimization specified in the PUT body parameters. It also allows the creation of new NPO optimization with custom id.
        /// </remarks>
        /// <exception cref="FactSet.SDK.NorthfieldPortfolioOptimizer.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">from url, provided from the location header in the Create and Run NPO optimization endpoint</param>
        /// <param name="xFactSetApiLongRunningDeadline">Long running deadline in seconds. (optional)</param>
        /// <param name="cacheControl">Standard HTTP header.  Accepts no-store, max-age, max-stale. (optional)</param>
        /// <param name="nPOOptimizationParametersRoot">Optimization Parameters (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ObjectRoot</returns>
        System.Threading.Tasks.Task<NPOOptimizerApi.PutAndOptimizeResponseWrapper> PutAndOptimizeAsync(string id, int? xFactSetApiLongRunningDeadline = default(int?), string cacheControl = default(string), NPOOptimizationParametersRoot nPOOptimizationParametersRoot = default(NPOOptimizationParametersRoot), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create or Update NPO optimization and run it.
        /// </summary>
        /// <remarks>
        /// This endpoint updates and run the NPO optimization specified in the PUT body parameters. It also allows the creation of new NPO optimization with custom id.
        /// </remarks>
        /// <exception cref="FactSet.SDK.NorthfieldPortfolioOptimizer.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">from url, provided from the location header in the Create and Run NPO optimization endpoint</param>
        /// <param name="xFactSetApiLongRunningDeadline">Long running deadline in seconds. (optional)</param>
        /// <param name="cacheControl">Standard HTTP header.  Accepts no-store, max-age, max-stale. (optional)</param>
        /// <param name="nPOOptimizationParametersRoot">Optimization Parameters (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (NPOOptimizerApi.PutAndOptimizeResponseWrapper)</returns>
        System.Threading.Tasks.Task<ApiResponse<NPOOptimizerApi.PutAndOptimizeResponseWrapper>> PutAndOptimizeWithHttpInfoAsync(string id, int? xFactSetApiLongRunningDeadline = default(int?), string cacheControl = default(string), NPOOptimizationParametersRoot nPOOptimizationParametersRoot = default(NPOOptimizationParametersRoot), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface INPOOptimizerApi : INPOOptimizerApiSync, INPOOptimizerApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class NPOOptimizerApi : INPOOptimizerApi
    {
        private FactSet.SDK.NorthfieldPortfolioOptimizer.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        # region Response Type Disctionaries
                private static readonly Dictionary<HttpStatusCode, System.Type> CancelOptimizationByIdResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
        };
        private static readonly Dictionary<HttpStatusCode, System.Type> GetOptimizationParametersResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)200, typeof(NPOOptimizationParametersRoot) },
            { (HttpStatusCode)400, typeof(ClientErrorResponse) },
            { (HttpStatusCode)404, typeof(ClientErrorResponse) },
        };
        private static readonly Dictionary<HttpStatusCode, System.Type> GetOptimizationResultResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)200, typeof(ObjectRoot) },
            { (HttpStatusCode)400, typeof(ClientErrorResponse) },
            { (HttpStatusCode)404, typeof(ClientErrorResponse) },
        };
        private static readonly Dictionary<HttpStatusCode, System.Type> GetOptimizationStatusByIdResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)201, typeof(ObjectRoot) },
            { (HttpStatusCode)400, typeof(ClientErrorResponse) },
            { (HttpStatusCode)404, typeof(ClientErrorResponse) },
        };
        private static readonly Dictionary<HttpStatusCode, System.Type> PostAndOptimizeResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)201, typeof(ObjectRoot) },
            { (HttpStatusCode)202, typeof(CalculationInfoRoot) },
            { (HttpStatusCode)400, typeof(ClientErrorResponse) },
            { (HttpStatusCode)404, typeof(ClientErrorResponse) },
        };
        private static readonly Dictionary<HttpStatusCode, System.Type> PutAndOptimizeResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)201, typeof(ObjectRoot) },
            { (HttpStatusCode)202, typeof(CalculationInfoRoot) },
            { (HttpStatusCode)400, typeof(ClientErrorResponse) },
            { (HttpStatusCode)404, typeof(ClientErrorResponse) },
            { (HttpStatusCode)409, typeof(ClientErrorResponse) },
        };

        # endregion Response Type Disctionaries

        # region Api Response Objects
         
        /// <summary>
        /// Wrapper to support POST /analytics/engines/npo/v3/optimizations returning different types
        /// per status code.
        ///
        /// <list>
        /// <item>
        /// <description>
        /// 201 : ObjectRoot<br />
        /// Expected response, returns json if optimization is completed in a short span.
        /// </description>
        /// </item>
        /// 
        /// <item>
        /// <description>
        /// 202 : CalculationInfoRoot<br />
        /// Expected response, contains the poll URL in the Location header.
        /// </description>
        /// </item>
        /// </list>
        ///
        /// <example>
        /// <code>
        /// PostAndOptimizeResponseWrapper response = ...;
        /// switch (response.statusCode)
        /// {
        ///   case 201:
        ///     ObjectRoot data201 = response.getResponse201();
        ///     break;
        ///   case 202:
        ///     CalculationInfoRoot data202 = response.getResponse202();
        ///     break;
        ///  }
        /// </code>
        /// </example>
        /// </summary>
        public class PostAndOptimizeResponseWrapper {

            /// <summary>This constructor initializes the new PostAndOptimizeResponseWrapper to
            /// (<paramref name="statusCode"/>,<paramref name="response"/>).
            /// </summary>
            /// <param name="statusCode">Http status code of the response</param>
            /// <param name="response">Raw response</param>
            public PostAndOptimizeResponseWrapper(HttpStatusCode statusCode, object response)
            {
                StatusCode = statusCode;
                Response = response;
            }

            /// <summary>
            /// Http status code of the response
            /// </summary>
            public HttpStatusCode StatusCode { get; }

            /// <summary>
            /// Raw Object response
            /// </summary>
            public object Response { get; }

            
            /// <summary>
            /// Expected response, returns json if optimization is completed in a short span.
            /// </summary>
            public ObjectRoot Response201
            {
                get
                {
                    if (StatusCode != (HttpStatusCode) 201)
                    {
                        throw new FactSet.SDK.NorthfieldPortfolioOptimizer.Client.ApiException(500, "Invalid response getter called. Response201 can't return a " + StatusCode + " response");
                    }
                    return (ObjectRoot) Response;
                }
            }
            
            /// <summary>
            /// Expected response, contains the poll URL in the Location header.
            /// </summary>
            public CalculationInfoRoot Response202
            {
                get
                {
                    if (StatusCode != (HttpStatusCode) 202)
                    {
                        throw new FactSet.SDK.NorthfieldPortfolioOptimizer.Client.ApiException(500, "Invalid response getter called. Response202 can't return a " + StatusCode + " response");
                    }
                    return (CalculationInfoRoot) Response;
                }
            }
            
        }


        /// <summary>
        /// Wrapper to support PUT /analytics/engines/npo/v3/optimizations/{id} returning different types
        /// per status code.
        ///
        /// <list>
        /// <item>
        /// <description>
        /// 201 : ObjectRoot<br />
        /// Expected response, returns json if optimization is completed in a short span.
        /// </description>
        /// </item>
        /// 
        /// <item>
        /// <description>
        /// 202 : CalculationInfoRoot<br />
        /// Expected response, contains the poll URL in the Location header.
        /// </description>
        /// </item>
        /// </list>
        ///
        /// <example>
        /// <code>
        /// PutAndOptimizeResponseWrapper response = ...;
        /// switch (response.statusCode)
        /// {
        ///   case 201:
        ///     ObjectRoot data201 = response.getResponse201();
        ///     break;
        ///   case 202:
        ///     CalculationInfoRoot data202 = response.getResponse202();
        ///     break;
        ///  }
        /// </code>
        /// </example>
        /// </summary>
        public class PutAndOptimizeResponseWrapper {

            /// <summary>This constructor initializes the new PutAndOptimizeResponseWrapper to
            /// (<paramref name="statusCode"/>,<paramref name="response"/>).
            /// </summary>
            /// <param name="statusCode">Http status code of the response</param>
            /// <param name="response">Raw response</param>
            public PutAndOptimizeResponseWrapper(HttpStatusCode statusCode, object response)
            {
                StatusCode = statusCode;
                Response = response;
            }

            /// <summary>
            /// Http status code of the response
            /// </summary>
            public HttpStatusCode StatusCode { get; }

            /// <summary>
            /// Raw Object response
            /// </summary>
            public object Response { get; }

            
            /// <summary>
            /// Expected response, returns json if optimization is completed in a short span.
            /// </summary>
            public ObjectRoot Response201
            {
                get
                {
                    if (StatusCode != (HttpStatusCode) 201)
                    {
                        throw new FactSet.SDK.NorthfieldPortfolioOptimizer.Client.ApiException(500, "Invalid response getter called. Response201 can't return a " + StatusCode + " response");
                    }
                    return (ObjectRoot) Response;
                }
            }
            
            /// <summary>
            /// Expected response, contains the poll URL in the Location header.
            /// </summary>
            public CalculationInfoRoot Response202
            {
                get
                {
                    if (StatusCode != (HttpStatusCode) 202)
                    {
                        throw new FactSet.SDK.NorthfieldPortfolioOptimizer.Client.ApiException(500, "Invalid response getter called. Response202 can't return a " + StatusCode + " response");
                    }
                    return (CalculationInfoRoot) Response;
                }
            }
            
        }



        # endregion Api Response Objects

        /// <summary>
        /// Initializes a new instance of the <see cref="NPOOptimizerApi"/> class.
        /// </summary>
        /// <returns></returns>
        public NPOOptimizerApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="NPOOptimizerApi"/> class.
        /// </summary>
        /// <returns></returns>
        public NPOOptimizerApi(string basePath)
        {
            this.Configuration = FactSet.SDK.NorthfieldPortfolioOptimizer.Client.Configuration.MergeConfigurations(
                FactSet.SDK.NorthfieldPortfolioOptimizer.Client.GlobalConfiguration.Instance,
                new FactSet.SDK.NorthfieldPortfolioOptimizer.Client.Configuration { BasePath = basePath }
            );
            this.Client = new FactSet.SDK.NorthfieldPortfolioOptimizer.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new FactSet.SDK.NorthfieldPortfolioOptimizer.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = FactSet.SDK.NorthfieldPortfolioOptimizer.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="NPOOptimizerApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public NPOOptimizerApi(FactSet.SDK.NorthfieldPortfolioOptimizer.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = FactSet.SDK.NorthfieldPortfolioOptimizer.Client.Configuration.MergeConfigurations(
                FactSet.SDK.NorthfieldPortfolioOptimizer.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new FactSet.SDK.NorthfieldPortfolioOptimizer.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new FactSet.SDK.NorthfieldPortfolioOptimizer.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = FactSet.SDK.NorthfieldPortfolioOptimizer.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="NPOOptimizerApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public NPOOptimizerApi(FactSet.SDK.NorthfieldPortfolioOptimizer.Client.ISynchronousClient client, FactSet.SDK.NorthfieldPortfolioOptimizer.Client.IAsynchronousClient asyncClient, FactSet.SDK.NorthfieldPortfolioOptimizer.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = FactSet.SDK.NorthfieldPortfolioOptimizer.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public FactSet.SDK.NorthfieldPortfolioOptimizer.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public FactSet.SDK.NorthfieldPortfolioOptimizer.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public FactSet.SDK.NorthfieldPortfolioOptimizer.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public FactSet.SDK.NorthfieldPortfolioOptimizer.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Cancel NPO optimization by id This is the endpoint to cancel a previously submitted optimization.
        /// </summary>
        /// <exception cref="FactSet.SDK.NorthfieldPortfolioOptimizer.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">from url, provided from the location header in the Create and Run NPO optimization endpoint</param>
        /// <returns>void</returns>
        public void CancelOptimizationById(string id)
        {
            CancelOptimizationByIdWithHttpInfo(id);
        }

        /// <summary>
        /// Cancel NPO optimization by id This is the endpoint to cancel a previously submitted optimization.
        /// </summary>
        /// <exception cref="FactSet.SDK.NorthfieldPortfolioOptimizer.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">from url, provided from the location header in the Create and Run NPO optimization endpoint</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> CancelOptimizationByIdWithHttpInfo(string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new FactSet.SDK.NorthfieldPortfolioOptimizer.Client.ApiException(400, "Missing required parameter 'id' when calling NPOOptimizerApi->CancelOptimizationById");
            }

            FactSet.SDK.NorthfieldPortfolioOptimizer.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.NorthfieldPortfolioOptimizer.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = FactSet.SDK.NorthfieldPortfolioOptimizer.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.NorthfieldPortfolioOptimizer.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", FactSet.SDK.NorthfieldPortfolioOptimizer.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.NorthfieldPortfolioOptimizer.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = CancelOptimizationByIdResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Delete<
            Object>("/analytics/engines/npo/v3/optimizations/{id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CancelOptimizationById", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// Cancel NPO optimization by id This is the endpoint to cancel a previously submitted optimization.
        /// </summary>
        /// <exception cref="FactSet.SDK.NorthfieldPortfolioOptimizer.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">from url, provided from the location header in the Create and Run NPO optimization endpoint</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task CancelOptimizationByIdAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await CancelOptimizationByIdWithHttpInfoAsync(id, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Cancel NPO optimization by id This is the endpoint to cancel a previously submitted optimization.
        /// </summary>
        /// <exception cref="FactSet.SDK.NorthfieldPortfolioOptimizer.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">from url, provided from the location header in the Create and Run NPO optimization endpoint</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>

        public async System.Threading.Tasks.Task<ApiResponse<Object>> CancelOptimizationByIdWithHttpInfoAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new FactSet.SDK.NorthfieldPortfolioOptimizer.Client.ApiException(400, "Missing required parameter 'id' when calling NPOOptimizerApi->CancelOptimizationById");
            }


            FactSet.SDK.NorthfieldPortfolioOptimizer.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.NorthfieldPortfolioOptimizer.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = FactSet.SDK.NorthfieldPortfolioOptimizer.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.NorthfieldPortfolioOptimizer.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", FactSet.SDK.NorthfieldPortfolioOptimizer.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.NorthfieldPortfolioOptimizer.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = CancelOptimizationByIdResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/analytics/engines/npo/v3/optimizations/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CancelOptimizationById", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get NPO optimization parameters by id This is the endpoint that returns the optimization parameters passed for an optimization.
        /// </summary>
        /// <exception cref="FactSet.SDK.NorthfieldPortfolioOptimizer.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">from url, provided from the location header in the Create and Run NPO optimization endpoint</param>
        /// <returns>NPOOptimizationParametersRoot</returns>
        public NPOOptimizationParametersRoot GetOptimizationParameters(string id)
        {
            var localVarResponse = GetOptimizationParametersWithHttpInfo(id);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get NPO optimization parameters by id This is the endpoint that returns the optimization parameters passed for an optimization.
        /// </summary>
        /// <exception cref="FactSet.SDK.NorthfieldPortfolioOptimizer.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">from url, provided from the location header in the Create and Run NPO optimization endpoint</param>
        /// <returns>ApiResponse of NPOOptimizationParametersRoot</returns>
        public ApiResponse<NPOOptimizationParametersRoot> GetOptimizationParametersWithHttpInfo(string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new FactSet.SDK.NorthfieldPortfolioOptimizer.Client.ApiException(400, "Missing required parameter 'id' when calling NPOOptimizerApi->GetOptimizationParameters");
            }

            FactSet.SDK.NorthfieldPortfolioOptimizer.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.NorthfieldPortfolioOptimizer.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.NorthfieldPortfolioOptimizer.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.NorthfieldPortfolioOptimizer.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", FactSet.SDK.NorthfieldPortfolioOptimizer.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.NorthfieldPortfolioOptimizer.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = GetOptimizationParametersResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Get<
            NPOOptimizationParametersRoot>("/analytics/engines/npo/v3/optimizations/{id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetOptimizationParameters", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// Get NPO optimization parameters by id This is the endpoint that returns the optimization parameters passed for an optimization.
        /// </summary>
        /// <exception cref="FactSet.SDK.NorthfieldPortfolioOptimizer.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">from url, provided from the location header in the Create and Run NPO optimization endpoint</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of NPOOptimizationParametersRoot</returns>
        public async System.Threading.Tasks.Task<NPOOptimizationParametersRoot>GetOptimizationParametersAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await GetOptimizationParametersWithHttpInfoAsync(id, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get NPO optimization parameters by id This is the endpoint that returns the optimization parameters passed for an optimization.
        /// </summary>
        /// <exception cref="FactSet.SDK.NorthfieldPortfolioOptimizer.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">from url, provided from the location header in the Create and Run NPO optimization endpoint</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (NPOOptimizationParametersRoot)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<NPOOptimizationParametersRoot>> GetOptimizationParametersWithHttpInfoAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new FactSet.SDK.NorthfieldPortfolioOptimizer.Client.ApiException(400, "Missing required parameter 'id' when calling NPOOptimizerApi->GetOptimizationParameters");
            }


            FactSet.SDK.NorthfieldPortfolioOptimizer.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.NorthfieldPortfolioOptimizer.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.NorthfieldPortfolioOptimizer.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.NorthfieldPortfolioOptimizer.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", FactSet.SDK.NorthfieldPortfolioOptimizer.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.NorthfieldPortfolioOptimizer.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = GetOptimizationParametersResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<NPOOptimizationParametersRoot>("/analytics/engines/npo/v3/optimizations/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetOptimizationParameters", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get NPO optimization result by id This is the endpoint to get the result of a previously requested optimization.
        /// </summary>
        /// <exception cref="FactSet.SDK.NorthfieldPortfolioOptimizer.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">from url, provided from the location header in the Get NPO optimization status by id endpoint</param>
        /// <returns>ObjectRoot</returns>
        public ObjectRoot GetOptimizationResult(string id)
        {
            var localVarResponse = GetOptimizationResultWithHttpInfo(id);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get NPO optimization result by id This is the endpoint to get the result of a previously requested optimization.
        /// </summary>
        /// <exception cref="FactSet.SDK.NorthfieldPortfolioOptimizer.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">from url, provided from the location header in the Get NPO optimization status by id endpoint</param>
        /// <returns>ApiResponse of ObjectRoot</returns>
        public ApiResponse<ObjectRoot> GetOptimizationResultWithHttpInfo(string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new FactSet.SDK.NorthfieldPortfolioOptimizer.Client.ApiException(400, "Missing required parameter 'id' when calling NPOOptimizerApi->GetOptimizationResult");
            }

            FactSet.SDK.NorthfieldPortfolioOptimizer.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.NorthfieldPortfolioOptimizer.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.NorthfieldPortfolioOptimizer.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.NorthfieldPortfolioOptimizer.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", FactSet.SDK.NorthfieldPortfolioOptimizer.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.NorthfieldPortfolioOptimizer.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = GetOptimizationResultResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Get<
            ObjectRoot>("/analytics/engines/npo/v3/optimizations/{id}/result", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetOptimizationResult", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// Get NPO optimization result by id This is the endpoint to get the result of a previously requested optimization.
        /// </summary>
        /// <exception cref="FactSet.SDK.NorthfieldPortfolioOptimizer.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">from url, provided from the location header in the Get NPO optimization status by id endpoint</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ObjectRoot</returns>
        public async System.Threading.Tasks.Task<ObjectRoot>GetOptimizationResultAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await GetOptimizationResultWithHttpInfoAsync(id, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get NPO optimization result by id This is the endpoint to get the result of a previously requested optimization.
        /// </summary>
        /// <exception cref="FactSet.SDK.NorthfieldPortfolioOptimizer.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">from url, provided from the location header in the Get NPO optimization status by id endpoint</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ObjectRoot)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<ObjectRoot>> GetOptimizationResultWithHttpInfoAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new FactSet.SDK.NorthfieldPortfolioOptimizer.Client.ApiException(400, "Missing required parameter 'id' when calling NPOOptimizerApi->GetOptimizationResult");
            }


            FactSet.SDK.NorthfieldPortfolioOptimizer.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.NorthfieldPortfolioOptimizer.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.NorthfieldPortfolioOptimizer.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.NorthfieldPortfolioOptimizer.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", FactSet.SDK.NorthfieldPortfolioOptimizer.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.NorthfieldPortfolioOptimizer.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = GetOptimizationResultResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ObjectRoot>("/analytics/engines/npo/v3/optimizations/{id}/result", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetOptimizationResult", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get NPO optimization status by id This is the endpoint to check on the progress of a previously requested optimization.  If the optimization has finished computing, the body of the response will contain result in JSON.  Otherwise, the optimization is still running and the X-FactSet-Api-PickUp-Progress header will contain a progress percentage.
        /// </summary>
        /// <exception cref="FactSet.SDK.NorthfieldPortfolioOptimizer.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">from url, provided from the location header in the Create and Run NPO optimization endpoint</param>
        /// <returns>ObjectRoot</returns>
        public ObjectRoot GetOptimizationStatusById(string id)
        {
            var localVarResponse = GetOptimizationStatusByIdWithHttpInfo(id);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get NPO optimization status by id This is the endpoint to check on the progress of a previously requested optimization.  If the optimization has finished computing, the body of the response will contain result in JSON.  Otherwise, the optimization is still running and the X-FactSet-Api-PickUp-Progress header will contain a progress percentage.
        /// </summary>
        /// <exception cref="FactSet.SDK.NorthfieldPortfolioOptimizer.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">from url, provided from the location header in the Create and Run NPO optimization endpoint</param>
        /// <returns>ApiResponse of ObjectRoot</returns>
        public ApiResponse<ObjectRoot> GetOptimizationStatusByIdWithHttpInfo(string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new FactSet.SDK.NorthfieldPortfolioOptimizer.Client.ApiException(400, "Missing required parameter 'id' when calling NPOOptimizerApi->GetOptimizationStatusById");
            }

            FactSet.SDK.NorthfieldPortfolioOptimizer.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.NorthfieldPortfolioOptimizer.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.NorthfieldPortfolioOptimizer.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.NorthfieldPortfolioOptimizer.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", FactSet.SDK.NorthfieldPortfolioOptimizer.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.NorthfieldPortfolioOptimizer.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = GetOptimizationStatusByIdResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Get<
            ObjectRoot>("/analytics/engines/npo/v3/optimizations/{id}/status", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetOptimizationStatusById", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// Get NPO optimization status by id This is the endpoint to check on the progress of a previously requested optimization.  If the optimization has finished computing, the body of the response will contain result in JSON.  Otherwise, the optimization is still running and the X-FactSet-Api-PickUp-Progress header will contain a progress percentage.
        /// </summary>
        /// <exception cref="FactSet.SDK.NorthfieldPortfolioOptimizer.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">from url, provided from the location header in the Create and Run NPO optimization endpoint</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ObjectRoot</returns>
        public async System.Threading.Tasks.Task<ObjectRoot>GetOptimizationStatusByIdAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await GetOptimizationStatusByIdWithHttpInfoAsync(id, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get NPO optimization status by id This is the endpoint to check on the progress of a previously requested optimization.  If the optimization has finished computing, the body of the response will contain result in JSON.  Otherwise, the optimization is still running and the X-FactSet-Api-PickUp-Progress header will contain a progress percentage.
        /// </summary>
        /// <exception cref="FactSet.SDK.NorthfieldPortfolioOptimizer.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">from url, provided from the location header in the Create and Run NPO optimization endpoint</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ObjectRoot)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<ObjectRoot>> GetOptimizationStatusByIdWithHttpInfoAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new FactSet.SDK.NorthfieldPortfolioOptimizer.Client.ApiException(400, "Missing required parameter 'id' when calling NPOOptimizerApi->GetOptimizationStatusById");
            }


            FactSet.SDK.NorthfieldPortfolioOptimizer.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.NorthfieldPortfolioOptimizer.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.NorthfieldPortfolioOptimizer.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.NorthfieldPortfolioOptimizer.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", FactSet.SDK.NorthfieldPortfolioOptimizer.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.NorthfieldPortfolioOptimizer.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = GetOptimizationStatusByIdResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ObjectRoot>("/analytics/engines/npo/v3/optimizations/{id}/status", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetOptimizationStatusById", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create and Run NPO optimization This endpoint creates and runs NPO optimization specified in the POST body parameters.                Remarks:                * Any settings in POST body will act as a one-time override over the settings saved in the strategy document.
        /// </summary>
        /// <exception cref="FactSet.SDK.NorthfieldPortfolioOptimizer.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xFactSetApiLongRunningDeadline">Long running deadline in seconds. (optional)</param>
        /// <param name="cacheControl">Standard HTTP header.  Accepts no-store, max-age, max-stale. (optional)</param>
        /// <param name="nPOOptimizationParametersRoot">Optimization Parameters (optional)</param>
        /// <returns>NPOOptimizerApi.PostAndOptimizeResponseWrapper</returns>
        public NPOOptimizerApi.PostAndOptimizeResponseWrapper PostAndOptimize(int? xFactSetApiLongRunningDeadline = default(int?), string cacheControl = default(string), NPOOptimizationParametersRoot nPOOptimizationParametersRoot = default(NPOOptimizationParametersRoot))
        {
            var localVarResponse = PostAndOptimizeWithHttpInfo(xFactSetApiLongRunningDeadline, cacheControl, nPOOptimizationParametersRoot);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create and Run NPO optimization This endpoint creates and runs NPO optimization specified in the POST body parameters.                Remarks:                * Any settings in POST body will act as a one-time override over the settings saved in the strategy document.
        /// </summary>
        /// <exception cref="FactSet.SDK.NorthfieldPortfolioOptimizer.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xFactSetApiLongRunningDeadline">Long running deadline in seconds. (optional)</param>
        /// <param name="cacheControl">Standard HTTP header.  Accepts no-store, max-age, max-stale. (optional)</param>
        /// <param name="nPOOptimizationParametersRoot">Optimization Parameters (optional)</param>
        /// <returns>ApiResponse of ObjectRoot</returns>
        public ApiResponse<NPOOptimizerApi.PostAndOptimizeResponseWrapper> PostAndOptimizeWithHttpInfo(int? xFactSetApiLongRunningDeadline = default(int?), string cacheControl = default(string), NPOOptimizationParametersRoot nPOOptimizationParametersRoot = default(NPOOptimizationParametersRoot))
        {
            FactSet.SDK.NorthfieldPortfolioOptimizer.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.NorthfieldPortfolioOptimizer.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.NorthfieldPortfolioOptimizer.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.NorthfieldPortfolioOptimizer.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (xFactSetApiLongRunningDeadline != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-FactSet-Api-Long-Running-Deadline", FactSet.SDK.NorthfieldPortfolioOptimizer.Client.ClientUtils.ParameterToString(xFactSetApiLongRunningDeadline)); // header parameter
            }
            if (cacheControl != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Cache-Control", FactSet.SDK.NorthfieldPortfolioOptimizer.Client.ClientUtils.ParameterToString(cacheControl)); // header parameter
            }
            localVarRequestOptions.Data = nPOOptimizationParametersRoot;

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.NorthfieldPortfolioOptimizer.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = PostAndOptimizeResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Post<
            Object>("/analytics/engines/npo/v3/optimizations", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostAndOptimize", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            var postandoptimizeResponse = new PostAndOptimizeResponseWrapper(localVarResponse.StatusCode, localVarResponse.Data);
            return new ApiResponse<PostAndOptimizeResponseWrapper>(localVarResponse.StatusCode, postandoptimizeResponse);
        }

        /// <summary>
        /// Create and Run NPO optimization This endpoint creates and runs NPO optimization specified in the POST body parameters.                Remarks:                * Any settings in POST body will act as a one-time override over the settings saved in the strategy document.
        /// </summary>
        /// <exception cref="FactSet.SDK.NorthfieldPortfolioOptimizer.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xFactSetApiLongRunningDeadline">Long running deadline in seconds. (optional)</param>
        /// <param name="cacheControl">Standard HTTP header.  Accepts no-store, max-age, max-stale. (optional)</param>
        /// <param name="nPOOptimizationParametersRoot">Optimization Parameters (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ObjectRoot</returns>
        public async System.Threading.Tasks.Task<NPOOptimizerApi.PostAndOptimizeResponseWrapper>PostAndOptimizeAsync(int? xFactSetApiLongRunningDeadline = default(int?), string cacheControl = default(string), NPOOptimizationParametersRoot nPOOptimizationParametersRoot = default(NPOOptimizationParametersRoot), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await PostAndOptimizeWithHttpInfoAsync(xFactSetApiLongRunningDeadline, cacheControl, nPOOptimizationParametersRoot, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create and Run NPO optimization This endpoint creates and runs NPO optimization specified in the POST body parameters.                Remarks:                * Any settings in POST body will act as a one-time override over the settings saved in the strategy document.
        /// </summary>
        /// <exception cref="FactSet.SDK.NorthfieldPortfolioOptimizer.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xFactSetApiLongRunningDeadline">Long running deadline in seconds. (optional)</param>
        /// <param name="cacheControl">Standard HTTP header.  Accepts no-store, max-age, max-stale. (optional)</param>
        /// <param name="nPOOptimizationParametersRoot">Optimization Parameters (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ObjectRoot)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<NPOOptimizerApi.PostAndOptimizeResponseWrapper>> PostAndOptimizeWithHttpInfoAsync(int? xFactSetApiLongRunningDeadline = default(int?), string cacheControl = default(string), NPOOptimizationParametersRoot nPOOptimizationParametersRoot = default(NPOOptimizationParametersRoot), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            FactSet.SDK.NorthfieldPortfolioOptimizer.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.NorthfieldPortfolioOptimizer.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.NorthfieldPortfolioOptimizer.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.NorthfieldPortfolioOptimizer.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (xFactSetApiLongRunningDeadline != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-FactSet-Api-Long-Running-Deadline", FactSet.SDK.NorthfieldPortfolioOptimizer.Client.ClientUtils.ParameterToString(xFactSetApiLongRunningDeadline)); // header parameter
            }
            if (cacheControl != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Cache-Control", FactSet.SDK.NorthfieldPortfolioOptimizer.Client.ClientUtils.ParameterToString(cacheControl)); // header parameter
            }
            localVarRequestOptions.Data = nPOOptimizationParametersRoot;

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.NorthfieldPortfolioOptimizer.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = PostAndOptimizeResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/analytics/engines/npo/v3/optimizations", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostAndOptimize", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            var postandoptimizeResponse = new PostAndOptimizeResponseWrapper(localVarResponse.StatusCode, localVarResponse.Data);
            return new ApiResponse<PostAndOptimizeResponseWrapper>(localVarResponse.StatusCode, postandoptimizeResponse);
        }

        /// <summary>
        /// Create or Update NPO optimization and run it. This endpoint updates and run the NPO optimization specified in the PUT body parameters. It also allows the creation of new NPO optimization with custom id.
        /// </summary>
        /// <exception cref="FactSet.SDK.NorthfieldPortfolioOptimizer.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">from url, provided from the location header in the Create and Run NPO optimization endpoint</param>
        /// <param name="xFactSetApiLongRunningDeadline">Long running deadline in seconds. (optional)</param>
        /// <param name="cacheControl">Standard HTTP header.  Accepts no-store, max-age, max-stale. (optional)</param>
        /// <param name="nPOOptimizationParametersRoot">Optimization Parameters (optional)</param>
        /// <returns>NPOOptimizerApi.PutAndOptimizeResponseWrapper</returns>
        public NPOOptimizerApi.PutAndOptimizeResponseWrapper PutAndOptimize(string id, int? xFactSetApiLongRunningDeadline = default(int?), string cacheControl = default(string), NPOOptimizationParametersRoot nPOOptimizationParametersRoot = default(NPOOptimizationParametersRoot))
        {
            var localVarResponse = PutAndOptimizeWithHttpInfo(id, xFactSetApiLongRunningDeadline, cacheControl, nPOOptimizationParametersRoot);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create or Update NPO optimization and run it. This endpoint updates and run the NPO optimization specified in the PUT body parameters. It also allows the creation of new NPO optimization with custom id.
        /// </summary>
        /// <exception cref="FactSet.SDK.NorthfieldPortfolioOptimizer.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">from url, provided from the location header in the Create and Run NPO optimization endpoint</param>
        /// <param name="xFactSetApiLongRunningDeadline">Long running deadline in seconds. (optional)</param>
        /// <param name="cacheControl">Standard HTTP header.  Accepts no-store, max-age, max-stale. (optional)</param>
        /// <param name="nPOOptimizationParametersRoot">Optimization Parameters (optional)</param>
        /// <returns>ApiResponse of ObjectRoot</returns>
        public ApiResponse<NPOOptimizerApi.PutAndOptimizeResponseWrapper> PutAndOptimizeWithHttpInfo(string id, int? xFactSetApiLongRunningDeadline = default(int?), string cacheControl = default(string), NPOOptimizationParametersRoot nPOOptimizationParametersRoot = default(NPOOptimizationParametersRoot))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new FactSet.SDK.NorthfieldPortfolioOptimizer.Client.ApiException(400, "Missing required parameter 'id' when calling NPOOptimizerApi->PutAndOptimize");
            }

            FactSet.SDK.NorthfieldPortfolioOptimizer.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.NorthfieldPortfolioOptimizer.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.NorthfieldPortfolioOptimizer.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.NorthfieldPortfolioOptimizer.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", FactSet.SDK.NorthfieldPortfolioOptimizer.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (xFactSetApiLongRunningDeadline != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-FactSet-Api-Long-Running-Deadline", FactSet.SDK.NorthfieldPortfolioOptimizer.Client.ClientUtils.ParameterToString(xFactSetApiLongRunningDeadline)); // header parameter
            }
            if (cacheControl != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Cache-Control", FactSet.SDK.NorthfieldPortfolioOptimizer.Client.ClientUtils.ParameterToString(cacheControl)); // header parameter
            }
            localVarRequestOptions.Data = nPOOptimizationParametersRoot;

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.NorthfieldPortfolioOptimizer.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = PutAndOptimizeResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Put<
            Object>("/analytics/engines/npo/v3/optimizations/{id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PutAndOptimize", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            var putandoptimizeResponse = new PutAndOptimizeResponseWrapper(localVarResponse.StatusCode, localVarResponse.Data);
            return new ApiResponse<PutAndOptimizeResponseWrapper>(localVarResponse.StatusCode, putandoptimizeResponse);
        }

        /// <summary>
        /// Create or Update NPO optimization and run it. This endpoint updates and run the NPO optimization specified in the PUT body parameters. It also allows the creation of new NPO optimization with custom id.
        /// </summary>
        /// <exception cref="FactSet.SDK.NorthfieldPortfolioOptimizer.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">from url, provided from the location header in the Create and Run NPO optimization endpoint</param>
        /// <param name="xFactSetApiLongRunningDeadline">Long running deadline in seconds. (optional)</param>
        /// <param name="cacheControl">Standard HTTP header.  Accepts no-store, max-age, max-stale. (optional)</param>
        /// <param name="nPOOptimizationParametersRoot">Optimization Parameters (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ObjectRoot</returns>
        public async System.Threading.Tasks.Task<NPOOptimizerApi.PutAndOptimizeResponseWrapper>PutAndOptimizeAsync(string id, int? xFactSetApiLongRunningDeadline = default(int?), string cacheControl = default(string), NPOOptimizationParametersRoot nPOOptimizationParametersRoot = default(NPOOptimizationParametersRoot), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await PutAndOptimizeWithHttpInfoAsync(id, xFactSetApiLongRunningDeadline, cacheControl, nPOOptimizationParametersRoot, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create or Update NPO optimization and run it. This endpoint updates and run the NPO optimization specified in the PUT body parameters. It also allows the creation of new NPO optimization with custom id.
        /// </summary>
        /// <exception cref="FactSet.SDK.NorthfieldPortfolioOptimizer.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">from url, provided from the location header in the Create and Run NPO optimization endpoint</param>
        /// <param name="xFactSetApiLongRunningDeadline">Long running deadline in seconds. (optional)</param>
        /// <param name="cacheControl">Standard HTTP header.  Accepts no-store, max-age, max-stale. (optional)</param>
        /// <param name="nPOOptimizationParametersRoot">Optimization Parameters (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ObjectRoot)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<NPOOptimizerApi.PutAndOptimizeResponseWrapper>> PutAndOptimizeWithHttpInfoAsync(string id, int? xFactSetApiLongRunningDeadline = default(int?), string cacheControl = default(string), NPOOptimizationParametersRoot nPOOptimizationParametersRoot = default(NPOOptimizationParametersRoot), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new FactSet.SDK.NorthfieldPortfolioOptimizer.Client.ApiException(400, "Missing required parameter 'id' when calling NPOOptimizerApi->PutAndOptimize");
            }


            FactSet.SDK.NorthfieldPortfolioOptimizer.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.NorthfieldPortfolioOptimizer.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.NorthfieldPortfolioOptimizer.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.NorthfieldPortfolioOptimizer.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", FactSet.SDK.NorthfieldPortfolioOptimizer.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (xFactSetApiLongRunningDeadline != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-FactSet-Api-Long-Running-Deadline", FactSet.SDK.NorthfieldPortfolioOptimizer.Client.ClientUtils.ParameterToString(xFactSetApiLongRunningDeadline)); // header parameter
            }
            if (cacheControl != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Cache-Control", FactSet.SDK.NorthfieldPortfolioOptimizer.Client.ClientUtils.ParameterToString(cacheControl)); // header parameter
            }
            localVarRequestOptions.Data = nPOOptimizationParametersRoot;

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.NorthfieldPortfolioOptimizer.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = PutAndOptimizeResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<Object>("/analytics/engines/npo/v3/optimizations/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PutAndOptimize", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            var putandoptimizeResponse = new PutAndOptimizeResponseWrapper(localVarResponse.StatusCode, localVarResponse.Data);
            return new ApiResponse<PutAndOptimizeResponseWrapper>(localVarResponse.StatusCode, putandoptimizeResponse);
        }

    }
}
