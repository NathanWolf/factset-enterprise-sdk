/*
 * DSOTM API
 *
 * Allow clients to send transactions data to FactSet.
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: api@factset.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = FactSet.SDK.DirectStreamingofTransactionMessages.Client.OpenAPIDateConverter;

namespace FactSet.SDK.DirectStreamingofTransactionMessages.Model
{
    /// <summary>
    /// ExecutionParameters
    /// </summary>
    [DataContract(Name = "ExecutionParameters")]
    public partial class ExecutionParameters : IEquatable<ExecutionParameters>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ExecutionParameters" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ExecutionParameters() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ExecutionParameters" /> class.
        /// </summary>
        /// <param name="net">Cash value of the transaction, net of brokerage costs. (required).</param>
        /// <param name="gross">Cash value of the transaction, including brokerage costs (required).</param>
        /// <param name="settlementvalue">Cash value of the transaction, a value that has been multiplied by an applicable FX rates to convert the a transacti (required).</param>
        /// <param name="settlementdate">Settlement date in YYYYMMDD format (required).</param>
        /// <param name="settlementcurrencyiso">Currency code for Settlement Value.</param>
        /// <param name="portfolio">Path of the portfolio (Ex: Client:/folder1/testing.ofdb) (required).</param>
        /// <param name="transactionid">Unique id for the transaction (required).</param>
        /// <param name="symbol">Symbol corresponding to the traded instrument. (required).</param>
        /// <param name="description">Description.</param>
        /// <param name="tradetype">Trade type could be any of the following values BL, BC, SL, SS.  which stands for Buy Long, Buy to cover, Sell Long and Sell Short respectively. (required).</param>
        /// <param name="status">Status could be any of the following value: ACCT or CNCL.  which stands for Accounted and Cancelled respectively. (required).</param>
        /// <param name="tradedate">Transaction date which is in the format YYYYMMDD (required).</param>
        /// <param name="transactionleaves">Shares that have been ordered and not executed.</param>
        /// <param name="amount">Quantity of the instrument traded. (required).</param>
        /// <param name="currencyiso">The currency code of cash valued fields, Net Amount and Gross Amount. (required).</param>
        /// <param name="foreignexchangerate">FX rate that can be picked up by PA, multiplied with the cash valued fields, Net, Gross, to allow PA to show transactions in reporting currency..</param>
        public ExecutionParameters(float net, float gross, float settlementvalue, string settlementdate, string portfolio, string transactionid, string symbol, string tradetype, string status, string tradedate, float amount, string currencyiso,string settlementcurrencyiso = default(string), string description = default(string), float transactionleaves = default(float), float foreignexchangerate = default(float))
        {
            this.Net = net;
            this.Gross = gross;
            this.Settlementvalue = settlementvalue;
            // to ensure "settlementdate" is required (not null)
            if (settlementdate == null) {
                throw new ArgumentNullException("settlementdate is a required property for ExecutionParameters and cannot be null");
            }
            this.Settlementdate = settlementdate;
            // to ensure "portfolio" is required (not null)
            if (portfolio == null) {
                throw new ArgumentNullException("portfolio is a required property for ExecutionParameters and cannot be null");
            }
            this.Portfolio = portfolio;
            // to ensure "transactionid" is required (not null)
            if (transactionid == null) {
                throw new ArgumentNullException("transactionid is a required property for ExecutionParameters and cannot be null");
            }
            this.Transactionid = transactionid;
            // to ensure "symbol" is required (not null)
            if (symbol == null) {
                throw new ArgumentNullException("symbol is a required property for ExecutionParameters and cannot be null");
            }
            this.Symbol = symbol;
            // to ensure "tradetype" is required (not null)
            if (tradetype == null) {
                throw new ArgumentNullException("tradetype is a required property for ExecutionParameters and cannot be null");
            }
            this.Tradetype = tradetype;
            // to ensure "status" is required (not null)
            if (status == null) {
                throw new ArgumentNullException("status is a required property for ExecutionParameters and cannot be null");
            }
            this.Status = status;
            // to ensure "tradedate" is required (not null)
            if (tradedate == null) {
                throw new ArgumentNullException("tradedate is a required property for ExecutionParameters and cannot be null");
            }
            this.Tradedate = tradedate;
            this.Amount = amount;
            // to ensure "currencyiso" is required (not null)
            if (currencyiso == null) {
                throw new ArgumentNullException("currencyiso is a required property for ExecutionParameters and cannot be null");
            }
            this.Currencyiso = currencyiso;
            this.Settlementcurrencyiso = settlementcurrencyiso;
            this.Description = description;
            this.Transactionleaves = transactionleaves;
            this.Foreignexchangerate = foreignexchangerate;
        }

        /// <summary>
        /// Cash value of the transaction, net of brokerage costs.
        /// </summary>
        /// <value>Cash value of the transaction, net of brokerage costs.</value>
        [DataMember(Name = "net", IsRequired = true, EmitDefaultValue = false)]
        public float Net { get; set; }

        /// <summary>
        /// Cash value of the transaction, including brokerage costs
        /// </summary>
        /// <value>Cash value of the transaction, including brokerage costs</value>
        [DataMember(Name = "gross", IsRequired = true, EmitDefaultValue = false)]
        public float Gross { get; set; }

        /// <summary>
        /// Cash value of the transaction, a value that has been multiplied by an applicable FX rates to convert the a transacti
        /// </summary>
        /// <value>Cash value of the transaction, a value that has been multiplied by an applicable FX rates to convert the a transacti</value>
        [DataMember(Name = "settlementvalue", IsRequired = true, EmitDefaultValue = false)]
        public float Settlementvalue { get; set; }

        /// <summary>
        /// Settlement date in YYYYMMDD format
        /// </summary>
        /// <value>Settlement date in YYYYMMDD format</value>
        [DataMember(Name = "settlementdate", IsRequired = true, EmitDefaultValue = false)]
        public string Settlementdate { get; set; }

        /// <summary>
        /// Currency code for Settlement Value
        /// </summary>
        /// <value>Currency code for Settlement Value</value>
        [DataMember(Name = "settlementcurrencyiso", EmitDefaultValue = true)]
        public string Settlementcurrencyiso { get; set; }

        /// <summary>
        /// Path of the portfolio (Ex: Client:/folder1/testing.ofdb)
        /// </summary>
        /// <value>Path of the portfolio (Ex: Client:/folder1/testing.ofdb)</value>
        [DataMember(Name = "portfolio", IsRequired = true, EmitDefaultValue = false)]
        public string Portfolio { get; set; }

        /// <summary>
        /// Unique id for the transaction
        /// </summary>
        /// <value>Unique id for the transaction</value>
        [DataMember(Name = "transactionid", IsRequired = true, EmitDefaultValue = false)]
        public string Transactionid { get; set; }

        /// <summary>
        /// Symbol corresponding to the traded instrument.
        /// </summary>
        /// <value>Symbol corresponding to the traded instrument.</value>
        [DataMember(Name = "symbol", IsRequired = true, EmitDefaultValue = false)]
        public string Symbol { get; set; }

        /// <summary>
        /// Description
        /// </summary>
        /// <value>Description</value>
        [DataMember(Name = "description", EmitDefaultValue = true)]
        public string Description { get; set; }

        /// <summary>
        /// Trade type could be any of the following values BL, BC, SL, SS.  which stands for Buy Long, Buy to cover, Sell Long and Sell Short respectively.
        /// </summary>
        /// <value>Trade type could be any of the following values BL, BC, SL, SS.  which stands for Buy Long, Buy to cover, Sell Long and Sell Short respectively.</value>
        [DataMember(Name = "tradetype", IsRequired = true, EmitDefaultValue = false)]
        public string Tradetype { get; set; }

        /// <summary>
        /// Status could be any of the following value: ACCT or CNCL.  which stands for Accounted and Cancelled respectively.
        /// </summary>
        /// <value>Status could be any of the following value: ACCT or CNCL.  which stands for Accounted and Cancelled respectively.</value>
        [DataMember(Name = "status", IsRequired = true, EmitDefaultValue = false)]
        public string Status { get; set; }

        /// <summary>
        /// Transaction date which is in the format YYYYMMDD
        /// </summary>
        /// <value>Transaction date which is in the format YYYYMMDD</value>
        [DataMember(Name = "tradedate", IsRequired = true, EmitDefaultValue = false)]
        public string Tradedate { get; set; }

        /// <summary>
        /// Shares that have been ordered and not executed
        /// </summary>
        /// <value>Shares that have been ordered and not executed</value>
        [DataMember(Name = "transactionleaves", EmitDefaultValue = false)]
        public float Transactionleaves { get; set; }

        /// <summary>
        /// Quantity of the instrument traded.
        /// </summary>
        /// <value>Quantity of the instrument traded.</value>
        [DataMember(Name = "amount", IsRequired = true, EmitDefaultValue = false)]
        public float Amount { get; set; }

        /// <summary>
        /// The currency code of cash valued fields, Net Amount and Gross Amount.
        /// </summary>
        /// <value>The currency code of cash valued fields, Net Amount and Gross Amount.</value>
        [DataMember(Name = "currencyiso", IsRequired = true, EmitDefaultValue = false)]
        public string Currencyiso { get; set; }

        /// <summary>
        /// FX rate that can be picked up by PA, multiplied with the cash valued fields, Net, Gross, to allow PA to show transactions in reporting currency.
        /// </summary>
        /// <value>FX rate that can be picked up by PA, multiplied with the cash valued fields, Net, Gross, to allow PA to show transactions in reporting currency.</value>
        [DataMember(Name = "foreignexchangerate", EmitDefaultValue = false)]
        public float Foreignexchangerate { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ExecutionParameters {\n");
            sb.Append("  Net: ").Append(Net).Append("\n");
            sb.Append("  Gross: ").Append(Gross).Append("\n");
            sb.Append("  Settlementvalue: ").Append(Settlementvalue).Append("\n");
            sb.Append("  Settlementdate: ").Append(Settlementdate).Append("\n");
            sb.Append("  Settlementcurrencyiso: ").Append(Settlementcurrencyiso).Append("\n");
            sb.Append("  Portfolio: ").Append(Portfolio).Append("\n");
            sb.Append("  Transactionid: ").Append(Transactionid).Append("\n");
            sb.Append("  Symbol: ").Append(Symbol).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Tradetype: ").Append(Tradetype).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  Tradedate: ").Append(Tradedate).Append("\n");
            sb.Append("  Transactionleaves: ").Append(Transactionleaves).Append("\n");
            sb.Append("  Amount: ").Append(Amount).Append("\n");
            sb.Append("  Currencyiso: ").Append(Currencyiso).Append("\n");
            sb.Append("  Foreignexchangerate: ").Append(Foreignexchangerate).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ExecutionParameters);
        }

        /// <summary>
        /// Returns true if ExecutionParameters instances are equal
        /// </summary>
        /// <param name="input">Instance of ExecutionParameters to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ExecutionParameters input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Net == input.Net ||
                    this.Net.Equals(input.Net)
                ) && 
                (
                    this.Gross == input.Gross ||
                    this.Gross.Equals(input.Gross)
                ) && 
                (
                    this.Settlementvalue == input.Settlementvalue ||
                    this.Settlementvalue.Equals(input.Settlementvalue)
                ) && 
                (
                    this.Settlementdate == input.Settlementdate ||
                    (this.Settlementdate != null &&
                    this.Settlementdate.Equals(input.Settlementdate))
                ) && 
                (
                    this.Settlementcurrencyiso == input.Settlementcurrencyiso ||
                    (this.Settlementcurrencyiso != null &&
                    this.Settlementcurrencyiso.Equals(input.Settlementcurrencyiso))
                ) && 
                (
                    this.Portfolio == input.Portfolio ||
                    (this.Portfolio != null &&
                    this.Portfolio.Equals(input.Portfolio))
                ) && 
                (
                    this.Transactionid == input.Transactionid ||
                    (this.Transactionid != null &&
                    this.Transactionid.Equals(input.Transactionid))
                ) && 
                (
                    this.Symbol == input.Symbol ||
                    (this.Symbol != null &&
                    this.Symbol.Equals(input.Symbol))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.Tradetype == input.Tradetype ||
                    (this.Tradetype != null &&
                    this.Tradetype.Equals(input.Tradetype))
                ) && 
                (
                    this.Status == input.Status ||
                    (this.Status != null &&
                    this.Status.Equals(input.Status))
                ) && 
                (
                    this.Tradedate == input.Tradedate ||
                    (this.Tradedate != null &&
                    this.Tradedate.Equals(input.Tradedate))
                ) && 
                (
                    this.Transactionleaves == input.Transactionleaves ||
                    this.Transactionleaves.Equals(input.Transactionleaves)
                ) && 
                (
                    this.Amount == input.Amount ||
                    this.Amount.Equals(input.Amount)
                ) && 
                (
                    this.Currencyiso == input.Currencyiso ||
                    (this.Currencyiso != null &&
                    this.Currencyiso.Equals(input.Currencyiso))
                ) && 
                (
                    this.Foreignexchangerate == input.Foreignexchangerate ||
                    this.Foreignexchangerate.Equals(input.Foreignexchangerate)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.Net.GetHashCode();
                hashCode = (hashCode * 59) + this.Gross.GetHashCode();
                hashCode = (hashCode * 59) + this.Settlementvalue.GetHashCode();
                if (this.Settlementdate != null)
                {
                    hashCode = (hashCode * 59) + this.Settlementdate.GetHashCode();
                }
                if (this.Settlementcurrencyiso != null)
                {
                    hashCode = (hashCode * 59) + this.Settlementcurrencyiso.GetHashCode();
                }
                if (this.Portfolio != null)
                {
                    hashCode = (hashCode * 59) + this.Portfolio.GetHashCode();
                }
                if (this.Transactionid != null)
                {
                    hashCode = (hashCode * 59) + this.Transactionid.GetHashCode();
                }
                if (this.Symbol != null)
                {
                    hashCode = (hashCode * 59) + this.Symbol.GetHashCode();
                }
                if (this.Description != null)
                {
                    hashCode = (hashCode * 59) + this.Description.GetHashCode();
                }
                if (this.Tradetype != null)
                {
                    hashCode = (hashCode * 59) + this.Tradetype.GetHashCode();
                }
                if (this.Status != null)
                {
                    hashCode = (hashCode * 59) + this.Status.GetHashCode();
                }
                if (this.Tradedate != null)
                {
                    hashCode = (hashCode * 59) + this.Tradedate.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Transactionleaves.GetHashCode();
                hashCode = (hashCode * 59) + this.Amount.GetHashCode();
                if (this.Currencyiso != null)
                {
                    hashCode = (hashCode * 59) + this.Currencyiso.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Foreignexchangerate.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
