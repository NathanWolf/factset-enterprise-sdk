/*
 * FPE API
 *
 * FactSet Programmatic Environment (FPE) API is an API for users to interact with FPE programmatically, streamlining path from research to production.
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = FactSet.SDK.FactSetProgrammaticEnvironment.Client.OpenAPIDateConverter;

namespace FactSet.SDK.FactSetProgrammaticEnvironment.Model
{
    /// <summary>
    /// Calculation
    /// </summary>
    [DataContract(Name = "Calculation")]
    public partial class Calculation : IEquatable<Calculation>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Calculation" /> class.
        /// </summary>
        /// <param name="script">The python script that will be executed.</param>
        /// <param name="notebook">Notebook file to be executed. Only notebooks in the Client directory are currently supported..</param>
        public Calculation(string script = default(string), string notebook = default(string))
        {
            this.Script = script;
            this.Notebook = notebook;
        }

        /// <summary>
        /// The python script that will be executed
        /// </summary>
        /// <value>The python script that will be executed</value>
        [DataMember(Name = "script", EmitDefaultValue = false)]
        public string Script { get; set; }

        /// <summary>
        /// Notebook file to be executed. Only notebooks in the Client directory are currently supported.
        /// </summary>
        /// <value>Notebook file to be executed. Only notebooks in the Client directory are currently supported.</value>
        [DataMember(Name = "notebook", EmitDefaultValue = false)]
        public string Notebook { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Calculation {\n");
            sb.Append("  Script: ").Append(Script).Append("\n");
            sb.Append("  Notebook: ").Append(Notebook).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Calculation);
        }

        /// <summary>
        /// Returns true if Calculation instances are equal
        /// </summary>
        /// <param name="input">Instance of Calculation to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Calculation input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Script == input.Script ||
                    (this.Script != null &&
                    this.Script.Equals(input.Script))
                ) && 
                (
                    this.Notebook == input.Notebook ||
                    (this.Notebook != null &&
                    this.Notebook.Equals(input.Notebook))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Script != null)
                {
                    hashCode = (hashCode * 59) + this.Script.GetHashCode();
                }
                if (this.Notebook != null)
                {
                    hashCode = (hashCode * 59) + this.Notebook.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
