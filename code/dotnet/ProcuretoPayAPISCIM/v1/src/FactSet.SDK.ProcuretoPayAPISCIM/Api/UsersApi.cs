/*
 * FactSet SCIM API
 *
 * FactSet's SCIM API implementation.
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using FactSet.SDK.ProcuretoPayAPISCIM.Client;
using FactSet.SDK.ProcuretoPayAPISCIM.Model;
using FactSet.SDK.Utils.Authentication;

namespace FactSet.SDK.ProcuretoPayAPISCIM.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IUsersApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Get a list of users.
        /// </summary>
        /// <exception cref="FactSet.SDK.ProcuretoPayAPISCIM.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Resource filter string. See [RFC 7644 section 3.4.2.2](https://tools.ietf.org/html/rfc7644#section-3.4.2.2) for syntax. Note this API implementation also supports a non-standard \&quot;re\&quot; operator for regular expression matching against strings. (optional)</param>
        /// <param name="startIndex">Result start index. The one-based index of the first result to be returned in the list of resources. For example, to exclude the first two resources, use a *startIndex* value of 3. This parameter has a default value of 1. This index applies *after* any resource filtration has been applied as specified by the *filter* argument. (optional)</param>
        /// <param name="count">Maximum resource count. The server will not return more resources than this value, although it may return fewer. (optional)</param>
        /// <param name="attributes">Attribute whitelist filter string. A comma-separated list of resource attribute names to be returned in the response, overriding the set of attributes that would be returned by default. Attribute names must be specified in standard attribute notation (see [RFC 7644 section 3.10](https://datatracker.ietf.org/doc/html/rfc7644#section-3.10).) This parameter cannot be used with the *excludedAttributes* parameter. (optional)</param>
        /// <param name="excludedAttributes">Attribute blacklist filter string. A comma-separated list of resource attribute names to be excluded in the response, overriding the set of attributes that would be returned by default. Attribute names must be specified in standard attribute notation (see [RFC 7644 section 3.10](https://datatracker.ietf.org/doc/html/rfc7644#section-3.10).) This parameter cannot be used with the *attributes* parameter. (optional)</param>
        /// <returns>UserResourceList</returns>
        UserResourceList UsersGet(string filter = default(string), int? startIndex = default(int?), int? count = default(int?), string attributes = default(string), string excludedAttributes = default(string));

        /// <summary>
        /// Get a list of users.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FactSet.SDK.ProcuretoPayAPISCIM.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Resource filter string. See [RFC 7644 section 3.4.2.2](https://tools.ietf.org/html/rfc7644#section-3.4.2.2) for syntax. Note this API implementation also supports a non-standard \&quot;re\&quot; operator for regular expression matching against strings. (optional)</param>
        /// <param name="startIndex">Result start index. The one-based index of the first result to be returned in the list of resources. For example, to exclude the first two resources, use a *startIndex* value of 3. This parameter has a default value of 1. This index applies *after* any resource filtration has been applied as specified by the *filter* argument. (optional)</param>
        /// <param name="count">Maximum resource count. The server will not return more resources than this value, although it may return fewer. (optional)</param>
        /// <param name="attributes">Attribute whitelist filter string. A comma-separated list of resource attribute names to be returned in the response, overriding the set of attributes that would be returned by default. Attribute names must be specified in standard attribute notation (see [RFC 7644 section 3.10](https://datatracker.ietf.org/doc/html/rfc7644#section-3.10).) This parameter cannot be used with the *excludedAttributes* parameter. (optional)</param>
        /// <param name="excludedAttributes">Attribute blacklist filter string. A comma-separated list of resource attribute names to be excluded in the response, overriding the set of attributes that would be returned by default. Attribute names must be specified in standard attribute notation (see [RFC 7644 section 3.10](https://datatracker.ietf.org/doc/html/rfc7644#section-3.10).) This parameter cannot be used with the *attributes* parameter. (optional)</param>
        /// <returns>ApiResponse of UserResourceList</returns>
        ApiResponse<UserResourceList> UsersGetWithHttpInfo(string filter = default(string), int? startIndex = default(int?), int? count = default(int?), string attributes = default(string), string excludedAttributes = default(string));
        /// <summary>
        /// Delete a user
        /// </summary>
        /// <exception cref="FactSet.SDK.ProcuretoPayAPISCIM.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of resource.</param>
        /// <returns>void</returns>
        void UsersIdDelete(string id);

        /// <summary>
        /// Delete a user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FactSet.SDK.ProcuretoPayAPISCIM.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of resource.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UsersIdDeleteWithHttpInfo(string id);
        /// <summary>
        /// Get a user.
        /// </summary>
        /// <exception cref="FactSet.SDK.ProcuretoPayAPISCIM.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of resource.</param>
        /// <returns>UserResource</returns>
        UserResource UsersIdGet(string id);

        /// <summary>
        /// Get a user.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FactSet.SDK.ProcuretoPayAPISCIM.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of resource.</param>
        /// <returns>ApiResponse of UserResource</returns>
        ApiResponse<UserResource> UsersIdGetWithHttpInfo(string id);
        /// <summary>
        /// Patch a user (add, replace, or remove attributes of a user.)
        /// </summary>
        /// <exception cref="FactSet.SDK.ProcuretoPayAPISCIM.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of resource.</param>
        /// <param name="patch"> (optional)</param>
        /// <returns>UserResource</returns>
        UserResource UsersIdPatch(string id, Patch patch = default(Patch));

        /// <summary>
        /// Patch a user (add, replace, or remove attributes of a user.)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FactSet.SDK.ProcuretoPayAPISCIM.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of resource.</param>
        /// <param name="patch"> (optional)</param>
        /// <returns>ApiResponse of UserResource</returns>
        ApiResponse<UserResource> UsersIdPatchWithHttpInfo(string id, Patch patch = default(Patch));
        /// <summary>
        /// Replace a user.
        /// </summary>
        /// <exception cref="FactSet.SDK.ProcuretoPayAPISCIM.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of resource.</param>
        /// <param name="userResource">User resource.</param>
        /// <returns>UserResource</returns>
        UserResource UsersIdPut(string id, UserResource userResource);

        /// <summary>
        /// Replace a user.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FactSet.SDK.ProcuretoPayAPISCIM.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of resource.</param>
        /// <param name="userResource">User resource.</param>
        /// <returns>ApiResponse of UserResource</returns>
        ApiResponse<UserResource> UsersIdPutWithHttpInfo(string id, UserResource userResource);
        /// <summary>
        /// Create a user.
        /// </summary>
        /// <exception cref="FactSet.SDK.ProcuretoPayAPISCIM.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userResource">User resource.</param>
        /// <returns>UserResource</returns>
        UserResource UsersPost(UserResource userResource);

        /// <summary>
        /// Create a user.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FactSet.SDK.ProcuretoPayAPISCIM.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userResource">User resource.</param>
        /// <returns>ApiResponse of UserResource</returns>
        ApiResponse<UserResource> UsersPostWithHttpInfo(UserResource userResource);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IUsersApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Get a list of users.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FactSet.SDK.ProcuretoPayAPISCIM.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Resource filter string. See [RFC 7644 section 3.4.2.2](https://tools.ietf.org/html/rfc7644#section-3.4.2.2) for syntax. Note this API implementation also supports a non-standard \&quot;re\&quot; operator for regular expression matching against strings. (optional)</param>
        /// <param name="startIndex">Result start index. The one-based index of the first result to be returned in the list of resources. For example, to exclude the first two resources, use a *startIndex* value of 3. This parameter has a default value of 1. This index applies *after* any resource filtration has been applied as specified by the *filter* argument. (optional)</param>
        /// <param name="count">Maximum resource count. The server will not return more resources than this value, although it may return fewer. (optional)</param>
        /// <param name="attributes">Attribute whitelist filter string. A comma-separated list of resource attribute names to be returned in the response, overriding the set of attributes that would be returned by default. Attribute names must be specified in standard attribute notation (see [RFC 7644 section 3.10](https://datatracker.ietf.org/doc/html/rfc7644#section-3.10).) This parameter cannot be used with the *excludedAttributes* parameter. (optional)</param>
        /// <param name="excludedAttributes">Attribute blacklist filter string. A comma-separated list of resource attribute names to be excluded in the response, overriding the set of attributes that would be returned by default. Attribute names must be specified in standard attribute notation (see [RFC 7644 section 3.10](https://datatracker.ietf.org/doc/html/rfc7644#section-3.10).) This parameter cannot be used with the *attributes* parameter. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UserResourceList</returns>
        System.Threading.Tasks.Task<UserResourceList> UsersGetAsync(string filter = default(string), int? startIndex = default(int?), int? count = default(int?), string attributes = default(string), string excludedAttributes = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get a list of users.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FactSet.SDK.ProcuretoPayAPISCIM.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Resource filter string. See [RFC 7644 section 3.4.2.2](https://tools.ietf.org/html/rfc7644#section-3.4.2.2) for syntax. Note this API implementation also supports a non-standard \&quot;re\&quot; operator for regular expression matching against strings. (optional)</param>
        /// <param name="startIndex">Result start index. The one-based index of the first result to be returned in the list of resources. For example, to exclude the first two resources, use a *startIndex* value of 3. This parameter has a default value of 1. This index applies *after* any resource filtration has been applied as specified by the *filter* argument. (optional)</param>
        /// <param name="count">Maximum resource count. The server will not return more resources than this value, although it may return fewer. (optional)</param>
        /// <param name="attributes">Attribute whitelist filter string. A comma-separated list of resource attribute names to be returned in the response, overriding the set of attributes that would be returned by default. Attribute names must be specified in standard attribute notation (see [RFC 7644 section 3.10](https://datatracker.ietf.org/doc/html/rfc7644#section-3.10).) This parameter cannot be used with the *excludedAttributes* parameter. (optional)</param>
        /// <param name="excludedAttributes">Attribute blacklist filter string. A comma-separated list of resource attribute names to be excluded in the response, overriding the set of attributes that would be returned by default. Attribute names must be specified in standard attribute notation (see [RFC 7644 section 3.10](https://datatracker.ietf.org/doc/html/rfc7644#section-3.10).) This parameter cannot be used with the *attributes* parameter. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UserResourceList)</returns>
        System.Threading.Tasks.Task<ApiResponse<UserResourceList>> UsersGetWithHttpInfoAsync(string filter = default(string), int? startIndex = default(int?), int? count = default(int?), string attributes = default(string), string excludedAttributes = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Delete a user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FactSet.SDK.ProcuretoPayAPISCIM.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of resource.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UsersIdDeleteAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Delete a user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FactSet.SDK.ProcuretoPayAPISCIM.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of resource.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UsersIdDeleteWithHttpInfoAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get a user.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FactSet.SDK.ProcuretoPayAPISCIM.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of resource.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UserResource</returns>
        System.Threading.Tasks.Task<UserResource> UsersIdGetAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get a user.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FactSet.SDK.ProcuretoPayAPISCIM.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of resource.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UserResource)</returns>
        System.Threading.Tasks.Task<ApiResponse<UserResource>> UsersIdGetWithHttpInfoAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Patch a user (add, replace, or remove attributes of a user.)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FactSet.SDK.ProcuretoPayAPISCIM.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of resource.</param>
        /// <param name="patch"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UserResource</returns>
        System.Threading.Tasks.Task<UserResource> UsersIdPatchAsync(string id, Patch patch = default(Patch), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Patch a user (add, replace, or remove attributes of a user.)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FactSet.SDK.ProcuretoPayAPISCIM.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of resource.</param>
        /// <param name="patch"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UserResource)</returns>
        System.Threading.Tasks.Task<ApiResponse<UserResource>> UsersIdPatchWithHttpInfoAsync(string id, Patch patch = default(Patch), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Replace a user.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FactSet.SDK.ProcuretoPayAPISCIM.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of resource.</param>
        /// <param name="userResource">User resource.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UserResource</returns>
        System.Threading.Tasks.Task<UserResource> UsersIdPutAsync(string id, UserResource userResource, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Replace a user.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FactSet.SDK.ProcuretoPayAPISCIM.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of resource.</param>
        /// <param name="userResource">User resource.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UserResource)</returns>
        System.Threading.Tasks.Task<ApiResponse<UserResource>> UsersIdPutWithHttpInfoAsync(string id, UserResource userResource, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Create a user.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FactSet.SDK.ProcuretoPayAPISCIM.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userResource">User resource.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UserResource</returns>
        System.Threading.Tasks.Task<UserResource> UsersPostAsync(UserResource userResource, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create a user.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FactSet.SDK.ProcuretoPayAPISCIM.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userResource">User resource.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UserResource)</returns>
        System.Threading.Tasks.Task<ApiResponse<UserResource>> UsersPostWithHttpInfoAsync(UserResource userResource, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IUsersApi : IUsersApiSync, IUsersApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class UsersApi : IUsersApi
    {
        private FactSet.SDK.ProcuretoPayAPISCIM.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        # region Response Type Disctionaries
        
        private static readonly Dictionary<HttpStatusCode, System.Type> UsersGetResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)200, typeof(UserResourceList) },
            { (HttpStatusCode)400, typeof(Error) },
            { (HttpStatusCode)401, typeof(Error) },
            { (HttpStatusCode)403, typeof(Error) },
            { (HttpStatusCode)500, typeof(Error) },
        };

        private static readonly Dictionary<HttpStatusCode, System.Type> UsersIdDeleteResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
        };

        private static readonly Dictionary<HttpStatusCode, System.Type> UsersIdGetResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)200, typeof(UserResource) },
            { (HttpStatusCode)401, typeof(Error) },
            { (HttpStatusCode)403, typeof(Error) },
            { (HttpStatusCode)404, typeof(Error) },
            { (HttpStatusCode)500, typeof(Error) },
        };

        private static readonly Dictionary<HttpStatusCode, System.Type> UsersIdPatchResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)200, typeof(UserResource) },
            { (HttpStatusCode)400, typeof(Error) },
            { (HttpStatusCode)401, typeof(Error) },
            { (HttpStatusCode)403, typeof(Error) },
            { (HttpStatusCode)500, typeof(Error) },
        };

        private static readonly Dictionary<HttpStatusCode, System.Type> UsersIdPutResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)200, typeof(UserResource) },
            { (HttpStatusCode)400, typeof(Error) },
            { (HttpStatusCode)401, typeof(Error) },
            { (HttpStatusCode)403, typeof(Error) },
            { (HttpStatusCode)404, typeof(Error) },
            { (HttpStatusCode)500, typeof(Error) },
        };

        private static readonly Dictionary<HttpStatusCode, System.Type> UsersPostResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)201, typeof(UserResource) },
            { (HttpStatusCode)400, typeof(Error) },
            { (HttpStatusCode)401, typeof(Error) },
            { (HttpStatusCode)403, typeof(Error) },
            { (HttpStatusCode)500, typeof(Error) },
        };

        # endregion Response Type Disctionaries

        # region Api Response Objects
        

        # endregion Api Response Objects

        /// <summary>
        /// Initializes a new instance of the <see cref="UsersApi"/> class.
        /// </summary>
        /// <returns></returns>
        public UsersApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="UsersApi"/> class.
        /// </summary>
        /// <returns></returns>
        public UsersApi(string basePath)
        {
            this.Configuration = FactSet.SDK.ProcuretoPayAPISCIM.Client.Configuration.MergeConfigurations(
                FactSet.SDK.ProcuretoPayAPISCIM.Client.GlobalConfiguration.Instance,
                new FactSet.SDK.ProcuretoPayAPISCIM.Client.Configuration { BasePath = basePath }
            );
            this.Client = new FactSet.SDK.ProcuretoPayAPISCIM.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new FactSet.SDK.ProcuretoPayAPISCIM.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = FactSet.SDK.ProcuretoPayAPISCIM.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="UsersApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public UsersApi(FactSet.SDK.ProcuretoPayAPISCIM.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = FactSet.SDK.ProcuretoPayAPISCIM.Client.Configuration.MergeConfigurations(
                FactSet.SDK.ProcuretoPayAPISCIM.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new FactSet.SDK.ProcuretoPayAPISCIM.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new FactSet.SDK.ProcuretoPayAPISCIM.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = FactSet.SDK.ProcuretoPayAPISCIM.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="UsersApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public UsersApi(FactSet.SDK.ProcuretoPayAPISCIM.Client.ISynchronousClient client, FactSet.SDK.ProcuretoPayAPISCIM.Client.IAsynchronousClient asyncClient, FactSet.SDK.ProcuretoPayAPISCIM.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = FactSet.SDK.ProcuretoPayAPISCIM.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public FactSet.SDK.ProcuretoPayAPISCIM.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public FactSet.SDK.ProcuretoPayAPISCIM.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public FactSet.SDK.ProcuretoPayAPISCIM.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public FactSet.SDK.ProcuretoPayAPISCIM.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Get a list of users. 
        /// </summary>
        /// <exception cref="FactSet.SDK.ProcuretoPayAPISCIM.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Resource filter string. See [RFC 7644 section 3.4.2.2](https://tools.ietf.org/html/rfc7644#section-3.4.2.2) for syntax. Note this API implementation also supports a non-standard \&quot;re\&quot; operator for regular expression matching against strings. (optional)</param>
        /// <param name="startIndex">Result start index. The one-based index of the first result to be returned in the list of resources. For example, to exclude the first two resources, use a *startIndex* value of 3. This parameter has a default value of 1. This index applies *after* any resource filtration has been applied as specified by the *filter* argument. (optional)</param>
        /// <param name="count">Maximum resource count. The server will not return more resources than this value, although it may return fewer. (optional)</param>
        /// <param name="attributes">Attribute whitelist filter string. A comma-separated list of resource attribute names to be returned in the response, overriding the set of attributes that would be returned by default. Attribute names must be specified in standard attribute notation (see [RFC 7644 section 3.10](https://datatracker.ietf.org/doc/html/rfc7644#section-3.10).) This parameter cannot be used with the *excludedAttributes* parameter. (optional)</param>
        /// <param name="excludedAttributes">Attribute blacklist filter string. A comma-separated list of resource attribute names to be excluded in the response, overriding the set of attributes that would be returned by default. Attribute names must be specified in standard attribute notation (see [RFC 7644 section 3.10](https://datatracker.ietf.org/doc/html/rfc7644#section-3.10).) This parameter cannot be used with the *attributes* parameter. (optional)</param>
        /// <returns>UserResourceList</returns>
        public UserResourceList UsersGet(string filter = default(string), int? startIndex = default(int?), int? count = default(int?), string attributes = default(string), string excludedAttributes = default(string))
        {
            var localVarResponse = UsersGetWithHttpInfo(filter, startIndex, count, attributes, excludedAttributes);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get a list of users. 
        /// </summary>
        /// <exception cref="FactSet.SDK.ProcuretoPayAPISCIM.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Resource filter string. See [RFC 7644 section 3.4.2.2](https://tools.ietf.org/html/rfc7644#section-3.4.2.2) for syntax. Note this API implementation also supports a non-standard \&quot;re\&quot; operator for regular expression matching against strings. (optional)</param>
        /// <param name="startIndex">Result start index. The one-based index of the first result to be returned in the list of resources. For example, to exclude the first two resources, use a *startIndex* value of 3. This parameter has a default value of 1. This index applies *after* any resource filtration has been applied as specified by the *filter* argument. (optional)</param>
        /// <param name="count">Maximum resource count. The server will not return more resources than this value, although it may return fewer. (optional)</param>
        /// <param name="attributes">Attribute whitelist filter string. A comma-separated list of resource attribute names to be returned in the response, overriding the set of attributes that would be returned by default. Attribute names must be specified in standard attribute notation (see [RFC 7644 section 3.10](https://datatracker.ietf.org/doc/html/rfc7644#section-3.10).) This parameter cannot be used with the *excludedAttributes* parameter. (optional)</param>
        /// <param name="excludedAttributes">Attribute blacklist filter string. A comma-separated list of resource attribute names to be excluded in the response, overriding the set of attributes that would be returned by default. Attribute names must be specified in standard attribute notation (see [RFC 7644 section 3.10](https://datatracker.ietf.org/doc/html/rfc7644#section-3.10).) This parameter cannot be used with the *attributes* parameter. (optional)</param>
        /// <returns>ApiResponse of UserResourceList</returns>
        public ApiResponse<UserResourceList> UsersGetWithHttpInfo(string filter = default(string), int? startIndex = default(int?), int? count = default(int?), string attributes = default(string), string excludedAttributes = default(string))
        {
            FactSet.SDK.ProcuretoPayAPISCIM.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.ProcuretoPayAPISCIM.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/scim+json"
            };

            var localVarContentType = FactSet.SDK.ProcuretoPayAPISCIM.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.ProcuretoPayAPISCIM.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (filter != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.ProcuretoPayAPISCIM.Client.ClientUtils.ParameterToMultiMap("", "filter", filter));
            }
            if (startIndex != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.ProcuretoPayAPISCIM.Client.ClientUtils.ParameterToMultiMap("", "startIndex", startIndex));
            }
            if (count != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.ProcuretoPayAPISCIM.Client.ClientUtils.ParameterToMultiMap("", "count", count));
            }
            if (attributes != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.ProcuretoPayAPISCIM.Client.ClientUtils.ParameterToMultiMap("", "attributes", attributes));
            }
            if (excludedAttributes != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.ProcuretoPayAPISCIM.Client.ClientUtils.ParameterToMultiMap("", "excludedAttributes", excludedAttributes));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.ProcuretoPayAPISCIM.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = UsersGetResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Get<
            UserResourceList>("/Users", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UsersGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// Get a list of users. 
        /// </summary>
        /// <exception cref="FactSet.SDK.ProcuretoPayAPISCIM.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Resource filter string. See [RFC 7644 section 3.4.2.2](https://tools.ietf.org/html/rfc7644#section-3.4.2.2) for syntax. Note this API implementation also supports a non-standard \&quot;re\&quot; operator for regular expression matching against strings. (optional)</param>
        /// <param name="startIndex">Result start index. The one-based index of the first result to be returned in the list of resources. For example, to exclude the first two resources, use a *startIndex* value of 3. This parameter has a default value of 1. This index applies *after* any resource filtration has been applied as specified by the *filter* argument. (optional)</param>
        /// <param name="count">Maximum resource count. The server will not return more resources than this value, although it may return fewer. (optional)</param>
        /// <param name="attributes">Attribute whitelist filter string. A comma-separated list of resource attribute names to be returned in the response, overriding the set of attributes that would be returned by default. Attribute names must be specified in standard attribute notation (see [RFC 7644 section 3.10](https://datatracker.ietf.org/doc/html/rfc7644#section-3.10).) This parameter cannot be used with the *excludedAttributes* parameter. (optional)</param>
        /// <param name="excludedAttributes">Attribute blacklist filter string. A comma-separated list of resource attribute names to be excluded in the response, overriding the set of attributes that would be returned by default. Attribute names must be specified in standard attribute notation (see [RFC 7644 section 3.10](https://datatracker.ietf.org/doc/html/rfc7644#section-3.10).) This parameter cannot be used with the *attributes* parameter. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UserResourceList</returns>
        public async System.Threading.Tasks.Task<UserResourceList>UsersGetAsync(string filter = default(string), int? startIndex = default(int?), int? count = default(int?), string attributes = default(string), string excludedAttributes = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await UsersGetWithHttpInfoAsync(filter, startIndex, count, attributes, excludedAttributes, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get a list of users. 
        /// </summary>
        /// <exception cref="FactSet.SDK.ProcuretoPayAPISCIM.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Resource filter string. See [RFC 7644 section 3.4.2.2](https://tools.ietf.org/html/rfc7644#section-3.4.2.2) for syntax. Note this API implementation also supports a non-standard \&quot;re\&quot; operator for regular expression matching against strings. (optional)</param>
        /// <param name="startIndex">Result start index. The one-based index of the first result to be returned in the list of resources. For example, to exclude the first two resources, use a *startIndex* value of 3. This parameter has a default value of 1. This index applies *after* any resource filtration has been applied as specified by the *filter* argument. (optional)</param>
        /// <param name="count">Maximum resource count. The server will not return more resources than this value, although it may return fewer. (optional)</param>
        /// <param name="attributes">Attribute whitelist filter string. A comma-separated list of resource attribute names to be returned in the response, overriding the set of attributes that would be returned by default. Attribute names must be specified in standard attribute notation (see [RFC 7644 section 3.10](https://datatracker.ietf.org/doc/html/rfc7644#section-3.10).) This parameter cannot be used with the *excludedAttributes* parameter. (optional)</param>
        /// <param name="excludedAttributes">Attribute blacklist filter string. A comma-separated list of resource attribute names to be excluded in the response, overriding the set of attributes that would be returned by default. Attribute names must be specified in standard attribute notation (see [RFC 7644 section 3.10](https://datatracker.ietf.org/doc/html/rfc7644#section-3.10).) This parameter cannot be used with the *attributes* parameter. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UserResourceList)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<UserResourceList>> UsersGetWithHttpInfoAsync(string filter = default(string), int? startIndex = default(int?), int? count = default(int?), string attributes = default(string), string excludedAttributes = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            FactSet.SDK.ProcuretoPayAPISCIM.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.ProcuretoPayAPISCIM.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/scim+json"
            };

            var localVarContentType = FactSet.SDK.ProcuretoPayAPISCIM.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.ProcuretoPayAPISCIM.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (filter != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.ProcuretoPayAPISCIM.Client.ClientUtils.ParameterToMultiMap("", "filter", filter));
            }
            if (startIndex != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.ProcuretoPayAPISCIM.Client.ClientUtils.ParameterToMultiMap("", "startIndex", startIndex));
            }
            if (count != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.ProcuretoPayAPISCIM.Client.ClientUtils.ParameterToMultiMap("", "count", count));
            }
            if (attributes != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.ProcuretoPayAPISCIM.Client.ClientUtils.ParameterToMultiMap("", "attributes", attributes));
            }
            if (excludedAttributes != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.ProcuretoPayAPISCIM.Client.ClientUtils.ParameterToMultiMap("", "excludedAttributes", excludedAttributes));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.ProcuretoPayAPISCIM.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = UsersGetResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<UserResourceList>("/Users", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UsersGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete a user 
        /// </summary>
        /// <exception cref="FactSet.SDK.ProcuretoPayAPISCIM.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of resource.</param>
        /// <returns>void</returns>
        public void UsersIdDelete(string id)
        {
            UsersIdDeleteWithHttpInfo(id);
        }

        /// <summary>
        /// Delete a user 
        /// </summary>
        /// <exception cref="FactSet.SDK.ProcuretoPayAPISCIM.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of resource.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> UsersIdDeleteWithHttpInfo(string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new FactSet.SDK.ProcuretoPayAPISCIM.Client.ApiException(400, "Missing required parameter 'id' when calling UsersApi->UsersIdDelete");
            }

            FactSet.SDK.ProcuretoPayAPISCIM.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.ProcuretoPayAPISCIM.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/scim+json"
            };

            var localVarContentType = FactSet.SDK.ProcuretoPayAPISCIM.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.ProcuretoPayAPISCIM.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", FactSet.SDK.ProcuretoPayAPISCIM.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.ProcuretoPayAPISCIM.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = UsersIdDeleteResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Delete<
            Object>("/Users/{id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UsersIdDelete", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// Delete a user 
        /// </summary>
        /// <exception cref="FactSet.SDK.ProcuretoPayAPISCIM.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of resource.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UsersIdDeleteAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await UsersIdDeleteWithHttpInfoAsync(id, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Delete a user 
        /// </summary>
        /// <exception cref="FactSet.SDK.ProcuretoPayAPISCIM.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of resource.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>

        public async System.Threading.Tasks.Task<ApiResponse<Object>> UsersIdDeleteWithHttpInfoAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new FactSet.SDK.ProcuretoPayAPISCIM.Client.ApiException(400, "Missing required parameter 'id' when calling UsersApi->UsersIdDelete");
            }


            FactSet.SDK.ProcuretoPayAPISCIM.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.ProcuretoPayAPISCIM.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/scim+json"
            };

            var localVarContentType = FactSet.SDK.ProcuretoPayAPISCIM.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.ProcuretoPayAPISCIM.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", FactSet.SDK.ProcuretoPayAPISCIM.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.ProcuretoPayAPISCIM.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = UsersIdDeleteResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/Users/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UsersIdDelete", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get a user. 
        /// </summary>
        /// <exception cref="FactSet.SDK.ProcuretoPayAPISCIM.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of resource.</param>
        /// <returns>UserResource</returns>
        public UserResource UsersIdGet(string id)
        {
            var localVarResponse = UsersIdGetWithHttpInfo(id);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get a user. 
        /// </summary>
        /// <exception cref="FactSet.SDK.ProcuretoPayAPISCIM.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of resource.</param>
        /// <returns>ApiResponse of UserResource</returns>
        public ApiResponse<UserResource> UsersIdGetWithHttpInfo(string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new FactSet.SDK.ProcuretoPayAPISCIM.Client.ApiException(400, "Missing required parameter 'id' when calling UsersApi->UsersIdGet");
            }

            FactSet.SDK.ProcuretoPayAPISCIM.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.ProcuretoPayAPISCIM.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/scim+json"
            };

            var localVarContentType = FactSet.SDK.ProcuretoPayAPISCIM.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.ProcuretoPayAPISCIM.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", FactSet.SDK.ProcuretoPayAPISCIM.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.ProcuretoPayAPISCIM.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = UsersIdGetResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Get<
            UserResource>("/Users/{id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UsersIdGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// Get a user. 
        /// </summary>
        /// <exception cref="FactSet.SDK.ProcuretoPayAPISCIM.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of resource.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UserResource</returns>
        public async System.Threading.Tasks.Task<UserResource>UsersIdGetAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await UsersIdGetWithHttpInfoAsync(id, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get a user. 
        /// </summary>
        /// <exception cref="FactSet.SDK.ProcuretoPayAPISCIM.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of resource.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UserResource)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<UserResource>> UsersIdGetWithHttpInfoAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new FactSet.SDK.ProcuretoPayAPISCIM.Client.ApiException(400, "Missing required parameter 'id' when calling UsersApi->UsersIdGet");
            }


            FactSet.SDK.ProcuretoPayAPISCIM.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.ProcuretoPayAPISCIM.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/scim+json"
            };

            var localVarContentType = FactSet.SDK.ProcuretoPayAPISCIM.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.ProcuretoPayAPISCIM.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", FactSet.SDK.ProcuretoPayAPISCIM.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.ProcuretoPayAPISCIM.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = UsersIdGetResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<UserResource>("/Users/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UsersIdGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Patch a user (add, replace, or remove attributes of a user.) 
        /// </summary>
        /// <exception cref="FactSet.SDK.ProcuretoPayAPISCIM.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of resource.</param>
        /// <param name="patch"> (optional)</param>
        /// <returns>UserResource</returns>
        public UserResource UsersIdPatch(string id, Patch patch = default(Patch))
        {
            var localVarResponse = UsersIdPatchWithHttpInfo(id, patch);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Patch a user (add, replace, or remove attributes of a user.) 
        /// </summary>
        /// <exception cref="FactSet.SDK.ProcuretoPayAPISCIM.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of resource.</param>
        /// <param name="patch"> (optional)</param>
        /// <returns>ApiResponse of UserResource</returns>
        public ApiResponse<UserResource> UsersIdPatchWithHttpInfo(string id, Patch patch = default(Patch))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new FactSet.SDK.ProcuretoPayAPISCIM.Client.ApiException(400, "Missing required parameter 'id' when calling UsersApi->UsersIdPatch");
            }

            FactSet.SDK.ProcuretoPayAPISCIM.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.ProcuretoPayAPISCIM.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/scim+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/scim+json"
            };

            var localVarContentType = FactSet.SDK.ProcuretoPayAPISCIM.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.ProcuretoPayAPISCIM.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", FactSet.SDK.ProcuretoPayAPISCIM.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = patch;

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.ProcuretoPayAPISCIM.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = UsersIdPatchResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Patch<
            UserResource>("/Users/{id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UsersIdPatch", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// Patch a user (add, replace, or remove attributes of a user.) 
        /// </summary>
        /// <exception cref="FactSet.SDK.ProcuretoPayAPISCIM.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of resource.</param>
        /// <param name="patch"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UserResource</returns>
        public async System.Threading.Tasks.Task<UserResource>UsersIdPatchAsync(string id, Patch patch = default(Patch), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await UsersIdPatchWithHttpInfoAsync(id, patch, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Patch a user (add, replace, or remove attributes of a user.) 
        /// </summary>
        /// <exception cref="FactSet.SDK.ProcuretoPayAPISCIM.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of resource.</param>
        /// <param name="patch"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UserResource)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<UserResource>> UsersIdPatchWithHttpInfoAsync(string id, Patch patch = default(Patch), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new FactSet.SDK.ProcuretoPayAPISCIM.Client.ApiException(400, "Missing required parameter 'id' when calling UsersApi->UsersIdPatch");
            }


            FactSet.SDK.ProcuretoPayAPISCIM.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.ProcuretoPayAPISCIM.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/scim+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/scim+json"
            };

            var localVarContentType = FactSet.SDK.ProcuretoPayAPISCIM.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.ProcuretoPayAPISCIM.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", FactSet.SDK.ProcuretoPayAPISCIM.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = patch;

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.ProcuretoPayAPISCIM.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = UsersIdPatchResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PatchAsync<UserResource>("/Users/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UsersIdPatch", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Replace a user. 
        /// </summary>
        /// <exception cref="FactSet.SDK.ProcuretoPayAPISCIM.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of resource.</param>
        /// <param name="userResource">User resource.</param>
        /// <returns>UserResource</returns>
        public UserResource UsersIdPut(string id, UserResource userResource)
        {
            var localVarResponse = UsersIdPutWithHttpInfo(id, userResource);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Replace a user. 
        /// </summary>
        /// <exception cref="FactSet.SDK.ProcuretoPayAPISCIM.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of resource.</param>
        /// <param name="userResource">User resource.</param>
        /// <returns>ApiResponse of UserResource</returns>
        public ApiResponse<UserResource> UsersIdPutWithHttpInfo(string id, UserResource userResource)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new FactSet.SDK.ProcuretoPayAPISCIM.Client.ApiException(400, "Missing required parameter 'id' when calling UsersApi->UsersIdPut");
            }

            // verify the required parameter 'userResource' is set
            if (userResource == null)
            {
                throw new FactSet.SDK.ProcuretoPayAPISCIM.Client.ApiException(400, "Missing required parameter 'userResource' when calling UsersApi->UsersIdPut");
            }

            FactSet.SDK.ProcuretoPayAPISCIM.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.ProcuretoPayAPISCIM.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/scim+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/scim+json"
            };

            var localVarContentType = FactSet.SDK.ProcuretoPayAPISCIM.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.ProcuretoPayAPISCIM.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", FactSet.SDK.ProcuretoPayAPISCIM.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = userResource;

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.ProcuretoPayAPISCIM.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = UsersIdPutResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Put<
            UserResource>("/Users/{id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UsersIdPut", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// Replace a user. 
        /// </summary>
        /// <exception cref="FactSet.SDK.ProcuretoPayAPISCIM.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of resource.</param>
        /// <param name="userResource">User resource.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UserResource</returns>
        public async System.Threading.Tasks.Task<UserResource>UsersIdPutAsync(string id, UserResource userResource, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await UsersIdPutWithHttpInfoAsync(id, userResource, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Replace a user. 
        /// </summary>
        /// <exception cref="FactSet.SDK.ProcuretoPayAPISCIM.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of resource.</param>
        /// <param name="userResource">User resource.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UserResource)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<UserResource>> UsersIdPutWithHttpInfoAsync(string id, UserResource userResource, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new FactSet.SDK.ProcuretoPayAPISCIM.Client.ApiException(400, "Missing required parameter 'id' when calling UsersApi->UsersIdPut");
            }

            // verify the required parameter 'userResource' is set
            if (userResource == null)
            {
                throw new FactSet.SDK.ProcuretoPayAPISCIM.Client.ApiException(400, "Missing required parameter 'userResource' when calling UsersApi->UsersIdPut");
            }


            FactSet.SDK.ProcuretoPayAPISCIM.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.ProcuretoPayAPISCIM.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/scim+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/scim+json"
            };

            var localVarContentType = FactSet.SDK.ProcuretoPayAPISCIM.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.ProcuretoPayAPISCIM.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", FactSet.SDK.ProcuretoPayAPISCIM.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = userResource;

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.ProcuretoPayAPISCIM.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = UsersIdPutResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<UserResource>("/Users/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UsersIdPut", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a user. 
        /// </summary>
        /// <exception cref="FactSet.SDK.ProcuretoPayAPISCIM.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userResource">User resource.</param>
        /// <returns>UserResource</returns>
        public UserResource UsersPost(UserResource userResource)
        {
            var localVarResponse = UsersPostWithHttpInfo(userResource);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a user. 
        /// </summary>
        /// <exception cref="FactSet.SDK.ProcuretoPayAPISCIM.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userResource">User resource.</param>
        /// <returns>ApiResponse of UserResource</returns>
        public ApiResponse<UserResource> UsersPostWithHttpInfo(UserResource userResource)
        {
            // verify the required parameter 'userResource' is set
            if (userResource == null)
            {
                throw new FactSet.SDK.ProcuretoPayAPISCIM.Client.ApiException(400, "Missing required parameter 'userResource' when calling UsersApi->UsersPost");
            }

            FactSet.SDK.ProcuretoPayAPISCIM.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.ProcuretoPayAPISCIM.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/scim+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/scim+json"
            };

            var localVarContentType = FactSet.SDK.ProcuretoPayAPISCIM.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.ProcuretoPayAPISCIM.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = userResource;

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.ProcuretoPayAPISCIM.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = UsersPostResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Post<
            UserResource>("/Users", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UsersPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// Create a user. 
        /// </summary>
        /// <exception cref="FactSet.SDK.ProcuretoPayAPISCIM.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userResource">User resource.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UserResource</returns>
        public async System.Threading.Tasks.Task<UserResource>UsersPostAsync(UserResource userResource, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await UsersPostWithHttpInfoAsync(userResource, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a user. 
        /// </summary>
        /// <exception cref="FactSet.SDK.ProcuretoPayAPISCIM.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userResource">User resource.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UserResource)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<UserResource>> UsersPostWithHttpInfoAsync(UserResource userResource, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'userResource' is set
            if (userResource == null)
            {
                throw new FactSet.SDK.ProcuretoPayAPISCIM.Client.ApiException(400, "Missing required parameter 'userResource' when calling UsersApi->UsersPost");
            }


            FactSet.SDK.ProcuretoPayAPISCIM.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.ProcuretoPayAPISCIM.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/scim+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/scim+json"
            };

            var localVarContentType = FactSet.SDK.ProcuretoPayAPISCIM.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.ProcuretoPayAPISCIM.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = userResource;

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.ProcuretoPayAPISCIM.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = UsersPostResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<UserResource>("/Users", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UsersPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
