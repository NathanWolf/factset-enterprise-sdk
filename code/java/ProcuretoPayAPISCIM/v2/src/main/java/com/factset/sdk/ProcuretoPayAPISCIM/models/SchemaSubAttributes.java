/*
 * FactSet SCIM API
 * FactSet's SCIM API implementation.
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.factset.sdk.ProcuretoPayAPISCIM.models;

import java.util.Objects;
import java.util.Arrays;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.Serializable;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.factset.sdk.ProcuretoPayAPISCIM.JSON;


/**
 * SchemaSubAttributes
 */
@JsonPropertyOrder({
  SchemaSubAttributes.JSON_PROPERTY_NAME,
  SchemaSubAttributes.JSON_PROPERTY_TYPE,
  SchemaSubAttributes.JSON_PROPERTY_MULTI_VALUED,
  SchemaSubAttributes.JSON_PROPERTY_DESCRIPTION,
  SchemaSubAttributes.JSON_PROPERTY_REQUIRED,
  SchemaSubAttributes.JSON_PROPERTY_CANONICAL_VALUES,
  SchemaSubAttributes.JSON_PROPERTY_CASE_EXACT,
  SchemaSubAttributes.JSON_PROPERTY_MUTABILITY,
  SchemaSubAttributes.JSON_PROPERTY_RETURNED,
  SchemaSubAttributes.JSON_PROPERTY_UNIQUENESS,
  SchemaSubAttributes.JSON_PROPERTY_REFERENCE_TYPES
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class SchemaSubAttributes implements Serializable {
  private static final long serialVersionUID = 1L;

  public static final String JSON_PROPERTY_NAME = "name";
  private String name;

  public static final String JSON_PROPERTY_TYPE = "type";
  private String type;

  public static final String JSON_PROPERTY_MULTI_VALUED = "multiValued";
  private Boolean multiValued;

  public static final String JSON_PROPERTY_DESCRIPTION = "description";
  private String description;

  public static final String JSON_PROPERTY_REQUIRED = "required";
  private Boolean required;

  public static final String JSON_PROPERTY_CANONICAL_VALUES = "canonicalValues";
  private java.util.List<String> canonicalValues = null;

  public static final String JSON_PROPERTY_CASE_EXACT = "caseExact";
  private Boolean caseExact;

  public static final String JSON_PROPERTY_MUTABILITY = "mutability";
  private String mutability;

  public static final String JSON_PROPERTY_RETURNED = "returned";
  private String returned;

  public static final String JSON_PROPERTY_UNIQUENESS = "uniqueness";
  private String uniqueness;

  public static final String JSON_PROPERTY_REFERENCE_TYPES = "referenceTypes";
  private java.util.List<String> referenceTypes = null;

  public SchemaSubAttributes() { 
  }

  @JsonCreator
  public SchemaSubAttributes(
    @JsonProperty(JSON_PROPERTY_NAME) String name, 
    @JsonProperty(JSON_PROPERTY_TYPE) String type, 
    @JsonProperty(JSON_PROPERTY_MULTI_VALUED) Boolean multiValued, 
    @JsonProperty(JSON_PROPERTY_DESCRIPTION) String description, 
    @JsonProperty(JSON_PROPERTY_REQUIRED) Boolean required, 
    @JsonProperty(JSON_PROPERTY_CANONICAL_VALUES) java.util.List<String> canonicalValues, 
    @JsonProperty(JSON_PROPERTY_CASE_EXACT) Boolean caseExact, 
    @JsonProperty(JSON_PROPERTY_MUTABILITY) String mutability, 
    @JsonProperty(JSON_PROPERTY_RETURNED) String returned, 
    @JsonProperty(JSON_PROPERTY_UNIQUENESS) String uniqueness, 
    @JsonProperty(JSON_PROPERTY_REFERENCE_TYPES) java.util.List<String> referenceTypes
  ) {
    this();
    this.name = name;
    this.type = type;
    this.multiValued = multiValued;
    this.description = description;
    this.required = required;
    this.canonicalValues = canonicalValues;
    this.caseExact = caseExact;
    this.mutability = mutability;
    this.returned = returned;
    this.uniqueness = uniqueness;
    this.referenceTypes = referenceTypes;
  }

   /**
   * The attribute&#39;s name.
   * @return name
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "The attribute's name.")
  @JsonProperty(JSON_PROPERTY_NAME)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getName() {
    return name;
  }




   /**
   * The attribute&#39;s data type. Valid values include &#39;string&#39;, &#39;complex&#39;, &#39;boolean&#39;, &#39;decimal&#39;, &#39;integer&#39;, &#39;dateTime&#39;, &#39;reference&#39;.
   * @return type
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "The attribute's data type. Valid values include 'string', 'complex', 'boolean', 'decimal', 'integer', 'dateTime', 'reference'.")
  @JsonProperty(JSON_PROPERTY_TYPE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getType() {
    return type;
  }




   /**
   * A Boolean value indicating an attribute&#39;s plurality.
   * @return multiValued
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "A Boolean value indicating an attribute's plurality.")
  @JsonProperty(JSON_PROPERTY_MULTI_VALUED)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Boolean getMultiValued() {
    return multiValued;
  }




   /**
   * A human-readable description of the attribute.
   * @return description
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "A human-readable description of the attribute.")
  @JsonProperty(JSON_PROPERTY_DESCRIPTION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getDescription() {
    return description;
  }




   /**
   * A boolean value indicating whether or not the attribute is required.
   * @return required
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "A boolean value indicating whether or not the attribute is required.")
  @JsonProperty(JSON_PROPERTY_REQUIRED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getRequired() {
    return required;
  }




   /**
   * A collection of canonical values.  When applicable, service providers MUST specify the canonical types, e.g.,  &#39;work&#39;, &#39;home&#39;.
   * @return canonicalValues
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "A collection of canonical values.  When applicable, service providers MUST specify the canonical types, e.g.,  'work', 'home'.")
  @JsonProperty(JSON_PROPERTY_CANONICAL_VALUES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public java.util.List<String> getCanonicalValues() {
    return canonicalValues;
  }




   /**
   * A Boolean value indicating whether or not a string attribute is case sensitive.
   * @return caseExact
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "A Boolean value indicating whether or not a string attribute is case sensitive.")
  @JsonProperty(JSON_PROPERTY_CASE_EXACT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getCaseExact() {
    return caseExact;
  }




   /**
   * Indicates whether or not an attribute is modifiable.
   * @return mutability
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Indicates whether or not an attribute is modifiable.")
  @JsonProperty(JSON_PROPERTY_MUTABILITY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getMutability() {
    return mutability;
  }




   /**
   * Indicates when an attribute is returned in a response (e.g., to a query).
   * @return returned
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Indicates when an attribute is returned in a response (e.g., to a query).")
  @JsonProperty(JSON_PROPERTY_RETURNED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getReturned() {
    return returned;
  }




   /**
   * Indicates how unique a value must be.
   * @return uniqueness
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Indicates how unique a value must be.")
  @JsonProperty(JSON_PROPERTY_UNIQUENESS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getUniqueness() {
    return uniqueness;
  }




   /**
   * Used only with an attribute of type &#39;reference&#39;.  Specifies a SCIM resourceType that a reference attribute MAY refer to, e.g., &#39;User&#39;.
   * @return referenceTypes
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Used only with an attribute of type 'reference'.  Specifies a SCIM resourceType that a reference attribute MAY refer to, e.g., 'User'.")
  @JsonProperty(JSON_PROPERTY_REFERENCE_TYPES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public java.util.List<String> getReferenceTypes() {
    return referenceTypes;
  }




  /**
   * Return true if this Schema_subAttributes object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SchemaSubAttributes schemaSubAttributes = (SchemaSubAttributes) o;
    return Objects.equals(this.name, schemaSubAttributes.name) &&
        Objects.equals(this.type, schemaSubAttributes.type) &&
        Objects.equals(this.multiValued, schemaSubAttributes.multiValued) &&
        Objects.equals(this.description, schemaSubAttributes.description) &&
        Objects.equals(this.required, schemaSubAttributes.required) &&
        Objects.equals(this.canonicalValues, schemaSubAttributes.canonicalValues) &&
        Objects.equals(this.caseExact, schemaSubAttributes.caseExact) &&
        Objects.equals(this.mutability, schemaSubAttributes.mutability) &&
        Objects.equals(this.returned, schemaSubAttributes.returned) &&
        Objects.equals(this.uniqueness, schemaSubAttributes.uniqueness) &&
        Objects.equals(this.referenceTypes, schemaSubAttributes.referenceTypes);
  }

  @Override
  public int hashCode() {
    return Objects.hash(name, type, multiValued, description, required, canonicalValues, caseExact, mutability, returned, uniqueness, referenceTypes);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SchemaSubAttributes {\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    multiValued: ").append(toIndentedString(multiValued)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    required: ").append(toIndentedString(required)).append("\n");
    sb.append("    canonicalValues: ").append(toIndentedString(canonicalValues)).append("\n");
    sb.append("    caseExact: ").append(toIndentedString(caseExact)).append("\n");
    sb.append("    mutability: ").append(toIndentedString(mutability)).append("\n");
    sb.append("    returned: ").append(toIndentedString(returned)).append("\n");
    sb.append("    uniqueness: ").append(toIndentedString(uniqueness)).append("\n");
    sb.append("    referenceTypes: ").append(toIndentedString(referenceTypes)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

