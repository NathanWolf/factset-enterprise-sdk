/*
 * FactSet Private Markets API
 * FactSet Private Markets API encompasses Private Company Financials data to start. Private Company firmographics can be found in the FactSet Entity API. The future plans of this service will include additional Private Markets data, such as Private Equity/Venture Capital. 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: api@factset.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.factset.sdk.FactSetPrivateMarkets.models;

import java.util.Objects;
import java.util.Arrays;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.Serializable;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.factset.sdk.FactSetPrivateMarkets.JSON;


/**
 * Field
 */
@JsonPropertyOrder({
  Field.JSON_PROPERTY_FIELD,
  Field.JSON_PROPERTY_NAME,
  Field.JSON_PROPERTY_CATEGORY,
  Field.JSON_PROPERTY_FACTOR,
  Field.JSON_PROPERTY_SDF_NAME
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class Field implements Serializable {
  private static final long serialVersionUID = 1L;

  public static final String JSON_PROPERTY_FIELD = "field";
  private String field;

  public static final String JSON_PROPERTY_NAME = "name";
  private String name;

  public static final String JSON_PROPERTY_CATEGORY = "category";
  private String category;

  public static final String JSON_PROPERTY_FACTOR = "factor";
  private Integer factor;

  public static final String JSON_PROPERTY_SDF_NAME = "sdfName";
  private String sdfName;

  public Field() { 
  }

  public Field field(String field) {
    this.field = field;
    return this;
  }

   /**
   * Data item to be used as &#x60;fields&#x60; input in &#x60;/factset-private-markets/v#/&#x60; endpoint.
   * @return field
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "assets", value = "Data item to be used as `fields` input in `/factset-private-markets/v#/` endpoint.")
  @JsonProperty(JSON_PROPERTY_FIELD)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getField() {
    return field;
  }


  @JsonProperty(JSON_PROPERTY_FIELD)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setField(String field) {
    this.field = field;
  }


  public Field name(String name) {
    this.name = name;
    return this;
  }

   /**
   * Plain text name of the field.
   * @return name
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "Total Assets", value = "Plain text name of the field.")
  @JsonProperty(JSON_PROPERTY_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getName() {
    return name;
  }


  @JsonProperty(JSON_PROPERTY_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setName(String name) {
    this.name = name;
  }


  public Field category(String category) {
    this.category = category;
    return this;
  }

   /**
   * Corresponding endpoint to input field item. For example, fields returning the category &#39;FINANCIALS&#39; should be used in the /financials endpoint. The same follows data items falling in the category for NON_PERIODIC, which would be used in the /non-periodic endpoint.
   * @return category
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "FINANCIALS", value = "Corresponding endpoint to input field item. For example, fields returning the category 'FINANCIALS' should be used in the /financials endpoint. The same follows data items falling in the category for NON_PERIODIC, which would be used in the /non-periodic endpoint.")
  @JsonProperty(JSON_PROPERTY_CATEGORY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getCategory() {
    return category;
  }


  @JsonProperty(JSON_PROPERTY_CATEGORY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setCategory(String category) {
    this.category = category;
  }


  public Field factor(Integer factor) {
    this.factor = factor;
    return this;
  }

   /**
   * The factor for the field (e.g. 1000 &#x3D; thousands).
   * @return factor
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "1000000", value = "The factor for the field (e.g. 1000 = thousands).")
  @JsonProperty(JSON_PROPERTY_FACTOR)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getFactor() {
    return factor;
  }


  @JsonProperty(JSON_PROPERTY_FACTOR)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setFactor(Integer factor) {
    this.factor = factor;
  }


  public Field sdfName(String sdfName) {
    this.sdfName = sdfName;
    return this;
  }

   /**
   * The name of the data item as it appears in the Standard Data Feed (SDF). A null value represents items available only in API.
   * @return sdfName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "FPC_ASSETS", value = "The name of the data item as it appears in the Standard Data Feed (SDF). A null value represents items available only in API.")
  @JsonProperty(JSON_PROPERTY_SDF_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getSdfName() {
    return sdfName;
  }


  @JsonProperty(JSON_PROPERTY_SDF_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSdfName(String sdfName) {
    this.sdfName = sdfName;
  }


  /**
   * Return true if this field object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Field field = (Field) o;
    return Objects.equals(this.field, field.field) &&
        Objects.equals(this.name, field.name) &&
        Objects.equals(this.category, field.category) &&
        Objects.equals(this.factor, field.factor) &&
        Objects.equals(this.sdfName, field.sdfName);
  }

  @Override
  public int hashCode() {
    return Objects.hash(field, name, category, factor, sdfName);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Field {\n");
    sb.append("    field: ").append(toIndentedString(field)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    category: ").append(toIndentedString(category)).append("\n");
    sb.append("    factor: ").append(toIndentedString(factor)).append("\n");
    sb.append("    sdfName: ").append(toIndentedString(sdfName)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

