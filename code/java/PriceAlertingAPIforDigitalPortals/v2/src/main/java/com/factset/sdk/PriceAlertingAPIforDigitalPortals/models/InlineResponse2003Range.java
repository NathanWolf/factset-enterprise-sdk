/*
 * Price Alerting API For Digital Portals
 * The Price Alerting API is designed to inform the users of an application directly about important changes in the data on the platform. The endpoint group *basic price alerting* deals with generation of alerts based on current price data. For notations, users can define an upper or lower limit and choose on which price type those limit conditions apply.  Alerting uses the concepts of triggers and alerts.  A trigger is an entity that is set up by an application to watch a certain condition in the market data around a financial instrument. The standard conditions that can be applied are lower limit and upper limit for the value of the price for a given financial instrument.  When the condition of a trigger is met, an alert is created. Each alert thus represents one event where a trigger condition was met.  An application can learn about the creation of alerts in two ways: The application can actively request the list of alerts (pull approach) or it can subscribe to the list of existing alerts. If a new alert is created, that list changes and the application is notified about the new alert with an update that contains the details on the new alert (push approach).  The API supports both approaches. The push approach is realized most easily by using the subscription support that the client libraries provide.  See the [Quotes API for Digital Portals](https://developer.factset.com/api-catalog/quotes-api-digital-portals) for access to detailed price information. 
 *
 * The version of the OpenAPI document: 2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.factset.sdk.PriceAlertingAPIforDigitalPortals.models;

import java.util.Objects;
import java.util.Arrays;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import org.openapitools.jackson.nullable.JsonNullable;
import com.fasterxml.jackson.annotation.JsonIgnore;
import org.openapitools.jackson.nullable.JsonNullable;
import java.util.NoSuchElementException;
import java.io.Serializable;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.factset.sdk.PriceAlertingAPIforDigitalPortals.JSON;


/**
 * Price range for the trigger to monitor.
 */
@ApiModel(description = "Price range for the trigger to monitor.")
@JsonPropertyOrder({
  InlineResponse2003Range.JSON_PROPERTY_UPPER_LIMIT,
  InlineResponse2003Range.JSON_PROPERTY_LOWER_LIMIT
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class InlineResponse2003Range implements Serializable {
  private static final long serialVersionUID = 1L;

  public static final String JSON_PROPERTY_UPPER_LIMIT = "upperLimit";
  private JsonNullable<Object> upperLimit = JsonNullable.<Object>of(null);

  public static final String JSON_PROPERTY_LOWER_LIMIT = "lowerLimit";
  private JsonNullable<Object> lowerLimit = JsonNullable.<Object>of(null);

  public InlineResponse2003Range() { 
  }

  public InlineResponse2003Range upperLimit(Object upperLimit) {
    this.upperLimit = JsonNullable.<Object>of(upperLimit);
    return this;
  }

   /**
   * Upper limit.
   * @return upperLimit
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Upper limit.")
  @JsonIgnore

  public Object getUpperLimit() {
        return upperLimit.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_UPPER_LIMIT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<Object> getUpperLimit_JsonNullable() {
    return upperLimit;
  }
  
  @JsonProperty(JSON_PROPERTY_UPPER_LIMIT)
  public void setUpperLimit_JsonNullable(JsonNullable<Object> upperLimit) {
    this.upperLimit = upperLimit;
  }

  public void setUpperLimit(Object upperLimit) {
    this.upperLimit = JsonNullable.<Object>of(upperLimit);
  }


  public InlineResponse2003Range lowerLimit(Object lowerLimit) {
    this.lowerLimit = JsonNullable.<Object>of(lowerLimit);
    return this;
  }

   /**
   * Lower limit.
   * @return lowerLimit
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Lower limit.")
  @JsonIgnore

  public Object getLowerLimit() {
        return lowerLimit.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_LOWER_LIMIT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<Object> getLowerLimit_JsonNullable() {
    return lowerLimit;
  }
  
  @JsonProperty(JSON_PROPERTY_LOWER_LIMIT)
  public void setLowerLimit_JsonNullable(JsonNullable<Object> lowerLimit) {
    this.lowerLimit = lowerLimit;
  }

  public void setLowerLimit(Object lowerLimit) {
    this.lowerLimit = JsonNullable.<Object>of(lowerLimit);
  }


  /**
   * Return true if this inline_response_200_3_range object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    InlineResponse2003Range inlineResponse2003Range = (InlineResponse2003Range) o;
    return equalsNullable(this.upperLimit, inlineResponse2003Range.upperLimit) &&
        equalsNullable(this.lowerLimit, inlineResponse2003Range.lowerLimit);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(hashCodeNullable(upperLimit), hashCodeNullable(lowerLimit));
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class InlineResponse2003Range {\n");
    sb.append("    upperLimit: ").append(toIndentedString(upperLimit)).append("\n");
    sb.append("    lowerLimit: ").append(toIndentedString(lowerLimit)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

