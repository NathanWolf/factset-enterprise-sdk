/*
 * Exchange DataFeed Snapshot
 * FactSetâ€™s Exchange DataFeed Snapshot API provides cost-effective access to real-time and delayed global exchange data. Proprietary technology normalizes over 200 global exchanges and 150+ data fields. Asset types integrated include equities, futures, options, warrants, fixed income, mutual funds, ETFs, indices, commodities, and FX rates. <p>Cutting-edge technology ensures reliability and provides scalability that allow applications to request multiple items at a time. To simplify client-side development an entire response can be placed in a matrix or table for effortless integration into internal and external applications. Using specified output formats (CSV, XML, JSON) receive all standard fields by default or customize the list based on specific needs.</p></p>Below are the current hosts:</p><p>Production: api.factset.com<p>Sandbox: api-sandbox.factset.com</p>
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: api@factset.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.factset.sdk.ExchangeDataFeedSnapshotAPISymbolList.models;

import java.util.Objects;
import java.util.Arrays;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import org.openapitools.jackson.nullable.JsonNullable;
import com.fasterxml.jackson.annotation.JsonIgnore;
import org.openapitools.jackson.nullable.JsonNullable;
import java.util.NoSuchElementException;
import java.io.Serializable;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.factset.sdk.ExchangeDataFeedSnapshotAPISymbolList.JSON;


/**
 * Specialfield
 */
@JsonPropertyOrder({
  Specialfield.JSON_PROPERTY_N_F,
  Specialfield.JSON_PROPERTY_N_A,
  Specialfield.JSON_PROPERTY_N_E
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class Specialfield implements Serializable {
  private static final long serialVersionUID = 1L;

  public static final String JSON_PROPERTY_N_F = "NF";
  private String NF;

  public static final String JSON_PROPERTY_N_A = "NA";
  private String NA;

  public static final String JSON_PROPERTY_N_E = "NE";
  private JsonNullable<Object> NE = JsonNullable.<Object>of(null);


  public Specialfield NF(String NF) {
    this.NF = NF;
    return this;
  }

   /**
   * **#NF#** - Not found. The requested symbol could not be found by the service.
   * @return NF
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "**#NF#** - Not found. The requested symbol could not be found by the service.")
  @JsonProperty(JSON_PROPERTY_N_F)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getNF() {
    return NF;
  }


  @JsonProperty(JSON_PROPERTY_N_F)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setNF(String NF) {
    this.NF = NF;
  }


  public Specialfield NA(String NA) {
    this.NA = NA;
    return this;
  }

   /**
   * **#NA#** - Not Applicable. The requested field could not be found for the requested symbol. This usually means that the field is not applicable for this type of record.
   * @return NA
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "**#NA#** - Not Applicable. The requested field could not be found for the requested symbol. This usually means that the field is not applicable for this type of record.")
  @JsonProperty(JSON_PROPERTY_N_A)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getNA() {
    return NA;
  }


  @JsonProperty(JSON_PROPERTY_N_A)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setNA(String NA) {
    this.NA = NA;
  }


  public Specialfield NE(Object NE) {
    this.NE = JsonNullable.<Object>of(NE);
    return this;
  }

   /**
   * **#NE#** - Not Entitled. The supplied username and password are not entitled to the data requested.
   * @return NE
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "**#NE#** - Not Entitled. The supplied username and password are not entitled to the data requested.")
  @JsonIgnore

  public Object getNE() {
        return NE.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_N_E)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<Object> getNE_JsonNullable() {
    return NE;
  }
  
  @JsonProperty(JSON_PROPERTY_N_E)
  public void setNE_JsonNullable(JsonNullable<Object> NE) {
    this.NE = NE;
  }

  public void setNE(Object NE) {
    this.NE = JsonNullable.<Object>of(NE);
  }


  /**
   * Return true if this specialfield object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Specialfield specialfield = (Specialfield) o;
    return Objects.equals(this.NF, specialfield.NF) &&
        Objects.equals(this.NA, specialfield.NA) &&
        equalsNullable(this.NE, specialfield.NE);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(NF, NA, hashCodeNullable(NE));
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Specialfield {\n");
    sb.append("    NF: ").append(toIndentedString(NF)).append("\n");
    sb.append("    NA: ").append(toIndentedString(NA)).append("\n");
    sb.append("    NE: ").append(toIndentedString(NE)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

