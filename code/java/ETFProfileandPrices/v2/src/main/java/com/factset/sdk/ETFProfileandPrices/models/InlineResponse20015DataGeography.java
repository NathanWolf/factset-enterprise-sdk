/*
 * Prime Developer Trial
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.factset.sdk.ETFProfileandPrices.models;

import java.util.Objects;
import java.util.Arrays;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.Serializable;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.factset.sdk.ETFProfileandPrices.JSON;


/**
 * geography.
 */
@ApiModel(description = "geography.")
@JsonPropertyOrder({
  InlineResponse20015DataGeography.JSON_PROPERTY_REGION,
  InlineResponse20015DataGeography.JSON_PROPERTY_SPECIFIC
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class InlineResponse20015DataGeography implements Serializable {
  private static final long serialVersionUID = 1L;

  /**
   * The broad regional exposure of the ETP&#39;s holdings (e.g., Latin America, Asia-Pacific, Global), text and standardized value available. This data is available for all the regions.
   */
  public enum RegionEnum {
    EUROPE("Europe"),
    
    NORTH_AMERICA("North America"),
    
    GLOBAL("Global"),
    
    DEVELOPED_MARKETS("Developed Markets"),
    
    ASIA_PACIFIC("Asia-Pacific"),
    
    GLOBAL_EX_U_S_("Global Ex-U.S."),
    
    EMERGING_MARKETS("Emerging Markets"),
    
    LATIN_AMERICA("Latin America"),
    
    MIDDLE_EAST_AFRICA("Middle East & Africa"),
    
    FRONTIER_MARKETS("Frontier Markets");

    private String value;

    RegionEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static RegionEnum fromValue(String value) {
      for (RegionEnum b : RegionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_REGION = "region";
  private RegionEnum region;

  public static final String JSON_PROPERTY_SPECIFIC = "specific";
  private String specific;

  public InlineResponse20015DataGeography() { 
  }

  public InlineResponse20015DataGeography region(RegionEnum region) {
    this.region = region;
    return this;
  }

   /**
   * The broad regional exposure of the ETP&#39;s holdings (e.g., Latin America, Asia-Pacific, Global), text and standardized value available. This data is available for all the regions.
   * @return region
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The broad regional exposure of the ETP's holdings (e.g., Latin America, Asia-Pacific, Global), text and standardized value available. This data is available for all the regions.")
  @JsonProperty(JSON_PROPERTY_REGION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public RegionEnum getRegion() {
    return region;
  }


  @JsonProperty(JSON_PROPERTY_REGION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setRegion(RegionEnum region) {
    this.region = region;
  }


  public InlineResponse20015DataGeography specific(String specific) {
    this.specific = specific;
    return this;
  }

   /**
   * The specific geographic exposure of the ETP&#39;s holdings (e.g., BRICs, Chile, Asia-Pacific Ex-Japan), text and standardized value available. This data is available for all the regions. See endpoint /factset/etf/class/geography/list for possible values
   * @return specific
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The specific geographic exposure of the ETP's holdings (e.g., BRICs, Chile, Asia-Pacific Ex-Japan), text and standardized value available. This data is available for all the regions. See endpoint /factset/etf/class/geography/list for possible values")
  @JsonProperty(JSON_PROPERTY_SPECIFIC)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getSpecific() {
    return specific;
  }


  @JsonProperty(JSON_PROPERTY_SPECIFIC)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSpecific(String specific) {
    this.specific = specific;
  }


  /**
   * Return true if this inline_response_200_15_data_geography object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    InlineResponse20015DataGeography inlineResponse20015DataGeography = (InlineResponse20015DataGeography) o;
    return Objects.equals(this.region, inlineResponse20015DataGeography.region) &&
        Objects.equals(this.specific, inlineResponse20015DataGeography.specific);
  }

  @Override
  public int hashCode() {
    return Objects.hash(region, specific);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class InlineResponse20015DataGeography {\n");
    sb.append("    region: ").append(toIndentedString(region)).append("\n");
    sb.append("    specific: ").append(toIndentedString(specific)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

