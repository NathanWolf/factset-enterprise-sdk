/*
 * Prime Developer Trial
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.factset.sdk.ETFProfileandPrices.models;

import java.util.Objects;
import java.util.Arrays;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.Serializable;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.factset.sdk.ETFProfileandPrices.JSON;


/**
 * category.
 */
@ApiModel(description = "category.")
@JsonPropertyOrder({
  InlineResponse2007DataCategory.JSON_PROPERTY_BROAD,
  InlineResponse2007DataCategory.JSON_PROPERTY_FOCUS,
  InlineResponse2007DataCategory.JSON_PROPERTY_NICHE
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class InlineResponse2007DataCategory implements Serializable {
  private static final long serialVersionUID = 1L;

  public static final String JSON_PROPERTY_BROAD = "broad";
  private String broad;

  public static final String JSON_PROPERTY_FOCUS = "focus";
  private String focus;

  public static final String JSON_PROPERTY_NICHE = "niche";
  private String niche;


  public InlineResponse2007DataCategory broad(String broad) {
    this.broad = broad;
    return this;
  }

   /**
   * The 1st of 3 asset-class-specific, hierarchical exposure tiers; the broadest category the ETP falls under within its asset class (e.g., Size &amp; Style, Sector, Precious Metals, Absolute Returns), text and standardized value available. This data is available for all the regions. Please refer /factset/etf/class/category/broad/list for possible values.
   * @return broad
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The 1st of 3 asset-class-specific, hierarchical exposure tiers; the broadest category the ETP falls under within its asset class (e.g., Size & Style, Sector, Precious Metals, Absolute Returns), text and standardized value available. This data is available for all the regions. Please refer /factset/etf/class/category/broad/list for possible values.")
  @JsonProperty(JSON_PROPERTY_BROAD)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getBroad() {
    return broad;
  }


  @JsonProperty(JSON_PROPERTY_BROAD)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setBroad(String broad) {
    this.broad = broad;
  }


  public InlineResponse2007DataCategory focus(String focus) {
    this.focus = focus;
    return this;
  }

   /**
   * The 2nd of 3 asset-class-specific, hierarchical exposure tiers; the ETP&#39;s classification within its category (e.g., Small Cap, Energy, Palladium, Long/Short), text and standardized value available. This data is available for all the regions. Please refer /factset/etf/class/category/focus/list for possible values.
   * @return focus
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The 2nd of 3 asset-class-specific, hierarchical exposure tiers; the ETP's classification within its category (e.g., Small Cap, Energy, Palladium, Long/Short), text and standardized value available. This data is available for all the regions. Please refer /factset/etf/class/category/focus/list for possible values.")
  @JsonProperty(JSON_PROPERTY_FOCUS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getFocus() {
    return focus;
  }


  @JsonProperty(JSON_PROPERTY_FOCUS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setFocus(String focus) {
    this.focus = focus;
  }


  public InlineResponse2007DataCategory niche(String niche) {
    this.niche = niche;
    return this;
  }

   /**
   * The 3rd of 3 asset-class-specific, hierarchical exposure tiers; The ETP&#39;s classification within its Focus. Most granular tier of exposure sort (e.g., Growth, Coal, Physically held, Merger Arbitrage), text and standardized value available. This data is available for all the regions. Please refer /factset/etf/class/category/niche/list for possible values.
   * @return niche
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The 3rd of 3 asset-class-specific, hierarchical exposure tiers; The ETP's classification within its Focus. Most granular tier of exposure sort (e.g., Growth, Coal, Physically held, Merger Arbitrage), text and standardized value available. This data is available for all the regions. Please refer /factset/etf/class/category/niche/list for possible values.")
  @JsonProperty(JSON_PROPERTY_NICHE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getNiche() {
    return niche;
  }


  @JsonProperty(JSON_PROPERTY_NICHE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setNiche(String niche) {
    this.niche = niche;
  }


  /**
   * Return true if this inline_response_200_7_data_category object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    InlineResponse2007DataCategory inlineResponse2007DataCategory = (InlineResponse2007DataCategory) o;
    return Objects.equals(this.broad, inlineResponse2007DataCategory.broad) &&
        Objects.equals(this.focus, inlineResponse2007DataCategory.focus) &&
        Objects.equals(this.niche, inlineResponse2007DataCategory.niche);
  }

  @Override
  public int hashCode() {
    return Objects.hash(broad, focus, niche);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class InlineResponse2007DataCategory {\n");
    sb.append("    broad: ").append(toIndentedString(broad)).append("\n");
    sb.append("    focus: ").append(toIndentedString(focus)).append("\n");
    sb.append("    niche: ").append(toIndentedString(niche)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

