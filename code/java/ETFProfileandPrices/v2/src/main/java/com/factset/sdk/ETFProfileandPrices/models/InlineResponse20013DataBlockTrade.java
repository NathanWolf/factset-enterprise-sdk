/*
 * Prime Developer Trial
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.factset.sdk.ETFProfileandPrices.models;

import java.util.Objects;
import java.util.Arrays;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.math.BigDecimal;
import java.io.Serializable;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.factset.sdk.ETFProfileandPrices.JSON;


/**
 * Properties of the ETP with respect to large trades.
 */
@ApiModel(description = "Properties of the ETP with respect to large trades.")
@JsonPropertyOrder({
  InlineResponse20013DataBlockTrade.JSON_PROPERTY_OVERLAP_HOURS,
  InlineResponse20013DataBlockTrade.JSON_PROPERTY_UNDERLYING_VOLUME_PER_UNIT,
  InlineResponse20013DataBlockTrade.JSON_PROPERTY_LIQUIDITY,
  InlineResponse20013DataBlockTrade.JSON_PROPERTY_CREATION_UNIT_PER_DAY
})
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")

public class InlineResponse20013DataBlockTrade implements Serializable {
  private static final long serialVersionUID = 1L;

  public static final String JSON_PROPERTY_OVERLAP_HOURS = "overlapHours";
  private BigDecimal overlapHours;

  public static final String JSON_PROPERTY_UNDERLYING_VOLUME_PER_UNIT = "underlyingVolumePerUnit";
  private BigDecimal underlyingVolumePerUnit;

  public static final String JSON_PROPERTY_LIQUIDITY = "liquidity";
  private BigDecimal liquidity;

  public static final String JSON_PROPERTY_CREATION_UNIT_PER_DAY = "creationUnitPerDay";
  private BigDecimal creationUnitPerDay;

  public InlineResponse20013DataBlockTrade() { 
  }

  public InlineResponse20013DataBlockTrade overlapHours(BigDecimal overlapHours) {
    this.overlapHours = overlapHours;
    return this;
  }

   /**
   * A measurement of the overlap between the hours of trading for the ETF and that of its underlying portfolio. Available for the regions: US.
   * @return overlapHours
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(value = "A measurement of the overlap between the hours of trading for the ETF and that of its underlying portfolio. Available for the regions: US.")
  @JsonProperty(JSON_PROPERTY_OVERLAP_HOURS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public BigDecimal getOverlapHours() {
    return overlapHours;
  }


  @JsonProperty(JSON_PROPERTY_OVERLAP_HOURS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setOverlapHours(BigDecimal overlapHours) {
    this.overlapHours = overlapHours;
  }


  public InlineResponse20013DataBlockTrade underlyingVolumePerUnit(BigDecimal underlyingVolumePerUnit) {
    this.underlyingVolumePerUnit = underlyingVolumePerUnit;
    return this;
  }

   /**
   * Weighted average of the ratios of each underlying&#39;s number of shares, represented in one creation unit of the ETP, relative to the median daily trading volume of the underlying over 45 trading days, expressed as a percentage. This is a measure of the liquidity available in the underlying portfolio of the ETP, whereby larger numbers indicate greater likelihood of adverse price impact on underlying securities from ETF creations/redemptions. Only applicable for ETF. Available for the regions: US.
   * @return underlyingVolumePerUnit
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(value = "Weighted average of the ratios of each underlying's number of shares, represented in one creation unit of the ETP, relative to the median daily trading volume of the underlying over 45 trading days, expressed as a percentage. This is a measure of the liquidity available in the underlying portfolio of the ETP, whereby larger numbers indicate greater likelihood of adverse price impact on underlying securities from ETF creations/redemptions. Only applicable for ETF. Available for the regions: US.")
  @JsonProperty(JSON_PROPERTY_UNDERLYING_VOLUME_PER_UNIT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public BigDecimal getUnderlyingVolumePerUnit() {
    return underlyingVolumePerUnit;
  }


  @JsonProperty(JSON_PROPERTY_UNDERLYING_VOLUME_PER_UNIT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setUnderlyingVolumePerUnit(BigDecimal underlyingVolumePerUnit) {
    this.underlyingVolumePerUnit = underlyingVolumePerUnit;
  }


  public InlineResponse20013DataBlockTrade liquidity(BigDecimal liquidity) {
    this.liquidity = liquidity;
    return this;
  }

   /**
   * A measurement of the liquidity available in an ETF for a hypothetical 1,000,000 USD trade. Measured on a scale of 0 to 5 -- 5 being very liquid and easy to execute, 1 being expensive and difficult to execute, and 0 indicating a closed or restricted creation window. Available for the regions: US.
   * @return liquidity
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(value = "A measurement of the liquidity available in an ETF for a hypothetical 1,000,000 USD trade. Measured on a scale of 0 to 5 -- 5 being very liquid and easy to execute, 1 being expensive and difficult to execute, and 0 indicating a closed or restricted creation window. Available for the regions: US.")
  @JsonProperty(JSON_PROPERTY_LIQUIDITY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public BigDecimal getLiquidity() {
    return liquidity;
  }


  @JsonProperty(JSON_PROPERTY_LIQUIDITY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setLiquidity(BigDecimal liquidity) {
    this.liquidity = liquidity;
  }


  public InlineResponse20013DataBlockTrade creationUnitPerDay(BigDecimal creationUnitPerDay) {
    this.creationUnitPerDay = creationUnitPerDay;
    return this;
  }

   /**
   * The median 45 day share volume divided by the creation unit size of the fund. The higher the number, the more likely that liquidity providers will trade the fund in size, or in odd lots. Available for the regions: US.
   * @return creationUnitPerDay
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(value = "The median 45 day share volume divided by the creation unit size of the fund. The higher the number, the more likely that liquidity providers will trade the fund in size, or in odd lots. Available for the regions: US.")
  @JsonProperty(JSON_PROPERTY_CREATION_UNIT_PER_DAY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public BigDecimal getCreationUnitPerDay() {
    return creationUnitPerDay;
  }


  @JsonProperty(JSON_PROPERTY_CREATION_UNIT_PER_DAY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setCreationUnitPerDay(BigDecimal creationUnitPerDay) {
    this.creationUnitPerDay = creationUnitPerDay;
  }


  /**
   * Return true if this inline_response_200_13_data_blockTrade object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    InlineResponse20013DataBlockTrade inlineResponse20013DataBlockTrade = (InlineResponse20013DataBlockTrade) o;
    return Objects.equals(this.overlapHours, inlineResponse20013DataBlockTrade.overlapHours) &&
        Objects.equals(this.underlyingVolumePerUnit, inlineResponse20013DataBlockTrade.underlyingVolumePerUnit) &&
        Objects.equals(this.liquidity, inlineResponse20013DataBlockTrade.liquidity) &&
        Objects.equals(this.creationUnitPerDay, inlineResponse20013DataBlockTrade.creationUnitPerDay);
  }

  @Override
  public int hashCode() {
    return Objects.hash(overlapHours, underlyingVolumePerUnit, liquidity, creationUnitPerDay);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class InlineResponse20013DataBlockTrade {\n");
    sb.append("    overlapHours: ").append(toIndentedString(overlapHours)).append("\n");
    sb.append("    underlyingVolumePerUnit: ").append(toIndentedString(underlyingVolumePerUnit)).append("\n");
    sb.append("    liquidity: ").append(toIndentedString(liquidity)).append("\n");
    sb.append("    creationUnitPerDay: ").append(toIndentedString(creationUnitPerDay)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

