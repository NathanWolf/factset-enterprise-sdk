/*
 * Prime Developer Trial
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.factset.sdk.SecuritizedDerivativesAPIforDigitalPortals.models;

import java.util.Objects;
import java.util.Arrays;
import java.util.Map;
import java.util.HashMap;
import com.factset.sdk.SecuritizedDerivativesAPIforDigitalPortals.models.InlineResponse2005DataUnderlyingEffectiveUnderlying;
import com.factset.sdk.SecuritizedDerivativesAPIforDigitalPortals.models.InlineResponse2005DataUnderlyingInstrument;
import com.factset.sdk.SecuritizedDerivativesAPIforDigitalPortals.models.InlineResponse2005DataUnderlyingNotation;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.Serializable;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.factset.sdk.SecuritizedDerivativesAPIforDigitalPortals.JSON;


/**
 * Lists of underlyings.
 */
@ApiModel(description = "Lists of underlyings.")
@JsonPropertyOrder({
  InlineResponse2005DataUnderlying.JSON_PROPERTY_INSTRUMENT,
  InlineResponse2005DataUnderlying.JSON_PROPERTY_NOTATION,
  InlineResponse2005DataUnderlying.JSON_PROPERTY_EFFECTIVE_UNDERLYING
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class InlineResponse2005DataUnderlying implements Serializable {
  private static final long serialVersionUID = 1L;

  public static final String JSON_PROPERTY_INSTRUMENT = "instrument";
  private java.util.List<InlineResponse2005DataUnderlyingInstrument> instrument = null;

  public static final String JSON_PROPERTY_NOTATION = "notation";
  private java.util.List<InlineResponse2005DataUnderlyingNotation> notation = null;

  public static final String JSON_PROPERTY_EFFECTIVE_UNDERLYING = "effectiveUnderlying";
  private InlineResponse2005DataUnderlyingEffectiveUnderlying effectiveUnderlying;


  public InlineResponse2005DataUnderlying instrument(java.util.List<InlineResponse2005DataUnderlyingInstrument> instrument) {
    this.instrument = instrument;
    return this;
  }

  public InlineResponse2005DataUnderlying addInstrumentItem(InlineResponse2005DataUnderlyingInstrument instrumentItem) {
    if (this.instrument == null) {
      this.instrument = new java.util.ArrayList<>();
    }
    this.instrument.add(instrumentItem);
    return this;
  }

   /**
   * Underlying instruments.
   * @return instrument
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Underlying instruments.")
  @JsonProperty(JSON_PROPERTY_INSTRUMENT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public java.util.List<InlineResponse2005DataUnderlyingInstrument> getInstrument() {
    return instrument;
  }


  @JsonProperty(JSON_PROPERTY_INSTRUMENT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setInstrument(java.util.List<InlineResponse2005DataUnderlyingInstrument> instrument) {
    this.instrument = instrument;
  }


  public InlineResponse2005DataUnderlying notation(java.util.List<InlineResponse2005DataUnderlyingNotation> notation) {
    this.notation = notation;
    return this;
  }

  public InlineResponse2005DataUnderlying addNotationItem(InlineResponse2005DataUnderlyingNotation notationItem) {
    if (this.notation == null) {
      this.notation = new java.util.ArrayList<>();
    }
    this.notation.add(notationItem);
    return this;
  }

   /**
   * Underlying notations.
   * @return notation
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Underlying notations.")
  @JsonProperty(JSON_PROPERTY_NOTATION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public java.util.List<InlineResponse2005DataUnderlyingNotation> getNotation() {
    return notation;
  }


  @JsonProperty(JSON_PROPERTY_NOTATION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setNotation(java.util.List<InlineResponse2005DataUnderlyingNotation> notation) {
    this.notation = notation;
  }


  public InlineResponse2005DataUnderlying effectiveUnderlying(InlineResponse2005DataUnderlyingEffectiveUnderlying effectiveUnderlying) {
    this.effectiveUnderlying = effectiveUnderlying;
    return this;
  }

   /**
   * Get effectiveUnderlying
   * @return effectiveUnderlying
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_EFFECTIVE_UNDERLYING)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public InlineResponse2005DataUnderlyingEffectiveUnderlying getEffectiveUnderlying() {
    return effectiveUnderlying;
  }


  @JsonProperty(JSON_PROPERTY_EFFECTIVE_UNDERLYING)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setEffectiveUnderlying(InlineResponse2005DataUnderlyingEffectiveUnderlying effectiveUnderlying) {
    this.effectiveUnderlying = effectiveUnderlying;
  }


  /**
   * Return true if this inline_response_200_5_data_underlying object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    InlineResponse2005DataUnderlying inlineResponse2005DataUnderlying = (InlineResponse2005DataUnderlying) o;
    return Objects.equals(this.instrument, inlineResponse2005DataUnderlying.instrument) &&
        Objects.equals(this.notation, inlineResponse2005DataUnderlying.notation) &&
        Objects.equals(this.effectiveUnderlying, inlineResponse2005DataUnderlying.effectiveUnderlying);
  }

  @Override
  public int hashCode() {
    return Objects.hash(instrument, notation, effectiveUnderlying);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class InlineResponse2005DataUnderlying {\n");
    sb.append("    instrument: ").append(toIndentedString(instrument)).append("\n");
    sb.append("    notation: ").append(toIndentedString(notation)).append("\n");
    sb.append("    effectiveUnderlying: ").append(toIndentedString(effectiveUnderlying)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

