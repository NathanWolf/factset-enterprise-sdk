/*
 * Prime Developer Trial
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.factset.sdk.SecuritizedDerivativesAPIforDigitalPortals.models;

import java.util.Objects;
import java.util.Arrays;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.Serializable;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.factset.sdk.SecuritizedDerivativesAPIforDigitalPortals.JSON;


/**
 * Instrument of the underlying.
 */
@ApiModel(description = "Instrument of the underlying.")
@JsonPropertyOrder({
  InlineResponse2006InstrumentUnderlyingNotationInstrument.JSON_PROPERTY_ID,
  InlineResponse2006InstrumentUnderlyingNotationInstrument.JSON_PROPERTY_TYPE_COMPOSITE
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class InlineResponse2006InstrumentUnderlyingNotationInstrument implements Serializable {
  private static final long serialVersionUID = 1L;

  public static final String JSON_PROPERTY_ID = "id";
  private String id;

  /**
   * Type of composite instrument, in case the underlying is a composite instrument.
   */
  public enum TypeCompositeEnum {
    BASKET("basket"),
    
    ALPHASTRUCTURE("alphaStructure"),
    
    FUTURESSPREAD("futuresSpread"),
    
    FACTORINDEX("factorIndex");

    private String value;

    TypeCompositeEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static TypeCompositeEnum fromValue(String value) {
      for (TypeCompositeEnum b : TypeCompositeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_TYPE_COMPOSITE = "typeComposite";
  private TypeCompositeEnum typeComposite;


  public InlineResponse2006InstrumentUnderlyingNotationInstrument id(String id) {
    this.id = id;
    return this;
  }

   /**
   * Identifier of the instrument.
   * @return id
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Identifier of the instrument.")
  @JsonProperty(JSON_PROPERTY_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getId() {
    return id;
  }


  @JsonProperty(JSON_PROPERTY_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setId(String id) {
    this.id = id;
  }


  public InlineResponse2006InstrumentUnderlyingNotationInstrument typeComposite(TypeCompositeEnum typeComposite) {
    this.typeComposite = typeComposite;
    return this;
  }

   /**
   * Type of composite instrument, in case the underlying is a composite instrument.
   * @return typeComposite
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Type of composite instrument, in case the underlying is a composite instrument.")
  @JsonProperty(JSON_PROPERTY_TYPE_COMPOSITE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public TypeCompositeEnum getTypeComposite() {
    return typeComposite;
  }


  @JsonProperty(JSON_PROPERTY_TYPE_COMPOSITE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setTypeComposite(TypeCompositeEnum typeComposite) {
    this.typeComposite = typeComposite;
  }


  /**
   * Return true if this inline_response_200_6_instrument_underlying_notation_instrument object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    InlineResponse2006InstrumentUnderlyingNotationInstrument inlineResponse2006InstrumentUnderlyingNotationInstrument = (InlineResponse2006InstrumentUnderlyingNotationInstrument) o;
    return Objects.equals(this.id, inlineResponse2006InstrumentUnderlyingNotationInstrument.id) &&
        Objects.equals(this.typeComposite, inlineResponse2006InstrumentUnderlyingNotationInstrument.typeComposite);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, typeComposite);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class InlineResponse2006InstrumentUnderlyingNotationInstrument {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    typeComposite: ").append(toIndentedString(typeComposite)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

