/*
 * Prime Developer Trial
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.factset.sdk.SecuritizedDerivativesAPIforDigitalPortals.models;

import java.util.Objects;
import java.util.Arrays;
import java.util.Map;
import java.util.HashMap;
import com.factset.sdk.SecuritizedDerivativesAPIforDigitalPortals.models.SecuritizedDerivativeNotationRankingIntradayListDataFactorCertificatesEffectiveUnderlying;
import com.factset.sdk.SecuritizedDerivativesAPIforDigitalPortals.models.SecuritizedDerivativeNotationScreenerValueRangesGetDataFactorCertificatesConstantLeverage;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.Serializable;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.factset.sdk.SecuritizedDerivativesAPIforDigitalPortals.JSON;


/**
 * Parameters for factor certificates.
 */
@ApiModel(description = "Parameters for factor certificates.")
@JsonPropertyOrder({
  SecuritizedDerivativeNotationScreenerValueRangesGetDataFactorCertificates.JSON_PROPERTY_EFFECTIVE_UNDERLYING,
  SecuritizedDerivativeNotationScreenerValueRangesGetDataFactorCertificates.JSON_PROPERTY_PARTICIPATION,
  SecuritizedDerivativeNotationScreenerValueRangesGetDataFactorCertificates.JSON_PROPERTY_CONSTANT_LEVERAGE
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class SecuritizedDerivativeNotationScreenerValueRangesGetDataFactorCertificates implements Serializable {
  private static final long serialVersionUID = 1L;

  public static final String JSON_PROPERTY_EFFECTIVE_UNDERLYING = "effectiveUnderlying";
  private SecuritizedDerivativeNotationRankingIntradayListDataFactorCertificatesEffectiveUnderlying effectiveUnderlying;

  /**
   * Participation direction of the factor certificate at the level movement of its effective underlying.
   */
  public enum ParticipationEnum {
    LONG("long"),
    
    SHORT("short");

    private String value;

    ParticipationEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static ParticipationEnum fromValue(String value) {
      for (ParticipationEnum b : ParticipationEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_PARTICIPATION = "participation";
  private ParticipationEnum participation;

  public static final String JSON_PROPERTY_CONSTANT_LEVERAGE = "constantLeverage";
  private SecuritizedDerivativeNotationScreenerValueRangesGetDataFactorCertificatesConstantLeverage constantLeverage;


  public SecuritizedDerivativeNotationScreenerValueRangesGetDataFactorCertificates effectiveUnderlying(SecuritizedDerivativeNotationRankingIntradayListDataFactorCertificatesEffectiveUnderlying effectiveUnderlying) {
    this.effectiveUnderlying = effectiveUnderlying;
    return this;
  }

   /**
   * Get effectiveUnderlying
   * @return effectiveUnderlying
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_EFFECTIVE_UNDERLYING)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public SecuritizedDerivativeNotationRankingIntradayListDataFactorCertificatesEffectiveUnderlying getEffectiveUnderlying() {
    return effectiveUnderlying;
  }


  @JsonProperty(JSON_PROPERTY_EFFECTIVE_UNDERLYING)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setEffectiveUnderlying(SecuritizedDerivativeNotationRankingIntradayListDataFactorCertificatesEffectiveUnderlying effectiveUnderlying) {
    this.effectiveUnderlying = effectiveUnderlying;
  }


  public SecuritizedDerivativeNotationScreenerValueRangesGetDataFactorCertificates participation(ParticipationEnum participation) {
    this.participation = participation;
    return this;
  }

   /**
   * Participation direction of the factor certificate at the level movement of its effective underlying.
   * @return participation
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Participation direction of the factor certificate at the level movement of its effective underlying.")
  @JsonProperty(JSON_PROPERTY_PARTICIPATION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public ParticipationEnum getParticipation() {
    return participation;
  }


  @JsonProperty(JSON_PROPERTY_PARTICIPATION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setParticipation(ParticipationEnum participation) {
    this.participation = participation;
  }


  public SecuritizedDerivativeNotationScreenerValueRangesGetDataFactorCertificates constantLeverage(SecuritizedDerivativeNotationScreenerValueRangesGetDataFactorCertificatesConstantLeverage constantLeverage) {
    this.constantLeverage = constantLeverage;
    return this;
  }

   /**
   * Get constantLeverage
   * @return constantLeverage
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_CONSTANT_LEVERAGE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public SecuritizedDerivativeNotationScreenerValueRangesGetDataFactorCertificatesConstantLeverage getConstantLeverage() {
    return constantLeverage;
  }


  @JsonProperty(JSON_PROPERTY_CONSTANT_LEVERAGE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setConstantLeverage(SecuritizedDerivativeNotationScreenerValueRangesGetDataFactorCertificatesConstantLeverage constantLeverage) {
    this.constantLeverage = constantLeverage;
  }


  /**
   * Return true if this _securitizedDerivative_notation_screener_valueRanges_get_data_factorCertificates object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SecuritizedDerivativeNotationScreenerValueRangesGetDataFactorCertificates securitizedDerivativeNotationScreenerValueRangesGetDataFactorCertificates = (SecuritizedDerivativeNotationScreenerValueRangesGetDataFactorCertificates) o;
    return Objects.equals(this.effectiveUnderlying, securitizedDerivativeNotationScreenerValueRangesGetDataFactorCertificates.effectiveUnderlying) &&
        Objects.equals(this.participation, securitizedDerivativeNotationScreenerValueRangesGetDataFactorCertificates.participation) &&
        Objects.equals(this.constantLeverage, securitizedDerivativeNotationScreenerValueRangesGetDataFactorCertificates.constantLeverage);
  }

  @Override
  public int hashCode() {
    return Objects.hash(effectiveUnderlying, participation, constantLeverage);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SecuritizedDerivativeNotationScreenerValueRangesGetDataFactorCertificates {\n");
    sb.append("    effectiveUnderlying: ").append(toIndentedString(effectiveUnderlying)).append("\n");
    sb.append("    participation: ").append(toIndentedString(participation)).append("\n");
    sb.append("    constantLeverage: ").append(toIndentedString(constantLeverage)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

