/*
 * Securitized Derivatives API For Digital Portals
 * Search for securitized derivative instruments, using a criteria-based screener. The API provides also fundamental data, notation-based key figures, list of barrier types, and details regarding the underlyings, their respective barriers and related cash flows, coupon lists and derived basic interest rate information.  The screener is based on securitized derivatives-specific parameters. The result is limited to the notations that satisfy all the selected filters. If more than one notation of an instrument matches the parameters, and no market priority has been specified, only the notation with the highest trading volume, averaged over one month, is considered. All identifier types used as parameters must be valid and application must have permissions for them.  Available search criteria include:  * validation: filter for only active listings, by price quality and latest/previous available price dates * traded markets: filter and indicate a market priority for the validation * life cycle: important dates in and features of the life cycle of the securitized derivatives instruments * filter by issuer, country of registration of the securitized derivatives * underlying and related barriers, including level and distance, and resulting cash flows * coupon data: where applicable, occurrence and frequency of coupon payments, current interest rate range * performance and volatility * product-specific ask-based key figures (not all key figures are available for all product types):     * bonus yield, sideways yield, maximum yield based on the ask price     * agio, discount     * spread     * break even, outperformance point, parity     * delta, weekly theta, vega, implied volatility     * leverage, omega     * intrinsic value, time value         Since some underlyings, e.g. an index or a performance difference of a stock and an index (alpha structure), do not represent a directly tradable asset, they do not have a price in the classical sense. Therefore, the term *level* is used instead of *price*, e.g. underlying level instead of underlying price. The endpoint does not support the search for securitized derivatives with multiple underlyings, thus only securitized derivatives with a single underlying are returned in the result.  The search can be restricted to a specific set of products by using customer-specific instrument or notation lists. Such restriction lists are set up by FactSet upon request.  This API is fully integrated with the corresponding Quotes API, allowing access to detailed price and performance information of instruments, as well as basic security identifier cross-reference. For direct access to price histories, please refer to the Time Series API for Digital Portals.  Similar criteria based screener APIs exist for equity and fixed income instruments: See the Stocks API and the Bonds API for details.
 *
 * The version of the OpenAPI document: 2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.factset.sdk.SecuritizedDerivativesAPIforDigitalPortals.models;

import java.util.Objects;
import java.util.Arrays;
import java.util.Map;
import java.util.HashMap;
import com.factset.sdk.SecuritizedDerivativesAPIforDigitalPortals.models.InlineResponse2006KeyFiguresAgio;
import com.factset.sdk.SecuritizedDerivativesAPIforDigitalPortals.models.InlineResponse2006KeyFiguresBonusYield;
import com.factset.sdk.SecuritizedDerivativesAPIforDigitalPortals.models.InlineResponse2006KeyFiguresBreakEven;
import com.factset.sdk.SecuritizedDerivativesAPIforDigitalPortals.models.InlineResponse2006KeyFiguresCurrency;
import com.factset.sdk.SecuritizedDerivativesAPIforDigitalPortals.models.InlineResponse2006KeyFiguresDelta;
import com.factset.sdk.SecuritizedDerivativesAPIforDigitalPortals.models.InlineResponse2006KeyFiguresDiscount;
import com.factset.sdk.SecuritizedDerivativesAPIforDigitalPortals.models.InlineResponse2006KeyFiguresMaximumYield;
import com.factset.sdk.SecuritizedDerivativesAPIforDigitalPortals.models.InlineResponse2006KeyFiguresSidewaysYield;
import com.factset.sdk.SecuritizedDerivativesAPIforDigitalPortals.models.InlineResponse2006KeyFiguresSpread;
import com.factset.sdk.SecuritizedDerivativesAPIforDigitalPortals.models.InlineResponse2006KeyFiguresThetaOneWeek;
import com.factset.sdk.SecuritizedDerivativesAPIforDigitalPortals.models.InlineResponse2006KeyFiguresVega;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.math.BigDecimal;
import java.io.Serializable;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.factset.sdk.SecuritizedDerivativesAPIforDigitalPortals.JSON;


/**
 * Key figures specific to securitized derivatives; based on ask prices.
 */
@ApiModel(description = "Key figures specific to securitized derivatives; based on ask prices.")
@JsonPropertyOrder({
  InlineResponse2006KeyFigures.JSON_PROPERTY_CURRENCY,
  InlineResponse2006KeyFigures.JSON_PROPERTY_BONUS_YIELD,
  InlineResponse2006KeyFigures.JSON_PROPERTY_SIDEWAYS_YIELD,
  InlineResponse2006KeyFigures.JSON_PROPERTY_MAXIMUM_YIELD,
  InlineResponse2006KeyFigures.JSON_PROPERTY_AGIO,
  InlineResponse2006KeyFigures.JSON_PROPERTY_DISCOUNT,
  InlineResponse2006KeyFigures.JSON_PROPERTY_BREAK_EVEN,
  InlineResponse2006KeyFigures.JSON_PROPERTY_SPREAD,
  InlineResponse2006KeyFigures.JSON_PROPERTY_DELTA,
  InlineResponse2006KeyFigures.JSON_PROPERTY_THETA_ONE_WEEK,
  InlineResponse2006KeyFigures.JSON_PROPERTY_VEGA,
  InlineResponse2006KeyFigures.JSON_PROPERTY_LEVERAGE,
  InlineResponse2006KeyFigures.JSON_PROPERTY_OMEGA,
  InlineResponse2006KeyFigures.JSON_PROPERTY_IMPLIED_VOLATILITY,
  InlineResponse2006KeyFigures.JSON_PROPERTY_INTRINSIC_VALUE,
  InlineResponse2006KeyFigures.JSON_PROPERTY_TIME_VALUE,
  InlineResponse2006KeyFigures.JSON_PROPERTY_OUTPERFORMANCE_POINT,
  InlineResponse2006KeyFigures.JSON_PROPERTY_PARITY
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class InlineResponse2006KeyFigures implements Serializable {
  private static final long serialVersionUID = 1L;

  public static final String JSON_PROPERTY_CURRENCY = "currency";
  private InlineResponse2006KeyFiguresCurrency currency;

  public static final String JSON_PROPERTY_BONUS_YIELD = "bonusYield";
  private InlineResponse2006KeyFiguresBonusYield bonusYield;

  public static final String JSON_PROPERTY_SIDEWAYS_YIELD = "sidewaysYield";
  private InlineResponse2006KeyFiguresSidewaysYield sidewaysYield;

  public static final String JSON_PROPERTY_MAXIMUM_YIELD = "maximumYield";
  private InlineResponse2006KeyFiguresMaximumYield maximumYield;

  public static final String JSON_PROPERTY_AGIO = "agio";
  private InlineResponse2006KeyFiguresAgio agio;

  public static final String JSON_PROPERTY_DISCOUNT = "discount";
  private InlineResponse2006KeyFiguresDiscount discount;

  public static final String JSON_PROPERTY_BREAK_EVEN = "breakEven";
  private InlineResponse2006KeyFiguresBreakEven breakEven;

  public static final String JSON_PROPERTY_SPREAD = "spread";
  private InlineResponse2006KeyFiguresSpread spread;

  public static final String JSON_PROPERTY_DELTA = "delta";
  private InlineResponse2006KeyFiguresDelta delta;

  public static final String JSON_PROPERTY_THETA_ONE_WEEK = "thetaOneWeek";
  private InlineResponse2006KeyFiguresThetaOneWeek thetaOneWeek;

  public static final String JSON_PROPERTY_VEGA = "vega";
  private InlineResponse2006KeyFiguresVega vega;

  public static final String JSON_PROPERTY_LEVERAGE = "leverage";
  private BigDecimal leverage;

  public static final String JSON_PROPERTY_OMEGA = "omega";
  private BigDecimal omega;

  public static final String JSON_PROPERTY_IMPLIED_VOLATILITY = "impliedVolatility";
  private BigDecimal impliedVolatility;

  public static final String JSON_PROPERTY_INTRINSIC_VALUE = "intrinsicValue";
  private BigDecimal intrinsicValue;

  public static final String JSON_PROPERTY_TIME_VALUE = "timeValue";
  private BigDecimal timeValue;

  public static final String JSON_PROPERTY_OUTPERFORMANCE_POINT = "outperformancePoint";
  private BigDecimal outperformancePoint;

  public static final String JSON_PROPERTY_PARITY = "parity";
  private BigDecimal parity;

  public InlineResponse2006KeyFigures() { 
  }

  public InlineResponse2006KeyFigures currency(InlineResponse2006KeyFiguresCurrency currency) {
    this.currency = currency;
    return this;
  }

   /**
   * Get currency
   * @return currency
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_CURRENCY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public InlineResponse2006KeyFiguresCurrency getCurrency() {
    return currency;
  }


  @JsonProperty(JSON_PROPERTY_CURRENCY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setCurrency(InlineResponse2006KeyFiguresCurrency currency) {
    this.currency = currency;
  }


  public InlineResponse2006KeyFigures bonusYield(InlineResponse2006KeyFiguresBonusYield bonusYield) {
    this.bonusYield = bonusYield;
    return this;
  }

   /**
   * Get bonusYield
   * @return bonusYield
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_BONUS_YIELD)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public InlineResponse2006KeyFiguresBonusYield getBonusYield() {
    return bonusYield;
  }


  @JsonProperty(JSON_PROPERTY_BONUS_YIELD)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setBonusYield(InlineResponse2006KeyFiguresBonusYield bonusYield) {
    this.bonusYield = bonusYield;
  }


  public InlineResponse2006KeyFigures sidewaysYield(InlineResponse2006KeyFiguresSidewaysYield sidewaysYield) {
    this.sidewaysYield = sidewaysYield;
    return this;
  }

   /**
   * Get sidewaysYield
   * @return sidewaysYield
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_SIDEWAYS_YIELD)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public InlineResponse2006KeyFiguresSidewaysYield getSidewaysYield() {
    return sidewaysYield;
  }


  @JsonProperty(JSON_PROPERTY_SIDEWAYS_YIELD)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSidewaysYield(InlineResponse2006KeyFiguresSidewaysYield sidewaysYield) {
    this.sidewaysYield = sidewaysYield;
  }


  public InlineResponse2006KeyFigures maximumYield(InlineResponse2006KeyFiguresMaximumYield maximumYield) {
    this.maximumYield = maximumYield;
    return this;
  }

   /**
   * Get maximumYield
   * @return maximumYield
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_MAXIMUM_YIELD)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public InlineResponse2006KeyFiguresMaximumYield getMaximumYield() {
    return maximumYield;
  }


  @JsonProperty(JSON_PROPERTY_MAXIMUM_YIELD)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setMaximumYield(InlineResponse2006KeyFiguresMaximumYield maximumYield) {
    this.maximumYield = maximumYield;
  }


  public InlineResponse2006KeyFigures agio(InlineResponse2006KeyFiguresAgio agio) {
    this.agio = agio;
    return this;
  }

   /**
   * Get agio
   * @return agio
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_AGIO)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public InlineResponse2006KeyFiguresAgio getAgio() {
    return agio;
  }


  @JsonProperty(JSON_PROPERTY_AGIO)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setAgio(InlineResponse2006KeyFiguresAgio agio) {
    this.agio = agio;
  }


  public InlineResponse2006KeyFigures discount(InlineResponse2006KeyFiguresDiscount discount) {
    this.discount = discount;
    return this;
  }

   /**
   * Get discount
   * @return discount
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_DISCOUNT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public InlineResponse2006KeyFiguresDiscount getDiscount() {
    return discount;
  }


  @JsonProperty(JSON_PROPERTY_DISCOUNT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setDiscount(InlineResponse2006KeyFiguresDiscount discount) {
    this.discount = discount;
  }


  public InlineResponse2006KeyFigures breakEven(InlineResponse2006KeyFiguresBreakEven breakEven) {
    this.breakEven = breakEven;
    return this;
  }

   /**
   * Get breakEven
   * @return breakEven
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_BREAK_EVEN)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public InlineResponse2006KeyFiguresBreakEven getBreakEven() {
    return breakEven;
  }


  @JsonProperty(JSON_PROPERTY_BREAK_EVEN)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setBreakEven(InlineResponse2006KeyFiguresBreakEven breakEven) {
    this.breakEven = breakEven;
  }


  public InlineResponse2006KeyFigures spread(InlineResponse2006KeyFiguresSpread spread) {
    this.spread = spread;
    return this;
  }

   /**
   * Get spread
   * @return spread
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_SPREAD)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public InlineResponse2006KeyFiguresSpread getSpread() {
    return spread;
  }


  @JsonProperty(JSON_PROPERTY_SPREAD)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSpread(InlineResponse2006KeyFiguresSpread spread) {
    this.spread = spread;
  }


  public InlineResponse2006KeyFigures delta(InlineResponse2006KeyFiguresDelta delta) {
    this.delta = delta;
    return this;
  }

   /**
   * Get delta
   * @return delta
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_DELTA)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public InlineResponse2006KeyFiguresDelta getDelta() {
    return delta;
  }


  @JsonProperty(JSON_PROPERTY_DELTA)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setDelta(InlineResponse2006KeyFiguresDelta delta) {
    this.delta = delta;
  }


  public InlineResponse2006KeyFigures thetaOneWeek(InlineResponse2006KeyFiguresThetaOneWeek thetaOneWeek) {
    this.thetaOneWeek = thetaOneWeek;
    return this;
  }

   /**
   * Get thetaOneWeek
   * @return thetaOneWeek
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_THETA_ONE_WEEK)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public InlineResponse2006KeyFiguresThetaOneWeek getThetaOneWeek() {
    return thetaOneWeek;
  }


  @JsonProperty(JSON_PROPERTY_THETA_ONE_WEEK)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setThetaOneWeek(InlineResponse2006KeyFiguresThetaOneWeek thetaOneWeek) {
    this.thetaOneWeek = thetaOneWeek;
  }


  public InlineResponse2006KeyFigures vega(InlineResponse2006KeyFiguresVega vega) {
    this.vega = vega;
    return this;
  }

   /**
   * Get vega
   * @return vega
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_VEGA)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public InlineResponse2006KeyFiguresVega getVega() {
    return vega;
  }


  @JsonProperty(JSON_PROPERTY_VEGA)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setVega(InlineResponse2006KeyFiguresVega vega) {
    this.vega = vega;
  }


  public InlineResponse2006KeyFigures leverage(BigDecimal leverage) {
    this.leverage = leverage;
    return this;
  }

   /**
   * Leverage. It represents the ratio of the underlying level to the ask price of the securitized derivative, adjusted for the cover ratio and the currency cross rate. This key figure is calculated only for leveraged securitized derivatives (e.g. warrants, knock-out certificates).
   * @return leverage
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Leverage. It represents the ratio of the underlying level to the ask price of the securitized derivative, adjusted for the cover ratio and the currency cross rate. This key figure is calculated only for leveraged securitized derivatives (e.g. warrants, knock-out certificates).")
  @JsonProperty(JSON_PROPERTY_LEVERAGE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public BigDecimal getLeverage() {
    return leverage;
  }


  @JsonProperty(JSON_PROPERTY_LEVERAGE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setLeverage(BigDecimal leverage) {
    this.leverage = leverage;
  }


  public InlineResponse2006KeyFigures omega(BigDecimal omega) {
    this.omega = omega;
    return this;
  }

   /**
   * Omega. It represents unadjusted delta (see attribute &#x60;delta.unadjusted&#x60;) multiplied with the leverage (see attribute &#x60;leverage&#x60;), both calculated based on the ask price of the derivative. Omega indicates the elasticity of the securitized derivative&#39;s price regarding the underlying level. This key figure is calculated for plain vanilla warrants only.
   * @return omega
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Omega. It represents unadjusted delta (see attribute `delta.unadjusted`) multiplied with the leverage (see attribute `leverage`), both calculated based on the ask price of the derivative. Omega indicates the elasticity of the securitized derivative's price regarding the underlying level. This key figure is calculated for plain vanilla warrants only.")
  @JsonProperty(JSON_PROPERTY_OMEGA)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public BigDecimal getOmega() {
    return omega;
  }


  @JsonProperty(JSON_PROPERTY_OMEGA)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setOmega(BigDecimal omega) {
    this.omega = omega;
  }


  public InlineResponse2006KeyFigures impliedVolatility(BigDecimal impliedVolatility) {
    this.impliedVolatility = impliedVolatility;
    return this;
  }

   /**
   * Implied volatility. It represents the volatility of the underlying that justifies the ask price of the derivative, when used as a parameter in the derivative&#39;s pricing model (such as Black-Scholes). Its value is a result of the pricing process, thus it represents the annual volatility of the underlying expected by the market participants until maturity of the derivative. This key figure is calculated for plain vanilla warrants only.
   * @return impliedVolatility
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Implied volatility. It represents the volatility of the underlying that justifies the ask price of the derivative, when used as a parameter in the derivative's pricing model (such as Black-Scholes). Its value is a result of the pricing process, thus it represents the annual volatility of the underlying expected by the market participants until maturity of the derivative. This key figure is calculated for plain vanilla warrants only.")
  @JsonProperty(JSON_PROPERTY_IMPLIED_VOLATILITY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public BigDecimal getImpliedVolatility() {
    return impliedVolatility;
  }


  @JsonProperty(JSON_PROPERTY_IMPLIED_VOLATILITY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setImpliedVolatility(BigDecimal impliedVolatility) {
    this.impliedVolatility = impliedVolatility;
  }


  public InlineResponse2006KeyFigures intrinsicValue(BigDecimal intrinsicValue) {
    this.intrinsicValue = intrinsicValue;
    return this;
  }

   /**
   * Intrinsic value. It represents the difference between the underlying level and the strike of the securitized derivative, adjusted for the cover ratio and the currency cross rate. If the difference is negative, the intrinsic value is given as 0. The intrinsic value represents the theoretical profit from an immediate exercise of the derivative. This key figure is calculated for plain vanilla warrants only.
   * @return intrinsicValue
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Intrinsic value. It represents the difference between the underlying level and the strike of the securitized derivative, adjusted for the cover ratio and the currency cross rate. If the difference is negative, the intrinsic value is given as 0. The intrinsic value represents the theoretical profit from an immediate exercise of the derivative. This key figure is calculated for plain vanilla warrants only.")
  @JsonProperty(JSON_PROPERTY_INTRINSIC_VALUE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public BigDecimal getIntrinsicValue() {
    return intrinsicValue;
  }


  @JsonProperty(JSON_PROPERTY_INTRINSIC_VALUE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setIntrinsicValue(BigDecimal intrinsicValue) {
    this.intrinsicValue = intrinsicValue;
  }


  public InlineResponse2006KeyFigures timeValue(BigDecimal timeValue) {
    this.timeValue = timeValue;
    return this;
  }

   /**
   * Time value. It represents the difference between the ask price of the securitized derivative and its intrinsic value (see attribute &#x60;intrinsicValue&#x60;). This key figure is calculated for plain vanilla warrants only.
   * @return timeValue
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Time value. It represents the difference between the ask price of the securitized derivative and its intrinsic value (see attribute `intrinsicValue`). This key figure is calculated for plain vanilla warrants only.")
  @JsonProperty(JSON_PROPERTY_TIME_VALUE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public BigDecimal getTimeValue() {
    return timeValue;
  }


  @JsonProperty(JSON_PROPERTY_TIME_VALUE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setTimeValue(BigDecimal timeValue) {
    this.timeValue = timeValue;
  }


  public InlineResponse2006KeyFigures outperformancePoint(BigDecimal outperformancePoint) {
    this.outperformancePoint = outperformancePoint;
    return this;
  }

   /**
   * Outperformance point. It represents the underlying level from which the underlying starts to outperform the securitized derivative, thus the investor would be better off investing directly in the underlying. It is calculated only for securitized derivatives with a limited payout (e.g. capped products). For the value unit, see attribute &#x60;instrument.underlying.valueUnit&#x60;.
   * @return outperformancePoint
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Outperformance point. It represents the underlying level from which the underlying starts to outperform the securitized derivative, thus the investor would be better off investing directly in the underlying. It is calculated only for securitized derivatives with a limited payout (e.g. capped products). For the value unit, see attribute `instrument.underlying.valueUnit`.")
  @JsonProperty(JSON_PROPERTY_OUTPERFORMANCE_POINT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public BigDecimal getOutperformancePoint() {
    return outperformancePoint;
  }


  @JsonProperty(JSON_PROPERTY_OUTPERFORMANCE_POINT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setOutperformancePoint(BigDecimal outperformancePoint) {
    this.outperformancePoint = outperformancePoint;
  }


  public InlineResponse2006KeyFigures parity(BigDecimal parity) {
    this.parity = parity;
    return this;
  }

   /**
   * Parity. It represents the difference between the underlying level and the strike of the derivative, adjusted for the cover ratio and the currency cross rate. Negative values are possible. It is the gain or loss that would result from the immediate exercise of an already present warrant and a simultaneously executed compensation transaction on the spot markets. This key figure is calculated for plain vanilla warrants only.
   * @return parity
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Parity. It represents the difference between the underlying level and the strike of the derivative, adjusted for the cover ratio and the currency cross rate. Negative values are possible. It is the gain or loss that would result from the immediate exercise of an already present warrant and a simultaneously executed compensation transaction on the spot markets. This key figure is calculated for plain vanilla warrants only.")
  @JsonProperty(JSON_PROPERTY_PARITY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public BigDecimal getParity() {
    return parity;
  }


  @JsonProperty(JSON_PROPERTY_PARITY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setParity(BigDecimal parity) {
    this.parity = parity;
  }


  /**
   * Return true if this inline_response_200_6_keyFigures object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    InlineResponse2006KeyFigures inlineResponse2006KeyFigures = (InlineResponse2006KeyFigures) o;
    return Objects.equals(this.currency, inlineResponse2006KeyFigures.currency) &&
        Objects.equals(this.bonusYield, inlineResponse2006KeyFigures.bonusYield) &&
        Objects.equals(this.sidewaysYield, inlineResponse2006KeyFigures.sidewaysYield) &&
        Objects.equals(this.maximumYield, inlineResponse2006KeyFigures.maximumYield) &&
        Objects.equals(this.agio, inlineResponse2006KeyFigures.agio) &&
        Objects.equals(this.discount, inlineResponse2006KeyFigures.discount) &&
        Objects.equals(this.breakEven, inlineResponse2006KeyFigures.breakEven) &&
        Objects.equals(this.spread, inlineResponse2006KeyFigures.spread) &&
        Objects.equals(this.delta, inlineResponse2006KeyFigures.delta) &&
        Objects.equals(this.thetaOneWeek, inlineResponse2006KeyFigures.thetaOneWeek) &&
        Objects.equals(this.vega, inlineResponse2006KeyFigures.vega) &&
        Objects.equals(this.leverage, inlineResponse2006KeyFigures.leverage) &&
        Objects.equals(this.omega, inlineResponse2006KeyFigures.omega) &&
        Objects.equals(this.impliedVolatility, inlineResponse2006KeyFigures.impliedVolatility) &&
        Objects.equals(this.intrinsicValue, inlineResponse2006KeyFigures.intrinsicValue) &&
        Objects.equals(this.timeValue, inlineResponse2006KeyFigures.timeValue) &&
        Objects.equals(this.outperformancePoint, inlineResponse2006KeyFigures.outperformancePoint) &&
        Objects.equals(this.parity, inlineResponse2006KeyFigures.parity);
  }

  @Override
  public int hashCode() {
    return Objects.hash(currency, bonusYield, sidewaysYield, maximumYield, agio, discount, breakEven, spread, delta, thetaOneWeek, vega, leverage, omega, impliedVolatility, intrinsicValue, timeValue, outperformancePoint, parity);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class InlineResponse2006KeyFigures {\n");
    sb.append("    currency: ").append(toIndentedString(currency)).append("\n");
    sb.append("    bonusYield: ").append(toIndentedString(bonusYield)).append("\n");
    sb.append("    sidewaysYield: ").append(toIndentedString(sidewaysYield)).append("\n");
    sb.append("    maximumYield: ").append(toIndentedString(maximumYield)).append("\n");
    sb.append("    agio: ").append(toIndentedString(agio)).append("\n");
    sb.append("    discount: ").append(toIndentedString(discount)).append("\n");
    sb.append("    breakEven: ").append(toIndentedString(breakEven)).append("\n");
    sb.append("    spread: ").append(toIndentedString(spread)).append("\n");
    sb.append("    delta: ").append(toIndentedString(delta)).append("\n");
    sb.append("    thetaOneWeek: ").append(toIndentedString(thetaOneWeek)).append("\n");
    sb.append("    vega: ").append(toIndentedString(vega)).append("\n");
    sb.append("    leverage: ").append(toIndentedString(leverage)).append("\n");
    sb.append("    omega: ").append(toIndentedString(omega)).append("\n");
    sb.append("    impliedVolatility: ").append(toIndentedString(impliedVolatility)).append("\n");
    sb.append("    intrinsicValue: ").append(toIndentedString(intrinsicValue)).append("\n");
    sb.append("    timeValue: ").append(toIndentedString(timeValue)).append("\n");
    sb.append("    outperformancePoint: ").append(toIndentedString(outperformancePoint)).append("\n");
    sb.append("    parity: ").append(toIndentedString(parity)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

