/*
 * Natural Language Processing API
 * APIs that leverage Natural Language Processing to help extract meaningful data from unstructured text
 *
 * The version of the OpenAPI document: 1.3.0
 * Contact: api@factset.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.factset.sdk.NaturalLanguageProcessing.models;

import java.util.Objects;
import java.util.Arrays;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.math.BigDecimal;
import java.io.Serializable;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.factset.sdk.NaturalLanguageProcessing.JSON;


/**
 * Schema that defines the answer with a confidence score.
 */
@ApiModel(description = "Schema that defines the answer with a confidence score.")
@JsonPropertyOrder({
  QnAAnswer.JSON_PROPERTY_ANSWER,
  QnAAnswer.JSON_PROPERTY_SCORE
})
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")

public class QnAAnswer implements Serializable {
  private static final long serialVersionUID = 1L;

  public static final String JSON_PROPERTY_ANSWER = "answer";
  private String answer;

  public static final String JSON_PROPERTY_SCORE = "score";
  private BigDecimal score;

  public QnAAnswer() { 
  }

  @JsonCreator
  public QnAAnswer(
    @JsonProperty(value=JSON_PROPERTY_ANSWER, required=true) String answer, 
    @JsonProperty(value=JSON_PROPERTY_SCORE, required=true) BigDecimal score
  ) {
    this();
    this.answer = answer;
    this.score = score;
  }

  public QnAAnswer answer(String answer) {
    this.answer = answer;
    return this;
  }

   /**
   * The machine-generated answer to the question
   * @return answer
  **/
  @jakarta.annotation.Nonnull
  @ApiModelProperty(example = "Joel Wilson", required = true, value = "The machine-generated answer to the question")
  @JsonProperty(JSON_PROPERTY_ANSWER)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getAnswer() {
    return answer;
  }


  @JsonProperty(JSON_PROPERTY_ANSWER)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setAnswer(String answer) {
    this.answer = answer;
  }


  public QnAAnswer score(BigDecimal score) {
    this.score = score;
    return this;
  }

   /**
   * The confidence score associated to the answer
   * @return score
  **/
  @jakarta.annotation.Nonnull
  @ApiModelProperty(example = "0.8831543922424316", required = true, value = "The confidence score associated to the answer")
  @JsonProperty(JSON_PROPERTY_SCORE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public BigDecimal getScore() {
    return score;
  }


  @JsonProperty(JSON_PROPERTY_SCORE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setScore(BigDecimal score) {
    this.score = score;
  }


  /**
   * Return true if this QnAAnswer object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    QnAAnswer qnAAnswer = (QnAAnswer) o;
    return Objects.equals(this.answer, qnAAnswer.answer) &&
        Objects.equals(this.score, qnAAnswer.score);
  }

  @Override
  public int hashCode() {
    return Objects.hash(answer, score);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class QnAAnswer {\n");
    sb.append("    answer: ").append(toIndentedString(answer)).append("\n");
    sb.append("    score: ").append(toIndentedString(score)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

