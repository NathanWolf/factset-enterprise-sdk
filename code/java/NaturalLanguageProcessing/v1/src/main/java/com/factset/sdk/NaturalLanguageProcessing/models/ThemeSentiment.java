/*
 * Natural Language Processing API
 * APIs that leverage Natural Language Processing to help extract meaningful data from unstructured text
 *
 * The version of the OpenAPI document: 1.3.0
 * Contact: api@factset.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.factset.sdk.NaturalLanguageProcessing.models;

import java.util.Objects;
import java.util.Arrays;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.math.BigDecimal;
import java.io.Serializable;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.factset.sdk.NaturalLanguageProcessing.JSON;


/**
 * Schema that defines the extracted theme and the corresponding sentiments
 */
@ApiModel(description = "Schema that defines the extracted theme and the corresponding sentiments")
@JsonPropertyOrder({
  ThemeSentiment.JSON_PROPERTY_SENTIMENT,
  ThemeSentiment.JSON_PROPERTY_SENTIMENT_SCORE,
  ThemeSentiment.JSON_PROPERTY_THEME_SCORE,
  ThemeSentiment.JSON_PROPERTY_THEME_TEXT
})
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")

public class ThemeSentiment implements Serializable {
  private static final long serialVersionUID = 1L;

  /**
   * The sentiment of the theme.
   */
  public enum SentimentEnum {
    POSITIVE("positive"),
    
    NEGATIVE("negative"),
    
    NEUTRAL("neutral");

    private String value;

    SentimentEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static SentimentEnum fromValue(String value) {
      for (SentimentEnum b : SentimentEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_SENTIMENT = "sentiment";
  private SentimentEnum sentiment;

  public static final String JSON_PROPERTY_SENTIMENT_SCORE = "sentimentScore";
  private BigDecimal sentimentScore;

  public static final String JSON_PROPERTY_THEME_SCORE = "themeScore";
  private BigDecimal themeScore;

  public static final String JSON_PROPERTY_THEME_TEXT = "themeText";
  private String themeText;

  public ThemeSentiment() { 
  }

  @JsonCreator
  public ThemeSentiment(
    @JsonProperty(value=JSON_PROPERTY_THEME_SCORE, required=true) BigDecimal themeScore, 
    @JsonProperty(value=JSON_PROPERTY_THEME_TEXT, required=true) String themeText
  ) {
    this();
    this.themeScore = themeScore;
    this.themeText = themeText;
  }

  public ThemeSentiment sentiment(SentimentEnum sentiment) {
    this.sentiment = sentiment;
    return this;
  }

   /**
   * The sentiment of the theme.
   * @return sentiment
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(example = "positive", value = "The sentiment of the theme.")
  @JsonProperty(JSON_PROPERTY_SENTIMENT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public SentimentEnum getSentiment() {
    return sentiment;
  }


  @JsonProperty(JSON_PROPERTY_SENTIMENT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSentiment(SentimentEnum sentiment) {
    this.sentiment = sentiment;
  }


  public ThemeSentiment sentimentScore(BigDecimal sentimentScore) {
    this.sentimentScore = sentimentScore;
    return this;
  }

   /**
   * Confidence score of the sentiment
   * @return sentimentScore
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(example = "0.9900231957", value = "Confidence score of the sentiment")
  @JsonProperty(JSON_PROPERTY_SENTIMENT_SCORE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public BigDecimal getSentimentScore() {
    return sentimentScore;
  }


  @JsonProperty(JSON_PROPERTY_SENTIMENT_SCORE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSentimentScore(BigDecimal sentimentScore) {
    this.sentimentScore = sentimentScore;
  }


  public ThemeSentiment themeScore(BigDecimal themeScore) {
    this.themeScore = themeScore;
    return this;
  }

   /**
   * The confidence score associated to the theme
   * @return themeScore
  **/
  @jakarta.annotation.Nonnull
  @ApiModelProperty(example = "0.88", required = true, value = "The confidence score associated to the theme")
  @JsonProperty(JSON_PROPERTY_THEME_SCORE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public BigDecimal getThemeScore() {
    return themeScore;
  }


  @JsonProperty(JSON_PROPERTY_THEME_SCORE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setThemeScore(BigDecimal themeScore) {
    this.themeScore = themeScore;
  }


  public ThemeSentiment themeText(String themeText) {
    this.themeText = themeText;
    return this;
  }

   /**
   * The extracted theme as text
   * @return themeText
  **/
  @jakarta.annotation.Nonnull
  @ApiModelProperty(example = "home entertainment results", required = true, value = "The extracted theme as text")
  @JsonProperty(JSON_PROPERTY_THEME_TEXT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getThemeText() {
    return themeText;
  }


  @JsonProperty(JSON_PROPERTY_THEME_TEXT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setThemeText(String themeText) {
    this.themeText = themeText;
  }


  /**
   * Return true if this ThemeSentiment object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ThemeSentiment themeSentiment = (ThemeSentiment) o;
    return Objects.equals(this.sentiment, themeSentiment.sentiment) &&
        Objects.equals(this.sentimentScore, themeSentiment.sentimentScore) &&
        Objects.equals(this.themeScore, themeSentiment.themeScore) &&
        Objects.equals(this.themeText, themeSentiment.themeText);
  }

  @Override
  public int hashCode() {
    return Objects.hash(sentiment, sentimentScore, themeScore, themeText);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ThemeSentiment {\n");
    sb.append("    sentiment: ").append(toIndentedString(sentiment)).append("\n");
    sb.append("    sentimentScore: ").append(toIndentedString(sentimentScore)).append("\n");
    sb.append("    themeScore: ").append(toIndentedString(themeScore)).append("\n");
    sb.append("    themeText: ").append(toIndentedString(themeText)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

