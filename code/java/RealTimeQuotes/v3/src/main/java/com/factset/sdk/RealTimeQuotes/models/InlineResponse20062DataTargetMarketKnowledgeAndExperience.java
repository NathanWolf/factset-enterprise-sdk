/*
 * Quotes API For Digital Portals
 * The Quotes API combines endpoints for retrieving security end-of-day, delayed, and realtime prices with performance key figures and basic reference data on the security and market level.  The API supports over 20 different price types for each quote and comes with basic search endpoints based on security identifiers and instrument names. Market coverage is included in the *Sample Use Cases* section below.  The Digital Portal use case is focused on high-performance applications that are  * serving millions of end-users, * accessible by client browsers via the internet, * supporting subscriptions for streamed updates out-of-the-box, * typically combining a wide variety of *for Digital Portals*-APIs into a highly use-case specific solution for customers, * integrated into complex infrastructures such as existing frontend frameworks, authentication services.  All APIs labelled *for Digital Portals* have been designed for direct use by client web applications and feature extreme low latency: The average response time across all endpoints is 30 ms whereas 99% of all requests are answered in close to under 300ms.  See the [Time Series API for Digital Portals](https://developer.factset.com/api-catalog/time-series-api-digital-portals) for direct access to price histories, and the [News API for Digital Portals](https://developer.factset.com/api-catalog/news-api-digital-portals) for searching and fetching related news. 
 *
 * The version of the OpenAPI document: 3.0.0
 * Contact: api@factset.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.factset.sdk.RealTimeQuotes.models;

import java.util.Objects;
import java.util.Arrays;
import java.util.Map;
import java.util.HashMap;
import com.factset.sdk.RealTimeQuotes.models.InlineResponse20062DataTargetMarketKnowledgeAndExperienceGermany;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import org.openapitools.jackson.nullable.JsonNullable;
import com.fasterxml.jackson.annotation.JsonIgnore;
import org.openapitools.jackson.nullable.JsonNullable;
import java.util.NoSuchElementException;
import java.io.Serializable;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.factset.sdk.RealTimeQuotes.JSON;


/**
 * Describes the level of knowledge and experience an investor should have in order to acquire the investment product.
 */
@ApiModel(description = "Describes the level of knowledge and experience an investor should have in order to acquire the investment product.")
@JsonPropertyOrder({
  InlineResponse20062DataTargetMarketKnowledgeAndExperience.JSON_PROPERTY_BASIC_INVESTOR,
  InlineResponse20062DataTargetMarketKnowledgeAndExperience.JSON_PROPERTY_INFORMED_INVESTOR,
  InlineResponse20062DataTargetMarketKnowledgeAndExperience.JSON_PROPERTY_ADVANCED_INVESTOR,
  InlineResponse20062DataTargetMarketKnowledgeAndExperience.JSON_PROPERTY_GERMANY
})
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")

public class InlineResponse20062DataTargetMarketKnowledgeAndExperience implements Serializable {
  private static final long serialVersionUID = 1L;

  /**
   * Indicates whether the investment product is suitable for investors having basic knowledge and experience. Basic knowledge and experience means that the investor can make an informed investment decision based on the regulated and authorized offering documentation or with the help of basic information provided by the point of sale or the investor has no financial industry experience, i.e. the investment product is suitable for a first-time investor
   */
  public enum BasicInvestorEnum {
    YES("yes"),
    
    NO("no"),
    
    NEUTRAL("neutral"),
    
    FEEDBACK("feedback");

    private String value;

    BasicInvestorEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static BasicInvestorEnum fromValue(String value) {
      for (BasicInvestorEnum b : BasicInvestorEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      return null;
    }
  }

  public static final String JSON_PROPERTY_BASIC_INVESTOR = "basicInvestor";
  private JsonNullable<BasicInvestorEnum> basicInvestor = JsonNullable.<BasicInvestorEnum>undefined();

  /**
   * Indicates whether the investment product is suitable for investors with an informed level of knowledge and experience. Informed investors have the ability to understand the particular financial instrument. Additionally, the investor must have a number of investment holdings in relevant financial instruments or must be involved in frequent trading activity in those.
   */
  public enum InformedInvestorEnum {
    YES("yes"),
    
    NO("no"),
    
    NEUTRAL("neutral"),
    
    FEEDBACK("feedback");

    private String value;

    InformedInvestorEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static InformedInvestorEnum fromValue(String value) {
      for (InformedInvestorEnum b : InformedInvestorEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      return null;
    }
  }

  public static final String JSON_PROPERTY_INFORMED_INVESTOR = "informedInvestor";
  private JsonNullable<InformedInvestorEnum> informedInvestor = JsonNullable.<InformedInvestorEnum>undefined();

  /**
   * Indicates whether the investment product is suitable for investors with an advanced level of knowledge and experience. An advanced investor has comprehensive understanding of relevant financial instruments. Additionally, the investor must have a large number of diverse investment holdings in relevant financial instruments; must be involved in frequent trading activity in those, must have had previous exposure to high-risk or complex investments or must have relevant financial industry experience.
   */
  public enum AdvancedInvestorEnum {
    YES("yes"),
    
    NO("no"),
    
    NEUTRAL("neutral"),
    
    FEEDBACK("feedback");

    private String value;

    AdvancedInvestorEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static AdvancedInvestorEnum fromValue(String value) {
      for (AdvancedInvestorEnum b : AdvancedInvestorEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      return null;
    }
  }

  public static final String JSON_PROPERTY_ADVANCED_INVESTOR = "advancedInvestor";
  private JsonNullable<AdvancedInvestorEnum> advancedInvestor = JsonNullable.<AdvancedInvestorEnum>undefined();

  public static final String JSON_PROPERTY_GERMANY = "germany";
  private InlineResponse20062DataTargetMarketKnowledgeAndExperienceGermany germany;

  public InlineResponse20062DataTargetMarketKnowledgeAndExperience() { 
  }

  public InlineResponse20062DataTargetMarketKnowledgeAndExperience basicInvestor(BasicInvestorEnum basicInvestor) {
    this.basicInvestor = JsonNullable.<BasicInvestorEnum>of(basicInvestor);
    return this;
  }

   /**
   * Indicates whether the investment product is suitable for investors having basic knowledge and experience. Basic knowledge and experience means that the investor can make an informed investment decision based on the regulated and authorized offering documentation or with the help of basic information provided by the point of sale or the investor has no financial industry experience, i.e. the investment product is suitable for a first-time investor
   * @return basicInvestor
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(value = "Indicates whether the investment product is suitable for investors having basic knowledge and experience. Basic knowledge and experience means that the investor can make an informed investment decision based on the regulated and authorized offering documentation or with the help of basic information provided by the point of sale or the investor has no financial industry experience, i.e. the investment product is suitable for a first-time investor")
  @JsonIgnore

  public BasicInvestorEnum getBasicInvestor() {
        return basicInvestor.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_BASIC_INVESTOR)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<BasicInvestorEnum> getBasicInvestor_JsonNullable() {
    return basicInvestor;
  }
  
  @JsonProperty(JSON_PROPERTY_BASIC_INVESTOR)
  public void setBasicInvestor_JsonNullable(JsonNullable<BasicInvestorEnum> basicInvestor) {
    this.basicInvestor = basicInvestor;
  }

  public void setBasicInvestor(BasicInvestorEnum basicInvestor) {
    this.basicInvestor = JsonNullable.<BasicInvestorEnum>of(basicInvestor);
  }


  public InlineResponse20062DataTargetMarketKnowledgeAndExperience informedInvestor(InformedInvestorEnum informedInvestor) {
    this.informedInvestor = JsonNullable.<InformedInvestorEnum>of(informedInvestor);
    return this;
  }

   /**
   * Indicates whether the investment product is suitable for investors with an informed level of knowledge and experience. Informed investors have the ability to understand the particular financial instrument. Additionally, the investor must have a number of investment holdings in relevant financial instruments or must be involved in frequent trading activity in those.
   * @return informedInvestor
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(value = "Indicates whether the investment product is suitable for investors with an informed level of knowledge and experience. Informed investors have the ability to understand the particular financial instrument. Additionally, the investor must have a number of investment holdings in relevant financial instruments or must be involved in frequent trading activity in those.")
  @JsonIgnore

  public InformedInvestorEnum getInformedInvestor() {
        return informedInvestor.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_INFORMED_INVESTOR)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<InformedInvestorEnum> getInformedInvestor_JsonNullable() {
    return informedInvestor;
  }
  
  @JsonProperty(JSON_PROPERTY_INFORMED_INVESTOR)
  public void setInformedInvestor_JsonNullable(JsonNullable<InformedInvestorEnum> informedInvestor) {
    this.informedInvestor = informedInvestor;
  }

  public void setInformedInvestor(InformedInvestorEnum informedInvestor) {
    this.informedInvestor = JsonNullable.<InformedInvestorEnum>of(informedInvestor);
  }


  public InlineResponse20062DataTargetMarketKnowledgeAndExperience advancedInvestor(AdvancedInvestorEnum advancedInvestor) {
    this.advancedInvestor = JsonNullable.<AdvancedInvestorEnum>of(advancedInvestor);
    return this;
  }

   /**
   * Indicates whether the investment product is suitable for investors with an advanced level of knowledge and experience. An advanced investor has comprehensive understanding of relevant financial instruments. Additionally, the investor must have a large number of diverse investment holdings in relevant financial instruments; must be involved in frequent trading activity in those, must have had previous exposure to high-risk or complex investments or must have relevant financial industry experience.
   * @return advancedInvestor
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(value = "Indicates whether the investment product is suitable for investors with an advanced level of knowledge and experience. An advanced investor has comprehensive understanding of relevant financial instruments. Additionally, the investor must have a large number of diverse investment holdings in relevant financial instruments; must be involved in frequent trading activity in those, must have had previous exposure to high-risk or complex investments or must have relevant financial industry experience.")
  @JsonIgnore

  public AdvancedInvestorEnum getAdvancedInvestor() {
        return advancedInvestor.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_ADVANCED_INVESTOR)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<AdvancedInvestorEnum> getAdvancedInvestor_JsonNullable() {
    return advancedInvestor;
  }
  
  @JsonProperty(JSON_PROPERTY_ADVANCED_INVESTOR)
  public void setAdvancedInvestor_JsonNullable(JsonNullable<AdvancedInvestorEnum> advancedInvestor) {
    this.advancedInvestor = advancedInvestor;
  }

  public void setAdvancedInvestor(AdvancedInvestorEnum advancedInvestor) {
    this.advancedInvestor = JsonNullable.<AdvancedInvestorEnum>of(advancedInvestor);
  }


  public InlineResponse20062DataTargetMarketKnowledgeAndExperience germany(InlineResponse20062DataTargetMarketKnowledgeAndExperienceGermany germany) {
    this.germany = germany;
    return this;
  }

   /**
   * Get germany
   * @return germany
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_GERMANY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public InlineResponse20062DataTargetMarketKnowledgeAndExperienceGermany getGermany() {
    return germany;
  }


  @JsonProperty(JSON_PROPERTY_GERMANY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setGermany(InlineResponse20062DataTargetMarketKnowledgeAndExperienceGermany germany) {
    this.germany = germany;
  }


  /**
   * Return true if this inline_response_200_62_data_targetMarket_knowledgeAndExperience object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    InlineResponse20062DataTargetMarketKnowledgeAndExperience inlineResponse20062DataTargetMarketKnowledgeAndExperience = (InlineResponse20062DataTargetMarketKnowledgeAndExperience) o;
    return equalsNullable(this.basicInvestor, inlineResponse20062DataTargetMarketKnowledgeAndExperience.basicInvestor) &&
        equalsNullable(this.informedInvestor, inlineResponse20062DataTargetMarketKnowledgeAndExperience.informedInvestor) &&
        equalsNullable(this.advancedInvestor, inlineResponse20062DataTargetMarketKnowledgeAndExperience.advancedInvestor) &&
        Objects.equals(this.germany, inlineResponse20062DataTargetMarketKnowledgeAndExperience.germany);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(hashCodeNullable(basicInvestor), hashCodeNullable(informedInvestor), hashCodeNullable(advancedInvestor), germany);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class InlineResponse20062DataTargetMarketKnowledgeAndExperience {\n");
    sb.append("    basicInvestor: ").append(toIndentedString(basicInvestor)).append("\n");
    sb.append("    informedInvestor: ").append(toIndentedString(informedInvestor)).append("\n");
    sb.append("    advancedInvestor: ").append(toIndentedString(advancedInvestor)).append("\n");
    sb.append("    germany: ").append(toIndentedString(germany)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

